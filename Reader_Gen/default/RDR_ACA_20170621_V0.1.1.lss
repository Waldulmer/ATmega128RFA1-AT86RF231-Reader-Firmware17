
RDR_ACA_20170621_V0.1.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000032a  00800200  00006c2e  00006cc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006c2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000007a3  0080052a  0080052a  00006fec  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006fec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007048  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a80  00000000  00000000  00007088  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00011d58  00000000  00000000  00007b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000047e5  00000000  00000000  00019860  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000a347  00000000  00000000  0001e045  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001c50  00000000  00000000  0002838c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002168c  00000000  00000000  00029fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000064a8  00000000  00000000  0004b668  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000900  00000000  00000000  00051b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000bbe3  00000000  00000000  00052410  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__ctors_end>
       4:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
       8:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
       c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      10:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      14:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      18:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      1c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      20:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      24:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      28:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      2c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      30:	0c 94 2f 27 	jmp	0x4e5e	; 0x4e5e <__vector_12>
      34:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      38:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      3c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      40:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      44:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      48:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      4c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      50:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      54:	0c 94 cb 15 	jmp	0x2b96	; 0x2b96 <__vector_21>
      58:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      5c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      60:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      64:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      68:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      6c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      70:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      74:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      78:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      7c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      80:	0c 94 94 26 	jmp	0x4d28	; 0x4d28 <__vector_32>
      84:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      88:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      8c:	0c 94 20 27 	jmp	0x4e40	; 0x4e40 <__vector_35>
      90:	0c 94 b9 27 	jmp	0x4f72	; 0x4f72 <__vector_36>
      94:	0c 94 fe 27 	jmp	0x4ffc	; 0x4ffc <__vector_37>
      98:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      9c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      a0:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      a4:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      a8:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      ac:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      b0:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      b4:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      b8:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      bc:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      c0:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      c4:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      c8:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      cc:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      d0:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      d4:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      d8:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      dc:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      e0:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      e4:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      e8:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      ec:	0c 94 1a 1e 	jmp	0x3c34	; 0x3c34 <__vector_59>
      f0:	0c 94 42 1e 	jmp	0x3c84	; 0x3c84 <__vector_60>
      f4:	0c 94 97 1e 	jmp	0x3d2e	; 0x3d2e <__vector_61>
      f8:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      fc:	0c 94 6a 1e 	jmp	0x3cd4	; 0x3cd4 <__vector_63>
     100:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
     104:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
     108:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
     10c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
     110:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
     114:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
     118:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
     11c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
     120:	96 04       	cpc	r9, r6
     122:	9c 04       	cpc	r9, r12
     124:	0b 08       	sbc	r0, r11
     126:	0b 08       	sbc	r0, r11
     128:	0b 08       	sbc	r0, r11
     12a:	0b 08       	sbc	r0, r11
     12c:	99 05       	cpc	r25, r9
     12e:	8c 06       	cpc	r8, r28
     130:	0b 08       	sbc	r0, r11
     132:	84 07       	cpc	r24, r20
     134:	0b 08       	sbc	r0, r11
     136:	e4 04       	cpc	r14, r4
     138:	0b 08       	sbc	r0, r11
     13a:	0b 08       	sbc	r0, r11
     13c:	a1 06       	cpc	r10, r17
     13e:	00 08       	sbc	r0, r0
     140:	0b 08       	sbc	r0, r11
     142:	0b 08       	sbc	r0, r11
     144:	67 04       	cpc	r6, r7
     146:	94 07       	cpc	r25, r20
     148:	0b 08       	sbc	r0, r11
     14a:	0b 08       	sbc	r0, r11
     14c:	09 08       	sbc	r0, r9
     14e:	0e 07       	cpc	r16, r30
     150:	0b 08       	sbc	r0, r11
     152:	02 08       	sbc	r0, r2
     154:	0b 08       	sbc	r0, r11
     156:	0b 08       	sbc	r0, r11
     158:	0b 08       	sbc	r0, r11
     15a:	0b 08       	sbc	r0, r11
     15c:	99 05       	cpc	r25, r9
     15e:	06 08       	sbc	r0, r6
     160:	0b 08       	sbc	r0, r11
     162:	0b 08       	sbc	r0, r11
     164:	0b 08       	sbc	r0, r11
     166:	0b 08       	sbc	r0, r11
     168:	0b 08       	sbc	r0, r11
     16a:	0b 08       	sbc	r0, r11
     16c:	00 08       	sbc	r0, r0
     16e:	91 05       	cpc	r25, r1
     170:	02 10       	cpse	r0, r2
     172:	fc 0f       	add	r31, r28
     174:	f6 0f       	add	r31, r22
     176:	f0 0f       	add	r31, r16
     178:	ea 0f       	add	r30, r26
     17a:	e4 0f       	add	r30, r20
     17c:	de 0f       	add	r29, r30
     17e:	d8 0f       	add	r29, r24
     180:	d2 0f       	add	r29, r18
     182:	5d 10       	cpse	r5, r13
     184:	57 10       	cpse	r5, r7
     186:	51 10       	cpse	r5, r1
     188:	4b 10       	cpse	r4, r11
     18a:	45 10       	cpse	r4, r5
     18c:	3f 10       	cpse	r3, r15
     18e:	39 10       	cpse	r3, r9
     190:	33 10       	cpse	r3, r3
     192:	2d 10       	cpse	r2, r13
     194:	cf 14       	cp	r12, r15
     196:	cc 14       	cp	r12, r12
     198:	c9 14       	cp	r12, r9
     19a:	c6 14       	cp	r12, r6
     19c:	c3 14       	cp	r12, r3
     19e:	b4 14       	cp	r11, r4
     1a0:	b1 14       	cp	r11, r1
     1a2:	ae 14       	cp	r10, r14
     1a4:	ab 14       	cp	r10, r11
     1a6:	75 22       	and	r7, r21
     1a8:	d6 22       	and	r13, r22
     1aa:	d3 22       	and	r13, r19
     1ac:	d0 22       	and	r13, r16
     1ae:	67 22       	and	r6, r23
     1b0:	8e 22       	and	r8, r30
     1b2:	6e 22       	and	r6, r30
     1b4:	99 22       	and	r9, r25
     1b6:	a1 22       	and	r10, r17
     1b8:	c8 22       	and	r12, r24

000001ba <__trampolines_end>:
     1ba:	6e 61       	ori	r22, 0x1E	; 30
     1bc:	6e 00       	.word	0x006e	; ????

000001be <__c.2240>:
     1be:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ce:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1de:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ee:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1fe:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     20e:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     21e:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     22e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     23e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     24e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     25e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     26e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     27e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     28e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     29e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2ae:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002bc <pstr_nan>:
     2bc:	4e 41 4e                                            NAN

000002bf <pstr_inity>:
     2bf:	49 4e 49 54 59                                      INITY

000002c4 <pstr_inf>:
     2c4:	49 4e 46                                            INF

000002c7 <pwr_m10>:
     2c7:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     2d7:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000002df <pwr_p10>:
     2df:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     2ef:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000002f8 <__ctors_end>:
     2f8:	11 24       	eor	r1, r1
     2fa:	1f be       	out	0x3f, r1	; 63
     2fc:	c0 e0       	ldi	r28, 0x00	; 0
     2fe:	d0 e4       	ldi	r29, 0x40	; 64
     300:	de bf       	out	0x3e, r29	; 62
     302:	cd bf       	out	0x3d, r28	; 61

00000304 <__do_copy_data>:
     304:	15 e0       	ldi	r17, 0x05	; 5
     306:	a0 e0       	ldi	r26, 0x00	; 0
     308:	b2 e0       	ldi	r27, 0x02	; 2
     30a:	ee e2       	ldi	r30, 0x2E	; 46
     30c:	fc e6       	ldi	r31, 0x6C	; 108
     30e:	00 e0       	ldi	r16, 0x00	; 0
     310:	0b bf       	out	0x3b, r16	; 59
     312:	02 c0       	rjmp	.+4      	; 0x318 <__do_copy_data+0x14>
     314:	07 90       	elpm	r0, Z+
     316:	0d 92       	st	X+, r0
     318:	aa 32       	cpi	r26, 0x2A	; 42
     31a:	b1 07       	cpc	r27, r17
     31c:	d9 f7       	brne	.-10     	; 0x314 <__do_copy_data+0x10>

0000031e <__do_clear_bss>:
     31e:	2c e0       	ldi	r18, 0x0C	; 12
     320:	aa e2       	ldi	r26, 0x2A	; 42
     322:	b5 e0       	ldi	r27, 0x05	; 5
     324:	01 c0       	rjmp	.+2      	; 0x328 <.do_clear_bss_start>

00000326 <.do_clear_bss_loop>:
     326:	1d 92       	st	X+, r1

00000328 <.do_clear_bss_start>:
     328:	ad 3c       	cpi	r26, 0xCD	; 205
     32a:	b2 07       	cpc	r27, r18
     32c:	e1 f7       	brne	.-8      	; 0x326 <.do_clear_bss_loop>
     32e:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <main>
     332:	0c 94 15 36 	jmp	0x6c2a	; 0x6c2a <_exit>

00000336 <__bad_interrupt>:
     336:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000033a <ledoff1>:
				Buzzer_off();
				_delay_us(200);
			}
			_delay_ms(25);
		}
	}
     33a:	a0 98       	cbi	0x14, 0	; 20
     33c:	08 95       	ret

0000033e <ledoff2>:
     33e:	a1 98       	cbi	0x14, 1	; 20
     340:	08 95       	ret

00000342 <ValidationTimeout>:
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <VALIDATION_TIMEOUT>
     348:	08 95       	ret

0000034a <CommTimeOut>:
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	80 93 2f 05 	sts	0x052F, r24	; 0x80052f <TOFlag>
     350:	e4 e3       	ldi	r30, 0x34	; 52
     352:	f9 e0       	ldi	r31, 0x09	; 9
     354:	80 81       	ld	r24, Z
     356:	8f 7b       	andi	r24, 0xBF	; 191
     358:	80 83       	st	Z, r24
     35a:	08 95       	ret

0000035c <KeypressTimeOut>:
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <KPTOFlag>
     362:	08 95       	ret

00000364 <SetupTimeout>:
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <SETUP_TIMEOUT>
     36a:	08 95       	ret

0000036c <SetDeviceState>:
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	80 93 b9 09 	sts	0x09B9, r24	; 0x8009b9 <ucDeviceStateFlag>
     372:	08 95       	ret

00000374 <appStartScan>:
     374:	8f ef       	ldi	r24, 0xFF	; 255
     376:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <macInit>
     37a:	0c 94 3b 25 	jmp	0x4a76	; 0x4a76 <macScan>

0000037e <appAssociate>:
     37e:	e1 eb       	ldi	r30, 0xB1	; 177
     380:	fc e0       	ldi	r31, 0x0C	; 12
     382:	65 81       	ldd	r22, Z+5	; 0x05
     384:	83 81       	ldd	r24, Z+3	; 0x03
     386:	94 81       	ldd	r25, Z+4	; 0x04
     388:	0c 94 e7 1f 	jmp	0x3fce	; 0x3fce <macAssociate>

0000038c <appPingReq>:
     38c:	bc 01       	movw	r22, r24
     38e:	83 e0       	ldi	r24, 0x03	; 3
     390:	0c 94 e3 21 	jmp	0x43c6	; 0x43c6 <macPing>

00000394 <appPingRsp>:
     394:	0e 94 a2 1b 	call	0x3744	; 0x3744 <radioGetSavedRssiValue>
     398:	88 23       	and	r24, r24
     39a:	19 f0       	breq	.+6      	; 0x3a2 <appPingRsp+0xe>
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	80 93 44 0c 	sts	0x0C44, r24	; 0x800c44 <macConfig+0x8>
     3a2:	08 95       	ret

000003a4 <appPacketSendSucceed>:
     3a4:	20 91 51 0c 	lds	r18, 0x0C51	; 0x800c51 <macConfig+0x15>
     3a8:	30 91 52 0c 	lds	r19, 0x0C52	; 0x800c52 <macConfig+0x16>
     3ac:	80 91 4b 0c 	lds	r24, 0x0C4B	; 0x800c4b <macConfig+0xf>
     3b0:	90 91 4c 0c 	lds	r25, 0x0C4C	; 0x800c4c <macConfig+0x10>
     3b4:	28 17       	cp	r18, r24
     3b6:	39 07       	cpc	r19, r25
     3b8:	11 f4       	brne	.+4      	; 0x3be <appPacketSendSucceed+0x1a>
     3ba:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <failCount>
     3be:	08 95       	ret

000003c0 <appPacketSendAccessFail>:
     3c0:	08 95       	ret

000003c2 <appPacketSendFailed>:
     3c2:	cf 93       	push	r28
     3c4:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <macIsScanning>
     3c8:	81 11       	cpse	r24, r1
     3ca:	3e c0       	rjmp	.+124    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     3cc:	20 91 4b 0c 	lds	r18, 0x0C4B	; 0x800c4b <macConfig+0xf>
     3d0:	30 91 4c 0c 	lds	r19, 0x0C4C	; 0x800c4c <macConfig+0x10>
     3d4:	c1 e0       	ldi	r28, 0x01	; 1
     3d6:	80 91 51 0c 	lds	r24, 0x0C51	; 0x800c51 <macConfig+0x15>
     3da:	90 91 52 0c 	lds	r25, 0x0C52	; 0x800c52 <macConfig+0x16>
     3de:	82 17       	cp	r24, r18
     3e0:	93 07       	cpc	r25, r19
     3e2:	11 f0       	breq	.+4      	; 0x3e8 <appPacketSendFailed+0x26>
     3e4:	c0 e0       	ldi	r28, 0x00	; 0
     3e6:	05 c0       	rjmp	.+10     	; 0x3f2 <appPacketSendFailed+0x30>
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	50 e0       	ldi	r21, 0x00	; 0
     3ec:	60 e0       	ldi	r22, 0x00	; 0
     3ee:	0e 94 62 21 	call	0x42c4	; 0x42c4 <macDataRequest>
     3f2:	80 91 2c 05 	lds	r24, 0x052C	; 0x80052c <failCount>
     3f6:	8f 5f       	subi	r24, 0xFF	; 255
     3f8:	80 93 2c 05 	sts	0x052C, r24	; 0x80052c <failCount>
     3fc:	cc 23       	and	r28, r28
     3fe:	a9 f0       	breq	.+42     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     400:	10 92 44 0c 	sts	0x0C44, r1	; 0x800c44 <macConfig+0x8>
     404:	88 e0       	ldi	r24, 0x08	; 8
     406:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <radioRandom>
     40a:	28 2f       	mov	r18, r24
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	2e 5c       	subi	r18, 0xCE	; 206
     410:	3f 4f       	sbci	r19, 0xFF	; 255
     412:	4e e1       	ldi	r20, 0x1E	; 30
     414:	42 9f       	mul	r20, r18
     416:	c0 01       	movw	r24, r0
     418:	43 9f       	mul	r20, r19
     41a:	90 0d       	add	r25, r0
     41c:	11 24       	eor	r1, r1
     41e:	6a eb       	ldi	r22, 0xBA	; 186
     420:	71 e0       	ldi	r23, 0x01	; 1
     422:	88 51       	subi	r24, 0x18	; 24
     424:	9c 4f       	sbci	r25, 0xFC	; 252
     426:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <macSetAlarm>
     42a:	80 91 51 0c 	lds	r24, 0x0C51	; 0x800c51 <macConfig+0x15>
     42e:	90 91 52 0c 	lds	r25, 0x0C52	; 0x800c52 <macConfig+0x16>
     432:	0e 94 39 20 	call	0x4072	; 0x4072 <macIsChild>
     436:	88 23       	and	r24, r24
     438:	39 f0       	breq	.+14     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     43a:	80 91 51 0c 	lds	r24, 0x0C51	; 0x800c51 <macConfig+0x15>
     43e:	90 91 52 0c 	lds	r25, 0x0C52	; 0x800c52 <macConfig+0x16>
     442:	cf 91       	pop	r28
     444:	0c 94 8c 20 	jmp	0x4118	; 0x4118 <macRemoveChild>
     448:	cf 91       	pop	r28
     44a:	08 95       	ret

0000044c <appDataIndication>:
     44c:	80 91 38 0b 	lds	r24, 0x0B38	; 0x800b38 <mac_buffer_rx>
     450:	10 92 0f 0b 	sts	0x0B0F, r1	; 0x800b0f <ucSendDataSize>
     454:	88 23       	and	r24, r24
     456:	11 f1       	breq	.+68     	; 0x49c <appDataIndication+0x50>
     458:	80 91 46 0b 	lds	r24, 0x0B46	; 0x800b46 <mac_buffer_rx+0xe>
     45c:	8f 77       	andi	r24, 0x7F	; 127
     45e:	81 30       	cpi	r24, 0x01	; 1
     460:	e9 f4       	brne	.+58     	; 0x49c <appDataIndication+0x50>
     462:	80 91 47 0b 	lds	r24, 0x0B47	; 0x800b47 <mac_buffer_rx+0xf>
     466:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <ucDataLength.4358>
     46a:	90 e8       	ldi	r25, 0x80	; 128
     46c:	e6 e3       	ldi	r30, 0x36	; 54
     46e:	f9 e0       	ldi	r31, 0x09	; 9
     470:	df 01       	movw	r26, r30
     472:	1d 92       	st	X+, r1
     474:	9a 95       	dec	r25
     476:	e9 f7       	brne	.-6      	; 0x472 <appDataIndication+0x26>
     478:	a8 e4       	ldi	r26, 0x48	; 72
     47a:	bb e0       	ldi	r27, 0x0B	; 11
     47c:	9f 01       	movw	r18, r30
     47e:	9e 2f       	mov	r25, r30
     480:	92 1b       	sub	r25, r18
     482:	98 17       	cp	r25, r24
     484:	18 f4       	brcc	.+6      	; 0x48c <appDataIndication+0x40>
     486:	9d 91       	ld	r25, X+
     488:	91 93       	st	Z+, r25
     48a:	f9 cf       	rjmp	.-14     	; 0x47e <appDataIndication+0x32>
     48c:	86 e3       	ldi	r24, 0x36	; 54
     48e:	99 e0       	ldi	r25, 0x09	; 9
     490:	0e 94 b9 09 	call	0x1372	; 0x1372 <extractIncomingMessage>
     494:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
     498:	10 92 33 09 	sts	0x0933, r1	; 0x800933 <ucNumberOfRetry>
     49c:	08 95       	ret

0000049e <appChildAssociated>:
     49e:	a1 9a       	sbi	0x14, 1	; 20
     4a0:	6f e9       	ldi	r22, 0x9F	; 159
     4a2:	71 e0       	ldi	r23, 0x01	; 1
     4a4:	8a e0       	ldi	r24, 0x0A	; 10
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	0c 94 cd 25 	jmp	0x4b9a	; 0x4b9a <macSetAlarm>

000004ac <appAssociateConfirm>:
     4ac:	81 11       	cpse	r24, r1
     4ae:	07 c0       	rjmp	.+14     	; 0x4be <appAssociateConfirm+0x12>
     4b0:	a1 9a       	sbi	0x14, 1	; 20
     4b2:	6f e9       	ldi	r22, 0x9F	; 159
     4b4:	71 e0       	ldi	r23, 0x01	; 1
     4b6:	8a e0       	ldi	r24, 0x0A	; 10
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	0c 94 cd 25 	jmp	0x4b9a	; 0x4b9a <macSetAlarm>
     4be:	08 95       	ret

000004c0 <appScanConfirm>:
     4c0:	88 23       	and	r24, r24
     4c2:	29 f0       	breq	.+10     	; 0x4ce <appScanConfirm+0xe>
     4c4:	6f eb       	ldi	r22, 0xBF	; 191
     4c6:	71 e0       	ldi	r23, 0x01	; 1
     4c8:	8e e1       	ldi	r24, 0x1E	; 30
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	0e c0       	rjmp	.+28     	; 0x4ea <appScanConfirm+0x2a>
     4ce:	88 e0       	ldi	r24, 0x08	; 8
     4d0:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <radioRandom>
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	05 96       	adiw	r24, 0x05	; 5
     4d8:	6a eb       	ldi	r22, 0xBA	; 186
     4da:	71 e0       	ldi	r23, 0x01	; 1
     4dc:	2a e0       	ldi	r18, 0x0A	; 10
     4de:	ac 01       	movw	r20, r24
     4e0:	24 9f       	mul	r18, r20
     4e2:	c0 01       	movw	r24, r0
     4e4:	25 9f       	mul	r18, r21
     4e6:	90 0d       	add	r25, r0
     4e8:	11 24       	eor	r1, r1
     4ea:	0c 94 cd 25 	jmp	0x4b9a	; 0x4b9a <macSetAlarm>

000004ee <checkEeprom>:
     4ee:	8f 92       	push	r8
     4f0:	9f 92       	push	r9
     4f2:	af 92       	push	r10
     4f4:	bf 92       	push	r11
     4f6:	cf 92       	push	r12
     4f8:	df 92       	push	r13
     4fa:	ef 92       	push	r14
     4fc:	ff 92       	push	r15
     4fe:	0f 93       	push	r16
     500:	1f 93       	push	r17
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
     506:	cd b7       	in	r28, 0x3d	; 61
     508:	de b7       	in	r29, 0x3e	; 62
     50a:	62 97       	sbiw	r28, 0x12	; 18
     50c:	0f b6       	in	r0, 0x3f	; 63
     50e:	f8 94       	cli
     510:	de bf       	out	0x3e, r29	; 62
     512:	0f be       	out	0x3f, r0	; 63
     514:	cd bf       	out	0x3d, r28	; 61
     516:	87 e0       	ldi	r24, 0x07	; 7
     518:	89 8b       	std	Y+17, r24	; 0x11
     51a:	ae 01       	movw	r20, r28
     51c:	47 5f       	subi	r20, 0xF7	; 247
     51e:	5f 4f       	sbci	r21, 0xFF	; 255
     520:	68 e0       	ldi	r22, 0x08	; 8
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <halGetEeprom>
     52a:	89 84       	ldd	r8, Y+9	; 0x09
     52c:	9a 84       	ldd	r9, Y+10	; 0x0a
     52e:	ab 84       	ldd	r10, Y+11	; 0x0b
     530:	bc 84       	ldd	r11, Y+12	; 0x0c
     532:	cd 84       	ldd	r12, Y+13	; 0x0d
     534:	de 84       	ldd	r13, Y+14	; 0x0e
     536:	ef 84       	ldd	r14, Y+15	; 0x0f
     538:	f8 88       	ldd	r15, Y+16	; 0x10
     53a:	5f ef       	ldi	r21, 0xFF	; 255
     53c:	85 16       	cp	r8, r21
     53e:	95 06       	cpc	r9, r21
     540:	a5 06       	cpc	r10, r21
     542:	b5 06       	cpc	r11, r21
     544:	09 f0       	breq	.+2      	; 0x548 <checkEeprom+0x5a>
     546:	70 c0       	rjmp	.+224    	; 0x628 <checkEeprom+0x13a>
     548:	94 01       	movw	r18, r8
     54a:	a5 01       	movw	r20, r10
     54c:	b6 01       	movw	r22, r12
     54e:	c7 01       	movw	r24, r14
     550:	00 e2       	ldi	r16, 0x20	; 32
     552:	0e 94 1c 2e 	call	0x5c38	; 0x5c38 <__lshrdi3>
     556:	69 01       	movw	r12, r18
     558:	7a 01       	movw	r14, r20
     55a:	2f 3f       	cpi	r18, 0xFF	; 255
     55c:	3f 4f       	sbci	r19, 0xFF	; 255
     55e:	4f 4f       	sbci	r20, 0xFF	; 255
     560:	5f 4f       	sbci	r21, 0xFF	; 255
     562:	61 05       	cpc	r22, r1
     564:	71 05       	cpc	r23, r1
     566:	81 05       	cpc	r24, r1
     568:	91 05       	cpc	r25, r1
     56a:	09 f0       	breq	.+2      	; 0x56e <checkEeprom+0x80>
     56c:	50 c0       	rjmp	.+160    	; 0x60e <checkEeprom+0x120>
     56e:	8e 01       	movw	r16, r28
     570:	0f 5f       	subi	r16, 0xFF	; 255
     572:	1f 4f       	sbci	r17, 0xFF	; 255
     574:	88 e0       	ldi	r24, 0x08	; 8
     576:	f8 01       	movw	r30, r16
     578:	11 92       	st	Z+, r1
     57a:	8a 95       	dec	r24
     57c:	e9 f7       	brne	.-6      	; 0x578 <checkEeprom+0x8a>
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	0e 94 1e 1c 	call	0x383c	; 0x383c <radioInit>
     584:	86 e0       	ldi	r24, 0x06	; 6
     586:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <radioSetTrxState>
     58a:	78 01       	movw	r14, r16
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	dd 24       	eor	r13, r13
     590:	da 94       	dec	r13
     592:	34 30       	cpi	r19, 0x04	; 4
     594:	18 f4       	brcc	.+6      	; 0x59c <checkEeprom+0xae>
     596:	f7 01       	movw	r30, r14
     598:	d0 82       	st	Z, r13
     59a:	1a c0       	rjmp	.+52     	; 0x5d0 <checkEeprom+0xe2>
     59c:	3a 8b       	std	Y+18, r19	; 0x12
     59e:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <radioGetTrxState>
     5a2:	8f 7e       	andi	r24, 0xEF	; 239
     5a4:	3a 89       	ldd	r19, Y+18	; 0x12
     5a6:	86 30       	cpi	r24, 0x06	; 6
     5a8:	99 f4       	brne	.+38     	; 0x5d0 <checkEeprom+0xe2>
     5aa:	44 e0       	ldi	r20, 0x04	; 4
     5ac:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <__TEXT_REGION_LENGTH__+0x7e0146>
     5b0:	f7 01       	movw	r30, r14
     5b2:	90 81       	ld	r25, Z
     5b4:	f4 e0       	ldi	r31, 0x04	; 4
     5b6:	9f 9f       	mul	r25, r31
     5b8:	c0 01       	movw	r24, r0
     5ba:	11 24       	eor	r1, r1
     5bc:	92 2f       	mov	r25, r18
     5be:	90 76       	andi	r25, 0x60	; 96
     5c0:	92 95       	swap	r25
     5c2:	96 95       	lsr	r25
     5c4:	97 70       	andi	r25, 0x07	; 7
     5c6:	89 2b       	or	r24, r25
     5c8:	f7 01       	movw	r30, r14
     5ca:	80 83       	st	Z, r24
     5cc:	41 50       	subi	r20, 0x01	; 1
     5ce:	71 f7       	brne	.-36     	; 0x5ac <checkEeprom+0xbe>
     5d0:	3f 5f       	subi	r19, 0xFF	; 255
     5d2:	ff ef       	ldi	r31, 0xFF	; 255
     5d4:	ef 1a       	sub	r14, r31
     5d6:	ff 0a       	sbc	r15, r31
     5d8:	38 30       	cpi	r19, 0x08	; 8
     5da:	d9 f6       	brne	.-74     	; 0x592 <checkEeprom+0xa4>
     5dc:	a8 01       	movw	r20, r16
     5de:	68 e0       	ldi	r22, 0x08	; 8
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <halPutEeprom>
     5e8:	ae 01       	movw	r20, r28
     5ea:	4f 5e       	subi	r20, 0xEF	; 239
     5ec:	5f 4f       	sbci	r21, 0xFF	; 255
     5ee:	62 e0       	ldi	r22, 0x02	; 2
     5f0:	82 e2       	ldi	r24, 0x22	; 34
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <halPutEeprom>
     5f8:	60 e0       	ldi	r22, 0x00	; 0
     5fa:	8c e6       	ldi	r24, 0x6C	; 108
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	0e 94 9a 35 	call	0x6b34	; 0x6b34 <eeprom_update_byte>
     602:	60 e0       	ldi	r22, 0x00	; 0
     604:	87 e7       	ldi	r24, 0x77	; 119
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	0e 94 9a 35 	call	0x6b34	; 0x6b34 <eeprom_update_byte>
     60c:	0d c0       	rjmp	.+26     	; 0x628 <checkEeprom+0x13a>
     60e:	cd 28       	or	r12, r13
     610:	ce 28       	or	r12, r14
     612:	cf 28       	or	r12, r15
     614:	49 f0       	breq	.+18     	; 0x628 <checkEeprom+0x13a>
     616:	ae 01       	movw	r20, r28
     618:	4f 5e       	subi	r20, 0xEF	; 239
     61a:	5f 4f       	sbci	r21, 0xFF	; 255
     61c:	62 e0       	ldi	r22, 0x02	; 2
     61e:	82 e2       	ldi	r24, 0x22	; 34
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <halPutEeprom>
     626:	00 00       	nop
     628:	62 96       	adiw	r28, 0x12	; 18
     62a:	0f b6       	in	r0, 0x3f	; 63
     62c:	f8 94       	cli
     62e:	de bf       	out	0x3e, r29	; 62
     630:	0f be       	out	0x3f, r0	; 63
     632:	cd bf       	out	0x3d, r28	; 61
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	1f 91       	pop	r17
     63a:	0f 91       	pop	r16
     63c:	ff 90       	pop	r15
     63e:	ef 90       	pop	r14
     640:	df 90       	pop	r13
     642:	cf 90       	pop	r12
     644:	bf 90       	pop	r11
     646:	af 90       	pop	r10
     648:	9f 90       	pop	r9
     64a:	8f 90       	pop	r8
     64c:	08 95       	ret

0000064e <appInit>:
     64e:	0f 93       	push	r16
     650:	1f 93       	push	r17
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
     656:	1f 92       	push	r1
     658:	cd b7       	in	r28, 0x3d	; 61
     65a:	de b7       	in	r29, 0x3e	; 62
     65c:	83 b3       	in	r24, 0x13	; 19
     65e:	87 60       	ori	r24, 0x07	; 7
     660:	83 bb       	out	0x13, r24	; 19
     662:	84 b3       	in	r24, 0x14	; 20
     664:	88 7f       	andi	r24, 0xF8	; 248
     666:	84 bb       	out	0x14, r24	; 20
     668:	84 b3       	in	r24, 0x14	; 20
     66a:	87 60       	ori	r24, 0x07	; 7
     66c:	84 bb       	out	0x14, r24	; 20
     66e:	6b 9a       	sbi	0x0d, 3	; 13
     670:	73 98       	cbi	0x0e, 3	; 14
     672:	84 b3       	in	r24, 0x14	; 20
     674:	88 7f       	andi	r24, 0xF8	; 248
     676:	84 bb       	out	0x14, r24	; 20
     678:	a0 9a       	sbi	0x14, 0	; 20
     67a:	83 e1       	ldi	r24, 0x13	; 19
     67c:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
     680:	6d e9       	ldi	r22, 0x9D	; 157
     682:	71 e0       	ldi	r23, 0x01	; 1
     684:	89 e1       	ldi	r24, 0x19	; 25
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <macSetAlarm>
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	80 93 b9 09 	sts	0x09B9, r24	; 0x8009b9 <ucDeviceStateFlag>
     692:	0e 94 77 02 	call	0x4ee	; 0x4ee <checkEeprom>
     696:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <initReader>
     69a:	66 eb       	ldi	r22, 0xB6	; 182
     69c:	75 e1       	ldi	r23, 0x15	; 21
     69e:	88 e2       	ldi	r24, 0x28	; 40
     6a0:	93 e2       	ldi	r25, 0x23	; 35
     6a2:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <macSetAlarm>
     6a6:	08 2f       	mov	r16, r24
     6a8:	10 e0       	ldi	r17, 0x00	; 0
     6aa:	90 91 b8 09 	lds	r25, 0x09B8	; 0x8009b8 <ucMachineWait>
     6ae:	91 11       	cpse	r25, r1
     6b0:	1e c0       	rjmp	.+60     	; 0x6ee <appInit+0xa0>
     6b2:	90 91 b9 09 	lds	r25, 0x09B9	; 0x8009b9 <ucDeviceStateFlag>
     6b6:	91 30       	cpi	r25, 0x01	; 1
     6b8:	51 f4       	brne	.+20     	; 0x6ce <appInit+0x80>
     6ba:	0e 94 51 12 	call	0x24a2	; 0x24a2 <SQACAInitializationSequence>
     6be:	66 eb       	ldi	r22, 0xB6	; 182
     6c0:	71 e0       	ldi	r23, 0x01	; 1
     6c2:	8c e2       	ldi	r24, 0x2C	; 44
     6c4:	91 e0       	ldi	r25, 0x01	; 1
     6c6:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <macSetAlarm>
     6ca:	18 2f       	mov	r17, r24
     6cc:	ee cf       	rjmp	.-36     	; 0x6aa <appInit+0x5c>
     6ce:	92 30       	cpi	r25, 0x02	; 2
     6d0:	39 f4       	brne	.+14     	; 0x6e0 <appInit+0x92>
     6d2:	80 2f       	mov	r24, r16
     6d4:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <macTimerEnd>
     6d8:	81 2f       	mov	r24, r17
     6da:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <macTimerEnd>
     6de:	07 c0       	rjmp	.+14     	; 0x6ee <appInit+0xa0>
     6e0:	0e 94 fd 21 	call	0x43fa	; 0x43fa <mac_event_pending>
     6e4:	88 23       	and	r24, r24
     6e6:	09 f3       	breq	.-62     	; 0x6aa <appInit+0x5c>
     6e8:	0e 94 51 22 	call	0x44a2	; 0x44a2 <macTask>
     6ec:	de cf       	rjmp	.-68     	; 0x6aa <appInit+0x5c>
     6ee:	66 eb       	ldi	r22, 0xB6	; 182
     6f0:	71 e0       	ldi	r23, 0x01	; 1
     6f2:	8c e2       	ldi	r24, 0x2C	; 44
     6f4:	91 e0       	ldi	r25, 0x01	; 1
     6f6:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <macSetAlarm>
     6fa:	ae 01       	movw	r20, r28
     6fc:	4f 5f       	subi	r20, 0xFF	; 255
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	61 e0       	ldi	r22, 0x01	; 1
     702:	8e e1       	ldi	r24, 0x1E	; 30
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <halGetEeprom>
     70a:	89 81       	ldd	r24, Y+1	; 0x01
     70c:	90 91 f5 0a 	lds	r25, 0x0AF5	; 0x800af5 <SQACAMachineStatus>
     710:	8f 3f       	cpi	r24, 0xFF	; 255
     712:	79 f4       	brne	.+30     	; 0x732 <appInit+0xe4>
     714:	99 23       	and	r25, r25
     716:	69 f0       	breq	.+26     	; 0x732 <appInit+0xe4>
     718:	45 ef       	ldi	r20, 0xF5	; 245
     71a:	5a e0       	ldi	r21, 0x0A	; 10
     71c:	61 e0       	ldi	r22, 0x01	; 1
     71e:	8e e1       	ldi	r24, 0x1E	; 30
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <halPutEeprom>
     726:	46 ef       	ldi	r20, 0xF6	; 246
     728:	5a e0       	ldi	r21, 0x0A	; 10
     72a:	61 e0       	ldi	r22, 0x01	; 1
     72c:	8f e1       	ldi	r24, 0x1F	; 31
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	1a c0       	rjmp	.+52     	; 0x766 <appInit+0x118>
     732:	98 17       	cp	r25, r24
     734:	d1 f0       	breq	.+52     	; 0x76a <appInit+0x11c>
     736:	45 ef       	ldi	r20, 0xF5	; 245
     738:	5a e0       	ldi	r21, 0x0A	; 10
     73a:	61 e0       	ldi	r22, 0x01	; 1
     73c:	8e e1       	ldi	r24, 0x1E	; 30
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <halPutEeprom>
     744:	46 ef       	ldi	r20, 0xF6	; 246
     746:	5a e0       	ldi	r21, 0x0A	; 10
     748:	61 e0       	ldi	r22, 0x01	; 1
     74a:	8f e1       	ldi	r24, 0x1F	; 31
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <halPutEeprom>
     752:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <ReaderStateFlag>
     756:	82 60       	ori	r24, 0x02	; 2
     758:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <ReaderStateFlag>
     75c:	44 e3       	ldi	r20, 0x34	; 52
     75e:	59 e0       	ldi	r21, 0x09	; 9
     760:	61 e0       	ldi	r22, 0x01	; 1
     762:	82 e2       	ldi	r24, 0x22	; 34
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <halPutEeprom>
     76a:	0e 94 ba 01 	call	0x374	; 0x374 <appStartScan>
     76e:	80 91 b9 09 	lds	r24, 0x09B9	; 0x8009b9 <ucDeviceStateFlag>
     772:	82 30       	cpi	r24, 0x02	; 2
     774:	39 f4       	brne	.+14     	; 0x784 <appInit+0x136>
     776:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <displaySQReaderVersion>
     77a:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <ReaderStateFlag>
     77e:	81 ff       	sbrs	r24, 1
     780:	0e 94 63 12 	call	0x24c6	; 0x24c6 <getSQReaderMachineSetup>
     784:	00 00       	nop
     786:	0f 90       	pop	r0
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	1f 91       	pop	r17
     78e:	0f 91       	pop	r16
     790:	08 95       	ret

00000792 <GetParam>:
     792:	ef 92       	push	r14
     794:	ff 92       	push	r15
     796:	0f 93       	push	r16
     798:	1f 93       	push	r17
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
     79e:	7a 01       	movw	r14, r20
     7a0:	fb 01       	movw	r30, r22
     7a2:	01 90       	ld	r0, Z+
     7a4:	00 20       	and	r0, r0
     7a6:	e9 f7       	brne	.-6      	; 0x7a2 <GetParam+0x10>
     7a8:	31 97       	sbiw	r30, 0x01	; 1
     7aa:	ef 01       	movw	r28, r30
     7ac:	c6 1b       	sub	r28, r22
     7ae:	d7 0b       	sbc	r29, r23
     7b0:	0e 94 50 32 	call	0x64a0	; 0x64a0 <strstr>
     7b4:	00 97       	sbiw	r24, 0x00	; 0
     7b6:	c1 f0       	breq	.+48     	; 0x7e8 <GetParam+0x56>
     7b8:	8c 01       	movw	r16, r24
     7ba:	0c 0f       	add	r16, r28
     7bc:	11 1d       	adc	r17, r1
     7be:	b7 01       	movw	r22, r14
     7c0:	c8 01       	movw	r24, r16
     7c2:	0e 94 50 32 	call	0x64a0	; 0x64a0 <strstr>
     7c6:	00 97       	sbiw	r24, 0x00	; 0
     7c8:	79 f0       	breq	.+30     	; 0x7e8 <GetParam+0x56>
     7ca:	ec 01       	movw	r28, r24
     7cc:	c0 1b       	sub	r28, r16
     7ce:	d1 0b       	sbc	r29, r17
     7d0:	ae 01       	movw	r20, r28
     7d2:	b8 01       	movw	r22, r16
     7d4:	8e e3       	ldi	r24, 0x3E	; 62
     7d6:	98 e0       	ldi	r25, 0x08	; 8
     7d8:	0e 94 12 32 	call	0x6424	; 0x6424 <memcpy>
     7dc:	c2 5c       	subi	r28, 0xC2	; 194
     7de:	d7 4f       	sbci	r29, 0xF7	; 247
     7e0:	18 82       	st	Y, r1
     7e2:	8e e3       	ldi	r24, 0x3E	; 62
     7e4:	98 e0       	ldi	r25, 0x08	; 8
     7e6:	02 c0       	rjmp	.+4      	; 0x7ec <GetParam+0x5a>
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	1f 91       	pop	r17
     7f2:	0f 91       	pop	r16
     7f4:	ff 90       	pop	r15
     7f6:	ef 90       	pop	r14
     7f8:	08 95       	ret

000007fa <DevicePoll>:
	/**
	Initialize communication with the ACA machines
	*/
	void DevicePoll(void)
	{
		SQACAMachineStatusCommSequence();					//SQ Payment System Driven Vending
     7fa:	0e 94 49 12 	call	0x2492	; 0x2492 <SQACAMachineStatusCommSequence>
		macSetAlarm(DEVICE_POLL_PERIOD,SetDeviceState);		//300ms
     7fe:	66 eb       	ldi	r22, 0xB6	; 182
     800:	71 e0       	ldi	r23, 0x01	; 1
     802:	8c e2       	ldi	r24, 0x2C	; 44
     804:	91 e0       	ldi	r25, 0x01	; 1
     806:	0c 94 cd 25 	jmp	0x4b9a	; 0x4b9a <macSetAlarm>

0000080a <appTask>:
	/**
	@brief This is the main loop task for the Application.  Called by the main
	"forever" loop.  This function processes application tasks
	*/
	void appTask(void)				//called by appInit()
	{
     80a:	8f 92       	push	r8
     80c:	9f 92       	push	r9
     80e:	af 92       	push	r10
     810:	bf 92       	push	r11
     812:	cf 92       	push	r12
     814:	df 92       	push	r13
     816:	ef 92       	push	r14
     818:	ff 92       	push	r15
     81a:	0f 93       	push	r16
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	cd b7       	in	r28, 0x3d	; 61
     824:	de b7       	in	r29, 0x3e	; 62
     826:	e5 97       	sbiw	r28, 0x35	; 53
     828:	0f b6       	in	r0, 0x3f	; 63
     82a:	f8 94       	cli
     82c:	de bf       	out	0x3e, r29	; 62
     82e:	0f be       	out	0x3f, r0	; 63
     830:	cd bf       	out	0x3d, r28	; 61
		//vars declaration
		ucSendDataSize = 0;
     832:	10 92 0f 0b 	sts	0x0B0F, r1	; 0x800b0f <ucSendDataSize>
		
		u8 k, l;
		u8  Setup[30];
		u8 n = 0;
		
		u8 cardNum[10] = {0};
     836:	8e 01       	movw	r16, r28
     838:	01 5e       	subi	r16, 0xE1	; 225
     83a:	1f 4f       	sbci	r17, 0xFF	; 255
     83c:	8a e0       	ldi	r24, 0x0A	; 10
     83e:	d8 01       	movw	r26, r16
     840:	1d 92       	st	X+, r1
     842:	8a 95       	dec	r24
     844:	e9 f7       	brne	.-6      	; 0x840 <appTask+0x36>
		
		#ifdef MACHINE_CONNECTED
		
		if(ucDeviceStateFlag == DEVICE_STATUS_NEEDED)	//do machine status communication every 1/2 second
     846:	80 91 b9 09 	lds	r24, 0x09B9	; 0x8009b9 <ucDeviceStateFlag>
     84a:	81 30       	cpi	r24, 0x01	; 1
     84c:	51 f5       	brne	.+84     	; 0x8a2 <appTask+0x98>
		{
			DevicePoll();
     84e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <DevicePoll>
			
			
			//still online
			if (ucDeviceStateFlag == MACHINE_STATUS_ON)			//machine status 33, 41 online
     852:	80 91 b9 09 	lds	r24, 0x09B9	; 0x8009b9 <ucDeviceStateFlag>
     856:	82 30       	cpi	r24, 0x02	; 2
     858:	09 f5       	brne	.+66     	; 0x89c <appTask+0x92>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     85a:	ef e1       	ldi	r30, 0x1F	; 31
     85c:	fe e4       	ldi	r31, 0x4E	; 78
     85e:	31 97       	sbiw	r30, 0x01	; 1
     860:	f1 f7       	brne	.-4      	; 0x85e <appTask+0x54>
     862:	00 c0       	rjmp	.+0      	; 0x864 <appTask+0x5a>
     864:	00 00       	nop
			{
				_delay_ms(5);
				//invalid machinecode
				if (ReaderStateFlag.ReaderSetup == READER_SETUP_NEEDED)
     866:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <ReaderStateFlag>
     86a:	81 ff       	sbrs	r24, 1
     86c:	02 c0       	rjmp	.+4      	; 0x872 <appTask+0x68>
				{
					//Display "No Setup" message on machine
					displayMsg(SETUP_MSG);
     86e:	82 e0       	ldi	r24, 0x02	; 2
     870:	16 c0       	rjmp	.+44     	; 0x89e <appTask+0x94>
				}
				else if (((macConfig.associated == false) && (ReaderStateFlag.EnableOfflineTransaction == false)) || (ReaderStateFlag.MaxNumTransReached == true))
     872:	90 91 44 0c 	lds	r25, 0x0C44	; 0x800c44 <macConfig+0x8>
     876:	91 11       	cpse	r25, r1
     878:	02 c0       	rjmp	.+4      	; 0x87e <appTask+0x74>
     87a:	83 ff       	sbrs	r24, 3
     87c:	02 c0       	rjmp	.+4      	; 0x882 <appTask+0x78>
     87e:	84 ff       	sbrs	r24, 4
     880:	02 c0       	rjmp	.+4      	; 0x886 <appTask+0x7c>
				{
					//Display "Service message" message on machine
					displayMsg(SERVICE_MSG);
     882:	83 e0       	ldi	r24, 0x03	; 3
     884:	0c c0       	rjmp	.+24     	; 0x89e <appTask+0x94>
				}
				else if (ReaderStateFlag.Busy == true)
     886:	86 ff       	sbrs	r24, 6
     888:	0c c0       	rjmp	.+24     	; 0x8a2 <appTask+0x98>
				{
					//Display busy message
					if( OP != GET_BALANCE_FROM_SERVER ) // ****need to put op code in a queue****
     88a:	80 91 b7 09 	lds	r24, 0x09B7	; 0x8009b7 <OP>
     88e:	87 30       	cpi	r24, 0x07	; 7
     890:	19 f0       	breq	.+6      	; 0x898 <appTask+0x8e>
					{
						OP = GET_BALANCE_FROM_SERVER;
     892:	87 e0       	ldi	r24, 0x07	; 7
     894:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
					}
					displayMsg(BUSY_MSG);
     898:	84 e0       	ldi	r24, 0x04	; 4
     89a:	01 c0       	rjmp	.+2      	; 0x89e <appTask+0x94>
				}
			}
			else
			{
				//PPOS ToDo: machine is not online, print error message
				displayMsg(CABLE_MSG);
     89c:	86 e0       	ldi	r24, 0x06	; 6
     89e:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <displayMsg>
			}
		}
		
		#endif

		if(macConfig.associated == true || ReaderStateFlag.EnableOfflineTransaction == true) //  Don't bother running the app until the reader has associated
     8a2:	80 91 44 0c 	lds	r24, 0x0C44	; 0x800c44 <macConfig+0x8>
     8a6:	81 11       	cpse	r24, r1
     8a8:	04 c0       	rjmp	.+8      	; 0x8b2 <appTask+0xa8>
     8aa:	90 91 34 09 	lds	r25, 0x0934	; 0x800934 <ReaderStateFlag>
     8ae:	93 ff       	sbrs	r25, 3
     8b0:	b2 c3       	rjmp	.+1892   	; 0x1016 <appTask+0x80c>
		{
			//
			switch(OP)
     8b2:	e0 91 b7 09 	lds	r30, 0x09B7	; 0x8009b7 <OP>
     8b6:	4e 2f       	mov	r20, r30
     8b8:	50 e0       	ldi	r21, 0x00	; 0
     8ba:	fa 01       	movw	r30, r20
     8bc:	31 97       	sbiw	r30, 0x01	; 1
     8be:	e8 32       	cpi	r30, 0x28	; 40
     8c0:	f1 05       	cpc	r31, r1
     8c2:	08 f0       	brcs	.+2      	; 0x8c6 <appTask+0xbc>
     8c4:	a8 c3       	rjmp	.+1872   	; 0x1016 <appTask+0x80c>
     8c6:	e0 57       	subi	r30, 0x70	; 112
     8c8:	ff 4f       	sbci	r31, 0xFF	; 255
     8ca:	0c 94 11 2e 	jmp	0x5c22	; 0x5c22 <__tablejump2__>
			{
				//case #1 called by appInit
				case VALIDATE_READER:
				//TODO: fix machine type switch
				//
				if((ReaderStateFlag.EnableOfflineTransaction == true) && (ReaderStateFlag.ReaderSetup == READER_SETUP_DONE))
     8ce:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <ReaderStateFlag>
     8d2:	83 ff       	sbrs	r24, 3
     8d4:	04 c0       	rjmp	.+8      	; 0x8de <appTask+0xd4>
     8d6:	81 fd       	sbrc	r24, 1
     8d8:	02 c0       	rjmp	.+4      	; 0x8de <appTask+0xd4>
				{
					OP = INIT_READER;
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	94 c3       	rjmp	.+1832   	; 0x1006 <appTask+0x7fc>
				}
				else{
					
					if( ((ReaderStateFlag.ReaderSetup == READER_SETUP_NEEDED) || ( ReaderStateFlag.FirstRun == VIRGIN_READER)) && (SQACAMachineStatus.MachineType[0] != INVALID_MACHINE) )
     8de:	81 fb       	bst	r24, 1
     8e0:	99 27       	eor	r25, r25
     8e2:	90 f9       	bld	r25, 0
     8e4:	81 fd       	sbrc	r24, 1
     8e6:	02 c0       	rjmp	.+4      	; 0x8ec <appTask+0xe2>
     8e8:	80 ff       	sbrs	r24, 0
     8ea:	0b c0       	rjmp	.+22     	; 0x902 <appTask+0xf8>
     8ec:	20 91 f5 0a 	lds	r18, 0x0AF5	; 0x800af5 <SQACAMachineStatus>
     8f0:	22 23       	and	r18, r18
     8f2:	29 f0       	breq	.+10     	; 0x8fe <appTask+0xf4>
					{
						SETUP_TIMEOUT = true;
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <SETUP_TIMEOUT>
						OP = SETUP_REQUEST; //enable when setup supported by server
     8fa:	8a e0       	ldi	r24, 0x0A	; 10
     8fc:	84 c3       	rjmp	.+1800   	; 0x1006 <appTask+0x7fc>
						
					}
					else if( (ReaderStateFlag.ReaderSetup == READER_SETUP_DONE) && (ReaderStateFlag.ValidateSetup == VALIDATE_READER_SETUP) )
     8fe:	91 11       	cpse	r25, r1
     900:	8a c3       	rjmp	.+1812   	; 0x1016 <appTask+0x80c>
     902:	82 ff       	sbrs	r24, 2
     904:	ea cf       	rjmp	.-44     	; 0x8da <appTask+0xd0>
					{
						VALIDATION_TIMEOUT = false;
     906:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <VALIDATION_TIMEOUT>
						sendBOWValidationRequest();
     90a:	0e 94 1b 09 	call	0x1236	; 0x1236 <sendBOWValidationRequest>
						// Clear Rx Buffer
						memset(DataBuffer,0,sizeof(DataBuffer));
     90e:	80 e8       	ldi	r24, 0x80	; 128
     910:	e6 e3       	ldi	r30, 0x36	; 54
     912:	f9 e0       	ldi	r31, 0x09	; 9
     914:	df 01       	movw	r26, r30
     916:	1d 92       	st	X+, r1
     918:	8a 95       	dec	r24
     91a:	e9 f7       	brne	.-6      	; 0x916 <appTask+0x10c>
						
						macSetLongAlarm(SETUP_VALIDATION_TIMEOUT, ValidationTimeout); 		//check Every 15s
     91c:	61 ea       	ldi	r22, 0xA1	; 161
     91e:	71 e0       	ldi	r23, 0x01	; 1
     920:	8c e3       	ldi	r24, 0x3C	; 60
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <macSetLongAlarm>

						// Wait for validation package to arrive
						OP = VALIDATE_SETUP;
     928:	84 e1       	ldi	r24, 0x14	; 20
     92a:	6d c3       	rjmp	.+1754   	; 0x1006 <appTask+0x7fc>
				break;

				//case #2
				case INIT_READER:
				
				if( isMachineCycleRunning() )
     92c:	0e 94 40 12 	call	0x2480	; 0x2480 <isMachineCycleRunning>
     930:	88 23       	and	r24, r24
     932:	09 f4       	brne	.+2      	; 0x936 <appTask+0x12c>
     934:	65 c3       	rjmp	.+1738   	; 0x1000 <appTask+0x7f6>
     936:	70 c2       	rjmp	.+1248   	; 0xe18 <appTask+0x60e>
				break;

				//case #3 called by case #2 scan for card swipe
				case SCANNING:
				// Enable Heart beat routine
				if (uiFunctionEntered < (20 * (F_CPU/4000000)))
     938:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <uiFunctionEntered>
     93c:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <uiFunctionEntered+0x1>
     940:	80 35       	cpi	r24, 0x50	; 80
     942:	91 05       	cpc	r25, r1
     944:	30 f4       	brcc	.+12     	; 0x952 <appTask+0x148>
				{
					uiFunctionEntered++;
     946:	01 96       	adiw	r24, 0x01	; 1
     948:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <uiFunctionEntered+0x1>
     94c:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <uiFunctionEntered>
     950:	05 c0       	rjmp	.+10     	; 0x95c <appTask+0x152>
				}
				else
				{
					Led1_toggle();
     952:	90 9a       	sbi	0x12, 0	; 18
					
					uiFunctionEntered = 0;
     954:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <uiFunctionEntered+0x1>
     958:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <uiFunctionEntered>
				}
				
				if(!Request(ISO14443_3_REQALL, tmp))
     95c:	be 01       	movw	r22, r28
     95e:	6f 5f       	subi	r22, 0xFF	; 255
     960:	7f 4f       	sbci	r23, 0xFF	; 255
     962:	82 e5       	ldi	r24, 0x52	; 82
     964:	0e 94 04 18 	call	0x3008	; 0x3008 <Request>
     968:	89 2b       	or	r24, r25
     96a:	09 f0       	breq	.+2      	; 0x96e <appTask+0x164>
     96c:	54 c3       	rjmp	.+1704   	; 0x1016 <appTask+0x80c>
				{
					u8 cardType;
					u8 cardKey[6] = {0xff,0xff,0xff,0xff,0xff,0xff};
     96e:	86 e0       	ldi	r24, 0x06	; 6
     970:	e1 e2       	ldi	r30, 0x21	; 33
     972:	f2 e0       	ldi	r31, 0x02	; 2
     974:	de 01       	movw	r26, r28
     976:	99 96       	adiw	r26, 0x29	; 41
     978:	01 90       	ld	r0, Z+
     97a:	0d 92       	st	X+, r0
     97c:	8a 95       	dec	r24
     97e:	e1 f7       	brne	.-8      	; 0x978 <appTask+0x16e>
					
					/*anti-collision and select the card*/
					
					if(!AnticollSelect(0, tmp, &cardType))
     980:	ae 01       	movw	r20, r28
     982:	4f 5c       	subi	r20, 0xCF	; 207
     984:	5f 4f       	sbci	r21, 0xFF	; 255
     986:	be 01       	movw	r22, r28
     988:	6f 5f       	subi	r22, 0xFF	; 255
     98a:	7f 4f       	sbci	r23, 0xFF	; 255
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	0e 94 b4 19 	call	0x3368	; 0x3368 <AnticollSelect>
     992:	89 2b       	or	r24, r25
     994:	09 f0       	breq	.+2      	; 0x998 <appTask+0x18e>
     996:	3f c3       	rjmp	.+1662   	; 0x1016 <appTask+0x80c>
					{
						if(cardType == MIFARE_1K)
     998:	89 a9       	ldd	r24, Y+49	; 0x31
     99a:	88 30       	cpi	r24, 0x08	; 8
     99c:	69 f4       	brne	.+26     	; 0x9b8 <appTask+0x1ae>
						{
							CurrentAccount.Type = MIFARE_1K;
     99e:	80 93 29 09 	sts	0x0929, r24	; 0x800929 <CurrentAccount>
							
							Authentication(MIFARE_AUTHENT_A,cardKey,tmp,0);
     9a2:	20 e0       	ldi	r18, 0x00	; 0
     9a4:	ae 01       	movw	r20, r28
     9a6:	4f 5f       	subi	r20, 0xFF	; 255
     9a8:	5f 4f       	sbci	r21, 0xFF	; 255
     9aa:	be 01       	movw	r22, r28
     9ac:	67 5d       	subi	r22, 0xD7	; 215
     9ae:	7f 4f       	sbci	r23, 0xFF	; 255
     9b0:	80 e6       	ldi	r24, 0x60	; 96
     9b2:	0e 94 5f 1a 	call	0x34be	; 0x34be <Authentication>
     9b6:	02 c0       	rjmp	.+4      	; 0x9bc <appTask+0x1b2>
						}
						else
						{
							CurrentAccount.Type = 0;
     9b8:	10 92 29 09 	sts	0x0929, r1	; 0x800929 <CurrentAccount>
						}
						OP = CARD_DETECTED;
     9bc:	8c e0       	ldi	r24, 0x0C	; 12
     9be:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
						ledoff1();
     9c2:	0e 94 9d 01 	call	0x33a	; 0x33a <ledoff1>
     9c6:	27 c3       	rjmp	.+1614   	; 0x1016 <appTask+0x80c>
				
				//case #4
				case CARD_DETECTED:
								
				//Read CardID from User Zone
				if(!readCardID(CurrentAccount.Type, &cardNum[0]))
     9c8:	b8 01       	movw	r22, r16
     9ca:	80 91 29 09 	lds	r24, 0x0929	; 0x800929 <CurrentAccount>
     9ce:	0e 94 01 1b 	call	0x3602	; 0x3602 <readCardID>
     9d2:	89 2b       	or	r24, r25
     9d4:	09 f0       	breq	.+2      	; 0x9d8 <appTask+0x1ce>
     9d6:	14 c3       	rjmp	.+1576   	; 0x1000 <appTask+0x7f6>
				{
					padLeft((char*)&cardNum[0],9,"200");  //add 200 to Coinomatic Cards
     9d8:	4e e3       	ldi	r20, 0x3E	; 62
     9da:	52 e0       	ldi	r21, 0x02	; 2
     9dc:	69 e0       	ldi	r22, 0x09	; 9
     9de:	c8 01       	movw	r24, r16
     9e0:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <padLeft>
					
					CurrentAccount.ID = strtoul((const char*)cardNum,NULL,10);	//save active card's id
     9e4:	4a e0       	ldi	r20, 0x0A	; 10
     9e6:	50 e0       	ldi	r21, 0x00	; 0
     9e8:	60 e0       	ldi	r22, 0x00	; 0
     9ea:	70 e0       	ldi	r23, 0x00	; 0
     9ec:	c8 01       	movw	r24, r16
     9ee:	0e 94 bf 2f 	call	0x5f7e	; 0x5f7e <strtoul>
     9f2:	60 93 2a 09 	sts	0x092A, r22	; 0x80092a <CurrentAccount+0x1>
     9f6:	70 93 2b 09 	sts	0x092B, r23	; 0x80092b <CurrentAccount+0x2>
     9fa:	80 93 2c 09 	sts	0x092C, r24	; 0x80092c <CurrentAccount+0x3>
     9fe:	90 93 2d 09 	sts	0x092D, r25	; 0x80092d <CurrentAccount+0x4>
					//associated?
					if(macConfig.associated == true)
     a02:	80 91 44 0c 	lds	r24, 0x0C44	; 0x800c44 <macConfig+0x8>
     a06:	88 23       	and	r24, r24
     a08:	a1 f1       	breq	.+104    	; 0xa72 <appTask+0x268>
					{
						// Send Data Package via Radio
						sprintf((char*)ucSendDataBuffer+1, "<sN>%s</sN>",cardNum);
     a0a:	1f 93       	push	r17
     a0c:	0f 93       	push	r16
     a0e:	82 e4       	ldi	r24, 0x42	; 66
     a10:	92 e0       	ldi	r25, 0x02	; 2
     a12:	9f 93       	push	r25
     a14:	8f 93       	push	r24
     a16:	02 e3       	ldi	r16, 0x32	; 50
     a18:	1a e0       	ldi	r17, 0x0A	; 10
     a1a:	1f 93       	push	r17
     a1c:	0f 93       	push	r16
     a1e:	0e 94 cc 32 	call	0x6598	; 0x6598 <sprintf>

						ucSendDataSize = strlen((char*)ucSendDataBuffer+1);
     a22:	f8 01       	movw	r30, r16
     a24:	01 90       	ld	r0, Z+
     a26:	00 20       	and	r0, r0
     a28:	e9 f7       	brne	.-6      	; 0xa24 <appTask+0x21a>
     a2a:	bf 01       	movw	r22, r30
     a2c:	63 53       	subi	r22, 0x33	; 51
     a2e:	7a 40       	sbci	r23, 0x0A	; 10
						ucSendDataBuffer[0] = ucSendDataSize;   // Length
     a30:	60 93 31 0a 	sts	0x0A31, r22	; 0x800a31 <ucSendDataBuffer>
						ucSendDataSize = ucSendDataSize + 1;    // data size = data byte + size byte
     a34:	6f 5f       	subi	r22, 0xFF	; 255
     a36:	60 93 0f 0b 	sts	0x0B0F, r22	; 0x800b0f <ucSendDataSize>
						macDataRequest(DEFAULT_COORD_ADDR, ucSendDataSize, ucSendDataBuffer);
     a3a:	41 e3       	ldi	r20, 0x31	; 49
     a3c:	5a e0       	ldi	r21, 0x0A	; 10
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	0e 94 62 21 	call	0x42c4	; 0x42c4 <macDataRequest>
						
						// Clear Rx Buffer
						memset(DataBuffer,0,sizeof(DataBuffer));
     a46:	80 e8       	ldi	r24, 0x80	; 128
     a48:	e6 e3       	ldi	r30, 0x36	; 54
     a4a:	f9 e0       	ldi	r31, 0x09	; 9
     a4c:	df 01       	movw	r26, r30
     a4e:	1d 92       	st	X+, r1
     a50:	8a 95       	dec	r24
     a52:	e9 f7       	brne	.-6      	; 0xa4e <appTask+0x244>
						
						OP = GET_BALANCE_FROM_SERVER;
     a54:	87 e0       	ldi	r24, 0x07	; 7
     a56:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
						//set busy msg flag
						ReaderStateFlag.Busy = true;
     a5a:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <ReaderStateFlag>
     a5e:	80 64       	ori	r24, 0x40	; 64
     a60:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <ReaderStateFlag>
     a64:	0f 90       	pop	r0
     a66:	0f 90       	pop	r0
     a68:	0f 90       	pop	r0
     a6a:	0f 90       	pop	r0
     a6c:	0f 90       	pop	r0
     a6e:	0f 90       	pop	r0
     a70:	53 c0       	rjmp	.+166    	; 0xb18 <appTask+0x30e>
						
					}
					//not associated
					else if((macConfig.associated == false) && (ReaderStateFlag.EnableOfflineTransaction == true) && (ReaderStateFlag.MaxNumTransReached == false))
     a72:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <ReaderStateFlag>
     a76:	83 ff       	sbrs	r24, 3
     a78:	4c c0       	rjmp	.+152    	; 0xb12 <appTask+0x308>
     a7a:	84 fd       	sbrc	r24, 4
     a7c:	4a c0       	rjmp	.+148    	; 0xb12 <appTask+0x308>
					{
						//allow cycle to start when BOW is down
						
						CurrentAccount.Value = (uctempBuf[0]-0x30) * 1000 + (uctempBuf[1]-0x30) * 100 + (uctempBuf[3]-0x30) * 10 + uctempBuf[4]-0x30;
     a7e:	e0 e0       	ldi	r30, 0x00	; 0
     a80:	f0 e0       	ldi	r31, 0x00	; 0
     a82:	20 81       	ld	r18, Z
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	20 53       	subi	r18, 0x30	; 48
     a88:	31 09       	sbc	r19, r1
     a8a:	88 ee       	ldi	r24, 0xE8	; 232
     a8c:	93 e0       	ldi	r25, 0x03	; 3
     a8e:	28 9f       	mul	r18, r24
     a90:	a0 01       	movw	r20, r0
     a92:	29 9f       	mul	r18, r25
     a94:	50 0d       	add	r21, r0
     a96:	38 9f       	mul	r19, r24
     a98:	50 0d       	add	r21, r0
     a9a:	11 24       	eor	r1, r1
     a9c:	21 81       	ldd	r18, Z+1	; 0x01
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	20 53       	subi	r18, 0x30	; 48
     aa2:	31 09       	sbc	r19, r1
     aa4:	64 e6       	ldi	r22, 0x64	; 100
     aa6:	62 9f       	mul	r22, r18
     aa8:	c0 01       	movw	r24, r0
     aaa:	63 9f       	mul	r22, r19
     aac:	90 0d       	add	r25, r0
     aae:	11 24       	eor	r1, r1
     ab0:	84 0f       	add	r24, r20
     ab2:	95 1f       	adc	r25, r21
     ab4:	43 81       	ldd	r20, Z+3	; 0x03
     ab6:	50 e0       	ldi	r21, 0x00	; 0
     ab8:	40 53       	subi	r20, 0x30	; 48
     aba:	51 09       	sbc	r21, r1
     abc:	6a e0       	ldi	r22, 0x0A	; 10
     abe:	64 9f       	mul	r22, r20
     ac0:	90 01       	movw	r18, r0
     ac2:	65 9f       	mul	r22, r21
     ac4:	30 0d       	add	r19, r0
     ac6:	11 24       	eor	r1, r1
     ac8:	82 0f       	add	r24, r18
     aca:	93 1f       	adc	r25, r19
     acc:	24 81       	ldd	r18, Z+4	; 0x04
     ace:	82 0f       	add	r24, r18
     ad0:	91 1d       	adc	r25, r1
     ad2:	c0 97       	sbiw	r24, 0x30	; 48
     ad4:	90 93 31 09 	sts	0x0931, r25	; 0x800931 <CurrentAccount+0x8>
     ad8:	80 93 30 09 	sts	0x0930, r24	; 0x800930 <CurrentAccount+0x7>
						
						if(SQACAMachineStatus.MachineStatus[0] == MACHINE_READY_MODE)
     adc:	80 91 fa 0a 	lds	r24, 0x0AFA	; 0x800afa <SQACAMachineStatus+0x5>
     ae0:	81 30       	cpi	r24, 0x01	; 1
     ae2:	d1 f4       	brne	.+52     	; 0xb18 <appTask+0x30e>
						{
							sendSQACAMimicQuantumVending();
     ae4:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <sendSQACAMimicQuantumVending>
							
							OP = WAIT_FOR_SELECTION;
     ae8:	88 e0       	ldi	r24, 0x08	; 8
     aea:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
							
							KPTOFlag = 0;
     aee:	10 92 2e 05 	sts	0x052E, r1	; 0x80052e <KPTOFlag>
							
							if( waitForMachineStartKey() )
     af2:	0e 94 47 12 	call	0x248e	; 0x248e <waitForMachineStartKey>
							{
								macSetLongAlarm(MACHINE_KEYPRESS_WAITTIME,KeypressTimeOut);		//KeyPressWaitTime
     af6:	6e ea       	ldi	r22, 0xAE	; 174
     af8:	71 e0       	ldi	r23, 0x01	; 1
							
							OP = WAIT_FOR_SELECTION;
							
							KPTOFlag = 0;
							
							if( waitForMachineStartKey() )
     afa:	88 23       	and	r24, r24
     afc:	29 f0       	breq	.+10     	; 0xb08 <appTask+0x2fe>
							{
								macSetLongAlarm(MACHINE_KEYPRESS_WAITTIME,KeypressTimeOut);		//KeyPressWaitTime
     afe:	8e e1       	ldi	r24, 0x1E	; 30
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <macSetLongAlarm>
     b06:	08 c0       	rjmp	.+16     	; 0xb18 <appTask+0x30e>
							}
							else
							macSetAlarm(500, KeypressTimeOut); // if connected to a washer while cycle is running and a card is swiped, just display the balance and continue scanning.
     b08:	84 ef       	ldi	r24, 0xF4	; 244
     b0a:	91 e0       	ldi	r25, 0x01	; 1
     b0c:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <macSetAlarm>
     b10:	03 c0       	rjmp	.+6      	; 0xb18 <appTask+0x30e>
							
						}
					}
					else
					{
						OP = SCANNING;
     b12:	82 e0       	ldi	r24, 0x02	; 2
     b14:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
					#if (DEBUG)
					Beeps(1);
					#endif

					//Set Timeout timer 60secs for every read
					TOFlag = false;
     b18:	10 92 2f 05 	sts	0x052F, r1	; 0x80052f <TOFlag>
					ucTimerID = macSetLongAlarm(SERVER_RESPONSE_TIMEOUT,CommTimeOut);
     b1c:	65 ea       	ldi	r22, 0xA5	; 165
     b1e:	71 e0       	ldi	r23, 0x01	; 1
     b20:	6a c2       	rjmp	.+1236   	; 0xff6 <appTask+0x7ec>
				break;

				//case #5
				case SEND_OFFLINE_TRANSACTIONS:
				
				if (timeout.sendingOfflineTransactions)
     b22:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <timeout>
     b26:	80 ff       	sbrs	r24, 0
     b28:	76 c2       	rjmp	.+1260   	; 0x1016 <appTask+0x80c>
				{
					timeout.sendingOfflineTransactions = false;
     b2a:	8e 7f       	andi	r24, 0xFE	; 254
     b2c:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <timeout>
     b30:	69 c2       	rjmp	.+1234   	; 0x1004 <appTask+0x7fa>
				case SHOW_BALANCE_REQUEST:

				//case #6 called by case 4# wait for response from server after card swipe
				case GET_BALANCE_FROM_SERVER:

				if(DataBuffer[0] != '\0')
     b32:	90 91 36 09 	lds	r25, 0x0936	; 0x800936 <DataBuffer>
     b36:	99 23       	and	r25, r25
     b38:	09 f4       	brne	.+2      	; 0xb3c <appTask+0x332>
     b3a:	df c0       	rjmp	.+446    	; 0xcfa <appTask+0x4f0>
				{
					// Print response
					ReaderStateFlag.Busy = false;
     b3c:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <ReaderStateFlag>
     b40:	8f 7b       	andi	r24, 0xBF	; 191
     b42:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <ReaderStateFlag>
					debugMsgStr("\r\n");
					debugMsgStr(DataBuffer);
					debugMsgStr("\r\n");
					#endif

					OP = SCANNING;  // old SCARD_REMOVED
     b46:	82 e0       	ldi	r24, 0x02	; 2
     b48:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
					
					//Extract the Card Id from the incoming message
					if( (uctempBuf = strstr((char *)DataBuffer,"sN: ")) )
     b4c:	6e e4       	ldi	r22, 0x4E	; 78
     b4e:	72 e0       	ldi	r23, 0x02	; 2
     b50:	86 e3       	ldi	r24, 0x36	; 54
     b52:	99 e0       	ldi	r25, 0x09	; 9
     b54:	0e 94 50 32 	call	0x64a0	; 0x64a0 <strstr>
     b58:	00 97       	sbiw	r24, 0x00	; 0
     b5a:	09 f4       	brne	.+2      	; 0xb5e <appTask+0x354>
     b5c:	cb c0       	rjmp	.+406    	; 0xcf4 <appTask+0x4ea>
					{
						CurrentAccount.ID = strtoul((const char*)(uctempBuf+4),NULL,10);	//save active card's id
     b5e:	4a e0       	ldi	r20, 0x0A	; 10
     b60:	50 e0       	ldi	r21, 0x00	; 0
     b62:	60 e0       	ldi	r22, 0x00	; 0
     b64:	70 e0       	ldi	r23, 0x00	; 0
     b66:	04 96       	adiw	r24, 0x04	; 4
     b68:	0e 94 bf 2f 	call	0x5f7e	; 0x5f7e <strtoul>
     b6c:	60 93 2a 09 	sts	0x092A, r22	; 0x80092a <CurrentAccount+0x1>
     b70:	70 93 2b 09 	sts	0x092B, r23	; 0x80092b <CurrentAccount+0x2>
     b74:	80 93 2c 09 	sts	0x092C, r24	; 0x80092c <CurrentAccount+0x3>
     b78:	90 93 2d 09 	sts	0x092D, r25	; 0x80092d <CurrentAccount+0x4>
						
						//Display card balance on machine
						double fBalance = 0.0;
						
						uctempBuf = strstr((char *)DataBuffer,"Balance: ");
     b7c:	63 e5       	ldi	r22, 0x53	; 83
     b7e:	72 e0       	ldi	r23, 0x02	; 2
     b80:	86 e3       	ldi	r24, 0x36	; 54
     b82:	99 e0       	ldi	r25, 0x09	; 9
     b84:	0e 94 50 32 	call	0x64a0	; 0x64a0 <strstr>
     b88:	8c 01       	movw	r16, r24
						
						uctempBuf += 9;
     b8a:	4c 01       	movw	r8, r24
     b8c:	b9 e0       	ldi	r27, 0x09	; 9
     b8e:	8b 0e       	add	r8, r27
     b90:	91 1c       	adc	r9, r1
						ptr = strchr(uctempBuf,'.');
     b92:	6e e2       	ldi	r22, 0x2E	; 46
     b94:	70 e0       	ldi	r23, 0x00	; 0
     b96:	c4 01       	movw	r24, r8
     b98:	0e 94 1b 32 	call	0x6436	; 0x6436 <strchr>
						k = ptr - uctempBuf;
     b9c:	28 2f       	mov	r18, r24
     b9e:	28 19       	sub	r18, r8
						fBalance = atof(uctempBuf);
     ba0:	c4 01       	movw	r24, r8
     ba2:	2d ab       	std	Y+53, r18	; 0x35
     ba4:	0e 94 f7 30 	call	0x61ee	; 0x61ee <atof>
     ba8:	5b 01       	movw	r10, r22
     baa:	d8 2e       	mov	r13, r24
     bac:	f9 2e       	mov	r15, r25
						
						// Format the Balance to XX.XX
						//capture numeric into string
						if (k <2)
     bae:	2d a9       	ldd	r18, Y+53	; 0x35
     bb0:	22 30       	cpi	r18, 0x02	; 2
     bb2:	38 f4       	brcc	.+14     	; 0xbc2 <appTask+0x3b8>
						sprintf(uctempBuf,"0%.2f",fBalance);
     bb4:	9f 93       	push	r25
     bb6:	8f 93       	push	r24
     bb8:	bf 92       	push	r11
     bba:	6f 93       	push	r22
     bbc:	8d e5       	ldi	r24, 0x5D	; 93
     bbe:	92 e0       	ldi	r25, 0x02	; 2
     bc0:	08 c0       	rjmp	.+16     	; 0xbd2 <appTask+0x3c8>
						else if(k == 2)
     bc2:	22 30       	cpi	r18, 0x02	; 2
     bc4:	91 f4       	brne	.+36     	; 0xbea <appTask+0x3e0>
						sprintf(uctempBuf,"%.2f",fBalance);
     bc6:	9f 93       	push	r25
     bc8:	8f 93       	push	r24
     bca:	bf 92       	push	r11
     bcc:	6f 93       	push	r22
     bce:	8e e5       	ldi	r24, 0x5E	; 94
     bd0:	92 e0       	ldi	r25, 0x02	; 2
     bd2:	9f 93       	push	r25
     bd4:	8f 93       	push	r24
     bd6:	9f 92       	push	r9
     bd8:	8f 92       	push	r8
     bda:	0e 94 cc 32 	call	0x6598	; 0x6598 <sprintf>
     bde:	0f b6       	in	r0, 0x3f	; 63
     be0:	f8 94       	cli
     be2:	de bf       	out	0x3e, r29	; 62
     be4:	0f be       	out	0x3f, r0	; 63
     be6:	cd bf       	out	0x3d, r28	; 61
     be8:	05 c0       	rjmp	.+10     	; 0xbf4 <appTask+0x3ea>
						else
						strcpy(uctempBuf,"99.99");
     bea:	63 e6       	ldi	r22, 0x63	; 99
     bec:	72 e0       	ldi	r23, 0x02	; 2
     bee:	c4 01       	movw	r24, r8
     bf0:	0e 94 2f 32 	call	0x645e	; 0x645e <strcpy>
						"1" is just a character as far as the LCD is concerned. It's not a number. The LCD wants you to send the "code" for each character you want to display.
						The codes for characters "0" through "9" are 48 through 57. So just adding 48 to any single-digit number will give you the code for the character that
						corresponds to that digit, f.e. uctempBuf[0]=49. digit 1=uctempBuf[0]-0x30 .
						*/
						//split string into individual values, skip decimal point
						CurrentAccount.Value = (uctempBuf[0]-0x30) * 1000 + (uctempBuf[1]-0x30) * 100 + (uctempBuf[3]-0x30) * 10 + uctempBuf[4]-0x30;
     bf4:	d8 01       	movw	r26, r16
     bf6:	19 96       	adiw	r26, 0x09	; 9
     bf8:	2c 91       	ld	r18, X
     bfa:	19 97       	sbiw	r26, 0x09	; 9
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	20 53       	subi	r18, 0x30	; 48
     c00:	31 09       	sbc	r19, r1
     c02:	1a 96       	adiw	r26, 0x0a	; 10
     c04:	4c 91       	ld	r20, X
     c06:	1a 97       	sbiw	r26, 0x0a	; 10
     c08:	50 e0       	ldi	r21, 0x00	; 0
     c0a:	40 53       	subi	r20, 0x30	; 48
     c0c:	51 09       	sbc	r21, r1
     c0e:	1c 96       	adiw	r26, 0x0c	; 12
     c10:	ec 91       	ld	r30, X
     c12:	1c 97       	sbiw	r26, 0x0c	; 12
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	f0 97       	sbiw	r30, 0x30	; 48
     c18:	1d 96       	adiw	r26, 0x0d	; 13
     c1a:	6c 91       	ld	r22, X
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	88 ee       	ldi	r24, 0xE8	; 232
     c20:	93 e0       	ldi	r25, 0x03	; 3
     c22:	28 9f       	mul	r18, r24
     c24:	d0 01       	movw	r26, r0
     c26:	29 9f       	mul	r18, r25
     c28:	b0 0d       	add	r27, r0
     c2a:	38 9f       	mul	r19, r24
     c2c:	b0 0d       	add	r27, r0
     c2e:	11 24       	eor	r1, r1
     c30:	14 e6       	ldi	r17, 0x64	; 100
     c32:	14 9f       	mul	r17, r20
     c34:	c0 01       	movw	r24, r0
     c36:	15 9f       	mul	r17, r21
     c38:	90 0d       	add	r25, r0
     c3a:	11 24       	eor	r1, r1
     c3c:	8a 0f       	add	r24, r26
     c3e:	9b 1f       	adc	r25, r27
     c40:	1a e0       	ldi	r17, 0x0A	; 10
     c42:	1e 9f       	mul	r17, r30
     c44:	d0 01       	movw	r26, r0
     c46:	1f 9f       	mul	r17, r31
     c48:	b0 0d       	add	r27, r0
     c4a:	11 24       	eor	r1, r1
     c4c:	8a 0f       	add	r24, r26
     c4e:	9b 1f       	adc	r25, r27
     c50:	86 0f       	add	r24, r22
     c52:	97 1f       	adc	r25, r23
     c54:	c0 97       	sbiw	r24, 0x30	; 48
     c56:	90 93 31 09 	sts	0x0931, r25	; 0x800931 <CurrentAccount+0x8>
     c5a:	80 93 30 09 	sts	0x0930, r24	; 0x800930 <CurrentAccount+0x7>
						
						// give display control back to front end controller. Important! Don't forget!!!!
						
						sendSQDisplayCommand(msgNumber[uctempBuf[0]-0x30], msgNumber[uctempBuf[1]-0x30], msgNumber[uctempBuf[3]-0x30], msgNumber[uctempBuf[4]-0x30], LED_BLANK, LED_BLANK,10);
     c5e:	63 52       	subi	r22, 0x23	; 35
     c60:	7e 4f       	sbci	r23, 0xFE	; 254
     c62:	cf 01       	movw	r24, r30
     c64:	83 5f       	subi	r24, 0xF3	; 243
     c66:	9d 4f       	sbci	r25, 0xFD	; 253
     c68:	4c 01       	movw	r8, r24
     c6a:	ca 01       	movw	r24, r20
     c6c:	83 5f       	subi	r24, 0xF3	; 243
     c6e:	9d 4f       	sbci	r25, 0xFD	; 253
     c70:	d9 01       	movw	r26, r18
     c72:	a3 5f       	subi	r26, 0xF3	; 243
     c74:	bd 4f       	sbci	r27, 0xFD	; 253
     c76:	2a e0       	ldi	r18, 0x0A	; 10
     c78:	c2 2e       	mov	r12, r18
     c7a:	e1 2c       	mov	r14, r1
     c7c:	00 e0       	ldi	r16, 0x00	; 0
     c7e:	fb 01       	movw	r30, r22
     c80:	20 81       	ld	r18, Z
     c82:	f4 01       	movw	r30, r8
     c84:	40 81       	ld	r20, Z
     c86:	fc 01       	movw	r30, r24
     c88:	60 81       	ld	r22, Z
     c8a:	8c 91       	ld	r24, X
     c8c:	0e 94 af 0c 	call	0x195e	; 0x195e <sendSQDisplayCommand>
     c90:	ff ef       	ldi	r31, 0xFF	; 255
     c92:	21 ee       	ldi	r18, 0xE1	; 225
     c94:	84 e0       	ldi	r24, 0x04	; 4
     c96:	f1 50       	subi	r31, 0x01	; 1
     c98:	20 40       	sbci	r18, 0x00	; 0
     c9a:	80 40       	sbci	r24, 0x00	; 0
     c9c:	e1 f7       	brne	.-8      	; 0xc96 <appTask+0x48c>
     c9e:	00 c0       	rjmp	.+0      	; 0xca0 <appTask+0x496>
     ca0:	00 00       	nop
						_delay_ms(100);
						//new
						displaySQBalance(fBalance);
     ca2:	6a 2d       	mov	r22, r10
     ca4:	7b 2d       	mov	r23, r11
     ca6:	8d 2d       	mov	r24, r13
     ca8:	9f 2d       	mov	r25, r15
     caa:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <displaySQBalance>

						if (SQACAMachineStatus.MachineStatus[0] == MACHINE_READY_MODE)
     cae:	80 91 fa 0a 	lds	r24, 0x0AFA	; 0x800afa <SQACAMachineStatus+0x5>
     cb2:	81 30       	cpi	r24, 0x01	; 1
     cb4:	a9 f4       	brne	.+42     	; 0xce0 <appTask+0x4d6>
						{
							sendSQACAMimicQuantumVending();
     cb6:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <sendSQACAMimicQuantumVending>
							
							#if(DEBUG_BOW)
							debugMsgStr("\r\nsendSQACAMimicQuantumVending()\r\n");
							#endif
							OP = WAIT_FOR_SELECTION; 	// ...wait for Start Pad Selection
     cba:	88 e0       	ldi	r24, 0x08	; 8
     cbc:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
							//Sound Buzzer
							#if (DEBUG)
							Beeps(2);
							#endif
							
							KPTOFlag = 0;								//KeyPressTimeout false
     cc0:	10 92 2e 05 	sts	0x052E, r1	; 0x80052e <KPTOFlag>
							//Examine machine control and the current status of the machine (Primary and Secondary Modes)
							if( waitForMachineStartKey() )
     cc4:	0e 94 47 12 	call	0x248e	; 0x248e <waitForMachineStartKey>
							{
								macSetLongAlarm(MACHINE_KEYPRESS_WAITTIME, KeypressTimeOut);		//30secs ACA specs
     cc8:	6e ea       	ldi	r22, 0xAE	; 174
     cca:	71 e0       	ldi	r23, 0x01	; 1
							Beeps(2);
							#endif
							
							KPTOFlag = 0;								//KeyPressTimeout false
							//Examine machine control and the current status of the machine (Primary and Secondary Modes)
							if( waitForMachineStartKey() )
     ccc:	88 23       	and	r24, r24
     cce:	19 f0       	breq	.+6      	; 0xcd6 <appTask+0x4cc>
							{
								macSetLongAlarm(MACHINE_KEYPRESS_WAITTIME, KeypressTimeOut);		//30secs ACA specs
     cd0:	8e e1       	ldi	r24, 0x1E	; 30
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	92 c1       	rjmp	.+804    	; 0xffa <appTask+0x7f0>
								
							}
							else
							// code to avoid multiple button press
							macSetAlarm(500, KeypressTimeOut);		//if connected to a washer while cycle is running and a card is swiped, just display the balance and continue scanning.
     cd6:	84 ef       	ldi	r24, 0xF4	; 244
     cd8:	91 e0       	ldi	r25, 0x01	; 1
     cda:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <macSetAlarm>
     cde:	9b c1       	rjmp	.+822    	; 0x1016 <appTask+0x80c>
							
							
						}
						//initiate TopOff
						else if( (SQACAMachineStatus.MachineStatus[0] == MACHINE_RUN_MODE) && (SQACAMachineStatus.MachineType[0] == PROGRAMMING_DATA_DRYER) )
     ce0:	88 30       	cpi	r24, 0x08	; 8
     ce2:	09 f0       	breq	.+2      	; 0xce6 <appTask+0x4dc>
     ce4:	98 c1       	rjmp	.+816    	; 0x1016 <appTask+0x80c>
     ce6:	80 91 f5 0a 	lds	r24, 0x0AF5	; 0x800af5 <SQACAMachineStatus>
     cea:	89 32       	cpi	r24, 0x29	; 41
     cec:	09 f0       	breq	.+2      	; 0xcf0 <appTask+0x4e6>
     cee:	93 c1       	rjmp	.+806    	; 0x1016 <appTask+0x80c>
						{
							OP = DRYERCYCLE_RUNNING;
     cf0:	88 e1       	ldi	r24, 0x18	; 24
     cf2:	89 c1       	rjmp	.+786    	; 0x1006 <appTask+0x7fc>
						}
					}	//serial number found in server database
					//force timeout condition
					else //serial number error from server database
					{
						CommTimeOut();					//TOFlag = 1;
     cf4:	0e 94 a5 01 	call	0x34a	; 0x34a <CommTimeOut>
     cf8:	8e c1       	rjmp	.+796    	; 0x1016 <appTask+0x80c>
					}

				} // end if
				//still case 6# server fails to respond in time no balance
				else if(TOFlag == true || macConfig.associated == false)
     cfa:	90 91 2f 05 	lds	r25, 0x052F	; 0x80052f <TOFlag>
     cfe:	91 30       	cpi	r25, 0x01	; 1
     d00:	11 f0       	breq	.+4      	; 0xd06 <appTask+0x4fc>
     d02:	81 11       	cpse	r24, r1
     d04:	88 c1       	rjmp	.+784    	; 0x1016 <appTask+0x80c>
					#if(DEBUG_BOW)
					debugMsgStr("\r\nTOFlag == 1\r\n");
					#endif

					// Error Occured, Re-enter SCANNING mode
					ReaderStateFlag.Busy = false;
     d06:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <ReaderStateFlag>
     d0a:	8f 7b       	andi	r24, 0xBF	; 191
     d0c:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <ReaderStateFlag>
					//send error message to machine display
					displayMsg(CARD_ERR_MSG);
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <displayMsg>
     d16:	76 c1       	rjmp	.+748    	; 0x1004 <appTask+0x7fa>
     d18:	9f ef       	ldi	r25, 0xFF	; 255
     d1a:	a7 ea       	ldi	r26, 0xA7	; 167
     d1c:	b1 e6       	ldi	r27, 0x61	; 97
     d1e:	91 50       	subi	r25, 0x01	; 1
     d20:	a0 40       	sbci	r26, 0x00	; 0
     d22:	b0 40       	sbci	r27, 0x00	; 0
     d24:	e1 f7       	brne	.-8      	; 0xd1e <appTask+0x514>
     d26:	00 c0       	rjmp	.+0      	; 0xd28 <appTask+0x51e>
     d28:	00 00       	nop

				//case #7 called by case #6 SCANNING
				case WAIT_FOR_SELECTION:			//wait to see if cycle start has been requested by user
				//either press the start button
				_delay_ms(2000); //PPOS 170706 without this delay the Start button will not work
				if( SQACAMachineStatus.CmdToReader == START_PAD_PRESSED )
     d2a:	80 91 f9 0a 	lds	r24, 0x0AF9	; 0x800af9 <SQACAMachineStatus+0x4>
     d2e:	81 30       	cpi	r24, 0x01	; 1
     d30:	11 f4       	brne	.+4      	; 0xd36 <appTask+0x52c>
				{
					OP = START_CYCLE;				//Start Pad was pressed ...you have 10secs to pay to start in Run mode
     d32:	8f e0       	ldi	r24, 0x0F	; 15
     d34:	68 c1       	rjmp	.+720    	; 0x1006 <appTask+0x7fc>
				}

				else if(KPTOFlag == 1)  //...or not, but say it
     d36:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <KPTOFlag>
     d3a:	81 30       	cpi	r24, 0x01	; 1
     d3c:	09 f0       	breq	.+2      	; 0xd40 <appTask+0x536>
     d3e:	6b c1       	rjmp	.+726    	; 0x1016 <appTask+0x80c>
     d40:	5f c1       	rjmp	.+702    	; 0x1000 <appTask+0x7f6>

				//case #8  called by case #7 WAIT_FOR_SELECTION
				case START_CYCLE:
				
				//The Payment System sends this packet to the Machine Control to perform a vending transaction.
				if(sendSQACAVendingTransaction(REGULAR_VEND))
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	0e 94 09 12 	call	0x2412	; 0x2412 <sendSQACAVendingTransaction>
     d48:	88 23       	and	r24, r24
     d4a:	09 f4       	brne	.+2      	; 0xd4e <appTask+0x544>
     d4c:	64 c1       	rjmp	.+712    	; 0x1016 <appTask+0x80c>
				{
					vendPrice = SQACAMachineStatus.RemainingVend[1] * 256 + SQACAMachineStatus.RemainingVend[0];
     d4e:	00 91 01 0b 	lds	r16, 0x0B01	; 0x800b01 <SQACAMachineStatus+0xc>
     d52:	10 e0       	ldi	r17, 0x00	; 0
     d54:	10 2f       	mov	r17, r16
     d56:	00 27       	eor	r16, r16
     d58:	80 91 00 0b 	lds	r24, 0x0B00	; 0x800b00 <SQACAMachineStatus+0xb>
     d5c:	08 0f       	add	r16, r24
     d5e:	11 1d       	adc	r17, r1
     d60:	b8 01       	movw	r22, r16
     d62:	01 2e       	mov	r0, r17
     d64:	00 0c       	add	r0, r0
     d66:	88 0b       	sbc	r24, r24
     d68:	99 0b       	sbc	r25, r25
     d6a:	0e 94 3b 2d 	call	0x5a76	; 0x5a76 <__floatsisf>
     d6e:	9b 01       	movw	r18, r22
     d70:	ac 01       	movw	r20, r24
     d72:	60 93 16 0b 	sts	0x0B16, r22	; 0x800b16 <vendPrice>
     d76:	70 93 17 0b 	sts	0x0B17, r23	; 0x800b17 <vendPrice+0x1>
     d7a:	80 93 18 0b 	sts	0x0B18, r24	; 0x800b18 <vendPrice+0x2>
     d7e:	90 93 19 0b 	sts	0x0B19, r25	; 0x800b19 <vendPrice+0x3>
					structTransaction vend;
					
					vend.CardId			= CurrentAccount.ID;
     d82:	60 91 2a 09 	lds	r22, 0x092A	; 0x80092a <CurrentAccount+0x1>
     d86:	70 91 2b 09 	lds	r23, 0x092B	; 0x80092b <CurrentAccount+0x2>
     d8a:	80 91 2c 09 	lds	r24, 0x092C	; 0x80092c <CurrentAccount+0x3>
     d8e:	90 91 2d 09 	lds	r25, 0x092D	; 0x80092d <CurrentAccount+0x4>
     d92:	6a 87       	std	Y+10, r22	; 0x0a
     d94:	7b 87       	std	Y+11, r23	; 0x0b
     d96:	8c 87       	std	Y+12, r24	; 0x0c
     d98:	9d 87       	std	Y+13, r25	; 0x0d
					vend.vendPrice		= vendPrice ;
     d9a:	19 87       	std	Y+9, r17	; 0x09
     d9c:	08 87       	std	Y+8, r16	; 0x08
					vend.LocationId		= ReaderSetup.locationId;
     d9e:	e0 91 c0 09 	lds	r30, 0x09C0	; 0x8009c0 <ReaderSetup+0x6>
     da2:	f0 91 c1 09 	lds	r31, 0x09C1	; 0x8009c1 <ReaderSetup+0x7>
     da6:	fa 83       	std	Y+2, r31	; 0x02
     da8:	e9 83       	std	Y+1, r30	; 0x01
					vend.ManufactureId	= ReaderSetup.manufacturerId;
     daa:	e0 91 be 09 	lds	r30, 0x09BE	; 0x8009be <ReaderSetup+0x4>
     dae:	f0 91 bf 09 	lds	r31, 0x09BF	; 0x8009bf <ReaderSetup+0x5>
     db2:	fe 83       	std	Y+6, r31	; 0x06
     db4:	ed 83       	std	Y+5, r30	; 0x05
					vend.MachineId[0]	= deviceStatus.deviceType[0];
     db6:	e0 91 f1 0a 	lds	r30, 0x0AF1	; 0x800af1 <deviceStatus>
     dba:	eb 83       	std	Y+3, r30	; 0x03
					vend.MachineId[1]	= deviceStatus.deviceType[1];
     dbc:	e0 91 f2 0a 	lds	r30, 0x0AF2	; 0x800af2 <deviceStatus+0x1>
     dc0:	ec 83       	std	Y+4, r30	; 0x04
					
					if((macConfig.associated == false) && (ReaderStateFlag.EnableOfflineTransaction == true))
     dc2:	e0 91 44 0c 	lds	r30, 0x0C44	; 0x800c44 <macConfig+0x8>
     dc6:	e1 11       	cpse	r30, r1
     dc8:	09 c0       	rjmp	.+18     	; 0xddc <appTask+0x5d2>
     dca:	e0 91 34 09 	lds	r30, 0x0934	; 0x800934 <ReaderStateFlag>
     dce:	e3 ff       	sbrs	r30, 3
     dd0:	05 c0       	rjmp	.+10     	; 0xddc <appTask+0x5d2>
					{//must be offline transaction, store a record.
						vend.isOffline = true;
     dd2:	21 e0       	ldi	r18, 0x01	; 1
     dd4:	2d 8b       	std	Y+21, r18	; 0x15
						storeOfflineTransaction(CurrentAccount.ID);
     dd6:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <storeOfflineTransaction>
     dda:	1e c0       	rjmp	.+60     	; 0xe18 <appTask+0x60e>
					}
					//The reader sends this packet to the BOW to record a vending transaction.
					else
					{
						vend.isOffline = false;
     ddc:	1d 8a       	std	Y+21, r1	; 0x15
						CurrentAccount.Value -= vendPrice;
     dde:	80 91 30 09 	lds	r24, 0x0930	; 0x800930 <CurrentAccount+0x7>
     de2:	90 91 31 09 	lds	r25, 0x0931	; 0x800931 <CurrentAccount+0x8>
     de6:	bc 01       	movw	r22, r24
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	2d ab       	std	Y+53, r18	; 0x35
     dee:	3a ab       	std	Y+50, r19	; 0x32
     df0:	4b ab       	std	Y+51, r20	; 0x33
     df2:	5c ab       	std	Y+52, r21	; 0x34
     df4:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <__floatunsisf>
     df8:	2d a9       	ldd	r18, Y+53	; 0x35
     dfa:	3a a9       	ldd	r19, Y+50	; 0x32
     dfc:	4b a9       	ldd	r20, Y+51	; 0x33
     dfe:	5c a9       	ldd	r21, Y+52	; 0x34
     e00:	0e 94 2b 2c 	call	0x5856	; 0x5856 <__subsf3>
     e04:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <__fixunssfsi>
     e08:	70 93 31 09 	sts	0x0931, r23	; 0x800931 <CurrentAccount+0x8>
     e0c:	60 93 30 09 	sts	0x0930, r22	; 0x800930 <CurrentAccount+0x7>
						sendBOWCCTransaction(&vend);
     e10:	ce 01       	movw	r24, r28
     e12:	01 96       	adiw	r24, 0x01	; 1
     e14:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <sendBOWCCTransaction>
					}
					OP = CYCLE_RUNNING;						//PPOS review Error handling?
     e18:	80 e1       	ldi	r24, 0x10	; 16
     e1a:	f5 c0       	rjmp	.+490    	; 0x1006 <appTask+0x7fc>
				//case #9A Purchase TopOff called by case #6 GET_BALANCE_FROM_SERVER
				case DRYERCYCLE_RUNNING:
				//The Payment System sends this packet to the Machine Control to perform a TopOff vending transaction.
				//displayMsg(TOPOFF_MSG);
				//sendSQDisplayCommand(LED_BLANK, LED_BLANK, LED_BLANK, msgNumber[SQACADryerProgramming.PaymSTopoffPrice[1] * 256-0x30], LED_BLANK, LED_BLANK,10);
				if(sendSQACAVendingTransaction(TOPOFF_VEND))
     e1c:	82 e0       	ldi	r24, 0x02	; 2
     e1e:	0e 94 09 12 	call	0x2412	; 0x2412 <sendSQACAVendingTransaction>
     e22:	88 23       	and	r24, r24
     e24:	09 f4       	brne	.+2      	; 0xe28 <appTask+0x61e>
     e26:	f7 c0       	rjmp	.+494    	; 0x1016 <appTask+0x80c>
				{
					displaySQTopOffvend(vendPrice);
     e28:	60 91 16 0b 	lds	r22, 0x0B16	; 0x800b16 <vendPrice>
     e2c:	70 91 17 0b 	lds	r23, 0x0B17	; 0x800b17 <vendPrice+0x1>
     e30:	80 91 18 0b 	lds	r24, 0x0B18	; 0x800b18 <vendPrice+0x2>
     e34:	90 91 19 0b 	lds	r25, 0x0B19	; 0x800b19 <vendPrice+0x3>
     e38:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <displaySQTopOffvend>
					vendPrice = SQACADryerProgramming.PaymSTopoffPrice[1] * 256 + SQACADryerProgramming.PaymSTopoffPrice[0];
     e3c:	00 91 15 0a 	lds	r16, 0x0A15	; 0x800a15 <SQACADryerProgramming+0x11>
     e40:	10 e0       	ldi	r17, 0x00	; 0
     e42:	10 2f       	mov	r17, r16
     e44:	00 27       	eor	r16, r16
     e46:	80 91 14 0a 	lds	r24, 0x0A14	; 0x800a14 <SQACADryerProgramming+0x10>
     e4a:	08 0f       	add	r16, r24
     e4c:	11 1d       	adc	r17, r1
     e4e:	b8 01       	movw	r22, r16
     e50:	01 2e       	mov	r0, r17
     e52:	00 0c       	add	r0, r0
     e54:	88 0b       	sbc	r24, r24
     e56:	99 0b       	sbc	r25, r25
     e58:	0e 94 3b 2d 	call	0x5a76	; 0x5a76 <__floatsisf>
     e5c:	9b 01       	movw	r18, r22
     e5e:	ac 01       	movw	r20, r24
     e60:	60 93 16 0b 	sts	0x0B16, r22	; 0x800b16 <vendPrice>
     e64:	70 93 17 0b 	sts	0x0B17, r23	; 0x800b17 <vendPrice+0x1>
     e68:	80 93 18 0b 	sts	0x0B18, r24	; 0x800b18 <vendPrice+0x2>
     e6c:	90 93 19 0b 	sts	0x0B19, r25	; 0x800b19 <vendPrice+0x3>
					
					structTransaction vend;
					vend.CardId			= CurrentAccount.ID;
     e70:	60 91 2a 09 	lds	r22, 0x092A	; 0x80092a <CurrentAccount+0x1>
     e74:	70 91 2b 09 	lds	r23, 0x092B	; 0x80092b <CurrentAccount+0x2>
     e78:	80 91 2c 09 	lds	r24, 0x092C	; 0x80092c <CurrentAccount+0x3>
     e7c:	90 91 2d 09 	lds	r25, 0x092D	; 0x80092d <CurrentAccount+0x4>
     e80:	6a 87       	std	Y+10, r22	; 0x0a
     e82:	7b 87       	std	Y+11, r23	; 0x0b
     e84:	8c 87       	std	Y+12, r24	; 0x0c
     e86:	9d 87       	std	Y+13, r25	; 0x0d
					vend.vendPrice		= vendPrice ;
     e88:	19 87       	std	Y+9, r17	; 0x09
     e8a:	08 87       	std	Y+8, r16	; 0x08
					vend.LocationId		= ReaderSetup.locationId;
     e8c:	e0 91 c0 09 	lds	r30, 0x09C0	; 0x8009c0 <ReaderSetup+0x6>
     e90:	f0 91 c1 09 	lds	r31, 0x09C1	; 0x8009c1 <ReaderSetup+0x7>
     e94:	fa 83       	std	Y+2, r31	; 0x02
     e96:	e9 83       	std	Y+1, r30	; 0x01
					vend.ManufactureId	= ReaderSetup.manufacturerId;
     e98:	e0 91 be 09 	lds	r30, 0x09BE	; 0x8009be <ReaderSetup+0x4>
     e9c:	f0 91 bf 09 	lds	r31, 0x09BF	; 0x8009bf <ReaderSetup+0x5>
     ea0:	fe 83       	std	Y+6, r31	; 0x06
     ea2:	ed 83       	std	Y+5, r30	; 0x05
					vend.MachineId[0]	= deviceStatus.deviceType[0];
     ea4:	e0 91 f1 0a 	lds	r30, 0x0AF1	; 0x800af1 <deviceStatus>
     ea8:	eb 83       	std	Y+3, r30	; 0x03
					vend.MachineId[1]	= deviceStatus.deviceType[1];
     eaa:	e0 91 f2 0a 	lds	r30, 0x0AF2	; 0x800af2 <deviceStatus+0x1>
     eae:	ec 83       	std	Y+4, r30	; 0x04
					
					if((macConfig.associated == false) && (ReaderStateFlag.EnableOfflineTransaction == true))
     eb0:	e0 91 44 0c 	lds	r30, 0x0C44	; 0x800c44 <macConfig+0x8>
     eb4:	e1 11       	cpse	r30, r1
     eb6:	09 c0       	rjmp	.+18     	; 0xeca <appTask+0x6c0>
     eb8:	e0 91 34 09 	lds	r30, 0x0934	; 0x800934 <ReaderStateFlag>
     ebc:	e3 ff       	sbrs	r30, 3
     ebe:	05 c0       	rjmp	.+10     	; 0xeca <appTask+0x6c0>
					{//must be offline transaction, store a record.
						vend.isOffline = true;
     ec0:	21 e0       	ldi	r18, 0x01	; 1
     ec2:	2d 8b       	std	Y+21, r18	; 0x15
						storeOfflineTransaction(CurrentAccount.ID);
     ec4:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <storeOfflineTransaction>
     ec8:	9b c0       	rjmp	.+310    	; 0x1000 <appTask+0x7f6>
					}
					//The reader sends this packet to the BOW to record a vending transaction.
					else
					{
						vend.isOffline = false;
     eca:	1d 8a       	std	Y+21, r1	; 0x15
						CurrentAccount.Value -= vendPrice;
     ecc:	80 91 30 09 	lds	r24, 0x0930	; 0x800930 <CurrentAccount+0x7>
     ed0:	90 91 31 09 	lds	r25, 0x0931	; 0x800931 <CurrentAccount+0x8>
     ed4:	bc 01       	movw	r22, r24
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	2d ab       	std	Y+53, r18	; 0x35
     edc:	3a ab       	std	Y+50, r19	; 0x32
     ede:	4b ab       	std	Y+51, r20	; 0x33
     ee0:	5c ab       	std	Y+52, r21	; 0x34
     ee2:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <__floatunsisf>
     ee6:	2d a9       	ldd	r18, Y+53	; 0x35
     ee8:	3a a9       	ldd	r19, Y+50	; 0x32
     eea:	4b a9       	ldd	r20, Y+51	; 0x33
     eec:	5c a9       	ldd	r21, Y+52	; 0x34
     eee:	0e 94 2b 2c 	call	0x5856	; 0x5856 <__subsf3>
     ef2:	0e 94 0a 2d 	call	0x5a14	; 0x5a14 <__fixunssfsi>
     ef6:	70 93 31 09 	sts	0x0931, r23	; 0x800931 <CurrentAccount+0x8>
     efa:	60 93 30 09 	sts	0x0930, r22	; 0x800930 <CurrentAccount+0x7>
						sendBOWCCTransaction(&vend);
     efe:	ce 01       	movw	r24, r28
     f00:	01 96       	adiw	r24, 0x01	; 1
     f02:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <sendBOWCCTransaction>
     f06:	7c c0       	rjmp	.+248    	; 0x1000 <appTask+0x7f6>
				break;

				//case #11
				case SETUP_REQUEST:
				
				if( SETUP_TIMEOUT == true)
     f08:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <SETUP_TIMEOUT>
     f0c:	88 23       	and	r24, r24
     f0e:	09 f4       	brne	.+2      	; 0xf12 <appTask+0x708>
     f10:	82 c0       	rjmp	.+260    	; 0x1016 <appTask+0x80c>
				{
					#ifdef MACHINE_CONNECTED
					DevicePoll();
     f12:	0e 94 fd 03 	call	0x7fa	; 0x7fa <DevicePoll>
					#else
					deviceStatus.deviceType[0] = 33;
					deviceStatus.deviceType[1] = 1;
					
					#endif //DEVICE_CONNECTED
					sendBOWSetupRequest();
     f16:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <sendBOWSetupRequest>
					
					SETUP_TIMEOUT = false;
     f1a:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <SETUP_TIMEOUT>
					macSetLongAlarm(SETUP_REQUEST_TIMEOUT, SetupTimeout);
     f1e:	62 eb       	ldi	r22, 0xB2	; 178
     f20:	71 e0       	ldi	r23, 0x01	; 1
     f22:	88 e7       	ldi	r24, 0x78	; 120
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	69 c0       	rjmp	.+210    	; 0xffa <appTask+0x7f0>
				
				
				//case #12
				case VALIDATE_SETUP:

				if((ptr = GetParam((char *)DataBuffer,"<ValidationResponse>","<")) != NULL)
     f28:	49 e6       	ldi	r20, 0x69	; 105
     f2a:	52 e0       	ldi	r21, 0x02	; 2
     f2c:	6b e6       	ldi	r22, 0x6B	; 107
     f2e:	72 e0       	ldi	r23, 0x02	; 2
     f30:	86 e3       	ldi	r24, 0x36	; 54
     f32:	99 e0       	ldi	r25, 0x09	; 9
     f34:	0e 94 c9 03 	call	0x792	; 0x792 <GetParam>
     f38:	5c 01       	movw	r10, r24
     f3a:	00 97       	sbiw	r24, 0x00	; 0
     f3c:	09 f4       	brne	.+2      	; 0xf40 <appTask+0x736>
     f3e:	51 c0       	rjmp	.+162    	; 0xfe2 <appTask+0x7d8>
				{
					u8 addr[8];
					static u8 Len = 0;
					n = strlen(ptr);
     f40:	fc 01       	movw	r30, r24
     f42:	01 90       	ld	r0, Z+
     f44:	00 20       	and	r0, r0
     f46:	e9 f7       	brne	.-6      	; 0xf42 <appTask+0x738>
     f48:	31 97       	sbiw	r30, 0x01	; 1
     f4a:	1e 2f       	mov	r17, r30
     f4c:	18 1b       	sub	r17, r24
					k = 0;
					l = 0;
					
					// Get length of Validation code
					halGetEeprom(VALIDATION_CODE_ADDR, 1, &Len);
     f4e:	4a e2       	ldi	r20, 0x2A	; 42
     f50:	55 e0       	ldi	r21, 0x05	; 5
     f52:	61 e0       	ldi	r22, 0x01	; 1
     f54:	87 e5       	ldi	r24, 0x57	; 87
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <halGetEeprom>
					
					// 	Get Validation Code from EEPROM
					halGetEeprom(((u8*)VALIDATION_CODE_ADDR+1), Len, addr);
     f5c:	ae 01       	movw	r20, r28
     f5e:	47 5d       	subi	r20, 0xD7	; 215
     f60:	5f 4f       	sbci	r21, 0xFF	; 255
     f62:	60 91 2a 05 	lds	r22, 0x052A	; 0x80052a <__data_end>
     f66:	88 e5       	ldi	r24, 0x58	; 88
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <halGetEeprom>
				{
					u8 addr[8];
					static u8 Len = 0;
					n = strlen(ptr);
					k = 0;
					l = 0;
     f6e:	00 e0       	ldi	r16, 0x00	; 0
     f70:	80 2f       	mov	r24, r16
     f72:	88 0f       	add	r24, r24
					halGetEeprom(VALIDATION_CODE_ADDR, 1, &Len);
					
					// 	Get Validation Code from EEPROM
					halGetEeprom(((u8*)VALIDATION_CODE_ADDR+1), Len, addr);
					
					while (k < n)
     f74:	81 17       	cp	r24, r17
     f76:	d0 f4       	brcc	.+52     	; 0xfac <appTask+0x7a2>
					{
						Setup[l] = (Ascii_to_nible ( *(ptr+k) ) * 16)
     f78:	45 01       	movw	r8, r10
     f7a:	88 0e       	add	r8, r24
     f7c:	91 1c       	adc	r9, r1
     f7e:	f4 01       	movw	r30, r8
     f80:	80 81       	ld	r24, Z
     f82:	0e 94 36 28 	call	0x506c	; 0x506c <Ascii_to_nible>
     f86:	f8 2e       	mov	r15, r24
						+  Ascii_to_nible ( *(ptr+k+1));
     f88:	d4 01       	movw	r26, r8
     f8a:	11 96       	adiw	r26, 0x01	; 1
     f8c:	8c 91       	ld	r24, X
     f8e:	0e 94 36 28 	call	0x506c	; 0x506c <Ascii_to_nible>
					// 	Get Validation Code from EEPROM
					halGetEeprom(((u8*)VALIDATION_CODE_ADDR+1), Len, addr);
					
					while (k < n)
					{
						Setup[l] = (Ascii_to_nible ( *(ptr+k) ) * 16)
     f92:	e1 e0       	ldi	r30, 0x01	; 1
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	ec 0f       	add	r30, r28
     f98:	fd 1f       	adc	r31, r29
     f9a:	e0 0f       	add	r30, r16
     f9c:	f1 1d       	adc	r31, r1
     f9e:	b0 e1       	ldi	r27, 0x10	; 16
     fa0:	fb 9e       	mul	r15, r27
     fa2:	80 0d       	add	r24, r0
     fa4:	11 24       	eor	r1, r1
     fa6:	80 83       	st	Z, r24
						+  Ascii_to_nible ( *(ptr+k+1));
						k += 2;
						l++;
     fa8:	0f 5f       	subi	r16, 0xFF	; 255
     faa:	e2 cf       	rjmp	.-60     	; 0xf70 <appTask+0x766>
					}

					if(memcmp(addr,Setup,Len) == 0)
     fac:	40 91 2a 05 	lds	r20, 0x052A	; 0x80052a <__data_end>
     fb0:	50 e0       	ldi	r21, 0x00	; 0
     fb2:	be 01       	movw	r22, r28
     fb4:	6f 5f       	subi	r22, 0xFF	; 255
     fb6:	7f 4f       	sbci	r23, 0xFF	; 255
     fb8:	ce 01       	movw	r24, r28
     fba:	89 96       	adiw	r24, 0x29	; 41
     fbc:	0e 94 05 32 	call	0x640a	; 0x640a <memcmp>
     fc0:	89 2b       	or	r24, r25
     fc2:	49 f4       	brne	.+18     	; 0xfd6 <appTask+0x7cc>
					{
						ReaderStateFlag.ValidateSetup = VALID_READER_SETUP; //Don't store this bit in eeprom it allows for validation check on every power cycle.
     fc4:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <ReaderStateFlag>
     fc8:	8b 7f       	andi	r24, 0xFB	; 251
     fca:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <ReaderStateFlag>
						OP = VALIDATE_READER;
     fce:	83 e1       	ldi	r24, 0x13	; 19
     fd0:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
     fd4:	06 c0       	rjmp	.+12     	; 0xfe2 <appTask+0x7d8>
					}
					else
					{
						
						OP = SETUP_REQUEST; // validation failed, request new setup info
     fd6:	8a e0       	ldi	r24, 0x0A	; 10
     fd8:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
						SETUP_TIMEOUT = true;
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <SETUP_TIMEOUT>
						
					}
				}

				// Response TIMEOUT
				if(VALIDATION_TIMEOUT)
     fe2:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <VALIDATION_TIMEOUT>
     fe6:	88 23       	and	r24, r24
     fe8:	b1 f0       	breq	.+44     	; 0x1016 <appTask+0x80c>
				{
					VALIDATION_TIMEOUT = false;
     fea:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <VALIDATION_TIMEOUT>
					sendBOWValidationRequest();// Re-send Validation Request
     fee:	0e 94 1b 09 	call	0x1236	; 0x1236 <sendBOWValidationRequest>
					
					macSetLongAlarm(SETUP_VALIDATION_TIMEOUT, ValidationTimeout); 		//check Every 5s
     ff2:	61 ea       	ldi	r22, 0xA1	; 161
     ff4:	71 e0       	ldi	r23, 0x01	; 1
     ff6:	8c e3       	ldi	r24, 0x3C	; 60
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <macSetLongAlarm>
     ffe:	0b c0       	rjmp	.+22     	; 0x1016 <appTask+0x80c>
				
				break;

				//case #14
				case IDLE:
				OP = SCANNING;
    1000:	82 e0       	ldi	r24, 0x02	; 2
    1002:	01 c0       	rjmp	.+2      	; 0x1006 <appTask+0x7fc>
				break;

				//case #16 BOW sending error codes
				case BOW_ERROR:
				OP = IDLE;
    1004:	87 e2       	ldi	r24, 0x27	; 39
    1006:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
				break;
    100a:	05 c0       	rjmp	.+10     	; 0x1016 <appTask+0x80c>

				//case #17 Re-associate with COORD using new ReaderID
				case APP_INIT:
				appInit();
    100c:	0e 94 27 03 	call	0x64e	; 0x64e <appInit>
				break;
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <appTask+0x80c>

				//case #18
				case AUDITDATA_REQUEST:
				sendBOWAuditDataRequest() ;
    1012:	0e 94 86 0c 	call	0x190c	; 0x190c <sendBOWAuditDataRequest>
			} //switch OP


		}// macConfig.associated

	}//appTask
    1016:	e5 96       	adiw	r28, 0x35	; 53
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	cd bf       	out	0x3d, r28	; 61
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	1f 91       	pop	r17
    1028:	0f 91       	pop	r16
    102a:	ff 90       	pop	r15
    102c:	ef 90       	pop	r14
    102e:	df 90       	pop	r13
    1030:	cf 90       	pop	r12
    1032:	bf 90       	pop	r11
    1034:	af 90       	pop	r10
    1036:	9f 90       	pop	r9
    1038:	8f 90       	pop	r8
    103a:	08 95       	ret

0000103c <timeoutWaitingForOLTReponse>:
bool sendBOWCCTransaction(structTransaction *transRecord);

static inline void timeoutWaitingForOLTReponse(void)
{
	
	timeout.sendingOfflineTransactions = true;
    103c:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <timeout>
    1040:	81 60       	ori	r24, 0x01	; 1
    1042:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <timeout>
    1046:	08 95       	ret

00001048 <constructOutgoingString>:
@param data Pointer to the data to be sent.

@param type Type of frame to be sent
*/
bool constructOutgoingString(u8 strType, char *tempStr)
{
    1048:	0f 93       	push	r16
    104a:	1f 93       	push	r17
    104c:	cf 93       	push	r28
    104e:	df 93       	push	r29
    1050:	8b 01       	movw	r16, r22
    1052:	eb 01       	movw	r28, r22
    1054:	21 96       	adiw	r28, 0x01	; 1
	switch(strType)
    1056:	83 30       	cpi	r24, 0x03	; 3
    1058:	09 f4       	brne	.+2      	; 0x105c <constructOutgoingString+0x14>
    105a:	4e c0       	rjmp	.+156    	; 0x10f8 <constructOutgoingString+0xb0>
    105c:	50 f5       	brcc	.+84     	; 0x10b2 <constructOutgoingString+0x6a>
    105e:	81 30       	cpi	r24, 0x01	; 1
    1060:	71 f1       	breq	.+92     	; 0x10be <constructOutgoingString+0x76>
    1062:	82 30       	cpi	r24, 0x02	; 2
    1064:	09 f0       	breq	.+2      	; 0x1068 <constructOutgoingString+0x20>
    1066:	7f c0       	rjmp	.+254    	; 0x1166 <constructOutgoingString+0x11e>
		
		break;
		
		case REQUEST_SETUP:
		// Build setup request string
		sprintf(tempStr+1, "<ReaderSetupInfo>"
    1068:	80 91 f2 0a 	lds	r24, 0x0AF2	; 0x800af2 <deviceStatus+0x1>
    106c:	1f 92       	push	r1
    106e:	8f 93       	push	r24
    1070:	80 91 f1 0a 	lds	r24, 0x0AF1	; 0x800af1 <deviceStatus>
    1074:	1f 92       	push	r1
    1076:	8f 93       	push	r24
    1078:	80 91 bf 09 	lds	r24, 0x09BF	; 0x8009bf <ReaderSetup+0x5>
    107c:	8f 93       	push	r24
    107e:	80 91 be 09 	lds	r24, 0x09BE	; 0x8009be <ReaderSetup+0x4>
    1082:	8f 93       	push	r24
    1084:	80 91 c1 09 	lds	r24, 0x09C1	; 0x8009c1 <ReaderSetup+0x7>
    1088:	8f 93       	push	r24
    108a:	80 91 c0 09 	lds	r24, 0x09C0	; 0x8009c0 <ReaderSetup+0x6>
    108e:	8f 93       	push	r24
    1090:	83 ec       	ldi	r24, 0xC3	; 195
    1092:	92 e0       	ldi	r25, 0x02	; 2
    1094:	9f 93       	push	r25
    1096:	8f 93       	push	r24
    1098:	df 93       	push	r29
    109a:	cf 93       	push	r28
    109c:	0e 94 cc 32 	call	0x6598	; 0x6598 <sprintf>
		"<laundryRoomId>%d</laundryRoomId>"
		"<manufacturerId>%d</manufacturerId>"
		"<code>%d%d</code>",ReaderSetup.locationId, ReaderSetup.manufacturerId, deviceStatus.deviceType[0],deviceStatus.deviceType[1]);
		
		break;
    10a0:	ad b7       	in	r26, 0x3d	; 61
    10a2:	be b7       	in	r27, 0x3e	; 62
    10a4:	1c 96       	adiw	r26, 0x0c	; 12
    10a6:	0f b6       	in	r0, 0x3f	; 63
    10a8:	f8 94       	cli
    10aa:	be bf       	out	0x3e, r27	; 62
    10ac:	0f be       	out	0x3f, r0	; 63
    10ae:	ad bf       	out	0x3d, r26	; 61
    10b0:	5a c0       	rjmp	.+180    	; 0x1166 <constructOutgoingString+0x11e>

@param type Type of frame to be sent
*/
bool constructOutgoingString(u8 strType, char *tempStr)
{
	switch(strType)
    10b2:	85 30       	cpi	r24, 0x05	; 5
    10b4:	71 f1       	breq	.+92     	; 0x1112 <constructOutgoingString+0xca>
    10b6:	30 f1       	brcs	.+76     	; 0x1104 <constructOutgoingString+0xbc>
    10b8:	86 30       	cpi	r24, 0x06	; 6
    10ba:	b1 f1       	breq	.+108    	; 0x1128 <constructOutgoingString+0xe0>
    10bc:	54 c0       	rjmp	.+168    	; 0x1166 <constructOutgoingString+0x11e>
	{
		case FIRMWARE_VERSION:
		//build firmware version string
		sprintf(tempStr+1, "<FirmwareVersion>"
    10be:	80 91 f2 0a 	lds	r24, 0x0AF2	; 0x800af2 <deviceStatus+0x1>
    10c2:	1f 92       	push	r1
    10c4:	8f 93       	push	r24
    10c6:	80 91 f1 0a 	lds	r24, 0x0AF1	; 0x800af1 <deviceStatus>
    10ca:	1f 92       	push	r1
    10cc:	8f 93       	push	r24
    10ce:	80 e8       	ldi	r24, 0x80	; 128
    10d0:	92 e0       	ldi	r25, 0x02	; 2
    10d2:	9f 93       	push	r25
    10d4:	8f 93       	push	r24
    10d6:	8a e8       	ldi	r24, 0x8A	; 138
    10d8:	92 e0       	ldi	r25, 0x02	; 2
    10da:	9f 93       	push	r25
    10dc:	8f 93       	push	r24
    10de:	df 93       	push	r29
    10e0:	cf 93       	push	r28
    10e2:	0e 94 cc 32 	call	0x6598	; 0x6598 <sprintf>
		"<fw>%s</fw>"
		"<DeviceType>%d%d<Devicetype>"
		,__APP_VERSION_STRING__,deviceStatus.deviceType[0],deviceStatus.deviceType[1]);
		
		break;
    10e6:	ad b7       	in	r26, 0x3d	; 61
    10e8:	be b7       	in	r27, 0x3e	; 62
    10ea:	1a 96       	adiw	r26, 0x0a	; 10
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	f8 94       	cli
    10f0:	be bf       	out	0x3e, r27	; 62
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	ad bf       	out	0x3d, r26	; 61
    10f6:	37 c0       	rjmp	.+110    	; 0x1166 <constructOutgoingString+0x11e>
		
		break;
		
		case REQUEST_VALIDATION:
		//build validation request string
		sprintf(tempStr+1, "<ValidationRequest>");
    10f8:	6a e2       	ldi	r22, 0x2A	; 42
    10fa:	73 e0       	ldi	r23, 0x03	; 3
    10fc:	ce 01       	movw	r24, r28
    10fe:	0e 94 2f 32 	call	0x645e	; 0x645e <strcpy>
		
		break;
    1102:	31 c0       	rjmp	.+98     	; 0x1166 <constructOutgoingString+0x11e>
		
		case REQUEST_MACHINE_LABEL:
		//build machine label response string
		
		sprintf(tempStr+1, "<MachineLabel>"
    1104:	87 ef       	ldi	r24, 0xF7	; 247
    1106:	99 e0       	ldi	r25, 0x09	; 9
    1108:	9f 93       	push	r25
    110a:	8f 93       	push	r24
    110c:	8e e3       	ldi	r24, 0x3E	; 62
    110e:	93 e0       	ldi	r25, 0x03	; 3
    1110:	1e c0       	rjmp	.+60     	; 0x114e <constructOutgoingString+0x106>
		break;
		
		case REQUEST_MACHINE_DESCRIPTION:
		
		//build machine description response string
		sprintf(tempStr+1, "<MachineDescription>"
    1112:	84 ec       	ldi	r24, 0xC4	; 196
    1114:	99 e0       	ldi	r25, 0x09	; 9
    1116:	9f 93       	push	r25
    1118:	8f 93       	push	r24
    111a:	88 e5       	ldi	r24, 0x58	; 88
    111c:	93 e0       	ldi	r25, 0x03	; 3
    111e:	9f 93       	push	r25
    1120:	8f 93       	push	r24
    1122:	df 93       	push	r29
    1124:	cf 93       	push	r28
    1126:	17 c0       	rjmp	.+46     	; 0x1156 <constructOutgoingString+0x10e>
		
		break;
		//number of OfflineTransactions
		case REQUEST_NUMBER_OF_OLT:
		
		halGetEeprom(OFFLINE_TRANSACTION_RECORD_ADDR, 1, &ReaderSetup.numOfSavedTransactions);
    1128:	43 ec       	ldi	r20, 0xC3	; 195
    112a:	59 e0       	ldi	r21, 0x09	; 9
    112c:	61 e0       	ldi	r22, 0x01	; 1
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	91 e0       	ldi	r25, 0x01	; 1
    1132:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <halGetEeprom>
		if (ReaderSetup.numOfSavedTransactions == 0xff)
    1136:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    113a:	8f 3f       	cpi	r24, 0xFF	; 255
    113c:	11 f4       	brne	.+4      	; 0x1142 <constructOutgoingString+0xfa>
		{
			ReaderSetup.numOfSavedTransactions = 0;
    113e:	10 92 c3 09 	sts	0x09C3, r1	; 0x8009c3 <ReaderSetup+0x9>
		}
		//build number of offline transactions string
		sprintf(tempStr+1, //"<OLT>"
    1142:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    1146:	1f 92       	push	r1
    1148:	8f 93       	push	r24
    114a:	88 e7       	ldi	r24, 0x78	; 120
    114c:	93 e0       	ldi	r25, 0x03	; 3
    114e:	9f 93       	push	r25
    1150:	8f 93       	push	r24
    1152:	df 93       	push	r29
    1154:	cf 93       	push	r28
    1156:	0e 94 cc 32 	call	0x6598	; 0x6598 <sprintf>
		"<OLT>%d</OLT>"
		,ReaderSetup.numOfSavedTransactions);
		
		break;
    115a:	0f 90       	pop	r0
    115c:	0f 90       	pop	r0
    115e:	0f 90       	pop	r0
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
		default:
		
		break;
	}
	
	tempStr[0] = strlen(tempStr+1); //get string length then assign to first element
    1166:	fe 01       	movw	r30, r28
    1168:	01 90       	ld	r0, Z+
    116a:	00 20       	and	r0, r0
    116c:	e9 f7       	brne	.-6      	; 0x1168 <constructOutgoingString+0x120>
	tempStr[0] = tempStr[0] + 1;    // data size = data byte + size byte
    116e:	ec 1b       	sub	r30, r28
    1170:	d8 01       	movw	r26, r16
    1172:	ec 93       	st	X, r30
	
	if (tempStr[0] > 127)
    1174:	8e 2f       	mov	r24, r30
    1176:	80 95       	com	r24
		//#error "Outgoing string to large"
		return false;
	}

	return true;
}
    1178:	88 1f       	adc	r24, r24
    117a:	88 27       	eor	r24, r24
    117c:	88 1f       	adc	r24, r24
    117e:	df 91       	pop	r29
    1180:	cf 91       	pop	r28
    1182:	1f 91       	pop	r17
    1184:	0f 91       	pop	r16
    1186:	08 95       	ret

00001188 <sendBOWReaderFirmwareVersion>:
/**
Application function, sends a data frame to the coordinator
This contains a string payload that is displayed on the coordinator end.
*/
bool sendBOWReaderFirmwareVersion()
{
    1188:	1f 93       	push	r17
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
    1192:	c0 58       	subi	r28, 0x80	; 128
    1194:	d1 09       	sbc	r29, r1
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	f8 94       	cli
    119a:	de bf       	out	0x3e, r29	; 62
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	cd bf       	out	0x3d, r28	; 61
	char tmp[128]={0};
    11a0:	be 01       	movw	r22, r28
    11a2:	6f 5f       	subi	r22, 0xFF	; 255
    11a4:	7f 4f       	sbci	r23, 0xFF	; 255
    11a6:	80 e8       	ldi	r24, 0x80	; 128
    11a8:	fb 01       	movw	r30, r22
    11aa:	11 92       	st	Z+, r1
    11ac:	8a 95       	dec	r24
    11ae:	e9 f7       	brne	.-6      	; 0x11aa <sendBOWReaderFirmwareVersion+0x22>

	if ( constructOutgoingString(FIRMWARE_VERSION, tmp) )
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	0e 94 24 08 	call	0x1048	; 0x1048 <constructOutgoingString>
    11b6:	18 2f       	mov	r17, r24
    11b8:	88 23       	and	r24, r24
    11ba:	41 f0       	breq	.+16     	; 0x11cc <sendBOWReaderFirmwareVersion+0x44>
	{
		macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);
    11bc:	ae 01       	movw	r20, r28
    11be:	4e 5f       	subi	r20, 0xFE	; 254
    11c0:	5f 4f       	sbci	r21, 0xFF	; 255
    11c2:	69 81       	ldd	r22, Y+1	; 0x01
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	0e 94 62 21 	call	0x42c4	; 0x42c4 <macDataRequest>
		return true;
	}
	return false;
}
    11cc:	81 2f       	mov	r24, r17
    11ce:	c0 58       	subi	r28, 0x80	; 128
    11d0:	df 4f       	sbci	r29, 0xFF	; 255
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	f8 94       	cli
    11d6:	de bf       	out	0x3e, r29	; 62
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	cd bf       	out	0x3d, r28	; 61
    11dc:	df 91       	pop	r29
    11de:	cf 91       	pop	r28
    11e0:	1f 91       	pop	r17
    11e2:	08 95       	ret

000011e4 <sendBOWSetupRequest>:
/**
Application function, sends a data frame to the coordinator
This contains a string payload that is displayed on the coordinator end.
*/
bool sendBOWSetupRequest()							//virgin
{
    11e4:	cf 93       	push	r28
    11e6:	df 93       	push	r29
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
    11ec:	c0 58       	subi	r28, 0x80	; 128
    11ee:	d1 09       	sbc	r29, r1
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
	char tmp[128] = {0};
    11fa:	be 01       	movw	r22, r28
    11fc:	6f 5f       	subi	r22, 0xFF	; 255
    11fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1200:	80 e8       	ldi	r24, 0x80	; 128
    1202:	fb 01       	movw	r30, r22
    1204:	11 92       	st	Z+, r1
    1206:	8a 95       	dec	r24
    1208:	e9 f7       	brne	.-6      	; 0x1204 <sendBOWSetupRequest+0x20>
	
	constructOutgoingString(REQUEST_SETUP, tmp);
    120a:	82 e0       	ldi	r24, 0x02	; 2
    120c:	0e 94 24 08 	call	0x1048	; 0x1048 <constructOutgoingString>
	macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);
    1210:	ae 01       	movw	r20, r28
    1212:	4e 5f       	subi	r20, 0xFE	; 254
    1214:	5f 4f       	sbci	r21, 0xFF	; 255
    1216:	69 81       	ldd	r22, Y+1	; 0x01
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	0e 94 62 21 	call	0x42c4	; 0x42c4 <macDataRequest>
	
	return true;
}
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	c0 58       	subi	r28, 0x80	; 128
    1224:	df 4f       	sbci	r29, 0xFF	; 255
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	f8 94       	cli
    122a:	de bf       	out	0x3e, r29	; 62
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	cd bf       	out	0x3d, r28	; 61
    1230:	df 91       	pop	r29
    1232:	cf 91       	pop	r28
    1234:	08 95       	ret

00001236 <sendBOWValidationRequest>:
/**
Application function, sends a data frame to the coordinator
This contains a string payload that is displayed on the coordinator end.
*/
bool sendBOWValidationRequest()
{
    1236:	cf 93       	push	r28
    1238:	df 93       	push	r29
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
    123e:	69 97       	sbiw	r28, 0x19	; 25
    1240:	0f b6       	in	r0, 0x3f	; 63
    1242:	f8 94       	cli
    1244:	de bf       	out	0x3e, r29	; 62
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	cd bf       	out	0x3d, r28	; 61
	char tmp[25] = {0};
    124a:	be 01       	movw	r22, r28
    124c:	6f 5f       	subi	r22, 0xFF	; 255
    124e:	7f 4f       	sbci	r23, 0xFF	; 255
    1250:	89 e1       	ldi	r24, 0x19	; 25
    1252:	fb 01       	movw	r30, r22
    1254:	11 92       	st	Z+, r1
    1256:	8a 95       	dec	r24
    1258:	e9 f7       	brne	.-6      	; 0x1254 <sendBOWValidationRequest+0x1e>
	
	constructOutgoingString(REQUEST_VALIDATION, tmp);
    125a:	83 e0       	ldi	r24, 0x03	; 3
    125c:	0e 94 24 08 	call	0x1048	; 0x1048 <constructOutgoingString>
	macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);
    1260:	ae 01       	movw	r20, r28
    1262:	4e 5f       	subi	r20, 0xFE	; 254
    1264:	5f 4f       	sbci	r21, 0xFF	; 255
    1266:	69 81       	ldd	r22, Y+1	; 0x01
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	0e 94 62 21 	call	0x42c4	; 0x42c4 <macDataRequest>
	
	return true;
}
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	69 96       	adiw	r28, 0x19	; 25
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	f8 94       	cli
    1278:	de bf       	out	0x3e, r29	; 62
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	cd bf       	out	0x3d, r28	; 61
    127e:	df 91       	pop	r29
    1280:	cf 91       	pop	r28
    1282:	08 95       	ret

00001284 <sendBOWMachineLabel>:
/**
Application function, sends a data frame to the coordinator
This contains a string payload that is displayed on the coordinator end.
*/
bool sendBOWMachineLabel()
{
    1284:	cf 93       	push	r28
    1286:	df 93       	push	r29
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
    128c:	a3 97       	sbiw	r28, 0x23	; 35
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	cd bf       	out	0x3d, r28	; 61
	char tmp[35] = {0};
    1298:	be 01       	movw	r22, r28
    129a:	6f 5f       	subi	r22, 0xFF	; 255
    129c:	7f 4f       	sbci	r23, 0xFF	; 255
    129e:	83 e2       	ldi	r24, 0x23	; 35
    12a0:	fb 01       	movw	r30, r22
    12a2:	11 92       	st	Z+, r1
    12a4:	8a 95       	dec	r24
    12a6:	e9 f7       	brne	.-6      	; 0x12a2 <sendBOWMachineLabel+0x1e>
	
	constructOutgoingString(REQUEST_MACHINE_LABEL, tmp);
    12a8:	84 e0       	ldi	r24, 0x04	; 4
    12aa:	0e 94 24 08 	call	0x1048	; 0x1048 <constructOutgoingString>
	macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);
    12ae:	ae 01       	movw	r20, r28
    12b0:	4e 5f       	subi	r20, 0xFE	; 254
    12b2:	5f 4f       	sbci	r21, 0xFF	; 255
    12b4:	69 81       	ldd	r22, Y+1	; 0x01
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	0e 94 62 21 	call	0x42c4	; 0x42c4 <macDataRequest>
	
	return true;
}
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	a3 96       	adiw	r28, 0x23	; 35
    12c2:	0f b6       	in	r0, 0x3f	; 63
    12c4:	f8 94       	cli
    12c6:	de bf       	out	0x3e, r29	; 62
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	cd bf       	out	0x3d, r28	; 61
    12cc:	df 91       	pop	r29
    12ce:	cf 91       	pop	r28
    12d0:	08 95       	ret

000012d2 <sendBOWMachineDescription>:
/**
Application function, sends a data frame to the coordinator
This contains a string payload that is displayed on the coordinator end.
*/
bool sendBOWMachineDescription()
{
    12d2:	cf 93       	push	r28
    12d4:	df 93       	push	r29
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	c5 55       	subi	r28, 0x55	; 85
    12dc:	d1 09       	sbc	r29, r1
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	f8 94       	cli
    12e2:	de bf       	out	0x3e, r29	; 62
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	cd bf       	out	0x3d, r28	; 61
	char tmp[85] = {0};
    12e8:	be 01       	movw	r22, r28
    12ea:	6f 5f       	subi	r22, 0xFF	; 255
    12ec:	7f 4f       	sbci	r23, 0xFF	; 255
    12ee:	85 e5       	ldi	r24, 0x55	; 85
    12f0:	fb 01       	movw	r30, r22
    12f2:	11 92       	st	Z+, r1
    12f4:	8a 95       	dec	r24
    12f6:	e9 f7       	brne	.-6      	; 0x12f2 <sendBOWMachineDescription+0x20>
	
	constructOutgoingString(REQUEST_MACHINE_DESCRIPTION, tmp);
    12f8:	85 e0       	ldi	r24, 0x05	; 5
    12fa:	0e 94 24 08 	call	0x1048	; 0x1048 <constructOutgoingString>
	macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);
    12fe:	ae 01       	movw	r20, r28
    1300:	4e 5f       	subi	r20, 0xFE	; 254
    1302:	5f 4f       	sbci	r21, 0xFF	; 255
    1304:	69 81       	ldd	r22, Y+1	; 0x01
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	0e 94 62 21 	call	0x42c4	; 0x42c4 <macDataRequest>
	
	return true;
}
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	cb 5a       	subi	r28, 0xAB	; 171
    1312:	df 4f       	sbci	r29, 0xFF	; 255
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	f8 94       	cli
    1318:	de bf       	out	0x3e, r29	; 62
    131a:	0f be       	out	0x3f, r0	; 63
    131c:	cd bf       	out	0x3d, r28	; 61
    131e:	df 91       	pop	r29
    1320:	cf 91       	pop	r28
    1322:	08 95       	ret

00001324 <sendNumberOfOLT>:
/**
Application function, sends a data frame to the coordinator
This contains a string payload that is displayed on the coordinator end.
*/
bool sendNumberOfOLT()
{
    1324:	cf 93       	push	r28
    1326:	df 93       	push	r29
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    132c:	a3 97       	sbiw	r28, 0x23	; 35
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	f8 94       	cli
    1332:	de bf       	out	0x3e, r29	; 62
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	cd bf       	out	0x3d, r28	; 61
	char tmp[35] = {0};
    1338:	be 01       	movw	r22, r28
    133a:	6f 5f       	subi	r22, 0xFF	; 255
    133c:	7f 4f       	sbci	r23, 0xFF	; 255
    133e:	83 e2       	ldi	r24, 0x23	; 35
    1340:	fb 01       	movw	r30, r22
    1342:	11 92       	st	Z+, r1
    1344:	8a 95       	dec	r24
    1346:	e9 f7       	brne	.-6      	; 0x1342 <sendNumberOfOLT+0x1e>
	
	constructOutgoingString(REQUEST_NUMBER_OF_OLT, tmp);
    1348:	86 e0       	ldi	r24, 0x06	; 6
    134a:	0e 94 24 08 	call	0x1048	; 0x1048 <constructOutgoingString>
	macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);
    134e:	ae 01       	movw	r20, r28
    1350:	4e 5f       	subi	r20, 0xFE	; 254
    1352:	5f 4f       	sbci	r21, 0xFF	; 255
    1354:	69 81       	ldd	r22, Y+1	; 0x01
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	0e 94 62 21 	call	0x42c4	; 0x42c4 <macDataRequest>
	
	return true;
}
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	a3 96       	adiw	r28, 0x23	; 35
    1362:	0f b6       	in	r0, 0x3f	; 63
    1364:	f8 94       	cli
    1366:	de bf       	out	0x3e, r29	; 62
    1368:	0f be       	out	0x3f, r0	; 63
    136a:	cd bf       	out	0x3d, r28	; 61
    136c:	df 91       	pop	r29
    136e:	cf 91       	pop	r28
    1370:	08 95       	ret

00001372 <extractIncomingMessage>:
\ or \c NULL if the substring is not found.

Sets also flag READER_SETUP_DONE
*/
u8 extractIncomingMessage(char *dataBuffer)
{
    1372:	8f 92       	push	r8
    1374:	9f 92       	push	r9
    1376:	af 92       	push	r10
    1378:	bf 92       	push	r11
    137a:	cf 92       	push	r12
    137c:	df 92       	push	r13
    137e:	ff 92       	push	r15
    1380:	0f 93       	push	r16
    1382:	1f 93       	push	r17
    1384:	cf 93       	push	r28
    1386:	df 93       	push	r29
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
    138c:	cd 54       	subi	r28, 0x4D	; 77
    138e:	d1 09       	sbc	r29, r1
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	f8 94       	cli
    1394:	de bf       	out	0x3e, r29	; 62
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	cd bf       	out	0x3d, r28	; 61
    139a:	2e 96       	adiw	r28, 0x0e	; 14
    139c:	9f af       	std	Y+63, r25	; 0x3f
    139e:	8e af       	std	Y+62, r24	; 0x3e
    13a0:	2e 97       	sbiw	r28, 0x0e	; 14
	u8 TemplongAddr[8] = {0};
    13a2:	6e 01       	movw	r12, r28
    13a4:	83 e4       	ldi	r24, 0x43	; 67
    13a6:	c8 0e       	add	r12, r24
    13a8:	d1 1c       	adc	r13, r1
    13aa:	88 e0       	ldi	r24, 0x08	; 8
    13ac:	f6 01       	movw	r30, r12
    13ae:	98 2f       	mov	r25, r24
    13b0:	11 92       	st	Z+, r1
    13b2:	9a 95       	dec	r25
    13b4:	e9 f7       	brne	.-6      	; 0x13b0 <extractIncomingMessage+0x3e>
	u8 MaclongAddr[8]  = {0};
    13b6:	5e 01       	movw	r10, r28
    13b8:	eb e3       	ldi	r30, 0x3B	; 59
    13ba:	ae 0e       	add	r10, r30
    13bc:	b1 1c       	adc	r11, r1
    13be:	f5 01       	movw	r30, r10
    13c0:	11 92       	st	Z+, r1
    13c2:	8a 95       	dec	r24
    13c4:	e9 f7       	brne	.-6      	; 0x13c0 <extractIncomingMessage+0x4e>
	u16 tmp;
	char *ptr;
	u8 n;
	char nibbleStr[50] = {0};
    13c6:	ce 01       	movw	r24, r28
    13c8:	01 96       	adiw	r24, 0x01	; 1
    13ca:	4c 01       	movw	r8, r24
    13cc:	82 e3       	ldi	r24, 0x32	; 50
    13ce:	f4 01       	movw	r30, r8
    13d0:	11 92       	st	Z+, r1
    13d2:	8a 95       	dec	r24
    13d4:	e9 f7       	brne	.-6      	; 0x13d0 <extractIncomingMessage+0x5e>
	u8 i = 0;
    13d6:	2c 96       	adiw	r28, 0x0c	; 12
    13d8:	1f ae       	std	Y+63, r1	; 0x3f
    13da:	2c 97       	sbiw	r28, 0x0c	; 12
	u8 Nibble = 0;
	u8 returnCode = OP;
    13dc:	f0 90 b7 09 	lds	r15, 0x09B7	; 0x8009b7 <OP>
	11 ShowBalance			SHOW_BALANCE_REQUEST
	12 faultcode
	13 AuditRq				AUDITDATA_REQUEST
*/
	//1
	if(strstr(dataBuffer, "SetupPackage") != NULL)
    13e0:	2e 96       	adiw	r28, 0x0e	; 14
    13e2:	0e ad       	ldd	r16, Y+62	; 0x3e
    13e4:	1f ad       	ldd	r17, Y+63	; 0x3f
    13e6:	2e 97       	sbiw	r28, 0x0e	; 14
    13e8:	66 e8       	ldi	r22, 0x86	; 134
    13ea:	73 e0       	ldi	r23, 0x03	; 3
    13ec:	c8 01       	movw	r24, r16
    13ee:	0e 94 50 32 	call	0x64a0	; 0x64a0 <strstr>
    13f2:	89 2b       	or	r24, r25
    13f4:	09 f4       	brne	.+2      	; 0x13f8 <extractIncomingMessage+0x86>
    13f6:	99 c0       	rjmp	.+306    	; 0x152a <extractIncomingMessage+0x1b8>
	{
		//if((ptr = GetParam(dataBuffer,"<SetupString>","<")) != NULL)			PPOS170601
		if((ptr = GetParam(dataBuffer,"<SS>","<")) != NULL)
    13f8:	49 e6       	ldi	r20, 0x69	; 105
    13fa:	52 e0       	ldi	r21, 0x02	; 2
    13fc:	63 e9       	ldi	r22, 0x93	; 147
    13fe:	73 e0       	ldi	r23, 0x03	; 3
    1400:	c8 01       	movw	r24, r16
    1402:	0e 94 c9 03 	call	0x792	; 0x792 <GetParam>
    1406:	00 97       	sbiw	r24, 0x00	; 0
    1408:	21 f1       	breq	.+72     	; 0x1452 <extractIncomingMessage+0xe0>
		{
			n = asciiStringToNibble(ptr, nibbleStr);
    140a:	b4 01       	movw	r22, r8
    140c:	0e 94 4a 28 	call	0x5094	; 0x5094 <asciiStringToNibble>
    1410:	8b ab       	std	Y+51, r24	; 0x33
			// copy setup data

			halPutEeprom(MACHINE_SETUP_ADDR, n, (u8*)nibbleStr); //write machine setup string to eeprom; Maurice's Fix
    1412:	a4 01       	movw	r20, r8
    1414:	68 2f       	mov	r22, r24
    1416:	84 e2       	ldi	r24, 0x24	; 36
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <halPutEeprom>
			
			ReaderSetup.maxOfflineTransaction = nibbleStr[n-1];  //PPOS170712
    141e:	8b a9       	ldd	r24, Y+51	; 0x33
    1420:	fe 01       	movw	r30, r28
    1422:	e8 0f       	add	r30, r24
    1424:	f1 1d       	adc	r31, r1
    1426:	80 81       	ld	r24, Z
    1428:	80 93 c2 09 	sts	0x09C2, r24	; 0x8009c2 <ReaderSetup+0x8>
			halPutEeprom(MAXNUM_OFFLINE_ADDR, 1, (u8*)&ReaderSetup.maxOfflineTransaction); //write machine setup string to eeprom minus "number of offline transactions"
    142c:	42 ec       	ldi	r20, 0xC2	; 194
    142e:	59 e0       	ldi	r21, 0x09	; 9
    1430:	61 e0       	ldi	r22, 0x01	; 1
    1432:	81 e6       	ldi	r24, 0x61	; 97
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <halPutEeprom>
			
			ReaderStateFlag.ReaderSetup = READER_SETUP_DONE;
    143a:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <ReaderStateFlag>
    143e:	8d 7f       	andi	r24, 0xFD	; 253
    1440:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <ReaderStateFlag>
			halPutEeprom(READER_STATE_ADDR, 1, (u8*)&ReaderStateFlag);
    1444:	44 e3       	ldi	r20, 0x34	; 52
    1446:	59 e0       	ldi	r21, 0x09	; 9
    1448:	61 e0       	ldi	r22, 0x01	; 1
    144a:	82 e2       	ldi	r24, 0x22	; 34
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <halPutEeprom>
		}
			
		if((ptr = GetParam((char *)dataBuffer,"<ValidationCode>","<")) != NULL)
    1452:	49 e6       	ldi	r20, 0x69	; 105
    1454:	52 e0       	ldi	r21, 0x02	; 2
    1456:	68 e9       	ldi	r22, 0x98	; 152
    1458:	73 e0       	ldi	r23, 0x03	; 3
    145a:	2e 96       	adiw	r28, 0x0e	; 14
    145c:	8e ad       	ldd	r24, Y+62	; 0x3e
    145e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1460:	2e 97       	sbiw	r28, 0x0e	; 14
    1462:	0e 94 c9 03 	call	0x792	; 0x792 <GetParam>
    1466:	00 97       	sbiw	r24, 0x00	; 0
    1468:	91 f0       	breq	.+36     	; 0x148e <extractIncomingMessage+0x11c>
		{			
			n = asciiStringToNibble(ptr, nibbleStr);
    146a:	b4 01       	movw	r22, r8
    146c:	0e 94 4a 28 	call	0x5094	; 0x5094 <asciiStringToNibble>
    1470:	8b ab       	std	Y+51, r24	; 0x33
			// save validation code
			halPutEeprom(VALIDATION_CODE_ADDR, 1, (u8*)&n);
    1472:	ae 01       	movw	r20, r28
    1474:	4d 5c       	subi	r20, 0xCD	; 205
    1476:	5f 4f       	sbci	r21, 0xFF	; 255
    1478:	61 e0       	ldi	r22, 0x01	; 1
    147a:	87 e5       	ldi	r24, 0x57	; 87
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <halPutEeprom>
			halPutEeprom(VALIDATION_CODE_ADDR+1, n, (u8*)nibbleStr);
    1482:	a4 01       	movw	r20, r8
    1484:	6b a9       	ldd	r22, Y+51	; 0x33
    1486:	88 e5       	ldi	r24, 0x58	; 88
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <halPutEeprom>
		}		
		
		if((ptr = GetParam((char *)dataBuffer,"<ReaderId>","<")) != NULL)
    148e:	49 e6       	ldi	r20, 0x69	; 105
    1490:	52 e0       	ldi	r21, 0x02	; 2
    1492:	69 ea       	ldi	r22, 0xA9	; 169
    1494:	73 e0       	ldi	r23, 0x03	; 3
    1496:	2e 96       	adiw	r28, 0x0e	; 14
    1498:	8e ad       	ldd	r24, Y+62	; 0x3e
    149a:	9f ad       	ldd	r25, Y+63	; 0x3f
    149c:	2e 97       	sbiw	r28, 0x0e	; 14
    149e:	0e 94 c9 03 	call	0x792	; 0x792 <GetParam>
    14a2:	00 97       	sbiw	r24, 0x00	; 0
    14a4:	81 f1       	breq	.+96     	; 0x1506 <extractIncomingMessage+0x194>
		{ //1
			tmp = atoi(ptr);
    14a6:	0e 94 fb 30 	call	0x61f6	; 0x61f6 <atoi>
    14aa:	2c 96       	adiw	r28, 0x0c	; 12
    14ac:	3f ad       	ldd	r19, Y+63	; 0x3f
    14ae:	2c 97       	sbiw	r28, 0x0c	; 12
	u16 tmp;
	char *ptr;
	u8 n;
	char nibbleStr[50] = {0};
	u8 i = 0;
	u8 Nibble = 0;
    14b0:	20 e0       	ldi	r18, 0x00	; 0
		
		if((ptr = GetParam((char *)dataBuffer,"<ReaderId>","<")) != NULL)
		{ //1
			tmp = atoi(ptr);
			
			while (tmp> 0)
    14b2:	00 97       	sbiw	r24, 0x00	; 0
    14b4:	c9 f0       	breq	.+50     	; 0x14e8 <extractIncomingMessage+0x176>
    14b6:	e3 2f       	mov	r30, r19
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
					Nibble = highNibble;
					break;

					case highNibble:

					TemplongAddr[i] =  ((tmp % 16)<<4)| TemplongAddr[i];
    14ba:	ec 0d       	add	r30, r12
    14bc:	fd 1d       	adc	r31, r13
		{ //1
			tmp = atoi(ptr);
			
			while (tmp> 0)
			{
				switch(Nibble)
    14be:	21 30       	cpi	r18, 0x01	; 1
    14c0:	29 f0       	breq	.+10     	; 0x14cc <extractIncomingMessage+0x15a>
				{
					case lowNibble:

					TemplongAddr[i] = (tmp % 16);
    14c2:	28 2f       	mov	r18, r24
    14c4:	2f 70       	andi	r18, 0x0F	; 15
    14c6:	20 83       	st	Z, r18
					Nibble = highNibble;
    14c8:	21 e0       	ldi	r18, 0x01	; 1
					break;
    14ca:	08 c0       	rjmp	.+16     	; 0x14dc <extractIncomingMessage+0x16a>

					case highNibble:

					TemplongAddr[i] =  ((tmp % 16)<<4)| TemplongAddr[i];
    14cc:	40 81       	ld	r20, Z
    14ce:	28 2f       	mov	r18, r24
    14d0:	22 95       	swap	r18
    14d2:	20 7f       	andi	r18, 0xF0	; 240
    14d4:	24 2b       	or	r18, r20
    14d6:	20 83       	st	Z, r18
					i++;
    14d8:	3f 5f       	subi	r19, 0xFF	; 255
					Nibble = lowNibble;
    14da:	20 e0       	ldi	r18, 0x00	; 0
					break;
				}
				
				tmp = tmp / 16;
    14dc:	74 e0       	ldi	r23, 0x04	; 4
    14de:	96 95       	lsr	r25
    14e0:	87 95       	ror	r24
    14e2:	7a 95       	dec	r23
    14e4:	e1 f7       	brne	.-8      	; 0x14de <extractIncomingMessage+0x16c>
    14e6:	e5 cf       	rjmp	.-54     	; 0x14b2 <extractIncomingMessage+0x140>
    14e8:	2c 96       	adiw	r28, 0x0c	; 12
    14ea:	3f af       	std	Y+63, r19	; 0x3f
    14ec:	2c 97       	sbiw	r28, 0x0c	; 12
			}

			//Update Reader to eeprom in Hex format
			halPutMacAddr(TemplongAddr);
    14ee:	a6 01       	movw	r20, r12
    14f0:	68 e0       	ldi	r22, 0x08	; 8
    14f2:	80 e0       	ldi	r24, 0x00	; 0
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <halPutEeprom>

			// Verify write operation
			halGetMacAddr(MaclongAddr);
    14fa:	a5 01       	movw	r20, r10
    14fc:	68 e0       	ldi	r22, 0x08	; 8
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <halGetEeprom>

		}//1


		// Re-associate with COORD using new ReaderID
		if(strcmp((char*)TemplongAddr,(char*)MaclongAddr) == 0 )
    1506:	b5 01       	movw	r22, r10
    1508:	c6 01       	movw	r24, r12
    150a:	0e 94 26 32 	call	0x644c	; 0x644c <strcmp>
    150e:	89 2b       	or	r24, r25
    1510:	09 f0       	breq	.+2      	; 0x1514 <extractIncomingMessage+0x1a2>
    1512:	5e c1       	rjmp	.+700    	; 0x17d0 <extractIncomingMessage+0x45e>
			#if (DEBUG)
			Beeps(5);// Beeps 5x
			#endif
			

			ReaderStateFlag.FirstRun = NON_VIRGIN_READER;
    1514:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <ReaderStateFlag>
    1518:	8e 7f       	andi	r24, 0xFE	; 254
    151a:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <ReaderStateFlag>
			halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
    151e:	44 e3       	ldi	r20, 0x34	; 52
    1520:	59 e0       	ldi	r21, 0x09	; 9
    1522:	61 e0       	ldi	r22, 0x01	; 1
    1524:	82 e2       	ldi	r24, 0x22	; 34
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	30 c0       	rjmp	.+96     	; 0x158a <extractIncomingMessage+0x218>
			returnCode = APP_INIT;
		}

	}
	//2
	else if(strstr(dataBuffer, "SetupRequest") != NULL)
    152a:	64 eb       	ldi	r22, 0xB4	; 180
    152c:	73 e0       	ldi	r23, 0x03	; 3
    152e:	c8 01       	movw	r24, r16
    1530:	0e 94 50 32 	call	0x64a0	; 0x64a0 <strstr>
    1534:	89 2b       	or	r24, r25
    1536:	09 f0       	breq	.+2      	; 0x153a <extractIncomingMessage+0x1c8>
    1538:	43 c1       	rjmp	.+646    	; 0x17c0 <extractIncomingMessage+0x44e>
	{
		returnCode = SETUP_REQUEST;
	}
	//3
	else if(strstr(dataBuffer, "ValidationResponse") != NULL)
    153a:	61 ec       	ldi	r22, 0xC1	; 193
    153c:	73 e0       	ldi	r23, 0x03	; 3
    153e:	c8 01       	movw	r24, r16
    1540:	0e 94 50 32 	call	0x64a0	; 0x64a0 <strstr>
    1544:	89 2b       	or	r24, r25
    1546:	09 f0       	breq	.+2      	; 0x154a <extractIncomingMessage+0x1d8>
    1548:	3e c1       	rjmp	.+636    	; 0x17c6 <extractIncomingMessage+0x454>
	{
		returnCode = VALIDATE_SETUP;
	}
	//4
	else if(strstr(dataBuffer, "GetFirmwareVersion") != NULL)
    154a:	64 ed       	ldi	r22, 0xD4	; 212
    154c:	73 e0       	ldi	r23, 0x03	; 3
    154e:	c8 01       	movw	r24, r16
    1550:	0e 94 50 32 	call	0x64a0	; 0x64a0 <strstr>
    1554:	89 2b       	or	r24, r25
    1556:	19 f0       	breq	.+6      	; 0x155e <extractIncomingMessage+0x1ec>
	{
		sendBOWReaderFirmwareVersion();
    1558:	0e 94 c4 08 	call	0x1188	; 0x1188 <sendBOWReaderFirmwareVersion>
    155c:	39 c1       	rjmp	.+626    	; 0x17d0 <extractIncomingMessage+0x45e>
		
	}
	//5
	else if(strstr(dataBuffer, "ResetEEPROM") != NULL)
    155e:	67 ee       	ldi	r22, 0xE7	; 231
    1560:	73 e0       	ldi	r23, 0x03	; 3
    1562:	c8 01       	movw	r24, r16
    1564:	0e 94 50 32 	call	0x64a0	; 0x64a0 <strstr>
    1568:	89 2b       	or	r24, r25
    156a:	a1 f0       	breq	.+40     	; 0x1594 <extractIncomingMessage+0x222>
	{
		unsigned char reset_eeprom[8] = {255,255,255,255,255,255,255,255};
    156c:	88 e0       	ldi	r24, 0x08	; 8
    156e:	e7 e2       	ldi	r30, 0x27	; 39
    1570:	f2 e0       	ldi	r31, 0x02	; 2
    1572:	de 01       	movw	r26, r28
    1574:	d3 96       	adiw	r26, 0x33	; 51
    1576:	01 90       	ld	r0, Z+
    1578:	0d 92       	st	X+, r0
    157a:	8a 95       	dec	r24
    157c:	e1 f7       	brne	.-8      	; 0x1576 <extractIncomingMessage+0x204>
		halPutEeprom(0,8,(u8*)reset_eeprom);
    157e:	ae 01       	movw	r20, r28
    1580:	4d 5c       	subi	r20, 0xCD	; 205
    1582:	5f 4f       	sbci	r21, 0xFF	; 255
    1584:	68 e0       	ldi	r22, 0x08	; 8
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <halPutEeprom>
		
		// re-associate
		returnCode = APP_INIT;
    158e:	60 e2       	ldi	r22, 0x20	; 32
    1590:	f6 2e       	mov	r15, r22
    1592:	1e c1       	rjmp	.+572    	; 0x17d0 <extractIncomingMessage+0x45e>
	}
	//6
	else if(strstr(dataBuffer, "EnterBootloader") != NULL)
    1594:	63 ef       	ldi	r22, 0xF3	; 243
    1596:	73 e0       	ldi	r23, 0x03	; 3
    1598:	c8 01       	movw	r24, r16
    159a:	0e 94 50 32 	call	0x64a0	; 0x64a0 <strstr>
    159e:	89 2b       	or	r24, r25
    15a0:	09 f4       	brne	.+2      	; 0x15a4 <extractIncomingMessage+0x232>
    15a2:	3b c0       	rjmp	.+118    	; 0x161a <extractIncomingMessage+0x2a8>
	{
		// Store Active CHANNEL to EEPROM Address 0xFF2
		halPutEeprom((u16*)CHANNEL_ADDR, 1, &macConfig.currentChannel);
    15a4:	40 e5       	ldi	r20, 0x50	; 80
    15a6:	5c e0       	ldi	r21, 0x0C	; 12
    15a8:	61 e0       	ldi	r22, 0x01	; 1
    15aa:	82 ef       	ldi	r24, 0xF2	; 242
    15ac:	9f e0       	ldi	r25, 0x0F	; 15
    15ae:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <halPutEeprom>

		// Store Active PAN_ID to EEPROM Address 0xFF4
		halPutEeprom((u16*)PANID_ADDR, 2, (u8*)&macConfig.panId);
    15b2:	47 e4       	ldi	r20, 0x47	; 71
    15b4:	5c e0       	ldi	r21, 0x0C	; 12
    15b6:	62 e0       	ldi	r22, 0x02	; 2
    15b8:	84 ef       	ldi	r24, 0xF4	; 244
    15ba:	9f e0       	ldi	r25, 0x0F	; 15
    15bc:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <halPutEeprom>

		// Store Active SHORT SOURCE ADDR to EEPROM Address 0xFF6
		halPutEeprom((u16*)SRCADDR_ADDR,2, (u8*)&macConfig.shortAddress);
    15c0:	49 e4       	ldi	r20, 0x49	; 73
    15c2:	5c e0       	ldi	r21, 0x0C	; 12
    15c4:	62 e0       	ldi	r22, 0x02	; 2
    15c6:	86 ef       	ldi	r24, 0xF6	; 246
    15c8:	9f e0       	ldi	r25, 0x0F	; 15
    15ca:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <halPutEeprom>
		
		i = 0x01;
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	2c 96       	adiw	r28, 0x0c	; 12
    15d2:	8f af       	std	Y+63, r24	; 0x3f
    15d4:	2c 97       	sbiw	r28, 0x0c	; 12
		halPutEeprom((u16*)BOOT_INIT_ADDR,1,(u8*)&i);
    15d6:	ae 01       	movw	r20, r28
    15d8:	45 5b       	subi	r20, 0xB5	; 181
    15da:	5f 4f       	sbci	r21, 0xFF	; 255
    15dc:	61 e0       	ldi	r22, 0x01	; 1
    15de:	80 ef       	ldi	r24, 0xF0	; 240
    15e0:	9f e0       	ldi	r25, 0x0F	; 15
    15e2:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <halPutEeprom>
		
		// zero out CRC and Application size memory location
		memset(dataBuffer,0,sizeof((char*)dataBuffer));
    15e6:	2e 96       	adiw	r28, 0x0e	; 14
    15e8:	ee ad       	ldd	r30, Y+62	; 0x3e
    15ea:	ff ad       	ldd	r31, Y+63	; 0x3f
    15ec:	2e 97       	sbiw	r28, 0x0e	; 14
    15ee:	11 82       	std	Z+1, r1	; 0x01
    15f0:	10 82       	st	Z, r1
		halPutEeprom((u16*)APP_CRC,6,(u8*)&dataBuffer);
    15f2:	ae 01       	movw	r20, r28
    15f4:	44 5b       	subi	r20, 0xB4	; 180
    15f6:	5f 4f       	sbci	r21, 0xFF	; 255
    15f8:	66 e0       	ldi	r22, 0x06	; 6
    15fa:	8a ef       	ldi	r24, 0xFA	; 250
    15fc:	9f e0       	ldi	r25, 0x0F	; 15
    15fe:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <halPutEeprom>

		
		// Initiate watchdog timer
		cli();
    1602:	f8 94       	cli
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    1604:	9f e0       	ldi	r25, 0x0F	; 15
    1606:	88 e1       	ldi	r24, 0x18	; 24
    1608:	0f b6       	in	r0, 0x3f	; 63
    160a:	f8 94       	cli
    160c:	a8 95       	wdr
    160e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		wdt_enable(WDTO_2S);
		while(1);
    1618:	ff cf       	rjmp	.-2      	; 0x1618 <extractIncomingMessage+0x2a6>

	}
	//7
	else if(strstr(dataBuffer, "SetD") != NULL)
    161a:	63 e0       	ldi	r22, 0x03	; 3
    161c:	74 e0       	ldi	r23, 0x04	; 4
    161e:	c8 01       	movw	r24, r16
    1620:	0e 94 50 32 	call	0x64a0	; 0x64a0 <strstr>
    1624:	89 2b       	or	r24, r25
    1626:	51 f1       	breq	.+84     	; 0x167c <extractIncomingMessage+0x30a>
	{
		if((ptr = GetParam((char *)dataBuffer,"<SetD>","<")) != NULL)
    1628:	49 e6       	ldi	r20, 0x69	; 105
    162a:	52 e0       	ldi	r21, 0x02	; 2
    162c:	68 e0       	ldi	r22, 0x08	; 8
    162e:	74 e0       	ldi	r23, 0x04	; 4
    1630:	c8 01       	movw	r24, r16
    1632:	0e 94 c9 03 	call	0x792	; 0x792 <GetParam>
    1636:	00 97       	sbiw	r24, 0x00	; 0
    1638:	09 f4       	brne	.+2      	; 0x163c <extractIncomingMessage+0x2ca>
    163a:	ca c0       	rjmp	.+404    	; 0x17d0 <extractIncomingMessage+0x45e>
		{
			if((n=strlen(ptr)) <= MACHINE_NAME_SIZE)
    163c:	fc 01       	movw	r30, r24
    163e:	01 90       	ld	r0, Z+
    1640:	00 20       	and	r0, r0
    1642:	e9 f7       	brne	.-6      	; 0x163e <extractIncomingMessage+0x2cc>
    1644:	31 97       	sbiw	r30, 0x01	; 1
    1646:	8f 01       	movw	r16, r30
    1648:	08 1b       	sub	r16, r24
    164a:	19 0b       	sbc	r17, r25
    164c:	0b ab       	std	Y+51, r16	; 0x33
    164e:	03 33       	cpi	r16, 0x33	; 51
    1650:	08 f0       	brcs	.+2      	; 0x1654 <extractIncomingMessage+0x2e2>
    1652:	be c0       	rjmp	.+380    	; 0x17d0 <extractIncomingMessage+0x45e>
			{
				strcpy((char*)ReaderSetup.machineDescription, ptr);
    1654:	bc 01       	movw	r22, r24
    1656:	84 ec       	ldi	r24, 0xC4	; 196
    1658:	99 e0       	ldi	r25, 0x09	; 9
    165a:	0e 94 2f 32 	call	0x645e	; 0x645e <strcpy>
				n++;//add null terminator to string
    165e:	61 e0       	ldi	r22, 0x01	; 1
    1660:	60 0f       	add	r22, r16
    1662:	6b ab       	std	Y+51, r22	; 0x33
				halPutEeprom(MACHINE_DESCRIPTION_ADDR, n, (u8*)&ReaderSetup.machineDescription);
    1664:	44 ec       	ldi	r20, 0xC4	; 196
    1666:	59 e0       	ldi	r21, 0x09	; 9
    1668:	87 e7       	ldi	r24, 0x77	; 119
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <halPutEeprom>
				
				ReaderStateFlag.ReaderNameSetup = SET_READER_FLAG;
    1670:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <ReaderStateFlag>
    1674:	8f 77       	andi	r24, 0x7F	; 127
    1676:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <ReaderStateFlag>
    167a:	3a c0       	rjmp	.+116    	; 0x16f0 <extractIncomingMessage+0x37e>
				halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
			}
		}
	}
	//8
	else if(strstr(dataBuffer, "GetD") != NULL)
    167c:	6f e0       	ldi	r22, 0x0F	; 15
    167e:	74 e0       	ldi	r23, 0x04	; 4
    1680:	c8 01       	movw	r24, r16
    1682:	0e 94 50 32 	call	0x64a0	; 0x64a0 <strstr>
    1686:	89 2b       	or	r24, r25
    1688:	19 f0       	breq	.+6      	; 0x1690 <extractIncomingMessage+0x31e>
	{
		sendBOWMachineDescription();
    168a:	0e 94 69 09 	call	0x12d2	; 0x12d2 <sendBOWMachineDescription>
    168e:	a0 c0       	rjmp	.+320    	; 0x17d0 <extractIncomingMessage+0x45e>
		
	}
	//9
	else if(strstr(dataBuffer, "SetMachineLabel") != NULL)
    1690:	64 e1       	ldi	r22, 0x14	; 20
    1692:	74 e0       	ldi	r23, 0x04	; 4
    1694:	c8 01       	movw	r24, r16
    1696:	0e 94 50 32 	call	0x64a0	; 0x64a0 <strstr>
    169a:	89 2b       	or	r24, r25
    169c:	89 f1       	breq	.+98     	; 0x1700 <extractIncomingMessage+0x38e>
	{
		if((ptr = GetParam((char *)dataBuffer,"<SetMachineLabel>","<")) != NULL)
    169e:	49 e6       	ldi	r20, 0x69	; 105
    16a0:	52 e0       	ldi	r21, 0x02	; 2
    16a2:	64 e2       	ldi	r22, 0x24	; 36
    16a4:	74 e0       	ldi	r23, 0x04	; 4
    16a6:	c8 01       	movw	r24, r16
    16a8:	0e 94 c9 03 	call	0x792	; 0x792 <GetParam>
    16ac:	00 97       	sbiw	r24, 0x00	; 0
    16ae:	09 f4       	brne	.+2      	; 0x16b2 <extractIncomingMessage+0x340>
    16b0:	8f c0       	rjmp	.+286    	; 0x17d0 <extractIncomingMessage+0x45e>
		{
			if((n=strlen(ptr)) <= MACHINE_LABEL_SIZE)
    16b2:	fc 01       	movw	r30, r24
    16b4:	01 90       	ld	r0, Z+
    16b6:	00 20       	and	r0, r0
    16b8:	e9 f7       	brne	.-6      	; 0x16b4 <extractIncomingMessage+0x342>
    16ba:	31 97       	sbiw	r30, 0x01	; 1
    16bc:	8f 01       	movw	r16, r30
    16be:	08 1b       	sub	r16, r24
    16c0:	19 0b       	sbc	r17, r25
    16c2:	0b ab       	std	Y+51, r16	; 0x33
    16c4:	0b 30       	cpi	r16, 0x0B	; 11
    16c6:	08 f0       	brcs	.+2      	; 0x16ca <extractIncomingMessage+0x358>
    16c8:	83 c0       	rjmp	.+262    	; 0x17d0 <extractIncomingMessage+0x45e>
			{
				strcpy((char*)ReaderSetup.machineLabel, ptr);
    16ca:	bc 01       	movw	r22, r24
    16cc:	87 ef       	ldi	r24, 0xF7	; 247
    16ce:	99 e0       	ldi	r25, 0x09	; 9
    16d0:	0e 94 2f 32 	call	0x645e	; 0x645e <strcpy>
				n++;//add null terminator to string
    16d4:	61 e0       	ldi	r22, 0x01	; 1
    16d6:	60 0f       	add	r22, r16
    16d8:	6b ab       	std	Y+51, r22	; 0x33
				halPutEeprom(MACHINE_LABEL_ADDR, n, (u8*)&ReaderSetup.machineLabel);
    16da:	47 ef       	ldi	r20, 0xF7	; 247
    16dc:	59 e0       	ldi	r21, 0x09	; 9
    16de:	8c e6       	ldi	r24, 0x6C	; 108
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <halPutEeprom>
				
				ReaderStateFlag.ReaderLabelSetup = SET_READER_FLAG;
    16e6:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag+0x1>
    16ea:	8e 7f       	andi	r24, 0xFE	; 254
    16ec:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag+0x1>
				halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
    16f0:	44 e3       	ldi	r20, 0x34	; 52
    16f2:	59 e0       	ldi	r21, 0x09	; 9
    16f4:	61 e0       	ldi	r22, 0x01	; 1
    16f6:	82 e2       	ldi	r24, 0x22	; 34
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <halPutEeprom>
    16fe:	68 c0       	rjmp	.+208    	; 0x17d0 <extractIncomingMessage+0x45e>
			}
			
		}
	}
	//10
	else if(strstr(dataBuffer, "GetMachineLabel") != NULL)
    1700:	66 e3       	ldi	r22, 0x36	; 54
    1702:	74 e0       	ldi	r23, 0x04	; 4
    1704:	c8 01       	movw	r24, r16
    1706:	0e 94 50 32 	call	0x64a0	; 0x64a0 <strstr>
    170a:	89 2b       	or	r24, r25
    170c:	19 f0       	breq	.+6      	; 0x1714 <extractIncomingMessage+0x3a2>
	{
		sendBOWMachineLabel();
    170e:	0e 94 42 09 	call	0x1284	; 0x1284 <sendBOWMachineLabel>
    1712:	5e c0       	rjmp	.+188    	; 0x17d0 <extractIncomingMessage+0x45e>
	}
	//11
	else if (strstr(dataBuffer, "GetOLT") != NULL)
    1714:	66 e4       	ldi	r22, 0x46	; 70
    1716:	74 e0       	ldi	r23, 0x04	; 4
    1718:	c8 01       	movw	r24, r16
    171a:	0e 94 50 32 	call	0x64a0	; 0x64a0 <strstr>
    171e:	89 2b       	or	r24, r25
    1720:	69 f0       	breq	.+26     	; 0x173c <extractIncomingMessage+0x3ca>
	{
		sendNumberOfOLT();
    1722:	0e 94 92 09 	call	0x1324	; 0x1324 <sendNumberOfOLT>
		
		oLTTimerId = macSetLongAlarm(SERVER_RESPONSE_TIMEOUT,timeoutWaitingForOLTReponse);
    1726:	6e e1       	ldi	r22, 0x1E	; 30
    1728:	78 e0       	ldi	r23, 0x08	; 8
    172a:	8c e3       	ldi	r24, 0x3C	; 60
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <macSetLongAlarm>
    1732:	80 93 30 05 	sts	0x0530, r24	; 0x800530 <oLTTimerId.4051>
		returnCode = SEND_OFFLINE_TRANSACTIONS;
    1736:	58 e2       	ldi	r21, 0x28	; 40
    1738:	f5 2e       	mov	r15, r21
    173a:	4a c0       	rjmp	.+148    	; 0x17d0 <extractIncomingMessage+0x45e>
	}
	//12
	else if(strstr(dataBuffer, "ShowBalance") != NULL)
    173c:	6d e4       	ldi	r22, 0x4D	; 77
    173e:	74 e0       	ldi	r23, 0x04	; 4
    1740:	c8 01       	movw	r24, r16
    1742:	0e 94 50 32 	call	0x64a0	; 0x64a0 <strstr>
    1746:	89 2b       	or	r24, r25
    1748:	09 f0       	breq	.+2      	; 0x174c <extractIncomingMessage+0x3da>
    174a:	40 c0       	rjmp	.+128    	; 0x17cc <extractIncomingMessage+0x45a>
	{
		returnCode = SHOW_BALANCE_REQUEST;
	}
	//13
	else if (strstr(dataBuffer, "faultcode") != NULL)
    174c:	69 e5       	ldi	r22, 0x59	; 89
    174e:	74 e0       	ldi	r23, 0x04	; 4
    1750:	c8 01       	movw	r24, r16
    1752:	0e 94 50 32 	call	0x64a0	; 0x64a0 <strstr>
    1756:	89 2b       	or	r24, r25
    1758:	49 f1       	breq	.+82     	; 0x17ac <extractIncomingMessage+0x43a>
	{
		char errCode = 0;
    175a:	1b aa       	std	Y+51, r1	; 0x33
		if((ptr = GetParam((char *)dataBuffer,"<faultcode>","<")) != NULL)
    175c:	49 e6       	ldi	r20, 0x69	; 105
    175e:	52 e0       	ldi	r21, 0x02	; 2
    1760:	63 e6       	ldi	r22, 0x63	; 99
    1762:	74 e0       	ldi	r23, 0x04	; 4
    1764:	c8 01       	movw	r24, r16
    1766:	0e 94 c9 03 	call	0x792	; 0x792 <GetParam>
    176a:	00 97       	sbiw	r24, 0x00	; 0
    176c:	89 f1       	breq	.+98     	; 0x17d0 <extractIncomingMessage+0x45e>
		{
			asciiStringToNibble(ptr, &errCode);
    176e:	be 01       	movw	r22, r28
    1770:	6d 5c       	subi	r22, 0xCD	; 205
    1772:	7f 4f       	sbci	r23, 0xFF	; 255
    1774:	0e 94 4a 28 	call	0x5094	; 0x5094 <asciiStringToNibble>
			
			switch(errCode)
    1778:	8b a9       	ldd	r24, Y+51	; 0x33
    177a:	86 30       	cpi	r24, 0x06	; 6
    177c:	49 f5       	brne	.+82     	; 0x17d0 <extractIncomingMessage+0x45e>
			{
				case TRANSACTION_SUCCESSFUL:
				if (returnCode == SEND_OFFLINE_TRANSACTIONS)
    177e:	f8 e2       	ldi	r31, 0x28	; 40
    1780:	ff 12       	cpse	r15, r31
    1782:	26 c0       	rjmp	.+76     	; 0x17d0 <extractIncomingMessage+0x45e>
				{
					macTimerEnd(oLTTimerId);
    1784:	80 91 30 05 	lds	r24, 0x0530	; 0x800530 <oLTTimerId.4051>
    1788:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <macTimerEnd>
					if( !sendStoredTransaction() )
    178c:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <sendStoredTransaction>
    1790:	88 23       	and	r24, r24
    1792:	49 f0       	breq	.+18     	; 0x17a6 <extractIncomingMessage+0x434>
					{ //All stored transactions have been sent
						returnCode = IDLE;
					}
					else
					{	//set new timer while waiting for next response
						oLTTimerId = macSetLongAlarm(SERVER_RESPONSE_TIMEOUT,timeoutWaitingForOLTReponse);
    1794:	6e e1       	ldi	r22, 0x1E	; 30
    1796:	78 e0       	ldi	r23, 0x08	; 8
    1798:	8c e3       	ldi	r24, 0x3C	; 60
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <macSetLongAlarm>
    17a0:	80 93 30 05 	sts	0x0530, r24	; 0x800530 <oLTTimerId.4051>
    17a4:	15 c0       	rjmp	.+42     	; 0x17d0 <extractIncomingMessage+0x45e>
				if (returnCode == SEND_OFFLINE_TRANSACTIONS)
				{
					macTimerEnd(oLTTimerId);
					if( !sendStoredTransaction() )
					{ //All stored transactions have been sent
						returnCode = IDLE;
    17a6:	47 e2       	ldi	r20, 0x27	; 39
    17a8:	f4 2e       	mov	r15, r20
    17aa:	12 c0       	rjmp	.+36     	; 0x17d0 <extractIncomingMessage+0x45e>
			}
		}
		
	}
	//14 new: Audit Data ACA Short Audit Command = 0x30
	else if(strstr(dataBuffer, "AuditRq") != NULL)
    17ac:	6f e6       	ldi	r22, 0x6F	; 111
    17ae:	74 e0       	ldi	r23, 0x04	; 4
    17b0:	c8 01       	movw	r24, r16
    17b2:	0e 94 50 32 	call	0x64a0	; 0x64a0 <strstr>
    17b6:	89 2b       	or	r24, r25
    17b8:	59 f0       	breq	.+22     	; 0x17d0 <extractIncomingMessage+0x45e>
	{
		returnCode = AUDITDATA_REQUEST;
    17ba:	37 e1       	ldi	r19, 0x17	; 23
    17bc:	f3 2e       	mov	r15, r19
    17be:	08 c0       	rjmp	.+16     	; 0x17d0 <extractIncomingMessage+0x45e>

	}
	//2
	else if(strstr(dataBuffer, "SetupRequest") != NULL)
	{
		returnCode = SETUP_REQUEST;
    17c0:	2a e0       	ldi	r18, 0x0A	; 10
    17c2:	f2 2e       	mov	r15, r18
    17c4:	05 c0       	rjmp	.+10     	; 0x17d0 <extractIncomingMessage+0x45e>
	}
	//3
	else if(strstr(dataBuffer, "ValidationResponse") != NULL)
	{
		returnCode = VALIDATE_SETUP;
    17c6:	94 e1       	ldi	r25, 0x14	; 20
    17c8:	f9 2e       	mov	r15, r25
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <extractIncomingMessage+0x45e>
		returnCode = SEND_OFFLINE_TRANSACTIONS;
	}
	//12
	else if(strstr(dataBuffer, "ShowBalance") != NULL)
	{
		returnCode = SHOW_BALANCE_REQUEST;
    17cc:	8f e1       	ldi	r24, 0x1F	; 31
    17ce:	f8 2e       	mov	r15, r24
	else if(strstr(dataBuffer, "AuditRq") != NULL)
	{
		returnCode = AUDITDATA_REQUEST;
	}
	return returnCode;
}
    17d0:	8f 2d       	mov	r24, r15
    17d2:	c3 5b       	subi	r28, 0xB3	; 179
    17d4:	df 4f       	sbci	r29, 0xFF	; 255
    17d6:	0f b6       	in	r0, 0x3f	; 63
    17d8:	f8 94       	cli
    17da:	de bf       	out	0x3e, r29	; 62
    17dc:	0f be       	out	0x3f, r0	; 63
    17de:	cd bf       	out	0x3d, r28	; 61
    17e0:	df 91       	pop	r29
    17e2:	cf 91       	pop	r28
    17e4:	1f 91       	pop	r17
    17e6:	0f 91       	pop	r16
    17e8:	ff 90       	pop	r15
    17ea:	df 90       	pop	r13
    17ec:	cf 90       	pop	r12
    17ee:	bf 90       	pop	r11
    17f0:	af 90       	pop	r10
    17f2:	9f 90       	pop	r9
    17f4:	8f 90       	pop	r8
    17f6:	08 95       	ret

000017f8 <sendBOWCCTransaction>:
The reader sends this packet frame to perform a vending transaction.

@param data Pointer to the data to be sent.
*/
bool sendBOWCCTransaction(structTransaction *transRecord)
{
    17f8:	ef 92       	push	r14
    17fa:	ff 92       	push	r15
    17fc:	0f 93       	push	r16
    17fe:	1f 93       	push	r17
    1800:	cf 93       	push	r28
    1802:	df 93       	push	r29
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
    1808:	ca 58       	subi	r28, 0x8A	; 138
    180a:	d1 09       	sbc	r29, r1
    180c:	0f b6       	in	r0, 0x3f	; 63
    180e:	f8 94       	cli
    1810:	de bf       	out	0x3e, r29	; 62
    1812:	0f be       	out	0x3f, r0	; 63
    1814:	cd bf       	out	0x3d, r28	; 61
    1816:	8c 01       	movw	r16, r24
	char tmpCardIdString[10] = {0};
    1818:	7e 01       	movw	r14, r28
    181a:	81 e8       	ldi	r24, 0x81	; 129
    181c:	e8 0e       	add	r14, r24
    181e:	f1 1c       	adc	r15, r1
    1820:	8a e0       	ldi	r24, 0x0A	; 10
    1822:	d7 01       	movw	r26, r14
    1824:	1d 92       	st	X+, r1
    1826:	8a 95       	dec	r24
    1828:	e9 f7       	brne	.-6      	; 0x1824 <sendBOWCCTransaction+0x2c>
	char tempStr[128] = {0};
    182a:	fe 01       	movw	r30, r28
    182c:	31 96       	adiw	r30, 0x01	; 1
    182e:	80 e8       	ldi	r24, 0x80	; 128
    1830:	df 01       	movw	r26, r30
    1832:	1d 92       	st	X+, r1
    1834:	8a 95       	dec	r24
    1836:	e9 f7       	brne	.-6      	; 0x1832 <sendBOWCCTransaction+0x3a>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ultoa_ncheck (unsigned long, char *, unsigned char);
	return __ultoa_ncheck (__val, __s, __radix);
    1838:	f8 01       	movw	r30, r16
    183a:	61 85       	ldd	r22, Z+9	; 0x09
    183c:	72 85       	ldd	r23, Z+10	; 0x0a
    183e:	83 85       	ldd	r24, Z+11	; 0x0b
    1840:	94 85       	ldd	r25, Z+12	; 0x0c
    1842:	2a e0       	ldi	r18, 0x0A	; 10
    1844:	a7 01       	movw	r20, r14
    1846:	0e 94 72 32 	call	0x64e4	; 0x64e4 <__ultoa_ncheck>
	
	//send data to BOW
	ultoa(transRecord->CardId,tmpCardIdString,10);
	sprintf((char *)tempStr+1, "<CC>"
    184a:	d8 01       	movw	r26, r16
    184c:	54 96       	adiw	r26, 0x14	; 20
    184e:	8c 91       	ld	r24, X
    1850:	54 97       	sbiw	r26, 0x14	; 20
    1852:	1f 92       	push	r1
    1854:	8f 93       	push	r24
    1856:	13 96       	adiw	r26, 0x03	; 3
    1858:	8c 91       	ld	r24, X
    185a:	13 97       	sbiw	r26, 0x03	; 3
    185c:	1f 92       	push	r1
    185e:	8f 93       	push	r24
    1860:	12 96       	adiw	r26, 0x02	; 2
    1862:	8c 91       	ld	r24, X
    1864:	12 97       	sbiw	r26, 0x02	; 2
    1866:	1f 92       	push	r1
    1868:	8f 93       	push	r24
    186a:	15 96       	adiw	r26, 0x05	; 5
    186c:	8c 91       	ld	r24, X
    186e:	15 97       	sbiw	r26, 0x05	; 5
    1870:	8f 93       	push	r24
    1872:	14 96       	adiw	r26, 0x04	; 4
    1874:	8c 91       	ld	r24, X
    1876:	14 97       	sbiw	r26, 0x04	; 4
    1878:	8f 93       	push	r24
    187a:	11 96       	adiw	r26, 0x01	; 1
    187c:	8c 91       	ld	r24, X
    187e:	11 97       	sbiw	r26, 0x01	; 1
    1880:	8f 93       	push	r24
    1882:	8c 91       	ld	r24, X
    1884:	8f 93       	push	r24
    1886:	17 96       	adiw	r26, 0x07	; 7
    1888:	6d 91       	ld	r22, X+
    188a:	7c 91       	ld	r23, X
    188c:	18 97       	sbiw	r26, 0x08	; 8
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <__floatunsisf>
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	48 ec       	ldi	r20, 0xC8	; 200
    189c:	52 e4       	ldi	r21, 0x42	; 66
    189e:	0e 94 98 2c 	call	0x5930	; 0x5930 <__divsf3>
    18a2:	9f 93       	push	r25
    18a4:	8f 93       	push	r24
    18a6:	7f 93       	push	r23
    18a8:	6f 93       	push	r22
    18aa:	ff 92       	push	r15
    18ac:	ef 92       	push	r14
    18ae:	87 e7       	ldi	r24, 0x77	; 119
    18b0:	94 e0       	ldi	r25, 0x04	; 4
    18b2:	9f 93       	push	r25
    18b4:	8f 93       	push	r24
    18b6:	8e 01       	movw	r16, r28
    18b8:	0e 5f       	subi	r16, 0xFE	; 254
    18ba:	1f 4f       	sbci	r17, 0xFF	; 255
    18bc:	1f 93       	push	r17
    18be:	0f 93       	push	r16
    18c0:	0e 94 cc 32 	call	0x6598	; 0x6598 <sprintf>
	"<code>%d%d</code>"
	"<isOL>%d</isOL>"
	,tmpCardIdString, (double)(transRecord->vendPrice / 100.0), transRecord->LocationId, transRecord->ManufactureId
	, transRecord->MachineId[0] , transRecord->MachineId[1], transRecord->isOffline);
	
	tempStr[0] = strlen(tempStr+1); //get string length then assign to first element
    18c4:	f8 01       	movw	r30, r16
    18c6:	01 90       	ld	r0, Z+
    18c8:	00 20       	and	r0, r0
    18ca:	e9 f7       	brne	.-6      	; 0x18c6 <sendBOWCCTransaction+0xce>
	tempStr[0] = tempStr[0] + 1;    // data size = data byte + size byte
    18cc:	6e 2f       	mov	r22, r30
    18ce:	60 1b       	sub	r22, r16
    18d0:	69 83       	std	Y+1, r22	; 0x01
	
	if (tempStr[0] > 127)
    18d2:	0f b6       	in	r0, 0x3f	; 63
    18d4:	f8 94       	cli
    18d6:	de bf       	out	0x3e, r29	; 62
    18d8:	0f be       	out	0x3f, r0	; 63
    18da:	cd bf       	out	0x3d, r28	; 61
    18dc:	67 fd       	sbrc	r22, 7
    18de:	07 c0       	rjmp	.+14     	; 0x18ee <sendBOWCCTransaction+0xf6>
	{
		//#error "Outgoing string to large"
		return false;
	}
	
	macDataRequest(DEFAULT_COORD_ADDR,(u8)tempStr[0],(u8*)tempStr+1); //send record via radio
    18e0:	a8 01       	movw	r20, r16
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	0e 94 62 21 	call	0x42c4	; 0x42c4 <macDataRequest>
	
	return true;
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	01 c0       	rjmp	.+2      	; 0x18f0 <sendBOWCCTransaction+0xf8>
	tempStr[0] = tempStr[0] + 1;    // data size = data byte + size byte
	
	if (tempStr[0] > 127)
	{
		//#error "Outgoing string to large"
		return false;
    18ee:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	macDataRequest(DEFAULT_COORD_ADDR,(u8)tempStr[0],(u8*)tempStr+1); //send record via radio
	
	return true;
}
    18f0:	c6 57       	subi	r28, 0x76	; 118
    18f2:	df 4f       	sbci	r29, 0xFF	; 255
    18f4:	0f b6       	in	r0, 0x3f	; 63
    18f6:	f8 94       	cli
    18f8:	de bf       	out	0x3e, r29	; 62
    18fa:	0f be       	out	0x3f, r0	; 63
    18fc:	cd bf       	out	0x3d, r28	; 61
    18fe:	df 91       	pop	r29
    1900:	cf 91       	pop	r28
    1902:	1f 91       	pop	r17
    1904:	0f 91       	pop	r16
    1906:	ff 90       	pop	r15
    1908:	ef 90       	pop	r14
    190a:	08 95       	ret

0000190c <sendBOWAuditDataRequest>:
/**
	@brief The sendBOWAuditDataRequest function is used to send a frame over the air to the BOW. 
	The reader sends this packet frame (Audit Data packet 0x30) to transmit Short Audit Data about the vend.
*/
bool sendBOWAuditDataRequest()
{
    190c:	cf 93       	push	r28
    190e:	df 93       	push	r29
    1910:	cd b7       	in	r28, 0x3d	; 61
    1912:	de b7       	in	r29, 0x3e	; 62
    1914:	c0 58       	subi	r28, 0x80	; 128
    1916:	d1 09       	sbc	r29, r1
    1918:	0f b6       	in	r0, 0x3f	; 63
    191a:	f8 94       	cli
    191c:	de bf       	out	0x3e, r29	; 62
    191e:	0f be       	out	0x3f, r0	; 63
    1920:	cd bf       	out	0x3d, r28	; 61
	char tmp[128] = {0};
    1922:	be 01       	movw	r22, r28
    1924:	6f 5f       	subi	r22, 0xFF	; 255
    1926:	7f 4f       	sbci	r23, 0xFF	; 255
    1928:	80 e8       	ldi	r24, 0x80	; 128
    192a:	fb 01       	movw	r30, r22
    192c:	11 92       	st	Z+, r1
    192e:	8a 95       	dec	r24
    1930:	e9 f7       	brne	.-6      	; 0x192c <sendBOWAuditDataRequest+0x20>
	
	constructOutgoingString(REQUEST_AUDITDATA, tmp);
    1932:	88 e0       	ldi	r24, 0x08	; 8
    1934:	0e 94 24 08 	call	0x1048	; 0x1048 <constructOutgoingString>
	macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);
    1938:	ae 01       	movw	r20, r28
    193a:	4e 5f       	subi	r20, 0xFE	; 254
    193c:	5f 4f       	sbci	r21, 0xFF	; 255
    193e:	69 81       	ldd	r22, Y+1	; 0x01
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	0e 94 62 21 	call	0x42c4	; 0x42c4 <macDataRequest>
	
	return true;
}
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	c0 58       	subi	r28, 0x80	; 128
    194c:	df 4f       	sbci	r29, 0xFF	; 255
    194e:	0f b6       	in	r0, 0x3f	; 63
    1950:	f8 94       	cli
    1952:	de bf       	out	0x3e, r29	; 62
    1954:	0f be       	out	0x3f, r0	; 63
    1956:	cd bf       	out	0x3d, r28	; 61
    1958:	df 91       	pop	r29
    195a:	cf 91       	pop	r28
    195c:	08 95       	ret

0000195e <sendSQDisplayCommand>:
   Led1 to led6 are limited to values defined in "display.h"

   Parameter:  u8 led1, u8 led2,u8 led3, u8 led4, u8 led5, u8 led6, u8 duration
 */
bool sendSQDisplayCommand(u8 led1, u8 led2,u8 led3, u8 led4, u8 led5, u8 led6, u8 duration)
{
    195e:	cf 92       	push	r12
    1960:	ef 92       	push	r14
    1962:	0f 93       	push	r16
    1964:	cf 93       	push	r28
    1966:	df 93       	push	r29
    1968:	cd b7       	in	r28, 0x3d	; 61
    196a:	de b7       	in	r29, 0x3e	; 62
    196c:	29 97       	sbiw	r28, 0x09	; 9
    196e:	0f b6       	in	r0, 0x3f	; 63
    1970:	f8 94       	cli
    1972:	de bf       	out	0x3e, r29	; 62
    1974:	0f be       	out	0x3f, r0	; 63
    1976:	cd bf       	out	0x3d, r28	; 61
	u8 temp[9]={0};
    1978:	fe 01       	movw	r30, r28
    197a:	31 96       	adiw	r30, 0x01	; 1
    197c:	99 e0       	ldi	r25, 0x09	; 9
    197e:	df 01       	movw	r26, r30
    1980:	1d 92       	st	X+, r1
    1982:	9a 95       	dec	r25
    1984:	e9 f7       	brne	.-6      	; 0x1980 <sendSQDisplayCommand+0x22>

	temp[0] = DISPLAY_REQUEST_BYTES;	//Number of actual data bytes to be transferred to the ACA including command data exclude bbc byte
    1986:	98 e0       	ldi	r25, 0x08	; 8
    1988:	99 83       	std	Y+1, r25	; 0x01
	temp[1] = DISPLAY_REQUEST;		//ACA command to be requested
    198a:	90 e6       	ldi	r25, 0x60	; 96
    198c:	9a 83       	std	Y+2, r25	; 0x02
	temp[2] = led1;					//Left most digit display character 6
    198e:	8b 83       	std	Y+3, r24	; 0x03
	temp[3] = led2;					//Display character 5
    1990:	6c 83       	std	Y+4, r22	; 0x04
	temp[4] = led3;					//Display character 4
    1992:	4d 83       	std	Y+5, r20	; 0x05
	temp[5] = led4;					//Display character 3
    1994:	2e 83       	std	Y+6, r18	; 0x06
	temp[6] = led5;
    1996:	0f 83       	std	Y+7, r16	; 0x07
	temp[7] = led6;
    1998:	e8 86       	std	Y+8, r14	; 0x08
	temp[8] = duration;				//Duration of display in seconds
    199a:	c9 86       	std	Y+9, r12	; 0x09

	return ( sendSQDataPacket(temp) );
    199c:	cf 01       	movw	r24, r30
    199e:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <sendSQDataPacket>
}
    19a2:	29 96       	adiw	r28, 0x09	; 9
    19a4:	0f b6       	in	r0, 0x3f	; 63
    19a6:	f8 94       	cli
    19a8:	de bf       	out	0x3e, r29	; 62
    19aa:	0f be       	out	0x3f, r0	; 63
    19ac:	cd bf       	out	0x3d, r28	; 61
    19ae:	df 91       	pop	r29
    19b0:	cf 91       	pop	r28
    19b2:	0f 91       	pop	r16
    19b4:	ef 90       	pop	r14
    19b6:	cf 90       	pop	r12
    19b8:	08 95       	ret

000019ba <displaySQReaderVersion>:
   on the ACA display for a minimum of 5 seconds.

   Parameter:  u8 led1, u8 led2,u8 led3, u8 led4, u8 led5, u8 led6, u8 duration
 */
bool displaySQReaderVersion(void)
{
    19ba:	cf 92       	push	r12
    19bc:	ef 92       	push	r14
    19be:	0f 93       	push	r16
	if( sendSQDisplayCommand(LED_r, msgNumber[__APP_MAJOR__],msgNumber[__APP_MINOR__],msgNumber[__APP_REVISION__], LED_BLANK,LED_BLANK,5) )
    19c0:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <msgNumber+0x1>
    19c4:	85 e0       	ldi	r24, 0x05	; 5
    19c6:	c8 2e       	mov	r12, r24
    19c8:	e1 2c       	mov	r14, r1
    19ca:	00 e0       	ldi	r16, 0x00	; 0
    19cc:	20 91 0d 02 	lds	r18, 0x020D	; 0x80020d <msgNumber>
    19d0:	46 2f       	mov	r20, r22
    19d2:	80 e5       	ldi	r24, 0x50	; 80
    19d4:	0e 94 af 0c 	call	0x195e	; 0x195e <sendSQDisplayCommand>
    19d8:	88 23       	and	r24, r24
    19da:	49 f0       	breq	.+18     	; 0x19ee <displaySQReaderVersion+0x34>
    19dc:	2f ef       	ldi	r18, 0xFF	; 255
    19de:	37 ea       	ldi	r19, 0xA7	; 167
    19e0:	91 e6       	ldi	r25, 0x61	; 97
    19e2:	21 50       	subi	r18, 0x01	; 1
    19e4:	30 40       	sbci	r19, 0x00	; 0
    19e6:	90 40       	sbci	r25, 0x00	; 0
    19e8:	e1 f7       	brne	.-8      	; 0x19e2 <displaySQReaderVersion+0x28>
    19ea:	00 c0       	rjmp	.+0      	; 0x19ec <displaySQReaderVersion+0x32>
    19ec:	00 00       	nop
	{
		_delay_ms(2000);
		return true;
	}
	return false;
}
    19ee:	0f 91       	pop	r16
    19f0:	ef 90       	pop	r14
    19f2:	cf 90       	pop	r12
    19f4:	08 95       	ret

000019f6 <displaySQBalance>:
   number will give you the code for the character that	corresponds to that digit, f.e. uctempBuf[0]=49. digit 1=uctempBuf[0]-0x30 .

   Parameter:  float balance
 */
bool displaySQBalance(float amount)
{	 
    19f6:	cf 93       	push	r28
    19f8:	df 93       	push	r29
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
    19fe:	2d 97       	sbiw	r28, 0x0d	; 13
    1a00:	0f b6       	in	r0, 0x3f	; 63
    1a02:	f8 94       	cli
    1a04:	de bf       	out	0x3e, r29	; 62
    1a06:	0f be       	out	0x3f, r0	; 63
    1a08:	cd bf       	out	0x3d, r28	; 61
    1a0a:	6a 87       	std	Y+10, r22	; 0x0a
    1a0c:	7b 87       	std	Y+11, r23	; 0x0b
    1a0e:	8c 87       	std	Y+12, r24	; 0x0c
    1a10:	9d 87       	std	Y+13, r25	; 0x0d
	u8 temp[9]={0};
    1a12:	ce 01       	movw	r24, r28
    1a14:	01 96       	adiw	r24, 0x01	; 1
    1a16:	29 e0       	ldi	r18, 0x09	; 9
    1a18:	fc 01       	movw	r30, r24
    1a1a:	11 92       	st	Z+, r1
    1a1c:	2a 95       	dec	r18
    1a1e:	e9 f7       	brne	.-6      	; 0x1a1a <displaySQBalance+0x24>
	 uint8_t * balance = (uint8_t *) &amount;
			
	temp[0] = DISPLAY_REQUEST_BYTES;	//Number of actual data bytes to be transferred to the ACA including command data exclude bbc byte
    1a20:	28 e0       	ldi	r18, 0x08	; 8
    1a22:	29 83       	std	Y+1, r18	; 0x01
	temp[1] = DISPLAY_REQUEST;			//ACA command to be requested
    1a24:	20 e6       	ldi	r18, 0x60	; 96
    1a26:	2a 83       	std	Y+2, r18	; 0x02
	temp[2] = balance[0];
    1a28:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a2a:	2b 83       	std	Y+3, r18	; 0x03
	temp[3] = balance[1];
    1a2c:	2b 85       	ldd	r18, Y+11	; 0x0b
    1a2e:	2c 83       	std	Y+4, r18	; 0x04
	temp[4] = balance[2];
    1a30:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a32:	2d 83       	std	Y+5, r18	; 0x05
	temp[5] = balance[3];	
    1a34:	2d 85       	ldd	r18, Y+13	; 0x0d
    1a36:	2e 83       	std	Y+6, r18	; 0x06
	temp[8] = 5;					//Duration of display in seconds
    1a38:	25 e0       	ldi	r18, 0x05	; 5
    1a3a:	29 87       	std	Y+9, r18	; 0x09
	
	return ( sendSQDataPacket(temp) );
    1a3c:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <sendSQDataPacket>
}
    1a40:	2d 96       	adiw	r28, 0x0d	; 13
    1a42:	0f b6       	in	r0, 0x3f	; 63
    1a44:	f8 94       	cli
    1a46:	de bf       	out	0x3e, r29	; 62
    1a48:	0f be       	out	0x3f, r0	; 63
    1a4a:	cd bf       	out	0x3d, r28	; 61
    1a4c:	df 91       	pop	r29
    1a4e:	cf 91       	pop	r28
    1a50:	08 95       	ret

00001a52 <displaySQTopOffvend>:
   Parameter:  double vend

   maybe I use the above funct instead
 */
bool displaySQTopOffvend(double vend)
{
    1a52:	cf 92       	push	r12
    1a54:	ef 92       	push	r14
    1a56:	0f 93       	push	r16
	if( sendSQDisplayCommand(LED_t, LED_o, LED_P, LED_BLANK, LED_BLANK,LED_BLANK, 5) )
    1a58:	85 e0       	ldi	r24, 0x05	; 5
    1a5a:	c8 2e       	mov	r12, r24
    1a5c:	e1 2c       	mov	r14, r1
    1a5e:	00 e0       	ldi	r16, 0x00	; 0
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	43 e7       	ldi	r20, 0x73	; 115
    1a64:	6c e5       	ldi	r22, 0x5C	; 92
    1a66:	88 e7       	ldi	r24, 0x78	; 120
    1a68:	0e 94 af 0c 	call	0x195e	; 0x195e <sendSQDisplayCommand>
    1a6c:	88 23       	and	r24, r24
    1a6e:	49 f0       	breq	.+18     	; 0x1a82 <displaySQTopOffvend+0x30>
    1a70:	2f ef       	ldi	r18, 0xFF	; 255
    1a72:	37 ea       	ldi	r19, 0xA7	; 167
    1a74:	91 e6       	ldi	r25, 0x61	; 97
    1a76:	21 50       	subi	r18, 0x01	; 1
    1a78:	30 40       	sbci	r19, 0x00	; 0
    1a7a:	90 40       	sbci	r25, 0x00	; 0
    1a7c:	e1 f7       	brne	.-8      	; 0x1a76 <displaySQTopOffvend+0x24>
    1a7e:	00 c0       	rjmp	.+0      	; 0x1a80 <displaySQTopOffvend+0x2e>
    1a80:	00 00       	nop
	{
		_delay_ms(2000);
		return true;
	}
	return false;
}
    1a82:	0f 91       	pop	r16
    1a84:	ef 90       	pop	r14
    1a86:	cf 90       	pop	r12
    1a88:	08 95       	ret

00001a8a <displaySQCardError>:

/** @brief Payment System Display Request. 
   
 */
bool displaySQCardError(void)
{
    1a8a:	cf 92       	push	r12
    1a8c:	ef 92       	push	r14
    1a8e:	0f 93       	push	r16
    1a90:	cf 93       	push	r28
	if( sendSQDisplayCommand(LED_C,LED_A,LED_r,LED_d,LED_BLANK,LED_BLANK,4) )
    1a92:	94 e0       	ldi	r25, 0x04	; 4
    1a94:	c9 2e       	mov	r12, r25
    1a96:	e1 2c       	mov	r14, r1
    1a98:	00 e0       	ldi	r16, 0x00	; 0
    1a9a:	2e e5       	ldi	r18, 0x5E	; 94
    1a9c:	40 e5       	ldi	r20, 0x50	; 80
    1a9e:	67 e7       	ldi	r22, 0x77	; 119
    1aa0:	89 e3       	ldi	r24, 0x39	; 57
    1aa2:	0e 94 af 0c 	call	0x195e	; 0x195e <sendSQDisplayCommand>
    1aa6:	c8 2f       	mov	r28, r24
    1aa8:	88 23       	and	r24, r24
    1aaa:	e9 f0       	breq	.+58     	; 0x1ae6 <displaySQCardError+0x5c>
    1aac:	2f ef       	ldi	r18, 0xFF	; 255
    1aae:	37 ea       	ldi	r19, 0xA7	; 167
    1ab0:	81 e6       	ldi	r24, 0x61	; 97
    1ab2:	21 50       	subi	r18, 0x01	; 1
    1ab4:	30 40       	sbci	r19, 0x00	; 0
    1ab6:	80 40       	sbci	r24, 0x00	; 0
    1ab8:	e1 f7       	brne	.-8      	; 0x1ab2 <displaySQCardError+0x28>
    1aba:	00 c0       	rjmp	.+0      	; 0x1abc <displaySQCardError+0x32>
    1abc:	00 00       	nop
	{
		_delay_ms(2000);
		if( sendSQDisplayCommand(LED_E, LED_r,LED_r,LED_BLANK,LED_BLANK,LED_BLANK,3) )
    1abe:	83 e0       	ldi	r24, 0x03	; 3
    1ac0:	c8 2e       	mov	r12, r24
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	40 e5       	ldi	r20, 0x50	; 80
    1ac6:	60 e5       	ldi	r22, 0x50	; 80
    1ac8:	89 e7       	ldi	r24, 0x79	; 121
    1aca:	0e 94 af 0c 	call	0x195e	; 0x195e <sendSQDisplayCommand>
    1ace:	88 23       	and	r24, r24
    1ad0:	51 f0       	breq	.+20     	; 0x1ae6 <displaySQCardError+0x5c>
    1ad2:	9f ef       	ldi	r25, 0xFF	; 255
    1ad4:	27 ea       	ldi	r18, 0xA7	; 167
    1ad6:	31 e6       	ldi	r19, 0x61	; 97
    1ad8:	91 50       	subi	r25, 0x01	; 1
    1ada:	20 40       	sbci	r18, 0x00	; 0
    1adc:	30 40       	sbci	r19, 0x00	; 0
    1ade:	e1 f7       	brne	.-8      	; 0x1ad8 <displaySQCardError+0x4e>
    1ae0:	00 c0       	rjmp	.+0      	; 0x1ae2 <displaySQCardError+0x58>
    1ae2:	00 00       	nop
    1ae4:	c8 2f       	mov	r28, r24
		_delay_ms(2000);

		return true;
	}
	return false;
}
    1ae6:	8c 2f       	mov	r24, r28
    1ae8:	cf 91       	pop	r28
    1aea:	0f 91       	pop	r16
    1aec:	ef 90       	pop	r14
    1aee:	cf 90       	pop	r12
    1af0:	08 95       	ret

00001af2 <displayMsg>:
Description: This function will be used to send text to the ACA 6 position 7 segment display.
Led1 to led6 are limited to values defined in "display.h"
***********************************************************************************************
*/
void displayMsg(u8 msg) 
{
    1af2:	cf 92       	push	r12
    1af4:	ef 92       	push	r14
    1af6:	0f 93       	push	r16
	if (msg == CARD_ERR_MSG)
    1af8:	81 30       	cpi	r24, 0x01	; 1
    1afa:	29 f4       	brne	.+10     	; 0x1b06 <displayMsg+0x14>
	else if (msg == CABLE_MSG)		//PPOS Test message
	{
		sendSQDisplayCommand(LED_C,LED_A,LED_b,LED_L,LED_E,LED_BLANK,5);
	}	

}
    1afc:	0f 91       	pop	r16
    1afe:	ef 90       	pop	r14
    1b00:	cf 90       	pop	r12
*/
void displayMsg(u8 msg) 
{
	if (msg == CARD_ERR_MSG)
	{
		displaySQCardError();
    1b02:	0c 94 45 0d 	jmp	0x1a8a	; 0x1a8a <displaySQCardError>
	}
	else if (msg == SETUP_MSG)		//no communication with the BOW
    1b06:	82 30       	cpi	r24, 0x02	; 2
    1b08:	49 f4       	brne	.+18     	; 0x1b1c <displayMsg+0x2a>
	{
		sendSQDisplayCommand(LED_n,LED_o,LED_S,LED_U,LED_BLANK,LED_BLANK,5);
    1b0a:	35 e0       	ldi	r19, 0x05	; 5
    1b0c:	c3 2e       	mov	r12, r19
    1b0e:	e1 2c       	mov	r14, r1
    1b10:	00 e0       	ldi	r16, 0x00	; 0
    1b12:	2e e3       	ldi	r18, 0x3E	; 62
    1b14:	4d e6       	ldi	r20, 0x6D	; 109
    1b16:	6c e5       	ldi	r22, 0x5C	; 92
    1b18:	84 e5       	ldi	r24, 0x54	; 84
    1b1a:	2a c0       	rjmp	.+84     	; 0x1b70 <displayMsg+0x7e>
	}
	else if (msg == BUSY_MSG)
    1b1c:	84 30       	cpi	r24, 0x04	; 4
    1b1e:	49 f4       	brne	.+18     	; 0x1b32 <displayMsg+0x40>
	{
		sendSQDisplayCommand(LED_b,LED_U,LED_S,LED_Y,LED_BLANK,LED_BLANK,5);
    1b20:	25 e0       	ldi	r18, 0x05	; 5
    1b22:	c2 2e       	mov	r12, r18
    1b24:	e1 2c       	mov	r14, r1
    1b26:	00 e0       	ldi	r16, 0x00	; 0
    1b28:	2e e6       	ldi	r18, 0x6E	; 110
    1b2a:	4d e6       	ldi	r20, 0x6D	; 109
    1b2c:	6e e3       	ldi	r22, 0x3E	; 62
    1b2e:	8c e7       	ldi	r24, 0x7C	; 124
    1b30:	1f c0       	rjmp	.+62     	; 0x1b70 <displayMsg+0x7e>
	}
	else if (msg == SERVICE_MSG)
    1b32:	83 30       	cpi	r24, 0x03	; 3
    1b34:	49 f4       	brne	.+18     	; 0x1b48 <displayMsg+0x56>
	{
		sendSQDisplayCommand(LED_S,LED_E,LED_r,LED_BLANK,LED_BLANK,LED_BLANK,5);
    1b36:	95 e0       	ldi	r25, 0x05	; 5
    1b38:	c9 2e       	mov	r12, r25
    1b3a:	e1 2c       	mov	r14, r1
    1b3c:	00 e0       	ldi	r16, 0x00	; 0
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	40 e5       	ldi	r20, 0x50	; 80
    1b42:	69 e7       	ldi	r22, 0x79	; 121
    1b44:	8d e6       	ldi	r24, 0x6D	; 109
    1b46:	14 c0       	rjmp	.+40     	; 0x1b70 <displayMsg+0x7e>
	}
	else if (msg == BLANK_MSG)
    1b48:	85 30       	cpi	r24, 0x05	; 5
    1b4a:	41 f4       	brne	.+16     	; 0x1b5c <displayMsg+0x6a>
	{
		sendSQDisplayCommand(LED_BLANK,LED_BLANK,LED_BLANK,LED_BLANK,LED_BLANK,LED_BLANK,0);
    1b4c:	c1 2c       	mov	r12, r1
    1b4e:	e1 2c       	mov	r14, r1
    1b50:	00 e0       	ldi	r16, 0x00	; 0
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	40 e0       	ldi	r20, 0x00	; 0
    1b56:	60 e0       	ldi	r22, 0x00	; 0
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	0a c0       	rjmp	.+20     	; 0x1b70 <displayMsg+0x7e>
	}
	else if (msg == CABLE_MSG)		//PPOS Test message
    1b5c:	86 30       	cpi	r24, 0x06	; 6
    1b5e:	51 f4       	brne	.+20     	; 0x1b74 <displayMsg+0x82>
	{
		sendSQDisplayCommand(LED_C,LED_A,LED_b,LED_L,LED_E,LED_BLANK,5);
    1b60:	85 e0       	ldi	r24, 0x05	; 5
    1b62:	c8 2e       	mov	r12, r24
    1b64:	e1 2c       	mov	r14, r1
    1b66:	09 e7       	ldi	r16, 0x79	; 121
    1b68:	28 e3       	ldi	r18, 0x38	; 56
    1b6a:	4c e7       	ldi	r20, 0x7C	; 124
    1b6c:	67 e7       	ldi	r22, 0x77	; 119
    1b6e:	89 e3       	ldi	r24, 0x39	; 57
    1b70:	0e 94 af 0c 	call	0x195e	; 0x195e <sendSQDisplayCommand>
	}	

}
    1b74:	0f 91       	pop	r16
    1b76:	ef 90       	pop	r14
    1b78:	cf 90       	pop	r12
    1b7a:	08 95       	ret

00001b7c <getSQSetupData>:
	temp[0] = AUDIO_BEEP_REQUEST_SIZE;
	temp[1] = AUDIO_BEEP_REQUEST;
	temp[2] = beepLength;

	return ( sendSQDataPacket(temp) );
}
    1b7c:	1f 93       	push	r17
    1b7e:	cf 93       	push	r28
    1b80:	df 93       	push	r29
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
    1b86:	ec 97       	sbiw	r28, 0x3c	; 60
    1b88:	0f b6       	in	r0, 0x3f	; 63
    1b8a:	f8 94       	cli
    1b8c:	de bf       	out	0x3e, r29	; 62
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	cd bf       	out	0x3d, r28	; 61
    1b92:	ae 01       	movw	r20, r28
    1b94:	4f 5f       	subi	r20, 0xFF	; 255
    1b96:	5f 4f       	sbci	r21, 0xFF	; 255
    1b98:	8c e3       	ldi	r24, 0x3C	; 60
    1b9a:	fa 01       	movw	r30, r20
    1b9c:	11 92       	st	Z+, r1
    1b9e:	8a 95       	dec	r24
    1ba0:	e9 f7       	brne	.-6      	; 0x1b9c <getSQSetupData+0x20>
    1ba2:	80 91 f1 0a 	lds	r24, 0x0AF1	; 0x800af1 <deviceStatus>
    1ba6:	82 32       	cpi	r24, 0x22	; 34
    1ba8:	09 f4       	brne	.+2      	; 0x1bac <getSQSetupData+0x30>
    1baa:	91 c0       	rjmp	.+290    	; 0x1cce <getSQSetupData+0x152>
    1bac:	89 32       	cpi	r24, 0x29	; 41
    1bae:	09 f4       	brne	.+2      	; 0x1bb2 <getSQSetupData+0x36>
    1bb0:	fb c0       	rjmp	.+502    	; 0x1da8 <getSQSetupData+0x22c>
    1bb2:	81 32       	cpi	r24, 0x21	; 33
    1bb4:	09 f0       	breq	.+2      	; 0x1bb8 <getSQSetupData+0x3c>
    1bb6:	59 c1       	rjmp	.+690    	; 0x1e6a <getSQSetupData+0x2ee>
    1bb8:	65 e1       	ldi	r22, 0x15	; 21
    1bba:	84 e2       	ldi	r24, 0x24	; 36
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <halGetEeprom>
    1bc2:	1a 85       	ldd	r17, Y+10	; 0x0a
    1bc4:	61 2f       	mov	r22, r17
    1bc6:	70 e0       	ldi	r23, 0x00	; 0
    1bc8:	76 2f       	mov	r23, r22
    1bca:	66 27       	eor	r22, r22
    1bcc:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bce:	68 0f       	add	r22, r24
    1bd0:	71 1d       	adc	r23, r1
    1bd2:	07 2e       	mov	r0, r23
    1bd4:	00 0c       	add	r0, r0
    1bd6:	88 0b       	sbc	r24, r24
    1bd8:	99 0b       	sbc	r25, r25
    1bda:	0e 94 3b 2d 	call	0x5a76	; 0x5a76 <__floatsisf>
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	48 ec       	ldi	r20, 0xC8	; 200
    1be4:	52 e4       	ldi	r21, 0x42	; 66
    1be6:	0e 94 98 2c 	call	0x5930	; 0x5930 <__divsf3>
    1bea:	60 93 16 0b 	sts	0x0B16, r22	; 0x800b16 <vendPrice>
    1bee:	70 93 17 0b 	sts	0x0B17, r23	; 0x800b17 <vendPrice+0x1>
    1bf2:	80 93 18 0b 	sts	0x0B18, r24	; 0x800b18 <vendPrice+0x2>
    1bf6:	90 93 19 0b 	sts	0x0B19, r25	; 0x800b19 <vendPrice+0x3>
    1bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfc:	80 93 cd 08 	sts	0x08CD, r24	; 0x8008cd <SQACAToploadProgramming+0x5>
    1c00:	10 92 ce 08 	sts	0x08CE, r1	; 0x8008ce <SQACAToploadProgramming+0x6>
    1c04:	8c 81       	ldd	r24, Y+4	; 0x04
    1c06:	80 93 cf 08 	sts	0x08CF, r24	; 0x8008cf <SQACAToploadProgramming+0x7>
    1c0a:	10 92 d0 08 	sts	0x08D0, r1	; 0x8008d0 <SQACAToploadProgramming+0x8>
    1c0e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c10:	80 93 d1 08 	sts	0x08D1, r24	; 0x8008d1 <SQACAToploadProgramming+0x9>
    1c14:	10 92 d2 08 	sts	0x08D2, r1	; 0x8008d2 <SQACAToploadProgramming+0xa>
    1c18:	88 85       	ldd	r24, Y+8	; 0x08
    1c1a:	80 93 d3 08 	sts	0x08D3, r24	; 0x8008d3 <SQACAToploadProgramming+0xb>
    1c1e:	10 92 d4 08 	sts	0x08D4, r1	; 0x8008d4 <SQACAToploadProgramming+0xc>
    1c22:	10 93 d5 08 	sts	0x08D5, r17	; 0x8008d5 <SQACAToploadProgramming+0xd>
    1c26:	10 92 d6 08 	sts	0x08D6, r1	; 0x8008d6 <SQACAToploadProgramming+0xe>
    1c2a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c2c:	80 93 d7 08 	sts	0x08D7, r24	; 0x8008d7 <SQACAToploadProgramming+0xf>
    1c30:	10 92 d8 08 	sts	0x08D8, r1	; 0x8008d8 <SQACAToploadProgramming+0x10>
    1c34:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c36:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <SQACAToploadProgramming+0x11>
    1c3a:	10 92 da 08 	sts	0x08DA, r1	; 0x8008da <SQACAToploadProgramming+0x12>
    1c3e:	88 89       	ldd	r24, Y+16	; 0x10
    1c40:	80 93 db 08 	sts	0x08DB, r24	; 0x8008db <SQACAToploadProgramming+0x13>
    1c44:	10 92 dc 08 	sts	0x08DC, r1	; 0x8008dc <SQACAToploadProgramming+0x14>
    1c48:	8a 89       	ldd	r24, Y+18	; 0x12
    1c4a:	80 93 dd 08 	sts	0x08DD, r24	; 0x8008dd <SQACAToploadProgramming+0x15>
    1c4e:	10 92 de 08 	sts	0x08DE, r1	; 0x8008de <SQACAToploadProgramming+0x16>
    1c52:	8c 89       	ldd	r24, Y+20	; 0x14
    1c54:	80 93 df 08 	sts	0x08DF, r24	; 0x8008df <SQACAToploadProgramming+0x17>
    1c58:	10 92 e0 08 	sts	0x08E0, r1	; 0x8008e0 <SQACAToploadProgramming+0x18>
    1c5c:	82 e3       	ldi	r24, 0x32	; 50
    1c5e:	80 93 e1 08 	sts	0x08E1, r24	; 0x8008e1 <SQACAToploadProgramming+0x19>
    1c62:	10 92 e2 08 	sts	0x08E2, r1	; 0x8008e2 <SQACAToploadProgramming+0x1a>
    1c66:	10 92 e3 08 	sts	0x08E3, r1	; 0x8008e3 <SQACAToploadProgramming+0x1b>
    1c6a:	10 92 e4 08 	sts	0x08E4, r1	; 0x8008e4 <SQACAToploadProgramming+0x1c>
    1c6e:	10 92 e5 08 	sts	0x08E5, r1	; 0x8008e5 <SQACAToploadProgramming+0x1d>
    1c72:	10 92 e6 08 	sts	0x08E6, r1	; 0x8008e6 <SQACAToploadProgramming+0x1e>
    1c76:	10 92 e7 08 	sts	0x08E7, r1	; 0x8008e7 <SQACAToploadProgramming+0x1f>
    1c7a:	10 92 e8 08 	sts	0x08E8, r1	; 0x8008e8 <SQACAToploadProgramming+0x20>
    1c7e:	9a e0       	ldi	r25, 0x0A	; 10
    1c80:	90 93 e9 08 	sts	0x08E9, r25	; 0x8008e9 <SQACAToploadProgramming+0x21>
    1c84:	84 e0       	ldi	r24, 0x04	; 4
    1c86:	80 93 ea 08 	sts	0x08EA, r24	; 0x8008ea <SQACAToploadProgramming+0x22>
    1c8a:	10 92 eb 08 	sts	0x08EB, r1	; 0x8008eb <SQACAToploadProgramming+0x23>
    1c8e:	27 e0       	ldi	r18, 0x07	; 7
    1c90:	20 93 ec 08 	sts	0x08EC, r18	; 0x8008ec <SQACAToploadProgramming+0x24>
    1c94:	90 93 ed 08 	sts	0x08ED, r25	; 0x8008ed <SQACAToploadProgramming+0x25>
    1c98:	80 93 ef 08 	sts	0x08EF, r24	; 0x8008ef <SQACAToploadProgramming+0x27>
    1c9c:	10 92 ee 08 	sts	0x08EE, r1	; 0x8008ee <SQACAToploadProgramming+0x26>
    1ca0:	26 e0       	ldi	r18, 0x06	; 6
    1ca2:	20 93 f0 08 	sts	0x08F0, r18	; 0x8008f0 <SQACAToploadProgramming+0x28>
    1ca6:	90 93 f1 08 	sts	0x08F1, r25	; 0x8008f1 <SQACAToploadProgramming+0x29>
    1caa:	80 93 f2 08 	sts	0x08F2, r24	; 0x8008f2 <SQACAToploadProgramming+0x2a>
    1cae:	10 92 f3 08 	sts	0x08F3, r1	; 0x8008f3 <SQACAToploadProgramming+0x2b>
    1cb2:	85 e0       	ldi	r24, 0x05	; 5
    1cb4:	80 93 f4 08 	sts	0x08F4, r24	; 0x8008f4 <SQACAToploadProgramming+0x2c>
    1cb8:	80 93 f5 08 	sts	0x08F5, r24	; 0x8008f5 <SQACAToploadProgramming+0x2d>
    1cbc:	10 92 f6 08 	sts	0x08F6, r1	; 0x8008f6 <SQACAToploadProgramming+0x2e>
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	80 93 f7 08 	sts	0x08F7, r24	; 0x8008f7 <SQACAToploadProgramming+0x2f>
    1cc6:	8d e1       	ldi	r24, 0x1D	; 29
    1cc8:	80 93 f8 08 	sts	0x08F8, r24	; 0x8008f8 <SQACAToploadProgramming+0x30>
    1ccc:	ce c0       	rjmp	.+412    	; 0x1e6a <getSQSetupData+0x2ee>
    1cce:	60 e1       	ldi	r22, 0x10	; 16
    1cd0:	84 e2       	ldi	r24, 0x24	; 36
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <halGetEeprom>
    1cd8:	1a 85       	ldd	r17, Y+10	; 0x0a
    1cda:	61 2f       	mov	r22, r17
    1cdc:	70 e0       	ldi	r23, 0x00	; 0
    1cde:	76 2f       	mov	r23, r22
    1ce0:	66 27       	eor	r22, r22
    1ce2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ce4:	68 0f       	add	r22, r24
    1ce6:	71 1d       	adc	r23, r1
    1ce8:	07 2e       	mov	r0, r23
    1cea:	00 0c       	add	r0, r0
    1cec:	88 0b       	sbc	r24, r24
    1cee:	99 0b       	sbc	r25, r25
    1cf0:	0e 94 3b 2d 	call	0x5a76	; 0x5a76 <__floatsisf>
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	48 ec       	ldi	r20, 0xC8	; 200
    1cfa:	52 e4       	ldi	r21, 0x42	; 66
    1cfc:	0e 94 98 2c 	call	0x5930	; 0x5930 <__divsf3>
    1d00:	60 93 16 0b 	sts	0x0B16, r22	; 0x800b16 <vendPrice>
    1d04:	70 93 17 0b 	sts	0x0B17, r23	; 0x800b17 <vendPrice+0x1>
    1d08:	80 93 18 0b 	sts	0x0B18, r24	; 0x800b18 <vendPrice+0x2>
    1d0c:	90 93 19 0b 	sts	0x0B19, r25	; 0x800b19 <vendPrice+0x3>
    1d10:	8a 81       	ldd	r24, Y+2	; 0x02
    1d12:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <SQACAFrontloadProgramming+0x5>
    1d16:	10 92 a8 08 	sts	0x08A8, r1	; 0x8008a8 <SQACAFrontloadProgramming+0x6>
    1d1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d1c:	80 93 a9 08 	sts	0x08A9, r24	; 0x8008a9 <SQACAFrontloadProgramming+0x7>
    1d20:	10 92 aa 08 	sts	0x08AA, r1	; 0x8008aa <SQACAFrontloadProgramming+0x8>
    1d24:	8e 81       	ldd	r24, Y+6	; 0x06
    1d26:	80 93 ab 08 	sts	0x08AB, r24	; 0x8008ab <SQACAFrontloadProgramming+0x9>
    1d2a:	10 92 ac 08 	sts	0x08AC, r1	; 0x8008ac <SQACAFrontloadProgramming+0xa>
    1d2e:	88 85       	ldd	r24, Y+8	; 0x08
    1d30:	80 93 ad 08 	sts	0x08AD, r24	; 0x8008ad <SQACAFrontloadProgramming+0xb>
    1d34:	10 92 ae 08 	sts	0x08AE, r1	; 0x8008ae <SQACAFrontloadProgramming+0xc>
    1d38:	10 93 af 08 	sts	0x08AF, r17	; 0x8008af <SQACAFrontloadProgramming+0xd>
    1d3c:	10 92 b0 08 	sts	0x08B0, r1	; 0x8008b0 <SQACAFrontloadProgramming+0xe>
    1d40:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d42:	80 93 b1 08 	sts	0x08B1, r24	; 0x8008b1 <SQACAFrontloadProgramming+0xf>
    1d46:	10 92 b2 08 	sts	0x08B2, r1	; 0x8008b2 <SQACAFrontloadProgramming+0x10>
    1d4a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d4c:	80 93 b3 08 	sts	0x08B3, r24	; 0x8008b3 <SQACAFrontloadProgramming+0x11>
    1d50:	10 92 b4 08 	sts	0x08B4, r1	; 0x8008b4 <SQACAFrontloadProgramming+0x12>
    1d54:	88 89       	ldd	r24, Y+16	; 0x10
    1d56:	80 93 b5 08 	sts	0x08B5, r24	; 0x8008b5 <SQACAFrontloadProgramming+0x13>
    1d5a:	10 92 b6 08 	sts	0x08B6, r1	; 0x8008b6 <SQACAFrontloadProgramming+0x14>
    1d5e:	8a 89       	ldd	r24, Y+18	; 0x12
    1d60:	80 93 b7 08 	sts	0x08B7, r24	; 0x8008b7 <SQACAFrontloadProgramming+0x15>
    1d64:	10 92 b8 08 	sts	0x08B8, r1	; 0x8008b8 <SQACAFrontloadProgramming+0x16>
    1d68:	8c 89       	ldd	r24, Y+20	; 0x14
    1d6a:	80 93 b9 08 	sts	0x08B9, r24	; 0x8008b9 <SQACAFrontloadProgramming+0x17>
    1d6e:	10 92 ba 08 	sts	0x08BA, r1	; 0x8008ba <SQACAFrontloadProgramming+0x18>
    1d72:	82 e3       	ldi	r24, 0x32	; 50
    1d74:	80 93 bb 08 	sts	0x08BB, r24	; 0x8008bb <SQACAFrontloadProgramming+0x19>
    1d78:	10 92 bc 08 	sts	0x08BC, r1	; 0x8008bc <SQACAFrontloadProgramming+0x1a>
    1d7c:	82 e0       	ldi	r24, 0x02	; 2
    1d7e:	80 93 bd 08 	sts	0x08BD, r24	; 0x8008bd <SQACAFrontloadProgramming+0x1b>
    1d82:	93 e0       	ldi	r25, 0x03	; 3
    1d84:	90 93 be 08 	sts	0x08BE, r25	; 0x8008be <SQACAFrontloadProgramming+0x1c>
    1d88:	80 93 bf 08 	sts	0x08BF, r24	; 0x8008bf <SQACAFrontloadProgramming+0x1d>
    1d8c:	91 e0       	ldi	r25, 0x01	; 1
    1d8e:	90 93 c0 08 	sts	0x08C0, r25	; 0x8008c0 <SQACAFrontloadProgramming+0x1e>
    1d92:	94 e0       	ldi	r25, 0x04	; 4
    1d94:	90 93 c1 08 	sts	0x08C1, r25	; 0x8008c1 <SQACAFrontloadProgramming+0x1f>
    1d98:	80 93 c2 08 	sts	0x08C2, r24	; 0x8008c2 <SQACAFrontloadProgramming+0x20>
    1d9c:	10 92 c4 08 	sts	0x08C4, r1	; 0x8008c4 <SQACAFrontloadProgramming+0x22>
    1da0:	8d e1       	ldi	r24, 0x1D	; 29
    1da2:	80 93 c5 08 	sts	0x08C5, r24	; 0x8008c5 <SQACAFrontloadProgramming+0x23>
    1da6:	61 c0       	rjmp	.+194    	; 0x1e6a <getSQSetupData+0x2ee>
    1da8:	61 e1       	ldi	r22, 0x11	; 17
    1daa:	84 e2       	ldi	r24, 0x24	; 36
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <halGetEeprom>
    1db2:	8a 81       	ldd	r24, Y+2	; 0x02
    1db4:	80 93 09 0a 	sts	0x0A09, r24	; 0x800a09 <SQACADryerProgramming+0x5>
    1db8:	10 92 0a 0a 	sts	0x0A0A, r1	; 0x800a0a <SQACADryerProgramming+0x6>
    1dbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dbe:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <SQACADryerProgramming+0x7>
    1dc2:	10 92 0c 0a 	sts	0x0A0C, r1	; 0x800a0c <SQACADryerProgramming+0x8>
    1dc6:	8e 81       	ldd	r24, Y+6	; 0x06
    1dc8:	80 93 0d 0a 	sts	0x0A0D, r24	; 0x800a0d <SQACADryerProgramming+0x9>
    1dcc:	10 92 0e 0a 	sts	0x0A0E, r1	; 0x800a0e <SQACADryerProgramming+0xa>
    1dd0:	88 85       	ldd	r24, Y+8	; 0x08
    1dd2:	80 93 0f 0a 	sts	0x0A0F, r24	; 0x800a0f <SQACADryerProgramming+0xb>
    1dd6:	10 92 10 0a 	sts	0x0A10, r1	; 0x800a10 <SQACADryerProgramming+0xc>
    1dda:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ddc:	80 93 11 0a 	sts	0x0A11, r24	; 0x800a11 <SQACADryerProgramming+0xd>
    1de0:	10 92 12 0a 	sts	0x0A12, r1	; 0x800a12 <SQACADryerProgramming+0xe>
    1de4:	88 89       	ldd	r24, Y+16	; 0x10
    1de6:	80 93 13 0a 	sts	0x0A13, r24	; 0x800a13 <SQACADryerProgramming+0xf>
    1dea:	8c 85       	ldd	r24, Y+12	; 0x0c
    1dec:	80 93 14 0a 	sts	0x0A14, r24	; 0x800a14 <SQACADryerProgramming+0x10>
    1df0:	10 92 15 0a 	sts	0x0A15, r1	; 0x800a15 <SQACADryerProgramming+0x11>
    1df4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1df6:	80 93 16 0a 	sts	0x0A16, r24	; 0x800a16 <SQACADryerProgramming+0x12>
    1dfa:	86 e2       	ldi	r24, 0x26	; 38
    1dfc:	80 93 17 0a 	sts	0x0A17, r24	; 0x800a17 <SQACADryerProgramming+0x13>
    1e00:	95 e0       	ldi	r25, 0x05	; 5
    1e02:	90 93 18 0a 	sts	0x0A18, r25	; 0x800a18 <SQACADryerProgramming+0x14>
    1e06:	80 93 19 0a 	sts	0x0A19, r24	; 0x800a19 <SQACADryerProgramming+0x15>
    1e0a:	86 e1       	ldi	r24, 0x16	; 22
    1e0c:	80 93 1a 0a 	sts	0x0A1A, r24	; 0x800a1a <SQACADryerProgramming+0x16>
    1e10:	8e e1       	ldi	r24, 0x1E	; 30
    1e12:	80 93 1b 0a 	sts	0x0A1B, r24	; 0x800a1b <SQACADryerProgramming+0x17>
    1e16:	8d e2       	ldi	r24, 0x2D	; 45
    1e18:	80 93 1c 0a 	sts	0x0A1C, r24	; 0x800a1c <SQACADryerProgramming+0x18>
    1e1c:	10 92 1d 0a 	sts	0x0A1D, r1	; 0x800a1d <SQACADryerProgramming+0x19>
    1e20:	80 93 1e 0a 	sts	0x0A1E, r24	; 0x800a1e <SQACADryerProgramming+0x1a>
    1e24:	10 92 1f 0a 	sts	0x0A1F, r1	; 0x800a1f <SQACADryerProgramming+0x1b>
    1e28:	83 e0       	ldi	r24, 0x03	; 3
    1e2a:	80 93 20 0a 	sts	0x0A20, r24	; 0x800a20 <SQACADryerProgramming+0x1c>
    1e2e:	80 93 21 0a 	sts	0x0A21, r24	; 0x800a21 <SQACADryerProgramming+0x1d>
    1e32:	80 93 22 0a 	sts	0x0A22, r24	; 0x800a22 <SQACADryerProgramming+0x1e>
    1e36:	80 93 23 0a 	sts	0x0A23, r24	; 0x800a23 <SQACADryerProgramming+0x1f>
    1e3a:	80 ea       	ldi	r24, 0xA0	; 160
    1e3c:	80 93 24 0a 	sts	0x0A24, r24	; 0x800a24 <SQACADryerProgramming+0x20>
    1e40:	8b e9       	ldi	r24, 0x9B	; 155
    1e42:	80 93 25 0a 	sts	0x0A25, r24	; 0x800a25 <SQACADryerProgramming+0x21>
    1e46:	83 e7       	ldi	r24, 0x73	; 115
    1e48:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <SQACADryerProgramming+0x23>
    1e4c:	84 e0       	ldi	r24, 0x04	; 4
    1e4e:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <SQACADryerProgramming+0x24>
    1e52:	8d e1       	ldi	r24, 0x1D	; 29
    1e54:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <SQACADryerProgramming+0x25>
    1e58:	10 92 2a 0a 	sts	0x0A2A, r1	; 0x800a2a <SQACADryerProgramming+0x26>
    1e5c:	10 92 2b 0a 	sts	0x0A2B, r1	; 0x800a2b <SQACADryerProgramming+0x27>
    1e60:	10 92 2c 0a 	sts	0x0A2C, r1	; 0x800a2c <SQACADryerProgramming+0x28>
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	80 93 2d 0a 	sts	0x0A2D, r24	; 0x800a2d <SQACADryerProgramming+0x29>
    1e6a:	ec 96       	adiw	r28, 0x3c	; 60
    1e6c:	0f b6       	in	r0, 0x3f	; 63
    1e6e:	f8 94       	cli
    1e70:	de bf       	out	0x3e, r29	; 62
    1e72:	0f be       	out	0x3f, r0	; 63
    1e74:	cd bf       	out	0x3d, r28	; 61
    1e76:	df 91       	pop	r29
    1e78:	cf 91       	pop	r28
    1e7a:	1f 91       	pop	r17
    1e7c:	08 95       	ret

00001e7e <sendSQDataPacket>:
    1e7e:	af 92       	push	r10
    1e80:	bf 92       	push	r11
    1e82:	cf 92       	push	r12
    1e84:	df 92       	push	r13
    1e86:	ef 92       	push	r14
    1e88:	ff 92       	push	r15
    1e8a:	0f 93       	push	r16
    1e8c:	1f 93       	push	r17
    1e8e:	cf 93       	push	r28
    1e90:	df 93       	push	r29
    1e92:	8c 01       	movw	r16, r24
    1e94:	98 e0       	ldi	r25, 0x08	; 8
    1e96:	f9 2e       	mov	r15, r25
    1e98:	c0 2e       	mov	r12, r16
    1e9a:	0e 94 50 27 	call	0x4ea0	; 0x4ea0 <init_rx_buf>
    1e9e:	f8 01       	movw	r30, r16
    1ea0:	d0 80       	ld	r13, Z
    1ea2:	d3 94       	inc	r13
    1ea4:	82 e0       	ldi	r24, 0x02	; 2
    1ea6:	0e 94 6d 27 	call	0x4eda	; 0x4eda <serial_putchar>
    1eaa:	c0 2f       	mov	r28, r16
    1eac:	d1 2f       	mov	r29, r17
    1eae:	82 e0       	ldi	r24, 0x02	; 2
    1eb0:	e8 2e       	mov	r14, r24
    1eb2:	8c 2f       	mov	r24, r28
    1eb4:	8c 19       	sub	r24, r12
    1eb6:	8d 15       	cp	r24, r13
    1eb8:	40 f4       	brcc	.+16     	; 0x1eca <sendSQDataPacket+0x4c>
    1eba:	5e 01       	movw	r10, r28
    1ebc:	89 91       	ld	r24, Y+
    1ebe:	0e 94 6d 27 	call	0x4eda	; 0x4eda <serial_putchar>
    1ec2:	f5 01       	movw	r30, r10
    1ec4:	80 81       	ld	r24, Z
    1ec6:	e8 26       	eor	r14, r24
    1ec8:	f4 cf       	rjmp	.-24     	; 0x1eb2 <sendSQDataPacket+0x34>
    1eca:	8e 2d       	mov	r24, r14
    1ecc:	0e 94 6d 27 	call	0x4eda	; 0x4eda <serial_putchar>
    1ed0:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <ucTimerCount>
    1ed4:	78 94       	sei
    1ed6:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <StartTimerZero>
    1eda:	80 91 15 0b 	lds	r24, 0x0B15	; 0x800b15 <ucTimerCount>
    1ede:	86 34       	cpi	r24, 0x46	; 70
    1ee0:	20 f4       	brcc	.+8      	; 0x1eea <sendSQDataPacket+0x6c>
    1ee2:	0e 94 9c 27 	call	0x4f38	; 0x4f38 <rx_buf_count>
    1ee6:	88 23       	and	r24, r24
    1ee8:	39 f0       	breq	.+14     	; 0x1ef8 <sendSQDataPacket+0x7a>
    1eea:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <StopTimerZero>
    1eee:	80 91 15 0b 	lds	r24, 0x0B15	; 0x800b15 <ucTimerCount>
    1ef2:	86 34       	cpi	r24, 0x46	; 70
    1ef4:	40 f0       	brcs	.+16     	; 0x1f06 <sendSQDataPacket+0x88>
    1ef6:	0d c0       	rjmp	.+26     	; 0x1f12 <sendSQDataPacket+0x94>
    1ef8:	0e 94 fd 21 	call	0x43fa	; 0x43fa <mac_event_pending>
    1efc:	88 23       	and	r24, r24
    1efe:	69 f3       	breq	.-38     	; 0x1eda <sendSQDataPacket+0x5c>
    1f00:	0e 94 51 22 	call	0x44a2	; 0x44a2 <macTask>
    1f04:	ea cf       	rjmp	.-44     	; 0x1eda <sendSQDataPacket+0x5c>
    1f06:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <serial_getchar>
    1f0a:	86 30       	cpi	r24, 0x06	; 6
    1f0c:	69 f0       	breq	.+26     	; 0x1f28 <sendSQDataPacket+0xaa>
    1f0e:	89 30       	cpi	r24, 0x09	; 9
    1f10:	49 f0       	breq	.+18     	; 0x1f24 <sendSQDataPacket+0xa6>
    1f12:	8f ed       	ldi	r24, 0xDF	; 223
    1f14:	9e e2       	ldi	r25, 0x2E	; 46
    1f16:	01 97       	sbiw	r24, 0x01	; 1
    1f18:	f1 f7       	brne	.-4      	; 0x1f16 <sendSQDataPacket+0x98>
    1f1a:	00 c0       	rjmp	.+0      	; 0x1f1c <sendSQDataPacket+0x9e>
    1f1c:	00 00       	nop
    1f1e:	fa 94       	dec	r15
    1f20:	f1 10       	cpse	r15, r1
    1f22:	bb cf       	rjmp	.-138    	; 0x1e9a <sendSQDataPacket+0x1c>
    1f24:	80 e0       	ldi	r24, 0x00	; 0
    1f26:	01 c0       	rjmp	.+2      	; 0x1f2a <sendSQDataPacket+0xac>
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	df 91       	pop	r29
    1f2c:	cf 91       	pop	r28
    1f2e:	1f 91       	pop	r17
    1f30:	0f 91       	pop	r16
    1f32:	ff 90       	pop	r15
    1f34:	ef 90       	pop	r14
    1f36:	df 90       	pop	r13
    1f38:	cf 90       	pop	r12
    1f3a:	bf 90       	pop	r11
    1f3c:	af 90       	pop	r10
    1f3e:	08 95       	ret

00001f40 <sendSQACAVendPrice>:
    1f40:	cf 93       	push	r28
    1f42:	df 93       	push	r29
    1f44:	cd b7       	in	r28, 0x3d	; 61
    1f46:	de b7       	in	r29, 0x3e	; 62
    1f48:	2b 97       	sbiw	r28, 0x0b	; 11
    1f4a:	0f b6       	in	r0, 0x3f	; 63
    1f4c:	f8 94       	cli
    1f4e:	de bf       	out	0x3e, r29	; 62
    1f50:	0f be       	out	0x3f, r0	; 63
    1f52:	cd bf       	out	0x3d, r28	; 61
    1f54:	ce 01       	movw	r24, r28
    1f56:	01 96       	adiw	r24, 0x01	; 1
    1f58:	2b e0       	ldi	r18, 0x0B	; 11
    1f5a:	fc 01       	movw	r30, r24
    1f5c:	11 92       	st	Z+, r1
    1f5e:	2a 95       	dec	r18
    1f60:	e9 f7       	brne	.-6      	; 0x1f5c <sendSQACAVendPrice+0x1c>
    1f62:	20 91 f6 0a 	lds	r18, 0x0AF6	; 0x800af6 <SQACAMachineStatus+0x1>
    1f66:	23 30       	cpi	r18, 0x03	; 3
    1f68:	09 f0       	breq	.+2      	; 0x1f6c <sendSQACAVendPrice+0x2c>
    1f6a:	e4 c0       	rjmp	.+456    	; 0x2134 <sendSQACAVendPrice+0x1f4>
    1f6c:	20 91 f1 0a 	lds	r18, 0x0AF1	; 0x800af1 <deviceStatus>
    1f70:	22 32       	cpi	r18, 0x22	; 34
    1f72:	09 f4       	brne	.+2      	; 0x1f76 <sendSQACAVendPrice+0x36>
    1f74:	61 c0       	rjmp	.+194    	; 0x2038 <sendSQACAVendPrice+0xf8>
    1f76:	29 32       	cpi	r18, 0x29	; 41
    1f78:	09 f4       	brne	.+2      	; 0x1f7c <sendSQACAVendPrice+0x3c>
    1f7a:	ab c0       	rjmp	.+342    	; 0x20d2 <sendSQACAVendPrice+0x192>
    1f7c:	21 32       	cpi	r18, 0x21	; 33
    1f7e:	09 f0       	breq	.+2      	; 0x1f82 <sendSQACAVendPrice+0x42>
    1f80:	d9 c0       	rjmp	.+434    	; 0x2134 <sendSQACAVendPrice+0x1f4>
    1f82:	2a e0       	ldi	r18, 0x0A	; 10
    1f84:	29 83       	std	Y+1, r18	; 0x01
    1f86:	22 e7       	ldi	r18, 0x72	; 114
    1f88:	2a 83       	std	Y+2, r18	; 0x02
    1f8a:	e0 91 f7 0a 	lds	r30, 0x0AF7	; 0x800af7 <SQACAMachineStatus+0x2>
    1f8e:	4e 2f       	mov	r20, r30
    1f90:	50 e0       	ldi	r21, 0x00	; 0
    1f92:	fa 01       	movw	r30, r20
    1f94:	31 97       	sbiw	r30, 0x01	; 1
    1f96:	e9 30       	cpi	r30, 0x09	; 9
    1f98:	f1 05       	cpc	r31, r1
    1f9a:	d0 f5       	brcc	.+116    	; 0x2010 <sendSQACAVendPrice+0xd0>
    1f9c:	e8 54       	subi	r30, 0x48	; 72
    1f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa0:	0c 94 11 2e 	jmp	0x5c22	; 0x5c22 <__tablejump2__>
    1fa4:	20 91 dd 08 	lds	r18, 0x08DD	; 0x8008dd <SQACAToploadProgramming+0x15>
    1fa8:	2b 83       	std	Y+3, r18	; 0x03
    1faa:	20 91 de 08 	lds	r18, 0x08DE	; 0x8008de <SQACAToploadProgramming+0x16>
    1fae:	2f c0       	rjmp	.+94     	; 0x200e <sendSQACAVendPrice+0xce>
    1fb0:	20 91 db 08 	lds	r18, 0x08DB	; 0x8008db <SQACAToploadProgramming+0x13>
    1fb4:	2b 83       	std	Y+3, r18	; 0x03
    1fb6:	20 91 dc 08 	lds	r18, 0x08DC	; 0x8008dc <SQACAToploadProgramming+0x14>
    1fba:	29 c0       	rjmp	.+82     	; 0x200e <sendSQACAVendPrice+0xce>
    1fbc:	20 91 d9 08 	lds	r18, 0x08D9	; 0x8008d9 <SQACAToploadProgramming+0x11>
    1fc0:	2b 83       	std	Y+3, r18	; 0x03
    1fc2:	20 91 da 08 	lds	r18, 0x08DA	; 0x8008da <SQACAToploadProgramming+0x12>
    1fc6:	23 c0       	rjmp	.+70     	; 0x200e <sendSQACAVendPrice+0xce>
    1fc8:	20 91 d7 08 	lds	r18, 0x08D7	; 0x8008d7 <SQACAToploadProgramming+0xf>
    1fcc:	2b 83       	std	Y+3, r18	; 0x03
    1fce:	20 91 d8 08 	lds	r18, 0x08D8	; 0x8008d8 <SQACAToploadProgramming+0x10>
    1fd2:	1d c0       	rjmp	.+58     	; 0x200e <sendSQACAVendPrice+0xce>
    1fd4:	20 91 d5 08 	lds	r18, 0x08D5	; 0x8008d5 <SQACAToploadProgramming+0xd>
    1fd8:	2b 83       	std	Y+3, r18	; 0x03
    1fda:	20 91 d6 08 	lds	r18, 0x08D6	; 0x8008d6 <SQACAToploadProgramming+0xe>
    1fde:	17 c0       	rjmp	.+46     	; 0x200e <sendSQACAVendPrice+0xce>
    1fe0:	20 91 d3 08 	lds	r18, 0x08D3	; 0x8008d3 <SQACAToploadProgramming+0xb>
    1fe4:	2b 83       	std	Y+3, r18	; 0x03
    1fe6:	20 91 d4 08 	lds	r18, 0x08D4	; 0x8008d4 <SQACAToploadProgramming+0xc>
    1fea:	11 c0       	rjmp	.+34     	; 0x200e <sendSQACAVendPrice+0xce>
    1fec:	20 91 d1 08 	lds	r18, 0x08D1	; 0x8008d1 <SQACAToploadProgramming+0x9>
    1ff0:	2b 83       	std	Y+3, r18	; 0x03
    1ff2:	20 91 d2 08 	lds	r18, 0x08D2	; 0x8008d2 <SQACAToploadProgramming+0xa>
    1ff6:	0b c0       	rjmp	.+22     	; 0x200e <sendSQACAVendPrice+0xce>
    1ff8:	20 91 cf 08 	lds	r18, 0x08CF	; 0x8008cf <SQACAToploadProgramming+0x7>
    1ffc:	2b 83       	std	Y+3, r18	; 0x03
    1ffe:	20 91 d0 08 	lds	r18, 0x08D0	; 0x8008d0 <SQACAToploadProgramming+0x8>
    2002:	05 c0       	rjmp	.+10     	; 0x200e <sendSQACAVendPrice+0xce>
    2004:	20 91 cd 08 	lds	r18, 0x08CD	; 0x8008cd <SQACAToploadProgramming+0x5>
    2008:	2b 83       	std	Y+3, r18	; 0x03
    200a:	20 91 ce 08 	lds	r18, 0x08CE	; 0x8008ce <SQACAToploadProgramming+0x6>
    200e:	2c 83       	std	Y+4, r18	; 0x04
    2010:	20 91 f8 0a 	lds	r18, 0x0AF8	; 0x800af8 <SQACAMachineStatus+0x3>
    2014:	21 30       	cpi	r18, 0x01	; 1
    2016:	49 f0       	breq	.+18     	; 0x202a <sendSQACAVendPrice+0xea>
    2018:	22 30       	cpi	r18, 0x02	; 2
    201a:	09 f0       	breq	.+2      	; 0x201e <sendSQACAVendPrice+0xde>
    201c:	8b c0       	rjmp	.+278    	; 0x2134 <sendSQACAVendPrice+0x1f4>
    201e:	20 91 e1 08 	lds	r18, 0x08E1	; 0x8008e1 <SQACAToploadProgramming+0x19>
    2022:	2d 83       	std	Y+5, r18	; 0x05
    2024:	20 91 e2 08 	lds	r18, 0x08E2	; 0x8008e2 <SQACAToploadProgramming+0x1a>
    2028:	05 c0       	rjmp	.+10     	; 0x2034 <sendSQACAVendPrice+0xf4>
    202a:	20 91 df 08 	lds	r18, 0x08DF	; 0x8008df <SQACAToploadProgramming+0x17>
    202e:	2d 83       	std	Y+5, r18	; 0x05
    2030:	20 91 e0 08 	lds	r18, 0x08E0	; 0x8008e0 <SQACAToploadProgramming+0x18>
    2034:	2e 83       	std	Y+6, r18	; 0x06
    2036:	7e c0       	rjmp	.+252    	; 0x2134 <sendSQACAVendPrice+0x1f4>
    2038:	2a e0       	ldi	r18, 0x0A	; 10
    203a:	29 83       	std	Y+1, r18	; 0x01
    203c:	22 e7       	ldi	r18, 0x72	; 114
    203e:	2a 83       	std	Y+2, r18	; 0x02
    2040:	e0 91 f7 0a 	lds	r30, 0x0AF7	; 0x800af7 <SQACAMachineStatus+0x2>
    2044:	4e 2f       	mov	r20, r30
    2046:	50 e0       	ldi	r21, 0x00	; 0
    2048:	fa 01       	movw	r30, r20
    204a:	31 97       	sbiw	r30, 0x01	; 1
    204c:	e9 30       	cpi	r30, 0x09	; 9
    204e:	f1 05       	cpc	r31, r1
    2050:	d0 f5       	brcc	.+116    	; 0x20c6 <sendSQACAVendPrice+0x186>
    2052:	ef 53       	subi	r30, 0x3F	; 63
    2054:	ff 4f       	sbci	r31, 0xFF	; 255
    2056:	0c 94 11 2e 	jmp	0x5c22	; 0x5c22 <__tablejump2__>
    205a:	20 91 b7 08 	lds	r18, 0x08B7	; 0x8008b7 <SQACAFrontloadProgramming+0x15>
    205e:	2b 83       	std	Y+3, r18	; 0x03
    2060:	20 91 b8 08 	lds	r18, 0x08B8	; 0x8008b8 <SQACAFrontloadProgramming+0x16>
    2064:	2f c0       	rjmp	.+94     	; 0x20c4 <sendSQACAVendPrice+0x184>
    2066:	20 91 b5 08 	lds	r18, 0x08B5	; 0x8008b5 <SQACAFrontloadProgramming+0x13>
    206a:	2b 83       	std	Y+3, r18	; 0x03
    206c:	20 91 b6 08 	lds	r18, 0x08B6	; 0x8008b6 <SQACAFrontloadProgramming+0x14>
    2070:	29 c0       	rjmp	.+82     	; 0x20c4 <sendSQACAVendPrice+0x184>
    2072:	20 91 b3 08 	lds	r18, 0x08B3	; 0x8008b3 <SQACAFrontloadProgramming+0x11>
    2076:	2b 83       	std	Y+3, r18	; 0x03
    2078:	20 91 b4 08 	lds	r18, 0x08B4	; 0x8008b4 <SQACAFrontloadProgramming+0x12>
    207c:	23 c0       	rjmp	.+70     	; 0x20c4 <sendSQACAVendPrice+0x184>
    207e:	20 91 b1 08 	lds	r18, 0x08B1	; 0x8008b1 <SQACAFrontloadProgramming+0xf>
    2082:	2b 83       	std	Y+3, r18	; 0x03
    2084:	20 91 b2 08 	lds	r18, 0x08B2	; 0x8008b2 <SQACAFrontloadProgramming+0x10>
    2088:	1d c0       	rjmp	.+58     	; 0x20c4 <sendSQACAVendPrice+0x184>
    208a:	20 91 af 08 	lds	r18, 0x08AF	; 0x8008af <SQACAFrontloadProgramming+0xd>
    208e:	2b 83       	std	Y+3, r18	; 0x03
    2090:	20 91 b0 08 	lds	r18, 0x08B0	; 0x8008b0 <SQACAFrontloadProgramming+0xe>
    2094:	17 c0       	rjmp	.+46     	; 0x20c4 <sendSQACAVendPrice+0x184>
    2096:	20 91 ad 08 	lds	r18, 0x08AD	; 0x8008ad <SQACAFrontloadProgramming+0xb>
    209a:	2b 83       	std	Y+3, r18	; 0x03
    209c:	20 91 ae 08 	lds	r18, 0x08AE	; 0x8008ae <SQACAFrontloadProgramming+0xc>
    20a0:	11 c0       	rjmp	.+34     	; 0x20c4 <sendSQACAVendPrice+0x184>
    20a2:	20 91 ab 08 	lds	r18, 0x08AB	; 0x8008ab <SQACAFrontloadProgramming+0x9>
    20a6:	2b 83       	std	Y+3, r18	; 0x03
    20a8:	20 91 ac 08 	lds	r18, 0x08AC	; 0x8008ac <SQACAFrontloadProgramming+0xa>
    20ac:	0b c0       	rjmp	.+22     	; 0x20c4 <sendSQACAVendPrice+0x184>
    20ae:	20 91 a9 08 	lds	r18, 0x08A9	; 0x8008a9 <SQACAFrontloadProgramming+0x7>
    20b2:	2b 83       	std	Y+3, r18	; 0x03
    20b4:	20 91 aa 08 	lds	r18, 0x08AA	; 0x8008aa <SQACAFrontloadProgramming+0x8>
    20b8:	05 c0       	rjmp	.+10     	; 0x20c4 <sendSQACAVendPrice+0x184>
    20ba:	20 91 a7 08 	lds	r18, 0x08A7	; 0x8008a7 <SQACAFrontloadProgramming+0x5>
    20be:	2b 83       	std	Y+3, r18	; 0x03
    20c0:	20 91 a8 08 	lds	r18, 0x08A8	; 0x8008a8 <SQACAFrontloadProgramming+0x6>
    20c4:	2c 83       	std	Y+4, r18	; 0x04
    20c6:	20 91 bb 08 	lds	r18, 0x08BB	; 0x8008bb <SQACAFrontloadProgramming+0x19>
    20ca:	2d 83       	std	Y+5, r18	; 0x05
    20cc:	20 91 bc 08 	lds	r18, 0x08BC	; 0x8008bc <SQACAFrontloadProgramming+0x1a>
    20d0:	b1 cf       	rjmp	.-158    	; 0x2034 <sendSQACAVendPrice+0xf4>
    20d2:	2a e0       	ldi	r18, 0x0A	; 10
    20d4:	29 83       	std	Y+1, r18	; 0x01
    20d6:	22 e7       	ldi	r18, 0x72	; 114
    20d8:	2a 83       	std	Y+2, r18	; 0x02
    20da:	20 91 f7 0a 	lds	r18, 0x0AF7	; 0x800af7 <SQACAMachineStatus+0x2>
    20de:	24 30       	cpi	r18, 0x04	; 4
    20e0:	50 f4       	brcc	.+20     	; 0x20f6 <sendSQACAVendPrice+0x1b6>
    20e2:	22 30       	cpi	r18, 0x02	; 2
    20e4:	c0 f4       	brcc	.+48     	; 0x2116 <sendSQACAVendPrice+0x1d6>
    20e6:	21 30       	cpi	r18, 0x01	; 1
    20e8:	e1 f4       	brne	.+56     	; 0x2122 <sendSQACAVendPrice+0x1e2>
    20ea:	20 91 0b 0a 	lds	r18, 0x0A0B	; 0x800a0b <SQACADryerProgramming+0x7>
    20ee:	2b 83       	std	Y+3, r18	; 0x03
    20f0:	20 91 0c 0a 	lds	r18, 0x0A0C	; 0x800a0c <SQACADryerProgramming+0x8>
    20f4:	15 c0       	rjmp	.+42     	; 0x2120 <sendSQACAVendPrice+0x1e0>
    20f6:	24 30       	cpi	r18, 0x04	; 4
    20f8:	41 f0       	breq	.+16     	; 0x210a <sendSQACAVendPrice+0x1ca>
    20fa:	25 30       	cpi	r18, 0x05	; 5
    20fc:	91 f4       	brne	.+36     	; 0x2122 <sendSQACAVendPrice+0x1e2>
    20fe:	20 91 0f 0a 	lds	r18, 0x0A0F	; 0x800a0f <SQACADryerProgramming+0xb>
    2102:	2b 83       	std	Y+3, r18	; 0x03
    2104:	20 91 10 0a 	lds	r18, 0x0A10	; 0x800a10 <SQACADryerProgramming+0xc>
    2108:	0b c0       	rjmp	.+22     	; 0x2120 <sendSQACAVendPrice+0x1e0>
    210a:	20 91 09 0a 	lds	r18, 0x0A09	; 0x800a09 <SQACADryerProgramming+0x5>
    210e:	2b 83       	std	Y+3, r18	; 0x03
    2110:	20 91 0a 0a 	lds	r18, 0x0A0A	; 0x800a0a <SQACADryerProgramming+0x6>
    2114:	05 c0       	rjmp	.+10     	; 0x2120 <sendSQACAVendPrice+0x1e0>
    2116:	20 91 0d 0a 	lds	r18, 0x0A0D	; 0x800a0d <SQACADryerProgramming+0x9>
    211a:	2b 83       	std	Y+3, r18	; 0x03
    211c:	20 91 0e 0a 	lds	r18, 0x0A0E	; 0x800a0e <SQACADryerProgramming+0xa>
    2120:	2c 83       	std	Y+4, r18	; 0x04
    2122:	20 91 14 0a 	lds	r18, 0x0A14	; 0x800a14 <SQACADryerProgramming+0x10>
    2126:	2f 83       	std	Y+7, r18	; 0x07
    2128:	20 91 15 0a 	lds	r18, 0x0A15	; 0x800a15 <SQACADryerProgramming+0x11>
    212c:	28 87       	std	Y+8, r18	; 0x08
    212e:	20 91 16 0a 	lds	r18, 0x0A16	; 0x800a16 <SQACADryerProgramming+0x12>
    2132:	29 87       	std	Y+9, r18	; 0x09
    2134:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <sendSQDataPacket>
    2138:	2b 96       	adiw	r28, 0x0b	; 11
    213a:	0f b6       	in	r0, 0x3f	; 63
    213c:	f8 94       	cli
    213e:	de bf       	out	0x3e, r29	; 62
    2140:	0f be       	out	0x3f, r0	; 63
    2142:	cd bf       	out	0x3d, r28	; 61
    2144:	df 91       	pop	r29
    2146:	cf 91       	pop	r28
    2148:	08 95       	ret

0000214a <getSQDataPacket>:
    214a:	df 92       	push	r13
    214c:	ef 92       	push	r14
    214e:	ff 92       	push	r15
    2150:	0f 93       	push	r16
    2152:	1f 93       	push	r17
    2154:	cf 93       	push	r28
    2156:	df 93       	push	r29
    2158:	7c 01       	movw	r14, r24
    215a:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <serial_getchar>
    215e:	c8 2f       	mov	r28, r24
    2160:	82 30       	cpi	r24, 0x02	; 2
    2162:	09 f5       	brne	.+66     	; 0x21a6 <getSQDataPacket+0x5c>
    2164:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <serial_getchar>
    2168:	d8 2f       	mov	r29, r24
    216a:	f7 01       	movw	r30, r14
    216c:	80 81       	ld	r24, Z
    216e:	8d 17       	cp	r24, r29
    2170:	d0 f0       	brcs	.+52     	; 0x21a6 <getSQDataPacket+0x5c>
    2172:	cd 27       	eor	r28, r29
    2174:	de 2c       	mov	r13, r14
    2176:	87 01       	movw	r16, r14
    2178:	80 2f       	mov	r24, r16
    217a:	8d 19       	sub	r24, r13
    217c:	8d 17       	cp	r24, r29
    217e:	38 f4       	brcc	.+14     	; 0x218e <getSQDataPacket+0x44>
    2180:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <serial_getchar>
    2184:	f8 01       	movw	r30, r16
    2186:	81 93       	st	Z+, r24
    2188:	8f 01       	movw	r16, r30
    218a:	c8 27       	eor	r28, r24
    218c:	f5 cf       	rjmp	.-22     	; 0x2178 <getSQDataPacket+0x2e>
    218e:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <serial_getchar>
    2192:	c8 13       	cpse	r28, r24
    2194:	05 c0       	rjmp	.+10     	; 0x21a0 <getSQDataPacket+0x56>
    2196:	86 e0       	ldi	r24, 0x06	; 6
    2198:	0e 94 6d 27 	call	0x4eda	; 0x4eda <serial_putchar>
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	04 c0       	rjmp	.+8      	; 0x21a8 <getSQDataPacket+0x5e>
    21a0:	85 e1       	ldi	r24, 0x15	; 21
    21a2:	0e 94 6d 27 	call	0x4eda	; 0x4eda <serial_putchar>
    21a6:	80 e0       	ldi	r24, 0x00	; 0
    21a8:	df 91       	pop	r29
    21aa:	cf 91       	pop	r28
    21ac:	1f 91       	pop	r17
    21ae:	0f 91       	pop	r16
    21b0:	ff 90       	pop	r15
    21b2:	ef 90       	pop	r14
    21b4:	df 90       	pop	r13
    21b6:	08 95       	ret

000021b8 <getSQACAStatusData>:
    21b8:	cf 93       	push	r28
    21ba:	df 93       	push	r29
    21bc:	cd b7       	in	r28, 0x3d	; 61
    21be:	de b7       	in	r29, 0x3e	; 62
    21c0:	6a 97       	sbiw	r28, 0x1a	; 26
    21c2:	0f b6       	in	r0, 0x3f	; 63
    21c4:	f8 94       	cli
    21c6:	de bf       	out	0x3e, r29	; 62
    21c8:	0f be       	out	0x3f, r0	; 63
    21ca:	cd bf       	out	0x3d, r28	; 61
    21cc:	80 91 f6 0a 	lds	r24, 0x0AF6	; 0x800af6 <SQACAMachineStatus+0x1>
    21d0:	83 30       	cpi	r24, 0x03	; 3
    21d2:	09 f0       	breq	.+2      	; 0x21d6 <getSQACAStatusData+0x1e>
    21d4:	5f c0       	rjmp	.+190    	; 0x2294 <getSQACAStatusData+0xdc>
    21d6:	2a e1       	ldi	r18, 0x1A	; 26
    21d8:	ce 01       	movw	r24, r28
    21da:	01 96       	adiw	r24, 0x01	; 1
    21dc:	fc 01       	movw	r30, r24
    21de:	32 2f       	mov	r19, r18
    21e0:	11 92       	st	Z+, r1
    21e2:	3a 95       	dec	r19
    21e4:	e9 f7       	brne	.-6      	; 0x21e0 <getSQACAStatusData+0x28>
    21e6:	29 83       	std	Y+1, r18	; 0x01
    21e8:	0e 94 a5 10 	call	0x214a	; 0x214a <getSQDataPacket>
    21ec:	88 23       	and	r24, r24
    21ee:	09 f4       	brne	.+2      	; 0x21f2 <getSQACAStatusData+0x3a>
    21f0:	51 c0       	rjmp	.+162    	; 0x2294 <getSQACAStatusData+0xdc>
    21f2:	99 81       	ldd	r25, Y+1	; 0x01
    21f4:	91 37       	cpi	r25, 0x71	; 113
    21f6:	09 f0       	breq	.+2      	; 0x21fa <getSQACAStatusData+0x42>
    21f8:	4d c0       	rjmp	.+154    	; 0x2294 <getSQACAStatusData+0xdc>
    21fa:	9a 81       	ldd	r25, Y+2	; 0x02
    21fc:	90 5e       	subi	r25, 0xE0	; 224
    21fe:	90 93 f5 0a 	sts	0x0AF5, r25	; 0x800af5 <SQACAMachineStatus>
    2202:	9b 81       	ldd	r25, Y+3	; 0x03
    2204:	90 93 f7 0a 	sts	0x0AF7, r25	; 0x800af7 <SQACAMachineStatus+0x2>
    2208:	9c 81       	ldd	r25, Y+4	; 0x04
    220a:	90 93 f8 0a 	sts	0x0AF8, r25	; 0x800af8 <SQACAMachineStatus+0x3>
    220e:	9d 81       	ldd	r25, Y+5	; 0x05
    2210:	90 93 f9 0a 	sts	0x0AF9, r25	; 0x800af9 <SQACAMachineStatus+0x4>
    2214:	9e 81       	ldd	r25, Y+6	; 0x06
    2216:	90 93 fa 0a 	sts	0x0AFA, r25	; 0x800afa <SQACAMachineStatus+0x5>
    221a:	9f 81       	ldd	r25, Y+7	; 0x07
    221c:	90 93 fb 0a 	sts	0x0AFB, r25	; 0x800afb <SQACAMachineStatus+0x6>
    2220:	98 85       	ldd	r25, Y+8	; 0x08
    2222:	90 93 fc 0a 	sts	0x0AFC, r25	; 0x800afc <SQACAMachineStatus+0x7>
    2226:	99 85       	ldd	r25, Y+9	; 0x09
    2228:	90 93 fd 0a 	sts	0x0AFD, r25	; 0x800afd <SQACAMachineStatus+0x8>
    222c:	9a 85       	ldd	r25, Y+10	; 0x0a
    222e:	90 93 fe 0a 	sts	0x0AFE, r25	; 0x800afe <SQACAMachineStatus+0x9>
    2232:	9b 85       	ldd	r25, Y+11	; 0x0b
    2234:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <SQACAMachineStatus+0xa>
    2238:	9c 85       	ldd	r25, Y+12	; 0x0c
    223a:	90 93 00 0b 	sts	0x0B00, r25	; 0x800b00 <SQACAMachineStatus+0xb>
    223e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2240:	90 93 01 0b 	sts	0x0B01, r25	; 0x800b01 <SQACAMachineStatus+0xc>
    2244:	9e 85       	ldd	r25, Y+14	; 0x0e
    2246:	90 93 02 0b 	sts	0x0B02, r25	; 0x800b02 <SQACAMachineStatus+0xd>
    224a:	9f 85       	ldd	r25, Y+15	; 0x0f
    224c:	90 93 03 0b 	sts	0x0B03, r25	; 0x800b03 <SQACAMachineStatus+0xe>
    2250:	98 89       	ldd	r25, Y+16	; 0x10
    2252:	90 93 04 0b 	sts	0x0B04, r25	; 0x800b04 <SQACAMachineStatus+0xf>
    2256:	99 89       	ldd	r25, Y+17	; 0x11
    2258:	90 93 05 0b 	sts	0x0B05, r25	; 0x800b05 <SQACAMachineStatus+0x10>
    225c:	9a 89       	ldd	r25, Y+18	; 0x12
    225e:	90 93 06 0b 	sts	0x0B06, r25	; 0x800b06 <SQACAMachineStatus+0x11>
    2262:	9b 89       	ldd	r25, Y+19	; 0x13
    2264:	90 93 07 0b 	sts	0x0B07, r25	; 0x800b07 <SQACAMachineStatus+0x12>
    2268:	9c 89       	ldd	r25, Y+20	; 0x14
    226a:	90 93 08 0b 	sts	0x0B08, r25	; 0x800b08 <SQACAMachineStatus+0x13>
    226e:	9d 89       	ldd	r25, Y+21	; 0x15
    2270:	90 93 09 0b 	sts	0x0B09, r25	; 0x800b09 <SQACAMachineStatus+0x14>
    2274:	9e 89       	ldd	r25, Y+22	; 0x16
    2276:	90 93 0a 0b 	sts	0x0B0A, r25	; 0x800b0a <SQACAMachineStatus+0x15>
    227a:	9f 89       	ldd	r25, Y+23	; 0x17
    227c:	90 93 0b 0b 	sts	0x0B0B, r25	; 0x800b0b <SQACAMachineStatus+0x16>
    2280:	98 8d       	ldd	r25, Y+24	; 0x18
    2282:	90 93 0c 0b 	sts	0x0B0C, r25	; 0x800b0c <SQACAMachineStatus+0x17>
    2286:	99 8d       	ldd	r25, Y+25	; 0x19
    2288:	90 93 0d 0b 	sts	0x0B0D, r25	; 0x800b0d <SQACAMachineStatus+0x18>
    228c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    228e:	90 93 0e 0b 	sts	0x0B0E, r25	; 0x800b0e <SQACAMachineStatus+0x19>
    2292:	01 c0       	rjmp	.+2      	; 0x2296 <getSQACAStatusData+0xde>
    2294:	80 e0       	ldi	r24, 0x00	; 0
    2296:	6a 96       	adiw	r28, 0x1a	; 26
    2298:	0f b6       	in	r0, 0x3f	; 63
    229a:	f8 94       	cli
    229c:	de bf       	out	0x3e, r29	; 62
    229e:	0f be       	out	0x3f, r0	; 63
    22a0:	cd bf       	out	0x3d, r28	; 61
    22a2:	df 91       	pop	r29
    22a4:	cf 91       	pop	r28
    22a6:	08 95       	ret

000022a8 <SQACAMachineStatusSequence>:
    22a8:	1f 93       	push	r17
    22aa:	cf 93       	push	r28
    22ac:	df 93       	push	r29
    22ae:	00 d0       	rcall	.+0      	; 0x22b0 <SQACAMachineStatusSequence+0x8>
    22b0:	cd b7       	in	r28, 0x3d	; 61
    22b2:	de b7       	in	r29, 0x3e	; 62
    22b4:	1a 82       	std	Y+2, r1	; 0x02
    22b6:	19 82       	std	Y+1, r1	; 0x01
    22b8:	80 91 f6 0a 	lds	r24, 0x0AF6	; 0x800af6 <SQACAMachineStatus+0x1>
    22bc:	83 30       	cpi	r24, 0x03	; 3
    22be:	21 f4       	brne	.+8      	; 0x22c8 <SQACAMachineStatusSequence+0x20>
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	89 83       	std	Y+1, r24	; 0x01
    22c4:	80 e7       	ldi	r24, 0x70	; 112
    22c6:	8a 83       	std	Y+2, r24	; 0x02
    22c8:	ce 01       	movw	r24, r28
    22ca:	01 96       	adiw	r24, 0x01	; 1
    22cc:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <sendSQDataPacket>
    22d0:	81 11       	cpse	r24, r1
    22d2:	02 c0       	rjmp	.+4      	; 0x22d8 <SQACAMachineStatusSequence+0x30>
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	15 c0       	rjmp	.+42     	; 0x2302 <SQACAMachineStatusSequence+0x5a>
    22d8:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <getSQACAStatusData>
    22dc:	18 2f       	mov	r17, r24
    22de:	88 23       	and	r24, r24
    22e0:	c9 f3       	breq	.-14     	; 0x22d4 <SQACAMachineStatusSequence+0x2c>
    22e2:	90 91 34 09 	lds	r25, 0x0934	; 0x800934 <ReaderStateFlag>
    22e6:	91 fb       	bst	r25, 1
    22e8:	88 27       	eor	r24, r24
    22ea:	80 f9       	bld	r24, 0
    22ec:	91 fd       	sbrc	r25, 1
    22ee:	09 c0       	rjmp	.+18     	; 0x2302 <SQACAMachineStatusSequence+0x5a>
    22f0:	8f ed       	ldi	r24, 0xDF	; 223
    22f2:	9e e2       	ldi	r25, 0x2E	; 46
    22f4:	01 97       	sbiw	r24, 0x01	; 1
    22f6:	f1 f7       	brne	.-4      	; 0x22f4 <SQACAMachineStatusSequence+0x4c>
    22f8:	00 c0       	rjmp	.+0      	; 0x22fa <SQACAMachineStatusSequence+0x52>
    22fa:	00 00       	nop
    22fc:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <sendSQACAVendPrice>
    2300:	81 2f       	mov	r24, r17
    2302:	0f 90       	pop	r0
    2304:	0f 90       	pop	r0
    2306:	df 91       	pop	r29
    2308:	cf 91       	pop	r28
    230a:	1f 91       	pop	r17
    230c:	08 95       	ret

0000230e <getSQACAInitData>:
    230e:	cf 93       	push	r28
    2310:	df 93       	push	r29
    2312:	cd b7       	in	r28, 0x3d	; 61
    2314:	de b7       	in	r29, 0x3e	; 62
    2316:	6f 97       	sbiw	r28, 0x1f	; 31
    2318:	0f b6       	in	r0, 0x3f	; 63
    231a:	f8 94       	cli
    231c:	de bf       	out	0x3e, r29	; 62
    231e:	0f be       	out	0x3f, r0	; 63
    2320:	cd bf       	out	0x3d, r28	; 61
    2322:	2f e1       	ldi	r18, 0x1F	; 31
    2324:	ce 01       	movw	r24, r28
    2326:	01 96       	adiw	r24, 0x01	; 1
    2328:	fc 01       	movw	r30, r24
    232a:	32 2f       	mov	r19, r18
    232c:	11 92       	st	Z+, r1
    232e:	3a 95       	dec	r19
    2330:	e9 f7       	brne	.-6      	; 0x232c <getSQACAInitData+0x1e>
    2332:	29 83       	std	Y+1, r18	; 0x01
    2334:	0e 94 a5 10 	call	0x214a	; 0x214a <getSQDataPacket>
    2338:	88 23       	and	r24, r24
    233a:	79 f0       	breq	.+30     	; 0x235a <getSQACAInitData+0x4c>
    233c:	9a 81       	ldd	r25, Y+2	; 0x02
    233e:	90 93 c8 08 	sts	0x08C8, r25	; 0x8008c8 <SQACAToploadProgramming>
    2342:	9b 81       	ldd	r25, Y+3	; 0x03
    2344:	90 93 c9 08 	sts	0x08C9, r25	; 0x8008c9 <SQACAToploadProgramming+0x1>
    2348:	9c 81       	ldd	r25, Y+4	; 0x04
    234a:	90 93 ca 08 	sts	0x08CA, r25	; 0x8008ca <SQACAToploadProgramming+0x2>
    234e:	9f 81       	ldd	r25, Y+7	; 0x07
    2350:	90 93 f9 08 	sts	0x08F9, r25	; 0x8008f9 <SQACAToploadProgramming+0x31>
    2354:	99 89       	ldd	r25, Y+17	; 0x11
    2356:	90 93 fa 08 	sts	0x08FA, r25	; 0x8008fa <SQACAToploadProgramming+0x32>
    235a:	6f 96       	adiw	r28, 0x1f	; 31
    235c:	0f b6       	in	r0, 0x3f	; 63
    235e:	f8 94       	cli
    2360:	de bf       	out	0x3e, r29	; 62
    2362:	0f be       	out	0x3f, r0	; 63
    2364:	cd bf       	out	0x3d, r28	; 61
    2366:	df 91       	pop	r29
    2368:	cf 91       	pop	r28
    236a:	08 95       	ret

0000236c <IsACA>:
    236c:	cf 93       	push	r28
    236e:	df 93       	push	r29
    2370:	cd b7       	in	r28, 0x3d	; 61
    2372:	de b7       	in	r29, 0x3e	; 62
    2374:	2a 97       	sbiw	r28, 0x0a	; 10
    2376:	0f b6       	in	r0, 0x3f	; 63
    2378:	f8 94       	cli
    237a:	de bf       	out	0x3e, r29	; 62
    237c:	0f be       	out	0x3f, r0	; 63
    237e:	cd bf       	out	0x3d, r28	; 61
    2380:	8a e0       	ldi	r24, 0x0A	; 10
    2382:	ef e2       	ldi	r30, 0x2F	; 47
    2384:	f2 e0       	ldi	r31, 0x02	; 2
    2386:	de 01       	movw	r26, r28
    2388:	11 96       	adiw	r26, 0x01	; 1
    238a:	01 90       	ld	r0, Z+
    238c:	0d 92       	st	X+, r0
    238e:	8a 95       	dec	r24
    2390:	e1 f7       	brne	.-8      	; 0x238a <IsACA+0x1e>
    2392:	89 e0       	ldi	r24, 0x09	; 9
    2394:	89 83       	std	Y+1, r24	; 0x01
    2396:	83 e7       	ldi	r24, 0x73	; 115
    2398:	8a 83       	std	Y+2, r24	; 0x02
    239a:	1e 82       	std	Y+6, r1	; 0x06
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	8f 83       	std	Y+7, r24	; 0x07
    23a0:	80 e1       	ldi	r24, 0x10	; 16
    23a2:	88 87       	std	Y+8, r24	; 0x08
    23a4:	19 86       	std	Y+9, r1	; 0x09
    23a6:	82 e0       	ldi	r24, 0x02	; 2
    23a8:	8a 87       	std	Y+10, r24	; 0x0a
    23aa:	ce 01       	movw	r24, r28
    23ac:	01 96       	adiw	r24, 0x01	; 1
    23ae:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <sendSQDataPacket>
    23b2:	81 11       	cpse	r24, r1
    23b4:	0e 94 87 11 	call	0x230e	; 0x230e <getSQACAInitData>
    23b8:	2a 96       	adiw	r28, 0x0a	; 10
    23ba:	0f b6       	in	r0, 0x3f	; 63
    23bc:	f8 94       	cli
    23be:	de bf       	out	0x3e, r29	; 62
    23c0:	0f be       	out	0x3f, r0	; 63
    23c2:	cd bf       	out	0x3d, r28	; 61
    23c4:	df 91       	pop	r29
    23c6:	cf 91       	pop	r28
    23c8:	08 95       	ret

000023ca <waitSQStartKey>:
    23ca:	80 91 fa 0a 	lds	r24, 0x0AFA	; 0x800afa <SQACAMachineStatus+0x5>
    23ce:	80 ff       	sbrs	r24, 0
    23d0:	05 c0       	rjmp	.+10     	; 0x23dc <waitSQStartKey+0x12>
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	90 91 fb 0a 	lds	r25, 0x0AFB	; 0x800afb <SQACAMachineStatus+0x6>
    23d8:	90 32       	cpi	r25, 0x20	; 32
    23da:	09 f0       	breq	.+2      	; 0x23de <waitSQStartKey+0x14>
    23dc:	80 e0       	ldi	r24, 0x00	; 0
    23de:	08 95       	ret

000023e0 <sendSQACAMimicQuantumVending>:
    23e0:	cf 93       	push	r28
    23e2:	df 93       	push	r29
    23e4:	00 d0       	rcall	.+0      	; 0x23e6 <sendSQACAMimicQuantumVending+0x6>
    23e6:	00 d0       	rcall	.+0      	; 0x23e8 <sendSQACAMimicQuantumVending+0x8>
    23e8:	cd b7       	in	r28, 0x3d	; 61
    23ea:	de b7       	in	r29, 0x3e	; 62
    23ec:	83 e0       	ldi	r24, 0x03	; 3
    23ee:	89 83       	std	Y+1, r24	; 0x01
    23f0:	84 e6       	ldi	r24, 0x64	; 100
    23f2:	8a 83       	std	Y+2, r24	; 0x02
    23f4:	8f e0       	ldi	r24, 0x0F	; 15
    23f6:	8b 83       	std	Y+3, r24	; 0x03
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	8c 83       	std	Y+4, r24	; 0x04
    23fc:	ce 01       	movw	r24, r28
    23fe:	01 96       	adiw	r24, 0x01	; 1
    2400:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <sendSQDataPacket>
    2404:	0f 90       	pop	r0
    2406:	0f 90       	pop	r0
    2408:	0f 90       	pop	r0
    240a:	0f 90       	pop	r0
    240c:	df 91       	pop	r29
    240e:	cf 91       	pop	r28
    2410:	08 95       	ret

00002412 <sendSQACAVendingTransaction>:
    2412:	cf 93       	push	r28
    2414:	df 93       	push	r29
    2416:	cd b7       	in	r28, 0x3d	; 61
    2418:	de b7       	in	r29, 0x3e	; 62
    241a:	27 97       	sbiw	r28, 0x07	; 7
    241c:	0f b6       	in	r0, 0x3f	; 63
    241e:	f8 94       	cli
    2420:	de bf       	out	0x3e, r29	; 62
    2422:	0f be       	out	0x3f, r0	; 63
    2424:	cd bf       	out	0x3d, r28	; 61
    2426:	fe 01       	movw	r30, r28
    2428:	31 96       	adiw	r30, 0x01	; 1
    242a:	97 e0       	ldi	r25, 0x07	; 7
    242c:	df 01       	movw	r26, r30
    242e:	1d 92       	st	X+, r1
    2430:	9a 95       	dec	r25
    2432:	e9 f7       	brne	.-6      	; 0x242e <sendSQACAVendingTransaction+0x1c>
    2434:	81 30       	cpi	r24, 0x01	; 1
    2436:	51 f4       	brne	.+20     	; 0x244c <sendSQACAVendingTransaction+0x3a>
    2438:	86 e0       	ldi	r24, 0x06	; 6
    243a:	89 83       	std	Y+1, r24	; 0x01
    243c:	8a e6       	ldi	r24, 0x6A	; 106
    243e:	8a 83       	std	Y+2, r24	; 0x02
    2440:	90 91 00 0b 	lds	r25, 0x0B00	; 0x800b00 <SQACAMachineStatus+0xb>
    2444:	9b 83       	std	Y+3, r25	; 0x03
    2446:	80 91 01 0b 	lds	r24, 0x0B01	; 0x800b01 <SQACAMachineStatus+0xc>
    244a:	0b c0       	rjmp	.+22     	; 0x2462 <sendSQACAVendingTransaction+0x50>
    244c:	82 30       	cpi	r24, 0x02	; 2
    244e:	61 f4       	brne	.+24     	; 0x2468 <sendSQACAVendingTransaction+0x56>
    2450:	86 e0       	ldi	r24, 0x06	; 6
    2452:	89 83       	std	Y+1, r24	; 0x01
    2454:	8a e6       	ldi	r24, 0x6A	; 106
    2456:	8a 83       	std	Y+2, r24	; 0x02
    2458:	90 91 14 0a 	lds	r25, 0x0A14	; 0x800a14 <SQACADryerProgramming+0x10>
    245c:	9b 83       	std	Y+3, r25	; 0x03
    245e:	80 91 15 0a 	lds	r24, 0x0A15	; 0x800a15 <SQACADryerProgramming+0x11>
    2462:	8c 83       	std	Y+4, r24	; 0x04
    2464:	9d 83       	std	Y+5, r25	; 0x05
    2466:	8e 83       	std	Y+6, r24	; 0x06
    2468:	cf 01       	movw	r24, r30
    246a:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <sendSQDataPacket>
    246e:	27 96       	adiw	r28, 0x07	; 7
    2470:	0f b6       	in	r0, 0x3f	; 63
    2472:	f8 94       	cli
    2474:	de bf       	out	0x3e, r29	; 62
    2476:	0f be       	out	0x3f, r0	; 63
    2478:	cd bf       	out	0x3d, r28	; 61
    247a:	df 91       	pop	r29
    247c:	cf 91       	pop	r28
    247e:	08 95       	ret

00002480 <isMachineCycleRunning>:
/*                                                                      */
/************************************************************************/
bool isSQCycleRunning(void)
{
	//return ( (SQACAMachineStatus.MachineStatus[0] == MACHINE_RUN_MODE) || SQACAMachineStatus.MachineStatus[1] == MACHINE_RUN_MODE ); PPOS
	return ( (SQACAMachineStatus.MachineStatus[0] == MACHINE_RUN_MODE) );
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	90 91 fa 0a 	lds	r25, 0x0AFA	; 0x800afa <SQACAMachineStatus+0x5>
    2486:	98 30       	cpi	r25, 0x08	; 8
    2488:	09 f0       	breq	.+2      	; 0x248c <isMachineCycleRunning+0xc>
    248a:	80 e0       	ldi	r24, 0x00	; 0
}

bool isMachineCycleRunning()
{
	return (isSQCycleRunning() );
}
    248c:	08 95       	ret

0000248e <waitForMachineStartKey>:

//Examine machine control with Machine Status
bool waitForMachineStartKey()
{
	return waitSQStartKey();
    248e:	0c 94 e5 11 	jmp	0x23ca	; 0x23ca <waitSQStartKey>

00002492 <SQACAMachineStatusCommSequence>:
price to be written to the display and used in a vending transaction. The ucDeviceStateFlag is set to be online.
*/
void SQACAMachineStatusCommSequence(void)
{
	
	if( SQACAMachineStatusSequence() )
    2492:	0e 94 54 11 	call	0x22a8	; 0x22a8 <SQACAMachineStatusSequence>
    2496:	88 23       	and	r24, r24
    2498:	19 f0       	breq	.+6      	; 0x24a0 <SQACAMachineStatusCommSequence+0xe>
	{
		//set machine status ok flag;
		ucDeviceStateFlag = MACHINE_STATUS_ON; //machine status has been done
    249a:	82 e0       	ldi	r24, 0x02	; 2
    249c:	80 93 b9 09 	sts	0x09B9, r24	; 0x8009b9 <ucDeviceStateFlag>
    24a0:	08 95       	ret

000024a2 <SQACAInitializationSequence>:

@ingroup pposreader
*/
void SQACAInitializationSequence(void)
{
	if( IsACA() )
    24a2:	0e 94 b6 11 	call	0x236c	; 0x236c <IsACA>
    24a6:	88 23       	and	r24, r24
    24a8:	19 f0       	breq	.+6      	; 0x24b0 <SQACAInitializationSequence+0xe>
	{
		//set ACA flag
		SQACAMachineStatus.MachineType[1] = ACA_SERIES;
    24aa:	83 e0       	ldi	r24, 0x03	; 3
    24ac:	80 93 f6 0a 	sts	0x0AF6, r24	; 0x800af6 <SQACAMachineStatus+0x1>
	}
	
	//_delay_ms(2); //Temp
	SQACAMachineStatusCommSequence();
    24b0:	0e 94 49 12 	call	0x2492	; 0x2492 <SQACAMachineStatusCommSequence>
	deviceStatus.deviceType[0] = SQACAMachineStatus.MachineType[0];
    24b4:	80 91 f5 0a 	lds	r24, 0x0AF5	; 0x800af5 <SQACAMachineStatus>
    24b8:	80 93 f1 0a 	sts	0x0AF1, r24	; 0x800af1 <deviceStatus>
	deviceStatus.deviceType[1] = SQACAMachineStatus.MachineType[1];
    24bc:	80 91 f6 0a 	lds	r24, 0x0AF6	; 0x800af6 <SQACAMachineStatus+0x1>
    24c0:	80 93 f2 0a 	sts	0x0AF2, r24	; 0x800af2 <deviceStatus+0x1>
    24c4:	08 95       	ret

000024c6 <getSQReaderMachineSetup>:

When a valid Programming Command is sent into the Payment System, the reader will initiate a programming
sequence by sending the Programming Data packet.
*/
bool getSQReaderMachineSetup(void)
{
    24c6:	cf 93       	push	r28
    24c8:	df 93       	push	r29
    24ca:	cd b7       	in	r28, 0x3d	; 61
    24cc:	de b7       	in	r29, 0x3e	; 62
    24ce:	ec 97       	sbiw	r28, 0x3c	; 60
    24d0:	0f b6       	in	r0, 0x3f	; 63
    24d2:	f8 94       	cli
    24d4:	de bf       	out	0x3e, r29	; 62
    24d6:	0f be       	out	0x3f, r0	; 63
    24d8:	cd bf       	out	0x3d, r28	; 61
	u8 temp[ACA_MAX_PACKET_SIZE] = {0};
    24da:	fe 01       	movw	r30, r28
    24dc:	31 96       	adiw	r30, 0x01	; 1
    24de:	8c e3       	ldi	r24, 0x3C	; 60
    24e0:	df 01       	movw	r26, r30
    24e2:	1d 92       	st	X+, r1
    24e4:	8a 95       	dec	r24
    24e6:	e9 f7       	brne	.-6      	; 0x24e2 <getSQReaderMachineSetup+0x1c>
	
	switch( deviceStatus.deviceType[0] )
    24e8:	90 91 f1 0a 	lds	r25, 0x0AF1	; 0x800af1 <deviceStatus>
    24ec:	92 32       	cpi	r25, 0x22	; 34
    24ee:	09 f4       	brne	.+2      	; 0x24f2 <getSQReaderMachineSetup+0x2c>
    24f0:	98 c0       	rjmp	.+304    	; 0x2622 <getSQReaderMachineSetup+0x15c>
    24f2:	99 32       	cpi	r25, 0x29	; 41
    24f4:	09 f4       	brne	.+2      	; 0x24f8 <getSQReaderMachineSetup+0x32>
    24f6:	04 c1       	rjmp	.+520    	; 0x2700 <getSQReaderMachineSetup+0x23a>
    24f8:	91 32       	cpi	r25, 0x21	; 33
    24fa:	09 f0       	breq	.+2      	; 0x24fe <getSQReaderMachineSetup+0x38>
    24fc:	70 c1       	rjmp	.+736    	; 0x27de <getSQReaderMachineSetup+0x318>
	{
		case PROGRAMMING_DATA_TOPLOAD:
		temp[0] = QTL_PROGRAMMING_DATA_SIZE;					//50 bytes
    24fe:	82 e3       	ldi	r24, 0x32	; 50
    2500:	89 83       	std	Y+1, r24	; 0x01
		temp[1] = deviceStatus.deviceType[0];					//0x21 (TLW Prog)
    2502:	9a 83       	std	Y+2, r25	; 0x02
		temp[2] = SQACAToploadProgramming.ProductByte[0];
    2504:	80 91 c8 08 	lds	r24, 0x08C8	; 0x8008c8 <SQACAToploadProgramming>
    2508:	8b 83       	std	Y+3, r24	; 0x03
		temp[3] = SQACAToploadProgramming.ProductByte[1];
    250a:	80 91 c9 08 	lds	r24, 0x08C9	; 0x8008c9 <SQACAToploadProgramming+0x1>
    250e:	8c 83       	std	Y+4, r24	; 0x04
		temp[4] = SQACAToploadProgramming.ProductByte[2];
    2510:	80 91 ca 08 	lds	r24, 0x08CA	; 0x8008ca <SQACAToploadProgramming+0x2>
    2514:	8d 83       	std	Y+5, r24	; 0x05
		temp[5] = SQACAToploadProgramming.ProductByte[3];
    2516:	80 91 cb 08 	lds	r24, 0x08CB	; 0x8008cb <SQACAToploadProgramming+0x3>
    251a:	8e 83       	std	Y+6, r24	; 0x06
		temp[6] = SQACAToploadProgramming.ProductByte[4];
    251c:	80 91 cc 08 	lds	r24, 0x08CC	; 0x8008cc <SQACAToploadProgramming+0x4>
    2520:	8f 83       	std	Y+7, r24	; 0x07
		temp[7] = SQACAToploadProgramming.VendPrice1[0];
    2522:	80 91 cd 08 	lds	r24, 0x08CD	; 0x8008cd <SQACAToploadProgramming+0x5>
    2526:	88 87       	std	Y+8, r24	; 0x08
		temp[8] = SQACAToploadProgramming.VendPrice1[1];
    2528:	80 91 ce 08 	lds	r24, 0x08CE	; 0x8008ce <SQACAToploadProgramming+0x6>
    252c:	89 87       	std	Y+9, r24	; 0x09
		temp[9] = SQACAToploadProgramming.VendPrice2[0];
    252e:	80 91 cf 08 	lds	r24, 0x08CF	; 0x8008cf <SQACAToploadProgramming+0x7>
    2532:	8a 87       	std	Y+10, r24	; 0x0a
		temp[10] = SQACAToploadProgramming.VendPrice2[1];
    2534:	80 91 d0 08 	lds	r24, 0x08D0	; 0x8008d0 <SQACAToploadProgramming+0x8>
    2538:	8b 87       	std	Y+11, r24	; 0x0b
		temp[11] = SQACAToploadProgramming.VendPrice3[0];
    253a:	80 91 d1 08 	lds	r24, 0x08D1	; 0x8008d1 <SQACAToploadProgramming+0x9>
    253e:	8c 87       	std	Y+12, r24	; 0x0c
		temp[12] = SQACAToploadProgramming.VendPrice3[1];
    2540:	80 91 d2 08 	lds	r24, 0x08D2	; 0x8008d2 <SQACAToploadProgramming+0xa>
    2544:	8d 87       	std	Y+13, r24	; 0x0d
		temp[13] = SQACAToploadProgramming.VendPrice4[0];
    2546:	80 91 d3 08 	lds	r24, 0x08D3	; 0x8008d3 <SQACAToploadProgramming+0xb>
    254a:	8e 87       	std	Y+14, r24	; 0x0e
		temp[14] = SQACAToploadProgramming.VendPrice4[1];
    254c:	80 91 d4 08 	lds	r24, 0x08D4	; 0x8008d4 <SQACAToploadProgramming+0xc>
    2550:	8f 87       	std	Y+15, r24	; 0x0f
		temp[15] = SQACAToploadProgramming.VendPrice5[0];
    2552:	80 91 d5 08 	lds	r24, 0x08D5	; 0x8008d5 <SQACAToploadProgramming+0xd>
    2556:	88 8b       	std	Y+16, r24	; 0x10
		temp[16] = SQACAToploadProgramming.VendPrice5[1];
    2558:	80 91 d6 08 	lds	r24, 0x08D6	; 0x8008d6 <SQACAToploadProgramming+0xe>
    255c:	89 8b       	std	Y+17, r24	; 0x11
		temp[17] = SQACAToploadProgramming.VendPrice6[0];
    255e:	80 91 d7 08 	lds	r24, 0x08D7	; 0x8008d7 <SQACAToploadProgramming+0xf>
    2562:	8a 8b       	std	Y+18, r24	; 0x12
		temp[18] = SQACAToploadProgramming.VendPrice6[1];
    2564:	80 91 d8 08 	lds	r24, 0x08D8	; 0x8008d8 <SQACAToploadProgramming+0x10>
    2568:	8b 8b       	std	Y+19, r24	; 0x13
		temp[19] = SQACAToploadProgramming.VendPrice7[0];
    256a:	80 91 d9 08 	lds	r24, 0x08D9	; 0x8008d9 <SQACAToploadProgramming+0x11>
    256e:	8c 8b       	std	Y+20, r24	; 0x14
		temp[20] = SQACAToploadProgramming.VendPrice7[1];
    2570:	80 91 da 08 	lds	r24, 0x08DA	; 0x8008da <SQACAToploadProgramming+0x12>
    2574:	8d 8b       	std	Y+21, r24	; 0x15
		temp[21] = SQACAToploadProgramming.VendPrice8[0];
    2576:	80 91 db 08 	lds	r24, 0x08DB	; 0x8008db <SQACAToploadProgramming+0x13>
    257a:	8e 8b       	std	Y+22, r24	; 0x16
		temp[22] = SQACAToploadProgramming.VendPrice8[1];
    257c:	80 91 dc 08 	lds	r24, 0x08DC	; 0x8008dc <SQACAToploadProgramming+0x14>
    2580:	8f 8b       	std	Y+23, r24	; 0x17
		temp[23] = SQACAToploadProgramming.VendPrice9[0];
    2582:	80 91 dd 08 	lds	r24, 0x08DD	; 0x8008dd <SQACAToploadProgramming+0x15>
    2586:	88 8f       	std	Y+24, r24	; 0x18
		temp[24] = SQACAToploadProgramming.VendPrice9[1];
    2588:	80 91 de 08 	lds	r24, 0x08DE	; 0x8008de <SQACAToploadProgramming+0x16>
    258c:	89 8f       	std	Y+25, r24	; 0x19
		temp[25] = SQACAToploadProgramming.MediumCycle_VendPrice[0];
    258e:	80 91 df 08 	lds	r24, 0x08DF	; 0x8008df <SQACAToploadProgramming+0x17>
    2592:	8a 8f       	std	Y+26, r24	; 0x1a
		temp[26] = SQACAToploadProgramming.MediumCycle_VendPrice[1];
    2594:	80 91 e0 08 	lds	r24, 0x08E0	; 0x8008e0 <SQACAToploadProgramming+0x18>
    2598:	8b 8f       	std	Y+27, r24	; 0x1b
		temp[27] = SQACAToploadProgramming.HeavyCycle_VendPrice[0];
    259a:	80 91 e1 08 	lds	r24, 0x08E1	; 0x8008e1 <SQACAToploadProgramming+0x19>
    259e:	8c 8f       	std	Y+28, r24	; 0x1c
		temp[28] = SQACAToploadProgramming.HeavyCycle_VendPrice[1];
    25a0:	80 91 e2 08 	lds	r24, 0x08E2	; 0x8008e2 <SQACAToploadProgramming+0x1a>
    25a4:	8d 8f       	std	Y+29, r24	; 0x1d
		temp[29] = SQACAToploadProgramming.HeavyCycle_option;
    25a6:	80 91 e4 08 	lds	r24, 0x08E4	; 0x8008e4 <SQACAToploadProgramming+0x1c>
    25aa:	8e 8f       	std	Y+30, r24	; 0x1e
		temp[30] = SQACAToploadProgramming.MediumCycle_option;
    25ac:	80 91 e3 08 	lds	r24, 0x08E3	; 0x8008e3 <SQACAToploadProgramming+0x1b>
    25b0:	8f 8f       	std	Y+31, r24	; 0x1f
		temp[31] = SQACAToploadProgramming.MediumCycle_extraWashTime;
    25b2:	80 91 e5 08 	lds	r24, 0x08E5	; 0x8008e5 <SQACAToploadProgramming+0x1d>
    25b6:	88 a3       	std	Y+32, r24	; 0x20
		temp[32] = SQACAToploadProgramming.MediumCycle_extraRinseTime;
    25b8:	80 91 e6 08 	lds	r24, 0x08E6	; 0x8008e6 <SQACAToploadProgramming+0x1e>
    25bc:	89 a3       	std	Y+33, r24	; 0x21
		temp[33] = SQACAToploadProgramming.HeavyCycle_extraWashTime;
    25be:	80 91 e7 08 	lds	r24, 0x08E7	; 0x8008e7 <SQACAToploadProgramming+0x1f>
    25c2:	8a a3       	std	Y+34, r24	; 0x22
		temp[34] = SQACAToploadProgramming.HeavyCycle_extraRinseTime;
    25c4:	80 91 e8 08 	lds	r24, 0x08E8	; 0x8008e8 <SQACAToploadProgramming+0x20>
    25c8:	8b a3       	std	Y+35, r24	; 0x23
		temp[35] = SQACAToploadProgramming.NormalCycle_washAgitateTime;
    25ca:	80 91 e9 08 	lds	r24, 0x08E9	; 0x8008e9 <SQACAToploadProgramming+0x21>
    25ce:	8c a3       	std	Y+36, r24	; 0x24
		temp[36] = SQACAToploadProgramming.NormalCycle_rinseAgitateTime;
    25d0:	80 91 ea 08 	lds	r24, 0x08EA	; 0x8008ea <SQACAToploadProgramming+0x22>
    25d4:	8d a3       	std	Y+37, r24	; 0x25
		temp[37] = SQACAToploadProgramming.NormalCycle_rinseAgitateTime;
    25d6:	8e a3       	std	Y+38, r24	; 0x26
		temp[38] = SQACAToploadProgramming.NormalCycle_finalSpinTime;
    25d8:	80 91 ec 08 	lds	r24, 0x08EC	; 0x8008ec <SQACAToploadProgramming+0x24>
    25dc:	8f a3       	std	Y+39, r24	; 0x27
		temp[39] = SQACAToploadProgramming.PermPressCycle_washAgitateTime;
    25de:	80 91 ed 08 	lds	r24, 0x08ED	; 0x8008ed <SQACAToploadProgramming+0x25>
    25e2:	88 a7       	std	Y+40, r24	; 0x28
		temp[40] = SQACAToploadProgramming.PermPressCycle_extraRinseAgitateTime;
    25e4:	80 91 ef 08 	lds	r24, 0x08EF	; 0x8008ef <SQACAToploadProgramming+0x27>
    25e8:	89 a7       	std	Y+41, r24	; 0x29
		temp[41] = SQACAToploadProgramming.PermPressCycle_rinseAgitateTime;
		temp[42] = SQACAToploadProgramming.PermPressCycle_finalSpinTime;
    25ea:	80 91 f0 08 	lds	r24, 0x08F0	; 0x8008f0 <SQACAToploadProgramming+0x28>
    25ee:	8b a7       	std	Y+43, r24	; 0x2b
		temp[43] = SQACAToploadProgramming.DelicateCycle_washAgitateTime;
    25f0:	80 91 f1 08 	lds	r24, 0x08F1	; 0x8008f1 <SQACAToploadProgramming+0x29>
    25f4:	8c a7       	std	Y+44, r24	; 0x2c
		temp[44] = SQACAToploadProgramming.DelicateCycle_extraRinseAgitateTime;
    25f6:	80 91 f3 08 	lds	r24, 0x08F3	; 0x8008f3 <SQACAToploadProgramming+0x2b>
    25fa:	8d a7       	std	Y+45, r24	; 0x2d
		temp[41] = SQACAToploadProgramming.DelicateCycle_rinseAgitateTime;
    25fc:	80 91 f2 08 	lds	r24, 0x08F2	; 0x8008f2 <SQACAToploadProgramming+0x2a>
    2600:	8a a7       	std	Y+42, r24	; 0x2a
		temp[46] = SQACAToploadProgramming.DelicateCycle_finalSpinTime;
    2602:	80 91 f4 08 	lds	r24, 0x08F4	; 0x8008f4 <SQACAToploadProgramming+0x2c>
    2606:	8f a7       	std	Y+47, r24	; 0x2f
		temp[47] = SQACAToploadProgramming.DefaultCycle;
    2608:	80 91 f5 08 	lds	r24, 0x08F5	; 0x8008f5 <SQACAToploadProgramming+0x2d>
    260c:	88 ab       	std	Y+48, r24	; 0x30
		temp[48] = SQACAToploadProgramming.DefaultCycleModifier;
    260e:	80 91 f6 08 	lds	r24, 0x08F6	; 0x8008f6 <SQACAToploadProgramming+0x2e>
    2612:	89 ab       	std	Y+49, r24	; 0x31
		temp[49] = SQACAToploadProgramming.WarmRinse;
    2614:	80 91 f7 08 	lds	r24, 0x08F7	; 0x8008f7 <SQACAToploadProgramming+0x2f>
    2618:	8a ab       	std	Y+50, r24	; 0x32
		temp[50] = SQACAToploadProgramming.AudioSetting;
    261a:	80 91 f8 08 	lds	r24, 0x08F8	; 0x8008f8 <SQACAToploadProgramming+0x30>
    261e:	8b ab       	std	Y+51, r24	; 0x33
		break;
    2620:	de c0       	rjmp	.+444    	; 0x27de <getSQReaderMachineSetup+0x318>

		case PROGRAMMING_DATA_FRONTLOAD:
		temp[0] = QTL_PROGRAMMING_DATA_SIZE;					//37 bytes
    2622:	82 e3       	ldi	r24, 0x32	; 50
    2624:	89 83       	std	Y+1, r24	; 0x01
		temp[1] = deviceStatus.deviceType[0];					//0x22 (FLW Prog)
    2626:	9a 83       	std	Y+2, r25	; 0x02
		temp[2] = SQACAFrontloadProgramming.ProductByte[0];
    2628:	80 91 a2 08 	lds	r24, 0x08A2	; 0x8008a2 <SQACAFrontloadProgramming>
    262c:	8b 83       	std	Y+3, r24	; 0x03
		temp[3] = SQACAFrontloadProgramming.ProductByte[1];
    262e:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <SQACAFrontloadProgramming+0x1>
    2632:	8c 83       	std	Y+4, r24	; 0x04
		temp[4] = SQACAFrontloadProgramming.ProductByte[2];
    2634:	80 91 a4 08 	lds	r24, 0x08A4	; 0x8008a4 <SQACAFrontloadProgramming+0x2>
    2638:	8d 83       	std	Y+5, r24	; 0x05
		temp[5] = SQACAFrontloadProgramming.ProductByte[3];
    263a:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <SQACAFrontloadProgramming+0x3>
    263e:	8e 83       	std	Y+6, r24	; 0x06
		temp[6] = SQACAFrontloadProgramming.ProductByte[4];
    2640:	80 91 a6 08 	lds	r24, 0x08A6	; 0x8008a6 <SQACAFrontloadProgramming+0x4>
    2644:	8f 83       	std	Y+7, r24	; 0x07
		temp[7] = SQACAFrontloadProgramming.VendPrice1[0];
    2646:	80 91 a7 08 	lds	r24, 0x08A7	; 0x8008a7 <SQACAFrontloadProgramming+0x5>
    264a:	88 87       	std	Y+8, r24	; 0x08
		temp[8] = SQACAFrontloadProgramming.VendPrice1[1];
    264c:	80 91 a8 08 	lds	r24, 0x08A8	; 0x8008a8 <SQACAFrontloadProgramming+0x6>
    2650:	89 87       	std	Y+9, r24	; 0x09
		temp[9] = SQACAFrontloadProgramming.VendPrice2[0];
    2652:	80 91 a9 08 	lds	r24, 0x08A9	; 0x8008a9 <SQACAFrontloadProgramming+0x7>
    2656:	8a 87       	std	Y+10, r24	; 0x0a
		temp[10] = SQACAFrontloadProgramming.VendPrice2[1];
    2658:	80 91 aa 08 	lds	r24, 0x08AA	; 0x8008aa <SQACAFrontloadProgramming+0x8>
    265c:	8b 87       	std	Y+11, r24	; 0x0b
		temp[11] = SQACAFrontloadProgramming.VendPrice3[0];
    265e:	80 91 ab 08 	lds	r24, 0x08AB	; 0x8008ab <SQACAFrontloadProgramming+0x9>
    2662:	8c 87       	std	Y+12, r24	; 0x0c
		temp[12] = SQACAFrontloadProgramming.VendPrice3[1];
    2664:	80 91 ac 08 	lds	r24, 0x08AC	; 0x8008ac <SQACAFrontloadProgramming+0xa>
    2668:	8d 87       	std	Y+13, r24	; 0x0d
		temp[13] = SQACAFrontloadProgramming.VendPrice4[0];
    266a:	80 91 ad 08 	lds	r24, 0x08AD	; 0x8008ad <SQACAFrontloadProgramming+0xb>
    266e:	8e 87       	std	Y+14, r24	; 0x0e
		temp[14] = SQACAFrontloadProgramming.VendPrice4[1];
    2670:	80 91 ae 08 	lds	r24, 0x08AE	; 0x8008ae <SQACAFrontloadProgramming+0xc>
    2674:	8f 87       	std	Y+15, r24	; 0x0f
		temp[15] = SQACAFrontloadProgramming.VendPrice5[0];
    2676:	80 91 af 08 	lds	r24, 0x08AF	; 0x8008af <SQACAFrontloadProgramming+0xd>
    267a:	88 8b       	std	Y+16, r24	; 0x10
		temp[16] = SQACAFrontloadProgramming.VendPrice5[1];
    267c:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <SQACAFrontloadProgramming+0xe>
    2680:	89 8b       	std	Y+17, r24	; 0x11
		temp[17] = SQACAFrontloadProgramming.VendPrice6[0];
    2682:	80 91 b1 08 	lds	r24, 0x08B1	; 0x8008b1 <SQACAFrontloadProgramming+0xf>
    2686:	8a 8b       	std	Y+18, r24	; 0x12
		temp[18] = SQACAFrontloadProgramming.VendPrice6[1];
    2688:	80 91 b2 08 	lds	r24, 0x08B2	; 0x8008b2 <SQACAFrontloadProgramming+0x10>
    268c:	8b 8b       	std	Y+19, r24	; 0x13
		temp[19] = SQACAFrontloadProgramming.VendPrice7[0];
    268e:	80 91 b3 08 	lds	r24, 0x08B3	; 0x8008b3 <SQACAFrontloadProgramming+0x11>
    2692:	8c 8b       	std	Y+20, r24	; 0x14
		temp[20] = SQACAFrontloadProgramming.VendPrice7[1];
    2694:	80 91 b4 08 	lds	r24, 0x08B4	; 0x8008b4 <SQACAFrontloadProgramming+0x12>
    2698:	8d 8b       	std	Y+21, r24	; 0x15
		temp[21] = SQACAFrontloadProgramming.VendPrice8[0];
    269a:	80 91 b5 08 	lds	r24, 0x08B5	; 0x8008b5 <SQACAFrontloadProgramming+0x13>
    269e:	8e 8b       	std	Y+22, r24	; 0x16
		temp[22] = SQACAFrontloadProgramming.VendPrice8[1];
    26a0:	80 91 b6 08 	lds	r24, 0x08B6	; 0x8008b6 <SQACAFrontloadProgramming+0x14>
    26a4:	8f 8b       	std	Y+23, r24	; 0x17
		temp[23] = SQACAFrontloadProgramming.VendPrice9[0];
    26a6:	80 91 b7 08 	lds	r24, 0x08B7	; 0x8008b7 <SQACAFrontloadProgramming+0x15>
    26aa:	88 8f       	std	Y+24, r24	; 0x18
		temp[24] = SQACAFrontloadProgramming.VendPrice9[1];
    26ac:	80 91 b8 08 	lds	r24, 0x08B8	; 0x8008b8 <SQACAFrontloadProgramming+0x16>
    26b0:	89 8f       	std	Y+25, r24	; 0x19
		temp[25] = SQACAFrontloadProgramming.MediumCycle_VendPrice[0];
    26b2:	80 91 b9 08 	lds	r24, 0x08B9	; 0x8008b9 <SQACAFrontloadProgramming+0x17>
    26b6:	8a 8f       	std	Y+26, r24	; 0x1a
		temp[26] = SQACAFrontloadProgramming.MediumCycle_VendPrice[1];
    26b8:	80 91 ba 08 	lds	r24, 0x08BA	; 0x8008ba <SQACAFrontloadProgramming+0x18>
    26bc:	8b 8f       	std	Y+27, r24	; 0x1b
		temp[27] = SQACAFrontloadProgramming.HeavyCycle_VendPrice[0];
    26be:	80 91 bb 08 	lds	r24, 0x08BB	; 0x8008bb <SQACAFrontloadProgramming+0x19>
    26c2:	8c 8f       	std	Y+28, r24	; 0x1c
		temp[28] = SQACAFrontloadProgramming.HeavyCycle_VendPrice[1];
    26c4:	80 91 bc 08 	lds	r24, 0x08BC	; 0x8008bc <SQACAFrontloadProgramming+0x1a>
    26c8:	8d 8f       	std	Y+29, r24	; 0x1d
		temp[29] = SQACAFrontloadProgramming.HeavyCycle_option;
    26ca:	80 91 be 08 	lds	r24, 0x08BE	; 0x8008be <SQACAFrontloadProgramming+0x1c>
    26ce:	8e 8f       	std	Y+30, r24	; 0x1e
		temp[30] = SQACAFrontloadProgramming.MediumCycle_option;
    26d0:	80 91 bd 08 	lds	r24, 0x08BD	; 0x8008bd <SQACAFrontloadProgramming+0x1b>
    26d4:	8f 8f       	std	Y+31, r24	; 0x1f
		temp[31] = SQACAFrontloadProgramming.MediumCycle_extraWashTime;
    26d6:	80 91 bf 08 	lds	r24, 0x08BF	; 0x8008bf <SQACAFrontloadProgramming+0x1d>
    26da:	88 a3       	std	Y+32, r24	; 0x20
		temp[32] = SQACAFrontloadProgramming.MediumCycle_extraRinseTime;
    26dc:	80 91 c0 08 	lds	r24, 0x08C0	; 0x8008c0 <SQACAFrontloadProgramming+0x1e>
    26e0:	89 a3       	std	Y+33, r24	; 0x21
		temp[33] = SQACAFrontloadProgramming.HeavyCycle_extraWashTime;
    26e2:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <SQACAFrontloadProgramming+0x1f>
    26e6:	8a a3       	std	Y+34, r24	; 0x22
		temp[34] = SQACAFrontloadProgramming.HeavyCycle_extraRinseTime;
    26e8:	80 91 c2 08 	lds	r24, 0x08C2	; 0x8008c2 <SQACAFrontloadProgramming+0x20>
    26ec:	8b a3       	std	Y+35, r24	; 0x23
		temp[35] = SQACAFrontloadProgramming.DefaultCycle;
    26ee:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <SQACAFrontloadProgramming+0x21>
    26f2:	8c a3       	std	Y+36, r24	; 0x24
		temp[36] = SQACAFrontloadProgramming.DefaultCycleModifier;
    26f4:	80 91 c4 08 	lds	r24, 0x08C4	; 0x8008c4 <SQACAFrontloadProgramming+0x22>
    26f8:	8d a3       	std	Y+37, r24	; 0x25
		temp[37] = SQACAFrontloadProgramming.AudioSetting;
    26fa:	80 91 c5 08 	lds	r24, 0x08C5	; 0x8008c5 <SQACAFrontloadProgramming+0x23>
    26fe:	6e c0       	rjmp	.+220    	; 0x27dc <getSQReaderMachineSetup+0x316>
		break;

		case PROGRAMMING_DATA_DRYER:									//DRYER PROGRAMMING
		temp[0] = QDT_PROGRAMMING_DATA_SIZE;							//37 bytes
    2700:	85 e2       	ldi	r24, 0x25	; 37
    2702:	89 83       	std	Y+1, r24	; 0x01
		temp[1] = deviceStatus.deviceType[0];							//0x29 for Dryer Prog
    2704:	9a 83       	std	Y+2, r25	; 0x02
		temp[2] = SQACADryerProgramming.ProductByte[0];
    2706:	80 91 04 0a 	lds	r24, 0x0A04	; 0x800a04 <SQACADryerProgramming>
    270a:	8b 83       	std	Y+3, r24	; 0x03
		temp[3] = SQACADryerProgramming.ProductByte[1];
    270c:	80 91 05 0a 	lds	r24, 0x0A05	; 0x800a05 <SQACADryerProgramming+0x1>
    2710:	8c 83       	std	Y+4, r24	; 0x04
		temp[4] = SQACADryerProgramming.ProductByte[2];
    2712:	80 91 06 0a 	lds	r24, 0x0A06	; 0x800a06 <SQACADryerProgramming+0x2>
    2716:	8d 83       	std	Y+5, r24	; 0x05
		temp[5] = SQACADryerProgramming.ProductByte[3];
    2718:	80 91 07 0a 	lds	r24, 0x0A07	; 0x800a07 <SQACADryerProgramming+0x3>
    271c:	8e 83       	std	Y+6, r24	; 0x06
		temp[6] = SQACADryerProgramming.ProductByte[4];
    271e:	80 91 08 0a 	lds	r24, 0x0A08	; 0x800a08 <SQACADryerProgramming+0x4>
    2722:	8f 83       	std	Y+7, r24	; 0x07
		temp[7] = SQACADryerProgramming.HeatVendPrice1[0];				//Heat Vend Price
    2724:	80 91 09 0a 	lds	r24, 0x0A09	; 0x800a09 <SQACADryerProgramming+0x5>
    2728:	88 87       	std	Y+8, r24	; 0x08
		temp[8] = SQACADryerProgramming.HeatVendPrice1[1];
    272a:	80 91 0a 0a 	lds	r24, 0x0A0A	; 0x800a0a <SQACADryerProgramming+0x6>
    272e:	89 87       	std	Y+9, r24	; 0x09
		temp[9] = SQACADryerProgramming.NoHeatVendPrice[0];				//No Heat Vend Price
    2730:	80 91 11 0a 	lds	r24, 0x0A11	; 0x800a11 <SQACADryerProgramming+0xd>
    2734:	8a 87       	std	Y+10, r24	; 0x0a
		temp[10] = SQACADryerProgramming.NoHeatVendPrice[1];
    2736:	80 91 12 0a 	lds	r24, 0x0A12	; 0x800a12 <SQACADryerProgramming+0xe>
    273a:	8b 87       	std	Y+11, r24	; 0x0b
		temp[13] = SQACADryerProgramming.PaymSTopoffOn;					//Top-Off On/Off
    273c:	80 91 13 0a 	lds	r24, 0x0A13	; 0x800a13 <SQACADryerProgramming+0xf>
    2740:	8e 87       	std	Y+14, r24	; 0x0e
		temp[11] = SQACADryerProgramming.PaymSTopoffPrice[0];			//Payment System Top-Off Vend Price
    2742:	80 91 14 0a 	lds	r24, 0x0A14	; 0x800a14 <SQACADryerProgramming+0x10>
    2746:	8c 87       	std	Y+12, r24	; 0x0c
		temp[12] = SQACADryerProgramming.PaymSTopoffPrice[1];
    2748:	80 91 15 0a 	lds	r24, 0x0A15	; 0x800a15 <SQACADryerProgramming+0x11>
    274c:	8d 87       	std	Y+13, r24	; 0x0d
		temp[14] = SQACADryerProgramming.PaymSTopoffMinutes;			//Payment System Top-Off Time
    274e:	80 91 16 0a 	lds	r24, 0x0A16	; 0x800a16 <SQACADryerProgramming+0x12>
    2752:	8f 87       	std	Y+15, r24	; 0x0f
		temp[15] = SQACADryerProgramming.PaymSTopoffSeconds;
    2754:	80 91 17 0a 	lds	r24, 0x0A17	; 0x800a17 <SQACADryerProgramming+0x13>
    2758:	88 8b       	std	Y+16, r24	; 0x10
		temp[16] = SQACADryerProgramming.Coin1TopoffMinutes;			//Coin #1 Top-off Time
    275a:	80 91 18 0a 	lds	r24, 0x0A18	; 0x800a18 <SQACADryerProgramming+0x14>
    275e:	89 8b       	std	Y+17, r24	; 0x11
		temp[17] = SQACADryerProgramming.Coin1TopoffSeconds;
    2760:	80 91 19 0a 	lds	r24, 0x0A19	; 0x800a19 <SQACADryerProgramming+0x15>
    2764:	8a 8b       	std	Y+18, r24	; 0x12
		temp[18] = SQACADryerProgramming.Coin2TopoffMinutes;			//Coin #2 Top-off Time
    2766:	80 91 1a 0a 	lds	r24, 0x0A1A	; 0x800a1a <SQACADryerProgramming+0x16>
    276a:	8b 8b       	std	Y+19, r24	; 0x13
		temp[19] = SQACADryerProgramming.Coin2TopoffSeconds;
    276c:	80 91 1b 0a 	lds	r24, 0x0A1B	; 0x800a1b <SQACADryerProgramming+0x17>
    2770:	8c 8b       	std	Y+20, r24	; 0x14
		temp[20] = SQACADryerProgramming.HeatCycleMinutes;				//Heat Cycle Time
    2772:	80 91 1c 0a 	lds	r24, 0x0A1C	; 0x800a1c <SQACADryerProgramming+0x18>
    2776:	8d 8b       	std	Y+21, r24	; 0x15
		temp[21] = SQACADryerProgramming.HeatCycleSeconds;
    2778:	80 91 1d 0a 	lds	r24, 0x0A1D	; 0x800a1d <SQACADryerProgramming+0x19>
    277c:	8e 8b       	std	Y+22, r24	; 0x16
		temp[22] = SQACADryerProgramming.NoHeatCycleMinutes;			//No Heat Cycle Time
    277e:	80 91 1e 0a 	lds	r24, 0x0A1E	; 0x800a1e <SQACADryerProgramming+0x1a>
    2782:	8f 8b       	std	Y+23, r24	; 0x17
		temp[23] = SQACADryerProgramming.NoHeatCycleSeconds;
    2784:	80 91 1f 0a 	lds	r24, 0x0A1F	; 0x800a1f <SQACADryerProgramming+0x1b>
    2788:	88 8f       	std	Y+24, r24	; 0x18
		temp[24] = SQACADryerProgramming.HighCoolDownTime;				//High Temperature Cool Down Time (Minutes)
    278a:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <SQACADryerProgramming+0x1c>
    278e:	89 8f       	std	Y+25, r24	; 0x19
		temp[25] = SQACADryerProgramming.MediumCoolDownTime;			//Medium Temperature Cool Down Time (Minutes)
    2790:	80 91 21 0a 	lds	r24, 0x0A21	; 0x800a21 <SQACADryerProgramming+0x1d>
    2794:	8a 8f       	std	Y+26, r24	; 0x1a
		temp[26] = SQACADryerProgramming.LowCoolDownTime;				//Low Temperature Cool Down Time (Minutes)
    2796:	80 91 22 0a 	lds	r24, 0x0A22	; 0x800a22 <SQACADryerProgramming+0x1e>
    279a:	8b 8f       	std	Y+27, r24	; 0x1b
		temp[27] = SQACADryerProgramming.DelicateCoolDownTime;			//Delicate Temperature Cool Down Time (Minutes)
    279c:	80 91 23 0a 	lds	r24, 0x0A23	; 0x800a23 <SQACADryerProgramming+0x1f>
    27a0:	8c 8f       	std	Y+28, r24	; 0x1c
		temp[28] = SQACADryerProgramming.HighTempSetting;				//High Temperature
    27a2:	80 91 24 0a 	lds	r24, 0x0A24	; 0x800a24 <SQACADryerProgramming+0x20>
    27a6:	8d 8f       	std	Y+29, r24	; 0x1d
		temp[29] = SQACADryerProgramming.MediumTempSetting;
    27a8:	80 91 25 0a 	lds	r24, 0x0A25	; 0x800a25 <SQACADryerProgramming+0x21>
    27ac:	8e 8f       	std	Y+30, r24	; 0x1e
		temp[30] = SQACADryerProgramming.LowTempSetting;				//Low Temperature
    27ae:	80 91 26 0a 	lds	r24, 0x0A26	; 0x800a26 <SQACADryerProgramming+0x22>
    27b2:	8f 8f       	std	Y+31, r24	; 0x1f
		temp[31] = SQACADryerProgramming.DelicateTempSetting;
    27b4:	80 91 27 0a 	lds	r24, 0x0A27	; 0x800a27 <SQACADryerProgramming+0x23>
    27b8:	88 a3       	std	Y+32, r24	; 0x20
		temp[32] = SQACADryerProgramming.DefaultCycle;					//Default Cycle
    27ba:	80 91 28 0a 	lds	r24, 0x0A28	; 0x800a28 <SQACADryerProgramming+0x24>
    27be:	89 a3       	std	Y+33, r24	; 0x21
		temp[33] = SQACADryerProgramming.AudioSetting;					//Audio
    27c0:	80 91 29 0a 	lds	r24, 0x0A29	; 0x800a29 <SQACADryerProgramming+0x25>
    27c4:	8a a3       	std	Y+34, r24	; 0x22
		temp[34] = SQACADryerProgramming.AudioEnable1;					//Anti-Wrinkle Audio Enable
    27c6:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <SQACADryerProgramming+0x26>
    27ca:	8b a3       	std	Y+35, r24	; 0x23
		temp[35] = SQACADryerProgramming.AudioEnable2;					//Extended Tumble Audio Enable
    27cc:	80 91 2b 0a 	lds	r24, 0x0A2B	; 0x800a2b <SQACADryerProgramming+0x27>
    27d0:	8c a3       	std	Y+36, r24	; 0x24
		temp[36] = SQACADryerProgramming.DisplaySetting1;				//Fahrenheit / Celsius
    27d2:	80 91 2c 0a 	lds	r24, 0x0A2C	; 0x800a2c <SQACADryerProgramming+0x28>
    27d6:	8d a3       	std	Y+37, r24	; 0x25
		temp[37] = SQACADryerProgramming.DisplaySetting2;				//Minutes / Minutes & Seconds Display
    27d8:	80 91 2d 0a 	lds	r24, 0x0A2D	; 0x800a2d <SQACADryerProgramming+0x29>
    27dc:	8e a3       	std	Y+38, r24	; 0x26
		
		break;
	}
	return ( sendSQDataPacket(temp) );
    27de:	cf 01       	movw	r24, r30
    27e0:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <sendSQDataPacket>
}
    27e4:	ec 96       	adiw	r28, 0x3c	; 60
    27e6:	0f b6       	in	r0, 0x3f	; 63
    27e8:	f8 94       	cli
    27ea:	de bf       	out	0x3e, r29	; 62
    27ec:	0f be       	out	0x3f, r0	; 63
    27ee:	cd bf       	out	0x3d, r28	; 61
    27f0:	df 91       	pop	r29
    27f2:	cf 91       	pop	r28
    27f4:	08 95       	ret

000027f6 <initReader>:
	char nibbleStr[50] = {"00770076007500740073007200710070006F00190503"};
	char *ptr = &nibbleStr[0] ;
	n = asciiStringToNibble(ptr, nibbleStr); //position at eeprom address 0x24
	
	halPutEeprom(MACHINE_SETUP_ADDR, n, (u8*)ptr);
}
    27f6:	44 e3       	ldi	r20, 0x34	; 52
    27f8:	59 e0       	ldi	r21, 0x09	; 9
    27fa:	62 e0       	ldi	r22, 0x02	; 2
    27fc:	82 e2       	ldi	r24, 0x22	; 34
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <halGetEeprom>
    2804:	41 ef       	ldi	r20, 0xF1	; 241
    2806:	5a e0       	ldi	r21, 0x0A	; 10
    2808:	62 e0       	ldi	r22, 0x02	; 2
    280a:	8e e1       	ldi	r24, 0x1E	; 30
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <halGetEeprom>
    2812:	10 92 ba 09 	sts	0x09BA, r1	; 0x8009ba <ReaderSetup>
    2816:	10 92 bb 09 	sts	0x09BB, r1	; 0x8009bb <ReaderSetup+0x1>
    281a:	10 92 bc 09 	sts	0x09BC, r1	; 0x8009bc <ReaderSetup+0x2>
    281e:	10 92 bd 09 	sts	0x09BD, r1	; 0x8009bd <ReaderSetup+0x3>
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	90 93 bf 09 	sts	0x09BF, r25	; 0x8009bf <ReaderSetup+0x5>
    282a:	80 93 be 09 	sts	0x09BE, r24	; 0x8009be <ReaderSetup+0x4>
    282e:	90 93 c1 09 	sts	0x09C1, r25	; 0x8009c1 <ReaderSetup+0x7>
    2832:	80 93 c0 09 	sts	0x09C0, r24	; 0x8009c0 <ReaderSetup+0x6>
    2836:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <ReaderStateFlag>
    283a:	8f 7b       	andi	r24, 0xBF	; 191
    283c:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <ReaderStateFlag>
    2840:	81 fd       	sbrc	r24, 1
    2842:	47 c0       	rjmp	.+142    	; 0x28d2 <initReader+0xdc>
    2844:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <getSQSetupData>
    2848:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <ReaderStateFlag>
    284c:	84 60       	ori	r24, 0x04	; 4
    284e:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <ReaderStateFlag>
    2852:	42 ec       	ldi	r20, 0xC2	; 194
    2854:	59 e0       	ldi	r21, 0x09	; 9
    2856:	61 e0       	ldi	r22, 0x01	; 1
    2858:	81 e6       	ldi	r24, 0x61	; 97
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <halGetEeprom>
    2860:	80 91 c2 09 	lds	r24, 0x09C2	; 0x8009c2 <ReaderSetup+0x8>
    2864:	88 23       	and	r24, r24
    2866:	c9 f0       	breq	.+50     	; 0x289a <initReader+0xa4>
    2868:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <ReaderStateFlag>
    286c:	88 60       	ori	r24, 0x08	; 8
    286e:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <ReaderStateFlag>
    2872:	43 ec       	ldi	r20, 0xC3	; 195
    2874:	59 e0       	ldi	r21, 0x09	; 9
    2876:	61 e0       	ldi	r22, 0x01	; 1
    2878:	80 e0       	ldi	r24, 0x00	; 0
    287a:	91 e0       	ldi	r25, 0x01	; 1
    287c:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <halGetEeprom>
    2880:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    2884:	8f 3f       	cpi	r24, 0xFF	; 255
    2886:	49 f4       	brne	.+18     	; 0x289a <initReader+0xa4>
    2888:	10 92 c3 09 	sts	0x09C3, r1	; 0x8009c3 <ReaderSetup+0x9>
    288c:	43 ec       	ldi	r20, 0xC3	; 195
    288e:	59 e0       	ldi	r21, 0x09	; 9
    2890:	61 e0       	ldi	r22, 0x01	; 1
    2892:	80 e0       	ldi	r24, 0x00	; 0
    2894:	91 e0       	ldi	r25, 0x01	; 1
    2896:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <halPutEeprom>
    289a:	8b e0       	ldi	r24, 0x0B	; 11
    289c:	e7 ef       	ldi	r30, 0xF7	; 247
    289e:	f9 e0       	ldi	r31, 0x09	; 9
    28a0:	df 01       	movw	r26, r30
    28a2:	1d 92       	st	X+, r1
    28a4:	8a 95       	dec	r24
    28a6:	e9 f7       	brne	.-6      	; 0x28a2 <initReader+0xac>
    28a8:	83 e3       	ldi	r24, 0x33	; 51
    28aa:	e4 ec       	ldi	r30, 0xC4	; 196
    28ac:	f9 e0       	ldi	r31, 0x09	; 9
    28ae:	df 01       	movw	r26, r30
    28b0:	1d 92       	st	X+, r1
    28b2:	8a 95       	dec	r24
    28b4:	e9 f7       	brne	.-6      	; 0x28b0 <initReader+0xba>
    28b6:	47 ef       	ldi	r20, 0xF7	; 247
    28b8:	59 e0       	ldi	r21, 0x09	; 9
    28ba:	6a e0       	ldi	r22, 0x0A	; 10
    28bc:	8c e6       	ldi	r24, 0x6C	; 108
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <halGetEeprom>
    28c4:	44 ec       	ldi	r20, 0xC4	; 196
    28c6:	59 e0       	ldi	r21, 0x09	; 9
    28c8:	62 e3       	ldi	r22, 0x32	; 50
    28ca:	87 e7       	ldi	r24, 0x77	; 119
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	0c 94 34 1f 	jmp	0x3e68	; 0x3e68 <halGetEeprom>
    28d2:	08 95       	ret

000028d4 <storeOfflineTransaction>:
    28d4:	cf 93       	push	r28
    28d6:	df 93       	push	r29
    28d8:	cd b7       	in	r28, 0x3d	; 61
    28da:	de b7       	in	r29, 0x3e	; 62
    28dc:	67 97       	sbiw	r28, 0x17	; 23
    28de:	0f b6       	in	r0, 0x3f	; 63
    28e0:	f8 94       	cli
    28e2:	de bf       	out	0x3e, r29	; 62
    28e4:	0f be       	out	0x3f, r0	; 63
    28e6:	cd bf       	out	0x3d, r28	; 61
    28e8:	21 e0       	ldi	r18, 0x01	; 1
    28ea:	2f 8b       	std	Y+23, r18	; 0x17
    28ec:	28 e1       	ldi	r18, 0x18	; 24
    28ee:	2e 8b       	std	Y+22, r18	; 0x16
    28f0:	6a 87       	std	Y+10, r22	; 0x0a
    28f2:	7b 87       	std	Y+11, r23	; 0x0b
    28f4:	8c 87       	std	Y+12, r24	; 0x0c
    28f6:	9d 87       	std	Y+13, r25	; 0x0d
    28f8:	80 91 c0 09 	lds	r24, 0x09C0	; 0x8009c0 <ReaderSetup+0x6>
    28fc:	90 91 c1 09 	lds	r25, 0x09C1	; 0x8009c1 <ReaderSetup+0x7>
    2900:	9a 83       	std	Y+2, r25	; 0x02
    2902:	89 83       	std	Y+1, r24	; 0x01
    2904:	80 91 f5 0a 	lds	r24, 0x0AF5	; 0x800af5 <SQACAMachineStatus>
    2908:	8b 83       	std	Y+3, r24	; 0x03
    290a:	80 91 f6 0a 	lds	r24, 0x0AF6	; 0x800af6 <SQACAMachineStatus+0x1>
    290e:	8c 83       	std	Y+4, r24	; 0x04
    2910:	80 91 f7 0a 	lds	r24, 0x0AF7	; 0x800af7 <SQACAMachineStatus+0x2>
    2914:	8f 83       	std	Y+7, r24	; 0x07
    2916:	20 91 be 09 	lds	r18, 0x09BE	; 0x8009be <ReaderSetup+0x4>
    291a:	30 91 bf 09 	lds	r19, 0x09BF	; 0x8009bf <ReaderSetup+0x5>
    291e:	3e 83       	std	Y+6, r19	; 0x06
    2920:	2d 83       	std	Y+5, r18	; 0x05
    2922:	90 91 f1 0a 	lds	r25, 0x0AF1	; 0x800af1 <deviceStatus>
    2926:	92 32       	cpi	r25, 0x22	; 34
    2928:	59 f0       	breq	.+22     	; 0x2940 <storeOfflineTransaction+0x6c>
    292a:	99 32       	cpi	r25, 0x29	; 41
    292c:	01 f1       	breq	.+64     	; 0x296e <storeOfflineTransaction+0x9a>
    292e:	91 32       	cpi	r25, 0x21	; 33
    2930:	d9 f5       	brne	.+118    	; 0x29a8 <storeOfflineTransaction+0xd4>
    2932:	48 2f       	mov	r20, r24
    2934:	50 e0       	ldi	r21, 0x00	; 0
    2936:	fa 01       	movw	r30, r20
    2938:	31 97       	sbiw	r30, 0x01	; 1
    293a:	e9 30       	cpi	r30, 0x09	; 9
    293c:	f1 05       	cpc	r31, r1
    293e:	38 f0       	brcs	.+14     	; 0x294e <storeOfflineTransaction+0x7a>
    2940:	48 2f       	mov	r20, r24
    2942:	50 e0       	ldi	r21, 0x00	; 0
    2944:	fa 01       	movw	r30, r20
    2946:	31 97       	sbiw	r30, 0x01	; 1
    2948:	e9 30       	cpi	r30, 0x09	; 9
    294a:	f1 05       	cpc	r31, r1
    294c:	80 f4       	brcc	.+32     	; 0x296e <storeOfflineTransaction+0x9a>
    294e:	e6 53       	subi	r30, 0x36	; 54
    2950:	ff 4f       	sbci	r31, 0xFF	; 255
    2952:	0c 94 11 2e 	jmp	0x5c22	; 0x5c22 <__tablejump2__>
    2956:	80 91 b8 08 	lds	r24, 0x08B8	; 0x8008b8 <SQACAFrontloadProgramming+0x16>
    295a:	23 c0       	rjmp	.+70     	; 0x29a2 <storeOfflineTransaction+0xce>
    295c:	80 91 b6 08 	lds	r24, 0x08B6	; 0x8008b6 <SQACAFrontloadProgramming+0x14>
    2960:	20 c0       	rjmp	.+64     	; 0x29a2 <storeOfflineTransaction+0xce>
    2962:	80 91 b4 08 	lds	r24, 0x08B4	; 0x8008b4 <SQACAFrontloadProgramming+0x12>
    2966:	1d c0       	rjmp	.+58     	; 0x29a2 <storeOfflineTransaction+0xce>
    2968:	80 91 b2 08 	lds	r24, 0x08B2	; 0x8008b2 <SQACAFrontloadProgramming+0x10>
    296c:	1a c0       	rjmp	.+52     	; 0x29a2 <storeOfflineTransaction+0xce>
    296e:	83 30       	cpi	r24, 0x03	; 3
    2970:	81 f0       	breq	.+32     	; 0x2992 <storeOfflineTransaction+0xbe>
    2972:	28 f4       	brcc	.+10     	; 0x297e <storeOfflineTransaction+0xaa>
    2974:	81 30       	cpi	r24, 0x01	; 1
    2976:	99 f0       	breq	.+38     	; 0x299e <storeOfflineTransaction+0xca>
    2978:	82 30       	cpi	r24, 0x02	; 2
    297a:	71 f0       	breq	.+28     	; 0x2998 <storeOfflineTransaction+0xc4>
    297c:	15 c0       	rjmp	.+42     	; 0x29a8 <storeOfflineTransaction+0xd4>
    297e:	84 30       	cpi	r24, 0x04	; 4
    2980:	29 f0       	breq	.+10     	; 0x298c <storeOfflineTransaction+0xb8>
    2982:	85 30       	cpi	r24, 0x05	; 5
    2984:	89 f4       	brne	.+34     	; 0x29a8 <storeOfflineTransaction+0xd4>
    2986:	80 91 10 0a 	lds	r24, 0x0A10	; 0x800a10 <SQACADryerProgramming+0xc>
    298a:	0b c0       	rjmp	.+22     	; 0x29a2 <storeOfflineTransaction+0xce>
    298c:	80 91 0c 0a 	lds	r24, 0x0A0C	; 0x800a0c <SQACADryerProgramming+0x8>
    2990:	08 c0       	rjmp	.+16     	; 0x29a2 <storeOfflineTransaction+0xce>
    2992:	80 91 12 0a 	lds	r24, 0x0A12	; 0x800a12 <SQACADryerProgramming+0xe>
    2996:	05 c0       	rjmp	.+10     	; 0x29a2 <storeOfflineTransaction+0xce>
    2998:	80 91 0e 0a 	lds	r24, 0x0A0E	; 0x800a0e <SQACADryerProgramming+0xa>
    299c:	02 c0       	rjmp	.+4      	; 0x29a2 <storeOfflineTransaction+0xce>
    299e:	80 91 ce 08 	lds	r24, 0x08CE	; 0x8008ce <SQACAToploadProgramming+0x6>
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	99 87       	std	Y+9, r25	; 0x09
    29a6:	88 87       	std	Y+8, r24	; 0x08
    29a8:	1e 86       	std	Y+14, r1	; 0x0e
    29aa:	1f 86       	std	Y+15, r1	; 0x0f
    29ac:	18 8a       	std	Y+16, r1	; 0x10
    29ae:	19 8a       	std	Y+17, r1	; 0x11
    29b0:	1a 8a       	std	Y+18, r1	; 0x12
    29b2:	1b 8a       	std	Y+19, r1	; 0x13
    29b4:	1c 8a       	std	Y+20, r1	; 0x14
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	8d 8b       	std	Y+21, r24	; 0x15
    29ba:	43 ec       	ldi	r20, 0xC3	; 195
    29bc:	59 e0       	ldi	r21, 0x09	; 9
    29be:	61 e0       	ldi	r22, 0x01	; 1
    29c0:	80 e0       	ldi	r24, 0x00	; 0
    29c2:	91 e0       	ldi	r25, 0x01	; 1
    29c4:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <halGetEeprom>
    29c8:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    29cc:	8f 3f       	cpi	r24, 0xFF	; 255
    29ce:	29 f0       	breq	.+10     	; 0x29da <storeOfflineTransaction+0x106>
    29d0:	90 91 c2 09 	lds	r25, 0x09C2	; 0x8009c2 <ReaderSetup+0x8>
    29d4:	89 17       	cp	r24, r25
    29d6:	08 f0       	brcs	.+2      	; 0x29da <storeOfflineTransaction+0x106>
    29d8:	48 c0       	rjmp	.+144    	; 0x2a6a <storeOfflineTransaction+0x196>
    29da:	81 50       	subi	r24, 0x01	; 1
    29dc:	8e 3f       	cpi	r24, 0xFE	; 254
    29de:	50 f0       	brcs	.+20     	; 0x29f4 <storeOfflineTransaction+0x120>
    29e0:	10 92 c3 09 	sts	0x09C3, r1	; 0x8009c3 <ReaderSetup+0x9>
    29e4:	ae 01       	movw	r20, r28
    29e6:	4a 5e       	subi	r20, 0xEA	; 234
    29e8:	5f 4f       	sbci	r21, 0xFF	; 255
    29ea:	62 e0       	ldi	r22, 0x02	; 2
    29ec:	81 e0       	ldi	r24, 0x01	; 1
    29ee:	91 e0       	ldi	r25, 0x01	; 1
    29f0:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <halPutEeprom>
    29f4:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    29f8:	25 e1       	ldi	r18, 0x15	; 21
    29fa:	82 9f       	mul	r24, r18
    29fc:	c0 01       	movw	r24, r0
    29fe:	11 24       	eor	r1, r1
    2a00:	ae 01       	movw	r20, r28
    2a02:	4f 5f       	subi	r20, 0xFF	; 255
    2a04:	5f 4f       	sbci	r21, 0xFF	; 255
    2a06:	65 e1       	ldi	r22, 0x15	; 21
    2a08:	88 5e       	subi	r24, 0xE8	; 232
    2a0a:	9e 4f       	sbci	r25, 0xFE	; 254
    2a0c:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <halPutEeprom>
    2a10:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    2a14:	8f 5f       	subi	r24, 0xFF	; 255
    2a16:	80 93 c3 09 	sts	0x09C3, r24	; 0x8009c3 <ReaderSetup+0x9>
    2a1a:	43 ec       	ldi	r20, 0xC3	; 195
    2a1c:	59 e0       	ldi	r21, 0x09	; 9
    2a1e:	61 e0       	ldi	r22, 0x01	; 1
    2a20:	80 e0       	ldi	r24, 0x00	; 0
    2a22:	91 e0       	ldi	r25, 0x01	; 1
    2a24:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <halPutEeprom>
    2a28:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <ReaderStateFlag>
    2a2c:	85 fd       	sbrc	r24, 5
    2a2e:	0a c0       	rjmp	.+20     	; 0x2a44 <storeOfflineTransaction+0x170>
    2a30:	80 62       	ori	r24, 0x20	; 32
    2a32:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <ReaderStateFlag>
    2a36:	44 e3       	ldi	r20, 0x34	; 52
    2a38:	59 e0       	ldi	r21, 0x09	; 9
    2a3a:	62 e0       	ldi	r22, 0x02	; 2
    2a3c:	82 e2       	ldi	r24, 0x22	; 34
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <halPutEeprom>
    2a44:	90 91 c3 09 	lds	r25, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    2a48:	80 91 c2 09 	lds	r24, 0x09C2	; 0x8009c2 <ReaderSetup+0x8>
    2a4c:	98 13       	cpse	r25, r24
    2a4e:	23 c0       	rjmp	.+70     	; 0x2a96 <storeOfflineTransaction+0x1c2>
    2a50:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <ReaderStateFlag>
    2a54:	80 61       	ori	r24, 0x10	; 16
    2a56:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <ReaderStateFlag>
    2a5a:	44 e3       	ldi	r20, 0x34	; 52
    2a5c:	59 e0       	ldi	r21, 0x09	; 9
    2a5e:	62 e0       	ldi	r22, 0x02	; 2
    2a60:	82 e2       	ldi	r24, 0x22	; 34
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <halPutEeprom>
    2a68:	16 c0       	rjmp	.+44     	; 0x2a96 <storeOfflineTransaction+0x1c2>
    2a6a:	44 e3       	ldi	r20, 0x34	; 52
    2a6c:	59 e0       	ldi	r21, 0x09	; 9
    2a6e:	61 e0       	ldi	r22, 0x01	; 1
    2a70:	82 e2       	ldi	r24, 0x22	; 34
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <halGetEeprom>
    2a78:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <ReaderStateFlag>
    2a7c:	87 7f       	andi	r24, 0xF7	; 247
    2a7e:	80 61       	ori	r24, 0x10	; 16
    2a80:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <ReaderStateFlag>
    2a84:	44 e3       	ldi	r20, 0x34	; 52
    2a86:	59 e0       	ldi	r21, 0x09	; 9
    2a88:	61 e0       	ldi	r22, 0x01	; 1
    2a8a:	82 e2       	ldi	r24, 0x22	; 34
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <halPutEeprom>
    2a92:	80 e0       	ldi	r24, 0x00	; 0
    2a94:	01 c0       	rjmp	.+2      	; 0x2a98 <storeOfflineTransaction+0x1c4>
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	67 96       	adiw	r28, 0x17	; 23
    2a9a:	0f b6       	in	r0, 0x3f	; 63
    2a9c:	f8 94       	cli
    2a9e:	de bf       	out	0x3e, r29	; 62
    2aa0:	0f be       	out	0x3f, r0	; 63
    2aa2:	cd bf       	out	0x3d, r28	; 61
    2aa4:	df 91       	pop	r29
    2aa6:	cf 91       	pop	r28
    2aa8:	08 95       	ret

00002aaa <sendStoredTransaction>:
    2aaa:	cf 93       	push	r28
    2aac:	df 93       	push	r29
    2aae:	cd b7       	in	r28, 0x3d	; 61
    2ab0:	de b7       	in	r29, 0x3e	; 62
    2ab2:	67 97       	sbiw	r28, 0x17	; 23
    2ab4:	0f b6       	in	r0, 0x3f	; 63
    2ab6:	f8 94       	cli
    2ab8:	de bf       	out	0x3e, r29	; 62
    2aba:	0f be       	out	0x3f, r0	; 63
    2abc:	cd bf       	out	0x3d, r28	; 61
    2abe:	43 ec       	ldi	r20, 0xC3	; 195
    2ac0:	59 e0       	ldi	r21, 0x09	; 9
    2ac2:	61 e0       	ldi	r22, 0x01	; 1
    2ac4:	80 e0       	ldi	r24, 0x00	; 0
    2ac6:	91 e0       	ldi	r25, 0x01	; 1
    2ac8:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <halGetEeprom>
    2acc:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    2ad0:	81 50       	subi	r24, 0x01	; 1
    2ad2:	8e 3f       	cpi	r24, 0xFE	; 254
    2ad4:	78 f5       	brcc	.+94     	; 0x2b34 <sendStoredTransaction+0x8a>
    2ad6:	ae 01       	movw	r20, r28
    2ad8:	4a 5e       	subi	r20, 0xEA	; 234
    2ada:	5f 4f       	sbci	r21, 0xFF	; 255
    2adc:	62 e0       	ldi	r22, 0x02	; 2
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	91 e0       	ldi	r25, 0x01	; 1
    2ae2:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <halGetEeprom>
    2ae6:	ae 01       	movw	r20, r28
    2ae8:	4f 5f       	subi	r20, 0xFF	; 255
    2aea:	5f 4f       	sbci	r21, 0xFF	; 255
    2aec:	65 e1       	ldi	r22, 0x15	; 21
    2aee:	8e 89       	ldd	r24, Y+22	; 0x16
    2af0:	9f 89       	ldd	r25, Y+23	; 0x17
    2af2:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <halGetEeprom>
    2af6:	ce 01       	movw	r24, r28
    2af8:	01 96       	adiw	r24, 0x01	; 1
    2afa:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <sendBOWCCTransaction>
    2afe:	88 23       	and	r24, r24
    2b00:	c9 f0       	breq	.+50     	; 0x2b34 <sendStoredTransaction+0x8a>
    2b02:	8e 89       	ldd	r24, Y+22	; 0x16
    2b04:	9f 89       	ldd	r25, Y+23	; 0x17
    2b06:	45 96       	adiw	r24, 0x15	; 21
    2b08:	9f 8b       	std	Y+23, r25	; 0x17
    2b0a:	8e 8b       	std	Y+22, r24	; 0x16
    2b0c:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    2b10:	81 50       	subi	r24, 0x01	; 1
    2b12:	80 93 c3 09 	sts	0x09C3, r24	; 0x8009c3 <ReaderSetup+0x9>
    2b16:	ae 01       	movw	r20, r28
    2b18:	4a 5e       	subi	r20, 0xEA	; 234
    2b1a:	5f 4f       	sbci	r21, 0xFF	; 255
    2b1c:	62 e0       	ldi	r22, 0x02	; 2
    2b1e:	81 e0       	ldi	r24, 0x01	; 1
    2b20:	91 e0       	ldi	r25, 0x01	; 1
    2b22:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <halPutEeprom>
    2b26:	43 ec       	ldi	r20, 0xC3	; 195
    2b28:	59 e0       	ldi	r21, 0x09	; 9
    2b2a:	61 e0       	ldi	r22, 0x01	; 1
    2b2c:	80 e0       	ldi	r24, 0x00	; 0
    2b2e:	91 e0       	ldi	r25, 0x01	; 1
    2b30:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <halPutEeprom>
    2b34:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    2b38:	81 11       	cpse	r24, r1
    2b3a:	0d c0       	rjmp	.+26     	; 0x2b56 <sendStoredTransaction+0xac>
    2b3c:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <ReaderStateFlag>
    2b40:	8f 7d       	andi	r24, 0xDF	; 223
    2b42:	8f 7e       	andi	r24, 0xEF	; 239
    2b44:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <ReaderStateFlag>
    2b48:	44 e3       	ldi	r20, 0x34	; 52
    2b4a:	59 e0       	ldi	r21, 0x09	; 9
    2b4c:	61 e0       	ldi	r22, 0x01	; 1
    2b4e:	82 e2       	ldi	r24, 0x22	; 34
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <halPutEeprom>
    2b56:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    2b5a:	67 96       	adiw	r28, 0x17	; 23
    2b5c:	0f b6       	in	r0, 0x3f	; 63
    2b5e:	f8 94       	cli
    2b60:	de bf       	out	0x3e, r29	; 62
    2b62:	0f be       	out	0x3f, r0	; 63
    2b64:	cd bf       	out	0x3d, r28	; 61
    2b66:	df 91       	pop	r29
    2b68:	cf 91       	pop	r28
    2b6a:	08 95       	ret

00002b6c <WaitForMachine>:



void WaitForMachine(void)
{
	ucMachineWait = MACHINE_TIME_OUT;
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
    2b6e:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <ucMachineWait>
    2b72:	08 95       	ret

00002b74 <InitTimerZero>:
/** @brief Function to initialize the hardware Timer  
 
 */
void InitTimerZero(void)
{	
	TIFR0 = 2;//1<<TOV0;					//clear TOV0 / clear interrupt
    2b74:	82 e0       	ldi	r24, 0x02	; 2
    2b76:	85 bb       	out	0x15, r24	; 21
	TIMSK0 = 2;//1<<TOIE0;				//enable timer0 overflow interrupt
    2b78:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	TCNT0 = 0;//16;
    2b7c:	16 bc       	out	0x26, r1	; 38
	ucTimerCount = 0;
    2b7e:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <ucTimerCount>
    2b82:	08 95       	ret

00002b84 <StopTimerZero>:
/** @brief Stop the hardware timer running.
 
 */
void StopTimerZero(void)
{
	TCCR0B = 0;//~(1<<CS02) | ~(1<<CS01) | ~(1<<CS00);	//set prescaler to zero
    2b84:	15 bc       	out	0x25, r1	; 37
    2b86:	08 95       	ret

00002b88 <StartTimerZero>:
/** @brief Start the hardware timer running.
 set timer zero to 5 milisecond resolution and start
 */
void StartTimerZero(void)
{
	OCR0A = 78;
    2b88:	8e e4       	ldi	r24, 0x4E	; 78
    2b8a:	87 bd       	out	0x27, r24	; 39
	TCCR0A = 2;
    2b8c:	82 e0       	ldi	r24, 0x02	; 2
    2b8e:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS02) | (1<<CS00);	//set prescaler to 1024
    2b90:	85 e0       	ldi	r24, 0x05	; 5
    2b92:	85 bd       	out	0x25, r24	; 37
    2b94:	08 95       	ret

00002b96 <__vector_21>:

/**
   @brief Timer interrupt service routine.
*/
ISR(TIMER0_COMPA_vect)
{
    2b96:	1f 92       	push	r1
    2b98:	0f 92       	push	r0
    2b9a:	0f b6       	in	r0, 0x3f	; 63
    2b9c:	0f 92       	push	r0
    2b9e:	11 24       	eor	r1, r1
    2ba0:	8f 93       	push	r24
	ucTimerCount++;
    2ba2:	80 91 15 0b 	lds	r24, 0x0B15	; 0x800b15 <ucTimerCount>
    2ba6:	8f 5f       	subi	r24, 0xFF	; 255
    2ba8:	80 93 15 0b 	sts	0x0B15, r24	; 0x800b15 <ucTimerCount>

}
    2bac:	8f 91       	pop	r24
    2bae:	0f 90       	pop	r0
    2bb0:	0f be       	out	0x3f, r0	; 63
    2bb2:	0f 90       	pop	r0
    2bb4:	1f 90       	pop	r1
    2bb6:	18 95       	reti

00002bb8 <padLeft>:
 \param string is the string size.
 \param paddedLength is the data size.
 \param pad is pointer to data to be converted.
 */
 char * padLeft(char * string, u8 paddedLength, const char * pad)
 {
    2bb8:	7f 92       	push	r7
    2bba:	8f 92       	push	r8
    2bbc:	9f 92       	push	r9
    2bbe:	af 92       	push	r10
    2bc0:	bf 92       	push	r11
    2bc2:	cf 92       	push	r12
    2bc4:	df 92       	push	r13
    2bc6:	ef 92       	push	r14
    2bc8:	ff 92       	push	r15
    2bca:	0f 93       	push	r16
    2bcc:	1f 93       	push	r17
    2bce:	cf 93       	push	r28
    2bd0:	df 93       	push	r29
    2bd2:	7c 01       	movw	r14, r24
    2bd4:	76 2e       	mov	r7, r22
    2bd6:	4a 01       	movw	r8, r20
	 size_t stringLength = strlen(string);
    2bd8:	ec 01       	movw	r28, r24
    2bda:	09 90       	ld	r0, Y+
    2bdc:	00 20       	and	r0, r0
    2bde:	e9 f7       	brne	.-6      	; 0x2bda <padLeft+0x22>
    2be0:	21 97       	sbiw	r28, 0x01	; 1
    2be2:	c8 1b       	sub	r28, r24
    2be4:	d9 0b       	sbc	r29, r25
	 size_t lenpad = strlen(pad);
    2be6:	fa 01       	movw	r30, r20
    2be8:	01 90       	ld	r0, Z+
    2bea:	00 20       	and	r0, r0
    2bec:	e9 f7       	brne	.-6      	; 0x2be8 <padLeft+0x30>
    2bee:	31 97       	sbiw	r30, 0x01	; 1
    2bf0:	8f 01       	movw	r16, r30
    2bf2:	04 1b       	sub	r16, r20
    2bf4:	15 0b       	sbc	r17, r21
	 u8 i = paddedLength;
	 
	 if (stringLength >= paddedLength)
    2bf6:	c6 2e       	mov	r12, r22
    2bf8:	d1 2c       	mov	r13, r1
    2bfa:	cc 15       	cp	r28, r12
    2bfc:	dd 05       	cpc	r29, r13
    2bfe:	20 f5       	brcc	.+72     	; 0x2c48 <padLeft+0x90>
	 {
		 return NULL;//'\0';
	 }

	 char * padded = (char*)malloc(paddedLength + 1); // allocate memory for new string
    2c00:	c6 01       	movw	r24, r12
    2c02:	01 96       	adiw	r24, 0x01	; 1
    2c04:	0e 94 38 2e 	call	0x5c70	; 0x5c70 <malloc>
    2c08:	5c 01       	movw	r10, r24
	 
	 for(; paddedLength > stringLength; paddedLength--, padded += lenpad)
    2c0a:	87 2d       	mov	r24, r7
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	c8 17       	cp	r28, r24
    2c10:	d9 07       	cpc	r29, r25
    2c12:	48 f4       	brcc	.+18     	; 0x2c26 <padLeft+0x6e>
	 {
		 strncpy(padded, pad, lenpad);
    2c14:	a8 01       	movw	r20, r16
    2c16:	b4 01       	movw	r22, r8
    2c18:	c5 01       	movw	r24, r10
    2c1a:	0e 94 36 32 	call	0x646c	; 0x646c <strncpy>
		 return NULL;//'\0';
	 }

	 char * padded = (char*)malloc(paddedLength + 1); // allocate memory for new string
	 
	 for(; paddedLength > stringLength; paddedLength--, padded += lenpad)
    2c1e:	7a 94       	dec	r7
    2c20:	a0 0e       	add	r10, r16
    2c22:	b1 1e       	adc	r11, r17
    2c24:	f2 cf       	rjmp	.-28     	; 0x2c0a <padLeft+0x52>
	 {
		 strncpy(padded, pad, lenpad);
	 }
	 
	 strncpy(padded, string, stringLength); /* copy without '\0' */
    2c26:	ae 01       	movw	r20, r28
    2c28:	b7 01       	movw	r22, r14
    2c2a:	c5 01       	movw	r24, r10
    2c2c:	0e 94 36 32 	call	0x646c	; 0x646c <strncpy>
	 padded += stringLength; /* prepare for first append of pad */
    2c30:	ca 0d       	add	r28, r10
    2c32:	db 1d       	adc	r29, r11
	 *padded = '\0';
    2c34:	18 82       	st	Y, r1

	 padded = (padded - i);
    2c36:	cc 19       	sub	r28, r12
    2c38:	dd 09       	sbc	r29, r13
	 strncpy(string,padded,i);
    2c3a:	a6 01       	movw	r20, r12
    2c3c:	be 01       	movw	r22, r28
    2c3e:	c7 01       	movw	r24, r14
    2c40:	0e 94 36 32 	call	0x646c	; 0x646c <strncpy>
	 
	 return padded;
    2c44:	ce 01       	movw	r24, r28
    2c46:	02 c0       	rjmp	.+4      	; 0x2c4c <padLeft+0x94>
	 size_t lenpad = strlen(pad);
	 u8 i = paddedLength;
	 
	 if (stringLength >= paddedLength)
	 {
		 return NULL;//'\0';
    2c48:	80 e0       	ldi	r24, 0x00	; 0
    2c4a:	90 e0       	ldi	r25, 0x00	; 0

	 padded = (padded - i);
	 strncpy(string,padded,i);
	 
	 return padded;
 }
    2c4c:	df 91       	pop	r29
    2c4e:	cf 91       	pop	r28
    2c50:	1f 91       	pop	r17
    2c52:	0f 91       	pop	r16
    2c54:	ff 90       	pop	r15
    2c56:	ef 90       	pop	r14
    2c58:	df 90       	pop	r13
    2c5a:	cf 90       	pop	r12
    2c5c:	bf 90       	pop	r11
    2c5e:	af 90       	pop	r10
    2c60:	9f 90       	pop	r9
    2c62:	8f 90       	pop	r8
    2c64:	7f 90       	pop	r7
    2c66:	08 95       	ret

00002c68 <SetTimeOut>:
	tmp[13]=255-addr;
	tmp[14]=tmp[12];
	tmp[15]=tmp[13];
	status=Write(addr,tmp);
	return status;
}
    2c68:	1f 93       	push	r17
    2c6a:	cf 93       	push	r28
    2c6c:	df 93       	push	r29
    2c6e:	1f 92       	push	r1
    2c70:	cd b7       	in	r28, 0x3d	; 61
    2c72:	de b7       	in	r29, 0x3e	; 62
    2c74:	64 e6       	ldi	r22, 0x64	; 100
    2c76:	70 e0       	ldi	r23, 0x00	; 0
    2c78:	0e 94 c7 2d 	call	0x5b8e	; 0x5b8e <__udivmodhi4>
    2c7c:	16 2f       	mov	r17, r22
    2c7e:	40 e8       	ldi	r20, 0x80	; 128
    2c80:	61 e0       	ldi	r22, 0x01	; 1
    2c82:	8a e2       	ldi	r24, 0x2A	; 42
    2c84:	79 83       	std	Y+1, r23	; 0x01
    2c86:	0e 94 26 1b 	call	0x364c	; 0x364c <RcModifyReg>
    2c8a:	66 ea       	ldi	r22, 0xA6	; 166
    2c8c:	8b e2       	ldi	r24, 0x2B	; 43
    2c8e:	0e 94 08 1b 	call	0x3610	; 0x3610 <RcSetReg>
    2c92:	8a e2       	ldi	r24, 0x2A	; 42
    2c94:	0e 94 1c 1b 	call	0x3638	; 0x3638 <RcGetReg>
    2c98:	80 7f       	andi	r24, 0xF0	; 240
    2c9a:	68 2f       	mov	r22, r24
    2c9c:	62 60       	ori	r22, 0x02	; 2
    2c9e:	8a e2       	ldi	r24, 0x2A	; 42
    2ca0:	0e 94 08 1b 	call	0x3610	; 0x3610 <RcSetReg>
    2ca4:	61 2f       	mov	r22, r17
    2ca6:	8d e2       	ldi	r24, 0x2D	; 45
    2ca8:	0e 94 08 1b 	call	0x3610	; 0x3610 <RcSetReg>
    2cac:	79 81       	ldd	r23, Y+1	; 0x01
    2cae:	67 2f       	mov	r22, r23
    2cb0:	8c e2       	ldi	r24, 0x2C	; 44
    2cb2:	0e 94 08 1b 	call	0x3610	; 0x3610 <RcSetReg>
    2cb6:	80 e0       	ldi	r24, 0x00	; 0
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	0f 90       	pop	r0
    2cbc:	df 91       	pop	r29
    2cbe:	cf 91       	pop	r28
    2cc0:	1f 91       	pop	r17
    2cc2:	08 95       	ret

00002cc4 <Rc522Init>:
    2cc4:	6f e0       	ldi	r22, 0x0F	; 15
    2cc6:	81 e0       	ldi	r24, 0x01	; 1
    2cc8:	0e 94 08 1b 	call	0x3610	; 0x3610 <RcSetReg>
    2ccc:	60 e4       	ldi	r22, 0x40	; 64
    2cce:	85 e1       	ldi	r24, 0x15	; 21
    2cd0:	0e 94 08 1b 	call	0x3610	; 0x3610 <RcSetReg>
    2cd4:	48 e0       	ldi	r20, 0x08	; 8
    2cd6:	60 e0       	ldi	r22, 0x00	; 0
    2cd8:	88 e0       	ldi	r24, 0x08	; 8
    2cda:	0e 94 26 1b 	call	0x364c	; 0x364c <RcModifyReg>
    2cde:	82 e1       	ldi	r24, 0x12	; 18
    2ce0:	0e 94 1c 1b 	call	0x3638	; 0x3638 <RcGetReg>
    2ce4:	88 70       	andi	r24, 0x08	; 8
    2ce6:	68 2f       	mov	r22, r24
    2ce8:	60 68       	ori	r22, 0x80	; 128
    2cea:	82 e1       	ldi	r24, 0x12	; 18
    2cec:	0e 94 08 1b 	call	0x3610	; 0x3610 <RcSetReg>
    2cf0:	83 e1       	ldi	r24, 0x13	; 19
    2cf2:	0e 94 1c 1b 	call	0x3638	; 0x3638 <RcGetReg>
    2cf6:	88 70       	andi	r24, 0x08	; 8
    2cf8:	68 2f       	mov	r22, r24
    2cfa:	60 68       	ori	r22, 0x80	; 128
    2cfc:	83 e1       	ldi	r24, 0x13	; 19
    2cfe:	0e 94 08 1b 	call	0x3610	; 0x3610 <RcSetReg>
    2d02:	6d e6       	ldi	r22, 0x6D	; 109
    2d04:	89 e1       	ldi	r24, 0x19	; 25
    2d06:	0e 94 08 1b 	call	0x3610	; 0x3610 <RcSetReg>
    2d0a:	68 e4       	ldi	r22, 0x48	; 72
    2d0c:	86 e2       	ldi	r24, 0x26	; 38
    2d0e:	0e 94 08 1b 	call	0x3610	; 0x3610 <RcSetReg>
    2d12:	65 e5       	ldi	r22, 0x55	; 85
    2d14:	88 e1       	ldi	r24, 0x18	; 24
    2d16:	0e 94 08 1b 	call	0x3610	; 0x3610 <RcSetReg>
    2d1a:	66 e2       	ldi	r22, 0x26	; 38
    2d1c:	84 e2       	ldi	r24, 0x24	; 36
    2d1e:	0e 94 08 1b 	call	0x3610	; 0x3610 <RcSetReg>
    2d22:	64 ef       	ldi	r22, 0xF4	; 244
    2d24:	87 e2       	ldi	r24, 0x27	; 39
    2d26:	0e 94 08 1b 	call	0x3610	; 0x3610 <RcSetReg>
    2d2a:	88 e8       	ldi	r24, 0x88	; 136
    2d2c:	93 e1       	ldi	r25, 0x13	; 19
    2d2e:	0e 94 34 16 	call	0x2c68	; 0x2c68 <SetTimeOut>
    2d32:	43 e0       	ldi	r20, 0x03	; 3
    2d34:	61 e0       	ldi	r22, 0x01	; 1
    2d36:	84 e1       	ldi	r24, 0x14	; 20
    2d38:	0e 94 26 1b 	call	0x364c	; 0x364c <RcModifyReg>
    2d3c:	40 e4       	ldi	r20, 0x40	; 64
    2d3e:	61 e0       	ldi	r22, 0x01	; 1
    2d40:	8c e0       	ldi	r24, 0x0C	; 12
    2d42:	0e 94 26 1b 	call	0x364c	; 0x364c <RcModifyReg>
    2d46:	84 e0       	ldi	r24, 0x04	; 4
    2d48:	0e 94 1c 1b 	call	0x3638	; 0x3638 <RcGetReg>
    2d4c:	80 ff       	sbrs	r24, 0
    2d4e:	fb cf       	rjmp	.-10     	; 0x2d46 <Rc522Init+0x82>
    2d50:	61 e0       	ldi	r22, 0x01	; 1
    2d52:	84 e0       	ldi	r24, 0x04	; 4
    2d54:	0e 94 08 1b 	call	0x3610	; 0x3610 <RcSetReg>
    2d58:	88 e8       	ldi	r24, 0x88	; 136
    2d5a:	93 e1       	ldi	r25, 0x13	; 19
    2d5c:	0e 94 34 16 	call	0x2c68	; 0x2c68 <SetTimeOut>
    2d60:	6a e1       	ldi	r22, 0x1A	; 26
    2d62:	8b e0       	ldi	r24, 0x0B	; 11
    2d64:	0e 94 08 1b 	call	0x3610	; 0x3610 <RcSetReg>
    2d68:	60 e1       	ldi	r22, 0x10	; 16
    2d6a:	86 e1       	ldi	r24, 0x16	; 22
    2d6c:	0e 94 08 1b 	call	0x3610	; 0x3610 <RcSetReg>
    2d70:	64 e8       	ldi	r22, 0x84	; 132
    2d72:	87 e1       	ldi	r24, 0x17	; 23
    2d74:	0e 94 08 1b 	call	0x3610	; 0x3610 <RcSetReg>
    2d78:	60 e0       	ldi	r22, 0x00	; 0
    2d7a:	81 e0       	ldi	r24, 0x01	; 1
    2d7c:	0e 94 08 1b 	call	0x3610	; 0x3610 <RcSetReg>
    2d80:	80 ed       	ldi	r24, 0xD0	; 208
    2d82:	97 e0       	ldi	r25, 0x07	; 7
    2d84:	0c 94 34 16 	jmp	0x2c68	; 0x2c68 <SetTimeOut>

00002d88 <M522PcdCmd>:
    2d88:	9f 92       	push	r9
    2d8a:	af 92       	push	r10
    2d8c:	bf 92       	push	r11
    2d8e:	cf 92       	push	r12
    2d90:	df 92       	push	r13
    2d92:	ef 92       	push	r14
    2d94:	ff 92       	push	r15
    2d96:	0f 93       	push	r16
    2d98:	1f 93       	push	r17
    2d9a:	cf 93       	push	r28
    2d9c:	df 93       	push	r29
    2d9e:	18 2f       	mov	r17, r24
    2da0:	7b 01       	movw	r14, r22
    2da2:	ea 01       	movw	r28, r20
    2da4:	62 e4       	ldi	r22, 0x42	; 66
    2da6:	84 e0       	ldi	r24, 0x04	; 4
    2da8:	0e 94 08 1b 	call	0x3610	; 0x3610 <RcSetReg>
    2dac:	60 e0       	ldi	r22, 0x00	; 0
    2dae:	85 e0       	ldi	r24, 0x05	; 5
    2db0:	0e 94 08 1b 	call	0x3610	; 0x3610 <RcSetReg>
    2db4:	60 e8       	ldi	r22, 0x80	; 128
    2db6:	8a e0       	ldi	r24, 0x0A	; 10
    2db8:	0e 94 08 1b 	call	0x3610	; 0x3610 <RcSetReg>
    2dbc:	81 e0       	ldi	r24, 0x01	; 1
    2dbe:	0e 94 1c 1b 	call	0x3638	; 0x3638 <RcGetReg>
    2dc2:	68 2f       	mov	r22, r24
    2dc4:	60 7f       	andi	r22, 0xF0	; 240
    2dc6:	1c 30       	cpi	r17, 0x0C	; 12
    2dc8:	09 f4       	brne	.+2      	; 0x2dcc <M522PcdCmd+0x44>
    2dca:	6c 60       	ori	r22, 0x0C	; 12
    2dcc:	81 e0       	ldi	r24, 0x01	; 1
    2dce:	0e 94 08 1b 	call	0x3610	; 0x3610 <RcSetReg>
    2dd2:	d0 93 32 05 	sts	0x0532, r29	; 0x800532 <MpIsrInfo+0x1>
    2dd6:	c0 93 31 05 	sts	0x0531, r28	; 0x800531 <MpIsrInfo>
    2dda:	10 31       	cpi	r17, 0x10	; 16
    2ddc:	08 f0       	brcs	.+2      	; 0x2de0 <M522PcdCmd+0x58>
    2dde:	63 c0       	rjmp	.+198    	; 0x2ea6 <M522PcdCmd+0x11e>
    2de0:	81 2f       	mov	r24, r17
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	fc 01       	movw	r30, r24
    2de6:	ee 0f       	add	r30, r30
    2de8:	ff 1f       	adc	r31, r31
    2dea:	e6 5f       	subi	r30, 0xF6	; 246
    2dec:	fa 4f       	sbci	r31, 0xFA	; 250
    2dee:	c0 81       	ld	r28, Z
    2df0:	d1 81       	ldd	r29, Z+1	; 0x01
    2df2:	fc 01       	movw	r30, r24
    2df4:	e6 50       	subi	r30, 0x06	; 6
    2df6:	fb 4f       	sbci	r31, 0xFB	; 251
    2df8:	c0 80       	ld	r12, Z
    2dfa:	fc 01       	movw	r30, r24
    2dfc:	e6 51       	subi	r30, 0x16	; 22
    2dfe:	fb 4f       	sbci	r31, 0xFB	; 251
    2e00:	00 81       	ld	r16, Z
    2e02:	fc 01       	movw	r30, r24
    2e04:	e6 52       	subi	r30, 0x26	; 38
    2e06:	fb 4f       	sbci	r31, 0xFB	; 251
    2e08:	90 80       	ld	r9, Z
    2e0a:	20 97       	sbiw	r28, 0x00	; 0
    2e0c:	09 f0       	breq	.+2      	; 0x2e10 <M522PcdCmd+0x88>
    2e0e:	50 c0       	rjmp	.+160    	; 0x2eb0 <M522PcdCmd+0x128>
    2e10:	82 e0       	ldi	r24, 0x02	; 2
    2e12:	0e 94 1c 1b 	call	0x3638	; 0x3638 <RcGetReg>
    2e16:	68 2f       	mov	r22, r24
    2e18:	6c 29       	or	r22, r12
    2e1a:	82 e0       	ldi	r24, 0x02	; 2
    2e1c:	0e 94 08 1b 	call	0x3610	; 0x3610 <RcSetReg>
    2e20:	83 e0       	ldi	r24, 0x03	; 3
    2e22:	0e 94 1c 1b 	call	0x3638	; 0x3638 <RcGetReg>
    2e26:	68 2f       	mov	r22, r24
    2e28:	83 e0       	ldi	r24, 0x03	; 3
    2e2a:	0e 94 08 1b 	call	0x3610	; 0x3610 <RcSetReg>
    2e2e:	d1 2c       	mov	r13, r1
    2e30:	e0 91 31 05 	lds	r30, 0x0531	; 0x800531 <MpIsrInfo>
    2e34:	f0 91 32 05 	lds	r31, 0x0532	; 0x800532 <MpIsrInfo+0x1>
    2e38:	83 81       	ldd	r24, Z+3	; 0x03
    2e3a:	d8 16       	cp	r13, r24
    2e3c:	48 f4       	brcc	.+18     	; 0x2e50 <M522PcdCmd+0xc8>
    2e3e:	f7 01       	movw	r30, r14
    2e40:	ed 0d       	add	r30, r13
    2e42:	f1 1d       	adc	r31, r1
    2e44:	60 81       	ld	r22, Z
    2e46:	89 e0       	ldi	r24, 0x09	; 9
    2e48:	0e 94 08 1b 	call	0x3610	; 0x3610 <RcSetReg>
    2e4c:	d3 94       	inc	r13
    2e4e:	f0 cf       	rjmp	.-32     	; 0x2e30 <M522PcdCmd+0xa8>
    2e50:	1c 30       	cpi	r17, 0x0C	; 12
    2e52:	31 f4       	brne	.+12     	; 0x2e60 <M522PcdCmd+0xd8>
    2e54:	40 e8       	ldi	r20, 0x80	; 128
    2e56:	61 e0       	ldi	r22, 0x01	; 1
    2e58:	8d e0       	ldi	r24, 0x0D	; 13
    2e5a:	0e 94 26 1b 	call	0x364c	; 0x364c <RcModifyReg>
    2e5e:	09 c0       	rjmp	.+18     	; 0x2e72 <M522PcdCmd+0xea>
    2e60:	81 e0       	ldi	r24, 0x01	; 1
    2e62:	0e 94 1c 1b 	call	0x3638	; 0x3638 <RcGetReg>
    2e66:	80 7f       	andi	r24, 0xF0	; 240
    2e68:	68 2f       	mov	r22, r24
    2e6a:	61 2b       	or	r22, r17
    2e6c:	81 e0       	ldi	r24, 0x01	; 1
    2e6e:	0e 94 08 1b 	call	0x3610	; 0x3610 <RcSetReg>
    2e72:	aa 24       	eor	r10, r10
    2e74:	a3 94       	inc	r10
    2e76:	ba 2c       	mov	r11, r10
    2e78:	10 e0       	ldi	r17, 0x00	; 0
    2e7a:	00 23       	and	r16, r16
    2e7c:	71 f0       	breq	.+28     	; 0x2e9a <M522PcdCmd+0x112>
    2e7e:	81 2f       	mov	r24, r17
    2e80:	80 23       	and	r24, r16
    2e82:	59 f4       	brne	.+22     	; 0x2e9a <M522PcdCmd+0x112>
    2e84:	84 e0       	ldi	r24, 0x04	; 4
    2e86:	0e 94 1c 1b 	call	0x3638	; 0x3638 <RcGetReg>
    2e8a:	18 2f       	mov	r17, r24
    2e8c:	85 e0       	ldi	r24, 0x05	; 5
    2e8e:	0e 94 1c 1b 	call	0x3638	; 0x3638 <RcGetReg>
    2e92:	81 e0       	ldi	r24, 0x01	; 1
    2e94:	a8 1a       	sub	r10, r24
    2e96:	b1 08       	sbc	r11, r1
    2e98:	81 f7       	brne	.-32     	; 0x2e7a <M522PcdCmd+0xf2>
    2e9a:	01 23       	and	r16, r17
    2e9c:	11 70       	andi	r17, 0x01	; 1
    2e9e:	c1 2f       	mov	r28, r17
    2ea0:	e0 e0       	ldi	r30, 0x00	; 0
    2ea2:	de 2f       	mov	r29, r30
    2ea4:	05 c0       	rjmp	.+10     	; 0x2eb0 <M522PcdCmd+0x128>
    2ea6:	91 2c       	mov	r9, r1
    2ea8:	c1 2c       	mov	r12, r1
    2eaa:	02 e4       	ldi	r16, 0x42	; 66
    2eac:	c3 e0       	ldi	r28, 0x03	; 3
    2eae:	d1 e0       	ldi	r29, 0x01	; 1
    2eb0:	4c 2d       	mov	r20, r12
    2eb2:	60 e0       	ldi	r22, 0x00	; 0
    2eb4:	82 e0       	ldi	r24, 0x02	; 2
    2eb6:	0e 94 26 1b 	call	0x364c	; 0x364c <RcModifyReg>
    2eba:	40 e0       	ldi	r20, 0x00	; 0
    2ebc:	60 e0       	ldi	r22, 0x00	; 0
    2ebe:	83 e0       	ldi	r24, 0x03	; 3
    2ec0:	0e 94 26 1b 	call	0x364c	; 0x364c <RcModifyReg>
    2ec4:	99 20       	and	r9, r9
    2ec6:	09 f4       	brne	.+2      	; 0x2eca <M522PcdCmd+0x142>
    2ec8:	7e c0       	rjmp	.+252    	; 0x2fc6 <M522PcdCmd+0x23e>
    2eca:	20 97       	sbiw	r28, 0x00	; 0
    2ecc:	09 f0       	breq	.+2      	; 0x2ed0 <M522PcdCmd+0x148>
    2ece:	7b c0       	rjmp	.+246    	; 0x2fc6 <M522PcdCmd+0x23e>
    2ed0:	c0 90 31 05 	lds	r12, 0x0531	; 0x800531 <MpIsrInfo>
    2ed4:	d0 90 32 05 	lds	r13, 0x0532	; 0x800532 <MpIsrInfo+0x1>
    2ed8:	8a e0       	ldi	r24, 0x0A	; 10
    2eda:	0e 94 1c 1b 	call	0x3638	; 0x3638 <RcGetReg>
    2ede:	f6 01       	movw	r30, r12
    2ee0:	84 83       	std	Z+4, r24	; 0x04
    2ee2:	8c e0       	ldi	r24, 0x0C	; 12
    2ee4:	0e 94 1c 1b 	call	0x3638	; 0x3638 <RcGetReg>
    2ee8:	e0 91 31 05 	lds	r30, 0x0531	; 0x800531 <MpIsrInfo>
    2eec:	f0 91 32 05 	lds	r31, 0x0532	; 0x800532 <MpIsrInfo+0x1>
    2ef0:	87 70       	andi	r24, 0x07	; 7
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	96 83       	std	Z+6, r25	; 0x06
    2ef6:	85 83       	std	Z+5, r24	; 0x05
    2ef8:	86 e0       	ldi	r24, 0x06	; 6
    2efa:	0e 94 1c 1b 	call	0x3638	; 0x3638 <RcGetReg>
    2efe:	18 2f       	mov	r17, r24
    2f00:	88 23       	and	r24, r24
    2f02:	09 f4       	brne	.+2      	; 0x2f06 <M522PcdCmd+0x17e>
    2f04:	46 c0       	rjmp	.+140    	; 0x2f92 <M522PcdCmd+0x20a>
    2f06:	83 fd       	sbrc	r24, 3
    2f08:	05 c0       	rjmp	.+10     	; 0x2f14 <M522PcdCmd+0x18c>
    2f0a:	81 ff       	sbrs	r24, 1
    2f0c:	05 c0       	rjmp	.+10     	; 0x2f18 <M522PcdCmd+0x190>
    2f0e:	c3 e0       	ldi	r28, 0x03	; 3
    2f10:	d0 e0       	ldi	r29, 0x00	; 0
    2f12:	02 c0       	rjmp	.+4      	; 0x2f18 <M522PcdCmd+0x190>
    2f14:	c6 e0       	ldi	r28, 0x06	; 6
    2f16:	d0 e0       	ldi	r29, 0x00	; 0
    2f18:	10 fd       	sbrc	r17, 0
    2f1a:	22 c0       	rjmp	.+68     	; 0x2f60 <M522PcdCmd+0x1d8>
    2f1c:	14 fd       	sbrc	r17, 4
    2f1e:	23 c0       	rjmp	.+70     	; 0x2f66 <M522PcdCmd+0x1de>
    2f20:	12 ff       	sbrs	r17, 2
    2f22:	19 c0       	rjmp	.+50     	; 0x2f56 <M522PcdCmd+0x1ce>
    2f24:	e0 91 31 05 	lds	r30, 0x0531	; 0x800531 <MpIsrInfo>
    2f28:	f0 91 32 05 	lds	r31, 0x0532	; 0x800532 <MpIsrInfo+0x1>
    2f2c:	c4 81       	ldd	r28, Z+4	; 0x04
    2f2e:	c1 30       	cpi	r28, 0x01	; 1
    2f30:	e9 f4       	brne	.+58     	; 0x2f6c <M522PcdCmd+0x1e4>
    2f32:	85 81       	ldd	r24, Z+5	; 0x05
    2f34:	96 81       	ldd	r25, Z+6	; 0x06
    2f36:	8b 7f       	andi	r24, 0xFB	; 251
    2f38:	89 2b       	or	r24, r25
    2f3a:	c1 f4       	brne	.+48     	; 0x2f6c <M522PcdCmd+0x1e4>
    2f3c:	89 e0       	ldi	r24, 0x09	; 9
    2f3e:	0e 94 1c 1b 	call	0x3638	; 0x3638 <RcGetReg>
    2f42:	f7 01       	movw	r30, r14
    2f44:	80 83       	st	Z, r24
    2f46:	e0 91 31 05 	lds	r30, 0x0531	; 0x800531 <MpIsrInfo>
    2f4a:	f0 91 32 05 	lds	r31, 0x0532	; 0x800532 <MpIsrInfo+0x1>
    2f4e:	c4 83       	std	Z+4, r28	; 0x04
    2f50:	c2 e0       	ldi	r28, 0x02	; 2
    2f52:	d2 e0       	ldi	r29, 0x02	; 2
    2f54:	0d c0       	rjmp	.+26     	; 0x2f70 <M522PcdCmd+0x1e8>
    2f56:	16 ff       	sbrs	r17, 6
    2f58:	0b c0       	rjmp	.+22     	; 0x2f70 <M522PcdCmd+0x1e8>
    2f5a:	c4 e0       	ldi	r28, 0x04	; 4
    2f5c:	de e7       	ldi	r29, 0x7E	; 126
    2f5e:	08 c0       	rjmp	.+16     	; 0x2f70 <M522PcdCmd+0x1e8>
    2f60:	cb e0       	ldi	r28, 0x0B	; 11
    2f62:	d0 e0       	ldi	r29, 0x00	; 0
    2f64:	05 c0       	rjmp	.+10     	; 0x2f70 <M522PcdCmd+0x1e8>
    2f66:	c9 e0       	ldi	r28, 0x09	; 9
    2f68:	d0 e0       	ldi	r29, 0x00	; 0
    2f6a:	02 c0       	rjmp	.+4      	; 0x2f70 <M522PcdCmd+0x1e8>
    2f6c:	c2 e0       	ldi	r28, 0x02	; 2
    2f6e:	d0 e0       	ldi	r29, 0x00	; 0
    2f70:	17 fd       	sbrc	r17, 7
    2f72:	05 c0       	rjmp	.+10     	; 0x2f7e <M522PcdCmd+0x1f6>
    2f74:	20 97       	sbiw	r28, 0x00	; 0
    2f76:	29 f4       	brne	.+10     	; 0x2f82 <M522PcdCmd+0x1fa>
    2f78:	cc e0       	ldi	r28, 0x0C	; 12
    2f7a:	d0 e0       	ldi	r29, 0x00	; 0
    2f7c:	02 c0       	rjmp	.+4      	; 0x2f82 <M522PcdCmd+0x1fa>
    2f7e:	cd e0       	ldi	r28, 0x0D	; 13
    2f80:	d0 e0       	ldi	r29, 0x00	; 0
    2f82:	60 e0       	ldi	r22, 0x00	; 0
    2f84:	86 e0       	ldi	r24, 0x06	; 6
    2f86:	0e 94 08 1b 	call	0x3610	; 0x3610 <RcSetReg>
    2f8a:	c2 30       	cpi	r28, 0x02	; 2
    2f8c:	f2 e0       	ldi	r31, 0x02	; 2
    2f8e:	df 07       	cpc	r29, r31
    2f90:	d1 f0       	breq	.+52     	; 0x2fc6 <M522PcdCmd+0x23e>
    2f92:	10 e0       	ldi	r17, 0x00	; 0
    2f94:	e0 91 31 05 	lds	r30, 0x0531	; 0x800531 <MpIsrInfo>
    2f98:	f0 91 32 05 	lds	r31, 0x0532	; 0x800532 <MpIsrInfo+0x1>
    2f9c:	84 81       	ldd	r24, Z+4	; 0x04
    2f9e:	18 17       	cp	r17, r24
    2fa0:	50 f4       	brcc	.+20     	; 0x2fb6 <M522PcdCmd+0x22e>
    2fa2:	67 01       	movw	r12, r14
    2fa4:	c1 0e       	add	r12, r17
    2fa6:	d1 1c       	adc	r13, r1
    2fa8:	89 e0       	ldi	r24, 0x09	; 9
    2faa:	0e 94 1c 1b 	call	0x3638	; 0x3638 <RcGetReg>
    2fae:	f6 01       	movw	r30, r12
    2fb0:	80 83       	st	Z, r24
    2fb2:	1f 5f       	subi	r17, 0xFF	; 255
    2fb4:	ef cf       	rjmp	.-34     	; 0x2f94 <M522PcdCmd+0x20c>
    2fb6:	25 81       	ldd	r18, Z+5	; 0x05
    2fb8:	36 81       	ldd	r19, Z+6	; 0x06
    2fba:	23 2b       	or	r18, r19
    2fbc:	21 f0       	breq	.+8      	; 0x2fc6 <M522PcdCmd+0x23e>
    2fbe:	88 23       	and	r24, r24
    2fc0:	11 f0       	breq	.+4      	; 0x2fc6 <M522PcdCmd+0x23e>
    2fc2:	81 50       	subi	r24, 0x01	; 1
    2fc4:	84 83       	std	Z+4, r24	; 0x04
    2fc6:	60 2f       	mov	r22, r16
    2fc8:	84 e0       	ldi	r24, 0x04	; 4
    2fca:	0e 94 08 1b 	call	0x3610	; 0x3610 <RcSetReg>
    2fce:	60 e0       	ldi	r22, 0x00	; 0
    2fd0:	85 e0       	ldi	r24, 0x05	; 5
    2fd2:	0e 94 08 1b 	call	0x3610	; 0x3610 <RcSetReg>
    2fd6:	60 e8       	ldi	r22, 0x80	; 128
    2fd8:	8a e0       	ldi	r24, 0x0A	; 10
    2fda:	0e 94 08 1b 	call	0x3610	; 0x3610 <RcSetReg>
    2fde:	61 e0       	ldi	r22, 0x01	; 1
    2fe0:	84 e0       	ldi	r24, 0x04	; 4
    2fe2:	0e 94 08 1b 	call	0x3610	; 0x3610 <RcSetReg>
    2fe6:	60 e0       	ldi	r22, 0x00	; 0
    2fe8:	8d e0       	ldi	r24, 0x0D	; 13
    2fea:	0e 94 08 1b 	call	0x3610	; 0x3610 <RcSetReg>
    2fee:	ce 01       	movw	r24, r28
    2ff0:	df 91       	pop	r29
    2ff2:	cf 91       	pop	r28
    2ff4:	1f 91       	pop	r17
    2ff6:	0f 91       	pop	r16
    2ff8:	ff 90       	pop	r15
    2ffa:	ef 90       	pop	r14
    2ffc:	df 90       	pop	r13
    2ffe:	cf 90       	pop	r12
    3000:	bf 90       	pop	r11
    3002:	af 90       	pop	r10
    3004:	9f 90       	pop	r9
    3006:	08 95       	ret

00003008 <Request>:
    3008:	1f 93       	push	r17
    300a:	cf 93       	push	r28
    300c:	df 93       	push	r29
    300e:	18 2f       	mov	r17, r24
    3010:	eb 01       	movw	r28, r22
    3012:	48 e0       	ldi	r20, 0x08	; 8
    3014:	60 e0       	ldi	r22, 0x00	; 0
    3016:	88 e0       	ldi	r24, 0x08	; 8
    3018:	0e 94 26 1b 	call	0x364c	; 0x364c <RcModifyReg>
    301c:	60 e8       	ldi	r22, 0x80	; 128
    301e:	8e e0       	ldi	r24, 0x0E	; 14
    3020:	0e 94 08 1b 	call	0x3610	; 0x3610 <RcSetReg>
    3024:	40 e8       	ldi	r20, 0x80	; 128
    3026:	60 e0       	ldi	r22, 0x00	; 0
    3028:	82 e1       	ldi	r24, 0x12	; 18
    302a:	0e 94 26 1b 	call	0x364c	; 0x364c <RcModifyReg>
    302e:	40 e8       	ldi	r20, 0x80	; 128
    3030:	60 e0       	ldi	r22, 0x00	; 0
    3032:	83 e1       	ldi	r24, 0x13	; 19
    3034:	0e 94 26 1b 	call	0x364c	; 0x364c <RcModifyReg>
    3038:	67 e0       	ldi	r22, 0x07	; 7
    303a:	8d e0       	ldi	r24, 0x0D	; 13
    303c:	0e 94 08 1b 	call	0x3610	; 0x3610 <RcSetReg>
    3040:	10 92 30 0b 	sts	0x0B30, r1	; 0x800b30 <MInfo>
    3044:	10 92 31 0b 	sts	0x0B31, r1	; 0x800b31 <MInfo+0x1>
    3048:	10 92 32 0b 	sts	0x0B32, r1	; 0x800b32 <MInfo+0x2>
    304c:	10 92 34 0b 	sts	0x0B34, r1	; 0x800b34 <MInfo+0x4>
    3050:	10 92 36 0b 	sts	0x0B36, r1	; 0x800b36 <MInfo+0x6>
    3054:	10 92 35 0b 	sts	0x0B35, r1	; 0x800b35 <MInfo+0x5>
    3058:	10 92 37 0b 	sts	0x0B37, r1	; 0x800b37 <MInfo+0x7>
    305c:	10 93 1c 0b 	sts	0x0B1C, r17	; 0x800b1c <SerBuffer>
    3060:	81 e0       	ldi	r24, 0x01	; 1
    3062:	80 93 33 0b 	sts	0x0B33, r24	; 0x800b33 <MInfo+0x3>
    3066:	80 e9       	ldi	r24, 0x90	; 144
    3068:	91 e0       	ldi	r25, 0x01	; 1
    306a:	0e 94 34 16 	call	0x2c68	; 0x2c68 <SetTimeOut>
    306e:	40 e3       	ldi	r20, 0x30	; 48
    3070:	5b e0       	ldi	r21, 0x0B	; 11
    3072:	6c e1       	ldi	r22, 0x1C	; 28
    3074:	7b e0       	ldi	r23, 0x0B	; 11
    3076:	8c e0       	ldi	r24, 0x0C	; 12
    3078:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <M522PcdCmd>
    307c:	88 23       	and	r24, r24
    307e:	11 f0       	breq	.+4      	; 0x3084 <Request+0x7c>
    3080:	86 30       	cpi	r24, 0x06	; 6
    3082:	89 f4       	brne	.+34     	; 0x30a6 <Request+0x9e>
    3084:	90 91 34 0b 	lds	r25, 0x0B34	; 0x800b34 <MInfo+0x4>
    3088:	92 30       	cpi	r25, 0x02	; 2
    308a:	81 f4       	brne	.+32     	; 0x30ac <Request+0xa4>
    308c:	20 91 35 0b 	lds	r18, 0x0B35	; 0x800b35 <MInfo+0x5>
    3090:	30 91 36 0b 	lds	r19, 0x0B36	; 0x800b36 <MInfo+0x6>
    3094:	23 2b       	or	r18, r19
    3096:	51 f4       	brne	.+20     	; 0x30ac <Request+0xa4>
    3098:	20 91 1c 0b 	lds	r18, 0x0B1C	; 0x800b1c <SerBuffer>
    309c:	30 91 1d 0b 	lds	r19, 0x0B1D	; 0x800b1d <SerBuffer+0x1>
    30a0:	39 83       	std	Y+1, r19	; 0x01
    30a2:	28 83       	st	Y, r18
    30a4:	04 c0       	rjmp	.+8      	; 0x30ae <Request+0xa6>
    30a6:	18 82       	st	Y, r1
    30a8:	19 82       	std	Y+1, r1	; 0x01
    30aa:	01 c0       	rjmp	.+2      	; 0x30ae <Request+0xa6>
    30ac:	8b e0       	ldi	r24, 0x0B	; 11
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	df 91       	pop	r29
    30b2:	cf 91       	pop	r28
    30b4:	1f 91       	pop	r17
    30b6:	08 95       	ret

000030b8 <CascAnticoll>:
    30b8:	6f 92       	push	r6
    30ba:	7f 92       	push	r7
    30bc:	9f 92       	push	r9
    30be:	af 92       	push	r10
    30c0:	bf 92       	push	r11
    30c2:	cf 92       	push	r12
    30c4:	df 92       	push	r13
    30c6:	ef 92       	push	r14
    30c8:	ff 92       	push	r15
    30ca:	0f 93       	push	r16
    30cc:	1f 93       	push	r17
    30ce:	cf 93       	push	r28
    30d0:	df 93       	push	r29
    30d2:	1f 92       	push	r1
    30d4:	cd b7       	in	r28, 0x3d	; 61
    30d6:	de b7       	in	r29, 0x3e	; 62
    30d8:	e8 2e       	mov	r14, r24
    30da:	f6 2e       	mov	r15, r22
    30dc:	3a 01       	movw	r6, r20
    30de:	10 92 1e 0b 	sts	0x0B1E, r1	; 0x800b1e <SerBuffer+0x2>
    30e2:	10 92 1f 0b 	sts	0x0B1F, r1	; 0x800b1f <SerBuffer+0x3>
    30e6:	10 92 20 0b 	sts	0x0B20, r1	; 0x800b20 <SerBuffer+0x4>
    30ea:	10 92 21 0b 	sts	0x0B21, r1	; 0x800b21 <SerBuffer+0x5>
    30ee:	10 92 22 0b 	sts	0x0B22, r1	; 0x800b22 <SerBuffer+0x6>
    30f2:	40 e8       	ldi	r20, 0x80	; 128
    30f4:	60 e0       	ldi	r22, 0x00	; 0
    30f6:	82 e1       	ldi	r24, 0x12	; 18
    30f8:	0e 94 26 1b 	call	0x364c	; 0x364c <RcModifyReg>
    30fc:	40 e8       	ldi	r20, 0x80	; 128
    30fe:	60 e0       	ldi	r22, 0x00	; 0
    3100:	83 e1       	ldi	r24, 0x13	; 19
    3102:	0e 94 26 1b 	call	0x364c	; 0x364c <RcModifyReg>
    3106:	60 e0       	ldi	r22, 0x00	; 0
    3108:	8e e0       	ldi	r24, 0x0E	; 14
    310a:	0e 94 08 1b 	call	0x3610	; 0x3610 <RcSetReg>
    310e:	b6 2c       	mov	r11, r6
    3110:	84 e0       	ldi	r24, 0x04	; 4
    3112:	c8 2e       	mov	r12, r24
    3114:	d1 2c       	mov	r13, r1
    3116:	30 e2       	ldi	r19, 0x20	; 32
    3118:	3f 15       	cp	r19, r15
    311a:	08 f4       	brcc	.+2      	; 0x311e <CascAnticoll+0x66>
    311c:	a9 c0       	rjmp	.+338    	; 0x3270 <CascAnticoll+0x1b8>
    311e:	2f 2d       	mov	r18, r15
    3120:	27 70       	andi	r18, 0x07	; 7
    3122:	9f 2d       	mov	r25, r15
    3124:	96 95       	lsr	r25
    3126:	96 95       	lsr	r25
    3128:	96 95       	lsr	r25
    312a:	22 23       	and	r18, r18
    312c:	21 f0       	breq	.+8      	; 0x3136 <CascAnticoll+0x7e>
    312e:	aa 24       	eor	r10, r10
    3130:	a3 94       	inc	r10
    3132:	a9 0e       	add	r10, r25
    3134:	01 c0       	rjmp	.+2      	; 0x3138 <CascAnticoll+0x80>
    3136:	a9 2e       	mov	r10, r25
    3138:	e0 92 1c 0b 	sts	0x0B1C, r14	; 0x800b1c <SerBuffer>
    313c:	80 e2       	ldi	r24, 0x20	; 32
    313e:	82 0f       	add	r24, r18
    3140:	e0 e1       	ldi	r30, 0x10	; 16
    3142:	9e 9f       	mul	r25, r30
    3144:	80 0d       	add	r24, r0
    3146:	11 24       	eor	r1, r1
    3148:	80 93 1d 0b 	sts	0x0B1D, r24	; 0x800b1d <SerBuffer+0x1>
    314c:	ae e1       	ldi	r26, 0x1E	; 30
    314e:	bb e0       	ldi	r27, 0x0B	; 11
    3150:	f3 01       	movw	r30, r6
    3152:	8e 2f       	mov	r24, r30
    3154:	8b 19       	sub	r24, r11
    3156:	8a 15       	cp	r24, r10
    3158:	18 f4       	brcc	.+6      	; 0x3160 <CascAnticoll+0xa8>
    315a:	81 91       	ld	r24, Z+
    315c:	8d 93       	st	X+, r24
    315e:	f9 cf       	rjmp	.-14     	; 0x3152 <CascAnticoll+0x9a>
    3160:	f0 e1       	ldi	r31, 0x10	; 16
    3162:	2f 9f       	mul	r18, r31
    3164:	b0 01       	movw	r22, r0
    3166:	11 24       	eor	r1, r1
    3168:	62 2b       	or	r22, r18
    316a:	8d e0       	ldi	r24, 0x0D	; 13
    316c:	29 83       	std	Y+1, r18	; 0x01
    316e:	0e 94 08 1b 	call	0x3610	; 0x3610 <RcSetReg>
    3172:	10 92 30 0b 	sts	0x0B30, r1	; 0x800b30 <MInfo>
    3176:	10 92 31 0b 	sts	0x0B31, r1	; 0x800b31 <MInfo+0x1>
    317a:	10 92 32 0b 	sts	0x0B32, r1	; 0x800b32 <MInfo+0x2>
    317e:	10 92 34 0b 	sts	0x0B34, r1	; 0x800b34 <MInfo+0x4>
    3182:	10 92 36 0b 	sts	0x0B36, r1	; 0x800b36 <MInfo+0x6>
    3186:	10 92 35 0b 	sts	0x0B35, r1	; 0x800b35 <MInfo+0x5>
    318a:	10 92 37 0b 	sts	0x0B37, r1	; 0x800b37 <MInfo+0x7>
    318e:	82 e0       	ldi	r24, 0x02	; 2
    3190:	8a 0d       	add	r24, r10
    3192:	80 93 33 0b 	sts	0x0B33, r24	; 0x800b33 <MInfo+0x3>
    3196:	80 e1       	ldi	r24, 0x10	; 16
    3198:	97 e2       	ldi	r25, 0x27	; 39
    319a:	0e 94 34 16 	call	0x2c68	; 0x2c68 <SetTimeOut>
    319e:	40 e3       	ldi	r20, 0x30	; 48
    31a0:	5b e0       	ldi	r21, 0x0B	; 11
    31a2:	6c e1       	ldi	r22, 0x1C	; 28
    31a4:	7b e0       	ldi	r23, 0x0B	; 11
    31a6:	8c e0       	ldi	r24, 0x0C	; 12
    31a8:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <M522PcdCmd>
    31ac:	8c 01       	movw	r16, r24
    31ae:	29 81       	ldd	r18, Y+1	; 0x01
    31b0:	86 30       	cpi	r24, 0x06	; 6
    31b2:	91 05       	cpc	r25, r1
    31b4:	19 f0       	breq	.+6      	; 0x31bc <CascAnticoll+0x104>
    31b6:	89 2b       	or	r24, r25
    31b8:	09 f0       	breq	.+2      	; 0x31bc <CascAnticoll+0x104>
    31ba:	5f c0       	rjmp	.+190    	; 0x327a <CascAnticoll+0x1c2>
    31bc:	60 91 35 0b 	lds	r22, 0x0B35	; 0x800b35 <MInfo+0x5>
    31c0:	70 91 36 0b 	lds	r23, 0x0B36	; 0x800b36 <MInfo+0x6>
    31c4:	80 91 34 0b 	lds	r24, 0x0B34	; 0x800b34 <MInfo+0x4>
    31c8:	a6 2f       	mov	r26, r22
    31ca:	38 e0       	ldi	r19, 0x08	; 8
    31cc:	83 9f       	mul	r24, r19
    31ce:	a0 0d       	add	r26, r0
    31d0:	11 24       	eor	r1, r1
    31d2:	a2 1b       	sub	r26, r18
    31d4:	4f 2d       	mov	r20, r15
    31d6:	50 e0       	ldi	r21, 0x00	; 0
    31d8:	4a 0f       	add	r20, r26
    31da:	51 1d       	adc	r21, r1
    31dc:	49 32       	cpi	r20, 0x29	; 41
    31de:	51 05       	cpc	r21, r1
    31e0:	0c f0       	brlt	.+2      	; 0x31e4 <CascAnticoll+0x12c>
    31e2:	49 c0       	rjmp	.+146    	; 0x3276 <CascAnticoll+0x1be>
    31e4:	67 2b       	or	r22, r23
    31e6:	19 f0       	breq	.+6      	; 0x31ee <CascAnticoll+0x136>
    31e8:	8f 5f       	subi	r24, 0xFF	; 255
    31ea:	80 93 34 0b 	sts	0x0B34, r24	; 0x800b34 <MInfo+0x4>
    31ee:	4a 2d       	mov	r20, r10
    31f0:	50 e0       	ldi	r21, 0x00	; 0
    31f2:	22 23       	and	r18, r18
    31f4:	59 f0       	breq	.+22     	; 0x320c <CascAnticoll+0x154>
    31f6:	fa 01       	movw	r30, r20
    31f8:	31 97       	sbiw	r30, 0x01	; 1
    31fa:	e6 0d       	add	r30, r6
    31fc:	f7 1d       	adc	r31, r7
    31fe:	90 81       	ld	r25, Z
    3200:	80 91 1c 0b 	lds	r24, 0x0B1C	; 0x800b1c <SerBuffer>
    3204:	89 2b       	or	r24, r25
    3206:	80 83       	st	Z, r24
    3208:	b1 e0       	ldi	r27, 0x01	; 1
    320a:	01 c0       	rjmp	.+2      	; 0x320e <CascAnticoll+0x156>
    320c:	b0 e0       	ldi	r27, 0x00	; 0
    320e:	a1 2c       	mov	r10, r1
    3210:	c6 01       	movw	r24, r12
    3212:	84 1b       	sub	r24, r20
    3214:	95 0b       	sbc	r25, r21
    3216:	6b 2f       	mov	r22, r27
    3218:	70 e0       	ldi	r23, 0x00	; 0
    321a:	2a 2d       	mov	r18, r10
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	28 17       	cp	r18, r24
    3220:	39 07       	cpc	r19, r25
    3222:	74 f4       	brge	.+28     	; 0x3240 <CascAnticoll+0x188>
    3224:	f9 01       	movw	r30, r18
    3226:	e4 5e       	subi	r30, 0xE4	; 228
    3228:	f4 4f       	sbci	r31, 0xF4	; 244
    322a:	e6 0f       	add	r30, r22
    322c:	f7 1f       	adc	r31, r23
    322e:	90 80       	ld	r9, Z
    3230:	26 0d       	add	r18, r6
    3232:	37 1d       	adc	r19, r7
    3234:	f9 01       	movw	r30, r18
    3236:	e4 0f       	add	r30, r20
    3238:	f5 1f       	adc	r31, r21
    323a:	90 82       	st	Z, r9
    323c:	a3 94       	inc	r10
    323e:	ed cf       	rjmp	.-38     	; 0x321a <CascAnticoll+0x162>
    3240:	06 30       	cpi	r16, 0x06	; 6
    3242:	11 05       	cpc	r17, r1
    3244:	11 f4       	brne	.+4      	; 0x324a <CascAnticoll+0x192>
    3246:	fa 0e       	add	r15, r26
    3248:	66 cf       	rjmp	.-308    	; 0x3116 <CascAnticoll+0x5e>
    324a:	f3 01       	movw	r30, r6
    324c:	91 81       	ldd	r25, Z+1	; 0x01
    324e:	80 81       	ld	r24, Z
    3250:	89 27       	eor	r24, r25
    3252:	92 81       	ldd	r25, Z+2	; 0x02
    3254:	89 27       	eor	r24, r25
    3256:	93 81       	ldd	r25, Z+3	; 0x03
    3258:	89 27       	eor	r24, r25
    325a:	24 5e       	subi	r18, 0xE4	; 228
    325c:	34 4f       	sbci	r19, 0xF4	; 244
    325e:	f9 01       	movw	r30, r18
    3260:	eb 0f       	add	r30, r27
    3262:	f1 1d       	adc	r31, r1
    3264:	90 81       	ld	r25, Z
    3266:	89 17       	cp	r24, r25
    3268:	41 f0       	breq	.+16     	; 0x327a <CascAnticoll+0x1c2>
    326a:	01 e0       	ldi	r16, 0x01	; 1
    326c:	15 e0       	ldi	r17, 0x05	; 5
    326e:	05 c0       	rjmp	.+10     	; 0x327a <CascAnticoll+0x1c2>
    3270:	01 e0       	ldi	r16, 0x01	; 1
    3272:	11 e0       	ldi	r17, 0x01	; 1
    3274:	02 c0       	rjmp	.+4      	; 0x327a <CascAnticoll+0x1c2>
    3276:	04 e0       	ldi	r16, 0x04	; 4
    3278:	10 e0       	ldi	r17, 0x00	; 0
    327a:	60 e0       	ldi	r22, 0x00	; 0
    327c:	8d e0       	ldi	r24, 0x0D	; 13
    327e:	0e 94 08 1b 	call	0x3610	; 0x3610 <RcSetReg>
    3282:	60 e8       	ldi	r22, 0x80	; 128
    3284:	8e e0       	ldi	r24, 0x0E	; 14
    3286:	0e 94 08 1b 	call	0x3610	; 0x3610 <RcSetReg>
    328a:	c8 01       	movw	r24, r16
    328c:	0f 90       	pop	r0
    328e:	df 91       	pop	r29
    3290:	cf 91       	pop	r28
    3292:	1f 91       	pop	r17
    3294:	0f 91       	pop	r16
    3296:	ff 90       	pop	r15
    3298:	ef 90       	pop	r14
    329a:	df 90       	pop	r13
    329c:	cf 90       	pop	r12
    329e:	bf 90       	pop	r11
    32a0:	af 90       	pop	r10
    32a2:	9f 90       	pop	r9
    32a4:	7f 90       	pop	r7
    32a6:	6f 90       	pop	r6
    32a8:	08 95       	ret

000032aa <Select>:
    32aa:	ff 92       	push	r15
    32ac:	0f 93       	push	r16
    32ae:	1f 93       	push	r17
    32b0:	cf 93       	push	r28
    32b2:	df 93       	push	r29
    32b4:	f8 2e       	mov	r15, r24
    32b6:	eb 01       	movw	r28, r22
    32b8:	8a 01       	movw	r16, r20
    32ba:	40 e8       	ldi	r20, 0x80	; 128
    32bc:	61 e0       	ldi	r22, 0x01	; 1
    32be:	82 e1       	ldi	r24, 0x12	; 18
    32c0:	0e 94 26 1b 	call	0x364c	; 0x364c <RcModifyReg>
    32c4:	40 e8       	ldi	r20, 0x80	; 128
    32c6:	61 e0       	ldi	r22, 0x01	; 1
    32c8:	83 e1       	ldi	r24, 0x13	; 19
    32ca:	0e 94 26 1b 	call	0x364c	; 0x364c <RcModifyReg>
    32ce:	f0 92 1c 0b 	sts	0x0B1C, r15	; 0x800b1c <SerBuffer>
    32d2:	80 e7       	ldi	r24, 0x70	; 112
    32d4:	80 93 1d 0b 	sts	0x0B1D, r24	; 0x800b1d <SerBuffer+0x1>
    32d8:	fe 01       	movw	r30, r28
    32da:	ae e1       	ldi	r26, 0x1E	; 30
    32dc:	bb e0       	ldi	r27, 0x0B	; 11
    32de:	ce 01       	movw	r24, r28
    32e0:	04 96       	adiw	r24, 0x04	; 4
    32e2:	21 91       	ld	r18, Z+
    32e4:	2d 93       	st	X+, r18
    32e6:	e8 17       	cp	r30, r24
    32e8:	f9 07       	cpc	r31, r25
    32ea:	d9 f7       	brne	.-10     	; 0x32e2 <Select+0x38>
    32ec:	99 81       	ldd	r25, Y+1	; 0x01
    32ee:	88 81       	ld	r24, Y
    32f0:	89 27       	eor	r24, r25
    32f2:	9a 81       	ldd	r25, Y+2	; 0x02
    32f4:	89 27       	eor	r24, r25
    32f6:	9b 81       	ldd	r25, Y+3	; 0x03
    32f8:	89 27       	eor	r24, r25
    32fa:	80 93 22 0b 	sts	0x0B22, r24	; 0x800b22 <SerBuffer+0x6>
    32fe:	10 92 30 0b 	sts	0x0B30, r1	; 0x800b30 <MInfo>
    3302:	10 92 31 0b 	sts	0x0B31, r1	; 0x800b31 <MInfo+0x1>
    3306:	10 92 32 0b 	sts	0x0B32, r1	; 0x800b32 <MInfo+0x2>
    330a:	10 92 34 0b 	sts	0x0B34, r1	; 0x800b34 <MInfo+0x4>
    330e:	10 92 36 0b 	sts	0x0B36, r1	; 0x800b36 <MInfo+0x6>
    3312:	10 92 35 0b 	sts	0x0B35, r1	; 0x800b35 <MInfo+0x5>
    3316:	10 92 37 0b 	sts	0x0B37, r1	; 0x800b37 <MInfo+0x7>
    331a:	87 e0       	ldi	r24, 0x07	; 7
    331c:	80 93 33 0b 	sts	0x0B33, r24	; 0x800b33 <MInfo+0x3>
    3320:	80 ed       	ldi	r24, 0xD0	; 208
    3322:	97 e0       	ldi	r25, 0x07	; 7
    3324:	0e 94 34 16 	call	0x2c68	; 0x2c68 <SetTimeOut>
    3328:	40 e3       	ldi	r20, 0x30	; 48
    332a:	5b e0       	ldi	r21, 0x0B	; 11
    332c:	6c e1       	ldi	r22, 0x1C	; 28
    332e:	7b e0       	ldi	r23, 0x0B	; 11
    3330:	8c e0       	ldi	r24, 0x0C	; 12
    3332:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <M522PcdCmd>
    3336:	00 97       	sbiw	r24, 0x00	; 0
    3338:	89 f4       	brne	.+34     	; 0x335c <Select+0xb2>
    333a:	20 91 34 0b 	lds	r18, 0x0B34	; 0x800b34 <MInfo+0x4>
    333e:	21 30       	cpi	r18, 0x01	; 1
    3340:	59 f4       	brne	.+22     	; 0x3358 <Select+0xae>
    3342:	20 91 35 0b 	lds	r18, 0x0B35	; 0x800b35 <MInfo+0x5>
    3346:	30 91 36 0b 	lds	r19, 0x0B36	; 0x800b36 <MInfo+0x6>
    334a:	23 2b       	or	r18, r19
    334c:	29 f4       	brne	.+10     	; 0x3358 <Select+0xae>
    334e:	20 91 1c 0b 	lds	r18, 0x0B1C	; 0x800b1c <SerBuffer>
    3352:	f8 01       	movw	r30, r16
    3354:	20 83       	st	Z, r18
    3356:	02 c0       	rjmp	.+4      	; 0x335c <Select+0xb2>
    3358:	84 e0       	ldi	r24, 0x04	; 4
    335a:	90 e0       	ldi	r25, 0x00	; 0
    335c:	df 91       	pop	r29
    335e:	cf 91       	pop	r28
    3360:	1f 91       	pop	r17
    3362:	0f 91       	pop	r16
    3364:	ff 90       	pop	r15
    3366:	08 95       	ret

00003368 <AnticollSelect>:
    3368:	6f 92       	push	r6
    336a:	7f 92       	push	r7
    336c:	8f 92       	push	r8
    336e:	9f 92       	push	r9
    3370:	af 92       	push	r10
    3372:	bf 92       	push	r11
    3374:	cf 92       	push	r12
    3376:	df 92       	push	r13
    3378:	ef 92       	push	r14
    337a:	ff 92       	push	r15
    337c:	0f 93       	push	r16
    337e:	1f 93       	push	r17
    3380:	cf 93       	push	r28
    3382:	df 93       	push	r29
    3384:	cd b7       	in	r28, 0x3d	; 61
    3386:	de b7       	in	r29, 0x3e	; 62
    3388:	2d 97       	sbiw	r28, 0x0d	; 13
    338a:	0f b6       	in	r0, 0x3f	; 63
    338c:	f8 94       	cli
    338e:	de bf       	out	0x3e, r29	; 62
    3390:	0f be       	out	0x3f, r0	; 63
    3392:	cd bf       	out	0x3d, r28	; 61
    3394:	7b 01       	movw	r14, r22
    3396:	6a 01       	movw	r12, r20
    3398:	9e 01       	movw	r18, r28
    339a:	2f 5f       	subi	r18, 0xFF	; 255
    339c:	3f 4f       	sbci	r19, 0xFF	; 255
    339e:	59 01       	movw	r10, r18
    33a0:	20 e0       	ldi	r18, 0x00	; 0
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	10 e0       	ldi	r17, 0x00	; 0
    33a6:	88 23       	and	r24, r24
    33a8:	a1 f0       	breq	.+40     	; 0x33d2 <AnticollSelect+0x6a>
    33aa:	81 32       	cpi	r24, 0x21	; 33
    33ac:	40 f0       	brcs	.+16     	; 0x33be <AnticollSelect+0x56>
    33ae:	00 ee       	ldi	r16, 0xE0	; 224
    33b0:	08 0f       	add	r16, r24
    33b2:	11 30       	cpi	r17, 0x01	; 1
    33b4:	61 f0       	breq	.+24     	; 0x33ce <AnticollSelect+0x66>
    33b6:	12 30       	cpi	r17, 0x02	; 2
    33b8:	71 f5       	brne	.+92     	; 0x3416 <AnticollSelect+0xae>
    33ba:	80 e2       	ldi	r24, 0x20	; 32
    33bc:	05 c0       	rjmp	.+10     	; 0x33c8 <AnticollSelect+0x60>
    33be:	11 30       	cpi	r17, 0x01	; 1
    33c0:	51 f0       	breq	.+20     	; 0x33d6 <AnticollSelect+0x6e>
    33c2:	12 30       	cpi	r17, 0x02	; 2
    33c4:	99 f4       	brne	.+38     	; 0x33ec <AnticollSelect+0x84>
    33c6:	00 e0       	ldi	r16, 0x00	; 0
    33c8:	67 e9       	ldi	r22, 0x97	; 151
    33ca:	96 2e       	mov	r9, r22
    33cc:	12 c0       	rjmp	.+36     	; 0x33f2 <AnticollSelect+0x8a>
    33ce:	80 e2       	ldi	r24, 0x20	; 32
    33d0:	03 c0       	rjmp	.+6      	; 0x33d8 <AnticollSelect+0x70>
    33d2:	11 30       	cpi	r17, 0x01	; 1
    33d4:	89 f4       	brne	.+34     	; 0x33f8 <AnticollSelect+0x90>
    33d6:	00 e0       	ldi	r16, 0x00	; 0
    33d8:	6a 80       	ldd	r6, Y+2	; 0x02
    33da:	7b 80       	ldd	r7, Y+3	; 0x03
    33dc:	8c 80       	ldd	r8, Y+4	; 0x04
    33de:	f7 01       	movw	r30, r14
    33e0:	60 82       	st	Z, r6
    33e2:	71 82       	std	Z+1, r7	; 0x01
    33e4:	82 82       	std	Z+2, r8	; 0x02
    33e6:	55 e9       	ldi	r21, 0x95	; 149
    33e8:	95 2e       	mov	r9, r21
    33ea:	03 c0       	rjmp	.+6      	; 0x33f2 <AnticollSelect+0x8a>
    33ec:	00 e0       	ldi	r16, 0x00	; 0
    33ee:	43 e9       	ldi	r20, 0x93	; 147
    33f0:	94 2e       	mov	r9, r20
    33f2:	80 32       	cpi	r24, 0x20	; 32
    33f4:	31 f4       	brne	.+12     	; 0x3402 <AnticollSelect+0x9a>
    33f6:	11 c0       	rjmp	.+34     	; 0x341a <AnticollSelect+0xb2>
    33f8:	12 30       	cpi	r17, 0x02	; 2
    33fa:	29 f3       	breq	.-54     	; 0x33c6 <AnticollSelect+0x5e>
    33fc:	00 e0       	ldi	r16, 0x00	; 0
    33fe:	93 e9       	ldi	r25, 0x93	; 147
    3400:	99 2e       	mov	r9, r25
    3402:	21 15       	cp	r18, r1
    3404:	31 05       	cpc	r19, r1
    3406:	09 f5       	brne	.+66     	; 0x344a <AnticollSelect+0xe2>
    3408:	a5 01       	movw	r20, r10
    340a:	68 2f       	mov	r22, r24
    340c:	89 2d       	mov	r24, r9
    340e:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <CascAnticoll>
    3412:	9c 01       	movw	r18, r24
    3414:	02 c0       	rjmp	.+4      	; 0x341a <AnticollSelect+0xb2>
    3416:	83 e9       	ldi	r24, 0x93	; 147
    3418:	98 2e       	mov	r9, r24
    341a:	21 15       	cp	r18, r1
    341c:	31 05       	cpc	r19, r1
    341e:	a9 f4       	brne	.+42     	; 0x344a <AnticollSelect+0xe2>
    3420:	ae 01       	movw	r20, r28
    3422:	43 5f       	subi	r20, 0xF3	; 243
    3424:	5f 4f       	sbci	r21, 0xFF	; 255
    3426:	b5 01       	movw	r22, r10
    3428:	89 2d       	mov	r24, r9
    342a:	0e 94 55 19 	call	0x32aa	; 0x32aa <Select>
    342e:	9c 01       	movw	r18, r24
    3430:	89 2b       	or	r24, r25
    3432:	19 f4       	brne	.+6      	; 0x343a <AnticollSelect+0xd2>
    3434:	8d 85       	ldd	r24, Y+13	; 0x0d
    3436:	82 ff       	sbrs	r24, 2
    3438:	08 c0       	rjmp	.+16     	; 0x344a <AnticollSelect+0xe2>
    343a:	1f 5f       	subi	r17, 0xFF	; 255
    343c:	f4 e0       	ldi	r31, 0x04	; 4
    343e:	af 0e       	add	r10, r31
    3440:	b1 1c       	adc	r11, r1
    3442:	13 30       	cpi	r17, 0x03	; 3
    3444:	d1 f0       	breq	.+52     	; 0x347a <AnticollSelect+0x112>
    3446:	80 2f       	mov	r24, r16
    3448:	ae cf       	rjmp	.-164    	; 0x33a6 <AnticollSelect+0x3e>
    344a:	11 30       	cpi	r17, 0x01	; 1
    344c:	61 f0       	breq	.+24     	; 0x3466 <AnticollSelect+0xfe>
    344e:	12 30       	cpi	r17, 0x02	; 2
    3450:	a1 f4       	brne	.+40     	; 0x347a <AnticollSelect+0x112>
    3452:	8d 81       	ldd	r24, Y+5	; 0x05
    3454:	9e 81       	ldd	r25, Y+6	; 0x06
    3456:	af 81       	ldd	r26, Y+7	; 0x07
    3458:	b8 85       	ldd	r27, Y+8	; 0x08
    345a:	f7 01       	movw	r30, r14
    345c:	86 83       	std	Z+6, r24	; 0x06
    345e:	97 83       	std	Z+7, r25	; 0x07
    3460:	a0 87       	std	Z+8, r26	; 0x08
    3462:	b1 87       	std	Z+9, r27	; 0x09
    3464:	13 c0       	rjmp	.+38     	; 0x348c <AnticollSelect+0x124>
    3466:	8d 81       	ldd	r24, Y+5	; 0x05
    3468:	9e 81       	ldd	r25, Y+6	; 0x06
    346a:	af 81       	ldd	r26, Y+7	; 0x07
    346c:	b8 85       	ldd	r27, Y+8	; 0x08
    346e:	f7 01       	movw	r30, r14
    3470:	83 83       	std	Z+3, r24	; 0x03
    3472:	94 83       	std	Z+4, r25	; 0x04
    3474:	a5 83       	std	Z+5, r26	; 0x05
    3476:	b6 83       	std	Z+6, r27	; 0x06
    3478:	09 c0       	rjmp	.+18     	; 0x348c <AnticollSelect+0x124>
    347a:	89 81       	ldd	r24, Y+1	; 0x01
    347c:	9a 81       	ldd	r25, Y+2	; 0x02
    347e:	ab 81       	ldd	r26, Y+3	; 0x03
    3480:	bc 81       	ldd	r27, Y+4	; 0x04
    3482:	f7 01       	movw	r30, r14
    3484:	80 83       	st	Z, r24
    3486:	91 83       	std	Z+1, r25	; 0x01
    3488:	a2 83       	std	Z+2, r26	; 0x02
    348a:	b3 83       	std	Z+3, r27	; 0x03
    348c:	8d 85       	ldd	r24, Y+13	; 0x0d
    348e:	f6 01       	movw	r30, r12
    3490:	80 83       	st	Z, r24
    3492:	c9 01       	movw	r24, r18
    3494:	2d 96       	adiw	r28, 0x0d	; 13
    3496:	0f b6       	in	r0, 0x3f	; 63
    3498:	f8 94       	cli
    349a:	de bf       	out	0x3e, r29	; 62
    349c:	0f be       	out	0x3f, r0	; 63
    349e:	cd bf       	out	0x3d, r28	; 61
    34a0:	df 91       	pop	r29
    34a2:	cf 91       	pop	r28
    34a4:	1f 91       	pop	r17
    34a6:	0f 91       	pop	r16
    34a8:	ff 90       	pop	r15
    34aa:	ef 90       	pop	r14
    34ac:	df 90       	pop	r13
    34ae:	cf 90       	pop	r12
    34b0:	bf 90       	pop	r11
    34b2:	af 90       	pop	r10
    34b4:	9f 90       	pop	r9
    34b6:	8f 90       	pop	r8
    34b8:	7f 90       	pop	r7
    34ba:	6f 90       	pop	r6
    34bc:	08 95       	ret

000034be <Authentication>:
    34be:	cf 93       	push	r28
    34c0:	df 93       	push	r29
    34c2:	10 92 30 0b 	sts	0x0B30, r1	; 0x800b30 <MInfo>
    34c6:	10 92 31 0b 	sts	0x0B31, r1	; 0x800b31 <MInfo+0x1>
    34ca:	10 92 32 0b 	sts	0x0B32, r1	; 0x800b32 <MInfo+0x2>
    34ce:	10 92 33 0b 	sts	0x0B33, r1	; 0x800b33 <MInfo+0x3>
    34d2:	10 92 34 0b 	sts	0x0B34, r1	; 0x800b34 <MInfo+0x4>
    34d6:	10 92 36 0b 	sts	0x0B36, r1	; 0x800b36 <MInfo+0x6>
    34da:	10 92 35 0b 	sts	0x0B35, r1	; 0x800b35 <MInfo+0x5>
    34de:	10 92 37 0b 	sts	0x0B37, r1	; 0x800b37 <MInfo+0x7>
    34e2:	80 93 1c 0b 	sts	0x0B1C, r24	; 0x800b1c <SerBuffer>
    34e6:	20 93 1d 0b 	sts	0x0B1D, r18	; 0x800b1d <SerBuffer+0x1>
    34ea:	86 e0       	ldi	r24, 0x06	; 6
    34ec:	fb 01       	movw	r30, r22
    34ee:	ae e1       	ldi	r26, 0x1E	; 30
    34f0:	bb e0       	ldi	r27, 0x0B	; 11
    34f2:	01 90       	ld	r0, Z+
    34f4:	0d 92       	st	X+, r0
    34f6:	8a 95       	dec	r24
    34f8:	e1 f7       	brne	.-8      	; 0x34f2 <Authentication+0x34>
    34fa:	fa 01       	movw	r30, r20
    34fc:	80 81       	ld	r24, Z
    34fe:	91 81       	ldd	r25, Z+1	; 0x01
    3500:	a2 81       	ldd	r26, Z+2	; 0x02
    3502:	b3 81       	ldd	r27, Z+3	; 0x03
    3504:	80 93 24 0b 	sts	0x0B24, r24	; 0x800b24 <SerBuffer+0x8>
    3508:	90 93 25 0b 	sts	0x0B25, r25	; 0x800b25 <SerBuffer+0x9>
    350c:	a0 93 26 0b 	sts	0x0B26, r26	; 0x800b26 <SerBuffer+0xa>
    3510:	b0 93 27 0b 	sts	0x0B27, r27	; 0x800b27 <SerBuffer+0xb>
    3514:	8c e0       	ldi	r24, 0x0C	; 12
    3516:	80 93 33 0b 	sts	0x0B33, r24	; 0x800b33 <MInfo+0x3>
    351a:	80 ed       	ldi	r24, 0xD0	; 208
    351c:	97 e0       	ldi	r25, 0x07	; 7
    351e:	0e 94 34 16 	call	0x2c68	; 0x2c68 <SetTimeOut>
    3522:	40 e3       	ldi	r20, 0x30	; 48
    3524:	5b e0       	ldi	r21, 0x0B	; 11
    3526:	6c e1       	ldi	r22, 0x1C	; 28
    3528:	7b e0       	ldi	r23, 0x0B	; 11
    352a:	8e e0       	ldi	r24, 0x0E	; 14
    352c:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <M522PcdCmd>
    3530:	ec 01       	movw	r28, r24
    3532:	89 2b       	or	r24, r25
    3534:	41 f4       	brne	.+16     	; 0x3546 <Authentication+0x88>
    3536:	88 e0       	ldi	r24, 0x08	; 8
    3538:	0e 94 1c 1b 	call	0x3638	; 0x3638 <RcGetReg>
    353c:	8f 70       	andi	r24, 0x0F	; 15
    353e:	88 30       	cpi	r24, 0x08	; 8
    3540:	11 f0       	breq	.+4      	; 0x3546 <Authentication+0x88>
    3542:	c1 e0       	ldi	r28, 0x01	; 1
    3544:	d2 e0       	ldi	r29, 0x02	; 2
    3546:	ce 01       	movw	r24, r28
    3548:	df 91       	pop	r29
    354a:	cf 91       	pop	r28
    354c:	08 95       	ret

0000354e <Read>:
    354e:	cf 93       	push	r28
    3550:	df 93       	push	r29
    3552:	eb 01       	movw	r28, r22
    3554:	10 92 30 0b 	sts	0x0B30, r1	; 0x800b30 <MInfo>
    3558:	10 92 31 0b 	sts	0x0B31, r1	; 0x800b31 <MInfo+0x1>
    355c:	10 92 32 0b 	sts	0x0B32, r1	; 0x800b32 <MInfo+0x2>
    3560:	10 92 34 0b 	sts	0x0B34, r1	; 0x800b34 <MInfo+0x4>
    3564:	10 92 36 0b 	sts	0x0B36, r1	; 0x800b36 <MInfo+0x6>
    3568:	10 92 35 0b 	sts	0x0B35, r1	; 0x800b35 <MInfo+0x5>
    356c:	10 92 37 0b 	sts	0x0B37, r1	; 0x800b37 <MInfo+0x7>
    3570:	90 e3       	ldi	r25, 0x30	; 48
    3572:	90 93 1c 0b 	sts	0x0B1C, r25	; 0x800b1c <SerBuffer>
    3576:	80 93 1d 0b 	sts	0x0B1D, r24	; 0x800b1d <SerBuffer+0x1>
    357a:	82 e0       	ldi	r24, 0x02	; 2
    357c:	80 93 33 0b 	sts	0x0B33, r24	; 0x800b33 <MInfo+0x3>
    3580:	80 e1       	ldi	r24, 0x10	; 16
    3582:	97 e2       	ldi	r25, 0x27	; 39
    3584:	0e 94 34 16 	call	0x2c68	; 0x2c68 <SetTimeOut>
    3588:	40 e3       	ldi	r20, 0x30	; 48
    358a:	5b e0       	ldi	r21, 0x0B	; 11
    358c:	6c e1       	ldi	r22, 0x1C	; 28
    358e:	7b e0       	ldi	r23, 0x0B	; 11
    3590:	8c e0       	ldi	r24, 0x0C	; 12
    3592:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <M522PcdCmd>
    3596:	00 97       	sbiw	r24, 0x00	; 0
    3598:	e9 f0       	breq	.+58     	; 0x35d4 <Read+0x86>
    359a:	81 30       	cpi	r24, 0x01	; 1
    359c:	91 05       	cpc	r25, r1
    359e:	a1 f0       	breq	.+40     	; 0x35c8 <Read+0x7a>
    35a0:	20 91 35 0b 	lds	r18, 0x0B35	; 0x800b35 <MInfo+0x5>
    35a4:	30 91 36 0b 	lds	r19, 0x0B36	; 0x800b36 <MInfo+0x6>
    35a8:	24 30       	cpi	r18, 0x04	; 4
    35aa:	31 05       	cpc	r19, r1
    35ac:	69 f4       	brne	.+26     	; 0x35c8 <Read+0x7a>
    35ae:	80 91 1c 0b 	lds	r24, 0x0B1C	; 0x800b1c <SerBuffer>
    35b2:	98 2f       	mov	r25, r24
    35b4:	9f 70       	andi	r25, 0x0F	; 15
    35b6:	90 93 1c 0b 	sts	0x0B1C, r25	; 0x800b1c <SerBuffer>
    35ba:	8a 70       	andi	r24, 0x0A	; 10
    35bc:	19 f0       	breq	.+6      	; 0x35c4 <Read+0x76>
    35be:	85 e0       	ldi	r24, 0x05	; 5
    35c0:	91 e0       	ldi	r25, 0x01	; 1
    35c2:	02 c0       	rjmp	.+4      	; 0x35c8 <Read+0x7a>
    35c4:	81 e0       	ldi	r24, 0x01	; 1
    35c6:	92 e0       	ldi	r25, 0x02	; 2
    35c8:	20 e1       	ldi	r18, 0x10	; 16
    35ca:	fe 01       	movw	r30, r28
    35cc:	11 92       	st	Z+, r1
    35ce:	2a 95       	dec	r18
    35d0:	e9 f7       	brne	.-6      	; 0x35cc <Read+0x7e>
    35d2:	14 c0       	rjmp	.+40     	; 0x35fc <Read+0xae>
    35d4:	20 91 34 0b 	lds	r18, 0x0B34	; 0x800b34 <MInfo+0x4>
    35d8:	20 31       	cpi	r18, 0x10	; 16
    35da:	41 f0       	breq	.+16     	; 0x35ec <Read+0x9e>
    35dc:	80 e1       	ldi	r24, 0x10	; 16
    35de:	fe 01       	movw	r30, r28
    35e0:	11 92       	st	Z+, r1
    35e2:	8a 95       	dec	r24
    35e4:	e9 f7       	brne	.-6      	; 0x35e0 <Read+0x92>
    35e6:	88 e0       	ldi	r24, 0x08	; 8
    35e8:	90 e0       	ldi	r25, 0x00	; 0
    35ea:	08 c0       	rjmp	.+16     	; 0x35fc <Read+0xae>
    35ec:	20 e1       	ldi	r18, 0x10	; 16
    35ee:	ec e1       	ldi	r30, 0x1C	; 28
    35f0:	fb e0       	ldi	r31, 0x0B	; 11
    35f2:	de 01       	movw	r26, r28
    35f4:	01 90       	ld	r0, Z+
    35f6:	0d 92       	st	X+, r0
    35f8:	2a 95       	dec	r18
    35fa:	e1 f7       	brne	.-8      	; 0x35f4 <Read+0xa6>
    35fc:	df 91       	pop	r29
    35fe:	cf 91       	pop	r28
    3600:	08 95       	ret

00003602 <readCardID>:

short readCardID(unsigned char cardType, unsigned char *buffer)
{
	unsigned char zone = 4;

	if(cardType == MIFARE_1K)
    3602:	88 30       	cpi	r24, 0x08	; 8
    3604:	11 f4       	brne	.+4      	; 0x360a <readCardID+0x8>
	{
		zone = 1;
    3606:	81 e0       	ldi	r24, 0x01	; 1
    3608:	01 c0       	rjmp	.+2      	; 0x360c <readCardID+0xa>
}


short readCardID(unsigned char cardType, unsigned char *buffer)
{
	unsigned char zone = 4;
    360a:	84 e0       	ldi	r24, 0x04	; 4
	{
		zone = 1;
	}
	
	//Read CardID from User Zone
	return(Read(zone, buffer));
    360c:	0c 94 a7 1a 	jmp	0x354e	; 0x354e <Read>

00003610 <RcSetReg>:
     RegVal        The value to be written
Return:
     None
**************************************************/
void RcSetReg(unsigned char RegAddr, unsigned char RegVal)
{ 
    3610:	cf 93       	push	r28
    3612:	df 93       	push	r29
    3614:	1f 92       	push	r1
    3616:	cd b7       	in	r28, 0x3d	; 61
    3618:	de b7       	in	r29, 0x3e	; 62

	// shift addr, bits[6:1] defines address
	RegAddr = RegAddr << 1;
    361a:	88 0f       	add	r24, r24
	
	//clear bits 7 and 0 for SPI write address
    RegAddr &= 0x7e;   
	Spi_ss_low;
    361c:	71 98       	cbi	0x0e, 1	; 14
    
	Spi_send(RegAddr);
    361e:	8e 77       	andi	r24, 0x7E	; 126
    3620:	69 83       	std	Y+1, r22	; 0x01
    3622:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <Spi_send>
	Spi_send(RegVal);
    3626:	69 81       	ldd	r22, Y+1	; 0x01
    3628:	86 2f       	mov	r24, r22
    362a:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <Spi_send>

	Spi_ss_high;
    362e:	71 9a       	sbi	0x0e, 1	; 14

}
    3630:	0f 90       	pop	r0
    3632:	df 91       	pop	r29
    3634:	cf 91       	pop	r28
    3636:	08 95       	ret

00003638 <RcGetReg>:
{
    unsigned char RegVal;
    //short status;	
	
	// shift addr, bits[6:1] defines address
	RegAddr = RegAddr << 1;
    3638:	88 0f       	add	r24, r24
	
	// for SPI read, clear bit 0 and set bit 
	RegAddr = (RegAddr & 0xfe) | 0x80; 
    363a:	8e 77       	andi	r24, 0x7E	; 126
    
	Spi_ss_low;
    363c:	71 98       	cbi	0x0e, 1	; 14
	
	// send address byte w/ read bit(7) set 
	Spi_send(RegAddr);
    363e:	80 68       	ori	r24, 0x80	; 128
    3640:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <Spi_send>
	
	// read register value
	RegVal = Spi_receive();
    3644:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <Spi_receive>
	
	Spi_ss_high;
    3648:	71 9a       	sbi	0x0e, 1	; 14
		
    return RegVal;
}
    364a:	08 95       	ret

0000364c <RcModifyReg>:
     MaskByte      Only the corresponding bit '1' is valid,
Return:
     None
**************************************************/
void RcModifyReg(unsigned char RegAddr, unsigned char ModifyVal, unsigned char MaskByte)
{
    364c:	1f 93       	push	r17
    364e:	cf 93       	push	r28
    3650:	df 93       	push	r29
    3652:	00 d0       	rcall	.+0      	; 0x3654 <RcModifyReg+0x8>
    3654:	cd b7       	in	r28, 0x3d	; 61
    3656:	de b7       	in	r29, 0x3e	; 62
    3658:	18 2f       	mov	r17, r24
    unsigned char RegVal;
    RegVal = RcGetReg(RegAddr);
    365a:	4a 83       	std	Y+2, r20	; 0x02
    365c:	69 83       	std	Y+1, r22	; 0x01
    365e:	0e 94 1c 1b 	call	0x3638	; 0x3638 <RcGetReg>
    if(ModifyVal)
    3662:	69 81       	ldd	r22, Y+1	; 0x01
    3664:	4a 81       	ldd	r20, Y+2	; 0x02
    3666:	66 23       	and	r22, r22
    3668:	19 f0       	breq	.+6      	; 0x3670 <RcModifyReg+0x24>
    {
        RegVal |= MaskByte;
    366a:	68 2f       	mov	r22, r24
    366c:	64 2b       	or	r22, r20
    366e:	03 c0       	rjmp	.+6      	; 0x3676 <RcModifyReg+0x2a>
    }
    else
    {
        RegVal &= (~MaskByte);
    3670:	64 2f       	mov	r22, r20
    3672:	60 95       	com	r22
    3674:	68 23       	and	r22, r24
    }
    RcSetReg(RegAddr, RegVal);
    3676:	81 2f       	mov	r24, r17
}
    3678:	0f 90       	pop	r0
    367a:	0f 90       	pop	r0
    367c:	df 91       	pop	r29
    367e:	cf 91       	pop	r28
    3680:	1f 91       	pop	r17
    }
    else
    {
        RegVal &= (~MaskByte);
    }
    RcSetReg(RegAddr, RegVal);
    3682:	0c 94 08 1b 	jmp	0x3610	; 0x3610 <RcSetReg>

00003686 <Spi_initialize>:
 * \param ucData is data to be sent.
 * \return ucData1 is received data from SPI
 */
void Spi_send_only ( uint8_t ucData )
{
   Spi_send_and_receive(ucData);
    3686:	cf 93       	push	r28
    3688:	df 93       	push	r29
    368a:	1f 92       	push	r1
    368c:	cd b7       	in	r28, 0x3d	; 61
    368e:	de b7       	in	r29, 0x3e	; 62
    3690:	84 b1       	in	r24, 0x04	; 4
    3692:	87 60       	ori	r24, 0x07	; 7
    3694:	84 b9       	out	0x04, r24	; 4
    3696:	23 98       	cbi	0x04, 3	; 4
    3698:	28 9a       	sbi	0x05, 0	; 5
    369a:	82 e0       	ldi	r24, 0x02	; 2
    369c:	8d b9       	out	0x0d, r24	; 13
    369e:	71 9a       	sbi	0x0e, 1	; 14
    36a0:	29 98       	cbi	0x05, 1	; 5
    36a2:	82 e5       	ldi	r24, 0x52	; 82
    36a4:	8c bd       	out	0x2c, r24	; 44
    36a6:	8d b5       	in	r24, 0x2d	; 45
    36a8:	89 83       	std	Y+1, r24	; 0x01
    36aa:	8e b5       	in	r24, 0x2e	; 46
    36ac:	89 83       	std	Y+1, r24	; 0x01
    36ae:	0f 90       	pop	r0
    36b0:	df 91       	pop	r29
    36b2:	cf 91       	pop	r28
    36b4:	08 95       	ret

000036b6 <Spi_send>:

void Spi_send ( uint8_t ucData )
{
	
    /* Start transmission */
    SPDR  = ucData ;     // Send Character
    36b6:	8e bd       	out	0x2e, r24	; 46

    /* Wait for transmission complete */
    while (!(SPSR & (1 << SPIF)))
    36b8:	0d b4       	in	r0, 0x2d	; 45
    36ba:	07 fe       	sbrs	r0, 7
    36bc:	fd cf       	rjmp	.-6      	; 0x36b8 <Spi_send+0x2>
    {
        // Wait until Char is sent
    }

}
    36be:	08 95       	ret

000036c0 <Spi_receive>:

uint8_t Spi_receive ()
{
	
    /* Start transmission */
    SPDR  = 0xff;     // Send dummy byte
    36c0:	8f ef       	ldi	r24, 0xFF	; 255
    36c2:	8e bd       	out	0x2e, r24	; 46

    /* Wait for transmission complete */
    while (!(SPSR & (1 << SPIF)))
    36c4:	0d b4       	in	r0, 0x2d	; 45
    36c6:	07 fe       	sbrs	r0, 7
    36c8:	fd cf       	rjmp	.-6      	; 0x36c4 <Spi_receive+0x4>
    {
        // Wait until Char is sent
    }

    /* Return the received byte*/
    return SPDR;
    36ca:	8e b5       	in	r24, 0x2e	; 46
}
    36cc:	08 95       	ret

000036ce <mifareInit>:
*/

/*Initialize the processor and RC522*/
void mifareInit(void)
{
	Spi_initialize();
    36ce:	0e 94 43 1b 	call	0x3686	; 0x3686 <Spi_initialize>
	Rc522Init();	
    36d2:	0c 94 62 16 	jmp	0x2cc4	; 0x2cc4 <Rc522Init>

000036d6 <main>:

int main(void){

	
	// SINGLE-CHIP SOLUTION
	cli(); //make sure interrupts are disabled before initialization.
    36d6:	f8 94       	cli
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    36d8:	0f b6       	in	r0, 0x3f	; 63
    36da:	f8 94       	cli
    36dc:	a8 95       	wdr
    36de:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    36e2:	88 61       	ori	r24, 0x18	; 24
    36e4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    36e8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    36ec:	0f be       	out	0x3f, r0	; 63
	wdt_disable();

	// init serial for PinPointSystem LCD output
	serial_init(NULL);
    36ee:	80 e0       	ldi	r24, 0x00	; 0
    36f0:	90 e0       	ldi	r25, 0x00	; 0
    36f2:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <serial_init>
#ifdef DEBUG_UART
	debugMsgStrConst("\r\nUART TEST\r\n ");
#endif

    // Init the timer system for the MAC
    timerInit();
    36f6:	0e 94 83 26 	call	0x4d06	; 0x4d06 <timerInit>

	InitTimerZero();	//timer for ACA machine comm.
    36fa:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <InitTimerZero>


    sei();
    36fe:	78 94       	sei
	Init the PPOS application on powerup
	get Setup 
	start scanning for a coordinator	
	Initialize ACA Programming data		
	*/
    appInit();
    3700:	0e 94 27 03 	call	0x64e	; 0x64e <appInit>
#if( DEBUG )
	Beeps(2);
#endif
       
    // Initialize mifare
	mifareInit();
    3704:	0e 94 67 1b 	call	0x36ce	; 0x36ce <mifareInit>
    for(;;)
    {
        // Turn interrupts on if they are off.  They should always be on
        // at this point in the loop, so just turn them on every time, in
        // case interrupts were inadvertently turned off elsewhere.
        sei();
    3708:	78 94       	sei

        // Task functions called from main loop.  Either add your own task loop
        // or edit the example appTask().
		//Reader and machines are initialized
        appTask();
    370a:	0e 94 05 04 	call	0x80a	; 0x80a <appTask>
        macTask();
    370e:	0e 94 51 22 	call	0x44a2	; 0x44a2 <macTask>

    }
    3712:	fa cf       	rjmp	.-12     	; 0x3708 <main+0x32>

00003714 <isSleeping>:
    {
    }
}

void radioSetModulation(u8 modulation)
{
    3714:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    3718:	86 95       	lsr	r24
    371a:	81 70       	andi	r24, 0x01	; 1
    371c:	08 95       	ret

0000371e <radioGetPartnum>:
    371e:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <radio_part_number.3584>
    3722:	81 11       	cpse	r24, r1
    3724:	04 c0       	rjmp	.+8      	; 0x372e <radioGetPartnum+0x10>
    3726:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__TEXT_REGION_LENGTH__+0x7e015c>
    372a:	80 93 33 05 	sts	0x0533, r24	; 0x800533 <radio_part_number.3584>
    372e:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <radio_part_number.3584>
    3732:	08 95       	ret

00003734 <radioRxStartEvent>:
    3734:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__TEXT_REGION_LENGTH__+0x7e0146>
    3738:	8f 71       	andi	r24, 0x1F	; 31
    373a:	80 93 34 05 	sts	0x0534, r24	; 0x800534 <rssi_val>
    373e:	10 92 53 0c 	sts	0x0C53, r1	; 0x800c53 <macConfig+0x17>
    3742:	08 95       	ret

00003744 <radioGetSavedRssiValue>:
    3744:	0e 94 8f 1b 	call	0x371e	; 0x371e <radioGetPartnum>
    3748:	82 30       	cpi	r24, 0x02	; 2
    374a:	19 f0       	breq	.+6      	; 0x3752 <radioGetSavedRssiValue+0xe>
    374c:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <rssi_val>
    3750:	08 95       	ret
    3752:	86 e1       	ldi	r24, 0x16	; 22
    3754:	08 95       	ret

00003756 <radioGetSavedLqiValue>:
    3756:	80 91 b8 0b 	lds	r24, 0x0BB8	; 0x800bb8 <mac_buffer_rx+0x80>
    375a:	08 95       	ret

0000375c <radioSetOperatingChannel>:
    375c:	cf 93       	push	r28
    375e:	95 ef       	ldi	r25, 0xF5	; 245
    3760:	98 0f       	add	r25, r24
    3762:	90 31       	cpi	r25, 0x10	; 16
    3764:	18 f5       	brcc	.+70     	; 0x37ac <radioSetOperatingChannel+0x50>
    3766:	c8 2f       	mov	r28, r24
    3768:	0e 94 8a 1b 	call	0x3714	; 0x3714 <isSleeping>
    376c:	81 11       	cpse	r24, r1
    376e:	20 c0       	rjmp	.+64     	; 0x37b0 <radioSetOperatingChannel+0x54>
    3770:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x7e0148>
    3774:	8f 71       	andi	r24, 0x1F	; 31
    3776:	8c 17       	cp	r24, r28
    3778:	e9 f0       	breq	.+58     	; 0x37b4 <radioSetOperatingChannel+0x58>
    377a:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x7e0148>
    377e:	80 7e       	andi	r24, 0xE0	; 224
    3780:	9c 2f       	mov	r25, r28
    3782:	9f 71       	andi	r25, 0x1F	; 31
    3784:	89 2b       	or	r24, r25
    3786:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <__TEXT_REGION_LENGTH__+0x7e0148>
    378a:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    378e:	8f 71       	andi	r24, 0x1F	; 31
    3790:	86 30       	cpi	r24, 0x06	; 6
    3792:	11 f0       	breq	.+4      	; 0x3798 <radioSetOperatingChannel+0x3c>
    3794:	89 30       	cpi	r24, 0x09	; 9
    3796:	21 f4       	brne	.+8      	; 0x37a0 <radioSetOperatingChannel+0x44>
    3798:	8d e2       	ldi	r24, 0x2D	; 45
    379a:	91 e0       	ldi	r25, 0x01	; 1
    379c:	01 97       	sbiw	r24, 0x01	; 1
    379e:	f1 f7       	brne	.-4      	; 0x379c <radioSetOperatingChannel+0x40>
    37a0:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x7e0148>
    37a4:	8f 71       	andi	r24, 0x1F	; 31
    37a6:	8c 13       	cpse	r24, r28
    37a8:	07 c0       	rjmp	.+14     	; 0x37b8 <radioSetOperatingChannel+0x5c>
    37aa:	04 c0       	rjmp	.+8      	; 0x37b4 <radioSetOperatingChannel+0x58>
    37ac:	82 e4       	ldi	r24, 0x42	; 66
    37ae:	05 c0       	rjmp	.+10     	; 0x37ba <radioSetOperatingChannel+0x5e>
    37b0:	84 e4       	ldi	r24, 0x44	; 68
    37b2:	03 c0       	rjmp	.+6      	; 0x37ba <radioSetOperatingChannel+0x5e>
    37b4:	80 e4       	ldi	r24, 0x40	; 64
    37b6:	01 c0       	rjmp	.+2      	; 0x37ba <radioSetOperatingChannel+0x5e>
    37b8:	83 e4       	ldi	r24, 0x43	; 67
    37ba:	cf 91       	pop	r28
    37bc:	08 95       	ret

000037be <radioSetClockSpeed>:
    37be:	66 30       	cpi	r22, 0x06	; 6
    37c0:	98 f4       	brcc	.+38     	; 0x37e8 <radioSetClockSpeed+0x2a>
    37c2:	81 11       	cpse	r24, r1
    37c4:	04 c0       	rjmp	.+8      	; 0x37ce <radioSetClockSpeed+0x10>
    37c6:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    37ca:	88 60       	ori	r24, 0x08	; 8
    37cc:	03 c0       	rjmp	.+6      	; 0x37d4 <radioSetClockSpeed+0x16>
    37ce:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    37d2:	87 7f       	andi	r24, 0xF7	; 247
    37d4:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    37d8:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    37dc:	88 7f       	andi	r24, 0xF8	; 248
    37de:	68 2b       	or	r22, r24
    37e0:	60 93 43 01 	sts	0x0143, r22	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    37e4:	80 e4       	ldi	r24, 0x40	; 64
    37e6:	08 95       	ret
    37e8:	82 e4       	ldi	r24, 0x42	; 66
    37ea:	08 95       	ret

000037ec <radioGetTrxState>:
    37ec:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    37f0:	8f 71       	andi	r24, 0x1F	; 31
    37f2:	08 95       	ret

000037f4 <radioResetStateMachine>:
    37f4:	e9 e3       	ldi	r30, 0x39	; 57
    37f6:	f1 e0       	ldi	r31, 0x01	; 1
    37f8:	80 81       	ld	r24, Z
    37fa:	8d 7f       	andi	r24, 0xFD	; 253
    37fc:	80 83       	st	Z, r24
    37fe:	8d e0       	ldi	r24, 0x0D	; 13
    3800:	90 e0       	ldi	r25, 0x00	; 0
    3802:	01 97       	sbiw	r24, 0x01	; 1
    3804:	f1 f7       	brne	.-4      	; 0x3802 <radioResetStateMachine+0xe>
    3806:	e2 e4       	ldi	r30, 0x42	; 66
    3808:	f1 e0       	ldi	r31, 0x01	; 1
    380a:	80 81       	ld	r24, Z
    380c:	80 7e       	andi	r24, 0xE0	; 224
    380e:	83 60       	ori	r24, 0x03	; 3
    3810:	80 83       	st	Z, r24
    3812:	83 e0       	ldi	r24, 0x03	; 3
    3814:	90 e0       	ldi	r25, 0x00	; 0
    3816:	01 97       	sbiw	r24, 0x01	; 1
    3818:	f1 f7       	brne	.-4      	; 0x3816 <radioResetStateMachine+0x22>
    381a:	08 95       	ret

0000381c <radioResetTrx>:
    381c:	e9 e3       	ldi	r30, 0x39	; 57
    381e:	f1 e0       	ldi	r31, 0x01	; 1
    3820:	80 81       	ld	r24, Z
    3822:	81 60       	ori	r24, 0x01	; 1
    3824:	80 83       	st	Z, r24
    3826:	80 81       	ld	r24, Z
    3828:	8d 7f       	andi	r24, 0xFD	; 253
    382a:	80 83       	st	Z, r24
    382c:	8d e0       	ldi	r24, 0x0D	; 13
    382e:	90 e0       	ldi	r25, 0x00	; 0
    3830:	01 97       	sbiw	r24, 0x01	; 1
    3832:	f1 f7       	brne	.-4      	; 0x3830 <radioResetTrx+0x14>
    3834:	80 81       	ld	r24, Z
    3836:	8e 7f       	andi	r24, 0xFE	; 254
    3838:	80 83       	st	Z, r24
    383a:	08 95       	ret

0000383c <radioInit>:
    383c:	0f 93       	push	r16
    383e:	1f 93       	push	r17
    3840:	cf 93       	push	r28
    3842:	df 93       	push	r29
    3844:	1f 92       	push	r1
    3846:	cd b7       	in	r28, 0x3d	; 61
    3848:	de b7       	in	r29, 0x3e	; 62
    384a:	0d ef       	ldi	r16, 0xFD	; 253
    384c:	13 e0       	ldi	r17, 0x03	; 3
    384e:	f8 01       	movw	r30, r16
    3850:	31 97       	sbiw	r30, 0x01	; 1
    3852:	f1 f7       	brne	.-4      	; 0x3850 <radioInit+0x14>
    3854:	89 83       	std	Y+1, r24	; 0x01
    3856:	0e 94 0e 1c 	call	0x381c	; 0x381c <radioResetTrx>
    385a:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    385e:	90 7e       	andi	r25, 0xE0	; 224
    3860:	93 60       	ori	r25, 0x03	; 3
    3862:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3866:	f8 01       	movw	r30, r16
    3868:	31 97       	sbiw	r30, 0x01	; 1
    386a:	f1 f7       	brne	.-4      	; 0x3868 <radioInit+0x2c>
    386c:	9c e4       	ldi	r25, 0x4C	; 76
    386e:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <__TEXT_REGION_LENGTH__+0x7e014e>
    3872:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x7e0149>
    3876:	90 7f       	andi	r25, 0xF0	; 240
    3878:	97 60       	ori	r25, 0x07	; 7
    387a:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <__TEXT_REGION_LENGTH__+0x7e0149>
    387e:	89 81       	ldd	r24, Y+1	; 0x01
    3880:	81 11       	cpse	r24, r1
    3882:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <calibrate_rc_osc>
    3886:	80 e4       	ldi	r24, 0x40	; 64
    3888:	0f 90       	pop	r0
    388a:	df 91       	pop	r29
    388c:	cf 91       	pop	r28
    388e:	1f 91       	pop	r17
    3890:	0f 91       	pop	r16
    3892:	08 95       	ret

00003894 <radioUseAutoTxCrc>:
    3894:	cf 93       	push	r28
    3896:	c8 2f       	mov	r28, r24
    3898:	0e 94 8f 1b 	call	0x371e	; 0x371e <radioGetPartnum>
    389c:	82 30       	cpi	r24, 0x02	; 2
    389e:	31 f4       	brne	.+12     	; 0x38ac <radioUseAutoTxCrc+0x18>
    38a0:	80 91 05 00 	lds	r24, 0x0005	; 0x800005 <__TEXT_REGION_LENGTH__+0x7e0005>
    38a4:	c0 fb       	bst	r28, 0
    38a6:	87 f9       	bld	r24, 7
    38a8:	80 93 05 00 	sts	0x0005, r24	; 0x800005 <__TEXT_REGION_LENGTH__+0x7e0005>
    38ac:	0e 94 8f 1b 	call	0x371e	; 0x371e <radioGetPartnum>
    38b0:	83 30       	cpi	r24, 0x03	; 3
    38b2:	61 f4       	brne	.+24     	; 0x38cc <radioUseAutoTxCrc+0x38>
    38b4:	20 91 04 00 	lds	r18, 0x0004	; 0x800004 <__TEXT_REGION_LENGTH__+0x7e0004>
    38b8:	30 e2       	ldi	r19, 0x20	; 32
    38ba:	c3 9f       	mul	r28, r19
    38bc:	c0 01       	movw	r24, r0
    38be:	11 24       	eor	r1, r1
    38c0:	80 72       	andi	r24, 0x20	; 32
    38c2:	92 2f       	mov	r25, r18
    38c4:	9f 7d       	andi	r25, 0xDF	; 223
    38c6:	89 2b       	or	r24, r25
    38c8:	80 93 04 00 	sts	0x0004, r24	; 0x800004 <__TEXT_REGION_LENGTH__+0x7e0004>
    38cc:	cf 91       	pop	r28
    38ce:	08 95       	ret

000038d0 <radioIsBusy>:
    38d0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    38d4:	98 2f       	mov	r25, r24
    38d6:	9f 70       	andi	r25, 0x0F	; 15
    38d8:	91 50       	subi	r25, 0x01	; 1
    38da:	92 30       	cpi	r25, 0x02	; 2
    38dc:	38 f0       	brcs	.+14     	; 0x38ec <radioIsBusy+0x1c>
    38de:	98 2f       	mov	r25, r24
    38e0:	9f 71       	andi	r25, 0x1F	; 31
    38e2:	81 e0       	ldi	r24, 0x01	; 1
    38e4:	9e 31       	cpi	r25, 0x1E	; 30
    38e6:	19 f0       	breq	.+6      	; 0x38ee <radioIsBusy+0x1e>
    38e8:	80 e0       	ldi	r24, 0x00	; 0
    38ea:	08 95       	ret
    38ec:	81 e0       	ldi	r24, 0x01	; 1
    38ee:	08 95       	ret

000038f0 <radioSetTrxState>:
    38f0:	cf 93       	push	r28
    38f2:	c8 2f       	mov	r28, r24
    38f4:	88 ef       	ldi	r24, 0xF8	; 248
    38f6:	8c 0f       	add	r24, r28
    38f8:	82 30       	cpi	r24, 0x02	; 2
    38fa:	38 f0       	brcs	.+14     	; 0x390a <radioSetTrxState+0x1a>
    38fc:	8c 2f       	mov	r24, r28
    38fe:	8f 7e       	andi	r24, 0xEF	; 239
    3900:	86 30       	cpi	r24, 0x06	; 6
    3902:	19 f0       	breq	.+6      	; 0x390a <radioSetTrxState+0x1a>
    3904:	c9 31       	cpi	r28, 0x19	; 25
    3906:	09 f0       	breq	.+2      	; 0x390a <radioSetTrxState+0x1a>
    3908:	55 c0       	rjmp	.+170    	; 0x39b4 <radioSetTrxState+0xc4>
    390a:	0e 94 8a 1b 	call	0x3714	; 0x3714 <isSleeping>
    390e:	81 11       	cpse	r24, r1
    3910:	53 c0       	rjmp	.+166    	; 0x39b8 <radioSetTrxState+0xc8>
    3912:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <radioIsBusy>
    3916:	81 11       	cpse	r24, r1
    3918:	fc cf       	rjmp	.-8      	; 0x3912 <radioSetTrxState+0x22>
    391a:	0e 94 8f 1b 	call	0x371e	; 0x371e <radioGetPartnum>
    391e:	82 30       	cpi	r24, 0x02	; 2
    3920:	39 f4       	brne	.+14     	; 0x3930 <radioSetTrxState+0x40>
    3922:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <macIsScanning>
    3926:	88 23       	and	r24, r24
    3928:	19 f0       	breq	.+6      	; 0x3930 <radioSetTrxState+0x40>
    392a:	c6 31       	cpi	r28, 0x16	; 22
    392c:	09 f4       	brne	.+2      	; 0x3930 <radioSetTrxState+0x40>
    392e:	c6 e0       	ldi	r28, 0x06	; 6
    3930:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    3934:	8f 71       	andi	r24, 0x1F	; 31
    3936:	c8 17       	cp	r28, r24
    3938:	09 f4       	brne	.+2      	; 0x393c <radioSetTrxState+0x4c>
    393a:	40 c0       	rjmp	.+128    	; 0x39bc <radioSetTrxState+0xcc>
    393c:	c8 30       	cpi	r28, 0x08	; 8
    393e:	19 f4       	brne	.+6      	; 0x3946 <radioSetTrxState+0x56>
    3940:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <radioResetStateMachine>
    3944:	31 c0       	rjmp	.+98     	; 0x39a8 <radioSetTrxState+0xb8>
    3946:	c9 31       	cpi	r28, 0x19	; 25
    3948:	59 f4       	brne	.+22     	; 0x3960 <radioSetTrxState+0x70>
    394a:	89 30       	cpi	r24, 0x09	; 9
    394c:	e1 f0       	breq	.+56     	; 0x3986 <radioSetTrxState+0x96>
    394e:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3952:	90 7e       	andi	r25, 0xE0	; 224
    3954:	99 60       	ori	r25, 0x09	; 9
    3956:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    395a:	86 31       	cpi	r24, 0x16	; 22
    395c:	81 f4       	brne	.+32     	; 0x397e <radioSetTrxState+0x8e>
    395e:	0c c0       	rjmp	.+24     	; 0x3978 <radioSetTrxState+0x88>
    3960:	c6 31       	cpi	r28, 0x16	; 22
    3962:	89 f4       	brne	.+34     	; 0x3986 <radioSetTrxState+0x96>
    3964:	89 30       	cpi	r24, 0x09	; 9
    3966:	79 f0       	breq	.+30     	; 0x3986 <radioSetTrxState+0x96>
    3968:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    396c:	90 7e       	andi	r25, 0xE0	; 224
    396e:	99 60       	ori	r25, 0x09	; 9
    3970:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3974:	89 31       	cpi	r24, 0x19	; 25
    3976:	19 f4       	brne	.+6      	; 0x397e <radioSetTrxState+0x8e>
    3978:	e3 e0       	ldi	r30, 0x03	; 3
    397a:	f0 e0       	ldi	r31, 0x00	; 0
    397c:	02 c0       	rjmp	.+4      	; 0x3982 <radioSetTrxState+0x92>
    397e:	e9 e6       	ldi	r30, 0x69	; 105
    3980:	f1 e0       	ldi	r31, 0x01	; 1
    3982:	31 97       	sbiw	r30, 0x01	; 1
    3984:	f1 f7       	brne	.-4      	; 0x3982 <radioSetTrxState+0x92>
    3986:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    398a:	90 7e       	andi	r25, 0xE0	; 224
    398c:	2c 2f       	mov	r18, r28
    398e:	2f 71       	andi	r18, 0x1F	; 31
    3990:	92 2b       	or	r25, r18
    3992:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3996:	88 30       	cpi	r24, 0x08	; 8
    3998:	19 f4       	brne	.+6      	; 0x39a0 <radioSetTrxState+0xb0>
    399a:	89 e6       	ldi	r24, 0x69	; 105
    399c:	91 e0       	ldi	r25, 0x01	; 1
    399e:	02 c0       	rjmp	.+4      	; 0x39a4 <radioSetTrxState+0xb4>
    39a0:	83 e0       	ldi	r24, 0x03	; 3
    39a2:	90 e0       	ldi	r25, 0x00	; 0
    39a4:	01 97       	sbiw	r24, 0x01	; 1
    39a6:	f1 f7       	brne	.-4      	; 0x39a4 <radioSetTrxState+0xb4>
    39a8:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    39ac:	8f 71       	andi	r24, 0x1F	; 31
    39ae:	8c 13       	cpse	r24, r28
    39b0:	07 c0       	rjmp	.+14     	; 0x39c0 <radioSetTrxState+0xd0>
    39b2:	04 c0       	rjmp	.+8      	; 0x39bc <radioSetTrxState+0xcc>
    39b4:	82 e4       	ldi	r24, 0x42	; 66
    39b6:	05 c0       	rjmp	.+10     	; 0x39c2 <radioSetTrxState+0xd2>
    39b8:	84 e4       	ldi	r24, 0x44	; 68
    39ba:	03 c0       	rjmp	.+6      	; 0x39c2 <radioSetTrxState+0xd2>
    39bc:	80 e4       	ldi	r24, 0x40	; 64
    39be:	01 c0       	rjmp	.+2      	; 0x39c2 <radioSetTrxState+0xd2>
    39c0:	83 e4       	ldi	r24, 0x43	; 67
    39c2:	cf 91       	pop	r28
    39c4:	08 95       	ret

000039c6 <radioTrxEndEvent>:
    39c6:	cf 93       	push	r28
    39c8:	df 93       	push	r29
    39ca:	00 d0       	rcall	.+0      	; 0x39cc <radioTrxEndEvent+0x6>
    39cc:	00 d0       	rcall	.+0      	; 0x39ce <radioTrxEndEvent+0x8>
    39ce:	1f 92       	push	r1
    39d0:	cd b7       	in	r28, 0x3d	; 61
    39d2:	de b7       	in	r29, 0x3e	; 62
    39d4:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    39d8:	8f 71       	andi	r24, 0x1F	; 31
    39da:	8c 83       	std	Y+4, r24	; 0x04
    39dc:	8c 81       	ldd	r24, Y+4	; 0x04
    39de:	81 31       	cpi	r24, 0x11	; 17
    39e0:	51 f0       	breq	.+20     	; 0x39f6 <radioTrxEndEvent+0x30>
    39e2:	8c 81       	ldd	r24, Y+4	; 0x04
    39e4:	86 30       	cpi	r24, 0x06	; 6
    39e6:	39 f0       	breq	.+14     	; 0x39f6 <radioTrxEndEvent+0x30>
    39e8:	8c 81       	ldd	r24, Y+4	; 0x04
    39ea:	81 30       	cpi	r24, 0x01	; 1
    39ec:	21 f0       	breq	.+8      	; 0x39f6 <radioTrxEndEvent+0x30>
    39ee:	8c 81       	ldd	r24, Y+4	; 0x04
    39f0:	86 31       	cpi	r24, 0x16	; 22
    39f2:	09 f0       	breq	.+2      	; 0x39f6 <radioTrxEndEvent+0x30>
    39f4:	5f c0       	rjmp	.+190    	; 0x3ab4 <radioTrxEndEvent+0xee>
    39f6:	40 91 7b 01 	lds	r20, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7e017b>
    39fa:	50 e0       	ldi	r21, 0x00	; 0
    39fc:	60 e8       	ldi	r22, 0x80	; 128
    39fe:	71 e0       	ldi	r23, 0x01	; 1
    3a00:	89 e3       	ldi	r24, 0x39	; 57
    3a02:	9b e0       	ldi	r25, 0x0B	; 11
    3a04:	0e 94 12 32 	call	0x6424	; 0x6424 <memcpy>
    3a08:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7e017b>
    3a0c:	80 93 38 0b 	sts	0x0B38, r24	; 0x800b38 <mac_buffer_rx>
    3a10:	e0 91 7b 01 	lds	r30, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7e017b>
    3a14:	f0 e0       	ldi	r31, 0x00	; 0
    3a16:	e8 5c       	subi	r30, 0xC8	; 200
    3a18:	f4 4f       	sbci	r31, 0xF4	; 244
    3a1a:	80 81       	ld	r24, Z
    3a1c:	80 93 b8 0b 	sts	0x0BB8, r24	; 0x800bb8 <mac_buffer_rx+0x80>
    3a20:	19 82       	std	Y+1, r1	; 0x01
    3a22:	1b 82       	std	Y+3, r1	; 0x03
    3a24:	1a 82       	std	Y+2, r1	; 0x02
    3a26:	20 91 39 0b 	lds	r18, 0x0B39	; 0x800b39 <mac_buffer_rx+0x1>
    3a2a:	80 91 3a 0b 	lds	r24, 0x0B3A	; 0x800b3a <mac_buffer_rx+0x2>
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	98 2f       	mov	r25, r24
    3a32:	88 27       	eor	r24, r24
    3a34:	82 0f       	add	r24, r18
    3a36:	91 1d       	adc	r25, r1
    3a38:	90 93 3a 0b 	sts	0x0B3A, r25	; 0x800b3a <mac_buffer_rx+0x2>
    3a3c:	80 93 39 0b 	sts	0x0B39, r24	; 0x800b39 <mac_buffer_rx+0x1>
    3a40:	81 36       	cpi	r24, 0x61	; 97
    3a42:	28 e8       	ldi	r18, 0x88	; 136
    3a44:	92 07       	cpc	r25, r18
    3a46:	09 f1       	breq	.+66     	; 0x3a8a <radioTrxEndEvent+0xc4>
    3a48:	40 f4       	brcc	.+16     	; 0x3a5a <radioTrxEndEvent+0x94>
    3a4a:	83 30       	cpi	r24, 0x03	; 3
    3a4c:	28 e0       	ldi	r18, 0x08	; 8
    3a4e:	92 07       	cpc	r25, r18
    3a50:	81 f0       	breq	.+32     	; 0x3a72 <radioTrxEndEvent+0xac>
    3a52:	81 15       	cp	r24, r1
    3a54:	90 48       	sbci	r25, 0x80	; 128
    3a56:	99 f0       	breq	.+38     	; 0x3a7e <radioTrxEndEvent+0xb8>
    3a58:	28 c0       	rjmp	.+80     	; 0x3aaa <radioTrxEndEvent+0xe4>
    3a5a:	83 36       	cpi	r24, 0x63	; 99
    3a5c:	2c e8       	ldi	r18, 0x8C	; 140
    3a5e:	92 07       	cpc	r25, r18
    3a60:	01 f1       	breq	.+64     	; 0x3aa2 <radioTrxEndEvent+0xdc>
    3a62:	83 36       	cpi	r24, 0x63	; 99
    3a64:	28 ec       	ldi	r18, 0xC8	; 200
    3a66:	92 07       	cpc	r25, r18
    3a68:	d1 f0       	breq	.+52     	; 0x3a9e <radioTrxEndEvent+0xd8>
    3a6a:	83 36       	cpi	r24, 0x63	; 99
    3a6c:	98 48       	sbci	r25, 0x88	; 136
    3a6e:	e9 f4       	brne	.+58     	; 0x3aaa <radioTrxEndEvent+0xe4>
    3a70:	0e c0       	rjmp	.+28     	; 0x3a8e <radioTrxEndEvent+0xc8>
    3a72:	80 91 44 0c 	lds	r24, 0x0C44	; 0x800c44 <macConfig+0x8>
    3a76:	88 23       	and	r24, r24
    3a78:	c1 f0       	breq	.+48     	; 0x3aaa <radioTrxEndEvent+0xe4>
    3a7a:	85 e1       	ldi	r24, 0x15	; 21
    3a7c:	15 c0       	rjmp	.+42     	; 0x3aa8 <radioTrxEndEvent+0xe2>
    3a7e:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <macIsScanning>
    3a82:	88 23       	and	r24, r24
    3a84:	91 f0       	breq	.+36     	; 0x3aaa <radioTrxEndEvent+0xe4>
    3a86:	84 e1       	ldi	r24, 0x14	; 20
    3a88:	0f c0       	rjmp	.+30     	; 0x3aa8 <radioTrxEndEvent+0xe2>
    3a8a:	80 e1       	ldi	r24, 0x10	; 16
    3a8c:	0d c0       	rjmp	.+26     	; 0x3aa8 <radioTrxEndEvent+0xe2>
    3a8e:	80 91 42 0b 	lds	r24, 0x0B42	; 0x800b42 <mac_buffer_rx+0xa>
    3a92:	82 30       	cpi	r24, 0x02	; 2
    3a94:	31 f0       	breq	.+12     	; 0x3aa2 <radioTrxEndEvent+0xdc>
    3a96:	8b 3b       	cpi	r24, 0xBB	; 187
    3a98:	31 f0       	breq	.+12     	; 0x3aa6 <radioTrxEndEvent+0xe0>
    3a9a:	81 30       	cpi	r24, 0x01	; 1
    3a9c:	31 f4       	brne	.+12     	; 0x3aaa <radioTrxEndEvent+0xe4>
    3a9e:	87 e1       	ldi	r24, 0x17	; 23
    3aa0:	03 c0       	rjmp	.+6      	; 0x3aa8 <radioTrxEndEvent+0xe2>
    3aa2:	88 e1       	ldi	r24, 0x18	; 24
    3aa4:	01 c0       	rjmp	.+2      	; 0x3aa8 <radioTrxEndEvent+0xe2>
    3aa6:	89 e1       	ldi	r24, 0x19	; 25
    3aa8:	89 83       	std	Y+1, r24	; 0x01
    3aaa:	ce 01       	movw	r24, r28
    3aac:	01 96       	adiw	r24, 0x01	; 1
    3aae:	0e 94 06 22 	call	0x440c	; 0x440c <mac_put_event>
    3ab2:	35 c0       	rjmp	.+106    	; 0x3b1e <radioTrxEndEvent+0x158>
    3ab4:	8c 81       	ldd	r24, Y+4	; 0x04
    3ab6:	82 30       	cpi	r24, 0x02	; 2
    3ab8:	49 f0       	breq	.+18     	; 0x3acc <radioTrxEndEvent+0x106>
    3aba:	8c 81       	ldd	r24, Y+4	; 0x04
    3abc:	82 31       	cpi	r24, 0x12	; 18
    3abe:	31 f0       	breq	.+12     	; 0x3acc <radioTrxEndEvent+0x106>
    3ac0:	8c 81       	ldd	r24, Y+4	; 0x04
    3ac2:	89 31       	cpi	r24, 0x19	; 25
    3ac4:	19 f0       	breq	.+6      	; 0x3acc <radioTrxEndEvent+0x106>
    3ac6:	8c 81       	ldd	r24, Y+4	; 0x04
    3ac8:	89 30       	cpi	r24, 0x09	; 9
    3aca:	49 f5       	brne	.+82     	; 0x3b1e <radioTrxEndEvent+0x158>
    3acc:	10 92 53 0c 	sts	0x0C53, r1	; 0x800c53 <macConfig+0x17>
    3ad0:	19 82       	std	Y+1, r1	; 0x01
    3ad2:	1b 82       	std	Y+3, r1	; 0x03
    3ad4:	1a 82       	std	Y+2, r1	; 0x02
    3ad6:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3ada:	82 95       	swap	r24
    3adc:	86 95       	lsr	r24
    3ade:	87 70       	andi	r24, 0x07	; 7
    3ae0:	8d 83       	std	Y+5, r24	; 0x05
    3ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ae4:	83 30       	cpi	r24, 0x03	; 3
    3ae6:	49 f0       	breq	.+18     	; 0x3afa <radioTrxEndEvent+0x134>
    3ae8:	20 f4       	brcc	.+8      	; 0x3af2 <radioTrxEndEvent+0x12c>
    3aea:	82 30       	cpi	r24, 0x02	; 2
    3aec:	40 f4       	brcc	.+16     	; 0x3afe <radioTrxEndEvent+0x138>
    3aee:	81 e1       	ldi	r24, 0x11	; 17
    3af0:	05 c0       	rjmp	.+10     	; 0x3afc <radioTrxEndEvent+0x136>
    3af2:	85 30       	cpi	r24, 0x05	; 5
    3af4:	21 f4       	brne	.+8      	; 0x3afe <radioTrxEndEvent+0x138>
    3af6:	82 e1       	ldi	r24, 0x12	; 18
    3af8:	01 c0       	rjmp	.+2      	; 0x3afc <radioTrxEndEvent+0x136>
    3afa:	83 e1       	ldi	r24, 0x13	; 19
    3afc:	89 83       	std	Y+1, r24	; 0x01
    3afe:	89 81       	ldd	r24, Y+1	; 0x01
    3b00:	88 23       	and	r24, r24
    3b02:	21 f0       	breq	.+8      	; 0x3b0c <radioTrxEndEvent+0x146>
    3b04:	ce 01       	movw	r24, r28
    3b06:	01 96       	adiw	r24, 0x01	; 1
    3b08:	0e 94 06 22 	call	0x440c	; 0x440c <mac_put_event>
    3b0c:	86 e1       	ldi	r24, 0x16	; 22
    3b0e:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <radioSetTrxState>
    3b12:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
    3b16:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    3b1a:	0e 94 b4 2f 	call	0x5f68	; 0x5f68 <srand>
    3b1e:	0f 90       	pop	r0
    3b20:	0f 90       	pop	r0
    3b22:	0f 90       	pop	r0
    3b24:	0f 90       	pop	r0
    3b26:	0f 90       	pop	r0
    3b28:	df 91       	pop	r29
    3b2a:	cf 91       	pop	r28
    3b2c:	08 95       	ret

00003b2e <radioSendData>:
    3b2e:	0f 93       	push	r16
    3b30:	1f 93       	push	r17
    3b32:	cf 93       	push	r28
    3b34:	c8 2f       	mov	r28, r24
    3b36:	8b 01       	movw	r16, r22
    3b38:	87 fd       	sbrc	r24, 7
    3b3a:	2b c0       	rjmp	.+86     	; 0x3b92 <radioSendData+0x64>
    3b3c:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <radioIsBusy>
    3b40:	81 11       	cpse	r24, r1
    3b42:	fc cf       	rjmp	.-8      	; 0x3b3c <radioSendData+0xe>
    3b44:	89 e1       	ldi	r24, 0x19	; 25
    3b46:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <radioSetTrxState>
    3b4a:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    3b4e:	8f 71       	andi	r24, 0x1F	; 31
    3b50:	89 31       	cpi	r24, 0x19	; 25
    3b52:	c1 f7       	brne	.-16     	; 0x3b44 <radioSendData+0x16>
    3b54:	f8 01       	movw	r30, r16
    3b56:	85 81       	ldd	r24, Z+5	; 0x05
    3b58:	96 81       	ldd	r25, Z+6	; 0x06
    3b5a:	90 93 52 0c 	sts	0x0C52, r25	; 0x800c52 <macConfig+0x16>
    3b5e:	80 93 51 0c 	sts	0x0C51, r24	; 0x800c51 <macConfig+0x15>
    3b62:	4c 2f       	mov	r20, r28
    3b64:	50 e0       	ldi	r21, 0x00	; 0
    3b66:	4e 5f       	subi	r20, 0xFE	; 254
    3b68:	5f 4f       	sbci	r21, 0xFF	; 255
    3b6a:	b8 01       	movw	r22, r16
    3b6c:	81 e8       	ldi	r24, 0x81	; 129
    3b6e:	91 e0       	ldi	r25, 0x01	; 1
    3b70:	0e 94 12 32 	call	0x6424	; 0x6424 <memcpy>
    3b74:	ce 5f       	subi	r28, 0xFE	; 254
    3b76:	c0 93 80 01 	sts	0x0180, r28	; 0x800180 <__TEXT_REGION_LENGTH__+0x7e0180>
    3b7a:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    3b7e:	82 60       	ori	r24, 0x02	; 2
    3b80:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    3b84:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    3b88:	8d 7f       	andi	r24, 0xFD	; 253
    3b8a:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    3b8e:	80 e4       	ldi	r24, 0x40	; 64
    3b90:	01 c0       	rjmp	.+2      	; 0x3b94 <radioSendData+0x66>
    3b92:	82 e4       	ldi	r24, 0x42	; 66
    3b94:	cf 91       	pop	r28
    3b96:	1f 91       	pop	r17
    3b98:	0f 91       	pop	r16
    3b9a:	08 95       	ret

00003b9c <radioSetDeviceRole>:
    3b9c:	ee e6       	ldi	r30, 0x6E	; 110
    3b9e:	f1 e0       	ldi	r31, 0x01	; 1
    3ba0:	90 81       	ld	r25, Z
    3ba2:	80 fb       	bst	r24, 0
    3ba4:	93 f9       	bld	r25, 3
    3ba6:	90 83       	st	Z, r25
    3ba8:	08 95       	ret

00003baa <radioSetPanId>:
    3baa:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7e0162>
    3bae:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <__TEXT_REGION_LENGTH__+0x7e0163>
    3bb2:	08 95       	ret

00003bb4 <radioSetShortAddress>:
    3bb4:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7e0160>
    3bb8:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <__TEXT_REGION_LENGTH__+0x7e0161>
    3bbc:	08 95       	ret

00003bbe <radioSetExtendedAddress>:
    3bbe:	e4 e6       	ldi	r30, 0x64	; 100
    3bc0:	f1 e0       	ldi	r31, 0x01	; 1
    3bc2:	dc 01       	movw	r26, r24
    3bc4:	2d 91       	ld	r18, X+
    3bc6:	cd 01       	movw	r24, r26
    3bc8:	21 93       	st	Z+, r18
    3bca:	ec 36       	cpi	r30, 0x6C	; 108
    3bcc:	b1 e0       	ldi	r27, 0x01	; 1
    3bce:	fb 07       	cpc	r31, r27
    3bd0:	c1 f7       	brne	.-16     	; 0x3bc2 <radioSetExtendedAddress+0x4>
    3bd2:	08 95       	ret

00003bd4 <radioRandom>:
    3bd4:	cf 93       	push	r28
    3bd6:	df 93       	push	r29
    3bd8:	c8 2f       	mov	r28, r24
    3bda:	d0 91 41 01 	lds	r29, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    3bde:	0e 94 8f 1b 	call	0x371e	; 0x371e <radioGetPartnum>
    3be2:	83 30       	cpi	r24, 0x03	; 3
    3be4:	39 f4       	brne	.+14     	; 0x3bf4 <radioRandom+0x20>
    3be6:	df 70       	andi	r29, 0x0F	; 15
    3be8:	d6 30       	cpi	r29, 0x06	; 6
    3bea:	f1 f4       	brne	.+60     	; 0x3c28 <radioRandom+0x54>
    3bec:	c6 95       	lsr	r28
    3bee:	90 e0       	ldi	r25, 0x00	; 0
    3bf0:	20 e0       	ldi	r18, 0x00	; 0
    3bf2:	09 c0       	rjmp	.+18     	; 0x3c06 <radioRandom+0x32>
    3bf4:	0e 94 8f 1b 	call	0x371e	; 0x371e <radioGetPartnum>
    3bf8:	83 38       	cpi	r24, 0x83	; 131
    3bfa:	a9 f3       	breq	.-22     	; 0x3be6 <radioRandom+0x12>
    3bfc:	0e 94 8f 1b 	call	0x371e	; 0x371e <radioGetPartnum>
    3c00:	87 30       	cpi	r24, 0x07	; 7
    3c02:	91 f4       	brne	.+36     	; 0x3c28 <radioRandom+0x54>
    3c04:	f0 cf       	rjmp	.-32     	; 0x3be6 <radioRandom+0x12>
    3c06:	9c 17       	cp	r25, r28
    3c08:	69 f0       	breq	.+26     	; 0x3c24 <radioRandom+0x50>
    3c0a:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__TEXT_REGION_LENGTH__+0x7e0146>
    3c0e:	44 e0       	ldi	r20, 0x04	; 4
    3c10:	24 9f       	mul	r18, r20
    3c12:	90 01       	movw	r18, r0
    3c14:	11 24       	eor	r1, r1
    3c16:	80 76       	andi	r24, 0x60	; 96
    3c18:	82 95       	swap	r24
    3c1a:	86 95       	lsr	r24
    3c1c:	87 70       	andi	r24, 0x07	; 7
    3c1e:	28 2b       	or	r18, r24
    3c20:	9f 5f       	subi	r25, 0xFF	; 255
    3c22:	f1 cf       	rjmp	.-30     	; 0x3c06 <radioRandom+0x32>
    3c24:	82 2f       	mov	r24, r18
    3c26:	02 c0       	rjmp	.+4      	; 0x3c2c <radioRandom+0x58>
    3c28:	0e 94 b0 2f 	call	0x5f60	; 0x5f60 <rand>
    3c2c:	df 91       	pop	r29
    3c2e:	cf 91       	pop	r28
    3c30:	08 95       	ret

00003c32 <radioSetup900>:
    {
    }
}

void radioSetup900(void)
{
    3c32:	08 95       	ret

00003c34 <__vector_59>:
	/*! \brief ISR for the Radio RX_START event.
	 */
	void TRX24_RX_START_vect(void);
	#else  /* !DOXYGEN */
	ISR(TRX24_RX_START_vect)
	{
    3c34:	1f 92       	push	r1
    3c36:	0f 92       	push	r0
    3c38:	0f b6       	in	r0, 0x3f	; 63
    3c3a:	0f 92       	push	r0
    3c3c:	11 24       	eor	r1, r1
    3c3e:	0b b6       	in	r0, 0x3b	; 59
    3c40:	0f 92       	push	r0
    3c42:	2f 93       	push	r18
    3c44:	3f 93       	push	r19
    3c46:	4f 93       	push	r20
    3c48:	5f 93       	push	r21
    3c4a:	6f 93       	push	r22
    3c4c:	7f 93       	push	r23
    3c4e:	8f 93       	push	r24
    3c50:	9f 93       	push	r25
    3c52:	af 93       	push	r26
    3c54:	bf 93       	push	r27
    3c56:	ef 93       	push	r30
    3c58:	ff 93       	push	r31
	    //    debugMsgStr("rxstart");
	    radioRxStartEvent();
    3c5a:	0e 94 9a 1b 	call	0x3734	; 0x3734 <radioRxStartEvent>
	}
    3c5e:	ff 91       	pop	r31
    3c60:	ef 91       	pop	r30
    3c62:	bf 91       	pop	r27
    3c64:	af 91       	pop	r26
    3c66:	9f 91       	pop	r25
    3c68:	8f 91       	pop	r24
    3c6a:	7f 91       	pop	r23
    3c6c:	6f 91       	pop	r22
    3c6e:	5f 91       	pop	r21
    3c70:	4f 91       	pop	r20
    3c72:	3f 91       	pop	r19
    3c74:	2f 91       	pop	r18
    3c76:	0f 90       	pop	r0
    3c78:	0b be       	out	0x3b, r0	; 59
    3c7a:	0f 90       	pop	r0
    3c7c:	0f be       	out	0x3f, r0	; 63
    3c7e:	0f 90       	pop	r0
    3c80:	1f 90       	pop	r1
    3c82:	18 95       	reti

00003c84 <__vector_60>:
/*! \brief ISR for the Radio RX_START event.
 */
void TRX24_RX_END_vect(void);
#else  /* !DOXYGEN */
	ISR(TRX24_RX_END_vect)
	{
    3c84:	1f 92       	push	r1
    3c86:	0f 92       	push	r0
    3c88:	0f b6       	in	r0, 0x3f	; 63
    3c8a:	0f 92       	push	r0
    3c8c:	11 24       	eor	r1, r1
    3c8e:	0b b6       	in	r0, 0x3b	; 59
    3c90:	0f 92       	push	r0
    3c92:	2f 93       	push	r18
    3c94:	3f 93       	push	r19
    3c96:	4f 93       	push	r20
    3c98:	5f 93       	push	r21
    3c9a:	6f 93       	push	r22
    3c9c:	7f 93       	push	r23
    3c9e:	8f 93       	push	r24
    3ca0:	9f 93       	push	r25
    3ca2:	af 93       	push	r26
    3ca4:	bf 93       	push	r27
    3ca6:	ef 93       	push	r30
    3ca8:	ff 93       	push	r31
	    //debugMsgStr("rxend");
	    radioTrxEndEvent();
    3caa:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <radioTrxEndEvent>
	}
    3cae:	ff 91       	pop	r31
    3cb0:	ef 91       	pop	r30
    3cb2:	bf 91       	pop	r27
    3cb4:	af 91       	pop	r26
    3cb6:	9f 91       	pop	r25
    3cb8:	8f 91       	pop	r24
    3cba:	7f 91       	pop	r23
    3cbc:	6f 91       	pop	r22
    3cbe:	5f 91       	pop	r21
    3cc0:	4f 91       	pop	r20
    3cc2:	3f 91       	pop	r19
    3cc4:	2f 91       	pop	r18
    3cc6:	0f 90       	pop	r0
    3cc8:	0b be       	out	0x3b, r0	; 59
    3cca:	0f 90       	pop	r0
    3ccc:	0f be       	out	0x3f, r0	; 63
    3cce:	0f 90       	pop	r0
    3cd0:	1f 90       	pop	r1
    3cd2:	18 95       	reti

00003cd4 <__vector_63>:
/*! \brief ISR for the Radio RX_START event.
 */
void TRX24_TX_END_vect(void);
#else  /* !DOXYGEN */
ISR(TRX24_TX_END_vect)
{
    3cd4:	1f 92       	push	r1
    3cd6:	0f 92       	push	r0
    3cd8:	0f b6       	in	r0, 0x3f	; 63
    3cda:	0f 92       	push	r0
    3cdc:	11 24       	eor	r1, r1
    3cde:	0b b6       	in	r0, 0x3b	; 59
    3ce0:	0f 92       	push	r0
    3ce2:	2f 93       	push	r18
    3ce4:	3f 93       	push	r19
    3ce6:	4f 93       	push	r20
    3ce8:	5f 93       	push	r21
    3cea:	6f 93       	push	r22
    3cec:	7f 93       	push	r23
    3cee:	8f 93       	push	r24
    3cf0:	9f 93       	push	r25
    3cf2:	af 93       	push	r26
    3cf4:	bf 93       	push	r27
    3cf6:	ef 93       	push	r30
    3cf8:	ff 93       	push	r31
    //    debugMsgStr("txend");
    //    debugMsgHex(hal_subregister_read(SR_TRX_STATUS));

    /// @todo fix this - this interrupt should never occur!!
    if (hal_subregister_read(SR_TRX_STATUS) != 0x16)
    3cfa:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    3cfe:	8f 71       	andi	r24, 0x1F	; 31
    3d00:	86 31       	cpi	r24, 0x16	; 22
    3d02:	11 f0       	breq	.+4      	; 0x3d08 <__vector_63+0x34>
        radioTrxEndEvent();
    3d04:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <radioTrxEndEvent>
}
    3d08:	ff 91       	pop	r31
    3d0a:	ef 91       	pop	r30
    3d0c:	bf 91       	pop	r27
    3d0e:	af 91       	pop	r26
    3d10:	9f 91       	pop	r25
    3d12:	8f 91       	pop	r24
    3d14:	7f 91       	pop	r23
    3d16:	6f 91       	pop	r22
    3d18:	5f 91       	pop	r21
    3d1a:	4f 91       	pop	r20
    3d1c:	3f 91       	pop	r19
    3d1e:	2f 91       	pop	r18
    3d20:	0f 90       	pop	r0
    3d22:	0b be       	out	0x3b, r0	; 59
    3d24:	0f 90       	pop	r0
    3d26:	0f be       	out	0x3f, r0	; 63
    3d28:	0f 90       	pop	r0
    3d2a:	1f 90       	pop	r1
    3d2c:	18 95       	reti

00003d2e <__vector_61>:
	#ifndef TRX24_CCA_ED_READY_vect
	  #define TRX24_CCA_ED_READY_vect TRX24_CCA_ED_DONE_vect
	#endif

	ISR(TRX24_CCA_ED_READY_vect)
	{
    3d2e:	1f 92       	push	r1
    3d30:	0f 92       	push	r0
    3d32:	0f b6       	in	r0, 0x3f	; 63
    3d34:	0f 92       	push	r0
    3d36:	11 24       	eor	r1, r1
    3d38:	0b b6       	in	r0, 0x3b	; 59
    3d3a:	0f 92       	push	r0
    3d3c:	2f 93       	push	r18
    3d3e:	3f 93       	push	r19
    3d40:	4f 93       	push	r20
    3d42:	5f 93       	push	r21
    3d44:	6f 93       	push	r22
    3d46:	7f 93       	push	r23
    3d48:	8f 93       	push	r24
    3d4a:	9f 93       	push	r25
    3d4c:	af 93       	push	r26
    3d4e:	bf 93       	push	r27
    3d50:	ef 93       	push	r30
    3d52:	ff 93       	push	r31
	    //    debugMsgStr("ccaend");

	    macEdCallback();
    3d54:	0e 94 96 25 	call	0x4b2c	; 0x4b2c <macEdCallback>
	}
    3d58:	ff 91       	pop	r31
    3d5a:	ef 91       	pop	r30
    3d5c:	bf 91       	pop	r27
    3d5e:	af 91       	pop	r26
    3d60:	9f 91       	pop	r25
    3d62:	8f 91       	pop	r24
    3d64:	7f 91       	pop	r23
    3d66:	6f 91       	pop	r22
    3d68:	5f 91       	pop	r21
    3d6a:	4f 91       	pop	r20
    3d6c:	3f 91       	pop	r19
    3d6e:	2f 91       	pop	r18
    3d70:	0f 90       	pop	r0
    3d72:	0b be       	out	0x3b, r0	; 59
    3d74:	0f 90       	pop	r0
    3d76:	0f be       	out	0x3f, r0	; 63
    3d78:	0f 90       	pop	r0
    3d7a:	1f 90       	pop	r1
    3d7c:	18 95       	reti

00003d7e <calibrate_rc_osc>:
    and monitor the CPU clock on an I/O pin.

    @return TRUE if calibrate passed; FALSE if calibrate failed.
*/
bool calibrate_rc_osc(void)
{
    3d7e:	cf 92       	push	r12
    3d80:	df 92       	push	r13
    3d82:	ef 92       	push	r14
    3d84:	ff 92       	push	r15
    3d86:	0f 93       	push	r16
    3d88:	1f 93       	push	r17
    3d8a:	cf 93       	push	r28
    3d8c:	df 93       	push	r29
    3d8e:	00 d0       	rcall	.+0      	; 0x3d90 <calibrate_rc_osc+0x12>
    3d90:	cd b7       	in	r28, 0x3d	; 61
    3d92:	de b7       	in	r29, 0x3e	; 62
    if (SERIAL && F_CPU >= 2000000UL) // only need for making serial port work
    {
        bool success = false;
        static bool once=0;

        if (once)
    3d94:	10 91 35 05 	lds	r17, 0x0535	; 0x800535 <once.3484>
    3d98:	11 23       	and	r17, r17
    3d9a:	11 f0       	breq	.+4      	; 0x3da0 <calibrate_rc_osc+0x22>
            // Only calibrate once
            return true;
    3d9c:	11 e0       	ldi	r17, 0x01	; 1
    3d9e:	58 c0       	rjmp	.+176    	; 0x3e50 <calibrate_rc_osc+0xd2>

        once = true;
    3da0:	81 e0       	ldi	r24, 0x01	; 1
    3da2:	80 93 35 05 	sts	0x0535, r24	; 0x800535 <once.3484>
        //   timer2 to overflow
        // Timer 2 (8-bit) is run from the main CPU clock divided by
        //   32.  This means the clock is 31250Hz at 1MHz, or 250KHz at 8MHz.
        //   Target time is 1024uS (8MHz) or 8192uS (1MHz).

        osccal_saved = OSCCAL;
    3da6:	f0 90 66 00 	lds	r15, 0x0066	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>
        cli();
    3daa:	f8 94       	cli

        radioSetClockSpeed(true, CLKM_1MHz);
    3dac:	61 e0       	ldi	r22, 0x01	; 1
    3dae:	0e 94 df 1b 	call	0x37be	; 0x37be <radioSetClockSpeed>

        // Save current values of timer status.
        tccr2b = TCCR2B;
    3db2:	c0 90 b1 00 	lds	r12, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
        tccr1b = TCCR1B;
    3db6:	d0 90 81 00 	lds	r13, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        tccr1a = TCCR1A;
    3dba:	e0 90 80 00 	lds	r14, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>

        // Stop timers 1 and 2.
        // Set timer 1 to normal mode (no CTC, no PWM, just count).
        TCCR2B = 0;
    3dbe:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
        TCCR1B = 0;
    3dc2:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        TCCR1A = 0;
    3dc6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3dca:	88 ee       	ldi	r24, 0xE8	; 232
    3dcc:	93 e0       	ldi	r25, 0x03	; 3

        for (counter = 0; counter < 1000;  counter++)
        {
            // Timer 2 driven from clock divided by 32
            TCCR2B = (1 << CS21) | (1 << CS20);
    3dce:	43 e0       	ldi	r20, 0x03	; 3
            // Timer 1 driven with external clock
            TCCR1B = (1 << CS12) | (1 << CS11);
    3dd0:	56 e0       	ldi	r21, 0x06	; 6

            // Clear pending timer 1 and 2 interrupts, and clear the
            // counters.
            TCNT2 = 0;
            TCNT1 = 0;
            TIFR1 = 0xFF;
    3dd2:	3f ef       	ldi	r19, 0xFF	; 255
        TCCR1A = 0;

        for (counter = 0; counter < 1000;  counter++)
        {
            // Timer 2 driven from clock divided by 32
            TCCR2B = (1 << CS21) | (1 << CS20);
    3dd4:	40 93 b1 00 	sts	0x00B1, r20	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
            // Timer 1 driven with external clock
            TCCR1B = (1 << CS12) | (1 << CS11);
    3dd8:	50 93 81 00 	sts	0x0081, r21	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

            // Clear pending timer 1 and 2 interrupts, and clear the
            // counters.
            TCNT2 = 0;
    3ddc:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
            TCNT1 = 0;
    3de0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    3de4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
            TIFR1 = 0xFF;
    3de8:	36 bb       	out	0x16, r19	; 22
            TIFR2 = 0xFF;
    3dea:	37 bb       	out	0x17, r19	; 23

            // Wait for timer 2 to overflow.
            while (!(TIFR2 & (1 << TOV2)))
    3dec:	b8 9b       	sbis	0x17, 0	; 23
    3dee:	fe cf       	rjmp	.-4      	; 0x3dec <calibrate_rc_osc+0x6e>
                ;

            temp = TCNT1;
    3df0:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    3df4:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    3df8:	7a 83       	std	Y+2, r23	; 0x02
    3dfa:	69 83       	std	Y+1, r22	; 0x01


            // Stop timer 1.  Now, TCNT1 contains the number of 1MHz RF2xx cycles
            // counted while timer 2 was counting CPU cycles
            TCCR1B = 0;
    3dfc:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
            TCCR2B = 0;
    3e00:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>

            if (temp < (u16)(0.995 * TARGETVAL))
    3e04:	69 81       	ldd	r22, Y+1	; 0x01
    3e06:	7a 81       	ldd	r23, Y+2	; 0x02
    3e08:	6d 3f       	cpi	r22, 0xFD	; 253
    3e0a:	71 40       	sbci	r23, 0x01	; 1
    3e0c:	20 f4       	brcc	.+8      	; 0x3e16 <calibrate_rc_osc+0x98>
            {
                // Too fast, slow down
                OSCCAL--;
    3e0e:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>
    3e12:	21 50       	subi	r18, 0x01	; 1
    3e14:	08 c0       	rjmp	.+16     	; 0x3e26 <calibrate_rc_osc+0xa8>
            }
            else if (temp > (u16)(1.005 * TARGETVAL))
    3e16:	69 81       	ldd	r22, Y+1	; 0x01
    3e18:	7a 81       	ldd	r23, Y+2	; 0x02
    3e1a:	63 30       	cpi	r22, 0x03	; 3
    3e1c:	72 40       	sbci	r23, 0x02	; 2
    3e1e:	48 f0       	brcs	.+18     	; 0x3e32 <calibrate_rc_osc+0xb4>
            {
                // Too slow, speed up
                OSCCAL++;
    3e20:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>
    3e24:	2f 5f       	subi	r18, 0xFF	; 255
    3e26:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>
    3e2a:	01 97       	sbiw	r24, 0x01	; 1
        // Set timer 1 to normal mode (no CTC, no PWM, just count).
        TCCR2B = 0;
        TCCR1B = 0;
        TCCR1A = 0;

        for (counter = 0; counter < 1000;  counter++)
    3e2c:	99 f6       	brne	.-90     	; 0x3dd4 <calibrate_rc_osc+0x56>
*/
bool calibrate_rc_osc(void)
{
    if (SERIAL && F_CPU >= 2000000UL) // only need for making serial port work
    {
        bool success = false;
    3e2e:	00 e0       	ldi	r16, 0x00	; 0
    3e30:	01 c0       	rjmp	.+2      	; 0x3e34 <calibrate_rc_osc+0xb6>
            }
            else
            {
                // We are within +/- 0.5 % of our target frequency, so we're
                // done.
                success = true;
    3e32:	01 e0       	ldi	r16, 0x01	; 1
                break;
            }
        }

        radioSetClockSpeed(true, CLKM_DISABLED);
    3e34:	60 e0       	ldi	r22, 0x00	; 0
    3e36:	81 e0       	ldi	r24, 0x01	; 1
    3e38:	0e 94 df 1b 	call	0x37be	; 0x37be <radioSetClockSpeed>

        // restore timer status regs
        TCCR2B = tccr2b;
    3e3c:	c0 92 b1 00 	sts	0x00B1, r12	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
        TCCR1B = tccr1b;
    3e40:	d0 92 81 00 	sts	0x0081, r13	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        TCCR1A = tccr1a;
    3e44:	e0 92 80 00 	sts	0x0080, r14	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
        if (!success)
    3e48:	01 11       	cpse	r16, r1
    3e4a:	a8 cf       	rjmp	.-176    	; 0x3d9c <calibrate_rc_osc+0x1e>
        {
            // We failed, therefore restore previous OSCCAL value.
            OSCCAL = osccal_saved;
    3e4c:	f0 92 66 00 	sts	0x0066, r15	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>

        return success;
    }
    else
        return 0;
}
    3e50:	81 2f       	mov	r24, r17
    3e52:	0f 90       	pop	r0
    3e54:	0f 90       	pop	r0
    3e56:	df 91       	pop	r29
    3e58:	cf 91       	pop	r28
    3e5a:	1f 91       	pop	r17
    3e5c:	0f 91       	pop	r16
    3e5e:	ff 90       	pop	r15
    3e60:	ef 90       	pop	r14
    3e62:	df 90       	pop	r13
    3e64:	cf 90       	pop	r12
    3e66:	08 95       	ret

00003e68 <halGetEeprom>:
   @param offset The offset in EEPROM of the start of the data block
   @param length The length in bytes of the data block
   @param dest  Pointer to the area in memory to place the data block
*/
void halGetEeprom(void *addr, u8 length, u8 *dest)
{
    3e68:	cf 93       	push	r28
    3e6a:	df 93       	push	r29
    3e6c:	1f 92       	push	r1
    3e6e:	cd b7       	in	r28, 0x3d	; 61
    3e70:	de b7       	in	r29, 0x3e	; 62
    3e72:	fc 01       	movw	r30, r24
    3e74:	ca 01       	movw	r24, r20
    AVR_ENTER_CRITICAL_REGION();
    3e76:	3f b7       	in	r19, 0x3f	; 63
    3e78:	39 83       	std	Y+1, r19	; 0x01
    3e7a:	f8 94       	cli
    eeprom_read_block (dest, addr, length);
    3e7c:	46 2f       	mov	r20, r22
    3e7e:	50 e0       	ldi	r21, 0x00	; 0
    3e80:	bf 01       	movw	r22, r30
    3e82:	0e 94 8a 35 	call	0x6b14	; 0x6b14 <eeprom_read_block>
    AVR_LEAVE_CRITICAL_REGION();
    3e86:	89 81       	ldd	r24, Y+1	; 0x01
    3e88:	8f bf       	out	0x3f, r24	; 63
}
    3e8a:	0f 90       	pop	r0
    3e8c:	df 91       	pop	r29
    3e8e:	cf 91       	pop	r28
    3e90:	08 95       	ret

00003e92 <halPutEeprom>:
   @param offset The offset in EEPROM of the start of the data block
   @param length The length in bytes of the data block
   @param src  Pointer to the area in memory which contains the data block
*/
void halPutEeprom(void *addr, u8 length, u8 *src)
{
    3e92:	cf 93       	push	r28
    3e94:	df 93       	push	r29
    3e96:	1f 92       	push	r1
    3e98:	cd b7       	in	r28, 0x3d	; 61
    3e9a:	de b7       	in	r29, 0x3e	; 62
    3e9c:	fc 01       	movw	r30, r24
    3e9e:	ca 01       	movw	r24, r20
    AVR_ENTER_CRITICAL_REGION();
    3ea0:	3f b7       	in	r19, 0x3f	; 63
    3ea2:	39 83       	std	Y+1, r19	; 0x01
    3ea4:	f8 94       	cli
    eeprom_write_block (src, addr, length);
    3ea6:	46 2f       	mov	r20, r22
    3ea8:	50 e0       	ldi	r21, 0x00	; 0
    3eaa:	bf 01       	movw	r22, r30
    3eac:	0e 94 ac 35 	call	0x6b58	; 0x6b58 <eeprom_write_block>
    AVR_LEAVE_CRITICAL_REGION();
    3eb0:	89 81       	ldd	r24, Y+1	; 0x01
    3eb2:	8f bf       	out	0x3f, r24	; 63
}
    3eb4:	0f 90       	pop	r0
    3eb6:	df 91       	pop	r29
    3eb8:	cf 91       	pop	r28
    3eba:	08 95       	ret

00003ebc <macInit>:

   @param Channel Sets the channel to use for the MAC.  Use 0xff for
   non-coordinator nodes.
*/
void macInit(u8 Channel)
{
    3ebc:	1f 93       	push	r17
    3ebe:	cf 93       	push	r28
    3ec0:	df 93       	push	r29
    3ec2:	cd b7       	in	r28, 0x3d	; 61
    3ec4:	de b7       	in	r29, 0x3e	; 62
    3ec6:	28 97       	sbiw	r28, 0x08	; 8
    3ec8:	0f b6       	in	r0, 0x3f	; 63
    3eca:	f8 94       	cli
    3ecc:	de bf       	out	0x3e, r29	; 62
    3ece:	0f be       	out	0x3f, r0	; 63
    3ed0:	cd bf       	out	0x3d, r28	; 61
    3ed2:	18 2f       	mov	r17, r24
    // ETG DEBUG
    // Base address of the GPIO modules.
  //  volatile avr32_gpio_t * myGpio = &AVR32_GPIO;
#endif

    macConfig.panId = BROADCASTPANID;
    3ed4:	2f ef       	ldi	r18, 0xFF	; 255
    3ed6:	3f ef       	ldi	r19, 0xFF	; 255
    3ed8:	30 93 48 0c 	sts	0x0C48, r19	; 0x800c48 <macConfig+0xc>
    3edc:	20 93 47 0c 	sts	0x0C47, r18	; 0x800c47 <macConfig+0xb>
    macConfig.shortAddress = BROADCASTADDR;
    3ee0:	30 93 4a 0c 	sts	0x0C4A, r19	; 0x800c4a <macConfig+0xe>
    3ee4:	20 93 49 0c 	sts	0x0C49, r18	; 0x800c49 <macConfig+0xd>
    macConfig.associated = false;
    3ee8:	10 92 44 0c 	sts	0x0C44, r1	; 0x800c44 <macConfig+0x8>

    macConfig.parentShortAddress = BROADCASTADDR;
    3eec:	30 93 4c 0c 	sts	0x0C4C, r19	; 0x800c4c <macConfig+0x10>
    3ef0:	20 93 4b 0c 	sts	0x0C4B, r18	; 0x800c4b <macConfig+0xf>
    macConfig.lastRoute = BROADCASTADDR;
    3ef4:	30 93 4e 0c 	sts	0x0C4E, r19	; 0x800c4e <macConfig+0x12>
    3ef8:	20 93 4d 0c 	sts	0x0C4D, r18	; 0x800c4d <macConfig+0x11>
    macConfig.hopsToCoord = 0;
    3efc:	10 92 4f 0c 	sts	0x0C4F, r1	; 0x800c4f <macConfig+0x13>
    macConfig.busy = 0;
    3f00:	10 92 53 0c 	sts	0x0C53, r1	; 0x800c53 <macConfig+0x17>
    macConfig.sleeping = 1; // Assume sleeping state initially
    3f04:	81 e0       	ldi	r24, 0x01	; 1
    3f06:	80 93 54 0c 	sts	0x0C54, r24	; 0x800c54 <macConfig+0x18>

    // Init radio
    radioInit(SERIAL ? true : false);
    3f0a:	0e 94 1e 1c 	call	0x383c	; 0x383c <radioInit>

    // Set the channel
    macConfig.currentChannel = Channel;
    3f0e:	10 93 50 0c 	sts	0x0C50, r17	; 0x800c50 <macConfig+0x14>
    if (Channel != 0xff)
    3f12:	1f 3f       	cpi	r17, 0xFF	; 255
    3f14:	19 f0       	breq	.+6      	; 0x3f1c <macInit+0x60>
        radioSetOperatingChannel(Channel);
    3f16:	81 2f       	mov	r24, r17
    3f18:	0e 94 ae 1b 	call	0x375c	; 0x375c <radioSetOperatingChannel>

    radioUseAutoTxCrc(true);
    3f1c:	81 e0       	ldi	r24, 0x01	; 1
    3f1e:	0e 94 4a 1c 	call	0x3894	; 0x3894 <radioUseAutoTxCrc>
    radioSetTrxState(TRX_OFF);
    3f22:	88 e0       	ldi	r24, 0x08	; 8
    3f24:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <radioSetTrxState>

    // Set RF212 to 250KB mode.
    radioSetup900();
    3f28:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <radioSetup900>

    // Set ack times shorter
   /// hal_subregister_write(SR_AACK_ACK_TIME, 1); //longer ack response time seems to work better, pb

    radioSetTrxState(RX_AACK_ON);
    3f2c:	86 e1       	ldi	r24, 0x16	; 22
    3f2e:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <radioSetTrxState>
    // DEBUG
//    myGpio->port[0].ovr &= ~(1<<0);
#endif

    // Setup the address of this device by reading a stored address from eeprom.
    halGetMacAddr((u8*)&(macConfig.longAddr));
    3f32:	4c e3       	ldi	r20, 0x3C	; 60
    3f34:	5c e0       	ldi	r21, 0x0C	; 12
    3f36:	68 e0       	ldi	r22, 0x08	; 8
    3f38:	80 e0       	ldi	r24, 0x00	; 0
    3f3a:	90 e0       	ldi	r25, 0x00	; 0
    3f3c:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <halGetEeprom>

    // Set up radio's coordinator flag
    radioSetDeviceRole(NODETYPE == COORD);
    3f40:	80 e0       	ldi	r24, 0x00	; 0
    3f42:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <radioSetDeviceRole>

    // Setup radio's short addess
    radioSetShortAddress(BROADCASTADDR);
    3f46:	8f ef       	ldi	r24, 0xFF	; 255
    3f48:	9f ef       	ldi	r25, 0xFF	; 255
    3f4a:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <radioSetShortAddress>

    // Setup radio's PANID
    radioSetPanId(BROADCASTPANID);
    3f4e:	8f ef       	ldi	r24, 0xFF	; 255
    3f50:	9f ef       	ldi	r25, 0xFF	; 255
    3f52:	0e 94 d5 1d 	call	0x3baa	; 0x3baa <radioSetPanId>

    // Set up the radio for auto mode operation.
    hal_subregister_write( SR_MAX_FRAME_RETRIES, 2 );
    3f56:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <__TEXT_REGION_LENGTH__+0x7e016c>
    3f5a:	8f 70       	andi	r24, 0x0F	; 15
    3f5c:	80 62       	ori	r24, 0x20	; 32
    3f5e:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <__TEXT_REGION_LENGTH__+0x7e016c>

    // Load the long address into the radio. Needed for auto modes.
// ETG
    u64 longAddr = htons_64(macConfig.longAddr);
    3f62:	80 91 3c 0c 	lds	r24, 0x0C3C	; 0x800c3c <macConfig>
    3f66:	89 83       	std	Y+1, r24	; 0x01
    3f68:	80 91 3d 0c 	lds	r24, 0x0C3D	; 0x800c3d <macConfig+0x1>
    3f6c:	8a 83       	std	Y+2, r24	; 0x02
    3f6e:	80 91 3e 0c 	lds	r24, 0x0C3E	; 0x800c3e <macConfig+0x2>
    3f72:	8b 83       	std	Y+3, r24	; 0x03
    3f74:	80 91 3f 0c 	lds	r24, 0x0C3F	; 0x800c3f <macConfig+0x3>
    3f78:	8c 83       	std	Y+4, r24	; 0x04
    3f7a:	80 91 40 0c 	lds	r24, 0x0C40	; 0x800c40 <macConfig+0x4>
    3f7e:	8d 83       	std	Y+5, r24	; 0x05
    3f80:	80 91 41 0c 	lds	r24, 0x0C41	; 0x800c41 <macConfig+0x5>
    3f84:	8e 83       	std	Y+6, r24	; 0x06
    3f86:	80 91 42 0c 	lds	r24, 0x0C42	; 0x800c42 <macConfig+0x6>
    3f8a:	8f 83       	std	Y+7, r24	; 0x07
    3f8c:	80 91 43 0c 	lds	r24, 0x0C43	; 0x800c43 <macConfig+0x7>
    3f90:	88 87       	std	Y+8, r24	; 0x08
// ETG    radioSetExtendedAddress((uint8_t *)&macConfig.longAddr);
    radioSetExtendedAddress((uint8_t *)&longAddr);
    3f92:	ce 01       	movw	r24, r28
    3f94:	01 96       	adiw	r24, 0x01	; 1
    3f96:	0e 94 df 1d 	call	0x3bbe	; 0x3bbe <radioSetExtendedAddress>

    // Initialize the array of nodes (coordinator only)
    macInitNodes();
    3f9a:	0e 94 a7 20 	call	0x414e	; 0x414e <macInitNodes>
}
    3f9e:	28 96       	adiw	r28, 0x08	; 8
    3fa0:	0f b6       	in	r0, 0x3f	; 63
    3fa2:	f8 94       	cli
    3fa4:	de bf       	out	0x3e, r29	; 62
    3fa6:	0f be       	out	0x3f, r0	; 63
    3fa8:	cd bf       	out	0x3d, r28	; 61
    3faa:	df 91       	pop	r29
    3fac:	cf 91       	pop	r28
    3fae:	1f 91       	pop	r17
    3fb0:	08 95       	ret

00003fb2 <macSetOperatingChannel>:
   @param channel The channel number to use for radio communication.
*/
void macSetOperatingChannel(u8 channel)
{
    // Set the channel
    macConfig.currentChannel = channel;
    3fb2:	80 93 50 0c 	sts	0x0C50, r24	; 0x800c50 <macConfig+0x14>
    radioSetOperatingChannel(channel);
    3fb6:	0c 94 ae 1b 	jmp	0x375c	; 0x375c <radioSetOperatingChannel>

00003fba <macAssociationConfirm>:
   parent.

   @param addr The short address of the child node that has woken up.
*/
void macClearChildWakeFlag(u16 addr)
{
    3fba:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <associationTimer>
    3fbe:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <macTimerEnd>
    3fc2:	90 91 44 0c 	lds	r25, 0x0C44	; 0x800c44 <macConfig+0x8>
    3fc6:	81 e0       	ldi	r24, 0x01	; 1
    3fc8:	89 27       	eor	r24, r25
    3fca:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <appAssociateConfirm>

00003fce <macAssociate>:
    3fce:	cf 93       	push	r28
    3fd0:	df 93       	push	r29
    3fd2:	ec 01       	movw	r28, r24
    3fd4:	86 2f       	mov	r24, r22
    3fd6:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <macSetOperatingChannel>
    3fda:	ea eb       	ldi	r30, 0xBA	; 186
    3fdc:	fb e0       	ldi	r31, 0x0B	; 11
    3fde:	83 e6       	ldi	r24, 0x63	; 99
    3fe0:	98 ec       	ldi	r25, 0xC8	; 200
    3fe2:	92 83       	std	Z+2, r25	; 0x02
    3fe4:	81 83       	std	Z+1, r24	; 0x01
    3fe6:	ac e3       	ldi	r26, 0x3C	; 60
    3fe8:	bc e0       	ldi	r27, 0x0C	; 12
    3fea:	1a 96       	adiw	r26, 0x0a	; 10
    3fec:	8c 91       	ld	r24, X
    3fee:	1a 97       	sbiw	r26, 0x0a	; 10
    3ff0:	91 e0       	ldi	r25, 0x01	; 1
    3ff2:	98 0f       	add	r25, r24
    3ff4:	1a 96       	adiw	r26, 0x0a	; 10
    3ff6:	9c 93       	st	X, r25
    3ff8:	1a 97       	sbiw	r26, 0x0a	; 10
    3ffa:	83 83       	std	Z+3, r24	; 0x03
    3ffc:	1b 96       	adiw	r26, 0x0b	; 11
    3ffe:	8d 91       	ld	r24, X+
    4000:	9c 91       	ld	r25, X
    4002:	1c 97       	sbiw	r26, 0x0c	; 12
    4004:	95 83       	std	Z+5, r25	; 0x05
    4006:	84 83       	std	Z+4, r24	; 0x04
    4008:	d7 83       	std	Z+7, r29	; 0x07
    400a:	c6 83       	std	Z+6, r28	; 0x06
    400c:	8c 91       	ld	r24, X
    400e:	80 87       	std	Z+8, r24	; 0x08
    4010:	11 96       	adiw	r26, 0x01	; 1
    4012:	8c 91       	ld	r24, X
    4014:	11 97       	sbiw	r26, 0x01	; 1
    4016:	81 87       	std	Z+9, r24	; 0x09
    4018:	12 96       	adiw	r26, 0x02	; 2
    401a:	8c 91       	ld	r24, X
    401c:	12 97       	sbiw	r26, 0x02	; 2
    401e:	82 87       	std	Z+10, r24	; 0x0a
    4020:	13 96       	adiw	r26, 0x03	; 3
    4022:	8c 91       	ld	r24, X
    4024:	13 97       	sbiw	r26, 0x03	; 3
    4026:	83 87       	std	Z+11, r24	; 0x0b
    4028:	14 96       	adiw	r26, 0x04	; 4
    402a:	8c 91       	ld	r24, X
    402c:	14 97       	sbiw	r26, 0x04	; 4
    402e:	84 87       	std	Z+12, r24	; 0x0c
    4030:	15 96       	adiw	r26, 0x05	; 5
    4032:	8c 91       	ld	r24, X
    4034:	15 97       	sbiw	r26, 0x05	; 5
    4036:	85 87       	std	Z+13, r24	; 0x0d
    4038:	16 96       	adiw	r26, 0x06	; 6
    403a:	8c 91       	ld	r24, X
    403c:	16 97       	sbiw	r26, 0x06	; 6
    403e:	86 87       	std	Z+14, r24	; 0x0e
    4040:	17 96       	adiw	r26, 0x07	; 7
    4042:	8c 91       	ld	r24, X
    4044:	87 87       	std	Z+15, r24	; 0x0f
    4046:	81 e0       	ldi	r24, 0x01	; 1
    4048:	80 8b       	std	Z+16, r24	; 0x10
    404a:	d2 8b       	std	Z+18, r29	; 0x12
    404c:	c1 8b       	std	Z+17, r28	; 0x11
    404e:	82 e0       	ldi	r24, 0x02	; 2
    4050:	83 8b       	std	Z+19, r24	; 0x13
    4052:	6b eb       	ldi	r22, 0xBB	; 187
    4054:	7b e0       	ldi	r23, 0x0B	; 11
    4056:	83 e1       	ldi	r24, 0x13	; 19
    4058:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <radioSendData>
    405c:	6d ed       	ldi	r22, 0xDD	; 221
    405e:	7f e1       	ldi	r23, 0x1F	; 31
    4060:	88 ee       	ldi	r24, 0xE8	; 232
    4062:	93 e0       	ldi	r25, 0x03	; 3
    4064:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <macSetAlarm>
    4068:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <associationTimer>
    406c:	df 91       	pop	r29
    406e:	cf 91       	pop	r28
    4070:	08 95       	ret

00004072 <macIsChild>:
    4072:	00 97       	sbiw	r24, 0x00	; 0
    4074:	61 f0       	breq	.+24     	; 0x408e <macIsChild+0x1c>
    4076:	e6 e3       	ldi	r30, 0x36	; 54
    4078:	f5 e0       	ldi	r31, 0x05	; 5
    407a:	20 81       	ld	r18, Z
    407c:	31 81       	ldd	r19, Z+1	; 0x01
    407e:	28 17       	cp	r18, r24
    4080:	39 07       	cpc	r19, r25
    4082:	39 f0       	breq	.+14     	; 0x4092 <macIsChild+0x20>
    4084:	33 96       	adiw	r30, 0x03	; 3
    4086:	26 e0       	ldi	r18, 0x06	; 6
    4088:	e2 36       	cpi	r30, 0x62	; 98
    408a:	f2 07       	cpc	r31, r18
    408c:	b1 f7       	brne	.-20     	; 0x407a <macIsChild+0x8>
    408e:	80 e0       	ldi	r24, 0x00	; 0
    4090:	08 95       	ret
    4092:	81 e0       	ldi	r24, 0x01	; 1
    4094:	08 95       	ret

00004096 <macAddChild>:
    4096:	e6 e3       	ldi	r30, 0x36	; 54
    4098:	f5 e0       	ldi	r31, 0x05	; 5
    409a:	df 01       	movw	r26, r30
    409c:	20 e0       	ldi	r18, 0x00	; 0
    409e:	30 e0       	ldi	r19, 0x00	; 0
    40a0:	4d 91       	ld	r20, X+
    40a2:	5c 91       	ld	r21, X
    40a4:	11 97       	sbiw	r26, 0x01	; 1
    40a6:	48 17       	cp	r20, r24
    40a8:	59 07       	cpc	r21, r25
    40aa:	69 f4       	brne	.+26     	; 0x40c6 <macAddChild+0x30>
    40ac:	f9 01       	movw	r30, r18
    40ae:	ee 0f       	add	r30, r30
    40b0:	ff 1f       	adc	r31, r31
    40b2:	2e 0f       	add	r18, r30
    40b4:	3f 1f       	adc	r19, r31
    40b6:	f9 01       	movw	r30, r18
    40b8:	e8 5c       	subi	r30, 0xC8	; 200
    40ba:	fa 4f       	sbci	r31, 0xFA	; 250
    40bc:	80 81       	ld	r24, Z
    40be:	8e 7f       	andi	r24, 0xFE	; 254
    40c0:	8d 7f       	andi	r24, 0xFD	; 253
    40c2:	80 83       	st	Z, r24
    40c4:	08 95       	ret
    40c6:	2f 5f       	subi	r18, 0xFF	; 255
    40c8:	3f 4f       	sbci	r19, 0xFF	; 255
    40ca:	13 96       	adiw	r26, 0x03	; 3
    40cc:	24 36       	cpi	r18, 0x64	; 100
    40ce:	31 05       	cpc	r19, r1
    40d0:	39 f7       	brne	.-50     	; 0x40a0 <macAddChild+0xa>
    40d2:	20 e0       	ldi	r18, 0x00	; 0
    40d4:	30 e0       	ldi	r19, 0x00	; 0
    40d6:	42 2f       	mov	r20, r18
    40d8:	60 81       	ld	r22, Z
    40da:	71 81       	ldd	r23, Z+1	; 0x01
    40dc:	67 2b       	or	r22, r23
    40de:	a9 f4       	brne	.+42     	; 0x410a <macAddChild+0x74>
    40e0:	f9 01       	movw	r30, r18
    40e2:	ee 0f       	add	r30, r30
    40e4:	ff 1f       	adc	r31, r31
    40e6:	2e 0f       	add	r18, r30
    40e8:	3f 1f       	adc	r19, r31
    40ea:	f9 01       	movw	r30, r18
    40ec:	ea 5c       	subi	r30, 0xCA	; 202
    40ee:	fa 4f       	sbci	r31, 0xFA	; 250
    40f0:	91 83       	std	Z+1, r25	; 0x01
    40f2:	80 83       	st	Z, r24
    40f4:	f9 01       	movw	r30, r18
    40f6:	e8 5c       	subi	r30, 0xC8	; 200
    40f8:	fa 4f       	sbci	r31, 0xFA	; 250
    40fa:	90 81       	ld	r25, Z
    40fc:	9e 7f       	andi	r25, 0xFE	; 254
    40fe:	9d 7f       	andi	r25, 0xFD	; 253
    4100:	90 83       	st	Z, r25
    4102:	84 2f       	mov	r24, r20
    4104:	90 e0       	ldi	r25, 0x00	; 0
    4106:	0c 94 4f 02 	jmp	0x49e	; 0x49e <appChildAssociated>
    410a:	2f 5f       	subi	r18, 0xFF	; 255
    410c:	3f 4f       	sbci	r19, 0xFF	; 255
    410e:	33 96       	adiw	r30, 0x03	; 3
    4110:	24 36       	cpi	r18, 0x64	; 100
    4112:	31 05       	cpc	r19, r1
    4114:	01 f7       	brne	.-64     	; 0x40d6 <macAddChild+0x40>
    4116:	08 95       	ret

00004118 <macRemoveChild>:
    4118:	e6 e3       	ldi	r30, 0x36	; 54
    411a:	f5 e0       	ldi	r31, 0x05	; 5
    411c:	20 e0       	ldi	r18, 0x00	; 0
    411e:	30 e0       	ldi	r19, 0x00	; 0
    4120:	40 81       	ld	r20, Z
    4122:	51 81       	ldd	r21, Z+1	; 0x01
    4124:	48 17       	cp	r20, r24
    4126:	59 07       	cpc	r21, r25
    4128:	59 f4       	brne	.+22     	; 0x4140 <macRemoveChild+0x28>
    412a:	f9 01       	movw	r30, r18
    412c:	ee 0f       	add	r30, r30
    412e:	ff 1f       	adc	r31, r31
    4130:	2e 0f       	add	r18, r30
    4132:	3f 1f       	adc	r19, r31
    4134:	f9 01       	movw	r30, r18
    4136:	ea 5c       	subi	r30, 0xCA	; 202
    4138:	fa 4f       	sbci	r31, 0xFA	; 250
    413a:	11 82       	std	Z+1, r1	; 0x01
    413c:	10 82       	st	Z, r1
    413e:	08 95       	ret
    4140:	2f 5f       	subi	r18, 0xFF	; 255
    4142:	3f 4f       	sbci	r19, 0xFF	; 255
    4144:	33 96       	adiw	r30, 0x03	; 3
    4146:	24 36       	cpi	r18, 0x64	; 100
    4148:	31 05       	cpc	r19, r1
    414a:	51 f7       	brne	.-44     	; 0x4120 <macRemoveChild+0x8>
    414c:	08 95       	ret

0000414e <macInitNodes>:
    414e:	08 95       	ret

00004150 <macWakeChildNode>:
    4150:	08 95       	ret

00004152 <macChildIsAwake>:
   This function is called on the receipt of every packet.

   @param frame Pointer to ftData struct, the received packet.
*/
void macChildIsAwake(ftData *frame)
{
    4152:	fc 01       	movw	r30, r24
            if (RUMSLEEP)
                macSendStoredFrame(addr);
        }
    }
    // Reset the sleeping bit in the frame.
    frame->type &= ~0x80;
    4154:	95 85       	ldd	r25, Z+13	; 0x0d
    4156:	9f 77       	andi	r25, 0x7F	; 127
    4158:	95 87       	std	Z+13, r25	; 0x0d
    415a:	08 95       	ret

0000415c <sendBeaconFrame>:
{
    if (NODETYPE != ENDDEVICE)
    {
        ftBeacon* data_frame = (ftBeacon*)(mac_buffer_tx+1);

        data_frame->fcf   = htons_16(FCF_BEACON);
    415c:	ea eb       	ldi	r30, 0xBA	; 186
    415e:	fb e0       	ldi	r31, 0x0B	; 11
    4160:	80 e0       	ldi	r24, 0x00	; 0
    4162:	90 e8       	ldi	r25, 0x80	; 128
    4164:	92 83       	std	Z+2, r25	; 0x02
    4166:	81 83       	std	Z+1, r24	; 0x01
        data_frame->seq   = macConfig.bsn++;
    4168:	ac e3       	ldi	r26, 0x3C	; 60
    416a:	bc e0       	ldi	r27, 0x0C	; 12
    416c:	19 96       	adiw	r26, 0x09	; 9
    416e:	8c 91       	ld	r24, X
    4170:	19 97       	sbiw	r26, 0x09	; 9
    4172:	91 e0       	ldi	r25, 0x01	; 1
    4174:	98 0f       	add	r25, r24
    4176:	19 96       	adiw	r26, 0x09	; 9
    4178:	9c 93       	st	X, r25
    417a:	19 97       	sbiw	r26, 0x09	; 9
    417c:	83 83       	std	Z+3, r24	; 0x03
        data_frame->panid = htons_16(macConfig.panId);
    417e:	1b 96       	adiw	r26, 0x0b	; 11
    4180:	8d 91       	ld	r24, X+
    4182:	9c 91       	ld	r25, X
    4184:	1c 97       	sbiw	r26, 0x0c	; 12
    4186:	95 83       	std	Z+5, r25	; 0x05
    4188:	84 83       	std	Z+4, r24	; 0x04
        data_frame->addr  = htons_16(macConfig.shortAddress);
    418a:	1d 96       	adiw	r26, 0x0d	; 13
    418c:	8d 91       	ld	r24, X+
    418e:	9c 91       	ld	r25, X
    4190:	1e 97       	sbiw	r26, 0x0e	; 14
    4192:	97 83       	std	Z+7, r25	; 0x07
    4194:	86 83       	std	Z+6, r24	; 0x06

        if (NODETYPE == ROUTER)
            data_frame->superFrame = htons_16(ROUTER_SUPERFRAME);
    4196:	8f ef       	ldi	r24, 0xFF	; 255
    4198:	90 e0       	ldi	r25, 0x00	; 0
    419a:	91 87       	std	Z+9, r25	; 0x09
    419c:	80 87       	std	Z+8, r24	; 0x08
        else
            data_frame->superFrame = htons_16(COORD_SUPERFRAME);

        data_frame->netID = 0x06;
    419e:	86 e0       	ldi	r24, 0x06	; 6
    41a0:	82 87       	std	Z+10, r24	; 0x0a
        data_frame->hops = macConfig.hopsToCoord;
    41a2:	53 96       	adiw	r26, 0x13	; 19
    41a4:	8c 91       	ld	r24, X
    41a6:	83 87       	std	Z+11, r24	; 0x0b

        // send data to radio.
        radioSendData(sizeof(ftBeacon), (u8 *)data_frame);
    41a8:	6b eb       	ldi	r22, 0xBB	; 187
    41aa:	7b e0       	ldi	r23, 0x0B	; 11
    41ac:	8b e0       	ldi	r24, 0x0B	; 11
    41ae:	0c 94 97 1d 	jmp	0x3b2e	; 0x3b2e <radioSendData>

000041b2 <mdr_timer>:
    @param data Pointer to the data to be sent.

    @ingroup avr6lowpan
*/
void macsixlowpanDataRequest(u16 addr, u8 len, u8 * data)
{
    41b2:	6b eb       	ldi	r22, 0xBB	; 187
    41b4:	7b e0       	ldi	r23, 0x0B	; 11
    41b6:	80 91 ba 0b 	lds	r24, 0x0BBA	; 0x800bba <mac_buffer_tx>
    41ba:	0c 94 97 1d 	jmp	0x3b2e	; 0x3b2e <radioSendData>

000041be <macDataRequestInt>:
    41be:	ef 92       	push	r14
    41c0:	ff 92       	push	r15
    41c2:	0f 93       	push	r16
    41c4:	1f 93       	push	r17
    41c6:	cf 93       	push	r28
    41c8:	df 93       	push	r29
    41ca:	e0 91 49 0c 	lds	r30, 0x0C49	; 0x800c49 <macConfig+0xd>
    41ce:	f0 91 4a 0c 	lds	r31, 0x0C4A	; 0x800c4a <macConfig+0xe>
    41d2:	8e 17       	cp	r24, r30
    41d4:	9f 07       	cpc	r25, r31
    41d6:	09 f4       	brne	.+2      	; 0x41da <macDataRequestInt+0x1c>
    41d8:	6e c0       	rjmp	.+220    	; 0x42b6 <macDataRequestInt+0xf8>
    41da:	8f 3f       	cpi	r24, 0xFF	; 255
    41dc:	3f ef       	ldi	r19, 0xFF	; 255
    41de:	93 07       	cpc	r25, r19
    41e0:	09 f4       	brne	.+2      	; 0x41e4 <macDataRequestInt+0x26>
    41e2:	69 c0       	rjmp	.+210    	; 0x42b6 <macDataRequestInt+0xf8>
    41e4:	30 91 44 0c 	lds	r19, 0x0C44	; 0x800c44 <macConfig+0x8>
    41e8:	33 23       	and	r19, r19
    41ea:	09 f4       	brne	.+2      	; 0x41ee <macDataRequestInt+0x30>
    41ec:	64 c0       	rjmp	.+200    	; 0x42b6 <macDataRequestInt+0xf8>
    41ee:	c2 2f       	mov	r28, r18
    41f0:	7a 01       	movw	r14, r20
    41f2:	d6 2f       	mov	r29, r22
    41f4:	8c 01       	movw	r16, r24
    41f6:	81 e6       	ldi	r24, 0x61	; 97
    41f8:	98 e8       	ldi	r25, 0x88	; 136
    41fa:	90 93 bc 0b 	sts	0x0BBC, r25	; 0x800bbc <mac_buffer_tx+0x2>
    41fe:	80 93 bb 0b 	sts	0x0BBB, r24	; 0x800bbb <mac_buffer_tx+0x1>
    4202:	80 91 46 0c 	lds	r24, 0x0C46	; 0x800c46 <macConfig+0xa>
    4206:	91 e0       	ldi	r25, 0x01	; 1
    4208:	98 0f       	add	r25, r24
    420a:	90 93 46 0c 	sts	0x0C46, r25	; 0x800c46 <macConfig+0xa>
    420e:	80 93 bd 0b 	sts	0x0BBD, r24	; 0x800bbd <mac_buffer_tx+0x3>
    4212:	80 91 47 0c 	lds	r24, 0x0C47	; 0x800c47 <macConfig+0xb>
    4216:	90 91 48 0c 	lds	r25, 0x0C48	; 0x800c48 <macConfig+0xc>
    421a:	90 93 bf 0b 	sts	0x0BBF, r25	; 0x800bbf <mac_buffer_tx+0x5>
    421e:	80 93 be 0b 	sts	0x0BBE, r24	; 0x800bbe <mac_buffer_tx+0x4>
    4222:	f0 93 c3 0b 	sts	0x0BC3, r31	; 0x800bc3 <mac_buffer_tx+0x9>
    4226:	e0 93 c2 0b 	sts	0x0BC2, r30	; 0x800bc2 <mac_buffer_tx+0x8>
    422a:	10 93 c5 0b 	sts	0x0BC5, r17	; 0x800bc5 <mac_buffer_tx+0xb>
    422e:	00 93 c4 0b 	sts	0x0BC4, r16	; 0x800bc4 <mac_buffer_tx+0xa>
    4232:	f0 93 c7 0b 	sts	0x0BC7, r31	; 0x800bc7 <mac_buffer_tx+0xd>
    4236:	e0 93 c6 0b 	sts	0x0BC6, r30	; 0x800bc6 <mac_buffer_tx+0xc>
    423a:	c8 01       	movw	r24, r16
    423c:	0e 94 b0 24 	call	0x4960	; 0x4960 <macSendRoutingPacket>
    4240:	c6 30       	cpi	r28, 0x06	; 6
    4242:	29 f4       	brne	.+10     	; 0x424e <macDataRequestInt+0x90>
    4244:	10 93 c1 0b 	sts	0x0BC1, r17	; 0x800bc1 <mac_buffer_tx+0x7>
    4248:	00 93 c0 0b 	sts	0x0BC0, r16	; 0x800bc0 <mac_buffer_tx+0x6>
    424c:	08 c0       	rjmp	.+16     	; 0x425e <macDataRequestInt+0xa0>
    424e:	80 91 4b 0c 	lds	r24, 0x0C4B	; 0x800c4b <macConfig+0xf>
    4252:	90 91 4c 0c 	lds	r25, 0x0C4C	; 0x800c4c <macConfig+0x10>
    4256:	90 93 c1 0b 	sts	0x0BC1, r25	; 0x800bc1 <mac_buffer_tx+0x7>
    425a:	80 93 c0 0b 	sts	0x0BC0, r24	; 0x800bc0 <mac_buffer_tx+0x6>
    425e:	c0 93 c8 0b 	sts	0x0BC8, r28	; 0x800bc8 <mac_buffer_tx+0xe>
    4262:	f7 01       	movw	r30, r14
    4264:	29 ec       	ldi	r18, 0xC9	; 201
    4266:	3b e0       	ldi	r19, 0x0B	; 11
    4268:	d9 01       	movw	r26, r18
    426a:	8a 2f       	mov	r24, r26
    426c:	82 1b       	sub	r24, r18
    426e:	8d 17       	cp	r24, r29
    4270:	18 f4       	brcc	.+6      	; 0x4278 <macDataRequestInt+0xba>
    4272:	81 91       	ld	r24, Z+
    4274:	8d 93       	st	X+, r24
    4276:	f9 cf       	rjmp	.-14     	; 0x426a <macDataRequestInt+0xac>
    4278:	80 91 c0 0b 	lds	r24, 0x0BC0	; 0x800bc0 <mac_buffer_tx+0x6>
    427c:	90 91 c1 0b 	lds	r25, 0x0BC1	; 0x800bc1 <mac_buffer_tx+0x7>
    4280:	20 91 49 0c 	lds	r18, 0x0C49	; 0x800c49 <macConfig+0xd>
    4284:	30 91 4a 0c 	lds	r19, 0x0C4A	; 0x800c4a <macConfig+0xe>
    4288:	82 17       	cp	r24, r18
    428a:	93 07       	cpc	r25, r19
    428c:	a1 f0       	breq	.+40     	; 0x42b6 <macDataRequestInt+0xf8>
    428e:	01 96       	adiw	r24, 0x01	; 1
    4290:	91 f0       	breq	.+36     	; 0x42b6 <macDataRequestInt+0xf8>
    4292:	d2 5f       	subi	r29, 0xF2	; 242
    4294:	d0 93 ba 0b 	sts	0x0BBA, r29	; 0x800bba <mac_buffer_tx>
    4298:	c6 50       	subi	r28, 0x06	; 6
    429a:	c2 30       	cpi	r28, 0x02	; 2
    429c:	18 f0       	brcs	.+6      	; 0x42a4 <macDataRequestInt+0xe6>
    429e:	87 e0       	ldi	r24, 0x07	; 7
    42a0:	90 e0       	ldi	r25, 0x00	; 0
    42a2:	02 c0       	rjmp	.+4      	; 0x42a8 <macDataRequestInt+0xea>
    42a4:	80 e0       	ldi	r24, 0x00	; 0
    42a6:	90 e0       	ldi	r25, 0x00	; 0
    42a8:	69 ed       	ldi	r22, 0xD9	; 217
    42aa:	70 e2       	ldi	r23, 0x20	; 32
    42ac:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <macSetAlarm>
    42b0:	81 e0       	ldi	r24, 0x01	; 1
    42b2:	80 93 53 0c 	sts	0x0C53, r24	; 0x800c53 <macConfig+0x17>
    42b6:	df 91       	pop	r29
    42b8:	cf 91       	pop	r28
    42ba:	1f 91       	pop	r17
    42bc:	0f 91       	pop	r16
    42be:	ff 90       	pop	r15
    42c0:	ef 90       	pop	r14
    42c2:	08 95       	ret

000042c4 <macDataRequest>:
    42c4:	21 e0       	ldi	r18, 0x01	; 1
    42c6:	0c 94 df 20 	jmp	0x41be	; 0x41be <macDataRequestInt>

000042ca <macDataIndication>:
                fnDebugMsg("\r\nData indication buffer problem");
        }
    }
#endif

    switch (frame->type & 0x7f)  // Mask high bit just in case it was somehow missed
    42ca:	80 91 46 0b 	lds	r24, 0x0B46	; 0x800b46 <mac_buffer_rx+0xe>
    42ce:	8f 77       	andi	r24, 0x7F	; 127
    42d0:	83 30       	cpi	r24, 0x03	; 3
    42d2:	29 f1       	breq	.+74     	; 0x431e <macDataIndication+0x54>
    42d4:	28 f4       	brcc	.+10     	; 0x42e0 <macDataIndication+0x16>
    42d6:	81 30       	cpi	r24, 0x01	; 1
    42d8:	41 f0       	breq	.+16     	; 0x42ea <macDataIndication+0x20>
    42da:	82 30       	cpi	r24, 0x02	; 2
    42dc:	d1 f0       	breq	.+52     	; 0x4312 <macDataIndication+0x48>
    42de:	08 95       	ret
    42e0:	84 30       	cpi	r24, 0x04	; 4
    42e2:	19 f1       	breq	.+70     	; 0x432a <macDataIndication+0x60>
    42e4:	86 30       	cpi	r24, 0x06	; 6
    42e6:	19 f0       	breq	.+6      	; 0x42ee <macDataIndication+0x24>
    42e8:	08 95       	ret
    {
    case DATA_FRAME:
        // Plain old data, send it up the chain
        appDataIndication();
    42ea:	0c 94 26 02 	jmp	0x44c	; 0x44c <appDataIndication>
        break;
    case WAKE_NODE:
        // Wake up the end node.
        if (NODETYPE == ROUTER)
        {
            u8 addr = ((ftWake*)frame)->addr;
    42ee:	80 91 47 0b 	lds	r24, 0x0B47	; 0x800b47 <mac_buffer_rx+0xf>
    42f2:	90 91 48 0b 	lds	r25, 0x0B48	; 0x800b48 <mac_buffer_rx+0x10>
            // See if this is from parent or child
            if ((((ftWake*)frame)->srcAddr) == macConfig.parentShortAddress)
    42f6:	40 91 40 0b 	lds	r20, 0x0B40	; 0x800b40 <mac_buffer_rx+0x8>
    42fa:	50 91 41 0b 	lds	r21, 0x0B41	; 0x800b41 <mac_buffer_rx+0x9>
    42fe:	20 91 4b 0c 	lds	r18, 0x0C4B	; 0x800c4b <macConfig+0xf>
    4302:	30 91 4c 0c 	lds	r19, 0x0C4C	; 0x800c4c <macConfig+0x10>
    4306:	42 17       	cp	r20, r18
    4308:	53 07       	cpc	r21, r19
    430a:	a9 f4       	brne	.+42     	; 0x4336 <macDataIndication+0x6c>
                // Set the flag to wake up the end node when it sends a packet
                macWakeChildNode(addr);
    430c:	99 27       	eor	r25, r25
    430e:	0c 94 a8 20 	jmp	0x4150	; 0x4150 <macWakeChildNode>
            debugMsgStrConst("\r\nAwake");
        }
        break;
    case PING_REQ_FRAME:
        // We got a ping request, let the app handle that
        appPingReq(frame->originAddr);
    4312:	80 91 44 0b 	lds	r24, 0x0B44	; 0x800b44 <mac_buffer_rx+0xc>
    4316:	90 91 45 0b 	lds	r25, 0x0B45	; 0x800b45 <mac_buffer_rx+0xd>
    431a:	0c 94 c6 01 	jmp	0x38c	; 0x38c <appPingReq>
        break;
    case PING_RSP_FRAME:
        // We got a ping response, app will handle it
        appPingRsp(frame->originAddr);
    431e:	80 91 44 0b 	lds	r24, 0x0B44	; 0x800b44 <mac_buffer_rx+0xc>
    4322:	90 91 45 0b 	lds	r25, 0x0B45	; 0x800b45 <mac_buffer_rx+0xd>
    4326:	0c 94 ca 01 	jmp	0x394	; 0x394 <appPingRsp>
        break;
    case DROP_CHILD_FRAME:
        // Coordinator is telling us to drop a child
        if (NODETYPE == ROUTER)
            macRemoveChild(*(u16*)(&frame->payload));
    432a:	80 91 47 0b 	lds	r24, 0x0B47	; 0x800b47 <mac_buffer_rx+0xf>
    432e:	90 91 48 0b 	lds	r25, 0x0B48	; 0x800b48 <mac_buffer_rx+0x10>
    4332:	0c 94 8c 20 	jmp	0x4118	; 0x4118 <macRemoveChild>
    4336:	08 95       	ret

00004338 <mp>:
    }
}

// Target function to timer, sends ping packet after a delay
void mp(void)
{
    4338:	0f 93       	push	r16
    433a:	1f 93       	push	r17
    433c:	cf 93       	push	r28
    433e:	df 93       	push	r29
    4340:	cd b7       	in	r28, 0x3d	; 61
    4342:	de b7       	in	r29, 0x3e	; 62
    4344:	60 97       	sbiw	r28, 0x10	; 16
    4346:	0f b6       	in	r0, 0x3f	; 63
    4348:	f8 94       	cli
    434a:	de bf       	out	0x3e, r29	; 62
    434c:	0f be       	out	0x3f, r0	; 63
    434e:	cd bf       	out	0x3d, r28	; 61
    ftPing frame;

    frame.fcf = htons_16(FCF_DATA);
    4350:	81 e6       	ldi	r24, 0x61	; 97
    4352:	98 e8       	ldi	r25, 0x88	; 136
    4354:	9a 83       	std	Y+2, r25	; 0x02
    4356:	89 83       	std	Y+1, r24	; 0x01
    frame.seq = macConfig.dsn++;
    4358:	0c e3       	ldi	r16, 0x3C	; 60
    435a:	1c e0       	ldi	r17, 0x0C	; 12
    435c:	f8 01       	movw	r30, r16
    435e:	82 85       	ldd	r24, Z+10	; 0x0a
    4360:	91 e0       	ldi	r25, 0x01	; 1
    4362:	98 0f       	add	r25, r24
    4364:	92 87       	std	Z+10, r25	; 0x0a
    4366:	8b 83       	std	Y+3, r24	; 0x03
    frame.panid = htons_16(macConfig.panId);
    4368:	83 85       	ldd	r24, Z+11	; 0x0b
    436a:	94 85       	ldd	r25, Z+12	; 0x0c
    436c:	9d 83       	std	Y+5, r25	; 0x05
    436e:	8c 83       	std	Y+4, r24	; 0x04
    frame.srcAddr = htons_16(macConfig.shortAddress);
    4370:	85 85       	ldd	r24, Z+13	; 0x0d
    4372:	96 85       	ldd	r25, Z+14	; 0x0e
    4374:	99 87       	std	Y+9, r25	; 0x09
    4376:	88 87       	std	Y+8, r24	; 0x08
    frame.originAddr = htons_16(macConfig.shortAddress);
    4378:	9d 87       	std	Y+13, r25	; 0x0d
    437a:	8c 87       	std	Y+12, r24	; 0x0c
    frame.finalDestAddr = htons_16(pingAddr);
    437c:	80 91 65 06 	lds	r24, 0x0665	; 0x800665 <pingAddr>
    4380:	90 91 66 06 	lds	r25, 0x0666	; 0x800666 <pingAddr+0x1>
    4384:	9b 87       	std	Y+11, r25	; 0x0b
    4386:	8a 87       	std	Y+10, r24	; 0x0a
    frame.type = pingType;
    4388:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <pingType>
    438c:	8e 87       	std	Y+14, r24	; 0x0e
    frame.rssi = radioGetSavedRssiValue();
    438e:	0e 94 a2 1b 	call	0x3744	; 0x3744 <radioGetSavedRssiValue>
    4392:	8f 87       	std	Y+15, r24	; 0x0f
    frame.lqi = radioGetSavedLqiValue();
    4394:	0e 94 ab 1b 	call	0x3756	; 0x3756 <radioGetSavedLqiValue>
    4398:	88 8b       	std	Y+16, r24	; 0x10
            return;
        }
    }
    else
        // End/router nodes
        frame.destAddr = htons_16(macConfig.parentShortAddress);
    439a:	f8 01       	movw	r30, r16
    439c:	87 85       	ldd	r24, Z+15	; 0x0f
    439e:	90 89       	ldd	r25, Z+16	; 0x10
    43a0:	9f 83       	std	Y+7, r25	; 0x07
    43a2:	8e 83       	std	Y+6, r24	; 0x06


    radioSendData(sizeof(ftPing), (u8*)&frame);
    43a4:	be 01       	movw	r22, r28
    43a6:	6f 5f       	subi	r22, 0xFF	; 255
    43a8:	7f 4f       	sbci	r23, 0xFF	; 255
    43aa:	80 e1       	ldi	r24, 0x10	; 16
    43ac:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <radioSendData>
}
    43b0:	60 96       	adiw	r28, 0x10	; 16
    43b2:	0f b6       	in	r0, 0x3f	; 63
    43b4:	f8 94       	cli
    43b6:	de bf       	out	0x3e, r29	; 62
    43b8:	0f be       	out	0x3f, r0	; 63
    43ba:	cd bf       	out	0x3d, r28	; 61
    43bc:	df 91       	pop	r29
    43be:	cf 91       	pop	r28
    43c0:	1f 91       	pop	r17
    43c2:	0f 91       	pop	r16
    43c4:	08 95       	ret

000043c6 <macPing>:

   @param addr Short address of node to send ping
*/
void macPing(u8 pingTypeArg, u16 addr)
{
    if (addr == macConfig.shortAddress)
    43c6:	20 91 49 0c 	lds	r18, 0x0C49	; 0x800c49 <macConfig+0xd>
    43ca:	30 91 4a 0c 	lds	r19, 0x0C4A	; 0x800c4a <macConfig+0xe>
    43ce:	62 17       	cp	r22, r18
    43d0:	73 07       	cpc	r23, r19
    43d2:	91 f0       	breq	.+36     	; 0x43f8 <macPing+0x32>
        // Don't send to self
        return;

    if (!macConfig.associated)
    43d4:	90 91 44 0c 	lds	r25, 0x0C44	; 0x800c44 <macConfig+0x8>
    43d8:	99 23       	and	r25, r25
    43da:	71 f0       	breq	.+28     	; 0x43f8 <macPing+0x32>
        // Broadcast addr
        return;

    pingAddr = addr;
    43dc:	70 93 66 06 	sts	0x0666, r23	; 0x800666 <pingAddr+0x1>
    43e0:	60 93 65 06 	sts	0x0665, r22	; 0x800665 <pingAddr>
    pingType = pingTypeArg;
    43e4:	90 e0       	ldi	r25, 0x00	; 0
    43e6:	90 93 64 06 	sts	0x0664, r25	; 0x800664 <pingType+0x1>
    43ea:	80 93 63 06 	sts	0x0663, r24	; 0x800663 <pingType>
        macConfig.busy = true;
    }
    else
    {
        // End/router nodes
        mp();
    43ee:	0e 94 9c 21 	call	0x4338	; 0x4338 <mp>
        macConfig.busy = true;
    43f2:	81 e0       	ldi	r24, 0x01	; 1
    43f4:	80 93 53 0c 	sts	0x0C53, r24	; 0x800c53 <macConfig+0x17>
    43f8:	08 95       	ret

000043fa <mac_event_pending>:

@return True if there is a pending event, else false.
*/
u8 mac_event_pending(void)
{
	u8 head = event_queue.head;
    43fa:	20 91 55 0c 	lds	r18, 0x0C55	; 0x800c55 <event_queue>
	return (head != event_queue.tail);
    43fe:	90 91 56 0c 	lds	r25, 0x0C56	; 0x800c56 <event_queue+0x1>
    4402:	81 e0       	ldi	r24, 0x01	; 1
    4404:	29 13       	cpse	r18, r25
    4406:	01 c0       	rjmp	.+2      	; 0x440a <mac_event_pending+0x10>
    4408:	80 e0       	ldi	r24, 0x00	; 0
}
    440a:	08 95       	ret

0000440c <mac_put_event>:
@brief Puts an event into the queue of events.

@param object is a pointer to the event to add to queue.
*/
void mac_put_event(event_object_t *object)
{
    440c:	cf 93       	push	r28
    440e:	df 93       	push	r29
    4410:	ec 01       	movw	r28, r24
	u8 newhead = event_queue.head;
    4412:	40 91 55 0c 	lds	r20, 0x0C55	; 0x800c55 <event_queue>

	if ((newhead + 1) % MAX_EVENTS == event_queue.tail)
    4416:	24 2f       	mov	r18, r20
    4418:	30 e0       	ldi	r19, 0x00	; 0
    441a:	e0 91 56 0c 	lds	r30, 0x0C56	; 0x800c56 <event_queue+0x1>
    441e:	c9 01       	movw	r24, r18
    4420:	01 96       	adiw	r24, 0x01	; 1
    4422:	6e e1       	ldi	r22, 0x1E	; 30
    4424:	70 e0       	ldi	r23, 0x00	; 0
    4426:	0e 94 db 2d 	call	0x5bb6	; 0x5bb6 <__divmodhi4>
    442a:	6e 2f       	mov	r22, r30
    442c:	70 e0       	ldi	r23, 0x00	; 0
    442e:	86 17       	cp	r24, r22
    4430:	97 07       	cpc	r25, r23
    4432:	a9 f0       	breq	.+42     	; 0x445e <mac_put_event+0x52>
	return;

	//    newhead = event_queue.head;

	// store in queue
	event_queue.event_object[newhead] = *object;
    4434:	f9 01       	movw	r30, r18
    4436:	ee 0f       	add	r30, r30
    4438:	ff 1f       	adc	r31, r31
    443a:	2e 0f       	add	r18, r30
    443c:	3f 1f       	adc	r19, r31
    443e:	f9 01       	movw	r30, r18
    4440:	eb 5a       	subi	r30, 0xAB	; 171
    4442:	f3 4f       	sbci	r31, 0xF3	; 243
    4444:	88 81       	ld	r24, Y
    4446:	99 81       	ldd	r25, Y+1	; 0x01
    4448:	aa 81       	ldd	r26, Y+2	; 0x02
    444a:	82 83       	std	Z+2, r24	; 0x02
    444c:	93 83       	std	Z+3, r25	; 0x03
    444e:	a4 83       	std	Z+4, r26	; 0x04

	// calculate new head index
	newhead++;
    4450:	81 e0       	ldi	r24, 0x01	; 1
    4452:	84 0f       	add	r24, r20
	if (newhead >= MAX_EVENTS)
    4454:	8e 31       	cpi	r24, 0x1E	; 30
    4456:	08 f0       	brcs	.+2      	; 0x445a <mac_put_event+0x4e>
	newhead = 0;
    4458:	80 e0       	ldi	r24, 0x00	; 0
	event_queue.head = newhead;
    445a:	80 93 55 0c 	sts	0x0C55, r24	; 0x800c55 <event_queue>
}
    445e:	df 91       	pop	r29
    4460:	cf 91       	pop	r28
    4462:	08 95       	ret

00004464 <mac_get_event>:

@return Pointer to the event object, or garbage data if the queue
is empty.
*/
event_object_t * mac_get_event(void)
{
    4464:	cf 93       	push	r28
    4466:	df 93       	push	r29
    4468:	1f 92       	push	r1
    446a:	cd b7       	in	r28, 0x3d	; 61
    446c:	de b7       	in	r29, 0x3e	; 62
	event_object_t *object = NULL;
	volatile u8 newtail;

	newtail = event_queue.tail;
    446e:	80 91 56 0c 	lds	r24, 0x0C56	; 0x800c56 <event_queue+0x1>
    4472:	89 83       	std	Y+1, r24	; 0x01

	object = &(event_queue.event_object[newtail]);
    4474:	89 81       	ldd	r24, Y+1	; 0x01
    4476:	90 e0       	ldi	r25, 0x00	; 0
    4478:	9c 01       	movw	r18, r24
    447a:	22 0f       	add	r18, r18
    447c:	33 1f       	adc	r19, r19
    447e:	82 0f       	add	r24, r18
    4480:	93 1f       	adc	r25, r19
    4482:	89 5a       	subi	r24, 0xA9	; 169
    4484:	93 4f       	sbci	r25, 0xF3	; 243

	// calculate new tail
	newtail++;
    4486:	29 81       	ldd	r18, Y+1	; 0x01
    4488:	2f 5f       	subi	r18, 0xFF	; 255
    448a:	29 83       	std	Y+1, r18	; 0x01
	if (newtail >= MAX_EVENTS)
    448c:	29 81       	ldd	r18, Y+1	; 0x01
    448e:	2e 31       	cpi	r18, 0x1E	; 30
    4490:	08 f0       	brcs	.+2      	; 0x4494 <mac_get_event+0x30>
	newtail = 0;
    4492:	19 82       	std	Y+1, r1	; 0x01

	event_queue.tail = newtail;
    4494:	29 81       	ldd	r18, Y+1	; 0x01
    4496:	20 93 56 0c 	sts	0x0C56, r18	; 0x800c56 <event_queue+0x1>

	return(object);
}
    449a:	0f 90       	pop	r0
    449c:	df 91       	pop	r29
    449e:	cf 91       	pop	r28
    44a0:	08 95       	ret

000044a2 <macTask>:
"forever" loop or by an OS task or thread.  This function processes
interrupt events that are stored in the event queue by the radio or
timer.
*/
void macTask(void)
{
    44a2:	cf 93       	push	r28
				//   if (*((u16*)(mac_buffer_rx+1)) == FCF_ASSOC_RESP_DIRECT) // Direct to MAC Addr?
				if ((mac_buffer_rx[2] == (htons_16(FCF_ASSOC_RESP_DIRECT) >> 8)) &&
				(mac_buffer_rx[1] == (htons_16(FCF_ASSOC_RESP_DIRECT) & 0xff)))
				{
					// this is a new node, do the association thing
					macConfig.associated = true;
    44a4:	c1 e0       	ldi	r28, 0x01	; 1
void macTask(void)
{
	event_object_t *event;

	event = 0;
	while(mac_event_pending())
    44a6:	0e 94 fd 21 	call	0x43fa	; 0x43fa <mac_event_pending>
    44aa:	88 23       	and	r24, r24
    44ac:	09 f4       	brne	.+2      	; 0x44b0 <macTask+0xe>
    44ae:	81 c0       	rjmp	.+258    	; 0x45b2 <macTask+0x110>
	{
		event = mac_get_event();
    44b0:	0e 94 32 22 	call	0x4464	; 0x4464 <mac_get_event>
		switch (event->event)
    44b4:	dc 01       	movw	r26, r24
    44b6:	ec 91       	ld	r30, X
    44b8:	4e 2f       	mov	r20, r30
    44ba:	50 e0       	ldi	r21, 0x00	; 0
    44bc:	fa 01       	movw	r30, r20
    44be:	70 97       	sbiw	r30, 0x10	; 16
    44c0:	ea 30       	cpi	r30, 0x0A	; 10
    44c2:	f1 05       	cpc	r31, r1
    44c4:	80 f7       	brcc	.-32     	; 0x44a6 <macTask+0x4>
    44c6:	ed 52       	subi	r30, 0x2D	; 45
    44c8:	ff 4f       	sbci	r31, 0xFF	; 255
    44ca:	0c 94 11 2e 	jmp	0x5c22	; 0x5c22 <__tablejump2__>
		{
			case MAC_EVENT_SCAN:
			// A beacon has been received as a result of an active scan.
			// Record the pan descriptor and store it until the scan has
			// completed.
			if (!macConfig.associated)
    44ce:	80 91 44 0c 	lds	r24, 0x0C44	; 0x800c44 <macConfig+0x8>
    44d2:	81 11       	cpse	r24, r1
    44d4:	e8 cf       	rjmp	.-48     	; 0x44a6 <macTask+0x4>
			mac_logPanDescriptors();
    44d6:	0e 94 db 24 	call	0x49b6	; 0x49b6 <mac_logPanDescriptors>
    44da:	e5 cf       	rjmp	.-54     	; 0x44a6 <macTask+0x4>
			break;
			// ETG #if __AVR__ || __AVR32__
			#if __AVR__ || __AVR32__
			case MAC_EVENT_TIMER:
			// Timer has expired, just callback the stored function pointer
			((void (*)(void))event->data)();  // cast data to function pointer
    44dc:	dc 01       	movw	r26, r24
    44de:	11 96       	adiw	r26, 0x01	; 1
    44e0:	ed 91       	ld	r30, X+
    44e2:	fc 91       	ld	r31, X
    44e4:	12 97       	sbiw	r26, 0x02	; 2
    44e6:	09 95       	icall
			break;
    44e8:	de cf       	rjmp	.-68     	; 0x44a6 <macTask+0x4>
			#endif
			case MAC_EVENT_RX:
			if (macConfig.associated)
    44ea:	80 91 44 0c 	lds	r24, 0x0C44	; 0x800c44 <macConfig+0x8>
    44ee:	88 23       	and	r24, r24
    44f0:	d1 f2       	breq	.-76     	; 0x44a6 <macTask+0x4>
				frame->finalDestAddr = ntohs_16(frame->finalDestAddr);
				frame->originAddr = ntohs_16(frame->originAddr);

				// Wake up
				if (NODETYPE != ENDDEVICE)
				macChildIsAwake((ftData*)(mac_buffer_rx+1));
    44f2:	89 e3       	ldi	r24, 0x39	; 57
    44f4:	9b e0       	ldi	r25, 0x0B	; 11
    44f6:	0e 94 a9 20 	call	0x4152	; 0x4152 <macChildIsAwake>
				// Received a data frame, process it or route it
				if (((ftData*)(mac_buffer_rx+1))->finalDestAddr == macConfig.shortAddress)
    44fa:	20 91 42 0b 	lds	r18, 0x0B42	; 0x800b42 <mac_buffer_rx+0xa>
    44fe:	30 91 43 0b 	lds	r19, 0x0B43	; 0x800b43 <mac_buffer_rx+0xb>
    4502:	80 91 49 0c 	lds	r24, 0x0C49	; 0x800c49 <macConfig+0xd>
    4506:	90 91 4a 0c 	lds	r25, 0x0C4A	; 0x800c4a <macConfig+0xe>
    450a:	28 17       	cp	r18, r24
    450c:	39 07       	cpc	r19, r25
    450e:	19 f4       	brne	.+6      	; 0x4516 <macTask+0x74>
				// This data frame is for this node
				macDataIndication();
    4510:	0e 94 65 21 	call	0x42ca	; 0x42ca <macDataIndication>
    4514:	c8 cf       	rjmp	.-112    	; 0x44a6 <macTask+0x4>
				else
				// Route the packet up/down stream
				if (NODETYPE != ENDDEVICE)
				macRouteData();
    4516:	0e 94 57 24 	call	0x48ae	; 0x48ae <macRouteData>
    451a:	c5 cf       	rjmp	.-118    	; 0x44a6 <macTask+0x4>
			{
				ftBeaconReq *frame = (ftBeaconReq*)(mac_buffer_rx+1);
				frame->panid = ntohs_16(frame->panid);
				
				// Generate and send the beacon.
				if (NODETYPE == ROUTER && macConfig.associated)
    451c:	80 91 44 0c 	lds	r24, 0x0C44	; 0x800c44 <macConfig+0x8>
    4520:	88 23       	and	r24, r24
    4522:	09 f2       	breq	.-126    	; 0x44a6 <macTask+0x4>
				macSetAlarm(1, sendBeaconFrame);
    4524:	6e ea       	ldi	r22, 0xAE	; 174
    4526:	70 e2       	ldi	r23, 0x20	; 32
    4528:	81 e0       	ldi	r24, 0x01	; 1
    452a:	90 e0       	ldi	r25, 0x00	; 0
    452c:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <macSetAlarm>
    4530:	ba cf       	rjmp	.-140    	; 0x44a6 <macTask+0x4>
				break;
			}
			if (NODETYPE == COORD)
			// Pan Coord has received this request.
			macAssociationResponse();
			if (NODETYPE == ROUTER && macConfig.associated)
    4532:	80 91 44 0c 	lds	r24, 0x0C44	; 0x800c44 <macConfig+0x8>
    4536:	88 23       	and	r24, r24
    4538:	09 f4       	brne	.+2      	; 0x453c <macTask+0x9a>
    453a:	b5 cf       	rjmp	.-150    	; 0x44a6 <macTask+0x4>
			{
				// Send this packet along to parent
				macRouteAssociateRequest();
    453c:	0e 94 b6 23 	call	0x476c	; 0x476c <macRouteAssociateRequest>
    4540:	b2 cf       	rjmp	.-156    	; 0x44a6 <macTask+0x4>
			case MAC_EVENT_ASSOCIATION_RESPONSE:
			// End device has received this response.
			if (NODETYPE != COORD)
			{
				//   if (*((u16*)(mac_buffer_rx+1)) == FCF_ASSOC_RESP_DIRECT) // Direct to MAC Addr?
				if ((mac_buffer_rx[2] == (htons_16(FCF_ASSOC_RESP_DIRECT) >> 8)) &&
    4542:	80 91 3a 0b 	lds	r24, 0x0B3A	; 0x800b3a <mac_buffer_rx+0x2>
    4546:	8c 38       	cpi	r24, 0x8C	; 140
    4548:	d9 f4       	brne	.+54     	; 0x4580 <macTask+0xde>
    454a:	80 91 39 0b 	lds	r24, 0x0B39	; 0x800b39 <mac_buffer_rx+0x1>
    454e:	83 36       	cpi	r24, 0x63	; 99
    4550:	b9 f4       	brne	.+46     	; 0x4580 <macTask+0xde>
				(mac_buffer_rx[1] == (htons_16(FCF_ASSOC_RESP_DIRECT) & 0xff)))
				{
					// this is a new node, do the association thing
					macConfig.associated = true;
    4552:	c0 93 44 0c 	sts	0x0C44, r28	; 0x800c44 <macConfig+0x8>
					macConfig.parentShortAddress = ntohs_16(((ftAssocRespDirect*)(mac_buffer_rx+1))->srcAddr);
    4556:	80 91 46 0b 	lds	r24, 0x0B46	; 0x800b46 <mac_buffer_rx+0xe>
    455a:	90 91 47 0b 	lds	r25, 0x0B47	; 0x800b47 <mac_buffer_rx+0xf>
    455e:	90 93 4c 0c 	sts	0x0C4C, r25	; 0x800c4c <macConfig+0x10>
    4562:	80 93 4b 0c 	sts	0x0C4B, r24	; 0x800c4b <macConfig+0xf>
					macConfig.shortAddress = ntohs_16(((ftAssocRespDirect*)(mac_buffer_rx+1))->shortAddr);
    4566:	80 91 49 0b 	lds	r24, 0x0B49	; 0x800b49 <mac_buffer_rx+0x11>
    456a:	90 91 4a 0b 	lds	r25, 0x0B4A	; 0x800b4a <mac_buffer_rx+0x12>
    456e:	90 93 4a 0c 	sts	0x0C4A, r25	; 0x800c4a <macConfig+0xe>
    4572:	80 93 49 0c 	sts	0x0C49, r24	; 0x800c49 <macConfig+0xd>

					radioSetShortAddress(macConfig.shortAddress);
    4576:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <radioSetShortAddress>
					macAssociationConfirm();
    457a:	0e 94 dd 1f 	call	0x3fba	; 0x3fba <macAssociationConfirm>
    457e:	93 cf       	rjmp	.-218    	; 0x44a6 <macTask+0x4>
				}
				else
				{
					// we are indirect, so just send this packet along.
					if (NODETYPE == ROUTER && macConfig.associated)
    4580:	80 91 44 0c 	lds	r24, 0x0C44	; 0x800c44 <macConfig+0x8>
    4584:	88 23       	and	r24, r24
    4586:	09 f4       	brne	.+2      	; 0x458a <macTask+0xe8>
    4588:	8e cf       	rjmp	.-228    	; 0x44a6 <macTask+0x4>
						frame->srcAddr = ntohs_16(frame->srcAddr);
						frame->parentAddr = ntohs_16(frame->parentAddr);
						frame->shortAddr = ntohs_16(frame->shortAddr);
						frame->macAddr = ntohs_64(frame->macAddr);
						// Route the packet
						macRouteAssociateResponse();
    458a:	0e 94 27 23 	call	0x464e	; 0x464e <macRouteAssociateResponse>
    458e:	8b cf       	rjmp	.-234    	; 0x44a6 <macTask+0x4>
				}
			}
			break;
			case MAC_EVENT_ROUTE:
			// Routing packet received, forward it
			if (NODETYPE == ROUTER && macConfig.associated)
    4590:	80 91 44 0c 	lds	r24, 0x0C44	; 0x800c44 <macConfig+0x8>
    4594:	88 23       	and	r24, r24
    4596:	09 f4       	brne	.+2      	; 0x459a <macTask+0xf8>
    4598:	86 cf       	rjmp	.-244    	; 0x44a6 <macTask+0x4>
			macForwardRoutingPacket();
    459a:	0e 94 db 22 	call	0x45b6	; 0x45b6 <macForwardRoutingPacket>
    459e:	83 cf       	rjmp	.-250    	; 0x44a6 <macTask+0x4>
			break;
			case MAC_EVENT_ACCESS:
			// Channel access failure
			appPacketSendAccessFail();
    45a0:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <appPacketSendAccessFail>
			break;
    45a4:	80 cf       	rjmp	.-256    	; 0x44a6 <macTask+0x4>
			case MAC_EVENT_NACK:
			// Packet failed to be sent, alert application
			appPacketSendFailed();
    45a6:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <appPacketSendFailed>
			break;
    45aa:	7d cf       	rjmp	.-262    	; 0x44a6 <macTask+0x4>
			case MAC_EVENT_ACK:
			// Packet got through, alert application
			appPacketSendSucceed();
    45ac:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <appPacketSendSucceed>
			break;
    45b0:	7a cf       	rjmp	.-268    	; 0x44a6 <macTask+0x4>
			default:
			break;
		}
	}
}
    45b2:	cf 91       	pop	r28
    45b4:	08 95       	ret

000045b6 <macForwardRoutingPacket>:
        }
    }
}

void mrd(void)
{
    45b6:	80 91 38 0b 	lds	r24, 0x0B38	; 0x800b38 <mac_buffer_rx>
    45ba:	92 e8       	ldi	r25, 0x82	; 130
    45bc:	e8 e3       	ldi	r30, 0x38	; 56
    45be:	fb e0       	ldi	r31, 0x0B	; 11
    45c0:	aa eb       	ldi	r26, 0xBA	; 186
    45c2:	bb e0       	ldi	r27, 0x0B	; 11
    45c4:	01 90       	ld	r0, Z+
    45c6:	0d 92       	st	X+, r0
    45c8:	9a 95       	dec	r25
    45ca:	e1 f7       	brne	.-8      	; 0x45c4 <macForwardRoutingPacket+0xe>
    45cc:	90 91 44 0c 	lds	r25, 0x0C44	; 0x800c44 <macConfig+0x8>
    45d0:	99 23       	and	r25, r25
    45d2:	e1 f1       	breq	.+120    	; 0x464c <macForwardRoutingPacket+0x96>
    45d4:	8c 50       	subi	r24, 0x0C	; 12
    45d6:	86 95       	lsr	r24
    45d8:	e8 2f       	mov	r30, r24
    45da:	f0 e0       	ldi	r31, 0x00	; 0
    45dc:	ee 0f       	add	r30, r30
    45de:	ff 1f       	adc	r31, r31
    45e0:	ed 53       	subi	r30, 0x3D	; 61
    45e2:	f4 4f       	sbci	r31, 0xF4	; 244
    45e4:	20 81       	ld	r18, Z
    45e6:	31 81       	ldd	r19, Z+1	; 0x01
    45e8:	30 93 4e 0c 	sts	0x0C4E, r19	; 0x800c4e <macConfig+0x12>
    45ec:	20 93 4d 0c 	sts	0x0C4D, r18	; 0x800c4d <macConfig+0x11>
    45f0:	82 30       	cpi	r24, 0x02	; 2
    45f2:	60 f1       	brcs	.+88     	; 0x464c <macForwardRoutingPacket+0x96>
    45f4:	81 50       	subi	r24, 0x01	; 1
    45f6:	23 e6       	ldi	r18, 0x63	; 99
    45f8:	38 e8       	ldi	r19, 0x88	; 136
    45fa:	30 93 bc 0b 	sts	0x0BBC, r19	; 0x800bbc <mac_buffer_tx+0x2>
    45fe:	20 93 bb 0b 	sts	0x0BBB, r18	; 0x800bbb <mac_buffer_tx+0x1>
    4602:	90 91 46 0c 	lds	r25, 0x0C46	; 0x800c46 <macConfig+0xa>
    4606:	21 e0       	ldi	r18, 0x01	; 1
    4608:	29 0f       	add	r18, r25
    460a:	20 93 46 0c 	sts	0x0C46, r18	; 0x800c46 <macConfig+0xa>
    460e:	90 93 bd 0b 	sts	0x0BBD, r25	; 0x800bbd <mac_buffer_tx+0x3>
    4612:	90 e0       	ldi	r25, 0x00	; 0
    4614:	fc 01       	movw	r30, r24
    4616:	ee 0f       	add	r30, r30
    4618:	ff 1f       	adc	r31, r31
    461a:	eb 53       	subi	r30, 0x3B	; 59
    461c:	f4 4f       	sbci	r31, 0xF4	; 244
    461e:	20 81       	ld	r18, Z
    4620:	31 81       	ldd	r19, Z+1	; 0x01
    4622:	30 93 c1 0b 	sts	0x0BC1, r19	; 0x800bc1 <mac_buffer_tx+0x7>
    4626:	20 93 c0 0b 	sts	0x0BC0, r18	; 0x800bc0 <mac_buffer_tx+0x6>
    462a:	20 91 49 0c 	lds	r18, 0x0C49	; 0x800c49 <macConfig+0xd>
    462e:	30 91 4a 0c 	lds	r19, 0x0C4A	; 0x800c4a <macConfig+0xe>
    4632:	30 93 c3 0b 	sts	0x0BC3, r19	; 0x800bc3 <mac_buffer_tx+0x9>
    4636:	20 93 c2 0b 	sts	0x0BC2, r18	; 0x800bc2 <mac_buffer_tx+0x8>
    463a:	9b eb       	ldi	r25, 0xBB	; 187
    463c:	90 93 c4 0b 	sts	0x0BC4, r25	; 0x800bc4 <mac_buffer_tx+0xa>
    4640:	8b 5f       	subi	r24, 0xFB	; 251
    4642:	6b eb       	ldi	r22, 0xBB	; 187
    4644:	7b e0       	ldi	r23, 0x0B	; 11
    4646:	88 0f       	add	r24, r24
    4648:	0c 94 97 1d 	jmp	0x3b2e	; 0x3b2e <radioSendData>
    464c:	08 95       	ret

0000464e <macRouteAssociateResponse>:
    464e:	80 91 44 0c 	lds	r24, 0x0C44	; 0x800c44 <macConfig+0x8>
    4652:	88 23       	and	r24, r24
    4654:	09 f4       	brne	.+2      	; 0x4658 <macRouteAssociateResponse+0xa>
    4656:	89 c0       	rjmp	.+274    	; 0x476a <macRouteAssociateResponse+0x11c>
    4658:	20 91 43 0b 	lds	r18, 0x0B43	; 0x800b43 <mac_buffer_rx+0xb>
    465c:	30 91 44 0b 	lds	r19, 0x0B44	; 0x800b44 <mac_buffer_rx+0xc>
    4660:	80 91 49 0c 	lds	r24, 0x0C49	; 0x800c49 <macConfig+0xd>
    4664:	90 91 4a 0c 	lds	r25, 0x0C4A	; 0x800c4a <macConfig+0xe>
    4668:	28 17       	cp	r18, r24
    466a:	39 07       	cpc	r19, r25
    466c:	09 f0       	breq	.+2      	; 0x4670 <macRouteAssociateResponse+0x22>
    466e:	4b c0       	rjmp	.+150    	; 0x4706 <macRouteAssociateResponse+0xb8>
    4670:	83 e6       	ldi	r24, 0x63	; 99
    4672:	9c e8       	ldi	r25, 0x8C	; 140
    4674:	90 93 bb 0b 	sts	0x0BBB, r25	; 0x800bbb <mac_buffer_tx+0x1>
    4678:	80 93 ba 0b 	sts	0x0BBA, r24	; 0x800bba <mac_buffer_tx>
    467c:	80 91 46 0c 	lds	r24, 0x0C46	; 0x800c46 <macConfig+0xa>
    4680:	91 e0       	ldi	r25, 0x01	; 1
    4682:	98 0f       	add	r25, r24
    4684:	90 93 46 0c 	sts	0x0C46, r25	; 0x800c46 <macConfig+0xa>
    4688:	80 93 bc 0b 	sts	0x0BBC, r24	; 0x800bbc <mac_buffer_tx+0x2>
    468c:	80 91 47 0c 	lds	r24, 0x0C47	; 0x800c47 <macConfig+0xb>
    4690:	90 91 48 0c 	lds	r25, 0x0C48	; 0x800c48 <macConfig+0xc>
    4694:	90 93 be 0b 	sts	0x0BBE, r25	; 0x800bbe <mac_buffer_tx+0x4>
    4698:	80 93 bd 0b 	sts	0x0BBD, r24	; 0x800bbd <mac_buffer_tx+0x3>
    469c:	80 91 45 0b 	lds	r24, 0x0B45	; 0x800b45 <mac_buffer_rx+0xd>
    46a0:	80 93 bf 0b 	sts	0x0BBF, r24	; 0x800bbf <mac_buffer_tx+0x5>
    46a4:	80 91 46 0b 	lds	r24, 0x0B46	; 0x800b46 <mac_buffer_rx+0xe>
    46a8:	80 93 c0 0b 	sts	0x0BC0, r24	; 0x800bc0 <mac_buffer_tx+0x6>
    46ac:	80 91 47 0b 	lds	r24, 0x0B47	; 0x800b47 <mac_buffer_rx+0xf>
    46b0:	80 93 c1 0b 	sts	0x0BC1, r24	; 0x800bc1 <mac_buffer_tx+0x7>
    46b4:	80 91 48 0b 	lds	r24, 0x0B48	; 0x800b48 <mac_buffer_rx+0x10>
    46b8:	80 93 c2 0b 	sts	0x0BC2, r24	; 0x800bc2 <mac_buffer_tx+0x8>
    46bc:	80 91 49 0b 	lds	r24, 0x0B49	; 0x800b49 <mac_buffer_rx+0x11>
    46c0:	80 93 c3 0b 	sts	0x0BC3, r24	; 0x800bc3 <mac_buffer_tx+0x9>
    46c4:	80 91 4a 0b 	lds	r24, 0x0B4A	; 0x800b4a <mac_buffer_rx+0x12>
    46c8:	80 93 c4 0b 	sts	0x0BC4, r24	; 0x800bc4 <mac_buffer_tx+0xa>
    46cc:	80 91 4b 0b 	lds	r24, 0x0B4B	; 0x800b4b <mac_buffer_rx+0x13>
    46d0:	80 93 c5 0b 	sts	0x0BC5, r24	; 0x800bc5 <mac_buffer_tx+0xb>
    46d4:	80 91 4c 0b 	lds	r24, 0x0B4C	; 0x800b4c <mac_buffer_rx+0x14>
    46d8:	80 93 c6 0b 	sts	0x0BC6, r24	; 0x800bc6 <mac_buffer_tx+0xc>
    46dc:	30 93 c8 0b 	sts	0x0BC8, r19	; 0x800bc8 <mac_buffer_tx+0xe>
    46e0:	20 93 c7 0b 	sts	0x0BC7, r18	; 0x800bc7 <mac_buffer_tx+0xd>
    46e4:	82 e0       	ldi	r24, 0x02	; 2
    46e6:	80 93 c9 0b 	sts	0x0BC9, r24	; 0x800bc9 <mac_buffer_tx+0xf>
    46ea:	80 91 4d 0b 	lds	r24, 0x0B4D	; 0x800b4d <mac_buffer_rx+0x15>
    46ee:	90 91 4e 0b 	lds	r25, 0x0B4E	; 0x800b4e <mac_buffer_rx+0x16>
    46f2:	90 93 cb 0b 	sts	0x0BCB, r25	; 0x800bcb <mac_buffer_tx+0x11>
    46f6:	80 93 ca 0b 	sts	0x0BCA, r24	; 0x800bca <mac_buffer_tx+0x10>
    46fa:	0e 94 4b 20 	call	0x4096	; 0x4096 <macAddChild>
    46fe:	6a eb       	ldi	r22, 0xBA	; 186
    4700:	7b e0       	ldi	r23, 0x0B	; 11
    4702:	82 e1       	ldi	r24, 0x12	; 18
    4704:	30 c0       	rjmp	.+96     	; 0x4766 <macRouteAssociateResponse+0x118>
    4706:	22 e8       	ldi	r18, 0x82	; 130
    4708:	e8 e3       	ldi	r30, 0x38	; 56
    470a:	fb e0       	ldi	r31, 0x0B	; 11
    470c:	aa eb       	ldi	r26, 0xBA	; 186
    470e:	bb e0       	ldi	r27, 0x0B	; 11
    4710:	01 90       	ld	r0, Z+
    4712:	0d 92       	st	X+, r0
    4714:	2a 95       	dec	r18
    4716:	e1 f7       	brne	.-8      	; 0x4710 <macRouteAssociateResponse+0xc2>
    4718:	20 91 46 0c 	lds	r18, 0x0C46	; 0x800c46 <macConfig+0xa>
    471c:	31 e0       	ldi	r19, 0x01	; 1
    471e:	32 0f       	add	r19, r18
    4720:	30 93 46 0c 	sts	0x0C46, r19	; 0x800c46 <macConfig+0xa>
    4724:	20 93 bd 0b 	sts	0x0BBD, r18	; 0x800bbd <mac_buffer_tx+0x3>
    4728:	20 91 4d 0c 	lds	r18, 0x0C4D	; 0x800c4d <macConfig+0x11>
    472c:	30 91 4e 0c 	lds	r19, 0x0C4E	; 0x800c4e <macConfig+0x12>
    4730:	30 93 c1 0b 	sts	0x0BC1, r19	; 0x800bc1 <mac_buffer_tx+0x7>
    4734:	20 93 c0 0b 	sts	0x0BC0, r18	; 0x800bc0 <mac_buffer_tx+0x6>
    4738:	90 93 c3 0b 	sts	0x0BC3, r25	; 0x800bc3 <mac_buffer_tx+0x9>
    473c:	80 93 c2 0b 	sts	0x0BC2, r24	; 0x800bc2 <mac_buffer_tx+0x8>
    4740:	80 91 c5 0b 	lds	r24, 0x0BC5	; 0x800bc5 <mac_buffer_tx+0xb>
    4744:	90 91 c6 0b 	lds	r25, 0x0BC6	; 0x800bc6 <mac_buffer_tx+0xc>
    4748:	0e 94 39 20 	call	0x4072	; 0x4072 <macIsChild>
    474c:	88 23       	and	r24, r24
    474e:	41 f0       	breq	.+16     	; 0x4760 <macRouteAssociateResponse+0x112>
    4750:	80 91 c5 0b 	lds	r24, 0x0BC5	; 0x800bc5 <mac_buffer_tx+0xb>
    4754:	90 91 c6 0b 	lds	r25, 0x0BC6	; 0x800bc6 <mac_buffer_tx+0xc>
    4758:	90 93 c1 0b 	sts	0x0BC1, r25	; 0x800bc1 <mac_buffer_tx+0x7>
    475c:	80 93 c0 0b 	sts	0x0BC0, r24	; 0x800bc0 <mac_buffer_tx+0x6>
    4760:	6b eb       	ldi	r22, 0xBB	; 187
    4762:	7b e0       	ldi	r23, 0x0B	; 11
    4764:	86 e1       	ldi	r24, 0x16	; 22
    4766:	0c 94 97 1d 	jmp	0x3b2e	; 0x3b2e <radioSendData>
    476a:	08 95       	ret

0000476c <macRouteAssociateRequest>:
    476c:	cf 93       	push	r28
    476e:	df 93       	push	r29
    4770:	cd b7       	in	r28, 0x3d	; 61
    4772:	de b7       	in	r29, 0x3e	; 62
    4774:	65 97       	sbiw	r28, 0x15	; 21
    4776:	0f b6       	in	r0, 0x3f	; 63
    4778:	f8 94       	cli
    477a:	de bf       	out	0x3e, r29	; 62
    477c:	0f be       	out	0x3f, r0	; 63
    477e:	cd bf       	out	0x3d, r28	; 61
    4780:	a0 91 3a 0b 	lds	r26, 0x0B3A	; 0x800b3a <mac_buffer_rx+0x2>
    4784:	80 91 46 0c 	lds	r24, 0x0C46	; 0x800c46 <macConfig+0xa>
    4788:	e0 91 47 0c 	lds	r30, 0x0C47	; 0x800c47 <macConfig+0xb>
    478c:	f0 91 48 0c 	lds	r31, 0x0C48	; 0x800c48 <macConfig+0xc>
    4790:	60 91 4b 0c 	lds	r22, 0x0C4B	; 0x800c4b <macConfig+0xf>
    4794:	70 91 4c 0c 	lds	r23, 0x0C4C	; 0x800c4c <macConfig+0x10>
    4798:	40 91 49 0c 	lds	r20, 0x0C49	; 0x800c49 <macConfig+0xd>
    479c:	50 91 4a 0c 	lds	r21, 0x0C4A	; 0x800c4a <macConfig+0xe>
    47a0:	30 91 45 0b 	lds	r19, 0x0B45	; 0x800b45 <mac_buffer_rx+0xd>
    47a4:	20 91 46 0b 	lds	r18, 0x0B46	; 0x800b46 <mac_buffer_rx+0xe>
    47a8:	90 91 47 0b 	lds	r25, 0x0B47	; 0x800b47 <mac_buffer_rx+0xf>
    47ac:	a8 3c       	cpi	r26, 0xC8	; 200
    47ae:	81 f5       	brne	.+96     	; 0x4810 <macRouteAssociateRequest+0xa4>
    47b0:	a3 e6       	ldi	r26, 0x63	; 99
    47b2:	b8 e8       	ldi	r27, 0x88	; 136
    47b4:	ba 83       	std	Y+2, r27	; 0x02
    47b6:	a9 83       	std	Y+1, r26	; 0x01
    47b8:	a1 e0       	ldi	r26, 0x01	; 1
    47ba:	a8 0f       	add	r26, r24
    47bc:	a0 93 46 0c 	sts	0x0C46, r26	; 0x800c46 <macConfig+0xa>
    47c0:	8b 83       	std	Y+3, r24	; 0x03
    47c2:	fd 83       	std	Y+5, r31	; 0x05
    47c4:	ec 83       	std	Y+4, r30	; 0x04
    47c6:	7f 83       	std	Y+7, r23	; 0x07
    47c8:	6e 83       	std	Y+6, r22	; 0x06
    47ca:	59 87       	std	Y+9, r21	; 0x09
    47cc:	48 87       	std	Y+8, r20	; 0x08
    47ce:	81 e0       	ldi	r24, 0x01	; 1
    47d0:	8a 87       	std	Y+10, r24	; 0x0a
    47d2:	40 91 49 0b 	lds	r20, 0x0B49	; 0x800b49 <mac_buffer_rx+0x11>
    47d6:	50 91 4a 0b 	lds	r21, 0x0B4A	; 0x800b4a <mac_buffer_rx+0x12>
    47da:	5c 87       	std	Y+12, r21	; 0x0c
    47dc:	4b 87       	std	Y+11, r20	; 0x0b
    47de:	80 91 40 0b 	lds	r24, 0x0B40	; 0x800b40 <mac_buffer_rx+0x8>
    47e2:	8d 87       	std	Y+13, r24	; 0x0d
    47e4:	80 91 41 0b 	lds	r24, 0x0B41	; 0x800b41 <mac_buffer_rx+0x9>
    47e8:	8e 87       	std	Y+14, r24	; 0x0e
    47ea:	80 91 42 0b 	lds	r24, 0x0B42	; 0x800b42 <mac_buffer_rx+0xa>
    47ee:	8f 87       	std	Y+15, r24	; 0x0f
    47f0:	80 91 43 0b 	lds	r24, 0x0B43	; 0x800b43 <mac_buffer_rx+0xb>
    47f4:	88 8b       	std	Y+16, r24	; 0x10
    47f6:	80 91 44 0b 	lds	r24, 0x0B44	; 0x800b44 <mac_buffer_rx+0xc>
    47fa:	89 8b       	std	Y+17, r24	; 0x11
    47fc:	3a 8b       	std	Y+18, r19	; 0x12
    47fe:	2b 8b       	std	Y+19, r18	; 0x13
    4800:	9c 8b       	std	Y+20, r25	; 0x14
    4802:	80 91 4b 0b 	lds	r24, 0x0B4B	; 0x800b4b <mac_buffer_rx+0x13>
    4806:	8d 8b       	std	Y+21, r24	; 0x15
    4808:	be 01       	movw	r22, r28
    480a:	6f 5f       	subi	r22, 0xFF	; 255
    480c:	7f 4f       	sbci	r23, 0xFF	; 255
    480e:	43 c0       	rjmp	.+134    	; 0x4896 <macRouteAssociateRequest+0x12a>
    4810:	a3 e6       	ldi	r26, 0x63	; 99
    4812:	b8 e8       	ldi	r27, 0x88	; 136
    4814:	b0 93 bb 0b 	sts	0x0BBB, r27	; 0x800bbb <mac_buffer_tx+0x1>
    4818:	a0 93 ba 0b 	sts	0x0BBA, r26	; 0x800bba <mac_buffer_tx>
    481c:	a1 e0       	ldi	r26, 0x01	; 1
    481e:	a8 0f       	add	r26, r24
    4820:	a0 93 46 0c 	sts	0x0C46, r26	; 0x800c46 <macConfig+0xa>
    4824:	80 93 bc 0b 	sts	0x0BBC, r24	; 0x800bbc <mac_buffer_tx+0x2>
    4828:	f0 93 be 0b 	sts	0x0BBE, r31	; 0x800bbe <mac_buffer_tx+0x4>
    482c:	e0 93 bd 0b 	sts	0x0BBD, r30	; 0x800bbd <mac_buffer_tx+0x3>
    4830:	70 93 c0 0b 	sts	0x0BC0, r23	; 0x800bc0 <mac_buffer_tx+0x6>
    4834:	60 93 bf 0b 	sts	0x0BBF, r22	; 0x800bbf <mac_buffer_tx+0x5>
    4838:	50 93 c2 0b 	sts	0x0BC2, r21	; 0x800bc2 <mac_buffer_tx+0x8>
    483c:	40 93 c1 0b 	sts	0x0BC1, r20	; 0x800bc1 <mac_buffer_tx+0x7>
    4840:	81 e0       	ldi	r24, 0x01	; 1
    4842:	80 93 c3 0b 	sts	0x0BC3, r24	; 0x800bc3 <mac_buffer_tx+0x9>
    4846:	40 91 43 0b 	lds	r20, 0x0B43	; 0x800b43 <mac_buffer_rx+0xb>
    484a:	50 91 44 0b 	lds	r21, 0x0B44	; 0x800b44 <mac_buffer_rx+0xc>
    484e:	50 93 c5 0b 	sts	0x0BC5, r21	; 0x800bc5 <mac_buffer_tx+0xb>
    4852:	40 93 c4 0b 	sts	0x0BC4, r20	; 0x800bc4 <mac_buffer_tx+0xa>
    4856:	30 93 c6 0b 	sts	0x0BC6, r19	; 0x800bc6 <mac_buffer_tx+0xc>
    485a:	20 93 c7 0b 	sts	0x0BC7, r18	; 0x800bc7 <mac_buffer_tx+0xd>
    485e:	90 93 c8 0b 	sts	0x0BC8, r25	; 0x800bc8 <mac_buffer_tx+0xe>
    4862:	80 91 48 0b 	lds	r24, 0x0B48	; 0x800b48 <mac_buffer_rx+0x10>
    4866:	80 93 c9 0b 	sts	0x0BC9, r24	; 0x800bc9 <mac_buffer_tx+0xf>
    486a:	80 91 49 0b 	lds	r24, 0x0B49	; 0x800b49 <mac_buffer_rx+0x11>
    486e:	80 93 ca 0b 	sts	0x0BCA, r24	; 0x800bca <mac_buffer_tx+0x10>
    4872:	80 91 4a 0b 	lds	r24, 0x0B4A	; 0x800b4a <mac_buffer_rx+0x12>
    4876:	80 93 cb 0b 	sts	0x0BCB, r24	; 0x800bcb <mac_buffer_tx+0x11>
    487a:	80 91 4b 0b 	lds	r24, 0x0B4B	; 0x800b4b <mac_buffer_rx+0x13>
    487e:	80 93 cc 0b 	sts	0x0BCC, r24	; 0x800bcc <mac_buffer_tx+0x12>
    4882:	80 91 4c 0b 	lds	r24, 0x0B4C	; 0x800b4c <mac_buffer_rx+0x14>
    4886:	80 93 cd 0b 	sts	0x0BCD, r24	; 0x800bcd <mac_buffer_tx+0x13>
    488a:	80 91 4d 0b 	lds	r24, 0x0B4D	; 0x800b4d <mac_buffer_rx+0x15>
    488e:	80 93 ce 0b 	sts	0x0BCE, r24	; 0x800bce <mac_buffer_tx+0x14>
    4892:	6a eb       	ldi	r22, 0xBA	; 186
    4894:	7b e0       	ldi	r23, 0x0B	; 11
    4896:	85 e1       	ldi	r24, 0x15	; 21
    4898:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <radioSendData>
    489c:	65 96       	adiw	r28, 0x15	; 21
    489e:	0f b6       	in	r0, 0x3f	; 63
    48a0:	f8 94       	cli
    48a2:	de bf       	out	0x3e, r29	; 62
    48a4:	0f be       	out	0x3f, r0	; 63
    48a6:	cd bf       	out	0x3d, r28	; 61
    48a8:	df 91       	pop	r29
    48aa:	cf 91       	pop	r28
    48ac:	08 95       	ret

000048ae <macRouteData>:
    {
        ftData *frame = (ftData *)(mac_buffer_tx+1);
        u8 holdFlag=0;

        // Copy RX to TX buffer
        macCopyRxToTx();
    48ae:	82 e8       	ldi	r24, 0x82	; 130
    48b0:	e8 e3       	ldi	r30, 0x38	; 56
    48b2:	fb e0       	ldi	r31, 0x0B	; 11
    48b4:	aa eb       	ldi	r26, 0xBA	; 186
    48b6:	bb e0       	ldi	r27, 0x0B	; 11
    48b8:	01 90       	ld	r0, Z+
    48ba:	0d 92       	st	X+, r0
    48bc:	8a 95       	dec	r24
    48be:	e1 f7       	brne	.-8      	; 0x48b8 <macRouteData+0xa>

        Led1_on();
    48c0:	a0 9a       	sbi	0x14, 0	; 20
        macSetAlarm(LED_DELAY,ledoff1);
    48c2:	6d e9       	ldi	r22, 0x9D	; 157
    48c4:	71 e0       	ldi	r23, 0x01	; 1
    48c6:	8a e0       	ldi	r24, 0x0A	; 10
    48c8:	90 e0       	ldi	r25, 0x00	; 0
    48ca:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <macSetAlarm>

        // See if this frame is in the child table
        if (macIsChild(frame->finalDestAddr))
    48ce:	80 91 c4 0b 	lds	r24, 0x0BC4	; 0x800bc4 <mac_buffer_tx+0xa>
    48d2:	90 91 c5 0b 	lds	r25, 0x0BC5	; 0x800bc5 <mac_buffer_tx+0xb>
    48d6:	0e 94 39 20 	call	0x4072	; 0x4072 <macIsChild>
    48da:	90 91 46 0c 	lds	r25, 0x0C46	; 0x800c46 <macConfig+0xa>
    48de:	20 91 49 0c 	lds	r18, 0x0C49	; 0x800c49 <macConfig+0xd>
    48e2:	30 91 4a 0c 	lds	r19, 0x0C4A	; 0x800c4a <macConfig+0xe>
    48e6:	88 23       	and	r24, r24
    48e8:	59 f0       	breq	.+22     	; 0x4900 <macRouteData+0x52>
        {
            // send frame to child
            frame->seq = macConfig.dsn++;
    48ea:	81 e0       	ldi	r24, 0x01	; 1
    48ec:	89 0f       	add	r24, r25
    48ee:	80 93 46 0c 	sts	0x0C46, r24	; 0x800c46 <macConfig+0xa>
    48f2:	90 93 bd 0b 	sts	0x0BBD, r25	; 0x800bbd <mac_buffer_tx+0x3>
            frame->destAddr = frame->finalDestAddr;
    48f6:	80 91 c4 0b 	lds	r24, 0x0BC4	; 0x800bc4 <mac_buffer_tx+0xa>
    48fa:	90 91 c5 0b 	lds	r25, 0x0BC5	; 0x800bc5 <mac_buffer_tx+0xb>
    48fe:	15 c0       	rjmp	.+42     	; 0x492a <macRouteData+0x7c>
                }
            }
            else if (NODETYPE == ROUTER)
            {
                // See if we should route up or down
                if (frame->srcAddr == macConfig.parentShortAddress)
    4900:	40 91 4b 0c 	lds	r20, 0x0C4B	; 0x800c4b <macConfig+0xf>
    4904:	50 91 4c 0c 	lds	r21, 0x0C4C	; 0x800c4c <macConfig+0x10>
    4908:	60 91 c2 0b 	lds	r22, 0x0BC2	; 0x800bc2 <mac_buffer_tx+0x8>
    490c:	70 91 c3 0b 	lds	r23, 0x0BC3	; 0x800bc3 <mac_buffer_tx+0x9>
                {
                    // this frame is from parent, send it down default route
                    frame->seq = macConfig.dsn++;
    4910:	81 e0       	ldi	r24, 0x01	; 1
    4912:	89 0f       	add	r24, r25
    4914:	80 93 46 0c 	sts	0x0C46, r24	; 0x800c46 <macConfig+0xa>
    4918:	90 93 bd 0b 	sts	0x0BBD, r25	; 0x800bbd <mac_buffer_tx+0x3>
                }
            }
            else if (NODETYPE == ROUTER)
            {
                // See if we should route up or down
                if (frame->srcAddr == macConfig.parentShortAddress)
    491c:	64 17       	cp	r22, r20
    491e:	75 07       	cpc	r23, r21
    4920:	49 f4       	brne	.+18     	; 0x4934 <macRouteData+0x86>
                {
                    // this frame is from parent, send it down default route
                    frame->seq = macConfig.dsn++;
                    frame->destAddr = macConfig.lastRoute;
    4922:	80 91 4d 0c 	lds	r24, 0x0C4D	; 0x800c4d <macConfig+0x11>
    4926:	90 91 4e 0c 	lds	r25, 0x0C4E	; 0x800c4e <macConfig+0x12>
    492a:	90 93 c1 0b 	sts	0x0BC1, r25	; 0x800bc1 <mac_buffer_tx+0x7>
    492e:	80 93 c0 0b 	sts	0x0BC0, r24	; 0x800bc0 <mac_buffer_tx+0x6>
    4932:	04 c0       	rjmp	.+8      	; 0x493c <macRouteData+0x8e>
                }
                else
                {
                    // this frame is from child, send up the chain
                    frame->seq = macConfig.dsn++;
                    frame->destAddr = macConfig.parentShortAddress;
    4934:	50 93 c1 0b 	sts	0x0BC1, r21	; 0x800bc1 <mac_buffer_tx+0x7>
    4938:	40 93 c0 0b 	sts	0x0BC0, r20	; 0x800bc0 <mac_buffer_tx+0x6>
                    frame->srcAddr = macConfig.shortAddress;
    493c:	30 93 c3 0b 	sts	0x0BC3, r19	; 0x800bc3 <mac_buffer_tx+0x9>
    4940:	20 93 c2 0b 	sts	0x0BC2, r18	; 0x800bc2 <mac_buffer_tx+0x8>
        if (holdFlag)
                macHoldFrame(frame->finalDestAddr, (u8*)frame, (u8)*mac_buffer_tx - 2);
        else
        {
            // Make sure we're not broadcasting frames
            if (frame->destAddr != BROADCASTADDR)
    4944:	80 91 c0 0b 	lds	r24, 0x0BC0	; 0x800bc0 <mac_buffer_tx+0x6>
    4948:	90 91 c1 0b 	lds	r25, 0x0BC1	; 0x800bc1 <mac_buffer_tx+0x7>
    494c:	01 96       	adiw	r24, 0x01	; 1
    494e:	39 f0       	breq	.+14     	; 0x495e <macRouteData+0xb0>
                // Send the frame along (subtract 2 bytes from length for checksum length)
                radioSendData(*mac_buffer_tx - 2, (u8*)frame);
    4950:	80 91 ba 0b 	lds	r24, 0x0BBA	; 0x800bba <mac_buffer_tx>
    4954:	6b eb       	ldi	r22, 0xBB	; 187
    4956:	7b e0       	ldi	r23, 0x0B	; 11
    4958:	82 50       	subi	r24, 0x02	; 2
    495a:	0c 94 97 1d 	jmp	0x3b2e	; 0x3b2e <radioSendData>
    495e:	08 95       	ret

00004960 <macSendRoutingPacket>:

        // Set the flag to say we sent a routing packet.
        return 1;
    }
    return 0;
}
    4960:	80 e0       	ldi	r24, 0x00	; 0
    4962:	08 95       	ret

00004964 <store_pandescriptors>:
   @return The channel set by @ref macSetScanChannel().
*/
u8 macGetScanChannel(void)
{
    return scanChannel;
}
    4964:	cf 93       	push	r28
    4966:	df 93       	push	r29
    4968:	e8 e3       	ldi	r30, 0x38	; 56
    496a:	fb e0       	ldi	r31, 0x0B	; 11
    496c:	20 91 b8 0b 	lds	r18, 0x0BB8	; 0x800bb8 <mac_buffer_rx+0x80>
    4970:	c1 eb       	ldi	r28, 0xB1	; 177
    4972:	dc e0       	ldi	r29, 0x0C	; 12
    4974:	81 81       	ldd	r24, Z+1	; 0x01
    4976:	92 81       	ldd	r25, Z+2	; 0x02
    4978:	84 e0       	ldi	r24, 0x04	; 4
    497a:	98 9f       	mul	r25, r24
    497c:	81 2d       	mov	r24, r1
    497e:	99 27       	eor	r25, r25
    4980:	11 24       	eor	r1, r1
    4982:	88 83       	st	Y, r24
    4984:	84 81       	ldd	r24, Z+4	; 0x04
    4986:	95 81       	ldd	r25, Z+5	; 0x05
    4988:	9a 83       	std	Y+2, r25	; 0x02
    498a:	89 83       	std	Y+1, r24	; 0x01
    498c:	86 81       	ldd	r24, Z+6	; 0x06
    498e:	97 81       	ldd	r25, Z+7	; 0x07
    4990:	9c 83       	std	Y+4, r25	; 0x04
    4992:	8b 83       	std	Y+3, r24	; 0x03
    4994:	83 85       	ldd	r24, Z+11	; 0x0b
    4996:	89 87       	std	Y+9, r24	; 0x09
    4998:	80 91 50 0c 	lds	r24, 0x0C50	; 0x800c50 <macConfig+0x14>
    499c:	81 50       	subi	r24, 0x01	; 1
    499e:	8d 83       	std	Y+5, r24	; 0x05
    49a0:	1e 82       	std	Y+6, r1	; 0x06
    49a2:	2a 87       	std	Y+10, r18	; 0x0a
    49a4:	0e 94 a2 1b 	call	0x3744	; 0x3744 <radioGetSavedRssiValue>
    49a8:	8b 87       	std	Y+11, r24	; 0x0b
    49aa:	df 91       	pop	r29
    49ac:	cf 91       	pop	r28
    49ae:	08 95       	ret

000049b0 <macIsScanning>:
    49b0:	80 91 67 06 	lds	r24, 0x0667	; 0x800667 <scanInProcess>
    49b4:	08 95       	ret

000049b6 <mac_logPanDescriptors>:
    In @ref DEMO mode, the only criteria used is to pick the parent
    with the lowest RSSI reading.  This is done to encourage the
    formation of a multi-hop network for test and demo purposes.
*/
void mac_logPanDescriptors(void)
{
    49b6:	cf 93       	push	r28
    ftBeacon *frame = (ftBeacon *)(mac_buffer_rx+1);
    u8 lqi = ((rx_frame_t *)mac_buffer_rx)->lqi;
    49b8:	80 91 b8 0b 	lds	r24, 0x0BB8	; 0x800bb8 <mac_buffer_rx+0x80>

    // Swap frame
    frame->panid = ntohs_16(frame->panid);
    frame->addr = ntohs_16(frame->addr);
    frame->superFrame = ntohs_16(frame->superFrame);
    49bc:	40 91 40 0b 	lds	r20, 0x0B40	; 0x800b40 <mac_buffer_rx+0x8>
    49c0:	50 91 41 0b 	lds	r21, 0x0B41	; 0x800b41 <mac_buffer_rx+0x9>


    if (!scanInProcess)
    49c4:	90 91 67 06 	lds	r25, 0x0667	; 0x800667 <scanInProcess>
    49c8:	99 23       	and	r25, r25
    49ca:	61 f1       	breq	.+88     	; 0x4a24 <mac_logPanDescriptors+0x6e>
        return;
    if (frame->netID != 6)
    49cc:	90 91 42 0b 	lds	r25, 0x0B42	; 0x800b42 <mac_buffer_rx+0xa>
    49d0:	96 30       	cpi	r25, 0x06	; 6
    49d2:	41 f5       	brne	.+80     	; 0x4a24 <mac_logPanDescriptors+0x6e>
        energy.energy[energy.currentChannel] += 500;
    }
    else  // Router and end nodes
    {
        // Check the Beacon frame Superframe spec value.
        u16 previous_superframe = panDescriptor.superFrameSpec.superframe_data;
    49d4:	20 91 b8 0c 	lds	r18, 0x0CB8	; 0x800cb8 <panDescriptor+0x7>
    49d8:	30 91 b9 0c 	lds	r19, 0x0CB9	; 0x800cb9 <panDescriptor+0x8>
        panDescriptor.superFrameSpec.superframe_data = htons_16(frame->superFrame);
    49dc:	50 93 b9 0c 	sts	0x0CB9, r21	; 0x800cb9 <panDescriptor+0x8>
    49e0:	40 93 b8 0c 	sts	0x0CB8, r20	; 0x800cb8 <panDescriptor+0x7>

        // Determine if association permit is true. We're looking for false.
        if(panDescriptor.superFrameSpec.superframe_struct.association_permit)
    49e4:	90 91 b9 0c 	lds	r25, 0x0CB9	; 0x800cb9 <panDescriptor+0x8>
    49e8:	97 ff       	sbrs	r25, 7
    49ea:	05 c0       	rjmp	.+10     	; 0x49f6 <mac_logPanDescriptors+0x40>
        {
            panDescriptor.superFrameSpec.superframe_data = previous_superframe;
    49ec:	30 93 b9 0c 	sts	0x0CB9, r19	; 0x800cb9 <panDescriptor+0x8>
    49f0:	20 93 b8 0c 	sts	0x0CB8, r18	; 0x800cb8 <panDescriptor+0x7>
            return;
    49f4:	17 c0       	rjmp	.+46     	; 0x4a24 <mac_logPanDescriptors+0x6e>
            }
        }
        else
        {
            // Determine if the Beacon LQI value is stronger than the previous scan.
            if(panDescriptor.lqi < lqi)
    49f6:	90 91 bb 0c 	lds	r25, 0x0CBB	; 0x800cbb <panDescriptor+0xa>
    49fa:	98 17       	cp	r25, r24
    49fc:	18 f4       	brcc	.+6      	; 0x4a04 <mac_logPanDescriptors+0x4e>
            {
                store_pandescriptors();
            }
        }
    }
}
    49fe:	cf 91       	pop	r28
        else
        {
            // Determine if the Beacon LQI value is stronger than the previous scan.
            if(panDescriptor.lqi < lqi)
            {
                store_pandescriptors();
    4a00:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <store_pandescriptors>
            }
            // If LQI is equal to previous stored, check for the least amount of hops to the coord.
            else if((panDescriptor.lqi == lqi)
    4a04:	98 13       	cpse	r25, r24
    4a06:	0e c0       	rjmp	.+28     	; 0x4a24 <mac_logPanDescriptors+0x6e>
                    && (panDescriptor.hopsToCoord > frame->hops))
    4a08:	90 91 ba 0c 	lds	r25, 0x0CBA	; 0x800cba <panDescriptor+0x9>
    4a0c:	80 91 43 0b 	lds	r24, 0x0B43	; 0x800b43 <mac_buffer_rx+0xb>
    4a10:	89 17       	cp	r24, r25
    4a12:	a8 f3       	brcs	.-22     	; 0x49fe <mac_logPanDescriptors+0x48>
            {
                store_pandescriptors();
            }
            // If LQI and hops are equal to the previous stored, check for the best RSSI value.
            else if((panDescriptor.lqi == lqi)
                    && (panDescriptor.hopsToCoord == frame->hops)
    4a14:	98 13       	cpse	r25, r24
    4a16:	06 c0       	rjmp	.+12     	; 0x4a24 <mac_logPanDescriptors+0x6e>
                    && (panDescriptor.rssi < radioGetSavedRssiValue()))
    4a18:	c0 91 bc 0c 	lds	r28, 0x0CBC	; 0x800cbc <panDescriptor+0xb>
    4a1c:	0e 94 a2 1b 	call	0x3744	; 0x3744 <radioGetSavedRssiValue>
    4a20:	c8 17       	cp	r28, r24
    4a22:	68 f3       	brcs	.-38     	; 0x49fe <mac_logPanDescriptors+0x48>
            {
                store_pandescriptors();
            }
        }
    }
}
    4a24:	cf 91       	pop	r28
    4a26:	08 95       	ret

00004a28 <mac_scanConfirm>:
    @brief Trigger a call to @ref appScanConfirm(), since the scanning
    process is done.  If at least one valid beacon was received, then signal that
    success to the application.
*/
void mac_scanConfirm(void)
{
    4a28:	cf 93       	push	r28
    // logicalChannel is used as flag to show that we received a valid beacon
    u8 gotbeacon = (panDescriptor.logicalChannel != 0xff);
    4a2a:	c1 e0       	ldi	r28, 0x01	; 1
    4a2c:	80 91 b6 0c 	lds	r24, 0x0CB6	; 0x800cb6 <panDescriptor+0x5>
    4a30:	8f 3f       	cpi	r24, 0xFF	; 255
    4a32:	11 f4       	brne	.+4      	; 0x4a38 <mac_scanConfirm+0x10>
    4a34:	c0 e0       	ldi	r28, 0x00	; 0
    4a36:	1b c0       	rjmp	.+54     	; 0x4a6e <mac_scanConfirm+0x46>

    if (gotbeacon)
    {
        // Save the panDescriptor data to the PIB's.
        macConfig.panId = panDescriptor.coorPANId;
    4a38:	80 91 b2 0c 	lds	r24, 0x0CB2	; 0x800cb2 <panDescriptor+0x1>
    4a3c:	90 91 b3 0c 	lds	r25, 0x0CB3	; 0x800cb3 <panDescriptor+0x2>
    4a40:	90 93 48 0c 	sts	0x0C48, r25	; 0x800c48 <macConfig+0xc>
    4a44:	80 93 47 0c 	sts	0x0C47, r24	; 0x800c47 <macConfig+0xb>
        macConfig.parentShortAddress = panDescriptor.coordAddr;
    4a48:	20 91 b4 0c 	lds	r18, 0x0CB4	; 0x800cb4 <panDescriptor+0x3>
    4a4c:	30 91 b5 0c 	lds	r19, 0x0CB5	; 0x800cb5 <panDescriptor+0x4>
    4a50:	30 93 4c 0c 	sts	0x0C4C, r19	; 0x800c4c <macConfig+0x10>
    4a54:	20 93 4b 0c 	sts	0x0C4B, r18	; 0x800c4b <macConfig+0xf>

        // Need to reset the PAN ID in the radio.
        radioSetPanId(macConfig.panId);
    4a58:	0e 94 d5 1d 	call	0x3baa	; 0x3baa <radioSetPanId>

        macSetOperatingChannel(panDescriptor.logicalChannel);
    4a5c:	80 91 b6 0c 	lds	r24, 0x0CB6	; 0x800cb6 <panDescriptor+0x5>
    4a60:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <macSetOperatingChannel>

        // We are one hop more than our (prospective) parent
        macConfig.hopsToCoord = panDescriptor.hopsToCoord + 1;
    4a64:	90 91 ba 0c 	lds	r25, 0x0CBA	; 0x800cba <panDescriptor+0x9>
    4a68:	9f 5f       	subi	r25, 0xFF	; 255
    4a6a:	90 93 4f 0c 	sts	0x0C4F, r25	; 0x800c4f <macConfig+0x13>
    }
    // Confirm the scan, only if we have a valid coordinator
    appScanConfirm(gotbeacon);
    4a6e:	8c 2f       	mov	r24, r28
}
    4a70:	cf 91       	pop	r28

        // We are one hop more than our (prospective) parent
        macConfig.hopsToCoord = panDescriptor.hopsToCoord + 1;
    }
    // Confirm the scan, only if we have a valid coordinator
    appScanConfirm(gotbeacon);
    4a72:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <appScanConfirm>

00004a76 <macScan>:
    // Check for fixed channel
    if (PAN_CHANNEL != CHANNEL255)
        macSetScanChannel(PAN_CHANNEL);

    // Set up some varibles on the initial call to macScan()
    if (0xFF == macConfig.currentChannel)
    4a76:	80 91 50 0c 	lds	r24, 0x0C50	; 0x800c50 <macConfig+0x14>
    4a7a:	8f 3f       	cpi	r24, 0xFF	; 255
    4a7c:	b1 f4       	brne	.+44     	; 0x4aaa <macScan+0x34>
    {
        scanInProcess = true;
    4a7e:	91 e0       	ldi	r25, 0x01	; 1
    4a80:	90 93 67 06 	sts	0x0667, r25	; 0x800667 <scanInProcess>

        // Reset the variables.
        memset(&panDescriptor, 0, sizeof(panDescriptor_t));
    4a84:	96 e1       	ldi	r25, 0x16	; 22
    4a86:	e1 eb       	ldi	r30, 0xB1	; 177
    4a88:	fc e0       	ldi	r31, 0x0C	; 12
    4a8a:	df 01       	movw	r26, r30
    4a8c:	1d 92       	st	X+, r1
    4a8e:	9a 95       	dec	r25
    4a90:	e9 f7       	brne	.-6      	; 0x4a8c <macScan+0x16>

        // logicalChannel is used as flag to show that we received a valid beacon
        panDescriptor.logicalChannel = 0xff;
    4a92:	80 93 b6 0c 	sts	0x0CB6, r24	; 0x800cb6 <panDescriptor+0x5>

        macConfig.currentChannel = MIN_CHANNEL; // First possible channel for RF23x
    4a96:	8b e0       	ldi	r24, 0x0B	; 11
    4a98:	80 93 50 0c 	sts	0x0C50, r24	; 0x800c50 <macConfig+0x14>

        // Check for a single pre-defined channel to scan.
        if (scanChannel != ALL_CHANNELS)
    4a9c:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <scanChannel>
    4aa0:	80 38       	cpi	r24, 0x80	; 128
    4aa2:	a9 f0       	breq	.+42     	; 0x4ace <macScan+0x58>
            macConfig.currentChannel = scanChannel;
    4aa4:	80 93 50 0c 	sts	0x0C50, r24	; 0x800c50 <macConfig+0x14>
    4aa8:	12 c0       	rjmp	.+36     	; 0x4ace <macScan+0x58>
        // Not first time through, must sleep very low power nodes.
        #if (VLP && (NODETYPE == ENDDEVICE))
            nodeSleep(SCAN_SLEEP_TIME);
		#endif
    // See if we're done scanning
    if(macConfig.currentChannel > (CHINA_MODE ? 4 : MAX_CHANNEL) ||
    4aaa:	8b 31       	cpi	r24, 0x1B	; 27
    4aac:	48 f4       	brcc	.+18     	; 0x4ac0 <macScan+0x4a>
       macConfig.currentChannel == scanChannel + 1)
    4aae:	90 e0       	ldi	r25, 0x00	; 0
    4ab0:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <scanChannel>
    4ab4:	30 e0       	ldi	r19, 0x00	; 0
    4ab6:	2f 5f       	subi	r18, 0xFF	; 255
    4ab8:	3f 4f       	sbci	r19, 0xFF	; 255
        // Not first time through, must sleep very low power nodes.
        #if (VLP && (NODETYPE == ENDDEVICE))
            nodeSleep(SCAN_SLEEP_TIME);
		#endif
    // See if we're done scanning
    if(macConfig.currentChannel > (CHINA_MODE ? 4 : MAX_CHANNEL) ||
    4aba:	82 17       	cp	r24, r18
    4abc:	93 07       	cpc	r25, r19
    4abe:	39 f4       	brne	.+14     	; 0x4ace <macScan+0x58>
       macConfig.currentChannel == scanChannel + 1)
        {
            // done scanning
            scanInProcess = false;
    4ac0:	10 92 67 06 	sts	0x0667, r1	; 0x800667 <scanInProcess>
            macConfig.currentChannel = 0xFF;
    4ac4:	8f ef       	ldi	r24, 0xFF	; 255
    4ac6:	80 93 50 0c 	sts	0x0C50, r24	; 0x800c50 <macConfig+0x14>

            mac_scanConfirm();
    4aca:	0c 94 14 25 	jmp	0x4a28	; 0x4a28 <mac_scanConfirm>
            return;
        }

    // Set the channel.
    macSetOperatingChannel(macConfig.currentChannel);
    4ace:	80 91 50 0c 	lds	r24, 0x0C50	; 0x800c50 <macConfig+0x14>
    4ad2:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <macSetOperatingChannel>
{
    // Create a struct pointer to the global variable...
    volatile ftBeaconReq* brFrame = (ftBeaconReq*)(mac_buffer_tx+1);

    // Fill in beacon request frame
    brFrame->fcf = htons_16(FCF_BEACONREQ);
    4ad6:	83 e0       	ldi	r24, 0x03	; 3
    4ad8:	98 e0       	ldi	r25, 0x08	; 8
    4ada:	90 93 bc 0b 	sts	0x0BBC, r25	; 0x800bbc <mac_buffer_tx+0x2>
    4ade:	80 93 bb 0b 	sts	0x0BBB, r24	; 0x800bbb <mac_buffer_tx+0x1>
    brFrame->seq = macConfig.bsn++;
    4ae2:	80 91 45 0c 	lds	r24, 0x0C45	; 0x800c45 <macConfig+0x9>
    4ae6:	91 e0       	ldi	r25, 0x01	; 1
    4ae8:	98 0f       	add	r25, r24
    4aea:	90 93 45 0c 	sts	0x0C45, r25	; 0x800c45 <macConfig+0x9>
    4aee:	80 93 bd 0b 	sts	0x0BBD, r24	; 0x800bbd <mac_buffer_tx+0x3>
    brFrame->panid = htons_16(PAN_ID);
    4af2:	8f ef       	ldi	r24, 0xFF	; 255
    4af4:	9f ef       	ldi	r25, 0xFF	; 255
    4af6:	90 93 bf 0b 	sts	0x0BBF, r25	; 0x800bbf <mac_buffer_tx+0x5>
    4afa:	80 93 be 0b 	sts	0x0BBE, r24	; 0x800bbe <mac_buffer_tx+0x4>
    brFrame->broadcastAddr = BROADCASTADDR;
    4afe:	90 93 c1 0b 	sts	0x0BC1, r25	; 0x800bc1 <mac_buffer_tx+0x7>
    4b02:	80 93 c0 0b 	sts	0x0BC0, r24	; 0x800bc0 <mac_buffer_tx+0x6>
    brFrame->cmd = BEACON_REQUEST;
    4b06:	87 e0       	ldi	r24, 0x07	; 7
    4b08:	80 93 c2 0b 	sts	0x0BC2, r24	; 0x800bc2 <mac_buffer_tx+0x8>

    // Send the frame via radio
    radioSendData(sizeof(ftBeaconReq), (u8*)brFrame);
    4b0c:	6b eb       	ldi	r22, 0xBB	; 187
    4b0e:	7b e0       	ldi	r23, 0x0B	; 11
    4b10:	88 e0       	ldi	r24, 0x08	; 8
    4b12:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <radioSendData>

    // Send the beacon request
    sendBeaconRequest();

    // Beacon was send, increment channel to prepare for the next one.
    macConfig.currentChannel++;
    4b16:	80 91 50 0c 	lds	r24, 0x0C50	; 0x800c50 <macConfig+0x14>
    4b1a:	8f 5f       	subi	r24, 0xFF	; 255
    4b1c:	80 93 50 0c 	sts	0x0C50, r24	; 0x800c50 <macConfig+0x14>

    // Set the scan duration timer.
    macSetAlarm(SCANDURATION, macScan);
    4b20:	6b e3       	ldi	r22, 0x3B	; 59
    4b22:	75 e2       	ldi	r23, 0x25	; 37
    4b24:	84 e1       	ldi	r24, 0x14	; 20
    4b26:	90 e0       	ldi	r25, 0x00	; 0
    4b28:	0c 94 cd 25 	jmp	0x4b9a	; 0x4b9a <macSetAlarm>

00004b2c <macEdCallback>:
   @brief Callback function, called by the radio ISR function when the
   radio issues an energy measurement interrupt.  This function stores
   the energy measurement for later use.
 */
void macEdCallback(void)
{
    4b2c:	08 95       	ret

00004b2e <getUniqueID>:
    localtime = tickTimer;
    AVR_LEAVE_CRITICAL_REGION();

    return localtime;

}
    4b2e:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <currentTimerID.3607>
    4b32:	8f 5f       	subi	r24, 0xFF	; 255
    4b34:	09 f4       	brne	.+2      	; 0x4b38 <getUniqueID+0xa>
    4b36:	81 e0       	ldi	r24, 0x01	; 1
    4b38:	20 e0       	ldi	r18, 0x00	; 0
    4b3a:	30 e0       	ldi	r19, 0x00	; 0
    4b3c:	91 e0       	ldi	r25, 0x01	; 1
    4b3e:	f9 01       	movw	r30, r18
    4b40:	e0 53       	subi	r30, 0x30	; 48
    4b42:	f9 4f       	sbci	r31, 0xF9	; 249
    4b44:	42 81       	ldd	r20, Z+2	; 0x02
    4b46:	48 13       	cpse	r20, r24
    4b48:	01 c0       	rjmp	.+2      	; 0x4b4c <getUniqueID+0x1e>
    4b4a:	90 e0       	ldi	r25, 0x00	; 0
    4b4c:	2b 5f       	subi	r18, 0xFB	; 251
    4b4e:	3f 4f       	sbci	r19, 0xFF	; 255
    4b50:	24 36       	cpi	r18, 0x64	; 100
    4b52:	31 05       	cpc	r19, r1
    4b54:	a1 f7       	brne	.-24     	; 0x4b3e <getUniqueID+0x10>
    4b56:	20 e0       	ldi	r18, 0x00	; 0
    4b58:	30 e0       	ldi	r19, 0x00	; 0
    4b5a:	f9 01       	movw	r30, r18
    4b5c:	e4 59       	subi	r30, 0x94	; 148
    4b5e:	f9 4f       	sbci	r31, 0xF9	; 249
    4b60:	42 81       	ldd	r20, Z+2	; 0x02
    4b62:	48 13       	cpse	r20, r24
    4b64:	01 c0       	rjmp	.+2      	; 0x4b68 <getUniqueID+0x3a>
    4b66:	90 e0       	ldi	r25, 0x00	; 0
    4b68:	2b 5f       	subi	r18, 0xFB	; 251
    4b6a:	3f 4f       	sbci	r19, 0xFF	; 255
    4b6c:	24 36       	cpi	r18, 0x64	; 100
    4b6e:	31 05       	cpc	r19, r1
    4b70:	a1 f7       	brne	.-24     	; 0x4b5a <getUniqueID+0x2c>
    4b72:	99 23       	and	r25, r25
    4b74:	f1 f2       	breq	.-68     	; 0x4b32 <getUniqueID+0x4>
    4b76:	80 93 68 06 	sts	0x0668, r24	; 0x800668 <currentTimerID.3607>
    4b7a:	08 95       	ret

00004b7c <timerStart>:
    4b7c:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <timerRunning>
    4b80:	81 11       	cpse	r24, r1
    4b82:	0a c0       	rjmp	.+20     	; 0x4b98 <timerStart+0x1c>
    4b84:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    4b88:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
    4b8c:	82 e0       	ldi	r24, 0x02	; 2
    4b8e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    4b92:	81 e0       	ldi	r24, 0x01	; 1
    4b94:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <timerRunning>
    4b98:	08 95       	ret

00004b9a <macSetAlarm>:
   return nothing.

   @return Handle to timer.  Can be used to call macTimerEnd().
*/
u8 macSetAlarm(u16 time, void(*callback)(void))
{
    4b9a:	0f 93       	push	r16
    4b9c:	1f 93       	push	r17
    4b9e:	cf 93       	push	r28
    4ba0:	df 93       	push	r29
    4ba2:	1f 92       	push	r1
    4ba4:	cd b7       	in	r28, 0x3d	; 61
    4ba6:	de b7       	in	r29, 0x3e	; 62
    u8 i;
    u16 ticks;

    if (!time)
    4ba8:	00 97       	sbiw	r24, 0x00	; 0
    4baa:	19 f4       	brne	.+6      	; 0x4bb2 <macSetAlarm+0x18>
    {
        // Don't delay, just call it
        callback();
    4bac:	fb 01       	movw	r30, r22
    4bae:	09 95       	icall
    4bb0:	12 c0       	rjmp	.+36     	; 0x4bd6 <macSetAlarm+0x3c>

    // Store the timer details in the array
    ticks = max(time, 1);  // At least one tick

    // Protect this section from an ISR that will add an alarm
    AVR_ENTER_CRITICAL_REGION();
    4bb2:	2f b7       	in	r18, 0x3f	; 63
    4bb4:	29 83       	std	Y+1, r18	; 0x01
    4bb6:	f8 94       	cli
    4bb8:	a0 ed       	ldi	r26, 0xD0	; 208
    4bba:	b6 e0       	ldi	r27, 0x06	; 6
    4bbc:	20 e0       	ldi	r18, 0x00	; 0
    4bbe:	30 e0       	ldi	r19, 0x00	; 0
    // search for free event structure
    for (i=0;i<TIMER_EVENTS_MAX;i++)
        if (!timerEvents[i].time)
    4bc0:	4d 91       	ld	r20, X+
    4bc2:	5c 91       	ld	r21, X
    4bc4:	11 97       	sbiw	r26, 0x01	; 1
    4bc6:	45 2b       	or	r20, r21
    4bc8:	41 f0       	breq	.+16     	; 0x4bda <macSetAlarm+0x40>
    4bca:	2f 5f       	subi	r18, 0xFF	; 255
    4bcc:	3f 4f       	sbci	r19, 0xFF	; 255
    4bce:	15 96       	adiw	r26, 0x05	; 5
    ticks = max(time, 1);  // At least one tick

    // Protect this section from an ISR that will add an alarm
    AVR_ENTER_CRITICAL_REGION();
    // search for free event structure
    for (i=0;i<TIMER_EVENTS_MAX;i++)
    4bd0:	24 31       	cpi	r18, 0x14	; 20
    4bd2:	31 05       	cpc	r19, r1
    4bd4:	a9 f7       	brne	.-22     	; 0x4bc0 <macSetAlarm+0x26>
            // free, use this one
            break;

    if (i >= TIMER_EVENTS_MAX)
        // Out of timers to use, just quit
        return 0;
    4bd6:	80 e0       	ldi	r24, 0x00	; 0
    4bd8:	23 c0       	rjmp	.+70     	; 0x4c20 <macSetAlarm+0x86>

    timerEvents[i].time = ticks;
    4bda:	45 e0       	ldi	r20, 0x05	; 5
    4bdc:	42 9f       	mul	r20, r18
    4bde:	d0 01       	movw	r26, r0
    4be0:	43 9f       	mul	r20, r19
    4be2:	b0 0d       	add	r27, r0
    4be4:	11 24       	eor	r1, r1
    4be6:	a0 53       	subi	r26, 0x30	; 48
    4be8:	b9 4f       	sbci	r27, 0xF9	; 249
        callback();
        return 0;
    }

    // Store the timer details in the array
    ticks = max(time, 1);  // At least one tick
    4bea:	00 97       	sbiw	r24, 0x00	; 0
    4bec:	11 f4       	brne	.+4      	; 0x4bf2 <macSetAlarm+0x58>
    4bee:	81 e0       	ldi	r24, 0x01	; 1
    4bf0:	90 e0       	ldi	r25, 0x00	; 0

    if (i >= TIMER_EVENTS_MAX)
        // Out of timers to use, just quit
        return 0;

    timerEvents[i].time = ticks;
    4bf2:	8d 93       	st	X+, r24
    4bf4:	9c 93       	st	X, r25
    timerEvents[i].callback = callback;
    4bf6:	85 e0       	ldi	r24, 0x05	; 5
    4bf8:	82 9f       	mul	r24, r18
    4bfa:	80 01       	movw	r16, r0
    4bfc:	83 9f       	mul	r24, r19
    4bfe:	10 0d       	add	r17, r0
    4c00:	11 24       	eor	r1, r1
    4c02:	00 53       	subi	r16, 0x30	; 48
    4c04:	19 4f       	sbci	r17, 0xF9	; 249
    4c06:	f8 01       	movw	r30, r16
    4c08:	74 83       	std	Z+4, r23	; 0x04
    4c0a:	63 83       	std	Z+3, r22	; 0x03
    // don't return zero as a timer ID
    timerEvents[i].timerID = getUniqueID();
    4c0c:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <getUniqueID>
    4c10:	f8 01       	movw	r30, r16
    4c12:	82 83       	std	Z+2, r24	; 0x02

    // start timer running, since we have at least one timer running
    timerStart();
    4c14:	0e 94 be 25 	call	0x4b7c	; 0x4b7c <timerStart>
    AVR_LEAVE_CRITICAL_REGION();
    4c18:	89 81       	ldd	r24, Y+1	; 0x01
    4c1a:	8f bf       	out	0x3f, r24	; 63

    return timerEvents[i].timerID;
    4c1c:	f8 01       	movw	r30, r16
    4c1e:	82 81       	ldd	r24, Z+2	; 0x02
}
    4c20:	0f 90       	pop	r0
    4c22:	df 91       	pop	r29
    4c24:	cf 91       	pop	r28
    4c26:	1f 91       	pop	r17
    4c28:	0f 91       	pop	r16
    4c2a:	08 95       	ret

00004c2c <macSetLongAlarm>:
   hours.

   @return Handle to timer.  Can be used to call macTimerEnd().
*/
u8 macSetLongAlarm(u16 seconds, void(*callback)(void))
{
    4c2c:	0f 93       	push	r16
    4c2e:	1f 93       	push	r17
    4c30:	cf 93       	push	r28
    4c32:	df 93       	push	r29
    4c34:	1f 92       	push	r1
    4c36:	cd b7       	in	r28, 0x3d	; 61
    4c38:	de b7       	in	r29, 0x3e	; 62
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        // Find a free timer
        u8 i;
        
        if (!seconds)
    4c3a:	00 97       	sbiw	r24, 0x00	; 0
    4c3c:	19 f4       	brne	.+6      	; 0x4c44 <macSetLongAlarm+0x18>
        {
            // Just go right now
            callback();
    4c3e:	fb 01       	movw	r30, r22
    4c40:	09 95       	icall
    4c42:	0f c0       	rjmp	.+30     	; 0x4c62 <macSetLongAlarm+0x36>
    4c44:	ac e6       	ldi	r26, 0x6C	; 108
    4c46:	b6 e0       	ldi	r27, 0x06	; 6
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        // Find a free timer
        u8 i;
        
        if (!seconds)
    4c48:	20 e0       	ldi	r18, 0x00	; 0
    4c4a:	30 e0       	ldi	r19, 0x00	; 0
            callback();
            return 0;
        }
        
        for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
            if (!longTimerEvents[i].time)
    4c4c:	4d 91       	ld	r20, X+
    4c4e:	5c 91       	ld	r21, X
    4c50:	11 97       	sbiw	r26, 0x01	; 1
    4c52:	45 2b       	or	r20, r21
    4c54:	41 f0       	breq	.+16     	; 0x4c66 <macSetLongAlarm+0x3a>
    4c56:	2f 5f       	subi	r18, 0xFF	; 255
    4c58:	3f 4f       	sbci	r19, 0xFF	; 255
    4c5a:	15 96       	adiw	r26, 0x05	; 5
            // Just go right now
            callback();
            return 0;
        }
        
        for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
    4c5c:	24 31       	cpi	r18, 0x14	; 20
    4c5e:	31 05       	cpc	r19, r1
    4c60:	a9 f7       	brne	.-22     	; 0x4c4c <macSetLongAlarm+0x20>
                // free, use this one
                break;

        if (i >= LONG_TIMER_EVENTS_MAX)
            // No more timers, just quit
            return 0;
    4c62:	80 e0       	ldi	r24, 0x00	; 0
    4c64:	1a c0       	rjmp	.+52     	; 0x4c9a <macSetLongAlarm+0x6e>
        
        // Store the time and callback into free timer
        longTimerEvents[i].time = seconds;
    4c66:	45 e0       	ldi	r20, 0x05	; 5
    4c68:	42 9f       	mul	r20, r18
    4c6a:	80 01       	movw	r16, r0
    4c6c:	43 9f       	mul	r20, r19
    4c6e:	10 0d       	add	r17, r0
    4c70:	11 24       	eor	r1, r1
    4c72:	04 59       	subi	r16, 0x94	; 148
    4c74:	19 4f       	sbci	r17, 0xF9	; 249
    4c76:	f8 01       	movw	r30, r16
    4c78:	91 83       	std	Z+1, r25	; 0x01
    4c7a:	80 83       	st	Z, r24
        longTimerEvents[i].callback = callback;
    4c7c:	74 83       	std	Z+4, r23	; 0x04
    4c7e:	63 83       	std	Z+3, r22	; 0x03
        longTimerEvents[i].timerID = getUniqueID();
    4c80:	0e 94 97 25 	call	0x4b2e	; 0x4b2e <getUniqueID>
    4c84:	f8 01       	movw	r30, r16
    4c86:	82 83       	std	Z+2, r24	; 0x02
        
        // start timer running, since we have at least one timer running
        AVR_ENTER_CRITICAL_REGION();
    4c88:	8f b7       	in	r24, 0x3f	; 63
    4c8a:	89 83       	std	Y+1, r24	; 0x01
    4c8c:	f8 94       	cli
        timerStart();
    4c8e:	0e 94 be 25 	call	0x4b7c	; 0x4b7c <timerStart>
        AVR_LEAVE_CRITICAL_REGION();
    4c92:	89 81       	ldd	r24, Y+1	; 0x01
    4c94:	8f bf       	out	0x3f, r24	; 63
        
        return longTimerEvents[i].timerID;
    4c96:	f8 01       	movw	r30, r16
    4c98:	82 81       	ldd	r24, Z+2	; 0x02
    }
    return 0;
}
    4c9a:	0f 90       	pop	r0
    4c9c:	df 91       	pop	r29
    4c9e:	cf 91       	pop	r28
    4ca0:	1f 91       	pop	r17
    4ca2:	0f 91       	pop	r16
    4ca4:	08 95       	ret

00004ca6 <macTimerEnd>:

   @param timerID The value returned from macSetAlarm when the alarm
   was set.
*/
void macTimerEnd(u8 timerID)
{
    4ca6:	e2 ed       	ldi	r30, 0xD2	; 210
    4ca8:	f6 e0       	ldi	r31, 0x06	; 6
    4caa:	20 e0       	ldi	r18, 0x00	; 0
    4cac:	30 e0       	ldi	r19, 0x00	; 0
    u8 i;

    // search for timer with timerID
    for (i=0;i<TIMER_EVENTS_MAX;i++)
        if (timerEvents[i].timerID == timerID)
    4cae:	90 81       	ld	r25, Z
    4cb0:	98 13       	cpse	r25, r24
    4cb2:	09 c0       	rjmp	.+18     	; 0x4cc6 <macTimerEnd+0x20>
        {
            // kill this timer
            timerEvents[i].time = 0;
    4cb4:	85 e0       	ldi	r24, 0x05	; 5
    4cb6:	82 9f       	mul	r24, r18
    4cb8:	f0 01       	movw	r30, r0
    4cba:	83 9f       	mul	r24, r19
    4cbc:	f0 0d       	add	r31, r0
    4cbe:	11 24       	eor	r1, r1
    4cc0:	e0 53       	subi	r30, 0x30	; 48
    4cc2:	f9 4f       	sbci	r31, 0xF9	; 249
    4cc4:	15 c0       	rjmp	.+42     	; 0x4cf0 <macTimerEnd+0x4a>
    4cc6:	2f 5f       	subi	r18, 0xFF	; 255
    4cc8:	3f 4f       	sbci	r19, 0xFF	; 255
    4cca:	35 96       	adiw	r30, 0x05	; 5
void macTimerEnd(u8 timerID)
{
    u8 i;

    // search for timer with timerID
    for (i=0;i<TIMER_EVENTS_MAX;i++)
    4ccc:	24 31       	cpi	r18, 0x14	; 20
    4cce:	31 05       	cpc	r19, r1
    4cd0:	71 f7       	brne	.-36     	; 0x4cae <macTimerEnd+0x8>
    4cd2:	ee e6       	ldi	r30, 0x6E	; 110
    4cd4:	f6 e0       	ldi	r31, 0x06	; 6
    4cd6:	20 e0       	ldi	r18, 0x00	; 0
    4cd8:	30 e0       	ldi	r19, 0x00	; 0

    // search for long timer with timerID
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
            if (longTimerEvents[i].timerID == timerID)
    4cda:	90 81       	ld	r25, Z
    4cdc:	98 13       	cpse	r25, r24
    4cde:	0c c0       	rjmp	.+24     	; 0x4cf8 <macTimerEnd+0x52>
            {
                // kill this timer
                longTimerEvents[i].time = 0;
    4ce0:	85 e0       	ldi	r24, 0x05	; 5
    4ce2:	82 9f       	mul	r24, r18
    4ce4:	f0 01       	movw	r30, r0
    4ce6:	83 9f       	mul	r24, r19
    4ce8:	f0 0d       	add	r31, r0
    4cea:	11 24       	eor	r1, r1
    4cec:	e4 59       	subi	r30, 0x94	; 148
    4cee:	f9 4f       	sbci	r31, 0xF9	; 249
    4cf0:	11 82       	std	Z+1, r1	; 0x01
    4cf2:	10 82       	st	Z, r1
                longTimerEvents[i].timerID = 0;
    4cf4:	12 82       	std	Z+2, r1	; 0x02
                return;
    4cf6:	08 95       	ret
    4cf8:	2f 5f       	subi	r18, 0xFF	; 255
    4cfa:	3f 4f       	sbci	r19, 0xFF	; 255
    4cfc:	35 96       	adiw	r30, 0x05	; 5
        }

    // search for long timer with timerID
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
    4cfe:	24 31       	cpi	r18, 0x14	; 20
    4d00:	31 05       	cpc	r19, r1
    4d02:	59 f7       	brne	.-42     	; 0x4cda <macTimerEnd+0x34>
    4d04:	08 95       	ret

00004d06 <timerInit>:
   want to clear all timers.  Sets the timeout for each tick of the
   system clock.
 */
void timerInit(void)
{
    TIMER_INIT();
    4d06:	e1 e9       	ldi	r30, 0x91	; 145
    4d08:	f0 e0       	ldi	r31, 0x00	; 0
    4d0a:	80 81       	ld	r24, Z
    4d0c:	8a 60       	ori	r24, 0x0A	; 10
    4d0e:	80 83       	st	Z, r24
    4d10:	80 ed       	ldi	r24, 0xD0	; 208
    4d12:	97 e0       	ldi	r25, 0x07	; 7
    4d14:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    4d18:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>

#if __AVR__
    // Init the PRNG
    if (NODETYPE != ENDDEVICE)
        srand(TCNT(TICKTIMER));
    4d1c:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
    4d20:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    4d24:	0c 94 b4 2f 	jmp	0x5f68	; 0x5f68 <srand>

00004d28 <__vector_32>:
#if __AVR__
/**
   @brief Timer interrupt service routine.
*/
ISR(TICKVECT)
{
    4d28:	1f 92       	push	r1
    4d2a:	0f 92       	push	r0
    4d2c:	0f b6       	in	r0, 0x3f	; 63
    4d2e:	0f 92       	push	r0
    4d30:	11 24       	eor	r1, r1
    4d32:	0b b6       	in	r0, 0x3b	; 59
    4d34:	0f 92       	push	r0
    4d36:	ff 92       	push	r15
    4d38:	0f 93       	push	r16
    4d3a:	1f 93       	push	r17
    4d3c:	2f 93       	push	r18
    4d3e:	3f 93       	push	r19
    4d40:	4f 93       	push	r20
    4d42:	5f 93       	push	r21
    4d44:	6f 93       	push	r22
    4d46:	7f 93       	push	r23
    4d48:	8f 93       	push	r24
    4d4a:	9f 93       	push	r25
    4d4c:	af 93       	push	r26
    4d4e:	bf 93       	push	r27
    4d50:	ef 93       	push	r30
    4d52:	ff 93       	push	r31
    4d54:	cf 93       	push	r28
    4d56:	df 93       	push	r29
    4d58:	00 d0       	rcall	.+0      	; 0x4d5a <__vector_32+0x32>
    4d5a:	1f 92       	push	r1
    4d5c:	cd b7       	in	r28, 0x3d	; 61
    4d5e:	de b7       	in	r29, 0x3e	; 62
    u8 i;
    event_object_t event;

    tickTimer++;
    4d60:	80 91 69 06 	lds	r24, 0x0669	; 0x800669 <tickTimer>
    4d64:	90 91 6a 06 	lds	r25, 0x066A	; 0x80066a <tickTimer+0x1>
    4d68:	01 96       	adiw	r24, 0x01	; 1
    4d6a:	90 93 6a 06 	sts	0x066A, r25	; 0x80066a <tickTimer+0x1>
    4d6e:	80 93 69 06 	sts	0x0669, r24	; 0x800669 <tickTimer>
#endif
    
    // Decrement second timer
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        if (!--secondTimer)
    4d72:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <secondTimer>
    4d76:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <secondTimer+0x1>
    4d7a:	01 97       	sbiw	r24, 0x01	; 1
    4d7c:	49 f0       	breq	.+18     	; 0x4d90 <__vector_32+0x68>
    4d7e:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <secondTimer+0x1>
    4d82:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <secondTimer>
    4d86:	00 ed       	ldi	r16, 0xD0	; 208
    4d88:	16 e0       	ldi	r17, 0x06	; 6
        {
            // this timer event is live, check for expiration
            if (!--timerEvents[i].time)
            {
                // Timer expired, queue the associated callback
                event.event = MAC_EVENT_TIMER;  // Event type, see event_t for details.
    4d8a:	96 e1       	ldi	r25, 0x16	; 22
    4d8c:	f9 2e       	mov	r15, r25
    4d8e:	24 c0       	rjmp	.+72     	; 0x4dd8 <__vector_32+0xb0>
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        if (!--secondTimer)
        {
            // Reset one second timer
            secondTimer = 1000/MS_PER_TICK;
    4d90:	84 ef       	ldi	r24, 0xF4	; 244
    4d92:	91 e0       	ldi	r25, 0x01	; 1
    4d94:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <secondTimer+0x1>
    4d98:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <secondTimer>
    4d9c:	0c e6       	ldi	r16, 0x6C	; 108
    4d9e:	16 e0       	ldi	r17, 0x06	; 6
                {
                    // This timer is active, check for expiration
                    if (!--longTimerEvents[i].time)
                    {
                        // Timer expired, queue the associated callback
                        event.event = MAC_EVENT_TIMER;  // Event type, see event_t for details.
    4da0:	86 e1       	ldi	r24, 0x16	; 22
    4da2:	f8 2e       	mov	r15, r24
            // Reset one second timer
            secondTimer = 1000/MS_PER_TICK;
            // Handle the one-second timers
            for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
            {
                if (longTimerEvents[i].time)
    4da4:	f8 01       	movw	r30, r16
    4da6:	80 81       	ld	r24, Z
    4da8:	91 81       	ldd	r25, Z+1	; 0x01
    4daa:	00 97       	sbiw	r24, 0x00	; 0
    4dac:	71 f0       	breq	.+28     	; 0x4dca <__vector_32+0xa2>
                {
                    // This timer is active, check for expiration
                    if (!--longTimerEvents[i].time)
    4dae:	01 97       	sbiw	r24, 0x01	; 1
    4db0:	91 83       	std	Z+1, r25	; 0x01
    4db2:	80 83       	st	Z, r24
    4db4:	89 2b       	or	r24, r25
    4db6:	49 f4       	brne	.+18     	; 0x4dca <__vector_32+0xa2>
                    {
                        // Timer expired, queue the associated callback
                        event.event = MAC_EVENT_TIMER;  // Event type, see event_t for details.
    4db8:	f9 82       	std	Y+1, r15	; 0x01
                        event.data = (void(*)(void))longTimerEvents[i].callback;
    4dba:	83 81       	ldd	r24, Z+3	; 0x03
    4dbc:	94 81       	ldd	r25, Z+4	; 0x04
    4dbe:	9b 83       	std	Y+3, r25	; 0x03
    4dc0:	8a 83       	std	Y+2, r24	; 0x02
                        mac_put_event(&event);
    4dc2:	ce 01       	movw	r24, r28
    4dc4:	01 96       	adiw	r24, 0x01	; 1
    4dc6:	0e 94 06 22 	call	0x440c	; 0x440c <mac_put_event>
    4dca:	0b 5f       	subi	r16, 0xFB	; 251
    4dcc:	1f 4f       	sbci	r17, 0xFF	; 255
        if (!--secondTimer)
        {
            // Reset one second timer
            secondTimer = 1000/MS_PER_TICK;
            // Handle the one-second timers
            for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
    4dce:	f6 e0       	ldi	r31, 0x06	; 6
    4dd0:	00 3d       	cpi	r16, 0xD0	; 208
    4dd2:	1f 07       	cpc	r17, r31
    4dd4:	39 f7       	brne	.-50     	; 0x4da4 <__vector_32+0x7c>
    4dd6:	d7 cf       	rjmp	.-82     	; 0x4d86 <__vector_32+0x5e>
    }

    // check for pending events
    for (i=0;i<TIMER_EVENTS_MAX;i++)
    {
        if (timerEvents[i].time)
    4dd8:	f8 01       	movw	r30, r16
    4dda:	80 81       	ld	r24, Z
    4ddc:	91 81       	ldd	r25, Z+1	; 0x01
    4dde:	00 97       	sbiw	r24, 0x00	; 0
    4de0:	71 f0       	breq	.+28     	; 0x4dfe <__vector_32+0xd6>
        {
            // this timer event is live, check for expiration
            if (!--timerEvents[i].time)
    4de2:	01 97       	sbiw	r24, 0x01	; 1
    4de4:	91 83       	std	Z+1, r25	; 0x01
    4de6:	80 83       	st	Z, r24
    4de8:	89 2b       	or	r24, r25
    4dea:	49 f4       	brne	.+18     	; 0x4dfe <__vector_32+0xd6>
            {
                // Timer expired, queue the associated callback
                event.event = MAC_EVENT_TIMER;  // Event type, see event_t for details.
    4dec:	f9 82       	std	Y+1, r15	; 0x01
                event.data = (void (*)(void))(timerEvents[i].callback);
    4dee:	83 81       	ldd	r24, Z+3	; 0x03
    4df0:	94 81       	ldd	r25, Z+4	; 0x04
    4df2:	9b 83       	std	Y+3, r25	; 0x03
    4df4:	8a 83       	std	Y+2, r24	; 0x02
                mac_put_event(&event);
    4df6:	ce 01       	movw	r24, r28
    4df8:	01 96       	adiw	r24, 0x01	; 1
    4dfa:	0e 94 06 22 	call	0x440c	; 0x440c <mac_put_event>
    4dfe:	0b 5f       	subi	r16, 0xFB	; 251
    4e00:	1f 4f       	sbci	r17, 0xFF	; 255
            }
        }
    }

    // check for pending events
    for (i=0;i<TIMER_EVENTS_MAX;i++)
    4e02:	f7 e0       	ldi	r31, 0x07	; 7
    4e04:	04 33       	cpi	r16, 0x34	; 52
    4e06:	1f 07       	cpc	r17, r31
    4e08:	39 f7       	brne	.-50     	; 0x4dd8 <__vector_32+0xb0>
                event.data = (void (*)(void))(timerEvents[i].callback);
                mac_put_event(&event);
            }
        }
    }
}
    4e0a:	0f 90       	pop	r0
    4e0c:	0f 90       	pop	r0
    4e0e:	0f 90       	pop	r0
    4e10:	df 91       	pop	r29
    4e12:	cf 91       	pop	r28
    4e14:	ff 91       	pop	r31
    4e16:	ef 91       	pop	r30
    4e18:	bf 91       	pop	r27
    4e1a:	af 91       	pop	r26
    4e1c:	9f 91       	pop	r25
    4e1e:	8f 91       	pop	r24
    4e20:	7f 91       	pop	r23
    4e22:	6f 91       	pop	r22
    4e24:	5f 91       	pop	r21
    4e26:	4f 91       	pop	r20
    4e28:	3f 91       	pop	r19
    4e2a:	2f 91       	pop	r18
    4e2c:	1f 91       	pop	r17
    4e2e:	0f 91       	pop	r16
    4e30:	ff 90       	pop	r15
    4e32:	0f 90       	pop	r0
    4e34:	0b be       	out	0x3b, r0	; 59
    4e36:	0f 90       	pop	r0
    4e38:	0f be       	out	0x3f, r0	; 63
    4e3a:	0f 90       	pop	r0
    4e3c:	1f 90       	pop	r1
    4e3e:	18 95       	reti

00004e40 <__vector_35>:

    for(i = 0; i < uiDelay; i++)
    {
        Timer_delay_us ( 1000 );
    }
}
    4e40:	1f 92       	push	r1
    4e42:	0f 92       	push	r0
    4e44:	0f b6       	in	r0, 0x3f	; 63
    4e46:	0f 92       	push	r0
    4e48:	11 24       	eor	r1, r1
    4e4a:	8f 93       	push	r24
    4e4c:	82 e0       	ldi	r24, 0x02	; 2
    4e4e:	80 93 35 07 	sts	0x0735, r24	; 0x800735 <GenericTimerFlag>
    4e52:	8f 91       	pop	r24
    4e54:	0f 90       	pop	r0
    4e56:	0f be       	out	0x3f, r0	; 63
    4e58:	0f 90       	pop	r0
    4e5a:	1f 90       	pop	r1
    4e5c:	18 95       	reti

00004e5e <__vector_12>:

/** \brief Watchdog Timer Interrupt Service Routine.
 */
ISR ( WDT_vect )
{    
    4e5e:	1f 92       	push	r1
    4e60:	0f 92       	push	r0
    4e62:	0f b6       	in	r0, 0x3f	; 63
    4e64:	0f 92       	push	r0
    4e66:	11 24       	eor	r1, r1
    4e68:	8f 93       	push	r24
    WDTFlag = 1;
    4e6a:	81 e0       	ldi	r24, 0x01	; 1
    4e6c:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <WDTFlag>
}
    4e70:	8f 91       	pop	r24
    4e72:	0f 90       	pop	r0
    4e74:	0f be       	out	0x3f, r0	; 63
    4e76:	0f 90       	pop	r0
    4e78:	1f 90       	pop	r1
    4e7a:	18 95       	reti

00004e7c <get_from_circ_buf>:
	ucTemp = ucData >> 4;
	ucTemp = Nible_to_ascii ( ucTemp );
	serial_putchar ( ucTemp );

	ucTemp = Nible_to_ascii ( ucData );
	serial_putchar ( ucTemp );
    4e7c:	fc 01       	movw	r30, r24
    4e7e:	91 81       	ldd	r25, Z+1	; 0x01
    4e80:	df 01       	movw	r26, r30
    4e82:	a9 0f       	add	r26, r25
    4e84:	b1 1d       	adc	r27, r1
    4e86:	12 96       	adiw	r26, 0x02	; 2
    4e88:	2c 91       	ld	r18, X
    4e8a:	80 81       	ld	r24, Z
    4e8c:	98 17       	cp	r25, r24
    4e8e:	31 f0       	breq	.+12     	; 0x4e9c <get_from_circ_buf+0x20>
    4e90:	9f 5f       	subi	r25, 0xFF	; 255
    4e92:	97 fd       	sbrc	r25, 7
    4e94:	90 e0       	ldi	r25, 0x00	; 0
    4e96:	91 83       	std	Z+1, r25	; 0x01
    4e98:	82 2f       	mov	r24, r18
    4e9a:	08 95       	ret
    4e9c:	8f ef       	ldi	r24, 0xFF	; 255
    4e9e:	08 95       	ret

00004ea0 <init_rx_buf>:
    4ea0:	ea e3       	ldi	r30, 0x3A	; 58
    4ea2:	f7 e0       	ldi	r31, 0x07	; 7
    4ea4:	11 82       	std	Z+1, r1	; 0x01
    4ea6:	10 82       	st	Z, r1
    4ea8:	08 95       	ret

00004eaa <serial_init>:
    4eaa:	ea e3       	ldi	r30, 0x3A	; 58
    4eac:	f7 e0       	ldi	r31, 0x07	; 7
    4eae:	11 82       	std	Z+1, r1	; 0x01
    4eb0:	10 82       	st	Z, r1
    4eb2:	ec eb       	ldi	r30, 0xBC	; 188
    4eb4:	f7 e0       	ldi	r31, 0x07	; 7
    4eb6:	11 82       	std	Z+1, r1	; 0x01
    4eb8:	10 82       	st	Z, r1
    4eba:	28 e9       	ldi	r18, 0x98	; 152
    4ebc:	20 93 c9 00 	sts	0x00C9, r18	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    4ec0:	26 e0       	ldi	r18, 0x06	; 6
    4ec2:	20 93 ca 00 	sts	0x00CA, r18	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
    4ec6:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    4eca:	27 e6       	ldi	r18, 0x67	; 103
    4ecc:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    4ed0:	90 93 39 07 	sts	0x0739, r25	; 0x800739 <rx_handler+0x1>
    4ed4:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <rx_handler>
    4ed8:	08 95       	ret

00004eda <serial_putchar>:
    4eda:	90 91 36 07 	lds	r25, 0x0736	; 0x800736 <pause>
    4ede:	91 11       	cpse	r25, r1
    4ee0:	2a c0       	rjmp	.+84     	; 0x4f36 <serial_putchar+0x5c>
    4ee2:	78 94       	sei
    4ee4:	90 91 bc 07 	lds	r25, 0x07BC	; 0x8007bc <txbuf>
    4ee8:	9f 5f       	subi	r25, 0xFF	; 255
    4eea:	97 fd       	sbrc	r25, 7
    4eec:	90 e0       	ldi	r25, 0x00	; 0
    4eee:	30 91 37 07 	lds	r19, 0x0737	; 0x800737 <rx>
    4ef2:	20 91 bd 07 	lds	r18, 0x07BD	; 0x8007bd <txbuf+0x1>
    4ef6:	92 13       	cpse	r25, r18
    4ef8:	03 c0       	rjmp	.+6      	; 0x4f00 <serial_putchar+0x26>
    4efa:	33 23       	and	r19, r19
    4efc:	d1 f3       	breq	.-12     	; 0x4ef2 <serial_putchar+0x18>
    4efe:	08 c0       	rjmp	.+16     	; 0x4f10 <serial_putchar+0x36>
    4f00:	e0 91 bc 07 	lds	r30, 0x07BC	; 0x8007bc <txbuf>
    4f04:	f0 e0       	ldi	r31, 0x00	; 0
    4f06:	e4 54       	subi	r30, 0x44	; 68
    4f08:	f8 4f       	sbci	r31, 0xF8	; 248
    4f0a:	82 83       	std	Z+2, r24	; 0x02
    4f0c:	90 93 bc 07 	sts	0x07BC, r25	; 0x8007bc <txbuf>
    4f10:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    4f14:	85 fd       	sbrc	r24, 5
    4f16:	0f c0       	rjmp	.+30     	; 0x4f36 <serial_putchar+0x5c>
    4f18:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    4f1c:	85 ff       	sbrs	r24, 5
    4f1e:	fc cf       	rjmp	.-8      	; 0x4f18 <serial_putchar+0x3e>
    4f20:	8c eb       	ldi	r24, 0xBC	; 188
    4f22:	97 e0       	ldi	r25, 0x07	; 7
    4f24:	0e 94 3e 27 	call	0x4e7c	; 0x4e7c <get_from_circ_buf>
    4f28:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    4f2c:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    4f30:	80 62       	ori	r24, 0x20	; 32
    4f32:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    4f36:	08 95       	ret

00004f38 <rx_buf_count>:
    4f38:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <rxbuf>
    4f3c:	90 e0       	ldi	r25, 0x00	; 0
    4f3e:	20 91 3b 07 	lds	r18, 0x073B	; 0x80073b <rxbuf+0x1>
    4f42:	82 1b       	sub	r24, r18
    4f44:	91 09       	sbc	r25, r1
    4f46:	97 ff       	sbrs	r25, 7
    4f48:	02 c0       	rjmp	.+4      	; 0x4f4e <rx_buf_count+0x16>
    4f4a:	80 58       	subi	r24, 0x80	; 128
    4f4c:	9f 4f       	sbci	r25, 0xFF	; 255
    4f4e:	08 95       	ret

00004f50 <serial_getchar>:
    4f50:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <rxbuf>
    4f54:	90 e0       	ldi	r25, 0x00	; 0
    4f56:	20 91 3b 07 	lds	r18, 0x073B	; 0x80073b <rxbuf+0x1>
    4f5a:	82 1b       	sub	r24, r18
    4f5c:	91 09       	sbc	r25, r1
    4f5e:	97 ff       	sbrs	r25, 7
    4f60:	02 c0       	rjmp	.+4      	; 0x4f66 <serial_getchar+0x16>
    4f62:	80 58       	subi	r24, 0x80	; 128
    4f64:	9f 4f       	sbci	r25, 0xFF	; 255
    4f66:	88 23       	and	r24, r24
    4f68:	99 f3       	breq	.-26     	; 0x4f50 <serial_getchar>
    4f6a:	8a e3       	ldi	r24, 0x3A	; 58
    4f6c:	97 e0       	ldi	r25, 0x07	; 7
    4f6e:	0c 94 3e 27 	jmp	0x4e7c	; 0x4e7c <get_from_circ_buf>

00004f72 <__vector_36>:
    4f72:	1f 92       	push	r1
    4f74:	0f 92       	push	r0
    4f76:	0f b6       	in	r0, 0x3f	; 63
    4f78:	0f 92       	push	r0
    4f7a:	11 24       	eor	r1, r1
    4f7c:	0b b6       	in	r0, 0x3b	; 59
    4f7e:	0f 92       	push	r0
    4f80:	2f 93       	push	r18
    4f82:	3f 93       	push	r19
    4f84:	4f 93       	push	r20
    4f86:	5f 93       	push	r21
    4f88:	6f 93       	push	r22
    4f8a:	7f 93       	push	r23
    4f8c:	8f 93       	push	r24
    4f8e:	9f 93       	push	r25
    4f90:	af 93       	push	r26
    4f92:	bf 93       	push	r27
    4f94:	ef 93       	push	r30
    4f96:	ff 93       	push	r31
    4f98:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    4f9c:	91 e0       	ldi	r25, 0x01	; 1
    4f9e:	90 93 37 07 	sts	0x0737, r25	; 0x800737 <rx>
    4fa2:	90 91 3a 07 	lds	r25, 0x073A	; 0x80073a <rxbuf>
    4fa6:	9f 5f       	subi	r25, 0xFF	; 255
    4fa8:	97 fd       	sbrc	r25, 7
    4faa:	90 e0       	ldi	r25, 0x00	; 0
    4fac:	20 91 3b 07 	lds	r18, 0x073B	; 0x80073b <rxbuf+0x1>
    4fb0:	92 17       	cp	r25, r18
    4fb2:	41 f0       	breq	.+16     	; 0x4fc4 <__vector_36+0x52>
    4fb4:	e0 91 3a 07 	lds	r30, 0x073A	; 0x80073a <rxbuf>
    4fb8:	f0 e0       	ldi	r31, 0x00	; 0
    4fba:	e6 5c       	subi	r30, 0xC6	; 198
    4fbc:	f8 4f       	sbci	r31, 0xF8	; 248
    4fbe:	82 83       	std	Z+2, r24	; 0x02
    4fc0:	90 93 3a 07 	sts	0x073A, r25	; 0x80073a <rxbuf>
    4fc4:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <rx>
    4fc8:	e0 91 38 07 	lds	r30, 0x0738	; 0x800738 <rx_handler>
    4fcc:	f0 91 39 07 	lds	r31, 0x0739	; 0x800739 <rx_handler+0x1>
    4fd0:	30 97       	sbiw	r30, 0x00	; 0
    4fd2:	09 f0       	breq	.+2      	; 0x4fd6 <__vector_36+0x64>
    4fd4:	09 95       	icall
    4fd6:	ff 91       	pop	r31
    4fd8:	ef 91       	pop	r30
    4fda:	bf 91       	pop	r27
    4fdc:	af 91       	pop	r26
    4fde:	9f 91       	pop	r25
    4fe0:	8f 91       	pop	r24
    4fe2:	7f 91       	pop	r23
    4fe4:	6f 91       	pop	r22
    4fe6:	5f 91       	pop	r21
    4fe8:	4f 91       	pop	r20
    4fea:	3f 91       	pop	r19
    4fec:	2f 91       	pop	r18
    4fee:	0f 90       	pop	r0
    4ff0:	0b be       	out	0x3b, r0	; 59
    4ff2:	0f 90       	pop	r0
    4ff4:	0f be       	out	0x3f, r0	; 63
    4ff6:	0f 90       	pop	r0
    4ff8:	1f 90       	pop	r1
    4ffa:	18 95       	reti

00004ffc <__vector_37>:
    4ffc:	1f 92       	push	r1
    4ffe:	0f 92       	push	r0
    5000:	0f b6       	in	r0, 0x3f	; 63
    5002:	0f 92       	push	r0
    5004:	11 24       	eor	r1, r1
    5006:	0b b6       	in	r0, 0x3b	; 59
    5008:	0f 92       	push	r0
    500a:	2f 93       	push	r18
    500c:	3f 93       	push	r19
    500e:	4f 93       	push	r20
    5010:	5f 93       	push	r21
    5012:	6f 93       	push	r22
    5014:	7f 93       	push	r23
    5016:	8f 93       	push	r24
    5018:	9f 93       	push	r25
    501a:	af 93       	push	r26
    501c:	bf 93       	push	r27
    501e:	ef 93       	push	r30
    5020:	ff 93       	push	r31
    5022:	90 91 bc 07 	lds	r25, 0x07BC	; 0x8007bc <txbuf>
    5026:	80 91 bd 07 	lds	r24, 0x07BD	; 0x8007bd <txbuf+0x1>
    502a:	98 17       	cp	r25, r24
    502c:	39 f0       	breq	.+14     	; 0x503c <__vector_37+0x40>
    502e:	8c eb       	ldi	r24, 0xBC	; 188
    5030:	97 e0       	ldi	r25, 0x07	; 7
    5032:	0e 94 3e 27 	call	0x4e7c	; 0x4e7c <get_from_circ_buf>
    5036:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    503a:	05 c0       	rjmp	.+10     	; 0x5046 <__vector_37+0x4a>
    503c:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    5040:	8f 7d       	andi	r24, 0xDF	; 223
    5042:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    5046:	ff 91       	pop	r31
    5048:	ef 91       	pop	r30
    504a:	bf 91       	pop	r27
    504c:	af 91       	pop	r26
    504e:	9f 91       	pop	r25
    5050:	8f 91       	pop	r24
    5052:	7f 91       	pop	r23
    5054:	6f 91       	pop	r22
    5056:	5f 91       	pop	r21
    5058:	4f 91       	pop	r20
    505a:	3f 91       	pop	r19
    505c:	2f 91       	pop	r18
    505e:	0f 90       	pop	r0
    5060:	0b be       	out	0x3b, r0	; 59
    5062:	0f 90       	pop	r0
    5064:	0f be       	out	0x3f, r0	; 63
    5066:	0f 90       	pop	r0
    5068:	1f 90       	pop	r1
    506a:	18 95       	reti

0000506c <Ascii_to_nible>:
    506c:	98 2f       	mov	r25, r24
    506e:	80 ed       	ldi	r24, 0xD0	; 208
    5070:	89 0f       	add	r24, r25
    5072:	8a 30       	cpi	r24, 0x0A	; 10
    5074:	70 f0       	brcs	.+28     	; 0x5092 <Ascii_to_nible+0x26>
    5076:	8f eb       	ldi	r24, 0xBF	; 191
    5078:	89 0f       	add	r24, r25
    507a:	86 30       	cpi	r24, 0x06	; 6
    507c:	10 f4       	brcc	.+4      	; 0x5082 <Ascii_to_nible+0x16>
    507e:	89 ec       	ldi	r24, 0xC9	; 201
    5080:	05 c0       	rjmp	.+10     	; 0x508c <Ascii_to_nible+0x20>
    5082:	8f e9       	ldi	r24, 0x9F	; 159
    5084:	89 0f       	add	r24, r25
    5086:	86 30       	cpi	r24, 0x06	; 6
    5088:	18 f4       	brcc	.+6      	; 0x5090 <Ascii_to_nible+0x24>
    508a:	89 ea       	ldi	r24, 0xA9	; 169
    508c:	89 0f       	add	r24, r25
    508e:	08 95       	ret
    5090:	80 e0       	ldi	r24, 0x00	; 0
    5092:	08 95       	ret

00005094 <asciiStringToNibble>:
param inStr is the ASCII value to be converted.

return outStr is the nibble value with number of characters received.
*/
u8 asciiStringToNibble( char *inStr, char *outStr)
{
    5094:	9f 92       	push	r9
    5096:	af 92       	push	r10
    5098:	bf 92       	push	r11
    509a:	cf 92       	push	r12
    509c:	df 92       	push	r13
    509e:	ef 92       	push	r14
    50a0:	ff 92       	push	r15
    50a2:	0f 93       	push	r16
    50a4:	1f 93       	push	r17
    50a6:	cf 93       	push	r28
    50a8:	df 93       	push	r29
    50aa:	7c 01       	movw	r14, r24
    50ac:	6b 01       	movw	r12, r22
	u8 n, k;
	
	n = strlen(inStr);
    50ae:	fc 01       	movw	r30, r24
    50b0:	01 90       	ld	r0, Z+
    50b2:	00 20       	and	r0, r0
    50b4:	e9 f7       	brne	.-6      	; 0x50b0 <asciiStringToNibble+0x1c>
    50b6:	31 97       	sbiw	r30, 0x01	; 1
    50b8:	ef 01       	movw	r28, r30
    50ba:	c8 1b       	sub	r28, r24
    50bc:	d9 0b       	sbc	r29, r25
    50be:	0c 2f       	mov	r16, r28
	k = 0;
    50c0:	10 e0       	ldi	r17, 0x00	; 0


	while (k < n)
    50c2:	10 17       	cp	r17, r16
    50c4:	a8 f4       	brcc	.+42     	; 0x50f0 <asciiStringToNibble+0x5c>
	{
		*outStr = (Ascii_to_nible ( *(inStr+k) ) * 16)
    50c6:	57 01       	movw	r10, r14
    50c8:	a1 0e       	add	r10, r17
    50ca:	b1 1c       	adc	r11, r1
    50cc:	f5 01       	movw	r30, r10
    50ce:	80 81       	ld	r24, Z
    50d0:	0e 94 36 28 	call	0x506c	; 0x506c <Ascii_to_nible>
    50d4:	98 2e       	mov	r9, r24
		+  Ascii_to_nible ( *(inStr+k+1));
    50d6:	f5 01       	movw	r30, r10
    50d8:	81 81       	ldd	r24, Z+1	; 0x01
    50da:	0e 94 36 28 	call	0x506c	; 0x506c <Ascii_to_nible>
	k = 0;


	while (k < n)
	{
		*outStr = (Ascii_to_nible ( *(inStr+k) ) * 16)
    50de:	f0 e1       	ldi	r31, 0x10	; 16
    50e0:	9f 9e       	mul	r9, r31
    50e2:	80 0d       	add	r24, r0
    50e4:	11 24       	eor	r1, r1
    50e6:	f6 01       	movw	r30, r12
    50e8:	81 93       	st	Z+, r24
    50ea:	6f 01       	movw	r12, r30
		+  Ascii_to_nible ( *(inStr+k+1));
		k += 2;
    50ec:	1e 5f       	subi	r17, 0xFE	; 254
    50ee:	e9 cf       	rjmp	.-46     	; 0x50c2 <asciiStringToNibble+0x2e>
		
		outStr++;
	}
	return n/2;
}
    50f0:	8c 2f       	mov	r24, r28
    50f2:	86 95       	lsr	r24
    50f4:	df 91       	pop	r29
    50f6:	cf 91       	pop	r28
    50f8:	1f 91       	pop	r17
    50fa:	0f 91       	pop	r16
    50fc:	ff 90       	pop	r15
    50fe:	ef 90       	pop	r14
    5100:	df 90       	pop	r13
    5102:	cf 90       	pop	r12
    5104:	bf 90       	pop	r11
    5106:	af 90       	pop	r10
    5108:	9f 90       	pop	r9
    510a:	08 95       	ret

0000510c <vfprintf>:
    510c:	2f 92       	push	r2
    510e:	3f 92       	push	r3
    5110:	4f 92       	push	r4
    5112:	5f 92       	push	r5
    5114:	6f 92       	push	r6
    5116:	7f 92       	push	r7
    5118:	8f 92       	push	r8
    511a:	9f 92       	push	r9
    511c:	af 92       	push	r10
    511e:	bf 92       	push	r11
    5120:	cf 92       	push	r12
    5122:	df 92       	push	r13
    5124:	ef 92       	push	r14
    5126:	ff 92       	push	r15
    5128:	0f 93       	push	r16
    512a:	1f 93       	push	r17
    512c:	cf 93       	push	r28
    512e:	df 93       	push	r29
    5130:	cd b7       	in	r28, 0x3d	; 61
    5132:	de b7       	in	r29, 0x3e	; 62
    5134:	63 97       	sbiw	r28, 0x13	; 19
    5136:	0f b6       	in	r0, 0x3f	; 63
    5138:	f8 94       	cli
    513a:	de bf       	out	0x3e, r29	; 62
    513c:	0f be       	out	0x3f, r0	; 63
    513e:	cd bf       	out	0x3d, r28	; 61
    5140:	6c 01       	movw	r12, r24
    5142:	4b 01       	movw	r8, r22
    5144:	2a 01       	movw	r4, r20
    5146:	fc 01       	movw	r30, r24
    5148:	17 82       	std	Z+7, r1	; 0x07
    514a:	16 82       	std	Z+6, r1	; 0x06
    514c:	83 81       	ldd	r24, Z+3	; 0x03
    514e:	81 ff       	sbrs	r24, 1
    5150:	43 c3       	rjmp	.+1670   	; 0x57d8 <vfprintf+0x6cc>
    5152:	ae 01       	movw	r20, r28
    5154:	4f 5f       	subi	r20, 0xFF	; 255
    5156:	5f 4f       	sbci	r21, 0xFF	; 255
    5158:	3a 01       	movw	r6, r20
    515a:	f6 01       	movw	r30, r12
    515c:	93 81       	ldd	r25, Z+3	; 0x03
    515e:	f4 01       	movw	r30, r8
    5160:	93 fd       	sbrc	r25, 3
    5162:	85 91       	lpm	r24, Z+
    5164:	93 ff       	sbrs	r25, 3
    5166:	81 91       	ld	r24, Z+
    5168:	4f 01       	movw	r8, r30
    516a:	88 23       	and	r24, r24
    516c:	09 f4       	brne	.+2      	; 0x5170 <vfprintf+0x64>
    516e:	30 c3       	rjmp	.+1632   	; 0x57d0 <vfprintf+0x6c4>
    5170:	85 32       	cpi	r24, 0x25	; 37
    5172:	39 f4       	brne	.+14     	; 0x5182 <vfprintf+0x76>
    5174:	93 fd       	sbrc	r25, 3
    5176:	85 91       	lpm	r24, Z+
    5178:	93 ff       	sbrs	r25, 3
    517a:	81 91       	ld	r24, Z+
    517c:	4f 01       	movw	r8, r30
    517e:	85 32       	cpi	r24, 0x25	; 37
    5180:	39 f4       	brne	.+14     	; 0x5190 <vfprintf+0x84>
    5182:	b6 01       	movw	r22, r12
    5184:	90 e0       	ldi	r25, 0x00	; 0
    5186:	0e 94 94 32 	call	0x6528	; 0x6528 <fputc>
    518a:	52 01       	movw	r10, r4
    518c:	25 01       	movw	r4, r10
    518e:	e5 cf       	rjmp	.-54     	; 0x515a <vfprintf+0x4e>
    5190:	10 e0       	ldi	r17, 0x00	; 0
    5192:	f1 2c       	mov	r15, r1
    5194:	20 e0       	ldi	r18, 0x00	; 0
    5196:	20 32       	cpi	r18, 0x20	; 32
    5198:	a0 f4       	brcc	.+40     	; 0x51c2 <vfprintf+0xb6>
    519a:	8b 32       	cpi	r24, 0x2B	; 43
    519c:	69 f0       	breq	.+26     	; 0x51b8 <vfprintf+0xac>
    519e:	30 f4       	brcc	.+12     	; 0x51ac <vfprintf+0xa0>
    51a0:	80 32       	cpi	r24, 0x20	; 32
    51a2:	59 f0       	breq	.+22     	; 0x51ba <vfprintf+0xae>
    51a4:	83 32       	cpi	r24, 0x23	; 35
    51a6:	69 f4       	brne	.+26     	; 0x51c2 <vfprintf+0xb6>
    51a8:	20 61       	ori	r18, 0x10	; 16
    51aa:	2c c0       	rjmp	.+88     	; 0x5204 <vfprintf+0xf8>
    51ac:	8d 32       	cpi	r24, 0x2D	; 45
    51ae:	39 f0       	breq	.+14     	; 0x51be <vfprintf+0xb2>
    51b0:	80 33       	cpi	r24, 0x30	; 48
    51b2:	39 f4       	brne	.+14     	; 0x51c2 <vfprintf+0xb6>
    51b4:	21 60       	ori	r18, 0x01	; 1
    51b6:	26 c0       	rjmp	.+76     	; 0x5204 <vfprintf+0xf8>
    51b8:	22 60       	ori	r18, 0x02	; 2
    51ba:	24 60       	ori	r18, 0x04	; 4
    51bc:	23 c0       	rjmp	.+70     	; 0x5204 <vfprintf+0xf8>
    51be:	28 60       	ori	r18, 0x08	; 8
    51c0:	21 c0       	rjmp	.+66     	; 0x5204 <vfprintf+0xf8>
    51c2:	27 fd       	sbrc	r18, 7
    51c4:	27 c0       	rjmp	.+78     	; 0x5214 <vfprintf+0x108>
    51c6:	30 ed       	ldi	r19, 0xD0	; 208
    51c8:	38 0f       	add	r19, r24
    51ca:	3a 30       	cpi	r19, 0x0A	; 10
    51cc:	78 f4       	brcc	.+30     	; 0x51ec <vfprintf+0xe0>
    51ce:	26 ff       	sbrs	r18, 6
    51d0:	06 c0       	rjmp	.+12     	; 0x51de <vfprintf+0xd2>
    51d2:	fa e0       	ldi	r31, 0x0A	; 10
    51d4:	1f 9f       	mul	r17, r31
    51d6:	30 0d       	add	r19, r0
    51d8:	11 24       	eor	r1, r1
    51da:	13 2f       	mov	r17, r19
    51dc:	13 c0       	rjmp	.+38     	; 0x5204 <vfprintf+0xf8>
    51de:	4a e0       	ldi	r20, 0x0A	; 10
    51e0:	f4 9e       	mul	r15, r20
    51e2:	30 0d       	add	r19, r0
    51e4:	11 24       	eor	r1, r1
    51e6:	f3 2e       	mov	r15, r19
    51e8:	20 62       	ori	r18, 0x20	; 32
    51ea:	0c c0       	rjmp	.+24     	; 0x5204 <vfprintf+0xf8>
    51ec:	8e 32       	cpi	r24, 0x2E	; 46
    51ee:	21 f4       	brne	.+8      	; 0x51f8 <vfprintf+0xec>
    51f0:	26 fd       	sbrc	r18, 6
    51f2:	ee c2       	rjmp	.+1500   	; 0x57d0 <vfprintf+0x6c4>
    51f4:	20 64       	ori	r18, 0x40	; 64
    51f6:	06 c0       	rjmp	.+12     	; 0x5204 <vfprintf+0xf8>
    51f8:	8c 36       	cpi	r24, 0x6C	; 108
    51fa:	11 f4       	brne	.+4      	; 0x5200 <vfprintf+0xf4>
    51fc:	20 68       	ori	r18, 0x80	; 128
    51fe:	02 c0       	rjmp	.+4      	; 0x5204 <vfprintf+0xf8>
    5200:	88 36       	cpi	r24, 0x68	; 104
    5202:	41 f4       	brne	.+16     	; 0x5214 <vfprintf+0x108>
    5204:	f4 01       	movw	r30, r8
    5206:	93 fd       	sbrc	r25, 3
    5208:	85 91       	lpm	r24, Z+
    520a:	93 ff       	sbrs	r25, 3
    520c:	81 91       	ld	r24, Z+
    520e:	4f 01       	movw	r8, r30
    5210:	81 11       	cpse	r24, r1
    5212:	c1 cf       	rjmp	.-126    	; 0x5196 <vfprintf+0x8a>
    5214:	9b eb       	ldi	r25, 0xBB	; 187
    5216:	98 0f       	add	r25, r24
    5218:	93 30       	cpi	r25, 0x03	; 3
    521a:	18 f4       	brcc	.+6      	; 0x5222 <vfprintf+0x116>
    521c:	20 61       	ori	r18, 0x10	; 16
    521e:	80 5e       	subi	r24, 0xE0	; 224
    5220:	06 c0       	rjmp	.+12     	; 0x522e <vfprintf+0x122>
    5222:	9b e9       	ldi	r25, 0x9B	; 155
    5224:	98 0f       	add	r25, r24
    5226:	93 30       	cpi	r25, 0x03	; 3
    5228:	08 f0       	brcs	.+2      	; 0x522c <vfprintf+0x120>
    522a:	71 c1       	rjmp	.+738    	; 0x550e <vfprintf+0x402>
    522c:	2f 7e       	andi	r18, 0xEF	; 239
    522e:	26 ff       	sbrs	r18, 6
    5230:	16 e0       	ldi	r17, 0x06	; 6
    5232:	2f 73       	andi	r18, 0x3F	; 63
    5234:	32 2e       	mov	r3, r18
    5236:	85 36       	cpi	r24, 0x65	; 101
    5238:	19 f4       	brne	.+6      	; 0x5240 <vfprintf+0x134>
    523a:	20 64       	ori	r18, 0x40	; 64
    523c:	32 2e       	mov	r3, r18
    523e:	08 c0       	rjmp	.+16     	; 0x5250 <vfprintf+0x144>
    5240:	86 36       	cpi	r24, 0x66	; 102
    5242:	21 f4       	brne	.+8      	; 0x524c <vfprintf+0x140>
    5244:	f2 2f       	mov	r31, r18
    5246:	f0 68       	ori	r31, 0x80	; 128
    5248:	3f 2e       	mov	r3, r31
    524a:	02 c0       	rjmp	.+4      	; 0x5250 <vfprintf+0x144>
    524c:	11 11       	cpse	r17, r1
    524e:	11 50       	subi	r17, 0x01	; 1
    5250:	37 fe       	sbrs	r3, 7
    5252:	07 c0       	rjmp	.+14     	; 0x5262 <vfprintf+0x156>
    5254:	1c 33       	cpi	r17, 0x3C	; 60
    5256:	50 f4       	brcc	.+20     	; 0x526c <vfprintf+0x160>
    5258:	ee 24       	eor	r14, r14
    525a:	e3 94       	inc	r14
    525c:	e1 0e       	add	r14, r17
    525e:	27 e0       	ldi	r18, 0x07	; 7
    5260:	0b c0       	rjmp	.+22     	; 0x5278 <vfprintf+0x16c>
    5262:	18 30       	cpi	r17, 0x08	; 8
    5264:	38 f0       	brcs	.+14     	; 0x5274 <vfprintf+0x168>
    5266:	27 e0       	ldi	r18, 0x07	; 7
    5268:	17 e0       	ldi	r17, 0x07	; 7
    526a:	05 c0       	rjmp	.+10     	; 0x5276 <vfprintf+0x16a>
    526c:	27 e0       	ldi	r18, 0x07	; 7
    526e:	4c e3       	ldi	r20, 0x3C	; 60
    5270:	e4 2e       	mov	r14, r20
    5272:	02 c0       	rjmp	.+4      	; 0x5278 <vfprintf+0x16c>
    5274:	21 2f       	mov	r18, r17
    5276:	e1 2c       	mov	r14, r1
    5278:	52 01       	movw	r10, r4
    527a:	44 e0       	ldi	r20, 0x04	; 4
    527c:	a4 0e       	add	r10, r20
    527e:	b1 1c       	adc	r11, r1
    5280:	f2 01       	movw	r30, r4
    5282:	60 81       	ld	r22, Z
    5284:	71 81       	ldd	r23, Z+1	; 0x01
    5286:	82 81       	ldd	r24, Z+2	; 0x02
    5288:	93 81       	ldd	r25, Z+3	; 0x03
    528a:	0e 2d       	mov	r16, r14
    528c:	a3 01       	movw	r20, r6
    528e:	0e 94 19 31 	call	0x6232	; 0x6232 <__ftoa_engine>
    5292:	2c 01       	movw	r4, r24
    5294:	09 81       	ldd	r16, Y+1	; 0x01
    5296:	00 ff       	sbrs	r16, 0
    5298:	02 c0       	rjmp	.+4      	; 0x529e <vfprintf+0x192>
    529a:	03 ff       	sbrs	r16, 3
    529c:	07 c0       	rjmp	.+14     	; 0x52ac <vfprintf+0x1a0>
    529e:	31 fc       	sbrc	r3, 1
    52a0:	08 c0       	rjmp	.+16     	; 0x52b2 <vfprintf+0x1a6>
    52a2:	32 fe       	sbrs	r3, 2
    52a4:	09 c0       	rjmp	.+18     	; 0x52b8 <vfprintf+0x1ac>
    52a6:	30 e2       	ldi	r19, 0x20	; 32
    52a8:	23 2e       	mov	r2, r19
    52aa:	07 c0       	rjmp	.+14     	; 0x52ba <vfprintf+0x1ae>
    52ac:	2d e2       	ldi	r18, 0x2D	; 45
    52ae:	22 2e       	mov	r2, r18
    52b0:	04 c0       	rjmp	.+8      	; 0x52ba <vfprintf+0x1ae>
    52b2:	9b e2       	ldi	r25, 0x2B	; 43
    52b4:	29 2e       	mov	r2, r25
    52b6:	01 c0       	rjmp	.+2      	; 0x52ba <vfprintf+0x1ae>
    52b8:	21 2c       	mov	r2, r1
    52ba:	80 2f       	mov	r24, r16
    52bc:	8c 70       	andi	r24, 0x0C	; 12
    52be:	19 f0       	breq	.+6      	; 0x52c6 <vfprintf+0x1ba>
    52c0:	21 10       	cpse	r2, r1
    52c2:	68 c2       	rjmp	.+1232   	; 0x5794 <vfprintf+0x688>
    52c4:	a8 c2       	rjmp	.+1360   	; 0x5816 <vfprintf+0x70a>
    52c6:	37 fe       	sbrs	r3, 7
    52c8:	0f c0       	rjmp	.+30     	; 0x52e8 <vfprintf+0x1dc>
    52ca:	e4 0c       	add	r14, r4
    52cc:	04 ff       	sbrs	r16, 4
    52ce:	04 c0       	rjmp	.+8      	; 0x52d8 <vfprintf+0x1cc>
    52d0:	8a 81       	ldd	r24, Y+2	; 0x02
    52d2:	81 33       	cpi	r24, 0x31	; 49
    52d4:	09 f4       	brne	.+2      	; 0x52d8 <vfprintf+0x1cc>
    52d6:	ea 94       	dec	r14
    52d8:	1e 14       	cp	r1, r14
    52da:	74 f5       	brge	.+92     	; 0x5338 <vfprintf+0x22c>
    52dc:	f8 e0       	ldi	r31, 0x08	; 8
    52de:	fe 15       	cp	r31, r14
    52e0:	78 f5       	brcc	.+94     	; 0x5340 <vfprintf+0x234>
    52e2:	88 e0       	ldi	r24, 0x08	; 8
    52e4:	e8 2e       	mov	r14, r24
    52e6:	2c c0       	rjmp	.+88     	; 0x5340 <vfprintf+0x234>
    52e8:	36 fc       	sbrc	r3, 6
    52ea:	2a c0       	rjmp	.+84     	; 0x5340 <vfprintf+0x234>
    52ec:	81 2f       	mov	r24, r17
    52ee:	90 e0       	ldi	r25, 0x00	; 0
    52f0:	84 15       	cp	r24, r4
    52f2:	95 05       	cpc	r25, r5
    52f4:	9c f0       	brlt	.+38     	; 0x531c <vfprintf+0x210>
    52f6:	2c ef       	ldi	r18, 0xFC	; 252
    52f8:	42 16       	cp	r4, r18
    52fa:	2f ef       	ldi	r18, 0xFF	; 255
    52fc:	52 06       	cpc	r5, r18
    52fe:	74 f0       	brlt	.+28     	; 0x531c <vfprintf+0x210>
    5300:	43 2d       	mov	r20, r3
    5302:	40 68       	ori	r20, 0x80	; 128
    5304:	34 2e       	mov	r3, r20
    5306:	0a c0       	rjmp	.+20     	; 0x531c <vfprintf+0x210>
    5308:	e2 e0       	ldi	r30, 0x02	; 2
    530a:	f0 e0       	ldi	r31, 0x00	; 0
    530c:	ec 0f       	add	r30, r28
    530e:	fd 1f       	adc	r31, r29
    5310:	e1 0f       	add	r30, r17
    5312:	f1 1d       	adc	r31, r1
    5314:	80 81       	ld	r24, Z
    5316:	80 33       	cpi	r24, 0x30	; 48
    5318:	19 f4       	brne	.+6      	; 0x5320 <vfprintf+0x214>
    531a:	11 50       	subi	r17, 0x01	; 1
    531c:	11 11       	cpse	r17, r1
    531e:	f4 cf       	rjmp	.-24     	; 0x5308 <vfprintf+0x1fc>
    5320:	37 fe       	sbrs	r3, 7
    5322:	0e c0       	rjmp	.+28     	; 0x5340 <vfprintf+0x234>
    5324:	ee 24       	eor	r14, r14
    5326:	e3 94       	inc	r14
    5328:	e1 0e       	add	r14, r17
    532a:	81 2f       	mov	r24, r17
    532c:	90 e0       	ldi	r25, 0x00	; 0
    532e:	48 16       	cp	r4, r24
    5330:	59 06       	cpc	r5, r25
    5332:	2c f4       	brge	.+10     	; 0x533e <vfprintf+0x232>
    5334:	14 19       	sub	r17, r4
    5336:	04 c0       	rjmp	.+8      	; 0x5340 <vfprintf+0x234>
    5338:	ee 24       	eor	r14, r14
    533a:	e3 94       	inc	r14
    533c:	01 c0       	rjmp	.+2      	; 0x5340 <vfprintf+0x234>
    533e:	10 e0       	ldi	r17, 0x00	; 0
    5340:	37 fe       	sbrs	r3, 7
    5342:	06 c0       	rjmp	.+12     	; 0x5350 <vfprintf+0x244>
    5344:	14 14       	cp	r1, r4
    5346:	15 04       	cpc	r1, r5
    5348:	34 f4       	brge	.+12     	; 0x5356 <vfprintf+0x24a>
    534a:	c2 01       	movw	r24, r4
    534c:	01 96       	adiw	r24, 0x01	; 1
    534e:	05 c0       	rjmp	.+10     	; 0x535a <vfprintf+0x24e>
    5350:	85 e0       	ldi	r24, 0x05	; 5
    5352:	90 e0       	ldi	r25, 0x00	; 0
    5354:	02 c0       	rjmp	.+4      	; 0x535a <vfprintf+0x24e>
    5356:	81 e0       	ldi	r24, 0x01	; 1
    5358:	90 e0       	ldi	r25, 0x00	; 0
    535a:	21 10       	cpse	r2, r1
    535c:	01 96       	adiw	r24, 0x01	; 1
    535e:	11 23       	and	r17, r17
    5360:	31 f0       	breq	.+12     	; 0x536e <vfprintf+0x262>
    5362:	21 2f       	mov	r18, r17
    5364:	30 e0       	ldi	r19, 0x00	; 0
    5366:	2f 5f       	subi	r18, 0xFF	; 255
    5368:	3f 4f       	sbci	r19, 0xFF	; 255
    536a:	82 0f       	add	r24, r18
    536c:	93 1f       	adc	r25, r19
    536e:	2f 2d       	mov	r18, r15
    5370:	30 e0       	ldi	r19, 0x00	; 0
    5372:	82 17       	cp	r24, r18
    5374:	93 07       	cpc	r25, r19
    5376:	14 f4       	brge	.+4      	; 0x537c <vfprintf+0x270>
    5378:	f8 1a       	sub	r15, r24
    537a:	01 c0       	rjmp	.+2      	; 0x537e <vfprintf+0x272>
    537c:	f1 2c       	mov	r15, r1
    537e:	83 2d       	mov	r24, r3
    5380:	89 70       	andi	r24, 0x09	; 9
    5382:	49 f4       	brne	.+18     	; 0x5396 <vfprintf+0x28a>
    5384:	ff 20       	and	r15, r15
    5386:	39 f0       	breq	.+14     	; 0x5396 <vfprintf+0x28a>
    5388:	b6 01       	movw	r22, r12
    538a:	80 e2       	ldi	r24, 0x20	; 32
    538c:	90 e0       	ldi	r25, 0x00	; 0
    538e:	0e 94 94 32 	call	0x6528	; 0x6528 <fputc>
    5392:	fa 94       	dec	r15
    5394:	f7 cf       	rjmp	.-18     	; 0x5384 <vfprintf+0x278>
    5396:	22 20       	and	r2, r2
    5398:	29 f0       	breq	.+10     	; 0x53a4 <vfprintf+0x298>
    539a:	b6 01       	movw	r22, r12
    539c:	82 2d       	mov	r24, r2
    539e:	90 e0       	ldi	r25, 0x00	; 0
    53a0:	0e 94 94 32 	call	0x6528	; 0x6528 <fputc>
    53a4:	33 fc       	sbrc	r3, 3
    53a6:	09 c0       	rjmp	.+18     	; 0x53ba <vfprintf+0x2ae>
    53a8:	ff 20       	and	r15, r15
    53aa:	39 f0       	breq	.+14     	; 0x53ba <vfprintf+0x2ae>
    53ac:	b6 01       	movw	r22, r12
    53ae:	80 e3       	ldi	r24, 0x30	; 48
    53b0:	90 e0       	ldi	r25, 0x00	; 0
    53b2:	0e 94 94 32 	call	0x6528	; 0x6528 <fputc>
    53b6:	fa 94       	dec	r15
    53b8:	f7 cf       	rjmp	.-18     	; 0x53a8 <vfprintf+0x29c>
    53ba:	37 fe       	sbrs	r3, 7
    53bc:	5a c0       	rjmp	.+180    	; 0x5472 <vfprintf+0x366>
    53be:	94 2d       	mov	r25, r4
    53c0:	85 2d       	mov	r24, r5
    53c2:	57 fe       	sbrs	r5, 7
    53c4:	02 c0       	rjmp	.+4      	; 0x53ca <vfprintf+0x2be>
    53c6:	90 e0       	ldi	r25, 0x00	; 0
    53c8:	80 e0       	ldi	r24, 0x00	; 0
    53ca:	29 2e       	mov	r2, r25
    53cc:	38 2e       	mov	r3, r24
    53ce:	20 e0       	ldi	r18, 0x00	; 0
    53d0:	30 e0       	ldi	r19, 0x00	; 0
    53d2:	a2 01       	movw	r20, r4
    53d4:	4e 19       	sub	r20, r14
    53d6:	51 09       	sbc	r21, r1
    53d8:	5d 87       	std	Y+13, r21	; 0x0d
    53da:	4c 87       	std	Y+12, r20	; 0x0c
    53dc:	a2 01       	movw	r20, r4
    53de:	42 19       	sub	r20, r2
    53e0:	53 09       	sbc	r21, r3
    53e2:	5f 87       	std	Y+15, r21	; 0x0f
    53e4:	4e 87       	std	Y+14, r20	; 0x0e
    53e6:	61 2f       	mov	r22, r17
    53e8:	70 e0       	ldi	r23, 0x00	; 0
    53ea:	44 27       	eor	r20, r20
    53ec:	55 27       	eor	r21, r21
    53ee:	46 1b       	sub	r20, r22
    53f0:	57 0b       	sbc	r21, r23
    53f2:	59 8b       	std	Y+17, r21	; 0x11
    53f4:	48 8b       	std	Y+16, r20	; 0x10
    53f6:	5f ef       	ldi	r21, 0xFF	; 255
    53f8:	25 16       	cp	r2, r21
    53fa:	35 06       	cpc	r3, r21
    53fc:	49 f4       	brne	.+18     	; 0x5410 <vfprintf+0x304>
    53fe:	b6 01       	movw	r22, r12
    5400:	8e e2       	ldi	r24, 0x2E	; 46
    5402:	90 e0       	ldi	r25, 0x00	; 0
    5404:	2a 8b       	std	Y+18, r18	; 0x12
    5406:	3b 8b       	std	Y+19, r19	; 0x13
    5408:	0e 94 94 32 	call	0x6528	; 0x6528 <fputc>
    540c:	3b 89       	ldd	r19, Y+19	; 0x13
    540e:	2a 89       	ldd	r18, Y+18	; 0x12
    5410:	42 14       	cp	r4, r2
    5412:	53 04       	cpc	r5, r3
    5414:	6c f0       	brlt	.+26     	; 0x5430 <vfprintf+0x324>
    5416:	4c 85       	ldd	r20, Y+12	; 0x0c
    5418:	5d 85       	ldd	r21, Y+13	; 0x0d
    541a:	42 15       	cp	r20, r2
    541c:	53 05       	cpc	r21, r3
    541e:	44 f4       	brge	.+16     	; 0x5430 <vfprintf+0x324>
    5420:	ee 85       	ldd	r30, Y+14	; 0x0e
    5422:	ff 85       	ldd	r31, Y+15	; 0x0f
    5424:	e2 0f       	add	r30, r18
    5426:	f3 1f       	adc	r31, r19
    5428:	e6 0d       	add	r30, r6
    542a:	f7 1d       	adc	r31, r7
    542c:	81 81       	ldd	r24, Z+1	; 0x01
    542e:	01 c0       	rjmp	.+2      	; 0x5432 <vfprintf+0x326>
    5430:	80 e3       	ldi	r24, 0x30	; 48
    5432:	51 e0       	ldi	r21, 0x01	; 1
    5434:	25 1a       	sub	r2, r21
    5436:	31 08       	sbc	r3, r1
    5438:	2f 5f       	subi	r18, 0xFF	; 255
    543a:	3f 4f       	sbci	r19, 0xFF	; 255
    543c:	48 89       	ldd	r20, Y+16	; 0x10
    543e:	59 89       	ldd	r21, Y+17	; 0x11
    5440:	24 16       	cp	r2, r20
    5442:	35 06       	cpc	r3, r21
    5444:	4c f0       	brlt	.+18     	; 0x5458 <vfprintf+0x34c>
    5446:	b6 01       	movw	r22, r12
    5448:	90 e0       	ldi	r25, 0x00	; 0
    544a:	2a 8b       	std	Y+18, r18	; 0x12
    544c:	3b 8b       	std	Y+19, r19	; 0x13
    544e:	0e 94 94 32 	call	0x6528	; 0x6528 <fputc>
    5452:	2a 89       	ldd	r18, Y+18	; 0x12
    5454:	3b 89       	ldd	r19, Y+19	; 0x13
    5456:	cf cf       	rjmp	.-98     	; 0x53f6 <vfprintf+0x2ea>
    5458:	24 14       	cp	r2, r4
    545a:	35 04       	cpc	r3, r5
    545c:	39 f4       	brne	.+14     	; 0x546c <vfprintf+0x360>
    545e:	9a 81       	ldd	r25, Y+2	; 0x02
    5460:	96 33       	cpi	r25, 0x36	; 54
    5462:	18 f4       	brcc	.+6      	; 0x546a <vfprintf+0x35e>
    5464:	95 33       	cpi	r25, 0x35	; 53
    5466:	11 f4       	brne	.+4      	; 0x546c <vfprintf+0x360>
    5468:	04 ff       	sbrs	r16, 4
    546a:	81 e3       	ldi	r24, 0x31	; 49
    546c:	b6 01       	movw	r22, r12
    546e:	90 e0       	ldi	r25, 0x00	; 0
    5470:	4b c0       	rjmp	.+150    	; 0x5508 <vfprintf+0x3fc>
    5472:	8a 81       	ldd	r24, Y+2	; 0x02
    5474:	81 33       	cpi	r24, 0x31	; 49
    5476:	09 f0       	breq	.+2      	; 0x547a <vfprintf+0x36e>
    5478:	0f 7e       	andi	r16, 0xEF	; 239
    547a:	b6 01       	movw	r22, r12
    547c:	90 e0       	ldi	r25, 0x00	; 0
    547e:	0e 94 94 32 	call	0x6528	; 0x6528 <fputc>
    5482:	11 11       	cpse	r17, r1
    5484:	05 c0       	rjmp	.+10     	; 0x5490 <vfprintf+0x384>
    5486:	34 fc       	sbrc	r3, 4
    5488:	18 c0       	rjmp	.+48     	; 0x54ba <vfprintf+0x3ae>
    548a:	85 e6       	ldi	r24, 0x65	; 101
    548c:	90 e0       	ldi	r25, 0x00	; 0
    548e:	17 c0       	rjmp	.+46     	; 0x54be <vfprintf+0x3b2>
    5490:	b6 01       	movw	r22, r12
    5492:	8e e2       	ldi	r24, 0x2E	; 46
    5494:	90 e0       	ldi	r25, 0x00	; 0
    5496:	0e 94 94 32 	call	0x6528	; 0x6528 <fputc>
    549a:	82 e0       	ldi	r24, 0x02	; 2
    549c:	ee 24       	eor	r14, r14
    549e:	e3 94       	inc	r14
    54a0:	e8 0e       	add	r14, r24
    54a2:	f3 01       	movw	r30, r6
    54a4:	e8 0f       	add	r30, r24
    54a6:	f1 1d       	adc	r31, r1
    54a8:	80 81       	ld	r24, Z
    54aa:	b6 01       	movw	r22, r12
    54ac:	90 e0       	ldi	r25, 0x00	; 0
    54ae:	0e 94 94 32 	call	0x6528	; 0x6528 <fputc>
    54b2:	11 50       	subi	r17, 0x01	; 1
    54b4:	8e 2d       	mov	r24, r14
    54b6:	91 f7       	brne	.-28     	; 0x549c <vfprintf+0x390>
    54b8:	e6 cf       	rjmp	.-52     	; 0x5486 <vfprintf+0x37a>
    54ba:	85 e4       	ldi	r24, 0x45	; 69
    54bc:	90 e0       	ldi	r25, 0x00	; 0
    54be:	b6 01       	movw	r22, r12
    54c0:	0e 94 94 32 	call	0x6528	; 0x6528 <fputc>
    54c4:	57 fc       	sbrc	r5, 7
    54c6:	05 c0       	rjmp	.+10     	; 0x54d2 <vfprintf+0x3c6>
    54c8:	41 14       	cp	r4, r1
    54ca:	51 04       	cpc	r5, r1
    54cc:	39 f4       	brne	.+14     	; 0x54dc <vfprintf+0x3d0>
    54ce:	04 ff       	sbrs	r16, 4
    54d0:	05 c0       	rjmp	.+10     	; 0x54dc <vfprintf+0x3d0>
    54d2:	51 94       	neg	r5
    54d4:	41 94       	neg	r4
    54d6:	51 08       	sbc	r5, r1
    54d8:	8d e2       	ldi	r24, 0x2D	; 45
    54da:	01 c0       	rjmp	.+2      	; 0x54de <vfprintf+0x3d2>
    54dc:	8b e2       	ldi	r24, 0x2B	; 43
    54de:	b6 01       	movw	r22, r12
    54e0:	90 e0       	ldi	r25, 0x00	; 0
    54e2:	0e 94 94 32 	call	0x6528	; 0x6528 <fputc>
    54e6:	80 e3       	ldi	r24, 0x30	; 48
    54e8:	9a e0       	ldi	r25, 0x0A	; 10
    54ea:	49 16       	cp	r4, r25
    54ec:	51 04       	cpc	r5, r1
    54ee:	2c f0       	brlt	.+10     	; 0x54fa <vfprintf+0x3ee>
    54f0:	8f 5f       	subi	r24, 0xFF	; 255
    54f2:	5a e0       	ldi	r21, 0x0A	; 10
    54f4:	45 1a       	sub	r4, r21
    54f6:	51 08       	sbc	r5, r1
    54f8:	f7 cf       	rjmp	.-18     	; 0x54e8 <vfprintf+0x3dc>
    54fa:	b6 01       	movw	r22, r12
    54fc:	90 e0       	ldi	r25, 0x00	; 0
    54fe:	0e 94 94 32 	call	0x6528	; 0x6528 <fputc>
    5502:	b6 01       	movw	r22, r12
    5504:	c2 01       	movw	r24, r4
    5506:	c0 96       	adiw	r24, 0x30	; 48
    5508:	0e 94 94 32 	call	0x6528	; 0x6528 <fputc>
    550c:	57 c1       	rjmp	.+686    	; 0x57bc <vfprintf+0x6b0>
    550e:	83 36       	cpi	r24, 0x63	; 99
    5510:	31 f0       	breq	.+12     	; 0x551e <vfprintf+0x412>
    5512:	83 37       	cpi	r24, 0x73	; 115
    5514:	79 f0       	breq	.+30     	; 0x5534 <vfprintf+0x428>
    5516:	83 35       	cpi	r24, 0x53	; 83
    5518:	09 f0       	breq	.+2      	; 0x551c <vfprintf+0x410>
    551a:	58 c0       	rjmp	.+176    	; 0x55cc <vfprintf+0x4c0>
    551c:	21 c0       	rjmp	.+66     	; 0x5560 <vfprintf+0x454>
    551e:	52 01       	movw	r10, r4
    5520:	e2 e0       	ldi	r30, 0x02	; 2
    5522:	ae 0e       	add	r10, r30
    5524:	b1 1c       	adc	r11, r1
    5526:	f2 01       	movw	r30, r4
    5528:	80 81       	ld	r24, Z
    552a:	89 83       	std	Y+1, r24	; 0x01
    552c:	01 e0       	ldi	r16, 0x01	; 1
    552e:	10 e0       	ldi	r17, 0x00	; 0
    5530:	23 01       	movw	r4, r6
    5532:	14 c0       	rjmp	.+40     	; 0x555c <vfprintf+0x450>
    5534:	52 01       	movw	r10, r4
    5536:	f2 e0       	ldi	r31, 0x02	; 2
    5538:	af 0e       	add	r10, r31
    553a:	b1 1c       	adc	r11, r1
    553c:	f2 01       	movw	r30, r4
    553e:	40 80       	ld	r4, Z
    5540:	51 80       	ldd	r5, Z+1	; 0x01
    5542:	26 ff       	sbrs	r18, 6
    5544:	03 c0       	rjmp	.+6      	; 0x554c <vfprintf+0x440>
    5546:	61 2f       	mov	r22, r17
    5548:	70 e0       	ldi	r23, 0x00	; 0
    554a:	02 c0       	rjmp	.+4      	; 0x5550 <vfprintf+0x444>
    554c:	6f ef       	ldi	r22, 0xFF	; 255
    554e:	7f ef       	ldi	r23, 0xFF	; 255
    5550:	c2 01       	movw	r24, r4
    5552:	2a 8b       	std	Y+18, r18	; 0x12
    5554:	0e 94 45 32 	call	0x648a	; 0x648a <strnlen>
    5558:	8c 01       	movw	r16, r24
    555a:	2a 89       	ldd	r18, Y+18	; 0x12
    555c:	2f 77       	andi	r18, 0x7F	; 127
    555e:	15 c0       	rjmp	.+42     	; 0x558a <vfprintf+0x47e>
    5560:	52 01       	movw	r10, r4
    5562:	f2 e0       	ldi	r31, 0x02	; 2
    5564:	af 0e       	add	r10, r31
    5566:	b1 1c       	adc	r11, r1
    5568:	f2 01       	movw	r30, r4
    556a:	40 80       	ld	r4, Z
    556c:	51 80       	ldd	r5, Z+1	; 0x01
    556e:	26 ff       	sbrs	r18, 6
    5570:	03 c0       	rjmp	.+6      	; 0x5578 <vfprintf+0x46c>
    5572:	61 2f       	mov	r22, r17
    5574:	70 e0       	ldi	r23, 0x00	; 0
    5576:	02 c0       	rjmp	.+4      	; 0x557c <vfprintf+0x470>
    5578:	6f ef       	ldi	r22, 0xFF	; 255
    557a:	7f ef       	ldi	r23, 0xFF	; 255
    557c:	c2 01       	movw	r24, r4
    557e:	2a 8b       	std	Y+18, r18	; 0x12
    5580:	0e 94 fa 31 	call	0x63f4	; 0x63f4 <strnlen_P>
    5584:	8c 01       	movw	r16, r24
    5586:	2a 89       	ldd	r18, Y+18	; 0x12
    5588:	20 68       	ori	r18, 0x80	; 128
    558a:	32 2e       	mov	r3, r18
    558c:	23 fd       	sbrc	r18, 3
    558e:	1a c0       	rjmp	.+52     	; 0x55c4 <vfprintf+0x4b8>
    5590:	8f 2d       	mov	r24, r15
    5592:	90 e0       	ldi	r25, 0x00	; 0
    5594:	08 17       	cp	r16, r24
    5596:	19 07       	cpc	r17, r25
    5598:	a8 f4       	brcc	.+42     	; 0x55c4 <vfprintf+0x4b8>
    559a:	b6 01       	movw	r22, r12
    559c:	80 e2       	ldi	r24, 0x20	; 32
    559e:	90 e0       	ldi	r25, 0x00	; 0
    55a0:	0e 94 94 32 	call	0x6528	; 0x6528 <fputc>
    55a4:	fa 94       	dec	r15
    55a6:	f4 cf       	rjmp	.-24     	; 0x5590 <vfprintf+0x484>
    55a8:	f2 01       	movw	r30, r4
    55aa:	37 fc       	sbrc	r3, 7
    55ac:	85 91       	lpm	r24, Z+
    55ae:	37 fe       	sbrs	r3, 7
    55b0:	81 91       	ld	r24, Z+
    55b2:	2f 01       	movw	r4, r30
    55b4:	b6 01       	movw	r22, r12
    55b6:	90 e0       	ldi	r25, 0x00	; 0
    55b8:	0e 94 94 32 	call	0x6528	; 0x6528 <fputc>
    55bc:	f1 10       	cpse	r15, r1
    55be:	fa 94       	dec	r15
    55c0:	01 50       	subi	r16, 0x01	; 1
    55c2:	11 09       	sbc	r17, r1
    55c4:	01 15       	cp	r16, r1
    55c6:	11 05       	cpc	r17, r1
    55c8:	79 f7       	brne	.-34     	; 0x55a8 <vfprintf+0x49c>
    55ca:	f8 c0       	rjmp	.+496    	; 0x57bc <vfprintf+0x6b0>
    55cc:	84 36       	cpi	r24, 0x64	; 100
    55ce:	11 f0       	breq	.+4      	; 0x55d4 <vfprintf+0x4c8>
    55d0:	89 36       	cpi	r24, 0x69	; 105
    55d2:	59 f5       	brne	.+86     	; 0x562a <vfprintf+0x51e>
    55d4:	52 01       	movw	r10, r4
    55d6:	27 ff       	sbrs	r18, 7
    55d8:	09 c0       	rjmp	.+18     	; 0x55ec <vfprintf+0x4e0>
    55da:	f4 e0       	ldi	r31, 0x04	; 4
    55dc:	af 0e       	add	r10, r31
    55de:	b1 1c       	adc	r11, r1
    55e0:	f2 01       	movw	r30, r4
    55e2:	60 81       	ld	r22, Z
    55e4:	71 81       	ldd	r23, Z+1	; 0x01
    55e6:	82 81       	ldd	r24, Z+2	; 0x02
    55e8:	93 81       	ldd	r25, Z+3	; 0x03
    55ea:	0a c0       	rjmp	.+20     	; 0x5600 <vfprintf+0x4f4>
    55ec:	f2 e0       	ldi	r31, 0x02	; 2
    55ee:	af 0e       	add	r10, r31
    55f0:	b1 1c       	adc	r11, r1
    55f2:	f2 01       	movw	r30, r4
    55f4:	60 81       	ld	r22, Z
    55f6:	71 81       	ldd	r23, Z+1	; 0x01
    55f8:	07 2e       	mov	r0, r23
    55fa:	00 0c       	add	r0, r0
    55fc:	88 0b       	sbc	r24, r24
    55fe:	99 0b       	sbc	r25, r25
    5600:	2f 76       	andi	r18, 0x6F	; 111
    5602:	32 2e       	mov	r3, r18
    5604:	97 ff       	sbrs	r25, 7
    5606:	09 c0       	rjmp	.+18     	; 0x561a <vfprintf+0x50e>
    5608:	90 95       	com	r25
    560a:	80 95       	com	r24
    560c:	70 95       	com	r23
    560e:	61 95       	neg	r22
    5610:	7f 4f       	sbci	r23, 0xFF	; 255
    5612:	8f 4f       	sbci	r24, 0xFF	; 255
    5614:	9f 4f       	sbci	r25, 0xFF	; 255
    5616:	20 68       	ori	r18, 0x80	; 128
    5618:	32 2e       	mov	r3, r18
    561a:	2a e0       	ldi	r18, 0x0A	; 10
    561c:	30 e0       	ldi	r19, 0x00	; 0
    561e:	a3 01       	movw	r20, r6
    5620:	0e 94 fc 32 	call	0x65f8	; 0x65f8 <__ultoa_invert>
    5624:	e8 2e       	mov	r14, r24
    5626:	e6 18       	sub	r14, r6
    5628:	3f c0       	rjmp	.+126    	; 0x56a8 <vfprintf+0x59c>
    562a:	02 2f       	mov	r16, r18
    562c:	85 37       	cpi	r24, 0x75	; 117
    562e:	21 f4       	brne	.+8      	; 0x5638 <vfprintf+0x52c>
    5630:	0f 7e       	andi	r16, 0xEF	; 239
    5632:	2a e0       	ldi	r18, 0x0A	; 10
    5634:	30 e0       	ldi	r19, 0x00	; 0
    5636:	1d c0       	rjmp	.+58     	; 0x5672 <vfprintf+0x566>
    5638:	09 7f       	andi	r16, 0xF9	; 249
    563a:	8f 36       	cpi	r24, 0x6F	; 111
    563c:	91 f0       	breq	.+36     	; 0x5662 <vfprintf+0x556>
    563e:	18 f4       	brcc	.+6      	; 0x5646 <vfprintf+0x53a>
    5640:	88 35       	cpi	r24, 0x58	; 88
    5642:	59 f0       	breq	.+22     	; 0x565a <vfprintf+0x54e>
    5644:	c5 c0       	rjmp	.+394    	; 0x57d0 <vfprintf+0x6c4>
    5646:	80 37       	cpi	r24, 0x70	; 112
    5648:	19 f0       	breq	.+6      	; 0x5650 <vfprintf+0x544>
    564a:	88 37       	cpi	r24, 0x78	; 120
    564c:	11 f0       	breq	.+4      	; 0x5652 <vfprintf+0x546>
    564e:	c0 c0       	rjmp	.+384    	; 0x57d0 <vfprintf+0x6c4>
    5650:	00 61       	ori	r16, 0x10	; 16
    5652:	04 ff       	sbrs	r16, 4
    5654:	09 c0       	rjmp	.+18     	; 0x5668 <vfprintf+0x55c>
    5656:	04 60       	ori	r16, 0x04	; 4
    5658:	07 c0       	rjmp	.+14     	; 0x5668 <vfprintf+0x55c>
    565a:	24 ff       	sbrs	r18, 4
    565c:	08 c0       	rjmp	.+16     	; 0x566e <vfprintf+0x562>
    565e:	06 60       	ori	r16, 0x06	; 6
    5660:	06 c0       	rjmp	.+12     	; 0x566e <vfprintf+0x562>
    5662:	28 e0       	ldi	r18, 0x08	; 8
    5664:	30 e0       	ldi	r19, 0x00	; 0
    5666:	05 c0       	rjmp	.+10     	; 0x5672 <vfprintf+0x566>
    5668:	20 e1       	ldi	r18, 0x10	; 16
    566a:	30 e0       	ldi	r19, 0x00	; 0
    566c:	02 c0       	rjmp	.+4      	; 0x5672 <vfprintf+0x566>
    566e:	20 e1       	ldi	r18, 0x10	; 16
    5670:	32 e0       	ldi	r19, 0x02	; 2
    5672:	52 01       	movw	r10, r4
    5674:	07 ff       	sbrs	r16, 7
    5676:	09 c0       	rjmp	.+18     	; 0x568a <vfprintf+0x57e>
    5678:	f4 e0       	ldi	r31, 0x04	; 4
    567a:	af 0e       	add	r10, r31
    567c:	b1 1c       	adc	r11, r1
    567e:	f2 01       	movw	r30, r4
    5680:	60 81       	ld	r22, Z
    5682:	71 81       	ldd	r23, Z+1	; 0x01
    5684:	82 81       	ldd	r24, Z+2	; 0x02
    5686:	93 81       	ldd	r25, Z+3	; 0x03
    5688:	08 c0       	rjmp	.+16     	; 0x569a <vfprintf+0x58e>
    568a:	f2 e0       	ldi	r31, 0x02	; 2
    568c:	af 0e       	add	r10, r31
    568e:	b1 1c       	adc	r11, r1
    5690:	f2 01       	movw	r30, r4
    5692:	60 81       	ld	r22, Z
    5694:	71 81       	ldd	r23, Z+1	; 0x01
    5696:	80 e0       	ldi	r24, 0x00	; 0
    5698:	90 e0       	ldi	r25, 0x00	; 0
    569a:	a3 01       	movw	r20, r6
    569c:	0e 94 fc 32 	call	0x65f8	; 0x65f8 <__ultoa_invert>
    56a0:	e8 2e       	mov	r14, r24
    56a2:	e6 18       	sub	r14, r6
    56a4:	0f 77       	andi	r16, 0x7F	; 127
    56a6:	30 2e       	mov	r3, r16
    56a8:	36 fe       	sbrs	r3, 6
    56aa:	0b c0       	rjmp	.+22     	; 0x56c2 <vfprintf+0x5b6>
    56ac:	33 2d       	mov	r19, r3
    56ae:	3e 7f       	andi	r19, 0xFE	; 254
    56b0:	e1 16       	cp	r14, r17
    56b2:	50 f4       	brcc	.+20     	; 0x56c8 <vfprintf+0x5bc>
    56b4:	34 fe       	sbrs	r3, 4
    56b6:	0a c0       	rjmp	.+20     	; 0x56cc <vfprintf+0x5c0>
    56b8:	32 fc       	sbrc	r3, 2
    56ba:	08 c0       	rjmp	.+16     	; 0x56cc <vfprintf+0x5c0>
    56bc:	33 2d       	mov	r19, r3
    56be:	3e 7e       	andi	r19, 0xEE	; 238
    56c0:	05 c0       	rjmp	.+10     	; 0x56cc <vfprintf+0x5c0>
    56c2:	0e 2d       	mov	r16, r14
    56c4:	33 2d       	mov	r19, r3
    56c6:	03 c0       	rjmp	.+6      	; 0x56ce <vfprintf+0x5c2>
    56c8:	0e 2d       	mov	r16, r14
    56ca:	01 c0       	rjmp	.+2      	; 0x56ce <vfprintf+0x5c2>
    56cc:	01 2f       	mov	r16, r17
    56ce:	34 ff       	sbrs	r19, 4
    56d0:	0c c0       	rjmp	.+24     	; 0x56ea <vfprintf+0x5de>
    56d2:	fe 01       	movw	r30, r28
    56d4:	ee 0d       	add	r30, r14
    56d6:	f1 1d       	adc	r31, r1
    56d8:	80 81       	ld	r24, Z
    56da:	80 33       	cpi	r24, 0x30	; 48
    56dc:	11 f4       	brne	.+4      	; 0x56e2 <vfprintf+0x5d6>
    56de:	39 7e       	andi	r19, 0xE9	; 233
    56e0:	08 c0       	rjmp	.+16     	; 0x56f2 <vfprintf+0x5e6>
    56e2:	32 ff       	sbrs	r19, 2
    56e4:	05 c0       	rjmp	.+10     	; 0x56f0 <vfprintf+0x5e4>
    56e6:	0e 5f       	subi	r16, 0xFE	; 254
    56e8:	04 c0       	rjmp	.+8      	; 0x56f2 <vfprintf+0x5e6>
    56ea:	83 2f       	mov	r24, r19
    56ec:	86 78       	andi	r24, 0x86	; 134
    56ee:	09 f0       	breq	.+2      	; 0x56f2 <vfprintf+0x5e6>
    56f0:	0f 5f       	subi	r16, 0xFF	; 255
    56f2:	33 fd       	sbrc	r19, 3
    56f4:	13 c0       	rjmp	.+38     	; 0x571c <vfprintf+0x610>
    56f6:	30 ff       	sbrs	r19, 0
    56f8:	06 c0       	rjmp	.+12     	; 0x5706 <vfprintf+0x5fa>
    56fa:	1e 2d       	mov	r17, r14
    56fc:	0f 15       	cp	r16, r15
    56fe:	18 f4       	brcc	.+6      	; 0x5706 <vfprintf+0x5fa>
    5700:	1f 0d       	add	r17, r15
    5702:	10 1b       	sub	r17, r16
    5704:	0f 2d       	mov	r16, r15
    5706:	0f 15       	cp	r16, r15
    5708:	68 f4       	brcc	.+26     	; 0x5724 <vfprintf+0x618>
    570a:	b6 01       	movw	r22, r12
    570c:	80 e2       	ldi	r24, 0x20	; 32
    570e:	90 e0       	ldi	r25, 0x00	; 0
    5710:	3b 8b       	std	Y+19, r19	; 0x13
    5712:	0e 94 94 32 	call	0x6528	; 0x6528 <fputc>
    5716:	0f 5f       	subi	r16, 0xFF	; 255
    5718:	3b 89       	ldd	r19, Y+19	; 0x13
    571a:	f5 cf       	rjmp	.-22     	; 0x5706 <vfprintf+0x5fa>
    571c:	0f 15       	cp	r16, r15
    571e:	10 f4       	brcc	.+4      	; 0x5724 <vfprintf+0x618>
    5720:	f0 1a       	sub	r15, r16
    5722:	01 c0       	rjmp	.+2      	; 0x5726 <vfprintf+0x61a>
    5724:	f1 2c       	mov	r15, r1
    5726:	34 ff       	sbrs	r19, 4
    5728:	12 c0       	rjmp	.+36     	; 0x574e <vfprintf+0x642>
    572a:	b6 01       	movw	r22, r12
    572c:	80 e3       	ldi	r24, 0x30	; 48
    572e:	90 e0       	ldi	r25, 0x00	; 0
    5730:	3b 8b       	std	Y+19, r19	; 0x13
    5732:	0e 94 94 32 	call	0x6528	; 0x6528 <fputc>
    5736:	3b 89       	ldd	r19, Y+19	; 0x13
    5738:	32 ff       	sbrs	r19, 2
    573a:	17 c0       	rjmp	.+46     	; 0x576a <vfprintf+0x65e>
    573c:	31 fd       	sbrc	r19, 1
    573e:	03 c0       	rjmp	.+6      	; 0x5746 <vfprintf+0x63a>
    5740:	88 e7       	ldi	r24, 0x78	; 120
    5742:	90 e0       	ldi	r25, 0x00	; 0
    5744:	02 c0       	rjmp	.+4      	; 0x574a <vfprintf+0x63e>
    5746:	88 e5       	ldi	r24, 0x58	; 88
    5748:	90 e0       	ldi	r25, 0x00	; 0
    574a:	b6 01       	movw	r22, r12
    574c:	0c c0       	rjmp	.+24     	; 0x5766 <vfprintf+0x65a>
    574e:	83 2f       	mov	r24, r19
    5750:	86 78       	andi	r24, 0x86	; 134
    5752:	59 f0       	breq	.+22     	; 0x576a <vfprintf+0x65e>
    5754:	31 ff       	sbrs	r19, 1
    5756:	02 c0       	rjmp	.+4      	; 0x575c <vfprintf+0x650>
    5758:	8b e2       	ldi	r24, 0x2B	; 43
    575a:	01 c0       	rjmp	.+2      	; 0x575e <vfprintf+0x652>
    575c:	80 e2       	ldi	r24, 0x20	; 32
    575e:	37 fd       	sbrc	r19, 7
    5760:	8d e2       	ldi	r24, 0x2D	; 45
    5762:	b6 01       	movw	r22, r12
    5764:	90 e0       	ldi	r25, 0x00	; 0
    5766:	0e 94 94 32 	call	0x6528	; 0x6528 <fputc>
    576a:	e1 16       	cp	r14, r17
    576c:	38 f4       	brcc	.+14     	; 0x577c <vfprintf+0x670>
    576e:	b6 01       	movw	r22, r12
    5770:	80 e3       	ldi	r24, 0x30	; 48
    5772:	90 e0       	ldi	r25, 0x00	; 0
    5774:	0e 94 94 32 	call	0x6528	; 0x6528 <fputc>
    5778:	11 50       	subi	r17, 0x01	; 1
    577a:	f7 cf       	rjmp	.-18     	; 0x576a <vfprintf+0x65e>
    577c:	ea 94       	dec	r14
    577e:	f3 01       	movw	r30, r6
    5780:	ee 0d       	add	r30, r14
    5782:	f1 1d       	adc	r31, r1
    5784:	80 81       	ld	r24, Z
    5786:	b6 01       	movw	r22, r12
    5788:	90 e0       	ldi	r25, 0x00	; 0
    578a:	0e 94 94 32 	call	0x6528	; 0x6528 <fputc>
    578e:	e1 10       	cpse	r14, r1
    5790:	f5 cf       	rjmp	.-22     	; 0x577c <vfprintf+0x670>
    5792:	14 c0       	rjmp	.+40     	; 0x57bc <vfprintf+0x6b0>
    5794:	f4 e0       	ldi	r31, 0x04	; 4
    5796:	ff 15       	cp	r31, r15
    5798:	58 f5       	brcc	.+86     	; 0x57f0 <vfprintf+0x6e4>
    579a:	84 e0       	ldi	r24, 0x04	; 4
    579c:	f8 1a       	sub	r15, r24
    579e:	33 fe       	sbrs	r3, 3
    57a0:	1e c0       	rjmp	.+60     	; 0x57de <vfprintf+0x6d2>
    57a2:	21 10       	cpse	r2, r1
    57a4:	26 c0       	rjmp	.+76     	; 0x57f2 <vfprintf+0x6e6>
    57a6:	03 ff       	sbrs	r16, 3
    57a8:	2a c0       	rjmp	.+84     	; 0x57fe <vfprintf+0x6f2>
    57aa:	0a eb       	ldi	r16, 0xBA	; 186
    57ac:	11 e0       	ldi	r17, 0x01	; 1
    57ae:	f3 2d       	mov	r31, r3
    57b0:	f0 71       	andi	r31, 0x10	; 16
    57b2:	3f 2e       	mov	r3, r31
    57b4:	f8 01       	movw	r30, r16
    57b6:	84 91       	lpm	r24, Z
    57b8:	81 11       	cpse	r24, r1
    57ba:	24 c0       	rjmp	.+72     	; 0x5804 <vfprintf+0x6f8>
    57bc:	ff 20       	and	r15, r15
    57be:	09 f4       	brne	.+2      	; 0x57c2 <vfprintf+0x6b6>
    57c0:	e5 cc       	rjmp	.-1590   	; 0x518c <vfprintf+0x80>
    57c2:	b6 01       	movw	r22, r12
    57c4:	80 e2       	ldi	r24, 0x20	; 32
    57c6:	90 e0       	ldi	r25, 0x00	; 0
    57c8:	0e 94 94 32 	call	0x6528	; 0x6528 <fputc>
    57cc:	fa 94       	dec	r15
    57ce:	f6 cf       	rjmp	.-20     	; 0x57bc <vfprintf+0x6b0>
    57d0:	f6 01       	movw	r30, r12
    57d2:	86 81       	ldd	r24, Z+6	; 0x06
    57d4:	97 81       	ldd	r25, Z+7	; 0x07
    57d6:	26 c0       	rjmp	.+76     	; 0x5824 <vfprintf+0x718>
    57d8:	8f ef       	ldi	r24, 0xFF	; 255
    57da:	9f ef       	ldi	r25, 0xFF	; 255
    57dc:	23 c0       	rjmp	.+70     	; 0x5824 <vfprintf+0x718>
    57de:	b6 01       	movw	r22, r12
    57e0:	80 e2       	ldi	r24, 0x20	; 32
    57e2:	90 e0       	ldi	r25, 0x00	; 0
    57e4:	0e 94 94 32 	call	0x6528	; 0x6528 <fputc>
    57e8:	fa 94       	dec	r15
    57ea:	f1 10       	cpse	r15, r1
    57ec:	f8 cf       	rjmp	.-16     	; 0x57de <vfprintf+0x6d2>
    57ee:	d9 cf       	rjmp	.-78     	; 0x57a2 <vfprintf+0x696>
    57f0:	f1 2c       	mov	r15, r1
    57f2:	b6 01       	movw	r22, r12
    57f4:	82 2d       	mov	r24, r2
    57f6:	90 e0       	ldi	r25, 0x00	; 0
    57f8:	0e 94 94 32 	call	0x6528	; 0x6528 <fputc>
    57fc:	d4 cf       	rjmp	.-88     	; 0x57a6 <vfprintf+0x69a>
    57fe:	0e eb       	ldi	r16, 0xBE	; 190
    5800:	11 e0       	ldi	r17, 0x01	; 1
    5802:	d5 cf       	rjmp	.-86     	; 0x57ae <vfprintf+0x6a2>
    5804:	31 10       	cpse	r3, r1
    5806:	80 52       	subi	r24, 0x20	; 32
    5808:	b6 01       	movw	r22, r12
    580a:	90 e0       	ldi	r25, 0x00	; 0
    580c:	0e 94 94 32 	call	0x6528	; 0x6528 <fputc>
    5810:	0f 5f       	subi	r16, 0xFF	; 255
    5812:	1f 4f       	sbci	r17, 0xFF	; 255
    5814:	cf cf       	rjmp	.-98     	; 0x57b4 <vfprintf+0x6a8>
    5816:	23 e0       	ldi	r18, 0x03	; 3
    5818:	2f 15       	cp	r18, r15
    581a:	10 f4       	brcc	.+4      	; 0x5820 <vfprintf+0x714>
    581c:	83 e0       	ldi	r24, 0x03	; 3
    581e:	be cf       	rjmp	.-132    	; 0x579c <vfprintf+0x690>
    5820:	f1 2c       	mov	r15, r1
    5822:	c1 cf       	rjmp	.-126    	; 0x57a6 <vfprintf+0x69a>
    5824:	63 96       	adiw	r28, 0x13	; 19
    5826:	0f b6       	in	r0, 0x3f	; 63
    5828:	f8 94       	cli
    582a:	de bf       	out	0x3e, r29	; 62
    582c:	0f be       	out	0x3f, r0	; 63
    582e:	cd bf       	out	0x3d, r28	; 61
    5830:	df 91       	pop	r29
    5832:	cf 91       	pop	r28
    5834:	1f 91       	pop	r17
    5836:	0f 91       	pop	r16
    5838:	ff 90       	pop	r15
    583a:	ef 90       	pop	r14
    583c:	df 90       	pop	r13
    583e:	cf 90       	pop	r12
    5840:	bf 90       	pop	r11
    5842:	af 90       	pop	r10
    5844:	9f 90       	pop	r9
    5846:	8f 90       	pop	r8
    5848:	7f 90       	pop	r7
    584a:	6f 90       	pop	r6
    584c:	5f 90       	pop	r5
    584e:	4f 90       	pop	r4
    5850:	3f 90       	pop	r3
    5852:	2f 90       	pop	r2
    5854:	08 95       	ret

00005856 <__subsf3>:
    5856:	50 58       	subi	r21, 0x80	; 128

00005858 <__addsf3>:
    5858:	bb 27       	eor	r27, r27
    585a:	aa 27       	eor	r26, r26
    585c:	0e 94 43 2c 	call	0x5886	; 0x5886 <__addsf3x>
    5860:	0c 94 8d 2d 	jmp	0x5b1a	; 0x5b1a <__fp_round>
    5864:	0e 94 7f 2d 	call	0x5afe	; 0x5afe <__fp_pscA>
    5868:	38 f0       	brcs	.+14     	; 0x5878 <__addsf3+0x20>
    586a:	0e 94 86 2d 	call	0x5b0c	; 0x5b0c <__fp_pscB>
    586e:	20 f0       	brcs	.+8      	; 0x5878 <__addsf3+0x20>
    5870:	39 f4       	brne	.+14     	; 0x5880 <__addsf3+0x28>
    5872:	9f 3f       	cpi	r25, 0xFF	; 255
    5874:	19 f4       	brne	.+6      	; 0x587c <__addsf3+0x24>
    5876:	26 f4       	brtc	.+8      	; 0x5880 <__addsf3+0x28>
    5878:	0c 94 7c 2d 	jmp	0x5af8	; 0x5af8 <__fp_nan>
    587c:	0e f4       	brtc	.+2      	; 0x5880 <__addsf3+0x28>
    587e:	e0 95       	com	r30
    5880:	e7 fb       	bst	r30, 7
    5882:	0c 94 76 2d 	jmp	0x5aec	; 0x5aec <__fp_inf>

00005886 <__addsf3x>:
    5886:	e9 2f       	mov	r30, r25
    5888:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <__fp_split3>
    588c:	58 f3       	brcs	.-42     	; 0x5864 <__addsf3+0xc>
    588e:	ba 17       	cp	r27, r26
    5890:	62 07       	cpc	r22, r18
    5892:	73 07       	cpc	r23, r19
    5894:	84 07       	cpc	r24, r20
    5896:	95 07       	cpc	r25, r21
    5898:	20 f0       	brcs	.+8      	; 0x58a2 <__addsf3x+0x1c>
    589a:	79 f4       	brne	.+30     	; 0x58ba <__addsf3x+0x34>
    589c:	a6 f5       	brtc	.+104    	; 0x5906 <__addsf3x+0x80>
    589e:	0c 94 c0 2d 	jmp	0x5b80	; 0x5b80 <__fp_zero>
    58a2:	0e f4       	brtc	.+2      	; 0x58a6 <__addsf3x+0x20>
    58a4:	e0 95       	com	r30
    58a6:	0b 2e       	mov	r0, r27
    58a8:	ba 2f       	mov	r27, r26
    58aa:	a0 2d       	mov	r26, r0
    58ac:	0b 01       	movw	r0, r22
    58ae:	b9 01       	movw	r22, r18
    58b0:	90 01       	movw	r18, r0
    58b2:	0c 01       	movw	r0, r24
    58b4:	ca 01       	movw	r24, r20
    58b6:	a0 01       	movw	r20, r0
    58b8:	11 24       	eor	r1, r1
    58ba:	ff 27       	eor	r31, r31
    58bc:	59 1b       	sub	r21, r25
    58be:	99 f0       	breq	.+38     	; 0x58e6 <__addsf3x+0x60>
    58c0:	59 3f       	cpi	r21, 0xF9	; 249
    58c2:	50 f4       	brcc	.+20     	; 0x58d8 <__addsf3x+0x52>
    58c4:	50 3e       	cpi	r21, 0xE0	; 224
    58c6:	68 f1       	brcs	.+90     	; 0x5922 <__addsf3x+0x9c>
    58c8:	1a 16       	cp	r1, r26
    58ca:	f0 40       	sbci	r31, 0x00	; 0
    58cc:	a2 2f       	mov	r26, r18
    58ce:	23 2f       	mov	r18, r19
    58d0:	34 2f       	mov	r19, r20
    58d2:	44 27       	eor	r20, r20
    58d4:	58 5f       	subi	r21, 0xF8	; 248
    58d6:	f3 cf       	rjmp	.-26     	; 0x58be <__addsf3x+0x38>
    58d8:	46 95       	lsr	r20
    58da:	37 95       	ror	r19
    58dc:	27 95       	ror	r18
    58de:	a7 95       	ror	r26
    58e0:	f0 40       	sbci	r31, 0x00	; 0
    58e2:	53 95       	inc	r21
    58e4:	c9 f7       	brne	.-14     	; 0x58d8 <__addsf3x+0x52>
    58e6:	7e f4       	brtc	.+30     	; 0x5906 <__addsf3x+0x80>
    58e8:	1f 16       	cp	r1, r31
    58ea:	ba 0b       	sbc	r27, r26
    58ec:	62 0b       	sbc	r22, r18
    58ee:	73 0b       	sbc	r23, r19
    58f0:	84 0b       	sbc	r24, r20
    58f2:	ba f0       	brmi	.+46     	; 0x5922 <__addsf3x+0x9c>
    58f4:	91 50       	subi	r25, 0x01	; 1
    58f6:	a1 f0       	breq	.+40     	; 0x5920 <__addsf3x+0x9a>
    58f8:	ff 0f       	add	r31, r31
    58fa:	bb 1f       	adc	r27, r27
    58fc:	66 1f       	adc	r22, r22
    58fe:	77 1f       	adc	r23, r23
    5900:	88 1f       	adc	r24, r24
    5902:	c2 f7       	brpl	.-16     	; 0x58f4 <__addsf3x+0x6e>
    5904:	0e c0       	rjmp	.+28     	; 0x5922 <__addsf3x+0x9c>
    5906:	ba 0f       	add	r27, r26
    5908:	62 1f       	adc	r22, r18
    590a:	73 1f       	adc	r23, r19
    590c:	84 1f       	adc	r24, r20
    590e:	48 f4       	brcc	.+18     	; 0x5922 <__addsf3x+0x9c>
    5910:	87 95       	ror	r24
    5912:	77 95       	ror	r23
    5914:	67 95       	ror	r22
    5916:	b7 95       	ror	r27
    5918:	f7 95       	ror	r31
    591a:	9e 3f       	cpi	r25, 0xFE	; 254
    591c:	08 f0       	brcs	.+2      	; 0x5920 <__addsf3x+0x9a>
    591e:	b0 cf       	rjmp	.-160    	; 0x5880 <__addsf3+0x28>
    5920:	93 95       	inc	r25
    5922:	88 0f       	add	r24, r24
    5924:	08 f0       	brcs	.+2      	; 0x5928 <__addsf3x+0xa2>
    5926:	99 27       	eor	r25, r25
    5928:	ee 0f       	add	r30, r30
    592a:	97 95       	ror	r25
    592c:	87 95       	ror	r24
    592e:	08 95       	ret

00005930 <__divsf3>:
    5930:	0e 94 ac 2c 	call	0x5958	; 0x5958 <__divsf3x>
    5934:	0c 94 8d 2d 	jmp	0x5b1a	; 0x5b1a <__fp_round>
    5938:	0e 94 86 2d 	call	0x5b0c	; 0x5b0c <__fp_pscB>
    593c:	58 f0       	brcs	.+22     	; 0x5954 <__divsf3+0x24>
    593e:	0e 94 7f 2d 	call	0x5afe	; 0x5afe <__fp_pscA>
    5942:	40 f0       	brcs	.+16     	; 0x5954 <__divsf3+0x24>
    5944:	29 f4       	brne	.+10     	; 0x5950 <__divsf3+0x20>
    5946:	5f 3f       	cpi	r21, 0xFF	; 255
    5948:	29 f0       	breq	.+10     	; 0x5954 <__divsf3+0x24>
    594a:	0c 94 76 2d 	jmp	0x5aec	; 0x5aec <__fp_inf>
    594e:	51 11       	cpse	r21, r1
    5950:	0c 94 c1 2d 	jmp	0x5b82	; 0x5b82 <__fp_szero>
    5954:	0c 94 7c 2d 	jmp	0x5af8	; 0x5af8 <__fp_nan>

00005958 <__divsf3x>:
    5958:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <__fp_split3>
    595c:	68 f3       	brcs	.-38     	; 0x5938 <__divsf3+0x8>

0000595e <__divsf3_pse>:
    595e:	99 23       	and	r25, r25
    5960:	b1 f3       	breq	.-20     	; 0x594e <__divsf3+0x1e>
    5962:	55 23       	and	r21, r21
    5964:	91 f3       	breq	.-28     	; 0x594a <__divsf3+0x1a>
    5966:	95 1b       	sub	r25, r21
    5968:	55 0b       	sbc	r21, r21
    596a:	bb 27       	eor	r27, r27
    596c:	aa 27       	eor	r26, r26
    596e:	62 17       	cp	r22, r18
    5970:	73 07       	cpc	r23, r19
    5972:	84 07       	cpc	r24, r20
    5974:	38 f0       	brcs	.+14     	; 0x5984 <__divsf3_pse+0x26>
    5976:	9f 5f       	subi	r25, 0xFF	; 255
    5978:	5f 4f       	sbci	r21, 0xFF	; 255
    597a:	22 0f       	add	r18, r18
    597c:	33 1f       	adc	r19, r19
    597e:	44 1f       	adc	r20, r20
    5980:	aa 1f       	adc	r26, r26
    5982:	a9 f3       	breq	.-22     	; 0x596e <__divsf3_pse+0x10>
    5984:	35 d0       	rcall	.+106    	; 0x59f0 <__divsf3_pse+0x92>
    5986:	0e 2e       	mov	r0, r30
    5988:	3a f0       	brmi	.+14     	; 0x5998 <__divsf3_pse+0x3a>
    598a:	e0 e8       	ldi	r30, 0x80	; 128
    598c:	32 d0       	rcall	.+100    	; 0x59f2 <__divsf3_pse+0x94>
    598e:	91 50       	subi	r25, 0x01	; 1
    5990:	50 40       	sbci	r21, 0x00	; 0
    5992:	e6 95       	lsr	r30
    5994:	00 1c       	adc	r0, r0
    5996:	ca f7       	brpl	.-14     	; 0x598a <__divsf3_pse+0x2c>
    5998:	2b d0       	rcall	.+86     	; 0x59f0 <__divsf3_pse+0x92>
    599a:	fe 2f       	mov	r31, r30
    599c:	29 d0       	rcall	.+82     	; 0x59f0 <__divsf3_pse+0x92>
    599e:	66 0f       	add	r22, r22
    59a0:	77 1f       	adc	r23, r23
    59a2:	88 1f       	adc	r24, r24
    59a4:	bb 1f       	adc	r27, r27
    59a6:	26 17       	cp	r18, r22
    59a8:	37 07       	cpc	r19, r23
    59aa:	48 07       	cpc	r20, r24
    59ac:	ab 07       	cpc	r26, r27
    59ae:	b0 e8       	ldi	r27, 0x80	; 128
    59b0:	09 f0       	breq	.+2      	; 0x59b4 <__divsf3_pse+0x56>
    59b2:	bb 0b       	sbc	r27, r27
    59b4:	80 2d       	mov	r24, r0
    59b6:	bf 01       	movw	r22, r30
    59b8:	ff 27       	eor	r31, r31
    59ba:	93 58       	subi	r25, 0x83	; 131
    59bc:	5f 4f       	sbci	r21, 0xFF	; 255
    59be:	3a f0       	brmi	.+14     	; 0x59ce <__divsf3_pse+0x70>
    59c0:	9e 3f       	cpi	r25, 0xFE	; 254
    59c2:	51 05       	cpc	r21, r1
    59c4:	78 f0       	brcs	.+30     	; 0x59e4 <__divsf3_pse+0x86>
    59c6:	0c 94 76 2d 	jmp	0x5aec	; 0x5aec <__fp_inf>
    59ca:	0c 94 c1 2d 	jmp	0x5b82	; 0x5b82 <__fp_szero>
    59ce:	5f 3f       	cpi	r21, 0xFF	; 255
    59d0:	e4 f3       	brlt	.-8      	; 0x59ca <__divsf3_pse+0x6c>
    59d2:	98 3e       	cpi	r25, 0xE8	; 232
    59d4:	d4 f3       	brlt	.-12     	; 0x59ca <__divsf3_pse+0x6c>
    59d6:	86 95       	lsr	r24
    59d8:	77 95       	ror	r23
    59da:	67 95       	ror	r22
    59dc:	b7 95       	ror	r27
    59de:	f7 95       	ror	r31
    59e0:	9f 5f       	subi	r25, 0xFF	; 255
    59e2:	c9 f7       	brne	.-14     	; 0x59d6 <__divsf3_pse+0x78>
    59e4:	88 0f       	add	r24, r24
    59e6:	91 1d       	adc	r25, r1
    59e8:	96 95       	lsr	r25
    59ea:	87 95       	ror	r24
    59ec:	97 f9       	bld	r25, 7
    59ee:	08 95       	ret
    59f0:	e1 e0       	ldi	r30, 0x01	; 1
    59f2:	66 0f       	add	r22, r22
    59f4:	77 1f       	adc	r23, r23
    59f6:	88 1f       	adc	r24, r24
    59f8:	bb 1f       	adc	r27, r27
    59fa:	62 17       	cp	r22, r18
    59fc:	73 07       	cpc	r23, r19
    59fe:	84 07       	cpc	r24, r20
    5a00:	ba 07       	cpc	r27, r26
    5a02:	20 f0       	brcs	.+8      	; 0x5a0c <__divsf3_pse+0xae>
    5a04:	62 1b       	sub	r22, r18
    5a06:	73 0b       	sbc	r23, r19
    5a08:	84 0b       	sbc	r24, r20
    5a0a:	ba 0b       	sbc	r27, r26
    5a0c:	ee 1f       	adc	r30, r30
    5a0e:	88 f7       	brcc	.-30     	; 0x59f2 <__divsf3_pse+0x94>
    5a10:	e0 95       	com	r30
    5a12:	08 95       	ret

00005a14 <__fixunssfsi>:
    5a14:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__fp_splitA>
    5a18:	88 f0       	brcs	.+34     	; 0x5a3c <__fixunssfsi+0x28>
    5a1a:	9f 57       	subi	r25, 0x7F	; 127
    5a1c:	98 f0       	brcs	.+38     	; 0x5a44 <__fixunssfsi+0x30>
    5a1e:	b9 2f       	mov	r27, r25
    5a20:	99 27       	eor	r25, r25
    5a22:	b7 51       	subi	r27, 0x17	; 23
    5a24:	b0 f0       	brcs	.+44     	; 0x5a52 <__fixunssfsi+0x3e>
    5a26:	e1 f0       	breq	.+56     	; 0x5a60 <__fixunssfsi+0x4c>
    5a28:	66 0f       	add	r22, r22
    5a2a:	77 1f       	adc	r23, r23
    5a2c:	88 1f       	adc	r24, r24
    5a2e:	99 1f       	adc	r25, r25
    5a30:	1a f0       	brmi	.+6      	; 0x5a38 <__fixunssfsi+0x24>
    5a32:	ba 95       	dec	r27
    5a34:	c9 f7       	brne	.-14     	; 0x5a28 <__fixunssfsi+0x14>
    5a36:	14 c0       	rjmp	.+40     	; 0x5a60 <__fixunssfsi+0x4c>
    5a38:	b1 30       	cpi	r27, 0x01	; 1
    5a3a:	91 f0       	breq	.+36     	; 0x5a60 <__fixunssfsi+0x4c>
    5a3c:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <__fp_zero>
    5a40:	b1 e0       	ldi	r27, 0x01	; 1
    5a42:	08 95       	ret
    5a44:	0c 94 c0 2d 	jmp	0x5b80	; 0x5b80 <__fp_zero>
    5a48:	67 2f       	mov	r22, r23
    5a4a:	78 2f       	mov	r23, r24
    5a4c:	88 27       	eor	r24, r24
    5a4e:	b8 5f       	subi	r27, 0xF8	; 248
    5a50:	39 f0       	breq	.+14     	; 0x5a60 <__fixunssfsi+0x4c>
    5a52:	b9 3f       	cpi	r27, 0xF9	; 249
    5a54:	cc f3       	brlt	.-14     	; 0x5a48 <__fixunssfsi+0x34>
    5a56:	86 95       	lsr	r24
    5a58:	77 95       	ror	r23
    5a5a:	67 95       	ror	r22
    5a5c:	b3 95       	inc	r27
    5a5e:	d9 f7       	brne	.-10     	; 0x5a56 <__fixunssfsi+0x42>
    5a60:	3e f4       	brtc	.+14     	; 0x5a70 <__fixunssfsi+0x5c>
    5a62:	90 95       	com	r25
    5a64:	80 95       	com	r24
    5a66:	70 95       	com	r23
    5a68:	61 95       	neg	r22
    5a6a:	7f 4f       	sbci	r23, 0xFF	; 255
    5a6c:	8f 4f       	sbci	r24, 0xFF	; 255
    5a6e:	9f 4f       	sbci	r25, 0xFF	; 255
    5a70:	08 95       	ret

00005a72 <__floatunsisf>:
    5a72:	e8 94       	clt
    5a74:	09 c0       	rjmp	.+18     	; 0x5a88 <__floatsisf+0x12>

00005a76 <__floatsisf>:
    5a76:	97 fb       	bst	r25, 7
    5a78:	3e f4       	brtc	.+14     	; 0x5a88 <__floatsisf+0x12>
    5a7a:	90 95       	com	r25
    5a7c:	80 95       	com	r24
    5a7e:	70 95       	com	r23
    5a80:	61 95       	neg	r22
    5a82:	7f 4f       	sbci	r23, 0xFF	; 255
    5a84:	8f 4f       	sbci	r24, 0xFF	; 255
    5a86:	9f 4f       	sbci	r25, 0xFF	; 255
    5a88:	99 23       	and	r25, r25
    5a8a:	a9 f0       	breq	.+42     	; 0x5ab6 <__floatsisf+0x40>
    5a8c:	f9 2f       	mov	r31, r25
    5a8e:	96 e9       	ldi	r25, 0x96	; 150
    5a90:	bb 27       	eor	r27, r27
    5a92:	93 95       	inc	r25
    5a94:	f6 95       	lsr	r31
    5a96:	87 95       	ror	r24
    5a98:	77 95       	ror	r23
    5a9a:	67 95       	ror	r22
    5a9c:	b7 95       	ror	r27
    5a9e:	f1 11       	cpse	r31, r1
    5aa0:	f8 cf       	rjmp	.-16     	; 0x5a92 <__floatsisf+0x1c>
    5aa2:	fa f4       	brpl	.+62     	; 0x5ae2 <__floatsisf+0x6c>
    5aa4:	bb 0f       	add	r27, r27
    5aa6:	11 f4       	brne	.+4      	; 0x5aac <__floatsisf+0x36>
    5aa8:	60 ff       	sbrs	r22, 0
    5aaa:	1b c0       	rjmp	.+54     	; 0x5ae2 <__floatsisf+0x6c>
    5aac:	6f 5f       	subi	r22, 0xFF	; 255
    5aae:	7f 4f       	sbci	r23, 0xFF	; 255
    5ab0:	8f 4f       	sbci	r24, 0xFF	; 255
    5ab2:	9f 4f       	sbci	r25, 0xFF	; 255
    5ab4:	16 c0       	rjmp	.+44     	; 0x5ae2 <__floatsisf+0x6c>
    5ab6:	88 23       	and	r24, r24
    5ab8:	11 f0       	breq	.+4      	; 0x5abe <__floatsisf+0x48>
    5aba:	96 e9       	ldi	r25, 0x96	; 150
    5abc:	11 c0       	rjmp	.+34     	; 0x5ae0 <__floatsisf+0x6a>
    5abe:	77 23       	and	r23, r23
    5ac0:	21 f0       	breq	.+8      	; 0x5aca <__floatsisf+0x54>
    5ac2:	9e e8       	ldi	r25, 0x8E	; 142
    5ac4:	87 2f       	mov	r24, r23
    5ac6:	76 2f       	mov	r23, r22
    5ac8:	05 c0       	rjmp	.+10     	; 0x5ad4 <__floatsisf+0x5e>
    5aca:	66 23       	and	r22, r22
    5acc:	71 f0       	breq	.+28     	; 0x5aea <__floatsisf+0x74>
    5ace:	96 e8       	ldi	r25, 0x86	; 134
    5ad0:	86 2f       	mov	r24, r22
    5ad2:	70 e0       	ldi	r23, 0x00	; 0
    5ad4:	60 e0       	ldi	r22, 0x00	; 0
    5ad6:	2a f0       	brmi	.+10     	; 0x5ae2 <__floatsisf+0x6c>
    5ad8:	9a 95       	dec	r25
    5ada:	66 0f       	add	r22, r22
    5adc:	77 1f       	adc	r23, r23
    5ade:	88 1f       	adc	r24, r24
    5ae0:	da f7       	brpl	.-10     	; 0x5ad8 <__floatsisf+0x62>
    5ae2:	88 0f       	add	r24, r24
    5ae4:	96 95       	lsr	r25
    5ae6:	87 95       	ror	r24
    5ae8:	97 f9       	bld	r25, 7
    5aea:	08 95       	ret

00005aec <__fp_inf>:
    5aec:	97 f9       	bld	r25, 7
    5aee:	9f 67       	ori	r25, 0x7F	; 127
    5af0:	80 e8       	ldi	r24, 0x80	; 128
    5af2:	70 e0       	ldi	r23, 0x00	; 0
    5af4:	60 e0       	ldi	r22, 0x00	; 0
    5af6:	08 95       	ret

00005af8 <__fp_nan>:
    5af8:	9f ef       	ldi	r25, 0xFF	; 255
    5afa:	80 ec       	ldi	r24, 0xC0	; 192
    5afc:	08 95       	ret

00005afe <__fp_pscA>:
    5afe:	00 24       	eor	r0, r0
    5b00:	0a 94       	dec	r0
    5b02:	16 16       	cp	r1, r22
    5b04:	17 06       	cpc	r1, r23
    5b06:	18 06       	cpc	r1, r24
    5b08:	09 06       	cpc	r0, r25
    5b0a:	08 95       	ret

00005b0c <__fp_pscB>:
    5b0c:	00 24       	eor	r0, r0
    5b0e:	0a 94       	dec	r0
    5b10:	12 16       	cp	r1, r18
    5b12:	13 06       	cpc	r1, r19
    5b14:	14 06       	cpc	r1, r20
    5b16:	05 06       	cpc	r0, r21
    5b18:	08 95       	ret

00005b1a <__fp_round>:
    5b1a:	09 2e       	mov	r0, r25
    5b1c:	03 94       	inc	r0
    5b1e:	00 0c       	add	r0, r0
    5b20:	11 f4       	brne	.+4      	; 0x5b26 <__fp_round+0xc>
    5b22:	88 23       	and	r24, r24
    5b24:	52 f0       	brmi	.+20     	; 0x5b3a <__fp_round+0x20>
    5b26:	bb 0f       	add	r27, r27
    5b28:	40 f4       	brcc	.+16     	; 0x5b3a <__fp_round+0x20>
    5b2a:	bf 2b       	or	r27, r31
    5b2c:	11 f4       	brne	.+4      	; 0x5b32 <__fp_round+0x18>
    5b2e:	60 ff       	sbrs	r22, 0
    5b30:	04 c0       	rjmp	.+8      	; 0x5b3a <__fp_round+0x20>
    5b32:	6f 5f       	subi	r22, 0xFF	; 255
    5b34:	7f 4f       	sbci	r23, 0xFF	; 255
    5b36:	8f 4f       	sbci	r24, 0xFF	; 255
    5b38:	9f 4f       	sbci	r25, 0xFF	; 255
    5b3a:	08 95       	ret

00005b3c <__fp_split3>:
    5b3c:	57 fd       	sbrc	r21, 7
    5b3e:	90 58       	subi	r25, 0x80	; 128
    5b40:	44 0f       	add	r20, r20
    5b42:	55 1f       	adc	r21, r21
    5b44:	59 f0       	breq	.+22     	; 0x5b5c <__fp_splitA+0x10>
    5b46:	5f 3f       	cpi	r21, 0xFF	; 255
    5b48:	71 f0       	breq	.+28     	; 0x5b66 <__fp_splitA+0x1a>
    5b4a:	47 95       	ror	r20

00005b4c <__fp_splitA>:
    5b4c:	88 0f       	add	r24, r24
    5b4e:	97 fb       	bst	r25, 7
    5b50:	99 1f       	adc	r25, r25
    5b52:	61 f0       	breq	.+24     	; 0x5b6c <__fp_splitA+0x20>
    5b54:	9f 3f       	cpi	r25, 0xFF	; 255
    5b56:	79 f0       	breq	.+30     	; 0x5b76 <__fp_splitA+0x2a>
    5b58:	87 95       	ror	r24
    5b5a:	08 95       	ret
    5b5c:	12 16       	cp	r1, r18
    5b5e:	13 06       	cpc	r1, r19
    5b60:	14 06       	cpc	r1, r20
    5b62:	55 1f       	adc	r21, r21
    5b64:	f2 cf       	rjmp	.-28     	; 0x5b4a <__fp_split3+0xe>
    5b66:	46 95       	lsr	r20
    5b68:	f1 df       	rcall	.-30     	; 0x5b4c <__fp_splitA>
    5b6a:	08 c0       	rjmp	.+16     	; 0x5b7c <__fp_splitA+0x30>
    5b6c:	16 16       	cp	r1, r22
    5b6e:	17 06       	cpc	r1, r23
    5b70:	18 06       	cpc	r1, r24
    5b72:	99 1f       	adc	r25, r25
    5b74:	f1 cf       	rjmp	.-30     	; 0x5b58 <__fp_splitA+0xc>
    5b76:	86 95       	lsr	r24
    5b78:	71 05       	cpc	r23, r1
    5b7a:	61 05       	cpc	r22, r1
    5b7c:	08 94       	sec
    5b7e:	08 95       	ret

00005b80 <__fp_zero>:
    5b80:	e8 94       	clt

00005b82 <__fp_szero>:
    5b82:	bb 27       	eor	r27, r27
    5b84:	66 27       	eor	r22, r22
    5b86:	77 27       	eor	r23, r23
    5b88:	cb 01       	movw	r24, r22
    5b8a:	97 f9       	bld	r25, 7
    5b8c:	08 95       	ret

00005b8e <__udivmodhi4>:
    5b8e:	aa 1b       	sub	r26, r26
    5b90:	bb 1b       	sub	r27, r27
    5b92:	51 e1       	ldi	r21, 0x11	; 17
    5b94:	07 c0       	rjmp	.+14     	; 0x5ba4 <__udivmodhi4_ep>

00005b96 <__udivmodhi4_loop>:
    5b96:	aa 1f       	adc	r26, r26
    5b98:	bb 1f       	adc	r27, r27
    5b9a:	a6 17       	cp	r26, r22
    5b9c:	b7 07       	cpc	r27, r23
    5b9e:	10 f0       	brcs	.+4      	; 0x5ba4 <__udivmodhi4_ep>
    5ba0:	a6 1b       	sub	r26, r22
    5ba2:	b7 0b       	sbc	r27, r23

00005ba4 <__udivmodhi4_ep>:
    5ba4:	88 1f       	adc	r24, r24
    5ba6:	99 1f       	adc	r25, r25
    5ba8:	5a 95       	dec	r21
    5baa:	a9 f7       	brne	.-22     	; 0x5b96 <__udivmodhi4_loop>
    5bac:	80 95       	com	r24
    5bae:	90 95       	com	r25
    5bb0:	bc 01       	movw	r22, r24
    5bb2:	cd 01       	movw	r24, r26
    5bb4:	08 95       	ret

00005bb6 <__divmodhi4>:
    5bb6:	97 fb       	bst	r25, 7
    5bb8:	07 2e       	mov	r0, r23
    5bba:	16 f4       	brtc	.+4      	; 0x5bc0 <__divmodhi4+0xa>
    5bbc:	00 94       	com	r0
    5bbe:	07 d0       	rcall	.+14     	; 0x5bce <__divmodhi4_neg1>
    5bc0:	77 fd       	sbrc	r23, 7
    5bc2:	09 d0       	rcall	.+18     	; 0x5bd6 <__divmodhi4_neg2>
    5bc4:	0e 94 c7 2d 	call	0x5b8e	; 0x5b8e <__udivmodhi4>
    5bc8:	07 fc       	sbrc	r0, 7
    5bca:	05 d0       	rcall	.+10     	; 0x5bd6 <__divmodhi4_neg2>
    5bcc:	3e f4       	brtc	.+14     	; 0x5bdc <__divmodhi4_exit>

00005bce <__divmodhi4_neg1>:
    5bce:	90 95       	com	r25
    5bd0:	81 95       	neg	r24
    5bd2:	9f 4f       	sbci	r25, 0xFF	; 255
    5bd4:	08 95       	ret

00005bd6 <__divmodhi4_neg2>:
    5bd6:	70 95       	com	r23
    5bd8:	61 95       	neg	r22
    5bda:	7f 4f       	sbci	r23, 0xFF	; 255

00005bdc <__divmodhi4_exit>:
    5bdc:	08 95       	ret

00005bde <__udivmodsi4>:
    5bde:	a1 e2       	ldi	r26, 0x21	; 33
    5be0:	1a 2e       	mov	r1, r26
    5be2:	aa 1b       	sub	r26, r26
    5be4:	bb 1b       	sub	r27, r27
    5be6:	fd 01       	movw	r30, r26
    5be8:	0d c0       	rjmp	.+26     	; 0x5c04 <__udivmodsi4_ep>

00005bea <__udivmodsi4_loop>:
    5bea:	aa 1f       	adc	r26, r26
    5bec:	bb 1f       	adc	r27, r27
    5bee:	ee 1f       	adc	r30, r30
    5bf0:	ff 1f       	adc	r31, r31
    5bf2:	a2 17       	cp	r26, r18
    5bf4:	b3 07       	cpc	r27, r19
    5bf6:	e4 07       	cpc	r30, r20
    5bf8:	f5 07       	cpc	r31, r21
    5bfa:	20 f0       	brcs	.+8      	; 0x5c04 <__udivmodsi4_ep>
    5bfc:	a2 1b       	sub	r26, r18
    5bfe:	b3 0b       	sbc	r27, r19
    5c00:	e4 0b       	sbc	r30, r20
    5c02:	f5 0b       	sbc	r31, r21

00005c04 <__udivmodsi4_ep>:
    5c04:	66 1f       	adc	r22, r22
    5c06:	77 1f       	adc	r23, r23
    5c08:	88 1f       	adc	r24, r24
    5c0a:	99 1f       	adc	r25, r25
    5c0c:	1a 94       	dec	r1
    5c0e:	69 f7       	brne	.-38     	; 0x5bea <__udivmodsi4_loop>
    5c10:	60 95       	com	r22
    5c12:	70 95       	com	r23
    5c14:	80 95       	com	r24
    5c16:	90 95       	com	r25
    5c18:	9b 01       	movw	r18, r22
    5c1a:	ac 01       	movw	r20, r24
    5c1c:	bd 01       	movw	r22, r26
    5c1e:	cf 01       	movw	r24, r30
    5c20:	08 95       	ret

00005c22 <__tablejump2__>:
    5c22:	ee 0f       	add	r30, r30
    5c24:	ff 1f       	adc	r31, r31
    5c26:	00 24       	eor	r0, r0
    5c28:	00 1c       	adc	r0, r0
    5c2a:	0b be       	out	0x3b, r0	; 59
    5c2c:	07 90       	elpm	r0, Z+
    5c2e:	f6 91       	elpm	r31, Z
    5c30:	e0 2d       	mov	r30, r0
    5c32:	09 94       	ijmp

00005c34 <__ashrdi3>:
    5c34:	97 fb       	bst	r25, 7
    5c36:	10 f8       	bld	r1, 0

00005c38 <__lshrdi3>:
    5c38:	16 94       	lsr	r1
    5c3a:	00 08       	sbc	r0, r0
    5c3c:	0f 93       	push	r16
    5c3e:	08 30       	cpi	r16, 0x08	; 8
    5c40:	98 f0       	brcs	.+38     	; 0x5c68 <__lshrdi3+0x30>
    5c42:	08 50       	subi	r16, 0x08	; 8
    5c44:	23 2f       	mov	r18, r19
    5c46:	34 2f       	mov	r19, r20
    5c48:	45 2f       	mov	r20, r21
    5c4a:	56 2f       	mov	r21, r22
    5c4c:	67 2f       	mov	r22, r23
    5c4e:	78 2f       	mov	r23, r24
    5c50:	89 2f       	mov	r24, r25
    5c52:	90 2d       	mov	r25, r0
    5c54:	f4 cf       	rjmp	.-24     	; 0x5c3e <__lshrdi3+0x6>
    5c56:	05 94       	asr	r0
    5c58:	97 95       	ror	r25
    5c5a:	87 95       	ror	r24
    5c5c:	77 95       	ror	r23
    5c5e:	67 95       	ror	r22
    5c60:	57 95       	ror	r21
    5c62:	47 95       	ror	r20
    5c64:	37 95       	ror	r19
    5c66:	27 95       	ror	r18
    5c68:	0a 95       	dec	r16
    5c6a:	aa f7       	brpl	.-22     	; 0x5c56 <__lshrdi3+0x1e>
    5c6c:	0f 91       	pop	r16
    5c6e:	08 95       	ret

00005c70 <malloc>:
    5c70:	cf 93       	push	r28
    5c72:	df 93       	push	r29
    5c74:	82 30       	cpi	r24, 0x02	; 2
    5c76:	91 05       	cpc	r25, r1
    5c78:	10 f4       	brcc	.+4      	; 0x5c7e <malloc+0xe>
    5c7a:	82 e0       	ldi	r24, 0x02	; 2
    5c7c:	90 e0       	ldi	r25, 0x00	; 0
    5c7e:	e0 91 c9 0c 	lds	r30, 0x0CC9	; 0x800cc9 <__flp>
    5c82:	f0 91 ca 0c 	lds	r31, 0x0CCA	; 0x800cca <__flp+0x1>
    5c86:	20 e0       	ldi	r18, 0x00	; 0
    5c88:	30 e0       	ldi	r19, 0x00	; 0
    5c8a:	c0 e0       	ldi	r28, 0x00	; 0
    5c8c:	d0 e0       	ldi	r29, 0x00	; 0
    5c8e:	30 97       	sbiw	r30, 0x00	; 0
    5c90:	11 f1       	breq	.+68     	; 0x5cd6 <malloc+0x66>
    5c92:	40 81       	ld	r20, Z
    5c94:	51 81       	ldd	r21, Z+1	; 0x01
    5c96:	48 17       	cp	r20, r24
    5c98:	59 07       	cpc	r21, r25
    5c9a:	c0 f0       	brcs	.+48     	; 0x5ccc <malloc+0x5c>
    5c9c:	48 17       	cp	r20, r24
    5c9e:	59 07       	cpc	r21, r25
    5ca0:	61 f4       	brne	.+24     	; 0x5cba <malloc+0x4a>
    5ca2:	82 81       	ldd	r24, Z+2	; 0x02
    5ca4:	93 81       	ldd	r25, Z+3	; 0x03
    5ca6:	20 97       	sbiw	r28, 0x00	; 0
    5ca8:	19 f0       	breq	.+6      	; 0x5cb0 <malloc+0x40>
    5caa:	9b 83       	std	Y+3, r25	; 0x03
    5cac:	8a 83       	std	Y+2, r24	; 0x02
    5cae:	2b c0       	rjmp	.+86     	; 0x5d06 <malloc+0x96>
    5cb0:	90 93 ca 0c 	sts	0x0CCA, r25	; 0x800cca <__flp+0x1>
    5cb4:	80 93 c9 0c 	sts	0x0CC9, r24	; 0x800cc9 <__flp>
    5cb8:	26 c0       	rjmp	.+76     	; 0x5d06 <malloc+0x96>
    5cba:	21 15       	cp	r18, r1
    5cbc:	31 05       	cpc	r19, r1
    5cbe:	19 f0       	breq	.+6      	; 0x5cc6 <malloc+0x56>
    5cc0:	42 17       	cp	r20, r18
    5cc2:	53 07       	cpc	r21, r19
    5cc4:	18 f4       	brcc	.+6      	; 0x5ccc <malloc+0x5c>
    5cc6:	9a 01       	movw	r18, r20
    5cc8:	be 01       	movw	r22, r28
    5cca:	df 01       	movw	r26, r30
    5ccc:	ef 01       	movw	r28, r30
    5cce:	02 80       	ldd	r0, Z+2	; 0x02
    5cd0:	f3 81       	ldd	r31, Z+3	; 0x03
    5cd2:	e0 2d       	mov	r30, r0
    5cd4:	dc cf       	rjmp	.-72     	; 0x5c8e <malloc+0x1e>
    5cd6:	21 15       	cp	r18, r1
    5cd8:	31 05       	cpc	r19, r1
    5cda:	09 f1       	breq	.+66     	; 0x5d1e <malloc+0xae>
    5cdc:	28 1b       	sub	r18, r24
    5cde:	39 0b       	sbc	r19, r25
    5ce0:	24 30       	cpi	r18, 0x04	; 4
    5ce2:	31 05       	cpc	r19, r1
    5ce4:	90 f4       	brcc	.+36     	; 0x5d0a <malloc+0x9a>
    5ce6:	12 96       	adiw	r26, 0x02	; 2
    5ce8:	8d 91       	ld	r24, X+
    5cea:	9c 91       	ld	r25, X
    5cec:	13 97       	sbiw	r26, 0x03	; 3
    5cee:	61 15       	cp	r22, r1
    5cf0:	71 05       	cpc	r23, r1
    5cf2:	21 f0       	breq	.+8      	; 0x5cfc <malloc+0x8c>
    5cf4:	fb 01       	movw	r30, r22
    5cf6:	93 83       	std	Z+3, r25	; 0x03
    5cf8:	82 83       	std	Z+2, r24	; 0x02
    5cfa:	04 c0       	rjmp	.+8      	; 0x5d04 <malloc+0x94>
    5cfc:	90 93 ca 0c 	sts	0x0CCA, r25	; 0x800cca <__flp+0x1>
    5d00:	80 93 c9 0c 	sts	0x0CC9, r24	; 0x800cc9 <__flp>
    5d04:	fd 01       	movw	r30, r26
    5d06:	32 96       	adiw	r30, 0x02	; 2
    5d08:	44 c0       	rjmp	.+136    	; 0x5d92 <malloc+0x122>
    5d0a:	fd 01       	movw	r30, r26
    5d0c:	e2 0f       	add	r30, r18
    5d0e:	f3 1f       	adc	r31, r19
    5d10:	81 93       	st	Z+, r24
    5d12:	91 93       	st	Z+, r25
    5d14:	22 50       	subi	r18, 0x02	; 2
    5d16:	31 09       	sbc	r19, r1
    5d18:	2d 93       	st	X+, r18
    5d1a:	3c 93       	st	X, r19
    5d1c:	3a c0       	rjmp	.+116    	; 0x5d92 <malloc+0x122>
    5d1e:	20 91 c7 0c 	lds	r18, 0x0CC7	; 0x800cc7 <__brkval>
    5d22:	30 91 c8 0c 	lds	r19, 0x0CC8	; 0x800cc8 <__brkval+0x1>
    5d26:	23 2b       	or	r18, r19
    5d28:	41 f4       	brne	.+16     	; 0x5d3a <malloc+0xca>
    5d2a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5d2e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5d32:	30 93 c8 0c 	sts	0x0CC8, r19	; 0x800cc8 <__brkval+0x1>
    5d36:	20 93 c7 0c 	sts	0x0CC7, r18	; 0x800cc7 <__brkval>
    5d3a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    5d3e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    5d42:	21 15       	cp	r18, r1
    5d44:	31 05       	cpc	r19, r1
    5d46:	41 f4       	brne	.+16     	; 0x5d58 <malloc+0xe8>
    5d48:	2d b7       	in	r18, 0x3d	; 61
    5d4a:	3e b7       	in	r19, 0x3e	; 62
    5d4c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5d50:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5d54:	24 1b       	sub	r18, r20
    5d56:	35 0b       	sbc	r19, r21
    5d58:	e0 91 c7 0c 	lds	r30, 0x0CC7	; 0x800cc7 <__brkval>
    5d5c:	f0 91 c8 0c 	lds	r31, 0x0CC8	; 0x800cc8 <__brkval+0x1>
    5d60:	e2 17       	cp	r30, r18
    5d62:	f3 07       	cpc	r31, r19
    5d64:	a0 f4       	brcc	.+40     	; 0x5d8e <malloc+0x11e>
    5d66:	2e 1b       	sub	r18, r30
    5d68:	3f 0b       	sbc	r19, r31
    5d6a:	28 17       	cp	r18, r24
    5d6c:	39 07       	cpc	r19, r25
    5d6e:	78 f0       	brcs	.+30     	; 0x5d8e <malloc+0x11e>
    5d70:	ac 01       	movw	r20, r24
    5d72:	4e 5f       	subi	r20, 0xFE	; 254
    5d74:	5f 4f       	sbci	r21, 0xFF	; 255
    5d76:	24 17       	cp	r18, r20
    5d78:	35 07       	cpc	r19, r21
    5d7a:	48 f0       	brcs	.+18     	; 0x5d8e <malloc+0x11e>
    5d7c:	4e 0f       	add	r20, r30
    5d7e:	5f 1f       	adc	r21, r31
    5d80:	50 93 c8 0c 	sts	0x0CC8, r21	; 0x800cc8 <__brkval+0x1>
    5d84:	40 93 c7 0c 	sts	0x0CC7, r20	; 0x800cc7 <__brkval>
    5d88:	81 93       	st	Z+, r24
    5d8a:	91 93       	st	Z+, r25
    5d8c:	02 c0       	rjmp	.+4      	; 0x5d92 <malloc+0x122>
    5d8e:	e0 e0       	ldi	r30, 0x00	; 0
    5d90:	f0 e0       	ldi	r31, 0x00	; 0
    5d92:	cf 01       	movw	r24, r30
    5d94:	df 91       	pop	r29
    5d96:	cf 91       	pop	r28
    5d98:	08 95       	ret

00005d9a <free>:
    5d9a:	0f 93       	push	r16
    5d9c:	1f 93       	push	r17
    5d9e:	cf 93       	push	r28
    5da0:	df 93       	push	r29
    5da2:	00 97       	sbiw	r24, 0x00	; 0
    5da4:	09 f4       	brne	.+2      	; 0x5da8 <free+0xe>
    5da6:	8c c0       	rjmp	.+280    	; 0x5ec0 <free+0x126>
    5da8:	fc 01       	movw	r30, r24
    5daa:	32 97       	sbiw	r30, 0x02	; 2
    5dac:	13 82       	std	Z+3, r1	; 0x03
    5dae:	12 82       	std	Z+2, r1	; 0x02
    5db0:	00 91 c9 0c 	lds	r16, 0x0CC9	; 0x800cc9 <__flp>
    5db4:	10 91 ca 0c 	lds	r17, 0x0CCA	; 0x800cca <__flp+0x1>
    5db8:	01 15       	cp	r16, r1
    5dba:	11 05       	cpc	r17, r1
    5dbc:	81 f4       	brne	.+32     	; 0x5dde <free+0x44>
    5dbe:	20 81       	ld	r18, Z
    5dc0:	31 81       	ldd	r19, Z+1	; 0x01
    5dc2:	82 0f       	add	r24, r18
    5dc4:	93 1f       	adc	r25, r19
    5dc6:	20 91 c7 0c 	lds	r18, 0x0CC7	; 0x800cc7 <__brkval>
    5dca:	30 91 c8 0c 	lds	r19, 0x0CC8	; 0x800cc8 <__brkval+0x1>
    5dce:	28 17       	cp	r18, r24
    5dd0:	39 07       	cpc	r19, r25
    5dd2:	79 f5       	brne	.+94     	; 0x5e32 <free+0x98>
    5dd4:	f0 93 c8 0c 	sts	0x0CC8, r31	; 0x800cc8 <__brkval+0x1>
    5dd8:	e0 93 c7 0c 	sts	0x0CC7, r30	; 0x800cc7 <__brkval>
    5ddc:	71 c0       	rjmp	.+226    	; 0x5ec0 <free+0x126>
    5dde:	d8 01       	movw	r26, r16
    5de0:	40 e0       	ldi	r20, 0x00	; 0
    5de2:	50 e0       	ldi	r21, 0x00	; 0
    5de4:	ae 17       	cp	r26, r30
    5de6:	bf 07       	cpc	r27, r31
    5de8:	50 f4       	brcc	.+20     	; 0x5dfe <free+0x64>
    5dea:	12 96       	adiw	r26, 0x02	; 2
    5dec:	2d 91       	ld	r18, X+
    5dee:	3c 91       	ld	r19, X
    5df0:	13 97       	sbiw	r26, 0x03	; 3
    5df2:	ad 01       	movw	r20, r26
    5df4:	21 15       	cp	r18, r1
    5df6:	31 05       	cpc	r19, r1
    5df8:	09 f1       	breq	.+66     	; 0x5e3c <free+0xa2>
    5dfa:	d9 01       	movw	r26, r18
    5dfc:	f3 cf       	rjmp	.-26     	; 0x5de4 <free+0x4a>
    5dfe:	9d 01       	movw	r18, r26
    5e00:	da 01       	movw	r26, r20
    5e02:	33 83       	std	Z+3, r19	; 0x03
    5e04:	22 83       	std	Z+2, r18	; 0x02
    5e06:	60 81       	ld	r22, Z
    5e08:	71 81       	ldd	r23, Z+1	; 0x01
    5e0a:	86 0f       	add	r24, r22
    5e0c:	97 1f       	adc	r25, r23
    5e0e:	82 17       	cp	r24, r18
    5e10:	93 07       	cpc	r25, r19
    5e12:	69 f4       	brne	.+26     	; 0x5e2e <free+0x94>
    5e14:	ec 01       	movw	r28, r24
    5e16:	28 81       	ld	r18, Y
    5e18:	39 81       	ldd	r19, Y+1	; 0x01
    5e1a:	26 0f       	add	r18, r22
    5e1c:	37 1f       	adc	r19, r23
    5e1e:	2e 5f       	subi	r18, 0xFE	; 254
    5e20:	3f 4f       	sbci	r19, 0xFF	; 255
    5e22:	31 83       	std	Z+1, r19	; 0x01
    5e24:	20 83       	st	Z, r18
    5e26:	8a 81       	ldd	r24, Y+2	; 0x02
    5e28:	9b 81       	ldd	r25, Y+3	; 0x03
    5e2a:	93 83       	std	Z+3, r25	; 0x03
    5e2c:	82 83       	std	Z+2, r24	; 0x02
    5e2e:	45 2b       	or	r20, r21
    5e30:	29 f4       	brne	.+10     	; 0x5e3c <free+0xa2>
    5e32:	f0 93 ca 0c 	sts	0x0CCA, r31	; 0x800cca <__flp+0x1>
    5e36:	e0 93 c9 0c 	sts	0x0CC9, r30	; 0x800cc9 <__flp>
    5e3a:	42 c0       	rjmp	.+132    	; 0x5ec0 <free+0x126>
    5e3c:	13 96       	adiw	r26, 0x03	; 3
    5e3e:	fc 93       	st	X, r31
    5e40:	ee 93       	st	-X, r30
    5e42:	12 97       	sbiw	r26, 0x02	; 2
    5e44:	ed 01       	movw	r28, r26
    5e46:	49 91       	ld	r20, Y+
    5e48:	59 91       	ld	r21, Y+
    5e4a:	9e 01       	movw	r18, r28
    5e4c:	24 0f       	add	r18, r20
    5e4e:	35 1f       	adc	r19, r21
    5e50:	e2 17       	cp	r30, r18
    5e52:	f3 07       	cpc	r31, r19
    5e54:	71 f4       	brne	.+28     	; 0x5e72 <free+0xd8>
    5e56:	80 81       	ld	r24, Z
    5e58:	91 81       	ldd	r25, Z+1	; 0x01
    5e5a:	84 0f       	add	r24, r20
    5e5c:	95 1f       	adc	r25, r21
    5e5e:	02 96       	adiw	r24, 0x02	; 2
    5e60:	11 96       	adiw	r26, 0x01	; 1
    5e62:	9c 93       	st	X, r25
    5e64:	8e 93       	st	-X, r24
    5e66:	82 81       	ldd	r24, Z+2	; 0x02
    5e68:	93 81       	ldd	r25, Z+3	; 0x03
    5e6a:	13 96       	adiw	r26, 0x03	; 3
    5e6c:	9c 93       	st	X, r25
    5e6e:	8e 93       	st	-X, r24
    5e70:	12 97       	sbiw	r26, 0x02	; 2
    5e72:	e0 e0       	ldi	r30, 0x00	; 0
    5e74:	f0 e0       	ldi	r31, 0x00	; 0
    5e76:	d8 01       	movw	r26, r16
    5e78:	12 96       	adiw	r26, 0x02	; 2
    5e7a:	8d 91       	ld	r24, X+
    5e7c:	9c 91       	ld	r25, X
    5e7e:	13 97       	sbiw	r26, 0x03	; 3
    5e80:	00 97       	sbiw	r24, 0x00	; 0
    5e82:	19 f0       	breq	.+6      	; 0x5e8a <free+0xf0>
    5e84:	f8 01       	movw	r30, r16
    5e86:	8c 01       	movw	r16, r24
    5e88:	f6 cf       	rjmp	.-20     	; 0x5e76 <free+0xdc>
    5e8a:	8d 91       	ld	r24, X+
    5e8c:	9c 91       	ld	r25, X
    5e8e:	98 01       	movw	r18, r16
    5e90:	2e 5f       	subi	r18, 0xFE	; 254
    5e92:	3f 4f       	sbci	r19, 0xFF	; 255
    5e94:	82 0f       	add	r24, r18
    5e96:	93 1f       	adc	r25, r19
    5e98:	20 91 c7 0c 	lds	r18, 0x0CC7	; 0x800cc7 <__brkval>
    5e9c:	30 91 c8 0c 	lds	r19, 0x0CC8	; 0x800cc8 <__brkval+0x1>
    5ea0:	28 17       	cp	r18, r24
    5ea2:	39 07       	cpc	r19, r25
    5ea4:	69 f4       	brne	.+26     	; 0x5ec0 <free+0x126>
    5ea6:	30 97       	sbiw	r30, 0x00	; 0
    5ea8:	29 f4       	brne	.+10     	; 0x5eb4 <free+0x11a>
    5eaa:	10 92 ca 0c 	sts	0x0CCA, r1	; 0x800cca <__flp+0x1>
    5eae:	10 92 c9 0c 	sts	0x0CC9, r1	; 0x800cc9 <__flp>
    5eb2:	02 c0       	rjmp	.+4      	; 0x5eb8 <free+0x11e>
    5eb4:	13 82       	std	Z+3, r1	; 0x03
    5eb6:	12 82       	std	Z+2, r1	; 0x02
    5eb8:	10 93 c8 0c 	sts	0x0CC8, r17	; 0x800cc8 <__brkval+0x1>
    5ebc:	00 93 c7 0c 	sts	0x0CC7, r16	; 0x800cc7 <__brkval>
    5ec0:	df 91       	pop	r29
    5ec2:	cf 91       	pop	r28
    5ec4:	1f 91       	pop	r17
    5ec6:	0f 91       	pop	r16
    5ec8:	08 95       	ret

00005eca <do_rand>:
    5eca:	8f 92       	push	r8
    5ecc:	9f 92       	push	r9
    5ece:	af 92       	push	r10
    5ed0:	bf 92       	push	r11
    5ed2:	cf 92       	push	r12
    5ed4:	df 92       	push	r13
    5ed6:	ef 92       	push	r14
    5ed8:	ff 92       	push	r15
    5eda:	cf 93       	push	r28
    5edc:	df 93       	push	r29
    5ede:	ec 01       	movw	r28, r24
    5ee0:	68 81       	ld	r22, Y
    5ee2:	79 81       	ldd	r23, Y+1	; 0x01
    5ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    5ee6:	9b 81       	ldd	r25, Y+3	; 0x03
    5ee8:	61 15       	cp	r22, r1
    5eea:	71 05       	cpc	r23, r1
    5eec:	81 05       	cpc	r24, r1
    5eee:	91 05       	cpc	r25, r1
    5ef0:	21 f4       	brne	.+8      	; 0x5efa <do_rand+0x30>
    5ef2:	64 e2       	ldi	r22, 0x24	; 36
    5ef4:	79 ed       	ldi	r23, 0xD9	; 217
    5ef6:	8b e5       	ldi	r24, 0x5B	; 91
    5ef8:	97 e0       	ldi	r25, 0x07	; 7
    5efa:	2d e1       	ldi	r18, 0x1D	; 29
    5efc:	33 ef       	ldi	r19, 0xF3	; 243
    5efe:	41 e0       	ldi	r20, 0x01	; 1
    5f00:	50 e0       	ldi	r21, 0x00	; 0
    5f02:	0e 94 d4 35 	call	0x6ba8	; 0x6ba8 <__divmodsi4>
    5f06:	49 01       	movw	r8, r18
    5f08:	5a 01       	movw	r10, r20
    5f0a:	9b 01       	movw	r18, r22
    5f0c:	ac 01       	movw	r20, r24
    5f0e:	a7 ea       	ldi	r26, 0xA7	; 167
    5f10:	b1 e4       	ldi	r27, 0x41	; 65
    5f12:	0e 94 f3 35 	call	0x6be6	; 0x6be6 <__muluhisi3>
    5f16:	6b 01       	movw	r12, r22
    5f18:	7c 01       	movw	r14, r24
    5f1a:	ac ee       	ldi	r26, 0xEC	; 236
    5f1c:	b4 ef       	ldi	r27, 0xF4	; 244
    5f1e:	a5 01       	movw	r20, r10
    5f20:	94 01       	movw	r18, r8
    5f22:	0e 94 01 36 	call	0x6c02	; 0x6c02 <__mulohisi3>
    5f26:	dc 01       	movw	r26, r24
    5f28:	cb 01       	movw	r24, r22
    5f2a:	8c 0d       	add	r24, r12
    5f2c:	9d 1d       	adc	r25, r13
    5f2e:	ae 1d       	adc	r26, r14
    5f30:	bf 1d       	adc	r27, r15
    5f32:	b7 ff       	sbrs	r27, 7
    5f34:	03 c0       	rjmp	.+6      	; 0x5f3c <do_rand+0x72>
    5f36:	01 97       	sbiw	r24, 0x01	; 1
    5f38:	a1 09       	sbc	r26, r1
    5f3a:	b0 48       	sbci	r27, 0x80	; 128
    5f3c:	88 83       	st	Y, r24
    5f3e:	99 83       	std	Y+1, r25	; 0x01
    5f40:	aa 83       	std	Y+2, r26	; 0x02
    5f42:	bb 83       	std	Y+3, r27	; 0x03
    5f44:	9f 77       	andi	r25, 0x7F	; 127
    5f46:	df 91       	pop	r29
    5f48:	cf 91       	pop	r28
    5f4a:	ff 90       	pop	r15
    5f4c:	ef 90       	pop	r14
    5f4e:	df 90       	pop	r13
    5f50:	cf 90       	pop	r12
    5f52:	bf 90       	pop	r11
    5f54:	af 90       	pop	r10
    5f56:	9f 90       	pop	r9
    5f58:	8f 90       	pop	r8
    5f5a:	08 95       	ret

00005f5c <rand_r>:
    5f5c:	0c 94 65 2f 	jmp	0x5eca	; 0x5eca <do_rand>

00005f60 <rand>:
    5f60:	86 e0       	ldi	r24, 0x06	; 6
    5f62:	92 e0       	ldi	r25, 0x02	; 2
    5f64:	0c 94 65 2f 	jmp	0x5eca	; 0x5eca <do_rand>

00005f68 <srand>:
    5f68:	a0 e0       	ldi	r26, 0x00	; 0
    5f6a:	b0 e0       	ldi	r27, 0x00	; 0
    5f6c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <next>
    5f70:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <next+0x1>
    5f74:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <next+0x2>
    5f78:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <next+0x3>
    5f7c:	08 95       	ret

00005f7e <strtoul>:
    5f7e:	2f 92       	push	r2
    5f80:	3f 92       	push	r3
    5f82:	4f 92       	push	r4
    5f84:	5f 92       	push	r5
    5f86:	6f 92       	push	r6
    5f88:	7f 92       	push	r7
    5f8a:	8f 92       	push	r8
    5f8c:	9f 92       	push	r9
    5f8e:	af 92       	push	r10
    5f90:	bf 92       	push	r11
    5f92:	cf 92       	push	r12
    5f94:	df 92       	push	r13
    5f96:	ef 92       	push	r14
    5f98:	ff 92       	push	r15
    5f9a:	0f 93       	push	r16
    5f9c:	1f 93       	push	r17
    5f9e:	cf 93       	push	r28
    5fa0:	df 93       	push	r29
    5fa2:	00 d0       	rcall	.+0      	; 0x5fa4 <strtoul+0x26>
    5fa4:	00 d0       	rcall	.+0      	; 0x5fa6 <strtoul+0x28>
    5fa6:	00 d0       	rcall	.+0      	; 0x5fa8 <strtoul+0x2a>
    5fa8:	cd b7       	in	r28, 0x3d	; 61
    5faa:	de b7       	in	r29, 0x3e	; 62
    5fac:	5c 01       	movw	r10, r24
    5fae:	6b 01       	movw	r12, r22
    5fb0:	7a 01       	movw	r14, r20
    5fb2:	61 15       	cp	r22, r1
    5fb4:	71 05       	cpc	r23, r1
    5fb6:	19 f0       	breq	.+6      	; 0x5fbe <strtoul+0x40>
    5fb8:	db 01       	movw	r26, r22
    5fba:	8d 93       	st	X+, r24
    5fbc:	9c 93       	st	X, r25
    5fbe:	e1 14       	cp	r14, r1
    5fc0:	f1 04       	cpc	r15, r1
    5fc2:	29 f0       	breq	.+10     	; 0x5fce <strtoul+0x50>
    5fc4:	c7 01       	movw	r24, r14
    5fc6:	02 97       	sbiw	r24, 0x02	; 2
    5fc8:	83 97       	sbiw	r24, 0x23	; 35
    5fca:	08 f0       	brcs	.+2      	; 0x5fce <strtoul+0x50>
    5fcc:	dc c0       	rjmp	.+440    	; 0x6186 <strtoul+0x208>
    5fce:	35 01       	movw	r6, r10
    5fd0:	bf ef       	ldi	r27, 0xFF	; 255
    5fd2:	6b 1a       	sub	r6, r27
    5fd4:	7b 0a       	sbc	r7, r27
    5fd6:	f5 01       	movw	r30, r10
    5fd8:	10 81       	ld	r17, Z
    5fda:	81 2f       	mov	r24, r17
    5fdc:	90 e0       	ldi	r25, 0x00	; 0
    5fde:	0e 94 f1 31 	call	0x63e2	; 0x63e2 <isspace>
    5fe2:	89 2b       	or	r24, r25
    5fe4:	11 f0       	breq	.+4      	; 0x5fea <strtoul+0x6c>
    5fe6:	53 01       	movw	r10, r6
    5fe8:	f2 cf       	rjmp	.-28     	; 0x5fce <strtoul+0x50>
    5fea:	1d 32       	cpi	r17, 0x2D	; 45
    5fec:	49 f4       	brne	.+18     	; 0x6000 <strtoul+0x82>
    5fee:	35 01       	movw	r6, r10
    5ff0:	f2 e0       	ldi	r31, 0x02	; 2
    5ff2:	6f 0e       	add	r6, r31
    5ff4:	71 1c       	adc	r7, r1
    5ff6:	d5 01       	movw	r26, r10
    5ff8:	11 96       	adiw	r26, 0x01	; 1
    5ffa:	1c 91       	ld	r17, X
    5ffc:	01 e0       	ldi	r16, 0x01	; 1
    5ffe:	09 c0       	rjmp	.+18     	; 0x6012 <strtoul+0x94>
    6000:	1b 32       	cpi	r17, 0x2B	; 43
    6002:	31 f4       	brne	.+12     	; 0x6010 <strtoul+0x92>
    6004:	35 01       	movw	r6, r10
    6006:	b2 e0       	ldi	r27, 0x02	; 2
    6008:	6b 0e       	add	r6, r27
    600a:	71 1c       	adc	r7, r1
    600c:	f5 01       	movw	r30, r10
    600e:	11 81       	ldd	r17, Z+1	; 0x01
    6010:	00 e0       	ldi	r16, 0x00	; 0
    6012:	e1 14       	cp	r14, r1
    6014:	f1 04       	cpc	r15, r1
    6016:	09 f4       	brne	.+2      	; 0x601a <strtoul+0x9c>
    6018:	c4 c0       	rjmp	.+392    	; 0x61a2 <strtoul+0x224>
    601a:	f0 e1       	ldi	r31, 0x10	; 16
    601c:	ef 16       	cp	r14, r31
    601e:	f1 04       	cpc	r15, r1
    6020:	89 f4       	brne	.+34     	; 0x6044 <strtoul+0xc6>
    6022:	10 33       	cpi	r17, 0x30	; 48
    6024:	99 f5       	brne	.+102    	; 0x608c <strtoul+0x10e>
    6026:	d3 01       	movw	r26, r6
    6028:	8c 91       	ld	r24, X
    602a:	8f 7d       	andi	r24, 0xDF	; 223
    602c:	88 35       	cpi	r24, 0x58	; 88
    602e:	09 f0       	breq	.+2      	; 0x6032 <strtoul+0xb4>
    6030:	b2 c0       	rjmp	.+356    	; 0x6196 <strtoul+0x218>
    6032:	11 96       	adiw	r26, 0x01	; 1
    6034:	1c 91       	ld	r17, X
    6036:	b2 e0       	ldi	r27, 0x02	; 2
    6038:	6b 0e       	add	r6, r27
    603a:	71 1c       	adc	r7, r1
    603c:	02 60       	ori	r16, 0x02	; 2
    603e:	50 e1       	ldi	r21, 0x10	; 16
    6040:	e5 2e       	mov	r14, r21
    6042:	f1 2c       	mov	r15, r1
    6044:	ea e0       	ldi	r30, 0x0A	; 10
    6046:	ee 16       	cp	r14, r30
    6048:	f1 04       	cpc	r15, r1
    604a:	09 f4       	brne	.+2      	; 0x604e <strtoul+0xd0>
    604c:	b0 c0       	rjmp	.+352    	; 0x61ae <strtoul+0x230>
    604e:	f0 e1       	ldi	r31, 0x10	; 16
    6050:	ef 16       	cp	r14, r31
    6052:	f1 04       	cpc	r15, r1
    6054:	d9 f0       	breq	.+54     	; 0x608c <strtoul+0x10e>
    6056:	28 e0       	ldi	r18, 0x08	; 8
    6058:	e2 16       	cp	r14, r18
    605a:	f1 04       	cpc	r15, r1
    605c:	51 f4       	brne	.+20     	; 0x6072 <strtoul+0xf4>
    605e:	38 e0       	ldi	r19, 0x08	; 8
    6060:	e3 2e       	mov	r14, r19
    6062:	f1 2c       	mov	r15, r1
    6064:	88 24       	eor	r8, r8
    6066:	8a 94       	dec	r8
    6068:	98 2c       	mov	r9, r8
    606a:	a8 2c       	mov	r10, r8
    606c:	4f e1       	ldi	r20, 0x1F	; 31
    606e:	b4 2e       	mov	r11, r20
    6070:	13 c0       	rjmp	.+38     	; 0x6098 <strtoul+0x11a>
    6072:	6f ef       	ldi	r22, 0xFF	; 255
    6074:	7f ef       	ldi	r23, 0xFF	; 255
    6076:	cb 01       	movw	r24, r22
    6078:	97 01       	movw	r18, r14
    607a:	0f 2c       	mov	r0, r15
    607c:	00 0c       	add	r0, r0
    607e:	44 0b       	sbc	r20, r20
    6080:	55 0b       	sbc	r21, r21
    6082:	0e 94 ef 2d 	call	0x5bde	; 0x5bde <__udivmodsi4>
    6086:	49 01       	movw	r8, r18
    6088:	5a 01       	movw	r10, r20
    608a:	06 c0       	rjmp	.+12     	; 0x6098 <strtoul+0x11a>
    608c:	88 24       	eor	r8, r8
    608e:	8a 94       	dec	r8
    6090:	98 2c       	mov	r9, r8
    6092:	a8 2c       	mov	r10, r8
    6094:	2f e0       	ldi	r18, 0x0F	; 15
    6096:	b2 2e       	mov	r11, r18
    6098:	7e 82       	std	Y+6, r7	; 0x06
    609a:	6d 82       	std	Y+5, r6	; 0x05
    609c:	60 e0       	ldi	r22, 0x00	; 0
    609e:	20 e0       	ldi	r18, 0x00	; 0
    60a0:	30 e0       	ldi	r19, 0x00	; 0
    60a2:	a9 01       	movw	r20, r18
    60a4:	27 01       	movw	r4, r14
    60a6:	0f 2c       	mov	r0, r15
    60a8:	00 0c       	add	r0, r0
    60aa:	66 08       	sbc	r6, r6
    60ac:	77 08       	sbc	r7, r7
    60ae:	2d 80       	ldd	r2, Y+5	; 0x05
    60b0:	3e 80       	ldd	r3, Y+6	; 0x06
    60b2:	e0 ed       	ldi	r30, 0xD0	; 208
    60b4:	e1 0f       	add	r30, r17
    60b6:	ea 30       	cpi	r30, 0x0A	; 10
    60b8:	60 f0       	brcs	.+24     	; 0x60d2 <strtoul+0x154>
    60ba:	8f eb       	ldi	r24, 0xBF	; 191
    60bc:	81 0f       	add	r24, r17
    60be:	8a 31       	cpi	r24, 0x1A	; 26
    60c0:	10 f4       	brcc	.+4      	; 0x60c6 <strtoul+0x148>
    60c2:	e9 ec       	ldi	r30, 0xC9	; 201
    60c4:	05 c0       	rjmp	.+10     	; 0x60d0 <strtoul+0x152>
    60c6:	8f e9       	ldi	r24, 0x9F	; 159
    60c8:	81 0f       	add	r24, r17
    60ca:	8a 31       	cpi	r24, 0x1A	; 26
    60cc:	90 f5       	brcc	.+100    	; 0x6132 <strtoul+0x1b4>
    60ce:	e9 ea       	ldi	r30, 0xA9	; 169
    60d0:	e1 0f       	add	r30, r17
    60d2:	8e 2f       	mov	r24, r30
    60d4:	90 e0       	ldi	r25, 0x00	; 0
    60d6:	8e 15       	cp	r24, r14
    60d8:	9f 05       	cpc	r25, r15
    60da:	5c f5       	brge	.+86     	; 0x6132 <strtoul+0x1b4>
    60dc:	6f 3f       	cpi	r22, 0xFF	; 255
    60de:	09 f1       	breq	.+66     	; 0x6122 <strtoul+0x1a4>
    60e0:	82 16       	cp	r8, r18
    60e2:	93 06       	cpc	r9, r19
    60e4:	a4 06       	cpc	r10, r20
    60e6:	b5 06       	cpc	r11, r21
    60e8:	d8 f0       	brcs	.+54     	; 0x6120 <strtoul+0x1a2>
    60ea:	c3 01       	movw	r24, r6
    60ec:	b2 01       	movw	r22, r4
    60ee:	0e 94 c4 35 	call	0x6b88	; 0x6b88 <__mulsi3>
    60f2:	2e 2f       	mov	r18, r30
    60f4:	30 e0       	ldi	r19, 0x00	; 0
    60f6:	40 e0       	ldi	r20, 0x00	; 0
    60f8:	50 e0       	ldi	r21, 0x00	; 0
    60fa:	29 83       	std	Y+1, r18	; 0x01
    60fc:	3a 83       	std	Y+2, r19	; 0x02
    60fe:	4b 83       	std	Y+3, r20	; 0x03
    6100:	5c 83       	std	Y+4, r21	; 0x04
    6102:	26 0f       	add	r18, r22
    6104:	37 1f       	adc	r19, r23
    6106:	48 1f       	adc	r20, r24
    6108:	59 1f       	adc	r21, r25
    610a:	89 81       	ldd	r24, Y+1	; 0x01
    610c:	9a 81       	ldd	r25, Y+2	; 0x02
    610e:	ab 81       	ldd	r26, Y+3	; 0x03
    6110:	bc 81       	ldd	r27, Y+4	; 0x04
    6112:	28 17       	cp	r18, r24
    6114:	39 07       	cpc	r19, r25
    6116:	4a 07       	cpc	r20, r26
    6118:	5b 07       	cpc	r21, r27
    611a:	10 f0       	brcs	.+4      	; 0x6120 <strtoul+0x1a2>
    611c:	61 e0       	ldi	r22, 0x01	; 1
    611e:	01 c0       	rjmp	.+2      	; 0x6122 <strtoul+0x1a4>
    6120:	6f ef       	ldi	r22, 0xFF	; 255
    6122:	ed 81       	ldd	r30, Y+5	; 0x05
    6124:	fe 81       	ldd	r31, Y+6	; 0x06
    6126:	31 96       	adiw	r30, 0x01	; 1
    6128:	fe 83       	std	Y+6, r31	; 0x06
    612a:	ed 83       	std	Y+5, r30	; 0x05
    612c:	d1 01       	movw	r26, r2
    612e:	1c 91       	ld	r17, X
    6130:	be cf       	rjmp	.-132    	; 0x60ae <strtoul+0x130>
    6132:	c1 14       	cp	r12, r1
    6134:	d1 04       	cpc	r13, r1
    6136:	89 f0       	breq	.+34     	; 0x615a <strtoul+0x1dc>
    6138:	66 23       	and	r22, r22
    613a:	39 f0       	breq	.+14     	; 0x614a <strtoul+0x1cc>
    613c:	8d 81       	ldd	r24, Y+5	; 0x05
    613e:	9e 81       	ldd	r25, Y+6	; 0x06
    6140:	01 97       	sbiw	r24, 0x01	; 1
    6142:	f6 01       	movw	r30, r12
    6144:	91 83       	std	Z+1, r25	; 0x01
    6146:	80 83       	st	Z, r24
    6148:	08 c0       	rjmp	.+16     	; 0x615a <strtoul+0x1dc>
    614a:	01 ff       	sbrs	r16, 1
    614c:	06 c0       	rjmp	.+12     	; 0x615a <strtoul+0x1dc>
    614e:	8d 81       	ldd	r24, Y+5	; 0x05
    6150:	9e 81       	ldd	r25, Y+6	; 0x06
    6152:	02 97       	sbiw	r24, 0x02	; 2
    6154:	d6 01       	movw	r26, r12
    6156:	8d 93       	st	X+, r24
    6158:	9c 93       	st	X, r25
    615a:	00 ff       	sbrs	r16, 0
    615c:	07 c0       	rjmp	.+14     	; 0x616c <strtoul+0x1ee>
    615e:	50 95       	com	r21
    6160:	40 95       	com	r20
    6162:	30 95       	com	r19
    6164:	21 95       	neg	r18
    6166:	3f 4f       	sbci	r19, 0xFF	; 255
    6168:	4f 4f       	sbci	r20, 0xFF	; 255
    616a:	5f 4f       	sbci	r21, 0xFF	; 255
    616c:	67 ff       	sbrs	r22, 7
    616e:	10 c0       	rjmp	.+32     	; 0x6190 <strtoul+0x212>
    6170:	82 e2       	ldi	r24, 0x22	; 34
    6172:	90 e0       	ldi	r25, 0x00	; 0
    6174:	90 93 cc 0c 	sts	0x0CCC, r25	; 0x800ccc <errno+0x1>
    6178:	80 93 cb 0c 	sts	0x0CCB, r24	; 0x800ccb <errno>
    617c:	6f ef       	ldi	r22, 0xFF	; 255
    617e:	7f ef       	ldi	r23, 0xFF	; 255
    6180:	8f ef       	ldi	r24, 0xFF	; 255
    6182:	9f ef       	ldi	r25, 0xFF	; 255
    6184:	1b c0       	rjmp	.+54     	; 0x61bc <strtoul+0x23e>
    6186:	60 e0       	ldi	r22, 0x00	; 0
    6188:	70 e0       	ldi	r23, 0x00	; 0
    618a:	80 e0       	ldi	r24, 0x00	; 0
    618c:	90 e0       	ldi	r25, 0x00	; 0
    618e:	16 c0       	rjmp	.+44     	; 0x61bc <strtoul+0x23e>
    6190:	b9 01       	movw	r22, r18
    6192:	ca 01       	movw	r24, r20
    6194:	13 c0       	rjmp	.+38     	; 0x61bc <strtoul+0x23e>
    6196:	10 e3       	ldi	r17, 0x30	; 48
    6198:	e1 14       	cp	r14, r1
    619a:	f1 04       	cpc	r15, r1
    619c:	09 f4       	brne	.+2      	; 0x61a0 <strtoul+0x222>
    619e:	5f cf       	rjmp	.-322    	; 0x605e <strtoul+0xe0>
    61a0:	51 cf       	rjmp	.-350    	; 0x6044 <strtoul+0xc6>
    61a2:	10 33       	cpi	r17, 0x30	; 48
    61a4:	09 f4       	brne	.+2      	; 0x61a8 <strtoul+0x22a>
    61a6:	3f cf       	rjmp	.-386    	; 0x6026 <strtoul+0xa8>
    61a8:	9a e0       	ldi	r25, 0x0A	; 10
    61aa:	e9 2e       	mov	r14, r25
    61ac:	f1 2c       	mov	r15, r1
    61ae:	89 e9       	ldi	r24, 0x99	; 153
    61b0:	88 2e       	mov	r8, r24
    61b2:	98 2c       	mov	r9, r8
    61b4:	a8 2c       	mov	r10, r8
    61b6:	89 e1       	ldi	r24, 0x19	; 25
    61b8:	b8 2e       	mov	r11, r24
    61ba:	6e cf       	rjmp	.-292    	; 0x6098 <strtoul+0x11a>
    61bc:	26 96       	adiw	r28, 0x06	; 6
    61be:	0f b6       	in	r0, 0x3f	; 63
    61c0:	f8 94       	cli
    61c2:	de bf       	out	0x3e, r29	; 62
    61c4:	0f be       	out	0x3f, r0	; 63
    61c6:	cd bf       	out	0x3d, r28	; 61
    61c8:	df 91       	pop	r29
    61ca:	cf 91       	pop	r28
    61cc:	1f 91       	pop	r17
    61ce:	0f 91       	pop	r16
    61d0:	ff 90       	pop	r15
    61d2:	ef 90       	pop	r14
    61d4:	df 90       	pop	r13
    61d6:	cf 90       	pop	r12
    61d8:	bf 90       	pop	r11
    61da:	af 90       	pop	r10
    61dc:	9f 90       	pop	r9
    61de:	8f 90       	pop	r8
    61e0:	7f 90       	pop	r7
    61e2:	6f 90       	pop	r6
    61e4:	5f 90       	pop	r5
    61e6:	4f 90       	pop	r4
    61e8:	3f 90       	pop	r3
    61ea:	2f 90       	pop	r2
    61ec:	08 95       	ret

000061ee <atof>:
    61ee:	66 27       	eor	r22, r22
    61f0:	77 27       	eor	r23, r23
    61f2:	0c 94 5a 33 	jmp	0x66b4	; 0x66b4 <strtod>

000061f6 <atoi>:
    61f6:	fc 01       	movw	r30, r24
    61f8:	88 27       	eor	r24, r24
    61fa:	99 27       	eor	r25, r25
    61fc:	e8 94       	clt
    61fe:	21 91       	ld	r18, Z+
    6200:	20 32       	cpi	r18, 0x20	; 32
    6202:	e9 f3       	breq	.-6      	; 0x61fe <atoi+0x8>
    6204:	29 30       	cpi	r18, 0x09	; 9
    6206:	10 f0       	brcs	.+4      	; 0x620c <atoi+0x16>
    6208:	2e 30       	cpi	r18, 0x0E	; 14
    620a:	c8 f3       	brcs	.-14     	; 0x61fe <atoi+0x8>
    620c:	2b 32       	cpi	r18, 0x2B	; 43
    620e:	41 f0       	breq	.+16     	; 0x6220 <atoi+0x2a>
    6210:	2d 32       	cpi	r18, 0x2D	; 45
    6212:	39 f4       	brne	.+14     	; 0x6222 <atoi+0x2c>
    6214:	68 94       	set
    6216:	04 c0       	rjmp	.+8      	; 0x6220 <atoi+0x2a>
    6218:	0e 94 6a 32 	call	0x64d4	; 0x64d4 <__mulhi_const_10>
    621c:	82 0f       	add	r24, r18
    621e:	91 1d       	adc	r25, r1
    6220:	21 91       	ld	r18, Z+
    6222:	20 53       	subi	r18, 0x30	; 48
    6224:	2a 30       	cpi	r18, 0x0A	; 10
    6226:	c0 f3       	brcs	.-16     	; 0x6218 <atoi+0x22>
    6228:	1e f4       	brtc	.+6      	; 0x6230 <atoi+0x3a>
    622a:	90 95       	com	r25
    622c:	81 95       	neg	r24
    622e:	9f 4f       	sbci	r25, 0xFF	; 255
    6230:	08 95       	ret

00006232 <__ftoa_engine>:
    6232:	28 30       	cpi	r18, 0x08	; 8
    6234:	08 f0       	brcs	.+2      	; 0x6238 <__ftoa_engine+0x6>
    6236:	27 e0       	ldi	r18, 0x07	; 7
    6238:	33 27       	eor	r19, r19
    623a:	da 01       	movw	r26, r20
    623c:	99 0f       	add	r25, r25
    623e:	31 1d       	adc	r19, r1
    6240:	87 fd       	sbrc	r24, 7
    6242:	91 60       	ori	r25, 0x01	; 1
    6244:	00 96       	adiw	r24, 0x00	; 0
    6246:	61 05       	cpc	r22, r1
    6248:	71 05       	cpc	r23, r1
    624a:	39 f4       	brne	.+14     	; 0x625a <__ftoa_engine+0x28>
    624c:	32 60       	ori	r19, 0x02	; 2
    624e:	2e 5f       	subi	r18, 0xFE	; 254
    6250:	3d 93       	st	X+, r19
    6252:	30 e3       	ldi	r19, 0x30	; 48
    6254:	2a 95       	dec	r18
    6256:	e1 f7       	brne	.-8      	; 0x6250 <__ftoa_engine+0x1e>
    6258:	08 95       	ret
    625a:	9f 3f       	cpi	r25, 0xFF	; 255
    625c:	30 f0       	brcs	.+12     	; 0x626a <__ftoa_engine+0x38>
    625e:	80 38       	cpi	r24, 0x80	; 128
    6260:	71 05       	cpc	r23, r1
    6262:	61 05       	cpc	r22, r1
    6264:	09 f0       	breq	.+2      	; 0x6268 <__ftoa_engine+0x36>
    6266:	3c 5f       	subi	r19, 0xFC	; 252
    6268:	3c 5f       	subi	r19, 0xFC	; 252
    626a:	3d 93       	st	X+, r19
    626c:	91 30       	cpi	r25, 0x01	; 1
    626e:	08 f0       	brcs	.+2      	; 0x6272 <__ftoa_engine+0x40>
    6270:	80 68       	ori	r24, 0x80	; 128
    6272:	91 1d       	adc	r25, r1
    6274:	df 93       	push	r29
    6276:	cf 93       	push	r28
    6278:	1f 93       	push	r17
    627a:	0f 93       	push	r16
    627c:	ff 92       	push	r15
    627e:	ef 92       	push	r14
    6280:	19 2f       	mov	r17, r25
    6282:	98 7f       	andi	r25, 0xF8	; 248
    6284:	96 95       	lsr	r25
    6286:	e9 2f       	mov	r30, r25
    6288:	96 95       	lsr	r25
    628a:	96 95       	lsr	r25
    628c:	e9 0f       	add	r30, r25
    628e:	ff 27       	eor	r31, r31
    6290:	e4 5e       	subi	r30, 0xE4	; 228
    6292:	fd 4f       	sbci	r31, 0xFD	; 253
    6294:	99 27       	eor	r25, r25
    6296:	33 27       	eor	r19, r19
    6298:	ee 24       	eor	r14, r14
    629a:	ff 24       	eor	r15, r15
    629c:	a7 01       	movw	r20, r14
    629e:	e7 01       	movw	r28, r14
    62a0:	05 90       	lpm	r0, Z+
    62a2:	08 94       	sec
    62a4:	07 94       	ror	r0
    62a6:	28 f4       	brcc	.+10     	; 0x62b2 <__ftoa_engine+0x80>
    62a8:	36 0f       	add	r19, r22
    62aa:	e7 1e       	adc	r14, r23
    62ac:	f8 1e       	adc	r15, r24
    62ae:	49 1f       	adc	r20, r25
    62b0:	51 1d       	adc	r21, r1
    62b2:	66 0f       	add	r22, r22
    62b4:	77 1f       	adc	r23, r23
    62b6:	88 1f       	adc	r24, r24
    62b8:	99 1f       	adc	r25, r25
    62ba:	06 94       	lsr	r0
    62bc:	a1 f7       	brne	.-24     	; 0x62a6 <__ftoa_engine+0x74>
    62be:	05 90       	lpm	r0, Z+
    62c0:	07 94       	ror	r0
    62c2:	28 f4       	brcc	.+10     	; 0x62ce <__ftoa_engine+0x9c>
    62c4:	e7 0e       	add	r14, r23
    62c6:	f8 1e       	adc	r15, r24
    62c8:	49 1f       	adc	r20, r25
    62ca:	56 1f       	adc	r21, r22
    62cc:	c1 1d       	adc	r28, r1
    62ce:	77 0f       	add	r23, r23
    62d0:	88 1f       	adc	r24, r24
    62d2:	99 1f       	adc	r25, r25
    62d4:	66 1f       	adc	r22, r22
    62d6:	06 94       	lsr	r0
    62d8:	a1 f7       	brne	.-24     	; 0x62c2 <__ftoa_engine+0x90>
    62da:	05 90       	lpm	r0, Z+
    62dc:	07 94       	ror	r0
    62de:	28 f4       	brcc	.+10     	; 0x62ea <__ftoa_engine+0xb8>
    62e0:	f8 0e       	add	r15, r24
    62e2:	49 1f       	adc	r20, r25
    62e4:	56 1f       	adc	r21, r22
    62e6:	c7 1f       	adc	r28, r23
    62e8:	d1 1d       	adc	r29, r1
    62ea:	88 0f       	add	r24, r24
    62ec:	99 1f       	adc	r25, r25
    62ee:	66 1f       	adc	r22, r22
    62f0:	77 1f       	adc	r23, r23
    62f2:	06 94       	lsr	r0
    62f4:	a1 f7       	brne	.-24     	; 0x62de <__ftoa_engine+0xac>
    62f6:	05 90       	lpm	r0, Z+
    62f8:	07 94       	ror	r0
    62fa:	20 f4       	brcc	.+8      	; 0x6304 <__ftoa_engine+0xd2>
    62fc:	49 0f       	add	r20, r25
    62fe:	56 1f       	adc	r21, r22
    6300:	c7 1f       	adc	r28, r23
    6302:	d8 1f       	adc	r29, r24
    6304:	99 0f       	add	r25, r25
    6306:	66 1f       	adc	r22, r22
    6308:	77 1f       	adc	r23, r23
    630a:	88 1f       	adc	r24, r24
    630c:	06 94       	lsr	r0
    630e:	a9 f7       	brne	.-22     	; 0x62fa <__ftoa_engine+0xc8>
    6310:	84 91       	lpm	r24, Z
    6312:	10 95       	com	r17
    6314:	17 70       	andi	r17, 0x07	; 7
    6316:	41 f0       	breq	.+16     	; 0x6328 <__ftoa_engine+0xf6>
    6318:	d6 95       	lsr	r29
    631a:	c7 95       	ror	r28
    631c:	57 95       	ror	r21
    631e:	47 95       	ror	r20
    6320:	f7 94       	ror	r15
    6322:	e7 94       	ror	r14
    6324:	1a 95       	dec	r17
    6326:	c1 f7       	brne	.-16     	; 0x6318 <__ftoa_engine+0xe6>
    6328:	e2 ec       	ldi	r30, 0xC2	; 194
    632a:	f1 e0       	ldi	r31, 0x01	; 1
    632c:	68 94       	set
    632e:	15 90       	lpm	r1, Z+
    6330:	15 91       	lpm	r17, Z+
    6332:	35 91       	lpm	r19, Z+
    6334:	65 91       	lpm	r22, Z+
    6336:	95 91       	lpm	r25, Z+
    6338:	05 90       	lpm	r0, Z+
    633a:	7f e2       	ldi	r23, 0x2F	; 47
    633c:	73 95       	inc	r23
    633e:	e1 18       	sub	r14, r1
    6340:	f1 0a       	sbc	r15, r17
    6342:	43 0b       	sbc	r20, r19
    6344:	56 0b       	sbc	r21, r22
    6346:	c9 0b       	sbc	r28, r25
    6348:	d0 09       	sbc	r29, r0
    634a:	c0 f7       	brcc	.-16     	; 0x633c <__ftoa_engine+0x10a>
    634c:	e1 0c       	add	r14, r1
    634e:	f1 1e       	adc	r15, r17
    6350:	43 1f       	adc	r20, r19
    6352:	56 1f       	adc	r21, r22
    6354:	c9 1f       	adc	r28, r25
    6356:	d0 1d       	adc	r29, r0
    6358:	7e f4       	brtc	.+30     	; 0x6378 <__ftoa_engine+0x146>
    635a:	70 33       	cpi	r23, 0x30	; 48
    635c:	11 f4       	brne	.+4      	; 0x6362 <__ftoa_engine+0x130>
    635e:	8a 95       	dec	r24
    6360:	e6 cf       	rjmp	.-52     	; 0x632e <__ftoa_engine+0xfc>
    6362:	e8 94       	clt
    6364:	01 50       	subi	r16, 0x01	; 1
    6366:	30 f0       	brcs	.+12     	; 0x6374 <__ftoa_engine+0x142>
    6368:	08 0f       	add	r16, r24
    636a:	0a f4       	brpl	.+2      	; 0x636e <__ftoa_engine+0x13c>
    636c:	00 27       	eor	r16, r16
    636e:	02 17       	cp	r16, r18
    6370:	08 f4       	brcc	.+2      	; 0x6374 <__ftoa_engine+0x142>
    6372:	20 2f       	mov	r18, r16
    6374:	23 95       	inc	r18
    6376:	02 2f       	mov	r16, r18
    6378:	7a 33       	cpi	r23, 0x3A	; 58
    637a:	28 f0       	brcs	.+10     	; 0x6386 <__ftoa_engine+0x154>
    637c:	79 e3       	ldi	r23, 0x39	; 57
    637e:	7d 93       	st	X+, r23
    6380:	2a 95       	dec	r18
    6382:	e9 f7       	brne	.-6      	; 0x637e <__ftoa_engine+0x14c>
    6384:	10 c0       	rjmp	.+32     	; 0x63a6 <__ftoa_engine+0x174>
    6386:	7d 93       	st	X+, r23
    6388:	2a 95       	dec	r18
    638a:	89 f6       	brne	.-94     	; 0x632e <__ftoa_engine+0xfc>
    638c:	06 94       	lsr	r0
    638e:	97 95       	ror	r25
    6390:	67 95       	ror	r22
    6392:	37 95       	ror	r19
    6394:	17 95       	ror	r17
    6396:	17 94       	ror	r1
    6398:	e1 18       	sub	r14, r1
    639a:	f1 0a       	sbc	r15, r17
    639c:	43 0b       	sbc	r20, r19
    639e:	56 0b       	sbc	r21, r22
    63a0:	c9 0b       	sbc	r28, r25
    63a2:	d0 09       	sbc	r29, r0
    63a4:	98 f0       	brcs	.+38     	; 0x63cc <__ftoa_engine+0x19a>
    63a6:	23 95       	inc	r18
    63a8:	7e 91       	ld	r23, -X
    63aa:	73 95       	inc	r23
    63ac:	7a 33       	cpi	r23, 0x3A	; 58
    63ae:	08 f0       	brcs	.+2      	; 0x63b2 <__ftoa_engine+0x180>
    63b0:	70 e3       	ldi	r23, 0x30	; 48
    63b2:	7c 93       	st	X, r23
    63b4:	20 13       	cpse	r18, r16
    63b6:	b8 f7       	brcc	.-18     	; 0x63a6 <__ftoa_engine+0x174>
    63b8:	7e 91       	ld	r23, -X
    63ba:	70 61       	ori	r23, 0x10	; 16
    63bc:	7d 93       	st	X+, r23
    63be:	30 f0       	brcs	.+12     	; 0x63cc <__ftoa_engine+0x19a>
    63c0:	83 95       	inc	r24
    63c2:	71 e3       	ldi	r23, 0x31	; 49
    63c4:	7d 93       	st	X+, r23
    63c6:	70 e3       	ldi	r23, 0x30	; 48
    63c8:	2a 95       	dec	r18
    63ca:	e1 f7       	brne	.-8      	; 0x63c4 <__ftoa_engine+0x192>
    63cc:	11 24       	eor	r1, r1
    63ce:	ef 90       	pop	r14
    63d0:	ff 90       	pop	r15
    63d2:	0f 91       	pop	r16
    63d4:	1f 91       	pop	r17
    63d6:	cf 91       	pop	r28
    63d8:	df 91       	pop	r29
    63da:	99 27       	eor	r25, r25
    63dc:	87 fd       	sbrc	r24, 7
    63de:	90 95       	com	r25
    63e0:	08 95       	ret

000063e2 <isspace>:
    63e2:	91 11       	cpse	r25, r1
    63e4:	0c 94 c9 34 	jmp	0x6992	; 0x6992 <__ctype_isfalse>
    63e8:	80 32       	cpi	r24, 0x20	; 32
    63ea:	19 f0       	breq	.+6      	; 0x63f2 <isspace+0x10>
    63ec:	89 50       	subi	r24, 0x09	; 9
    63ee:	85 50       	subi	r24, 0x05	; 5
    63f0:	c8 f7       	brcc	.-14     	; 0x63e4 <isspace+0x2>
    63f2:	08 95       	ret

000063f4 <strnlen_P>:
    63f4:	fc 01       	movw	r30, r24
    63f6:	05 90       	lpm	r0, Z+
    63f8:	61 50       	subi	r22, 0x01	; 1
    63fa:	70 40       	sbci	r23, 0x00	; 0
    63fc:	01 10       	cpse	r0, r1
    63fe:	d8 f7       	brcc	.-10     	; 0x63f6 <strnlen_P+0x2>
    6400:	80 95       	com	r24
    6402:	90 95       	com	r25
    6404:	8e 0f       	add	r24, r30
    6406:	9f 1f       	adc	r25, r31
    6408:	08 95       	ret

0000640a <memcmp>:
    640a:	fb 01       	movw	r30, r22
    640c:	dc 01       	movw	r26, r24
    640e:	04 c0       	rjmp	.+8      	; 0x6418 <memcmp+0xe>
    6410:	8d 91       	ld	r24, X+
    6412:	01 90       	ld	r0, Z+
    6414:	80 19       	sub	r24, r0
    6416:	21 f4       	brne	.+8      	; 0x6420 <memcmp+0x16>
    6418:	41 50       	subi	r20, 0x01	; 1
    641a:	50 40       	sbci	r21, 0x00	; 0
    641c:	c8 f7       	brcc	.-14     	; 0x6410 <memcmp+0x6>
    641e:	88 1b       	sub	r24, r24
    6420:	99 0b       	sbc	r25, r25
    6422:	08 95       	ret

00006424 <memcpy>:
    6424:	fb 01       	movw	r30, r22
    6426:	dc 01       	movw	r26, r24
    6428:	02 c0       	rjmp	.+4      	; 0x642e <memcpy+0xa>
    642a:	01 90       	ld	r0, Z+
    642c:	0d 92       	st	X+, r0
    642e:	41 50       	subi	r20, 0x01	; 1
    6430:	50 40       	sbci	r21, 0x00	; 0
    6432:	d8 f7       	brcc	.-10     	; 0x642a <memcpy+0x6>
    6434:	08 95       	ret

00006436 <strchr>:
    6436:	fc 01       	movw	r30, r24
    6438:	81 91       	ld	r24, Z+
    643a:	86 17       	cp	r24, r22
    643c:	21 f0       	breq	.+8      	; 0x6446 <strchr+0x10>
    643e:	88 23       	and	r24, r24
    6440:	d9 f7       	brne	.-10     	; 0x6438 <strchr+0x2>
    6442:	99 27       	eor	r25, r25
    6444:	08 95       	ret
    6446:	31 97       	sbiw	r30, 0x01	; 1
    6448:	cf 01       	movw	r24, r30
    644a:	08 95       	ret

0000644c <strcmp>:
    644c:	fb 01       	movw	r30, r22
    644e:	dc 01       	movw	r26, r24
    6450:	8d 91       	ld	r24, X+
    6452:	01 90       	ld	r0, Z+
    6454:	80 19       	sub	r24, r0
    6456:	01 10       	cpse	r0, r1
    6458:	d9 f3       	breq	.-10     	; 0x6450 <strcmp+0x4>
    645a:	99 0b       	sbc	r25, r25
    645c:	08 95       	ret

0000645e <strcpy>:
    645e:	fb 01       	movw	r30, r22
    6460:	dc 01       	movw	r26, r24
    6462:	01 90       	ld	r0, Z+
    6464:	0d 92       	st	X+, r0
    6466:	00 20       	and	r0, r0
    6468:	e1 f7       	brne	.-8      	; 0x6462 <strcpy+0x4>
    646a:	08 95       	ret

0000646c <strncpy>:
    646c:	fb 01       	movw	r30, r22
    646e:	dc 01       	movw	r26, r24
    6470:	41 50       	subi	r20, 0x01	; 1
    6472:	50 40       	sbci	r21, 0x00	; 0
    6474:	48 f0       	brcs	.+18     	; 0x6488 <strncpy+0x1c>
    6476:	01 90       	ld	r0, Z+
    6478:	0d 92       	st	X+, r0
    647a:	00 20       	and	r0, r0
    647c:	c9 f7       	brne	.-14     	; 0x6470 <strncpy+0x4>
    647e:	01 c0       	rjmp	.+2      	; 0x6482 <strncpy+0x16>
    6480:	1d 92       	st	X+, r1
    6482:	41 50       	subi	r20, 0x01	; 1
    6484:	50 40       	sbci	r21, 0x00	; 0
    6486:	e0 f7       	brcc	.-8      	; 0x6480 <strncpy+0x14>
    6488:	08 95       	ret

0000648a <strnlen>:
    648a:	fc 01       	movw	r30, r24
    648c:	61 50       	subi	r22, 0x01	; 1
    648e:	70 40       	sbci	r23, 0x00	; 0
    6490:	01 90       	ld	r0, Z+
    6492:	01 10       	cpse	r0, r1
    6494:	d8 f7       	brcc	.-10     	; 0x648c <strnlen+0x2>
    6496:	80 95       	com	r24
    6498:	90 95       	com	r25
    649a:	8e 0f       	add	r24, r30
    649c:	9f 1f       	adc	r25, r31
    649e:	08 95       	ret

000064a0 <strstr>:
    64a0:	fb 01       	movw	r30, r22
    64a2:	51 91       	ld	r21, Z+
    64a4:	55 23       	and	r21, r21
    64a6:	a9 f0       	breq	.+42     	; 0x64d2 <strstr+0x32>
    64a8:	bf 01       	movw	r22, r30
    64aa:	dc 01       	movw	r26, r24
    64ac:	4d 91       	ld	r20, X+
    64ae:	45 17       	cp	r20, r21
    64b0:	41 11       	cpse	r20, r1
    64b2:	e1 f7       	brne	.-8      	; 0x64ac <strstr+0xc>
    64b4:	59 f4       	brne	.+22     	; 0x64cc <strstr+0x2c>
    64b6:	cd 01       	movw	r24, r26
    64b8:	01 90       	ld	r0, Z+
    64ba:	00 20       	and	r0, r0
    64bc:	49 f0       	breq	.+18     	; 0x64d0 <strstr+0x30>
    64be:	4d 91       	ld	r20, X+
    64c0:	40 15       	cp	r20, r0
    64c2:	41 11       	cpse	r20, r1
    64c4:	c9 f3       	breq	.-14     	; 0x64b8 <strstr+0x18>
    64c6:	fb 01       	movw	r30, r22
    64c8:	41 11       	cpse	r20, r1
    64ca:	ef cf       	rjmp	.-34     	; 0x64aa <strstr+0xa>
    64cc:	81 e0       	ldi	r24, 0x01	; 1
    64ce:	90 e0       	ldi	r25, 0x00	; 0
    64d0:	01 97       	sbiw	r24, 0x01	; 1
    64d2:	08 95       	ret

000064d4 <__mulhi_const_10>:
    64d4:	7a e0       	ldi	r23, 0x0A	; 10
    64d6:	97 9f       	mul	r25, r23
    64d8:	90 2d       	mov	r25, r0
    64da:	87 9f       	mul	r24, r23
    64dc:	80 2d       	mov	r24, r0
    64de:	91 0d       	add	r25, r1
    64e0:	11 24       	eor	r1, r1
    64e2:	08 95       	ret

000064e4 <__ultoa_ncheck>:
    64e4:	bb 27       	eor	r27, r27

000064e6 <__ultoa_common>:
    64e6:	fa 01       	movw	r30, r20
    64e8:	a6 2f       	mov	r26, r22
    64ea:	62 17       	cp	r22, r18
    64ec:	71 05       	cpc	r23, r1
    64ee:	81 05       	cpc	r24, r1
    64f0:	91 05       	cpc	r25, r1
    64f2:	33 0b       	sbc	r19, r19
    64f4:	30 fb       	bst	r19, 0
    64f6:	66 f0       	brts	.+24     	; 0x6510 <__ultoa_common+0x2a>
    64f8:	aa 27       	eor	r26, r26
    64fa:	66 0f       	add	r22, r22
    64fc:	77 1f       	adc	r23, r23
    64fe:	88 1f       	adc	r24, r24
    6500:	99 1f       	adc	r25, r25
    6502:	aa 1f       	adc	r26, r26
    6504:	a2 17       	cp	r26, r18
    6506:	10 f0       	brcs	.+4      	; 0x650c <__ultoa_common+0x26>
    6508:	a2 1b       	sub	r26, r18
    650a:	63 95       	inc	r22
    650c:	38 50       	subi	r19, 0x08	; 8
    650e:	a9 f7       	brne	.-22     	; 0x64fa <__ultoa_common+0x14>
    6510:	a0 5d       	subi	r26, 0xD0	; 208
    6512:	aa 33       	cpi	r26, 0x3A	; 58
    6514:	08 f0       	brcs	.+2      	; 0x6518 <__ultoa_common+0x32>
    6516:	a9 5d       	subi	r26, 0xD9	; 217
    6518:	a1 93       	st	Z+, r26
    651a:	36 f7       	brtc	.-52     	; 0x64e8 <__ultoa_common+0x2>
    651c:	b1 11       	cpse	r27, r1
    651e:	b1 93       	st	Z+, r27
    6520:	10 82       	st	Z, r1
    6522:	ca 01       	movw	r24, r20
    6524:	0c 94 e4 34 	jmp	0x69c8	; 0x69c8 <strrev>

00006528 <fputc>:
    6528:	0f 93       	push	r16
    652a:	1f 93       	push	r17
    652c:	cf 93       	push	r28
    652e:	df 93       	push	r29
    6530:	fb 01       	movw	r30, r22
    6532:	23 81       	ldd	r18, Z+3	; 0x03
    6534:	21 fd       	sbrc	r18, 1
    6536:	03 c0       	rjmp	.+6      	; 0x653e <fputc+0x16>
    6538:	8f ef       	ldi	r24, 0xFF	; 255
    653a:	9f ef       	ldi	r25, 0xFF	; 255
    653c:	28 c0       	rjmp	.+80     	; 0x658e <fputc+0x66>
    653e:	22 ff       	sbrs	r18, 2
    6540:	16 c0       	rjmp	.+44     	; 0x656e <fputc+0x46>
    6542:	46 81       	ldd	r20, Z+6	; 0x06
    6544:	57 81       	ldd	r21, Z+7	; 0x07
    6546:	24 81       	ldd	r18, Z+4	; 0x04
    6548:	35 81       	ldd	r19, Z+5	; 0x05
    654a:	42 17       	cp	r20, r18
    654c:	53 07       	cpc	r21, r19
    654e:	44 f4       	brge	.+16     	; 0x6560 <fputc+0x38>
    6550:	a0 81       	ld	r26, Z
    6552:	b1 81       	ldd	r27, Z+1	; 0x01
    6554:	9d 01       	movw	r18, r26
    6556:	2f 5f       	subi	r18, 0xFF	; 255
    6558:	3f 4f       	sbci	r19, 0xFF	; 255
    655a:	31 83       	std	Z+1, r19	; 0x01
    655c:	20 83       	st	Z, r18
    655e:	8c 93       	st	X, r24
    6560:	26 81       	ldd	r18, Z+6	; 0x06
    6562:	37 81       	ldd	r19, Z+7	; 0x07
    6564:	2f 5f       	subi	r18, 0xFF	; 255
    6566:	3f 4f       	sbci	r19, 0xFF	; 255
    6568:	37 83       	std	Z+7, r19	; 0x07
    656a:	26 83       	std	Z+6, r18	; 0x06
    656c:	10 c0       	rjmp	.+32     	; 0x658e <fputc+0x66>
    656e:	eb 01       	movw	r28, r22
    6570:	09 2f       	mov	r16, r25
    6572:	18 2f       	mov	r17, r24
    6574:	00 84       	ldd	r0, Z+8	; 0x08
    6576:	f1 85       	ldd	r31, Z+9	; 0x09
    6578:	e0 2d       	mov	r30, r0
    657a:	09 95       	icall
    657c:	89 2b       	or	r24, r25
    657e:	e1 f6       	brne	.-72     	; 0x6538 <fputc+0x10>
    6580:	8e 81       	ldd	r24, Y+6	; 0x06
    6582:	9f 81       	ldd	r25, Y+7	; 0x07
    6584:	01 96       	adiw	r24, 0x01	; 1
    6586:	9f 83       	std	Y+7, r25	; 0x07
    6588:	8e 83       	std	Y+6, r24	; 0x06
    658a:	81 2f       	mov	r24, r17
    658c:	90 2f       	mov	r25, r16
    658e:	df 91       	pop	r29
    6590:	cf 91       	pop	r28
    6592:	1f 91       	pop	r17
    6594:	0f 91       	pop	r16
    6596:	08 95       	ret

00006598 <sprintf>:
    6598:	0f 93       	push	r16
    659a:	1f 93       	push	r17
    659c:	cf 93       	push	r28
    659e:	df 93       	push	r29
    65a0:	cd b7       	in	r28, 0x3d	; 61
    65a2:	de b7       	in	r29, 0x3e	; 62
    65a4:	2e 97       	sbiw	r28, 0x0e	; 14
    65a6:	0f b6       	in	r0, 0x3f	; 63
    65a8:	f8 94       	cli
    65aa:	de bf       	out	0x3e, r29	; 62
    65ac:	0f be       	out	0x3f, r0	; 63
    65ae:	cd bf       	out	0x3d, r28	; 61
    65b0:	0d 89       	ldd	r16, Y+21	; 0x15
    65b2:	1e 89       	ldd	r17, Y+22	; 0x16
    65b4:	86 e0       	ldi	r24, 0x06	; 6
    65b6:	8c 83       	std	Y+4, r24	; 0x04
    65b8:	1a 83       	std	Y+2, r17	; 0x02
    65ba:	09 83       	std	Y+1, r16	; 0x01
    65bc:	8f ef       	ldi	r24, 0xFF	; 255
    65be:	9f e7       	ldi	r25, 0x7F	; 127
    65c0:	9e 83       	std	Y+6, r25	; 0x06
    65c2:	8d 83       	std	Y+5, r24	; 0x05
    65c4:	ae 01       	movw	r20, r28
    65c6:	47 5e       	subi	r20, 0xE7	; 231
    65c8:	5f 4f       	sbci	r21, 0xFF	; 255
    65ca:	6f 89       	ldd	r22, Y+23	; 0x17
    65cc:	78 8d       	ldd	r23, Y+24	; 0x18
    65ce:	ce 01       	movw	r24, r28
    65d0:	01 96       	adiw	r24, 0x01	; 1
    65d2:	0e 94 86 28 	call	0x510c	; 0x510c <vfprintf>
    65d6:	2f 81       	ldd	r18, Y+7	; 0x07
    65d8:	38 85       	ldd	r19, Y+8	; 0x08
    65da:	f8 01       	movw	r30, r16
    65dc:	e2 0f       	add	r30, r18
    65de:	f3 1f       	adc	r31, r19
    65e0:	10 82       	st	Z, r1
    65e2:	2e 96       	adiw	r28, 0x0e	; 14
    65e4:	0f b6       	in	r0, 0x3f	; 63
    65e6:	f8 94       	cli
    65e8:	de bf       	out	0x3e, r29	; 62
    65ea:	0f be       	out	0x3f, r0	; 63
    65ec:	cd bf       	out	0x3d, r28	; 61
    65ee:	df 91       	pop	r29
    65f0:	cf 91       	pop	r28
    65f2:	1f 91       	pop	r17
    65f4:	0f 91       	pop	r16
    65f6:	08 95       	ret

000065f8 <__ultoa_invert>:
    65f8:	fa 01       	movw	r30, r20
    65fa:	aa 27       	eor	r26, r26
    65fc:	28 30       	cpi	r18, 0x08	; 8
    65fe:	51 f1       	breq	.+84     	; 0x6654 <__ultoa_invert+0x5c>
    6600:	20 31       	cpi	r18, 0x10	; 16
    6602:	81 f1       	breq	.+96     	; 0x6664 <__ultoa_invert+0x6c>
    6604:	e8 94       	clt
    6606:	6f 93       	push	r22
    6608:	6e 7f       	andi	r22, 0xFE	; 254
    660a:	6e 5f       	subi	r22, 0xFE	; 254
    660c:	7f 4f       	sbci	r23, 0xFF	; 255
    660e:	8f 4f       	sbci	r24, 0xFF	; 255
    6610:	9f 4f       	sbci	r25, 0xFF	; 255
    6612:	af 4f       	sbci	r26, 0xFF	; 255
    6614:	b1 e0       	ldi	r27, 0x01	; 1
    6616:	3e d0       	rcall	.+124    	; 0x6694 <__ultoa_invert+0x9c>
    6618:	b4 e0       	ldi	r27, 0x04	; 4
    661a:	3c d0       	rcall	.+120    	; 0x6694 <__ultoa_invert+0x9c>
    661c:	67 0f       	add	r22, r23
    661e:	78 1f       	adc	r23, r24
    6620:	89 1f       	adc	r24, r25
    6622:	9a 1f       	adc	r25, r26
    6624:	a1 1d       	adc	r26, r1
    6626:	68 0f       	add	r22, r24
    6628:	79 1f       	adc	r23, r25
    662a:	8a 1f       	adc	r24, r26
    662c:	91 1d       	adc	r25, r1
    662e:	a1 1d       	adc	r26, r1
    6630:	6a 0f       	add	r22, r26
    6632:	71 1d       	adc	r23, r1
    6634:	81 1d       	adc	r24, r1
    6636:	91 1d       	adc	r25, r1
    6638:	a1 1d       	adc	r26, r1
    663a:	20 d0       	rcall	.+64     	; 0x667c <__ultoa_invert+0x84>
    663c:	09 f4       	brne	.+2      	; 0x6640 <__ultoa_invert+0x48>
    663e:	68 94       	set
    6640:	3f 91       	pop	r19
    6642:	2a e0       	ldi	r18, 0x0A	; 10
    6644:	26 9f       	mul	r18, r22
    6646:	11 24       	eor	r1, r1
    6648:	30 19       	sub	r19, r0
    664a:	30 5d       	subi	r19, 0xD0	; 208
    664c:	31 93       	st	Z+, r19
    664e:	de f6       	brtc	.-74     	; 0x6606 <__ultoa_invert+0xe>
    6650:	cf 01       	movw	r24, r30
    6652:	08 95       	ret
    6654:	46 2f       	mov	r20, r22
    6656:	47 70       	andi	r20, 0x07	; 7
    6658:	40 5d       	subi	r20, 0xD0	; 208
    665a:	41 93       	st	Z+, r20
    665c:	b3 e0       	ldi	r27, 0x03	; 3
    665e:	0f d0       	rcall	.+30     	; 0x667e <__ultoa_invert+0x86>
    6660:	c9 f7       	brne	.-14     	; 0x6654 <__ultoa_invert+0x5c>
    6662:	f6 cf       	rjmp	.-20     	; 0x6650 <__ultoa_invert+0x58>
    6664:	46 2f       	mov	r20, r22
    6666:	4f 70       	andi	r20, 0x0F	; 15
    6668:	40 5d       	subi	r20, 0xD0	; 208
    666a:	4a 33       	cpi	r20, 0x3A	; 58
    666c:	18 f0       	brcs	.+6      	; 0x6674 <__ultoa_invert+0x7c>
    666e:	49 5d       	subi	r20, 0xD9	; 217
    6670:	31 fd       	sbrc	r19, 1
    6672:	40 52       	subi	r20, 0x20	; 32
    6674:	41 93       	st	Z+, r20
    6676:	02 d0       	rcall	.+4      	; 0x667c <__ultoa_invert+0x84>
    6678:	a9 f7       	brne	.-22     	; 0x6664 <__ultoa_invert+0x6c>
    667a:	ea cf       	rjmp	.-44     	; 0x6650 <__ultoa_invert+0x58>
    667c:	b4 e0       	ldi	r27, 0x04	; 4
    667e:	a6 95       	lsr	r26
    6680:	97 95       	ror	r25
    6682:	87 95       	ror	r24
    6684:	77 95       	ror	r23
    6686:	67 95       	ror	r22
    6688:	ba 95       	dec	r27
    668a:	c9 f7       	brne	.-14     	; 0x667e <__ultoa_invert+0x86>
    668c:	00 97       	sbiw	r24, 0x00	; 0
    668e:	61 05       	cpc	r22, r1
    6690:	71 05       	cpc	r23, r1
    6692:	08 95       	ret
    6694:	9b 01       	movw	r18, r22
    6696:	ac 01       	movw	r20, r24
    6698:	0a 2e       	mov	r0, r26
    669a:	06 94       	lsr	r0
    669c:	57 95       	ror	r21
    669e:	47 95       	ror	r20
    66a0:	37 95       	ror	r19
    66a2:	27 95       	ror	r18
    66a4:	ba 95       	dec	r27
    66a6:	c9 f7       	brne	.-14     	; 0x669a <__ultoa_invert+0xa2>
    66a8:	62 0f       	add	r22, r18
    66aa:	73 1f       	adc	r23, r19
    66ac:	84 1f       	adc	r24, r20
    66ae:	95 1f       	adc	r25, r21
    66b0:	a0 1d       	adc	r26, r0
    66b2:	08 95       	ret

000066b4 <strtod>:
    66b4:	6f 92       	push	r6
    66b6:	7f 92       	push	r7
    66b8:	8f 92       	push	r8
    66ba:	9f 92       	push	r9
    66bc:	af 92       	push	r10
    66be:	bf 92       	push	r11
    66c0:	cf 92       	push	r12
    66c2:	df 92       	push	r13
    66c4:	ef 92       	push	r14
    66c6:	ff 92       	push	r15
    66c8:	0f 93       	push	r16
    66ca:	1f 93       	push	r17
    66cc:	cf 93       	push	r28
    66ce:	df 93       	push	r29
    66d0:	ec 01       	movw	r28, r24
    66d2:	7b 01       	movw	r14, r22
    66d4:	61 15       	cp	r22, r1
    66d6:	71 05       	cpc	r23, r1
    66d8:	19 f0       	breq	.+6      	; 0x66e0 <strtod+0x2c>
    66da:	db 01       	movw	r26, r22
    66dc:	8d 93       	st	X+, r24
    66de:	9c 93       	st	X, r25
    66e0:	8e 01       	movw	r16, r28
    66e2:	0f 5f       	subi	r16, 0xFF	; 255
    66e4:	1f 4f       	sbci	r17, 0xFF	; 255
    66e6:	78 80       	ld	r7, Y
    66e8:	87 2d       	mov	r24, r7
    66ea:	90 e0       	ldi	r25, 0x00	; 0
    66ec:	0e 94 f1 31 	call	0x63e2	; 0x63e2 <isspace>
    66f0:	89 2b       	or	r24, r25
    66f2:	11 f0       	breq	.+4      	; 0x66f8 <strtod+0x44>
    66f4:	e8 01       	movw	r28, r16
    66f6:	f4 cf       	rjmp	.-24     	; 0x66e0 <strtod+0x2c>
    66f8:	bd e2       	ldi	r27, 0x2D	; 45
    66fa:	7b 12       	cpse	r7, r27
    66fc:	05 c0       	rjmp	.+10     	; 0x6708 <strtod+0x54>
    66fe:	0f 5f       	subi	r16, 0xFF	; 255
    6700:	1f 4f       	sbci	r17, 0xFF	; 255
    6702:	79 80       	ldd	r7, Y+1	; 0x01
    6704:	c1 e0       	ldi	r28, 0x01	; 1
    6706:	08 c0       	rjmp	.+16     	; 0x6718 <strtod+0x64>
    6708:	eb e2       	ldi	r30, 0x2B	; 43
    670a:	7e 12       	cpse	r7, r30
    670c:	04 c0       	rjmp	.+8      	; 0x6716 <strtod+0x62>
    670e:	8e 01       	movw	r16, r28
    6710:	0e 5f       	subi	r16, 0xFE	; 254
    6712:	1f 4f       	sbci	r17, 0xFF	; 255
    6714:	79 80       	ldd	r7, Y+1	; 0x01
    6716:	c0 e0       	ldi	r28, 0x00	; 0
    6718:	68 01       	movw	r12, r16
    671a:	f1 e0       	ldi	r31, 0x01	; 1
    671c:	cf 1a       	sub	r12, r31
    671e:	d1 08       	sbc	r13, r1
    6720:	43 e0       	ldi	r20, 0x03	; 3
    6722:	50 e0       	ldi	r21, 0x00	; 0
    6724:	64 ec       	ldi	r22, 0xC4	; 196
    6726:	72 e0       	ldi	r23, 0x02	; 2
    6728:	c6 01       	movw	r24, r12
    672a:	0e 94 cc 34 	call	0x6998	; 0x6998 <strncasecmp_P>
    672e:	89 2b       	or	r24, r25
    6730:	f1 f4       	brne	.+60     	; 0x676e <strtod+0xba>
    6732:	68 01       	movw	r12, r16
    6734:	22 e0       	ldi	r18, 0x02	; 2
    6736:	c2 0e       	add	r12, r18
    6738:	d1 1c       	adc	r13, r1
    673a:	45 e0       	ldi	r20, 0x05	; 5
    673c:	50 e0       	ldi	r21, 0x00	; 0
    673e:	6f eb       	ldi	r22, 0xBF	; 191
    6740:	72 e0       	ldi	r23, 0x02	; 2
    6742:	c6 01       	movw	r24, r12
    6744:	0e 94 cc 34 	call	0x6998	; 0x6998 <strncasecmp_P>
    6748:	89 2b       	or	r24, r25
    674a:	21 f4       	brne	.+8      	; 0x6754 <strtod+0xa0>
    674c:	68 01       	movw	r12, r16
    674e:	87 e0       	ldi	r24, 0x07	; 7
    6750:	c8 0e       	add	r12, r24
    6752:	d1 1c       	adc	r13, r1
    6754:	e1 14       	cp	r14, r1
    6756:	f1 04       	cpc	r15, r1
    6758:	19 f0       	breq	.+6      	; 0x6760 <strtod+0xac>
    675a:	d7 01       	movw	r26, r14
    675c:	cd 92       	st	X+, r12
    675e:	dc 92       	st	X, r13
    6760:	c1 11       	cpse	r28, r1
    6762:	ff c0       	rjmp	.+510    	; 0x6962 <strtod+0x2ae>
    6764:	60 e0       	ldi	r22, 0x00	; 0
    6766:	70 e0       	ldi	r23, 0x00	; 0
    6768:	80 e8       	ldi	r24, 0x80	; 128
    676a:	9f e7       	ldi	r25, 0x7F	; 127
    676c:	03 c1       	rjmp	.+518    	; 0x6974 <strtod+0x2c0>
    676e:	43 e0       	ldi	r20, 0x03	; 3
    6770:	50 e0       	ldi	r21, 0x00	; 0
    6772:	6c eb       	ldi	r22, 0xBC	; 188
    6774:	72 e0       	ldi	r23, 0x02	; 2
    6776:	c6 01       	movw	r24, r12
    6778:	0e 94 cc 34 	call	0x6998	; 0x6998 <strncasecmp_P>
    677c:	89 2b       	or	r24, r25
    677e:	51 f4       	brne	.+20     	; 0x6794 <strtod+0xe0>
    6780:	e1 14       	cp	r14, r1
    6782:	f1 04       	cpc	r15, r1
    6784:	09 f4       	brne	.+2      	; 0x6788 <strtod+0xd4>
    6786:	f2 c0       	rjmp	.+484    	; 0x696c <strtod+0x2b8>
    6788:	0e 5f       	subi	r16, 0xFE	; 254
    678a:	1f 4f       	sbci	r17, 0xFF	; 255
    678c:	f7 01       	movw	r30, r14
    678e:	11 83       	std	Z+1, r17	; 0x01
    6790:	00 83       	st	Z, r16
    6792:	ec c0       	rjmp	.+472    	; 0x696c <strtod+0x2b8>
    6794:	68 01       	movw	r12, r16
    6796:	60 e0       	ldi	r22, 0x00	; 0
    6798:	70 e0       	ldi	r23, 0x00	; 0
    679a:	cb 01       	movw	r24, r22
    679c:	00 e0       	ldi	r16, 0x00	; 0
    679e:	10 e0       	ldi	r17, 0x00	; 0
    67a0:	f6 01       	movw	r30, r12
    67a2:	d0 ed       	ldi	r29, 0xD0	; 208
    67a4:	d7 0d       	add	r29, r7
    67a6:	da 30       	cpi	r29, 0x0A	; 10
    67a8:	58 f5       	brcc	.+86     	; 0x6800 <strtod+0x14c>
    67aa:	2c 2f       	mov	r18, r28
    67ac:	22 60       	ori	r18, 0x02	; 2
    67ae:	62 2e       	mov	r6, r18
    67b0:	2c 2f       	mov	r18, r28
    67b2:	28 70       	andi	r18, 0x08	; 8
    67b4:	c2 ff       	sbrs	r28, 2
    67b6:	05 c0       	rjmp	.+10     	; 0x67c2 <strtod+0x10e>
    67b8:	21 11       	cpse	r18, r1
    67ba:	28 c0       	rjmp	.+80     	; 0x680c <strtod+0x158>
    67bc:	0f 5f       	subi	r16, 0xFF	; 255
    67be:	1f 4f       	sbci	r17, 0xFF	; 255
    67c0:	25 c0       	rjmp	.+74     	; 0x680c <strtod+0x158>
    67c2:	22 23       	and	r18, r18
    67c4:	11 f0       	breq	.+4      	; 0x67ca <strtod+0x116>
    67c6:	01 50       	subi	r16, 0x01	; 1
    67c8:	11 09       	sbc	r17, r1
    67ca:	a5 e0       	ldi	r26, 0x05	; 5
    67cc:	b0 e0       	ldi	r27, 0x00	; 0
    67ce:	9b 01       	movw	r18, r22
    67d0:	ac 01       	movw	r20, r24
    67d2:	0e 94 f3 35 	call	0x6be6	; 0x6be6 <__muluhisi3>
    67d6:	4b 01       	movw	r8, r22
    67d8:	5c 01       	movw	r10, r24
    67da:	88 0c       	add	r8, r8
    67dc:	99 1c       	adc	r9, r9
    67de:	aa 1c       	adc	r10, r10
    67e0:	bb 1c       	adc	r11, r11
    67e2:	c5 01       	movw	r24, r10
    67e4:	b4 01       	movw	r22, r8
    67e6:	6d 0f       	add	r22, r29
    67e8:	71 1d       	adc	r23, r1
    67ea:	81 1d       	adc	r24, r1
    67ec:	91 1d       	adc	r25, r1
    67ee:	68 39       	cpi	r22, 0x98	; 152
    67f0:	a9 e9       	ldi	r26, 0x99	; 153
    67f2:	7a 07       	cpc	r23, r26
    67f4:	8a 07       	cpc	r24, r26
    67f6:	a9 e1       	ldi	r26, 0x19	; 25
    67f8:	9a 07       	cpc	r25, r26
    67fa:	40 f0       	brcs	.+16     	; 0x680c <strtod+0x158>
    67fc:	c6 60       	ori	r28, 0x06	; 6
    67fe:	05 c0       	rjmp	.+10     	; 0x680a <strtod+0x156>
    6800:	de 3f       	cpi	r29, 0xFE	; 254
    6802:	51 f4       	brne	.+20     	; 0x6818 <strtod+0x164>
    6804:	c3 fd       	sbrc	r28, 3
    6806:	44 c0       	rjmp	.+136    	; 0x6890 <strtod+0x1dc>
    6808:	c8 60       	ori	r28, 0x08	; 8
    680a:	6c 2e       	mov	r6, r28
    680c:	bf ef       	ldi	r27, 0xFF	; 255
    680e:	cb 1a       	sub	r12, r27
    6810:	db 0a       	sbc	r13, r27
    6812:	70 80       	ld	r7, Z
    6814:	c6 2d       	mov	r28, r6
    6816:	c4 cf       	rjmp	.-120    	; 0x67a0 <strtod+0xec>
    6818:	2d 2f       	mov	r18, r29
    681a:	2f 7d       	andi	r18, 0xDF	; 223
    681c:	25 31       	cpi	r18, 0x15	; 21
    681e:	c1 f5       	brne	.+112    	; 0x6890 <strtod+0x1dc>
    6820:	40 81       	ld	r20, Z
    6822:	4d 32       	cpi	r20, 0x2D	; 45
    6824:	11 f4       	brne	.+4      	; 0x682a <strtod+0x176>
    6826:	c0 61       	ori	r28, 0x10	; 16
    6828:	06 c0       	rjmp	.+12     	; 0x6836 <strtod+0x182>
    682a:	4b 32       	cpi	r20, 0x2B	; 43
    682c:	21 f0       	breq	.+8      	; 0x6836 <strtod+0x182>
    682e:	31 96       	adiw	r30, 0x01	; 1
    6830:	21 e0       	ldi	r18, 0x01	; 1
    6832:	30 e0       	ldi	r19, 0x00	; 0
    6834:	06 c0       	rjmp	.+12     	; 0x6842 <strtod+0x18e>
    6836:	32 96       	adiw	r30, 0x02	; 2
    6838:	d6 01       	movw	r26, r12
    683a:	11 96       	adiw	r26, 0x01	; 1
    683c:	4c 91       	ld	r20, X
    683e:	22 e0       	ldi	r18, 0x02	; 2
    6840:	30 e0       	ldi	r19, 0x00	; 0
    6842:	a0 ed       	ldi	r26, 0xD0	; 208
    6844:	a4 0f       	add	r26, r20
    6846:	aa 30       	cpi	r26, 0x0A	; 10
    6848:	18 f0       	brcs	.+6      	; 0x6850 <strtod+0x19c>
    684a:	e2 1b       	sub	r30, r18
    684c:	f3 0b       	sbc	r31, r19
    684e:	20 c0       	rjmp	.+64     	; 0x6890 <strtod+0x1dc>
    6850:	40 e0       	ldi	r20, 0x00	; 0
    6852:	50 e0       	ldi	r21, 0x00	; 0
    6854:	40 38       	cpi	r20, 0x80	; 128
    6856:	bc e0       	ldi	r27, 0x0C	; 12
    6858:	5b 07       	cpc	r21, r27
    685a:	5c f4       	brge	.+22     	; 0x6872 <strtod+0x1be>
    685c:	9a 01       	movw	r18, r20
    685e:	22 0f       	add	r18, r18
    6860:	33 1f       	adc	r19, r19
    6862:	22 0f       	add	r18, r18
    6864:	33 1f       	adc	r19, r19
    6866:	42 0f       	add	r20, r18
    6868:	53 1f       	adc	r21, r19
    686a:	44 0f       	add	r20, r20
    686c:	55 1f       	adc	r21, r21
    686e:	4a 0f       	add	r20, r26
    6870:	51 1d       	adc	r21, r1
    6872:	31 96       	adiw	r30, 0x01	; 1
    6874:	df 01       	movw	r26, r30
    6876:	11 97       	sbiw	r26, 0x01	; 1
    6878:	2c 91       	ld	r18, X
    687a:	a0 ed       	ldi	r26, 0xD0	; 208
    687c:	a2 0f       	add	r26, r18
    687e:	aa 30       	cpi	r26, 0x0A	; 10
    6880:	48 f3       	brcs	.-46     	; 0x6854 <strtod+0x1a0>
    6882:	c4 ff       	sbrs	r28, 4
    6884:	03 c0       	rjmp	.+6      	; 0x688c <strtod+0x1d8>
    6886:	51 95       	neg	r21
    6888:	41 95       	neg	r20
    688a:	51 09       	sbc	r21, r1
    688c:	04 0f       	add	r16, r20
    688e:	15 1f       	adc	r17, r21
    6890:	c1 ff       	sbrs	r28, 1
    6892:	07 c0       	rjmp	.+14     	; 0x68a2 <strtod+0x1ee>
    6894:	e1 14       	cp	r14, r1
    6896:	f1 04       	cpc	r15, r1
    6898:	21 f0       	breq	.+8      	; 0x68a2 <strtod+0x1ee>
    689a:	31 97       	sbiw	r30, 0x01	; 1
    689c:	d7 01       	movw	r26, r14
    689e:	ed 93       	st	X+, r30
    68a0:	fc 93       	st	X, r31
    68a2:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <__floatunsisf>
    68a6:	c3 70       	andi	r28, 0x03	; 3
    68a8:	c3 30       	cpi	r28, 0x03	; 3
    68aa:	19 f0       	breq	.+6      	; 0x68b2 <strtod+0x1fe>
    68ac:	6b 01       	movw	r12, r22
    68ae:	7c 01       	movw	r14, r24
    68b0:	06 c0       	rjmp	.+12     	; 0x68be <strtod+0x20a>
    68b2:	6b 01       	movw	r12, r22
    68b4:	7c 01       	movw	r14, r24
    68b6:	f7 fa       	bst	r15, 7
    68b8:	f0 94       	com	r15
    68ba:	f7 f8       	bld	r15, 7
    68bc:	f0 94       	com	r15
    68be:	20 e0       	ldi	r18, 0x00	; 0
    68c0:	30 e0       	ldi	r19, 0x00	; 0
    68c2:	a9 01       	movw	r20, r18
    68c4:	c7 01       	movw	r24, r14
    68c6:	b6 01       	movw	r22, r12
    68c8:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__cmpsf2>
    68cc:	88 23       	and	r24, r24
    68ce:	09 f4       	brne	.+2      	; 0x68d2 <strtod+0x21e>
    68d0:	45 c0       	rjmp	.+138    	; 0x695c <strtod+0x2a8>
    68d2:	17 ff       	sbrs	r17, 7
    68d4:	06 c0       	rjmp	.+12     	; 0x68e2 <strtod+0x22e>
    68d6:	11 95       	neg	r17
    68d8:	01 95       	neg	r16
    68da:	11 09       	sbc	r17, r1
    68dc:	cb ed       	ldi	r28, 0xDB	; 219
    68de:	d2 e0       	ldi	r29, 0x02	; 2
    68e0:	02 c0       	rjmp	.+4      	; 0x68e6 <strtod+0x232>
    68e2:	c3 ef       	ldi	r28, 0xF3	; 243
    68e4:	d2 e0       	ldi	r29, 0x02	; 2
    68e6:	5e 01       	movw	r10, r28
    68e8:	b8 e1       	ldi	r27, 0x18	; 24
    68ea:	ab 1a       	sub	r10, r27
    68ec:	b1 08       	sbc	r11, r1
    68ee:	46 01       	movw	r8, r12
    68f0:	be 2d       	mov	r27, r14
    68f2:	af 2d       	mov	r26, r15
    68f4:	90 e2       	ldi	r25, 0x20	; 32
    68f6:	e9 2e       	mov	r14, r25
    68f8:	f1 2c       	mov	r15, r1
    68fa:	0e 15       	cp	r16, r14
    68fc:	1f 05       	cpc	r17, r15
    68fe:	84 f0       	brlt	.+32     	; 0x6920 <strtod+0x26c>
    6900:	fe 01       	movw	r30, r28
    6902:	25 91       	lpm	r18, Z+
    6904:	35 91       	lpm	r19, Z+
    6906:	45 91       	lpm	r20, Z+
    6908:	54 91       	lpm	r21, Z
    690a:	b4 01       	movw	r22, r8
    690c:	8b 2f       	mov	r24, r27
    690e:	9a 2f       	mov	r25, r26
    6910:	0e 94 1d 35 	call	0x6a3a	; 0x6a3a <__mulsf3>
    6914:	4b 01       	movw	r8, r22
    6916:	b8 2f       	mov	r27, r24
    6918:	a9 2f       	mov	r26, r25
    691a:	0e 19       	sub	r16, r14
    691c:	1f 09       	sbc	r17, r15
    691e:	ed cf       	rjmp	.-38     	; 0x68fa <strtod+0x246>
    6920:	24 97       	sbiw	r28, 0x04	; 4
    6922:	f5 94       	asr	r15
    6924:	e7 94       	ror	r14
    6926:	ca 15       	cp	r28, r10
    6928:	db 05       	cpc	r29, r11
    692a:	39 f7       	brne	.-50     	; 0x68fa <strtod+0x246>
    692c:	64 01       	movw	r12, r8
    692e:	eb 2e       	mov	r14, r27
    6930:	fa 2e       	mov	r15, r26
    6932:	8e 2d       	mov	r24, r14
    6934:	88 0f       	add	r24, r24
    6936:	8f 2d       	mov	r24, r15
    6938:	88 1f       	adc	r24, r24
    693a:	8f 3f       	cpi	r24, 0xFF	; 255
    693c:	49 f0       	breq	.+18     	; 0x6950 <strtod+0x29c>
    693e:	20 e0       	ldi	r18, 0x00	; 0
    6940:	30 e0       	ldi	r19, 0x00	; 0
    6942:	a9 01       	movw	r20, r18
    6944:	c7 01       	movw	r24, r14
    6946:	b6 01       	movw	r22, r12
    6948:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__cmpsf2>
    694c:	81 11       	cpse	r24, r1
    694e:	06 c0       	rjmp	.+12     	; 0x695c <strtod+0x2a8>
    6950:	82 e2       	ldi	r24, 0x22	; 34
    6952:	90 e0       	ldi	r25, 0x00	; 0
    6954:	90 93 cc 0c 	sts	0x0CCC, r25	; 0x800ccc <errno+0x1>
    6958:	80 93 cb 0c 	sts	0x0CCB, r24	; 0x800ccb <errno>
    695c:	c7 01       	movw	r24, r14
    695e:	b6 01       	movw	r22, r12
    6960:	09 c0       	rjmp	.+18     	; 0x6974 <strtod+0x2c0>
    6962:	60 e0       	ldi	r22, 0x00	; 0
    6964:	70 e0       	ldi	r23, 0x00	; 0
    6966:	80 e8       	ldi	r24, 0x80	; 128
    6968:	9f ef       	ldi	r25, 0xFF	; 255
    696a:	04 c0       	rjmp	.+8      	; 0x6974 <strtod+0x2c0>
    696c:	60 e0       	ldi	r22, 0x00	; 0
    696e:	70 e0       	ldi	r23, 0x00	; 0
    6970:	80 ec       	ldi	r24, 0xC0	; 192
    6972:	9f e7       	ldi	r25, 0x7F	; 127
    6974:	df 91       	pop	r29
    6976:	cf 91       	pop	r28
    6978:	1f 91       	pop	r17
    697a:	0f 91       	pop	r16
    697c:	ff 90       	pop	r15
    697e:	ef 90       	pop	r14
    6980:	df 90       	pop	r13
    6982:	cf 90       	pop	r12
    6984:	bf 90       	pop	r11
    6986:	af 90       	pop	r10
    6988:	9f 90       	pop	r9
    698a:	8f 90       	pop	r8
    698c:	7f 90       	pop	r7
    698e:	6f 90       	pop	r6
    6990:	08 95       	ret

00006992 <__ctype_isfalse>:
    6992:	99 27       	eor	r25, r25
    6994:	88 27       	eor	r24, r24

00006996 <__ctype_istrue>:
    6996:	08 95       	ret

00006998 <strncasecmp_P>:
    6998:	fb 01       	movw	r30, r22
    699a:	dc 01       	movw	r26, r24
    699c:	41 50       	subi	r20, 0x01	; 1
    699e:	50 40       	sbci	r21, 0x00	; 0
    69a0:	88 f0       	brcs	.+34     	; 0x69c4 <strncasecmp_P+0x2c>
    69a2:	8d 91       	ld	r24, X+
    69a4:	81 34       	cpi	r24, 0x41	; 65
    69a6:	1c f0       	brlt	.+6      	; 0x69ae <strncasecmp_P+0x16>
    69a8:	8b 35       	cpi	r24, 0x5B	; 91
    69aa:	0c f4       	brge	.+2      	; 0x69ae <strncasecmp_P+0x16>
    69ac:	80 5e       	subi	r24, 0xE0	; 224
    69ae:	65 91       	lpm	r22, Z+
    69b0:	61 34       	cpi	r22, 0x41	; 65
    69b2:	1c f0       	brlt	.+6      	; 0x69ba <strncasecmp_P+0x22>
    69b4:	6b 35       	cpi	r22, 0x5B	; 91
    69b6:	0c f4       	brge	.+2      	; 0x69ba <strncasecmp_P+0x22>
    69b8:	60 5e       	subi	r22, 0xE0	; 224
    69ba:	86 1b       	sub	r24, r22
    69bc:	61 11       	cpse	r22, r1
    69be:	71 f3       	breq	.-36     	; 0x699c <strncasecmp_P+0x4>
    69c0:	99 0b       	sbc	r25, r25
    69c2:	08 95       	ret
    69c4:	88 1b       	sub	r24, r24
    69c6:	fc cf       	rjmp	.-8      	; 0x69c0 <strncasecmp_P+0x28>

000069c8 <strrev>:
    69c8:	dc 01       	movw	r26, r24
    69ca:	fc 01       	movw	r30, r24
    69cc:	67 2f       	mov	r22, r23
    69ce:	71 91       	ld	r23, Z+
    69d0:	77 23       	and	r23, r23
    69d2:	e1 f7       	brne	.-8      	; 0x69cc <strrev+0x4>
    69d4:	32 97       	sbiw	r30, 0x02	; 2
    69d6:	04 c0       	rjmp	.+8      	; 0x69e0 <strrev+0x18>
    69d8:	7c 91       	ld	r23, X
    69da:	6d 93       	st	X+, r22
    69dc:	70 83       	st	Z, r23
    69de:	62 91       	ld	r22, -Z
    69e0:	ae 17       	cp	r26, r30
    69e2:	bf 07       	cpc	r27, r31
    69e4:	c8 f3       	brcs	.-14     	; 0x69d8 <strrev+0x10>
    69e6:	08 95       	ret

000069e8 <__cmpsf2>:
    69e8:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <__fp_cmp>
    69ec:	08 f4       	brcc	.+2      	; 0x69f0 <__cmpsf2+0x8>
    69ee:	81 e0       	ldi	r24, 0x01	; 1
    69f0:	08 95       	ret

000069f2 <__fp_cmp>:
    69f2:	99 0f       	add	r25, r25
    69f4:	00 08       	sbc	r0, r0
    69f6:	55 0f       	add	r21, r21
    69f8:	aa 0b       	sbc	r26, r26
    69fa:	e0 e8       	ldi	r30, 0x80	; 128
    69fc:	fe ef       	ldi	r31, 0xFE	; 254
    69fe:	16 16       	cp	r1, r22
    6a00:	17 06       	cpc	r1, r23
    6a02:	e8 07       	cpc	r30, r24
    6a04:	f9 07       	cpc	r31, r25
    6a06:	c0 f0       	brcs	.+48     	; 0x6a38 <__fp_cmp+0x46>
    6a08:	12 16       	cp	r1, r18
    6a0a:	13 06       	cpc	r1, r19
    6a0c:	e4 07       	cpc	r30, r20
    6a0e:	f5 07       	cpc	r31, r21
    6a10:	98 f0       	brcs	.+38     	; 0x6a38 <__fp_cmp+0x46>
    6a12:	62 1b       	sub	r22, r18
    6a14:	73 0b       	sbc	r23, r19
    6a16:	84 0b       	sbc	r24, r20
    6a18:	95 0b       	sbc	r25, r21
    6a1a:	39 f4       	brne	.+14     	; 0x6a2a <__fp_cmp+0x38>
    6a1c:	0a 26       	eor	r0, r26
    6a1e:	61 f0       	breq	.+24     	; 0x6a38 <__fp_cmp+0x46>
    6a20:	23 2b       	or	r18, r19
    6a22:	24 2b       	or	r18, r20
    6a24:	25 2b       	or	r18, r21
    6a26:	21 f4       	brne	.+8      	; 0x6a30 <__fp_cmp+0x3e>
    6a28:	08 95       	ret
    6a2a:	0a 26       	eor	r0, r26
    6a2c:	09 f4       	brne	.+2      	; 0x6a30 <__fp_cmp+0x3e>
    6a2e:	a1 40       	sbci	r26, 0x01	; 1
    6a30:	a6 95       	lsr	r26
    6a32:	8f ef       	ldi	r24, 0xFF	; 255
    6a34:	81 1d       	adc	r24, r1
    6a36:	81 1d       	adc	r24, r1
    6a38:	08 95       	ret

00006a3a <__mulsf3>:
    6a3a:	0e 94 30 35 	call	0x6a60	; 0x6a60 <__mulsf3x>
    6a3e:	0c 94 8d 2d 	jmp	0x5b1a	; 0x5b1a <__fp_round>
    6a42:	0e 94 7f 2d 	call	0x5afe	; 0x5afe <__fp_pscA>
    6a46:	38 f0       	brcs	.+14     	; 0x6a56 <__mulsf3+0x1c>
    6a48:	0e 94 86 2d 	call	0x5b0c	; 0x5b0c <__fp_pscB>
    6a4c:	20 f0       	brcs	.+8      	; 0x6a56 <__mulsf3+0x1c>
    6a4e:	95 23       	and	r25, r21
    6a50:	11 f0       	breq	.+4      	; 0x6a56 <__mulsf3+0x1c>
    6a52:	0c 94 76 2d 	jmp	0x5aec	; 0x5aec <__fp_inf>
    6a56:	0c 94 7c 2d 	jmp	0x5af8	; 0x5af8 <__fp_nan>
    6a5a:	11 24       	eor	r1, r1
    6a5c:	0c 94 c1 2d 	jmp	0x5b82	; 0x5b82 <__fp_szero>

00006a60 <__mulsf3x>:
    6a60:	0e 94 9e 2d 	call	0x5b3c	; 0x5b3c <__fp_split3>
    6a64:	70 f3       	brcs	.-36     	; 0x6a42 <__mulsf3+0x8>

00006a66 <__mulsf3_pse>:
    6a66:	95 9f       	mul	r25, r21
    6a68:	c1 f3       	breq	.-16     	; 0x6a5a <__mulsf3+0x20>
    6a6a:	95 0f       	add	r25, r21
    6a6c:	50 e0       	ldi	r21, 0x00	; 0
    6a6e:	55 1f       	adc	r21, r21
    6a70:	62 9f       	mul	r22, r18
    6a72:	f0 01       	movw	r30, r0
    6a74:	72 9f       	mul	r23, r18
    6a76:	bb 27       	eor	r27, r27
    6a78:	f0 0d       	add	r31, r0
    6a7a:	b1 1d       	adc	r27, r1
    6a7c:	63 9f       	mul	r22, r19
    6a7e:	aa 27       	eor	r26, r26
    6a80:	f0 0d       	add	r31, r0
    6a82:	b1 1d       	adc	r27, r1
    6a84:	aa 1f       	adc	r26, r26
    6a86:	64 9f       	mul	r22, r20
    6a88:	66 27       	eor	r22, r22
    6a8a:	b0 0d       	add	r27, r0
    6a8c:	a1 1d       	adc	r26, r1
    6a8e:	66 1f       	adc	r22, r22
    6a90:	82 9f       	mul	r24, r18
    6a92:	22 27       	eor	r18, r18
    6a94:	b0 0d       	add	r27, r0
    6a96:	a1 1d       	adc	r26, r1
    6a98:	62 1f       	adc	r22, r18
    6a9a:	73 9f       	mul	r23, r19
    6a9c:	b0 0d       	add	r27, r0
    6a9e:	a1 1d       	adc	r26, r1
    6aa0:	62 1f       	adc	r22, r18
    6aa2:	83 9f       	mul	r24, r19
    6aa4:	a0 0d       	add	r26, r0
    6aa6:	61 1d       	adc	r22, r1
    6aa8:	22 1f       	adc	r18, r18
    6aaa:	74 9f       	mul	r23, r20
    6aac:	33 27       	eor	r19, r19
    6aae:	a0 0d       	add	r26, r0
    6ab0:	61 1d       	adc	r22, r1
    6ab2:	23 1f       	adc	r18, r19
    6ab4:	84 9f       	mul	r24, r20
    6ab6:	60 0d       	add	r22, r0
    6ab8:	21 1d       	adc	r18, r1
    6aba:	82 2f       	mov	r24, r18
    6abc:	76 2f       	mov	r23, r22
    6abe:	6a 2f       	mov	r22, r26
    6ac0:	11 24       	eor	r1, r1
    6ac2:	9f 57       	subi	r25, 0x7F	; 127
    6ac4:	50 40       	sbci	r21, 0x00	; 0
    6ac6:	9a f0       	brmi	.+38     	; 0x6aee <__mulsf3_pse+0x88>
    6ac8:	f1 f0       	breq	.+60     	; 0x6b06 <__mulsf3_pse+0xa0>
    6aca:	88 23       	and	r24, r24
    6acc:	4a f0       	brmi	.+18     	; 0x6ae0 <__mulsf3_pse+0x7a>
    6ace:	ee 0f       	add	r30, r30
    6ad0:	ff 1f       	adc	r31, r31
    6ad2:	bb 1f       	adc	r27, r27
    6ad4:	66 1f       	adc	r22, r22
    6ad6:	77 1f       	adc	r23, r23
    6ad8:	88 1f       	adc	r24, r24
    6ada:	91 50       	subi	r25, 0x01	; 1
    6adc:	50 40       	sbci	r21, 0x00	; 0
    6ade:	a9 f7       	brne	.-22     	; 0x6aca <__mulsf3_pse+0x64>
    6ae0:	9e 3f       	cpi	r25, 0xFE	; 254
    6ae2:	51 05       	cpc	r21, r1
    6ae4:	80 f0       	brcs	.+32     	; 0x6b06 <__mulsf3_pse+0xa0>
    6ae6:	0c 94 76 2d 	jmp	0x5aec	; 0x5aec <__fp_inf>
    6aea:	0c 94 c1 2d 	jmp	0x5b82	; 0x5b82 <__fp_szero>
    6aee:	5f 3f       	cpi	r21, 0xFF	; 255
    6af0:	e4 f3       	brlt	.-8      	; 0x6aea <__mulsf3_pse+0x84>
    6af2:	98 3e       	cpi	r25, 0xE8	; 232
    6af4:	d4 f3       	brlt	.-12     	; 0x6aea <__mulsf3_pse+0x84>
    6af6:	86 95       	lsr	r24
    6af8:	77 95       	ror	r23
    6afa:	67 95       	ror	r22
    6afc:	b7 95       	ror	r27
    6afe:	f7 95       	ror	r31
    6b00:	e7 95       	ror	r30
    6b02:	9f 5f       	subi	r25, 0xFF	; 255
    6b04:	c1 f7       	brne	.-16     	; 0x6af6 <__mulsf3_pse+0x90>
    6b06:	fe 2b       	or	r31, r30
    6b08:	88 0f       	add	r24, r24
    6b0a:	91 1d       	adc	r25, r1
    6b0c:	96 95       	lsr	r25
    6b0e:	87 95       	ror	r24
    6b10:	97 f9       	bld	r25, 7
    6b12:	08 95       	ret

00006b14 <eeprom_read_block>:
    6b14:	dc 01       	movw	r26, r24
    6b16:	cb 01       	movw	r24, r22

00006b18 <eeprom_read_blraw>:
    6b18:	fc 01       	movw	r30, r24
    6b1a:	f9 99       	sbic	0x1f, 1	; 31
    6b1c:	fe cf       	rjmp	.-4      	; 0x6b1a <eeprom_read_blraw+0x2>
    6b1e:	06 c0       	rjmp	.+12     	; 0x6b2c <eeprom_read_blraw+0x14>
    6b20:	f2 bd       	out	0x22, r31	; 34
    6b22:	e1 bd       	out	0x21, r30	; 33
    6b24:	f8 9a       	sbi	0x1f, 0	; 31
    6b26:	31 96       	adiw	r30, 0x01	; 1
    6b28:	00 b4       	in	r0, 0x20	; 32
    6b2a:	0d 92       	st	X+, r0
    6b2c:	41 50       	subi	r20, 0x01	; 1
    6b2e:	50 40       	sbci	r21, 0x00	; 0
    6b30:	b8 f7       	brcc	.-18     	; 0x6b20 <eeprom_read_blraw+0x8>
    6b32:	08 95       	ret

00006b34 <eeprom_update_byte>:
    6b34:	26 2f       	mov	r18, r22

00006b36 <eeprom_update_r18>:
    6b36:	f9 99       	sbic	0x1f, 1	; 31
    6b38:	fe cf       	rjmp	.-4      	; 0x6b36 <eeprom_update_r18>
    6b3a:	92 bd       	out	0x22, r25	; 34
    6b3c:	81 bd       	out	0x21, r24	; 33
    6b3e:	f8 9a       	sbi	0x1f, 0	; 31
    6b40:	01 97       	sbiw	r24, 0x01	; 1
    6b42:	00 b4       	in	r0, 0x20	; 32
    6b44:	02 16       	cp	r0, r18
    6b46:	39 f0       	breq	.+14     	; 0x6b56 <eeprom_update_r18+0x20>
    6b48:	1f ba       	out	0x1f, r1	; 31
    6b4a:	20 bd       	out	0x20, r18	; 32
    6b4c:	0f b6       	in	r0, 0x3f	; 63
    6b4e:	f8 94       	cli
    6b50:	fa 9a       	sbi	0x1f, 2	; 31
    6b52:	f9 9a       	sbi	0x1f, 1	; 31
    6b54:	0f be       	out	0x3f, r0	; 63
    6b56:	08 95       	ret

00006b58 <eeprom_write_block>:
    6b58:	dc 01       	movw	r26, r24
    6b5a:	cb 01       	movw	r24, r22
    6b5c:	03 c0       	rjmp	.+6      	; 0x6b64 <eeprom_write_block+0xc>
    6b5e:	2d 91       	ld	r18, X+
    6b60:	0e 94 b7 35 	call	0x6b6e	; 0x6b6e <eeprom_write_r18>
    6b64:	41 50       	subi	r20, 0x01	; 1
    6b66:	50 40       	sbci	r21, 0x00	; 0
    6b68:	d0 f7       	brcc	.-12     	; 0x6b5e <eeprom_write_block+0x6>
    6b6a:	08 95       	ret

00006b6c <eeprom_write_byte>:
    6b6c:	26 2f       	mov	r18, r22

00006b6e <eeprom_write_r18>:
    6b6e:	f9 99       	sbic	0x1f, 1	; 31
    6b70:	fe cf       	rjmp	.-4      	; 0x6b6e <eeprom_write_r18>
    6b72:	1f ba       	out	0x1f, r1	; 31
    6b74:	92 bd       	out	0x22, r25	; 34
    6b76:	81 bd       	out	0x21, r24	; 33
    6b78:	20 bd       	out	0x20, r18	; 32
    6b7a:	0f b6       	in	r0, 0x3f	; 63
    6b7c:	f8 94       	cli
    6b7e:	fa 9a       	sbi	0x1f, 2	; 31
    6b80:	f9 9a       	sbi	0x1f, 1	; 31
    6b82:	0f be       	out	0x3f, r0	; 63
    6b84:	01 96       	adiw	r24, 0x01	; 1
    6b86:	08 95       	ret

00006b88 <__mulsi3>:
    6b88:	db 01       	movw	r26, r22
    6b8a:	8f 93       	push	r24
    6b8c:	9f 93       	push	r25
    6b8e:	0e 94 f3 35 	call	0x6be6	; 0x6be6 <__muluhisi3>
    6b92:	bf 91       	pop	r27
    6b94:	af 91       	pop	r26
    6b96:	a2 9f       	mul	r26, r18
    6b98:	80 0d       	add	r24, r0
    6b9a:	91 1d       	adc	r25, r1
    6b9c:	a3 9f       	mul	r26, r19
    6b9e:	90 0d       	add	r25, r0
    6ba0:	b2 9f       	mul	r27, r18
    6ba2:	90 0d       	add	r25, r0
    6ba4:	11 24       	eor	r1, r1
    6ba6:	08 95       	ret

00006ba8 <__divmodsi4>:
    6ba8:	05 2e       	mov	r0, r21
    6baa:	97 fb       	bst	r25, 7
    6bac:	1e f4       	brtc	.+6      	; 0x6bb4 <__divmodsi4+0xc>
    6bae:	00 94       	com	r0
    6bb0:	0e 94 eb 35 	call	0x6bd6	; 0x6bd6 <__negsi2>
    6bb4:	57 fd       	sbrc	r21, 7
    6bb6:	07 d0       	rcall	.+14     	; 0x6bc6 <__divmodsi4_neg2>
    6bb8:	0e 94 ef 2d 	call	0x5bde	; 0x5bde <__udivmodsi4>
    6bbc:	07 fc       	sbrc	r0, 7
    6bbe:	03 d0       	rcall	.+6      	; 0x6bc6 <__divmodsi4_neg2>
    6bc0:	4e f4       	brtc	.+18     	; 0x6bd4 <__divmodsi4_exit>
    6bc2:	0c 94 eb 35 	jmp	0x6bd6	; 0x6bd6 <__negsi2>

00006bc6 <__divmodsi4_neg2>:
    6bc6:	50 95       	com	r21
    6bc8:	40 95       	com	r20
    6bca:	30 95       	com	r19
    6bcc:	21 95       	neg	r18
    6bce:	3f 4f       	sbci	r19, 0xFF	; 255
    6bd0:	4f 4f       	sbci	r20, 0xFF	; 255
    6bd2:	5f 4f       	sbci	r21, 0xFF	; 255

00006bd4 <__divmodsi4_exit>:
    6bd4:	08 95       	ret

00006bd6 <__negsi2>:
    6bd6:	90 95       	com	r25
    6bd8:	80 95       	com	r24
    6bda:	70 95       	com	r23
    6bdc:	61 95       	neg	r22
    6bde:	7f 4f       	sbci	r23, 0xFF	; 255
    6be0:	8f 4f       	sbci	r24, 0xFF	; 255
    6be2:	9f 4f       	sbci	r25, 0xFF	; 255
    6be4:	08 95       	ret

00006be6 <__muluhisi3>:
    6be6:	0e 94 06 36 	call	0x6c0c	; 0x6c0c <__umulhisi3>
    6bea:	a5 9f       	mul	r26, r21
    6bec:	90 0d       	add	r25, r0
    6bee:	b4 9f       	mul	r27, r20
    6bf0:	90 0d       	add	r25, r0
    6bf2:	a4 9f       	mul	r26, r20
    6bf4:	80 0d       	add	r24, r0
    6bf6:	91 1d       	adc	r25, r1
    6bf8:	11 24       	eor	r1, r1
    6bfa:	08 95       	ret

00006bfc <__mulshisi3>:
    6bfc:	b7 ff       	sbrs	r27, 7
    6bfe:	0c 94 f3 35 	jmp	0x6be6	; 0x6be6 <__muluhisi3>

00006c02 <__mulohisi3>:
    6c02:	0e 94 f3 35 	call	0x6be6	; 0x6be6 <__muluhisi3>
    6c06:	82 1b       	sub	r24, r18
    6c08:	93 0b       	sbc	r25, r19
    6c0a:	08 95       	ret

00006c0c <__umulhisi3>:
    6c0c:	a2 9f       	mul	r26, r18
    6c0e:	b0 01       	movw	r22, r0
    6c10:	b3 9f       	mul	r27, r19
    6c12:	c0 01       	movw	r24, r0
    6c14:	a3 9f       	mul	r26, r19
    6c16:	70 0d       	add	r23, r0
    6c18:	81 1d       	adc	r24, r1
    6c1a:	11 24       	eor	r1, r1
    6c1c:	91 1d       	adc	r25, r1
    6c1e:	b2 9f       	mul	r27, r18
    6c20:	70 0d       	add	r23, r0
    6c22:	81 1d       	adc	r24, r1
    6c24:	11 24       	eor	r1, r1
    6c26:	91 1d       	adc	r25, r1
    6c28:	08 95       	ret

00006c2a <_exit>:
    6c2a:	f8 94       	cli

00006c2c <__stop_program>:
    6c2c:	ff cf       	rjmp	.-2      	; 0x6c2c <__stop_program>
