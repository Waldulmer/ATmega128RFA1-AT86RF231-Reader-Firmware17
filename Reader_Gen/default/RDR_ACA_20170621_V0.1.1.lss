
RDR_ACA_20170621_V0.1.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000032a  00800200  00006b1e  00006bb2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006b1e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000007a2  0080052a  0080052a  00006edc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006edc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006f38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ad0  00000000  00000000  00006f78  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00011dcd  00000000  00000000  00007a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000485c  00000000  00000000  00019815  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000a83a  00000000  00000000  0001e071  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001d70  00000000  00000000  000288ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000219e0  00000000  00000000  0002a61c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006826  00000000  00000000  0004bffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000950  00000000  00000000  00052822  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000bd2a  00000000  00000000  00053172  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__ctors_end>
       4:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
       8:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
       c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      10:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      14:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      18:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      1c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      20:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      24:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      28:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      2c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      30:	0c 94 bd 26 	jmp	0x4d7a	; 0x4d7a <__vector_12>
      34:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      38:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      3c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      40:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      44:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      48:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      4c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      50:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      54:	0c 94 e1 26 	jmp	0x4dc2	; 0x4dc2 <__vector_21>
      58:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      5c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      60:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      64:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      68:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      6c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      70:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      74:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      78:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      7c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      80:	0c 94 22 26 	jmp	0x4c44	; 0x4c44 <__vector_32>
      84:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      88:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      8c:	0c 94 ae 26 	jmp	0x4d5c	; 0x4d5c <__vector_35>
      90:	0c 94 6d 27 	jmp	0x4eda	; 0x4eda <__vector_36>
      94:	0c 94 b2 27 	jmp	0x4f64	; 0x4f64 <__vector_37>
      98:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      9c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      a0:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      a4:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      a8:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      ac:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      b0:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      b4:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      b8:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      bc:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      c0:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      c4:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      c8:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      cc:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      d0:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      d4:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      d8:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      dc:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      e0:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      e4:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      e8:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      ec:	0c 94 a8 1d 	jmp	0x3b50	; 0x3b50 <__vector_59>
      f0:	0c 94 d0 1d 	jmp	0x3ba0	; 0x3ba0 <__vector_60>
      f4:	0c 94 25 1e 	jmp	0x3c4a	; 0x3c4a <__vector_61>
      f8:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      fc:	0c 94 f8 1d 	jmp	0x3bf0	; 0x3bf0 <__vector_63>
     100:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
     104:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
     108:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
     10c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
     110:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
     114:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
     118:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
     11c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
     120:	fb 04       	cpc	r15, r11
     122:	02 05       	cpc	r16, r2
     124:	e5 07       	cpc	r30, r21
     126:	e5 07       	cpc	r30, r21
     128:	e5 07       	cpc	r30, r21
     12a:	e5 07       	cpc	r30, r21
     12c:	ee 05       	cpc	r30, r14
     12e:	d3 06       	cpc	r13, r19
     130:	e5 07       	cpc	r30, r21
     132:	5c 07       	cpc	r21, r28
     134:	e5 07       	cpc	r30, r21
     136:	4a 05       	cpc	r20, r10
     138:	d7 07       	cpc	r29, r23
     13a:	e5 07       	cpc	r30, r21
     13c:	e8 06       	cpc	r14, r24
     13e:	dd 07       	cpc	r29, r29
     140:	e5 07       	cpc	r30, r21
     142:	e5 07       	cpc	r30, r21
     144:	cc 04       	cpc	r12, r12
     146:	6c 07       	cpc	r22, r28
     148:	e5 07       	cpc	r30, r21
     14a:	e5 07       	cpc	r30, r21
     14c:	e5 07       	cpc	r30, r21
     14e:	e5 07       	cpc	r30, r21
     150:	e5 07       	cpc	r30, r21
     152:	df 07       	cpc	r29, r31
     154:	e5 07       	cpc	r30, r21
     156:	e5 07       	cpc	r30, r21
     158:	e5 07       	cpc	r30, r21
     15a:	e5 07       	cpc	r30, r21
     15c:	ee 05       	cpc	r30, r14
     15e:	e3 07       	cpc	r30, r19
     160:	e5 07       	cpc	r30, r21
     162:	e5 07       	cpc	r30, r21
     164:	e5 07       	cpc	r30, r21
     166:	e5 07       	cpc	r30, r21
     168:	e5 07       	cpc	r30, r21
     16a:	e5 07       	cpc	r30, r21
     16c:	dd 07       	cpc	r29, r29
     16e:	e6 05       	cpc	r30, r6
     170:	34 0f       	add	r19, r20
     172:	2e 0f       	add	r18, r30
     174:	28 0f       	add	r18, r24
     176:	22 0f       	add	r18, r18
     178:	1c 0f       	add	r17, r28
     17a:	16 0f       	add	r17, r22
     17c:	10 0f       	add	r17, r16
     17e:	0a 0f       	add	r16, r26
     180:	04 0f       	add	r16, r20
     182:	8f 0f       	add	r24, r31
     184:	89 0f       	add	r24, r25
     186:	83 0f       	add	r24, r19
     188:	7d 0f       	add	r23, r29
     18a:	77 0f       	add	r23, r23
     18c:	71 0f       	add	r23, r17
     18e:	6b 0f       	add	r22, r27
     190:	65 0f       	add	r22, r21
     192:	5f 0f       	add	r21, r31
     194:	db 14       	cp	r13, r11
     196:	d8 14       	cp	r13, r8
     198:	d5 14       	cp	r13, r5
     19a:	d2 14       	cp	r13, r2
     19c:	cf 14       	cp	r12, r15
     19e:	c0 14       	cp	r12, r0
     1a0:	bd 14       	cp	r11, r13
     1a2:	ba 14       	cp	r11, r10
     1a4:	b7 14       	cp	r11, r7
     1a6:	03 22       	and	r0, r19
     1a8:	64 22       	and	r6, r20
     1aa:	61 22       	and	r6, r17
     1ac:	5e 22       	and	r5, r30
     1ae:	f5 21       	and	r31, r5
     1b0:	1c 22       	and	r1, r28
     1b2:	fc 21       	and	r31, r12
     1b4:	27 22       	and	r2, r23
     1b6:	2f 22       	and	r2, r31
     1b8:	56 22       	and	r5, r22

000001ba <__trampolines_end>:
     1ba:	6e 61       	ori	r22, 0x1E	; 30
     1bc:	6e 00       	.word	0x006e	; ????

000001be <__c.2240>:
     1be:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ce:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1de:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ee:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1fe:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     20e:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     21e:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     22e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     23e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     24e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     25e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     26e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     27e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     28e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     29e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2ae:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002bc <pstr_nan>:
     2bc:	4e 41 4e                                            NAN

000002bf <pstr_inity>:
     2bf:	49 4e 49 54 59                                      INITY

000002c4 <pstr_inf>:
     2c4:	49 4e 46                                            INF

000002c7 <pwr_m10>:
     2c7:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     2d7:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000002df <pwr_p10>:
     2df:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     2ef:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000002f8 <__ctors_end>:
     2f8:	11 24       	eor	r1, r1
     2fa:	1f be       	out	0x3f, r1	; 63
     2fc:	c0 e0       	ldi	r28, 0x00	; 0
     2fe:	d0 e4       	ldi	r29, 0x40	; 64
     300:	de bf       	out	0x3e, r29	; 62
     302:	cd bf       	out	0x3d, r28	; 61

00000304 <__do_copy_data>:
     304:	15 e0       	ldi	r17, 0x05	; 5
     306:	a0 e0       	ldi	r26, 0x00	; 0
     308:	b2 e0       	ldi	r27, 0x02	; 2
     30a:	ee e1       	ldi	r30, 0x1E	; 30
     30c:	fb e6       	ldi	r31, 0x6B	; 107
     30e:	00 e0       	ldi	r16, 0x00	; 0
     310:	0b bf       	out	0x3b, r16	; 59
     312:	02 c0       	rjmp	.+4      	; 0x318 <__do_copy_data+0x14>
     314:	07 90       	elpm	r0, Z+
     316:	0d 92       	st	X+, r0
     318:	aa 32       	cpi	r26, 0x2A	; 42
     31a:	b1 07       	cpc	r27, r17
     31c:	d9 f7       	brne	.-10     	; 0x314 <__do_copy_data+0x10>

0000031e <__do_clear_bss>:
     31e:	2c e0       	ldi	r18, 0x0C	; 12
     320:	aa e2       	ldi	r26, 0x2A	; 42
     322:	b5 e0       	ldi	r27, 0x05	; 5
     324:	01 c0       	rjmp	.+2      	; 0x328 <.do_clear_bss_start>

00000326 <.do_clear_bss_loop>:
     326:	1d 92       	st	X+, r1

00000328 <.do_clear_bss_start>:
     328:	ac 3c       	cpi	r26, 0xCC	; 204
     32a:	b2 07       	cpc	r27, r18
     32c:	e1 f7       	brne	.-8      	; 0x326 <.do_clear_bss_loop>
     32e:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <main>
     332:	0c 94 8d 35 	jmp	0x6b1a	; 0x6b1a <_exit>

00000336 <__bad_interrupt>:
     336:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000033a <ledoff1>:
				Buzzer_off();
				_delay_us(200);
			}
			_delay_ms(25);
		}
	}
     33a:	a0 98       	cbi	0x14, 0	; 20
     33c:	08 95       	ret

0000033e <ledoff2>:
     33e:	a1 98       	cbi	0x14, 1	; 20
     340:	08 95       	ret

00000342 <ValidationTimeout>:
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <VALIDATION_TIMEOUT>
     348:	08 95       	ret

0000034a <CommTimeOut>:
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	80 93 2f 05 	sts	0x052F, r24	; 0x80052f <TOFlag>
     350:	e5 e3       	ldi	r30, 0x35	; 53
     352:	f9 e0       	ldi	r31, 0x09	; 9
     354:	80 81       	ld	r24, Z
     356:	8f 7b       	andi	r24, 0xBF	; 191
     358:	80 83       	st	Z, r24
     35a:	08 95       	ret

0000035c <KeypressTimeOut>:
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <KPTOFlag>
     362:	08 95       	ret

00000364 <SetupTimeout>:
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <SETUP_TIMEOUT>
     36a:	08 95       	ret

0000036c <SetDeviceState>:
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	80 93 b9 09 	sts	0x09B9, r24	; 0x8009b9 <ucDeviceStateFlag>
     372:	08 95       	ret

00000374 <appStartScan>:
     374:	8f ef       	ldi	r24, 0xFF	; 255
     376:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <macInit>
     37a:	0c 94 c9 24 	jmp	0x4992	; 0x4992 <macScan>

0000037e <appAssociate>:
     37e:	e5 ea       	ldi	r30, 0xA5	; 165
     380:	fc e0       	ldi	r31, 0x0C	; 12
     382:	65 81       	ldd	r22, Z+5	; 0x05
     384:	83 81       	ldd	r24, Z+3	; 0x03
     386:	94 81       	ldd	r25, Z+4	; 0x04
     388:	0c 94 75 1f 	jmp	0x3eea	; 0x3eea <macAssociate>

0000038c <appPingReq>:
     38c:	bc 01       	movw	r22, r24
     38e:	83 e0       	ldi	r24, 0x03	; 3
     390:	0c 94 71 21 	jmp	0x42e2	; 0x42e2 <macPing>

00000394 <appPingRsp>:
     394:	0e 94 30 1b 	call	0x3660	; 0x3660 <radioGetSavedRssiValue>
     398:	88 23       	and	r24, r24
     39a:	19 f0       	breq	.+6      	; 0x3a2 <appPingRsp+0xe>
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	80 93 38 0c 	sts	0x0C38, r24	; 0x800c38 <macConfig+0x8>
     3a2:	08 95       	ret

000003a4 <appPacketSendSucceed>:
     3a4:	20 91 45 0c 	lds	r18, 0x0C45	; 0x800c45 <macConfig+0x15>
     3a8:	30 91 46 0c 	lds	r19, 0x0C46	; 0x800c46 <macConfig+0x16>
     3ac:	80 91 3f 0c 	lds	r24, 0x0C3F	; 0x800c3f <macConfig+0xf>
     3b0:	90 91 40 0c 	lds	r25, 0x0C40	; 0x800c40 <macConfig+0x10>
     3b4:	28 17       	cp	r18, r24
     3b6:	39 07       	cpc	r19, r25
     3b8:	11 f4       	brne	.+4      	; 0x3be <appPacketSendSucceed+0x1a>
     3ba:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <failCount>
     3be:	08 95       	ret

000003c0 <appPacketSendAccessFail>:
     3c0:	08 95       	ret

000003c2 <appPacketSendFailed>:
     3c2:	cf 93       	push	r28
     3c4:	0e 94 66 24 	call	0x48cc	; 0x48cc <macIsScanning>
     3c8:	81 11       	cpse	r24, r1
     3ca:	40 c0       	rjmp	.+128    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     3cc:	20 91 3f 0c 	lds	r18, 0x0C3F	; 0x800c3f <macConfig+0xf>
     3d0:	30 91 40 0c 	lds	r19, 0x0C40	; 0x800c40 <macConfig+0x10>
     3d4:	c1 e0       	ldi	r28, 0x01	; 1
     3d6:	80 91 45 0c 	lds	r24, 0x0C45	; 0x800c45 <macConfig+0x15>
     3da:	90 91 46 0c 	lds	r25, 0x0C46	; 0x800c46 <macConfig+0x16>
     3de:	82 17       	cp	r24, r18
     3e0:	93 07       	cpc	r25, r19
     3e2:	11 f0       	breq	.+4      	; 0x3e8 <appPacketSendFailed+0x26>
     3e4:	c0 e0       	ldi	r28, 0x00	; 0
     3e6:	05 c0       	rjmp	.+10     	; 0x3f2 <appPacketSendFailed+0x30>
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	50 e0       	ldi	r21, 0x00	; 0
     3ec:	60 e0       	ldi	r22, 0x00	; 0
     3ee:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <macDataRequest>
     3f2:	80 91 2c 05 	lds	r24, 0x052C	; 0x80052c <failCount>
     3f6:	8f 5f       	subi	r24, 0xFF	; 255
     3f8:	80 93 2c 05 	sts	0x052C, r24	; 0x80052c <failCount>
     3fc:	83 30       	cpi	r24, 0x03	; 3
     3fe:	30 f1       	brcs	.+76     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     400:	cc 23       	and	r28, r28
     402:	a9 f0       	breq	.+42     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     404:	10 92 38 0c 	sts	0x0C38, r1	; 0x800c38 <macConfig+0x8>
     408:	88 e0       	ldi	r24, 0x08	; 8
     40a:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <radioRandom>
     40e:	28 2f       	mov	r18, r24
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	2e 5c       	subi	r18, 0xCE	; 206
     414:	3f 4f       	sbci	r19, 0xFF	; 255
     416:	4e e1       	ldi	r20, 0x1E	; 30
     418:	42 9f       	mul	r20, r18
     41a:	c0 01       	movw	r24, r0
     41c:	43 9f       	mul	r20, r19
     41e:	90 0d       	add	r25, r0
     420:	11 24       	eor	r1, r1
     422:	6a eb       	ldi	r22, 0xBA	; 186
     424:	71 e0       	ldi	r23, 0x01	; 1
     426:	88 51       	subi	r24, 0x18	; 24
     428:	9c 4f       	sbci	r25, 0xFC	; 252
     42a:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <macSetAlarm>
     42e:	80 91 45 0c 	lds	r24, 0x0C45	; 0x800c45 <macConfig+0x15>
     432:	90 91 46 0c 	lds	r25, 0x0C46	; 0x800c46 <macConfig+0x16>
     436:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <macIsChild>
     43a:	88 23       	and	r24, r24
     43c:	39 f0       	breq	.+14     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     43e:	80 91 45 0c 	lds	r24, 0x0C45	; 0x800c45 <macConfig+0x15>
     442:	90 91 46 0c 	lds	r25, 0x0C46	; 0x800c46 <macConfig+0x16>
     446:	cf 91       	pop	r28
     448:	0c 94 1a 20 	jmp	0x4034	; 0x4034 <macRemoveChild>
     44c:	cf 91       	pop	r28
     44e:	08 95       	ret

00000450 <appDataIndication>:
     450:	80 91 2c 0b 	lds	r24, 0x0B2C	; 0x800b2c <mac_buffer_rx>
     454:	10 92 0e 0b 	sts	0x0B0E, r1	; 0x800b0e <ucSendDataSize>
     458:	88 23       	and	r24, r24
     45a:	11 f1       	breq	.+68     	; 0x4a0 <appDataIndication+0x50>
     45c:	80 91 3a 0b 	lds	r24, 0x0B3A	; 0x800b3a <mac_buffer_rx+0xe>
     460:	8f 77       	andi	r24, 0x7F	; 127
     462:	81 30       	cpi	r24, 0x01	; 1
     464:	e9 f4       	brne	.+58     	; 0x4a0 <appDataIndication+0x50>
     466:	80 91 3b 0b 	lds	r24, 0x0B3B	; 0x800b3b <mac_buffer_rx+0xf>
     46a:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <ucDataLength.4360>
     46e:	90 e8       	ldi	r25, 0x80	; 128
     470:	e7 e3       	ldi	r30, 0x37	; 55
     472:	f9 e0       	ldi	r31, 0x09	; 9
     474:	df 01       	movw	r26, r30
     476:	1d 92       	st	X+, r1
     478:	9a 95       	dec	r25
     47a:	e9 f7       	brne	.-6      	; 0x476 <appDataIndication+0x26>
     47c:	ac e3       	ldi	r26, 0x3C	; 60
     47e:	bb e0       	ldi	r27, 0x0B	; 11
     480:	9f 01       	movw	r18, r30
     482:	9e 2f       	mov	r25, r30
     484:	92 1b       	sub	r25, r18
     486:	98 17       	cp	r25, r24
     488:	18 f4       	brcc	.+6      	; 0x490 <appDataIndication+0x40>
     48a:	9d 91       	ld	r25, X+
     48c:	91 93       	st	Z+, r25
     48e:	f9 cf       	rjmp	.-14     	; 0x482 <appDataIndication+0x32>
     490:	87 e3       	ldi	r24, 0x37	; 55
     492:	99 e0       	ldi	r25, 0x09	; 9
     494:	0e 94 cc 09 	call	0x1398	; 0x1398 <extractIncomingMessage>
     498:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
     49c:	10 92 34 09 	sts	0x0934, r1	; 0x800934 <ucNumberOfRetry>
     4a0:	08 95       	ret

000004a2 <appChildAssociated>:
     4a2:	a1 9a       	sbi	0x14, 1	; 20
     4a4:	6f e9       	ldi	r22, 0x9F	; 159
     4a6:	71 e0       	ldi	r23, 0x01	; 1
     4a8:	8a e0       	ldi	r24, 0x0A	; 10
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	0c 94 5b 25 	jmp	0x4ab6	; 0x4ab6 <macSetAlarm>

000004b0 <appAssociateConfirm>:
     4b0:	81 11       	cpse	r24, r1
     4b2:	06 c0       	rjmp	.+12     	; 0x4c0 <appAssociateConfirm+0x10>
     4b4:	a1 9a       	sbi	0x14, 1	; 20
     4b6:	6f e9       	ldi	r22, 0x9F	; 159
     4b8:	71 e0       	ldi	r23, 0x01	; 1
     4ba:	8a e0       	ldi	r24, 0x0A	; 10
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	11 c0       	rjmp	.+34     	; 0x4e2 <appAssociateConfirm+0x32>
     4c0:	88 e0       	ldi	r24, 0x08	; 8
     4c2:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <radioRandom>
     4c6:	28 2f       	mov	r18, r24
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	2e 5c       	subi	r18, 0xCE	; 206
     4cc:	3f 4f       	sbci	r19, 0xFF	; 255
     4ce:	4e e1       	ldi	r20, 0x1E	; 30
     4d0:	42 9f       	mul	r20, r18
     4d2:	c0 01       	movw	r24, r0
     4d4:	43 9f       	mul	r20, r19
     4d6:	90 0d       	add	r25, r0
     4d8:	11 24       	eor	r1, r1
     4da:	6a eb       	ldi	r22, 0xBA	; 186
     4dc:	71 e0       	ldi	r23, 0x01	; 1
     4de:	88 51       	subi	r24, 0x18	; 24
     4e0:	9c 4f       	sbci	r25, 0xFC	; 252
     4e2:	0c 94 5b 25 	jmp	0x4ab6	; 0x4ab6 <macSetAlarm>

000004e6 <appScanConfirm>:
     4e6:	88 23       	and	r24, r24
     4e8:	29 f0       	breq	.+10     	; 0x4f4 <appScanConfirm+0xe>
     4ea:	6f eb       	ldi	r22, 0xBF	; 191
     4ec:	71 e0       	ldi	r23, 0x01	; 1
     4ee:	8e e1       	ldi	r24, 0x1E	; 30
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	0e c0       	rjmp	.+28     	; 0x510 <appScanConfirm+0x2a>
     4f4:	88 e0       	ldi	r24, 0x08	; 8
     4f6:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <radioRandom>
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	05 96       	adiw	r24, 0x05	; 5
     4fe:	6a eb       	ldi	r22, 0xBA	; 186
     500:	71 e0       	ldi	r23, 0x01	; 1
     502:	2a e0       	ldi	r18, 0x0A	; 10
     504:	ac 01       	movw	r20, r24
     506:	24 9f       	mul	r18, r20
     508:	c0 01       	movw	r24, r0
     50a:	25 9f       	mul	r18, r21
     50c:	90 0d       	add	r25, r0
     50e:	11 24       	eor	r1, r1
     510:	0c 94 5b 25 	jmp	0x4ab6	; 0x4ab6 <macSetAlarm>

00000514 <checkEeprom>:
     514:	8f 92       	push	r8
     516:	9f 92       	push	r9
     518:	af 92       	push	r10
     51a:	bf 92       	push	r11
     51c:	cf 92       	push	r12
     51e:	df 92       	push	r13
     520:	ef 92       	push	r14
     522:	ff 92       	push	r15
     524:	0f 93       	push	r16
     526:	1f 93       	push	r17
     528:	cf 93       	push	r28
     52a:	df 93       	push	r29
     52c:	cd b7       	in	r28, 0x3d	; 61
     52e:	de b7       	in	r29, 0x3e	; 62
     530:	62 97       	sbiw	r28, 0x12	; 18
     532:	0f b6       	in	r0, 0x3f	; 63
     534:	f8 94       	cli
     536:	de bf       	out	0x3e, r29	; 62
     538:	0f be       	out	0x3f, r0	; 63
     53a:	cd bf       	out	0x3d, r28	; 61
     53c:	87 e0       	ldi	r24, 0x07	; 7
     53e:	89 8b       	std	Y+17, r24	; 0x11
     540:	ae 01       	movw	r20, r28
     542:	47 5f       	subi	r20, 0xF7	; 247
     544:	5f 4f       	sbci	r21, 0xFF	; 255
     546:	68 e0       	ldi	r22, 0x08	; 8
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <halGetEeprom>
     550:	89 84       	ldd	r8, Y+9	; 0x09
     552:	9a 84       	ldd	r9, Y+10	; 0x0a
     554:	ab 84       	ldd	r10, Y+11	; 0x0b
     556:	bc 84       	ldd	r11, Y+12	; 0x0c
     558:	cd 84       	ldd	r12, Y+13	; 0x0d
     55a:	de 84       	ldd	r13, Y+14	; 0x0e
     55c:	ef 84       	ldd	r14, Y+15	; 0x0f
     55e:	f8 88       	ldd	r15, Y+16	; 0x10
     560:	5f ef       	ldi	r21, 0xFF	; 255
     562:	85 16       	cp	r8, r21
     564:	95 06       	cpc	r9, r21
     566:	a5 06       	cpc	r10, r21
     568:	b5 06       	cpc	r11, r21
     56a:	09 f0       	breq	.+2      	; 0x56e <checkEeprom+0x5a>
     56c:	70 c0       	rjmp	.+224    	; 0x64e <checkEeprom+0x13a>
     56e:	94 01       	movw	r18, r8
     570:	a5 01       	movw	r20, r10
     572:	b6 01       	movw	r22, r12
     574:	c7 01       	movw	r24, r14
     576:	00 e2       	ldi	r16, 0x20	; 32
     578:	0e 94 01 2e 	call	0x5c02	; 0x5c02 <__lshrdi3>
     57c:	69 01       	movw	r12, r18
     57e:	7a 01       	movw	r14, r20
     580:	2f 3f       	cpi	r18, 0xFF	; 255
     582:	3f 4f       	sbci	r19, 0xFF	; 255
     584:	4f 4f       	sbci	r20, 0xFF	; 255
     586:	5f 4f       	sbci	r21, 0xFF	; 255
     588:	61 05       	cpc	r22, r1
     58a:	71 05       	cpc	r23, r1
     58c:	81 05       	cpc	r24, r1
     58e:	91 05       	cpc	r25, r1
     590:	09 f0       	breq	.+2      	; 0x594 <checkEeprom+0x80>
     592:	50 c0       	rjmp	.+160    	; 0x634 <checkEeprom+0x120>
     594:	8e 01       	movw	r16, r28
     596:	0f 5f       	subi	r16, 0xFF	; 255
     598:	1f 4f       	sbci	r17, 0xFF	; 255
     59a:	88 e0       	ldi	r24, 0x08	; 8
     59c:	f8 01       	movw	r30, r16
     59e:	11 92       	st	Z+, r1
     5a0:	8a 95       	dec	r24
     5a2:	e9 f7       	brne	.-6      	; 0x59e <checkEeprom+0x8a>
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	0e 94 ac 1b 	call	0x3758	; 0x3758 <radioInit>
     5aa:	86 e0       	ldi	r24, 0x06	; 6
     5ac:	0e 94 06 1c 	call	0x380c	; 0x380c <radioSetTrxState>
     5b0:	78 01       	movw	r14, r16
     5b2:	30 e0       	ldi	r19, 0x00	; 0
     5b4:	dd 24       	eor	r13, r13
     5b6:	da 94       	dec	r13
     5b8:	34 30       	cpi	r19, 0x04	; 4
     5ba:	18 f4       	brcc	.+6      	; 0x5c2 <checkEeprom+0xae>
     5bc:	f7 01       	movw	r30, r14
     5be:	d0 82       	st	Z, r13
     5c0:	1a c0       	rjmp	.+52     	; 0x5f6 <checkEeprom+0xe2>
     5c2:	3a 8b       	std	Y+18, r19	; 0x12
     5c4:	0e 94 84 1b 	call	0x3708	; 0x3708 <radioGetTrxState>
     5c8:	8f 7e       	andi	r24, 0xEF	; 239
     5ca:	3a 89       	ldd	r19, Y+18	; 0x12
     5cc:	86 30       	cpi	r24, 0x06	; 6
     5ce:	99 f4       	brne	.+38     	; 0x5f6 <checkEeprom+0xe2>
     5d0:	44 e0       	ldi	r20, 0x04	; 4
     5d2:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <__TEXT_REGION_LENGTH__+0x7e0146>
     5d6:	f7 01       	movw	r30, r14
     5d8:	90 81       	ld	r25, Z
     5da:	f4 e0       	ldi	r31, 0x04	; 4
     5dc:	9f 9f       	mul	r25, r31
     5de:	c0 01       	movw	r24, r0
     5e0:	11 24       	eor	r1, r1
     5e2:	92 2f       	mov	r25, r18
     5e4:	90 76       	andi	r25, 0x60	; 96
     5e6:	92 95       	swap	r25
     5e8:	96 95       	lsr	r25
     5ea:	97 70       	andi	r25, 0x07	; 7
     5ec:	89 2b       	or	r24, r25
     5ee:	f7 01       	movw	r30, r14
     5f0:	80 83       	st	Z, r24
     5f2:	41 50       	subi	r20, 0x01	; 1
     5f4:	71 f7       	brne	.-36     	; 0x5d2 <checkEeprom+0xbe>
     5f6:	3f 5f       	subi	r19, 0xFF	; 255
     5f8:	ff ef       	ldi	r31, 0xFF	; 255
     5fa:	ef 1a       	sub	r14, r31
     5fc:	ff 0a       	sbc	r15, r31
     5fe:	38 30       	cpi	r19, 0x08	; 8
     600:	d9 f6       	brne	.-74     	; 0x5b8 <checkEeprom+0xa4>
     602:	a8 01       	movw	r20, r16
     604:	68 e0       	ldi	r22, 0x08	; 8
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <halPutEeprom>
     60e:	ae 01       	movw	r20, r28
     610:	4f 5e       	subi	r20, 0xEF	; 239
     612:	5f 4f       	sbci	r21, 0xFF	; 255
     614:	62 e0       	ldi	r22, 0x02	; 2
     616:	82 e2       	ldi	r24, 0x22	; 34
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <halPutEeprom>
     61e:	60 e0       	ldi	r22, 0x00	; 0
     620:	8c e6       	ldi	r24, 0x6C	; 108
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	0e 94 12 35 	call	0x6a24	; 0x6a24 <eeprom_update_byte>
     628:	60 e0       	ldi	r22, 0x00	; 0
     62a:	87 e7       	ldi	r24, 0x77	; 119
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	0e 94 12 35 	call	0x6a24	; 0x6a24 <eeprom_update_byte>
     632:	0d c0       	rjmp	.+26     	; 0x64e <checkEeprom+0x13a>
     634:	cd 28       	or	r12, r13
     636:	ce 28       	or	r12, r14
     638:	cf 28       	or	r12, r15
     63a:	49 f0       	breq	.+18     	; 0x64e <checkEeprom+0x13a>
     63c:	ae 01       	movw	r20, r28
     63e:	4f 5e       	subi	r20, 0xEF	; 239
     640:	5f 4f       	sbci	r21, 0xFF	; 255
     642:	62 e0       	ldi	r22, 0x02	; 2
     644:	82 e2       	ldi	r24, 0x22	; 34
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <halPutEeprom>
     64c:	00 00       	nop
     64e:	62 96       	adiw	r28, 0x12	; 18
     650:	0f b6       	in	r0, 0x3f	; 63
     652:	f8 94       	cli
     654:	de bf       	out	0x3e, r29	; 62
     656:	0f be       	out	0x3f, r0	; 63
     658:	cd bf       	out	0x3d, r28	; 61
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	1f 91       	pop	r17
     660:	0f 91       	pop	r16
     662:	ff 90       	pop	r15
     664:	ef 90       	pop	r14
     666:	df 90       	pop	r13
     668:	cf 90       	pop	r12
     66a:	bf 90       	pop	r11
     66c:	af 90       	pop	r10
     66e:	9f 90       	pop	r9
     670:	8f 90       	pop	r8
     672:	08 95       	ret

00000674 <appInit>:
     674:	0f 93       	push	r16
     676:	1f 93       	push	r17
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	1f 92       	push	r1
     67e:	cd b7       	in	r28, 0x3d	; 61
     680:	de b7       	in	r29, 0x3e	; 62
     682:	83 b3       	in	r24, 0x13	; 19
     684:	87 60       	ori	r24, 0x07	; 7
     686:	83 bb       	out	0x13, r24	; 19
     688:	84 b3       	in	r24, 0x14	; 20
     68a:	88 7f       	andi	r24, 0xF8	; 248
     68c:	84 bb       	out	0x14, r24	; 20
     68e:	84 b3       	in	r24, 0x14	; 20
     690:	87 60       	ori	r24, 0x07	; 7
     692:	84 bb       	out	0x14, r24	; 20
     694:	6b 9a       	sbi	0x0d, 3	; 13
     696:	73 98       	cbi	0x0e, 3	; 14
     698:	84 b3       	in	r24, 0x14	; 20
     69a:	88 7f       	andi	r24, 0xF8	; 248
     69c:	84 bb       	out	0x14, r24	; 20
     69e:	a0 9a       	sbi	0x14, 0	; 20
     6a0:	83 e1       	ldi	r24, 0x13	; 19
     6a2:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
     6a6:	6d e9       	ldi	r22, 0x9D	; 157
     6a8:	71 e0       	ldi	r23, 0x01	; 1
     6aa:	89 e1       	ldi	r24, 0x19	; 25
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <macSetAlarm>
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	80 93 b9 09 	sts	0x09B9, r24	; 0x8009b9 <ucDeviceStateFlag>
     6b8:	0e 94 8a 02 	call	0x514	; 0x514 <checkEeprom>
     6bc:	0e 94 07 14 	call	0x280e	; 0x280e <initReader>
     6c0:	6c ec       	ldi	r22, 0xCC	; 204
     6c2:	76 e2       	ldi	r23, 0x26	; 38
     6c4:	88 e2       	ldi	r24, 0x28	; 40
     6c6:	93 e2       	ldi	r25, 0x23	; 35
     6c8:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <macSetAlarm>
     6cc:	08 2f       	mov	r16, r24
     6ce:	10 e0       	ldi	r17, 0x00	; 0
     6d0:	90 91 b8 09 	lds	r25, 0x09B8	; 0x8009b8 <ucMachineWait>
     6d4:	91 11       	cpse	r25, r1
     6d6:	1e c0       	rjmp	.+60     	; 0x714 <appInit+0xa0>
     6d8:	90 91 b9 09 	lds	r25, 0x09B9	; 0x8009b9 <ucDeviceStateFlag>
     6dc:	91 30       	cpi	r25, 0x01	; 1
     6de:	51 f4       	brne	.+20     	; 0x6f4 <appInit+0x80>
     6e0:	0e 94 57 12 	call	0x24ae	; 0x24ae <SQACAInitializationSequence>
     6e4:	66 eb       	ldi	r22, 0xB6	; 182
     6e6:	71 e0       	ldi	r23, 0x01	; 1
     6e8:	8c e2       	ldi	r24, 0x2C	; 44
     6ea:	91 e0       	ldi	r25, 0x01	; 1
     6ec:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <macSetAlarm>
     6f0:	18 2f       	mov	r17, r24
     6f2:	ee cf       	rjmp	.-36     	; 0x6d0 <appInit+0x5c>
     6f4:	92 30       	cpi	r25, 0x02	; 2
     6f6:	39 f4       	brne	.+14     	; 0x706 <appInit+0x92>
     6f8:	80 2f       	mov	r24, r16
     6fa:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <macTimerEnd>
     6fe:	81 2f       	mov	r24, r17
     700:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <macTimerEnd>
     704:	07 c0       	rjmp	.+14     	; 0x714 <appInit+0xa0>
     706:	0e 94 8b 21 	call	0x4316	; 0x4316 <mac_event_pending>
     70a:	88 23       	and	r24, r24
     70c:	09 f3       	breq	.-62     	; 0x6d0 <appInit+0x5c>
     70e:	0e 94 df 21 	call	0x43be	; 0x43be <macTask>
     712:	de cf       	rjmp	.-68     	; 0x6d0 <appInit+0x5c>
     714:	66 eb       	ldi	r22, 0xB6	; 182
     716:	71 e0       	ldi	r23, 0x01	; 1
     718:	8c e2       	ldi	r24, 0x2C	; 44
     71a:	91 e0       	ldi	r25, 0x01	; 1
     71c:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <macSetAlarm>
     720:	ae 01       	movw	r20, r28
     722:	4f 5f       	subi	r20, 0xFF	; 255
     724:	5f 4f       	sbci	r21, 0xFF	; 255
     726:	61 e0       	ldi	r22, 0x01	; 1
     728:	8e e1       	ldi	r24, 0x1E	; 30
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <halGetEeprom>
     730:	89 81       	ldd	r24, Y+1	; 0x01
     732:	90 91 f4 0a 	lds	r25, 0x0AF4	; 0x800af4 <SQACAMachineStatus>
     736:	8f 3f       	cpi	r24, 0xFF	; 255
     738:	79 f4       	brne	.+30     	; 0x758 <appInit+0xe4>
     73a:	99 23       	and	r25, r25
     73c:	69 f0       	breq	.+26     	; 0x758 <appInit+0xe4>
     73e:	44 ef       	ldi	r20, 0xF4	; 244
     740:	5a e0       	ldi	r21, 0x0A	; 10
     742:	61 e0       	ldi	r22, 0x01	; 1
     744:	8e e1       	ldi	r24, 0x1E	; 30
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <halPutEeprom>
     74c:	45 ef       	ldi	r20, 0xF5	; 245
     74e:	5a e0       	ldi	r21, 0x0A	; 10
     750:	61 e0       	ldi	r22, 0x01	; 1
     752:	8f e1       	ldi	r24, 0x1F	; 31
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	1a c0       	rjmp	.+52     	; 0x78c <appInit+0x118>
     758:	98 17       	cp	r25, r24
     75a:	d1 f0       	breq	.+52     	; 0x790 <appInit+0x11c>
     75c:	44 ef       	ldi	r20, 0xF4	; 244
     75e:	5a e0       	ldi	r21, 0x0A	; 10
     760:	61 e0       	ldi	r22, 0x01	; 1
     762:	8e e1       	ldi	r24, 0x1E	; 30
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <halPutEeprom>
     76a:	45 ef       	ldi	r20, 0xF5	; 245
     76c:	5a e0       	ldi	r21, 0x0A	; 10
     76e:	61 e0       	ldi	r22, 0x01	; 1
     770:	8f e1       	ldi	r24, 0x1F	; 31
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <halPutEeprom>
     778:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
     77c:	82 60       	ori	r24, 0x02	; 2
     77e:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
     782:	45 e3       	ldi	r20, 0x35	; 53
     784:	59 e0       	ldi	r21, 0x09	; 9
     786:	61 e0       	ldi	r22, 0x01	; 1
     788:	82 e2       	ldi	r24, 0x22	; 34
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <halPutEeprom>
     790:	0e 94 ba 01 	call	0x374	; 0x374 <appStartScan>
     794:	80 91 b9 09 	lds	r24, 0x09B9	; 0x8009b9 <ucDeviceStateFlag>
     798:	82 30       	cpi	r24, 0x02	; 2
     79a:	71 f4       	brne	.+28     	; 0x7b8 <appInit+0x144>
     79c:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <displayVersion>
     7a0:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
     7a4:	81 fd       	sbrc	r24, 1
     7a6:	08 c0       	rjmp	.+16     	; 0x7b8 <appInit+0x144>
     7a8:	0e 94 6f 12 	call	0x24de	; 0x24de <getSQReaderMachineSetup>
     7ac:	10 92 2f 0a 	sts	0x0A2F, r1	; 0x800a2f <ucCardStatus>
     7b0:	82 e0       	ldi	r24, 0x02	; 2
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	0e 94 40 12 	call	0x2480	; 0x2480 <cardRemoved>
     7b8:	00 00       	nop
     7ba:	0f 90       	pop	r0
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	1f 91       	pop	r17
     7c2:	0f 91       	pop	r16
     7c4:	08 95       	ret

000007c6 <GetParam>:
     7c6:	ef 92       	push	r14
     7c8:	ff 92       	push	r15
     7ca:	0f 93       	push	r16
     7cc:	1f 93       	push	r17
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
     7d2:	7a 01       	movw	r14, r20
     7d4:	fb 01       	movw	r30, r22
     7d6:	01 90       	ld	r0, Z+
     7d8:	00 20       	and	r0, r0
     7da:	e9 f7       	brne	.-6      	; 0x7d6 <GetParam+0x10>
     7dc:	31 97       	sbiw	r30, 0x01	; 1
     7de:	ef 01       	movw	r28, r30
     7e0:	c6 1b       	sub	r28, r22
     7e2:	d7 0b       	sbc	r29, r23
     7e4:	0e 94 35 32 	call	0x646a	; 0x646a <strstr>
     7e8:	00 97       	sbiw	r24, 0x00	; 0
     7ea:	c1 f0       	breq	.+48     	; 0x81c <GetParam+0x56>
     7ec:	8c 01       	movw	r16, r24
     7ee:	0c 0f       	add	r16, r28
     7f0:	11 1d       	adc	r17, r1
     7f2:	b7 01       	movw	r22, r14
     7f4:	c8 01       	movw	r24, r16
     7f6:	0e 94 35 32 	call	0x646a	; 0x646a <strstr>
     7fa:	00 97       	sbiw	r24, 0x00	; 0
     7fc:	79 f0       	breq	.+30     	; 0x81c <GetParam+0x56>
     7fe:	ec 01       	movw	r28, r24
     800:	c0 1b       	sub	r28, r16
     802:	d1 0b       	sbc	r29, r17
     804:	ae 01       	movw	r20, r28
     806:	b8 01       	movw	r22, r16
     808:	8e e3       	ldi	r24, 0x3E	; 62
     80a:	98 e0       	ldi	r25, 0x08	; 8
     80c:	0e 94 f7 31 	call	0x63ee	; 0x63ee <memcpy>
     810:	c2 5c       	subi	r28, 0xC2	; 194
     812:	d7 4f       	sbci	r29, 0xF7	; 247
     814:	18 82       	st	Y, r1
     816:	8e e3       	ldi	r24, 0x3E	; 62
     818:	98 e0       	ldi	r25, 0x08	; 8
     81a:	02 c0       	rjmp	.+4      	; 0x820 <GetParam+0x5a>
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	1f 91       	pop	r17
     826:	0f 91       	pop	r16
     828:	ff 90       	pop	r15
     82a:	ef 90       	pop	r14
     82c:	08 95       	ret

0000082e <DevicePoll>:

	void DevicePoll(void)
	{
		#if (DEVICE_CONNECTED == ACA_MACHINE )

		SQACAMachineStatusCommSequence();					//SQ Payment System Driven Vending
     82e:	0e 94 4f 12 	call	0x249e	; 0x249e <SQACAMachineStatusCommSequence>
		macSetAlarm(DEVICE_POLL_PERIOD,SetDeviceState);
     832:	66 eb       	ldi	r22, 0xB6	; 182
     834:	71 e0       	ldi	r23, 0x01	; 1
     836:	8c e2       	ldi	r24, 0x2C	; 44
     838:	91 e0       	ldi	r25, 0x01	; 1
     83a:	0c 94 5b 25 	jmp	0x4ab6	; 0x4ab6 <macSetAlarm>

0000083e <padLeft>:
	\param paddedLength is the data size.
	\param pad is pointer to data to be converted.
	*/
	
	char * padLeft(char * string, u8 paddedLength, const char * pad)
	{
     83e:	7f 92       	push	r7
     840:	8f 92       	push	r8
     842:	9f 92       	push	r9
     844:	af 92       	push	r10
     846:	bf 92       	push	r11
     848:	cf 92       	push	r12
     84a:	df 92       	push	r13
     84c:	ef 92       	push	r14
     84e:	ff 92       	push	r15
     850:	0f 93       	push	r16
     852:	1f 93       	push	r17
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	7c 01       	movw	r14, r24
     85a:	76 2e       	mov	r7, r22
     85c:	4a 01       	movw	r8, r20
		size_t stringLength = strlen(string);
     85e:	ec 01       	movw	r28, r24
     860:	09 90       	ld	r0, Y+
     862:	00 20       	and	r0, r0
     864:	e9 f7       	brne	.-6      	; 0x860 <padLeft+0x22>
     866:	21 97       	sbiw	r28, 0x01	; 1
     868:	c8 1b       	sub	r28, r24
     86a:	d9 0b       	sbc	r29, r25
		size_t lenpad = strlen(pad);
     86c:	fa 01       	movw	r30, r20
     86e:	01 90       	ld	r0, Z+
     870:	00 20       	and	r0, r0
     872:	e9 f7       	brne	.-6      	; 0x86e <padLeft+0x30>
     874:	31 97       	sbiw	r30, 0x01	; 1
     876:	8f 01       	movw	r16, r30
     878:	04 1b       	sub	r16, r20
     87a:	15 0b       	sbc	r17, r21
		u8 i = paddedLength;
		
		if (stringLength >= paddedLength)
     87c:	c6 2e       	mov	r12, r22
     87e:	d1 2c       	mov	r13, r1
     880:	cc 15       	cp	r28, r12
     882:	dd 05       	cpc	r29, r13
     884:	20 f5       	brcc	.+72     	; 0x8ce <padLeft+0x90>
		{
			return NULL;//'\0';
		}

		char * padded = (char*)malloc(paddedLength + 1); // allocate memory for new string
     886:	c6 01       	movw	r24, r12
     888:	01 96       	adiw	r24, 0x01	; 1
     88a:	0e 94 1d 2e 	call	0x5c3a	; 0x5c3a <malloc>
     88e:	5c 01       	movw	r10, r24
		
		for(; paddedLength > stringLength; paddedLength--, padded += lenpad)
     890:	87 2d       	mov	r24, r7
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	c8 17       	cp	r28, r24
     896:	d9 07       	cpc	r29, r25
     898:	48 f4       	brcc	.+18     	; 0x8ac <padLeft+0x6e>
		{
			strncpy(padded, pad, lenpad);
     89a:	a8 01       	movw	r20, r16
     89c:	b4 01       	movw	r22, r8
     89e:	c5 01       	movw	r24, r10
     8a0:	0e 94 1b 32 	call	0x6436	; 0x6436 <strncpy>
			return NULL;//'\0';
		}

		char * padded = (char*)malloc(paddedLength + 1); // allocate memory for new string
		
		for(; paddedLength > stringLength; paddedLength--, padded += lenpad)
     8a4:	7a 94       	dec	r7
     8a6:	a0 0e       	add	r10, r16
     8a8:	b1 1e       	adc	r11, r17
     8aa:	f2 cf       	rjmp	.-28     	; 0x890 <padLeft+0x52>
		{
			strncpy(padded, pad, lenpad);
		}
		
		strncpy(padded, string, stringLength); /* copy without '\0' */
     8ac:	ae 01       	movw	r20, r28
     8ae:	b7 01       	movw	r22, r14
     8b0:	c5 01       	movw	r24, r10
     8b2:	0e 94 1b 32 	call	0x6436	; 0x6436 <strncpy>
		padded += stringLength; /* prepare for first append of pad */
     8b6:	ca 0d       	add	r28, r10
     8b8:	db 1d       	adc	r29, r11
		*padded = '\0';
     8ba:	18 82       	st	Y, r1

		padded = (padded - i);
     8bc:	cc 19       	sub	r28, r12
     8be:	dd 09       	sbc	r29, r13
		strncpy(string,padded,i);
     8c0:	a6 01       	movw	r20, r12
     8c2:	be 01       	movw	r22, r28
     8c4:	c7 01       	movw	r24, r14
     8c6:	0e 94 1b 32 	call	0x6436	; 0x6436 <strncpy>
		
		return padded;
     8ca:	ce 01       	movw	r24, r28
     8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <padLeft+0x94>
		size_t lenpad = strlen(pad);
		u8 i = paddedLength;
		
		if (stringLength >= paddedLength)
		{
			return NULL;//'\0';
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	90 e0       	ldi	r25, 0x00	; 0

		padded = (padded - i);
		strncpy(string,padded,i);
		
		return padded;
	}
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	1f 91       	pop	r17
     8d8:	0f 91       	pop	r16
     8da:	ff 90       	pop	r15
     8dc:	ef 90       	pop	r14
     8de:	df 90       	pop	r13
     8e0:	cf 90       	pop	r12
     8e2:	bf 90       	pop	r11
     8e4:	af 90       	pop	r10
     8e6:	9f 90       	pop	r9
     8e8:	8f 90       	pop	r8
     8ea:	7f 90       	pop	r7
     8ec:	08 95       	ret

000008ee <appTask>:
	SetupTimeout
	GetParam
	Ascii_to_nible
	*/
	void appTask(void)				//after appInit()
	{
     8ee:	bf 92       	push	r11
     8f0:	cf 92       	push	r12
     8f2:	df 92       	push	r13
     8f4:	ef 92       	push	r14
     8f6:	ff 92       	push	r15
     8f8:	0f 93       	push	r16
     8fa:	1f 93       	push	r17
     8fc:	cf 93       	push	r28
     8fe:	df 93       	push	r29
     900:	cd b7       	in	r28, 0x3d	; 61
     902:	de b7       	in	r29, 0x3e	; 62
     904:	ab 97       	sbiw	r28, 0x2b	; 43
     906:	0f b6       	in	r0, 0x3f	; 63
     908:	f8 94       	cli
     90a:	de bf       	out	0x3e, r29	; 62
     90c:	0f be       	out	0x3f, r0	; 63
     90e:	cd bf       	out	0x3d, r28	; 61
		//vars declaration
		ucSendDataSize = 0;
     910:	10 92 0e 0b 	sts	0x0B0E, r1	; 0x800b0e <ucSendDataSize>
		

		
		#ifdef MACHINE_CONNECTED
		#if (DEVICE_CONNECTED == ACA_MACHINE)
		if(ucDeviceStateFlag == DEVICE_STATUS_NEEDED)	//do machine status communication every 1/2 second
     914:	80 91 b9 09 	lds	r24, 0x09B9	; 0x8009b9 <ucDeviceStateFlag>
     918:	81 30       	cpi	r24, 0x01	; 1
     91a:	41 f5       	brne	.+80     	; 0x96c <appTask+0x7e>
		{
			DevicePoll();
     91c:	0e 94 17 04 	call	0x82e	; 0x82e <DevicePoll>
			
			
			
			if (ucDeviceStateFlag == MACHINE_STATUS_ON)			//machine status 33, 41 and online
     920:	80 91 b9 09 	lds	r24, 0x09B9	; 0x8009b9 <ucDeviceStateFlag>
     924:	82 30       	cpi	r24, 0x02	; 2
     926:	11 f5       	brne	.+68     	; 0x96c <appTask+0x7e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     928:	8f e1       	ldi	r24, 0x1F	; 31
     92a:	9e e4       	ldi	r25, 0x4E	; 78
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	f1 f7       	brne	.-4      	; 0x92c <appTask+0x3e>
     930:	00 c0       	rjmp	.+0      	; 0x932 <appTask+0x44>
     932:	00 00       	nop
			{
				_delay_ms(5);
				
				if (ReaderStateFlag.ReaderSetup == READER_SETUP_NEEDED)
     934:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
     938:	81 ff       	sbrs	r24, 1
     93a:	02 c0       	rjmp	.+4      	; 0x940 <appTask+0x52>
				{
					//Display "No Setup" message on machine
					displayMsg(SETUP_MSG);
     93c:	82 e0       	ldi	r24, 0x02	; 2
     93e:	14 c0       	rjmp	.+40     	; 0x968 <appTask+0x7a>
				}
				else if (((macConfig.associated == false) && (ReaderStateFlag.EnableOfflineTransaction == false)) || (ReaderStateFlag.MaxNumTransReached == true))
     940:	90 91 38 0c 	lds	r25, 0x0C38	; 0x800c38 <macConfig+0x8>
     944:	91 11       	cpse	r25, r1
     946:	02 c0       	rjmp	.+4      	; 0x94c <appTask+0x5e>
     948:	83 ff       	sbrs	r24, 3
     94a:	02 c0       	rjmp	.+4      	; 0x950 <appTask+0x62>
     94c:	84 ff       	sbrs	r24, 4
     94e:	02 c0       	rjmp	.+4      	; 0x954 <appTask+0x66>
				{
					//Display "Service message" message on machine
					displayMsg(SERVICE_MSG);
     950:	83 e0       	ldi	r24, 0x03	; 3
     952:	0a c0       	rjmp	.+20     	; 0x968 <appTask+0x7a>
				}
				else if (ReaderStateFlag.Busy == true)
     954:	86 ff       	sbrs	r24, 6
     956:	0a c0       	rjmp	.+20     	; 0x96c <appTask+0x7e>
				{
					#if (DEVICE_CONNECTED == ACA_MACHINE)
					//Display busy message
					if( OP != WAIT_FOR_SERVER ) // ****need to put op code in a queue****
     958:	80 91 b7 09 	lds	r24, 0x09B7	; 0x8009b7 <OP>
     95c:	87 30       	cpi	r24, 0x07	; 7
     95e:	19 f0       	breq	.+6      	; 0x966 <appTask+0x78>
					{
						OP = WAIT_FOR_SERVER;
     960:	87 e0       	ldi	r24, 0x07	; 7
     962:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
					}
					displayMsg(BUSY_MSG);
     966:	84 e0       	ldi	r24, 0x04	; 4
     968:	0e 94 99 0c 	call	0x1932	; 0x1932 <displayMsg>
		}
		#endif // ACA_MACHINE
		
		#endif

		if(macConfig.associated == true/*/false*/ || ReaderStateFlag.EnableOfflineTransaction == true) //  Don't bother running the app until the reader has associated
     96c:	20 91 38 0c 	lds	r18, 0x0C38	; 0x800c38 <macConfig+0x8>
     970:	21 11       	cpse	r18, r1
     972:	04 c0       	rjmp	.+8      	; 0x97c <appTask+0x8e>
     974:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
     978:	83 ff       	sbrs	r24, 3
     97a:	27 c3       	rjmp	.+1614   	; 0xfca <appTask+0x6dc>
		{
			
			switch(OP){
     97c:	e0 91 b7 09 	lds	r30, 0x09B7	; 0x8009b7 <OP>
     980:	8e 2f       	mov	r24, r30
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	fc 01       	movw	r30, r24
     986:	31 97       	sbiw	r30, 0x01	; 1
     988:	e8 32       	cpi	r30, 0x28	; 40
     98a:	f1 05       	cpc	r31, r1
     98c:	08 f0       	brcs	.+2      	; 0x990 <appTask+0xa2>
     98e:	1d c3       	rjmp	.+1594   	; 0xfca <appTask+0x6dc>
     990:	e0 57       	subi	r30, 0x70	; 112
     992:	ff 4f       	sbci	r31, 0xFF	; 255
     994:	0c 94 f6 2d 	jmp	0x5bec	; 0x5bec <__tablejump2__>
				//case #1 called by appInit
				case VALIDATE_READER:
				//TODO: fix machine type switch
				//
				#if (DEVICE_CONNECTED == ACA_MACHINE)
				if((ReaderStateFlag.EnableOfflineTransaction == true) && (ReaderStateFlag.ReaderSetup == READER_SETUP_DONE))
     998:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
     99c:	83 ff       	sbrs	r24, 3
     99e:	04 c0       	rjmp	.+8      	; 0x9a8 <appTask+0xba>
     9a0:	81 fd       	sbrc	r24, 1
     9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <appTask+0xba>
				{
					OP = INIT_READER;
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	0c c3       	rjmp	.+1560   	; 0xfc0 <appTask+0x6d2>
				}
				else{
					#endif //ACA_MACHINE
					
					#if (DEVICE_CONNECTED == ACA_MACHINE)
					if( ((ReaderStateFlag.ReaderSetup == READER_SETUP_NEEDED) || ( ReaderStateFlag.FirstRun == VIRGIN_READER)) && (SQACAMachineStatus.MachineType[0] != INVALID_MACHINE) ){
     9a8:	81 fb       	bst	r24, 1
     9aa:	99 27       	eor	r25, r25
     9ac:	90 f9       	bld	r25, 0
     9ae:	81 fd       	sbrc	r24, 1
     9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <appTask+0xc8>
     9b2:	80 ff       	sbrs	r24, 0
     9b4:	0b c0       	rjmp	.+22     	; 0x9cc <appTask+0xde>
     9b6:	20 91 f4 0a 	lds	r18, 0x0AF4	; 0x800af4 <SQACAMachineStatus>
     9ba:	22 23       	and	r18, r18
     9bc:	29 f0       	breq	.+10     	; 0x9c8 <appTask+0xda>
						
						SETUP_TIMEOUT = true;
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <SETUP_TIMEOUT>
						OP = SETUP_REQUEST; //enable when setup supported by server
     9c4:	8a e0       	ldi	r24, 0x0A	; 10
     9c6:	fc c2       	rjmp	.+1528   	; 0xfc0 <appTask+0x6d2>
						
						
						#endif
						
					}
					else if( (ReaderStateFlag.ReaderSetup == READER_SETUP_DONE) && (ReaderStateFlag.ValidateSetup == VALIDATE_READER_SETUP) ){
     9c8:	91 11       	cpse	r25, r1
     9ca:	ff c2       	rjmp	.+1534   	; 0xfca <appTask+0x6dc>
     9cc:	82 ff       	sbrs	r24, 2
     9ce:	ea cf       	rjmp	.-44     	; 0x9a4 <appTask+0xb6>
						
						VALIDATION_TIMEOUT = false;
     9d0:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <VALIDATION_TIMEOUT>
						sendBOWValidationRequest();
     9d4:	0e 94 2e 09 	call	0x125c	; 0x125c <sendBOWValidationRequest>
						// Clear Rx Buffer
						memset(DataBuffer,0,sizeof(DataBuffer));
     9d8:	80 e8       	ldi	r24, 0x80	; 128
     9da:	e7 e3       	ldi	r30, 0x37	; 55
     9dc:	f9 e0       	ldi	r31, 0x09	; 9
     9de:	df 01       	movw	r26, r30
     9e0:	1d 92       	st	X+, r1
     9e2:	8a 95       	dec	r24
     9e4:	e9 f7       	brne	.-6      	; 0x9e0 <appTask+0xf2>
						
						macSetLongAlarm(SETUP_VALIDATION_TIMEOUT, ValidationTimeout); 		//check Every 15s
     9e6:	61 ea       	ldi	r22, 0xA1	; 161
     9e8:	71 e0       	ldi	r23, 0x01	; 1
     9ea:	8c e3       	ldi	r24, 0x3C	; 60
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <macSetLongAlarm>

						// Wait for validation package to arrive
						OP = VALIDATE_SETUP;
     9f2:	84 e1       	ldi	r24, 0x14	; 20
     9f4:	e5 c2       	rjmp	.+1482   	; 0xfc0 <appTask+0x6d2>
				break;
				//case #2
				case INIT_READER:
				#if (DEVICE_CONNECTED == ACA_MACHINE)
				
				if( isMachineCycleRunning() )
     9f6:	0e 94 4b 12 	call	0x2496	; 0x2496 <isMachineCycleRunning>
     9fa:	88 23       	and	r24, r24
     9fc:	09 f4       	brne	.+2      	; 0xa00 <appTask+0x112>
     9fe:	dd c2       	rjmp	.+1466   	; 0xfba <appTask+0x6cc>
				{
					OP = CYCLE_STARTED;
     a00:	80 e1       	ldi	r24, 0x10	; 16
     a02:	de c2       	rjmp	.+1468   	; 0xfc0 <appTask+0x6d2>
				break;
				//case #3
				case SCANNING: //scan for card swipe

				// Enable Heart beat routine
				if (uiFunctionEntered < (20 * (F_CPU/4000000)))
     a04:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <uiFunctionEntered>
     a08:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <uiFunctionEntered+0x1>
     a0c:	80 35       	cpi	r24, 0x50	; 80
     a0e:	91 05       	cpc	r25, r1
     a10:	30 f4       	brcc	.+12     	; 0xa1e <appTask+0x130>
				{
					uiFunctionEntered++;
     a12:	01 96       	adiw	r24, 0x01	; 1
     a14:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <uiFunctionEntered+0x1>
     a18:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <uiFunctionEntered>
     a1c:	05 c0       	rjmp	.+10     	; 0xa28 <appTask+0x13a>
				}
				else
				{
					
					Led1_toggle();
     a1e:	90 9a       	sbi	0x12, 0	; 18
					
					uiFunctionEntered = 0;
     a20:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <uiFunctionEntered+0x1>
     a24:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <uiFunctionEntered>
				}

				
				if(!Request(ISO14443_3_REQALL, tmp))
     a28:	be 01       	movw	r22, r28
     a2a:	6f 5f       	subi	r22, 0xFF	; 255
     a2c:	7f 4f       	sbci	r23, 0xFF	; 255
     a2e:	82 e5       	ldi	r24, 0x52	; 82
     a30:	0e 94 92 17 	call	0x2f24	; 0x2f24 <Request>
     a34:	89 2b       	or	r24, r25
     a36:	09 f0       	breq	.+2      	; 0xa3a <appTask+0x14c>
     a38:	c8 c2       	rjmp	.+1424   	; 0xfca <appTask+0x6dc>
				{
					u8 cardType;
					u8 cardKey[6] = {0xff,0xff,0xff,0xff,0xff,0xff};
     a3a:	86 e0       	ldi	r24, 0x06	; 6
     a3c:	e1 e2       	ldi	r30, 0x21	; 33
     a3e:	f2 e0       	ldi	r31, 0x02	; 2
     a40:	de 01       	movw	r26, r28
     a42:	5f 96       	adiw	r26, 0x1f	; 31
     a44:	01 90       	ld	r0, Z+
     a46:	0d 92       	st	X+, r0
     a48:	8a 95       	dec	r24
     a4a:	e1 f7       	brne	.-8      	; 0xa44 <appTask+0x156>
					
					/*anti-collision and select the card*/
					if(!AnticollSelect(0, tmp, &cardType))
     a4c:	ae 01       	movw	r20, r28
     a4e:	49 5d       	subi	r20, 0xD9	; 217
     a50:	5f 4f       	sbci	r21, 0xFF	; 255
     a52:	be 01       	movw	r22, r28
     a54:	6f 5f       	subi	r22, 0xFF	; 255
     a56:	7f 4f       	sbci	r23, 0xFF	; 255
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	0e 94 42 19 	call	0x3284	; 0x3284 <AnticollSelect>
     a5e:	89 2b       	or	r24, r25
     a60:	09 f0       	breq	.+2      	; 0xa64 <appTask+0x176>
     a62:	b3 c2       	rjmp	.+1382   	; 0xfca <appTask+0x6dc>
					{
						if(cardType == MIFARE_1K)
     a64:	8f a1       	ldd	r24, Y+39	; 0x27
     a66:	88 30       	cpi	r24, 0x08	; 8
     a68:	69 f4       	brne	.+26     	; 0xa84 <appTask+0x196>
						{
							CurrentAccount.Type = MIFARE_1K;
     a6a:	80 93 2a 09 	sts	0x092A, r24	; 0x80092a <CurrentAccount>
							
							Authentication(MIFARE_AUTHENT_A,cardKey,tmp,0);
     a6e:	20 e0       	ldi	r18, 0x00	; 0
     a70:	ae 01       	movw	r20, r28
     a72:	4f 5f       	subi	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	be 01       	movw	r22, r28
     a78:	61 5e       	subi	r22, 0xE1	; 225
     a7a:	7f 4f       	sbci	r23, 0xFF	; 255
     a7c:	80 e6       	ldi	r24, 0x60	; 96
     a7e:	0e 94 ed 19 	call	0x33da	; 0x33da <Authentication>
     a82:	02 c0       	rjmp	.+4      	; 0xa88 <appTask+0x19a>
						}
						else
						{
							CurrentAccount.Type = 0;
     a84:	10 92 2a 09 	sts	0x092A, r1	; 0x80092a <CurrentAccount>
						}
						OP = CARD_DETECTED;
     a88:	8c e0       	ldi	r24, 0x0C	; 12
     a8a:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
						ledoff1();
     a8e:	0e 94 9d 01 	call	0x33a	; 0x33a <ledoff1>
     a92:	9b c2       	rjmp	.+1334   	; 0xfca <appTask+0x6dc>

				
				//case #4
				case CARD_DETECTED:
				{
					u8 cardNum[10] = {0};
     a94:	8e 01       	movw	r16, r28
     a96:	0f 5f       	subi	r16, 0xFF	; 255
     a98:	1f 4f       	sbci	r17, 0xFF	; 255
     a9a:	8a e0       	ldi	r24, 0x0A	; 10
     a9c:	f8 01       	movw	r30, r16
     a9e:	11 92       	st	Z+, r1
     aa0:	8a 95       	dec	r24
     aa2:	e9 f7       	brne	.-6      	; 0xa9e <appTask+0x1b0>
					//memset(DataBuffer,0,sizeof(DataBuffer));	// Clear Buffer
					
					//Read CardID from User Zone
					if(!readCardID(CurrentAccount.Type, &cardNum[0]))
     aa4:	b8 01       	movw	r22, r16
     aa6:	80 91 2a 09 	lds	r24, 0x092A	; 0x80092a <CurrentAccount>
     aaa:	0e 94 8f 1a 	call	0x351e	; 0x351e <readCardID>
     aae:	89 2b       	or	r24, r25
     ab0:	09 f0       	breq	.+2      	; 0xab4 <appTask+0x1c6>
     ab2:	8a c0       	rjmp	.+276    	; 0xbc8 <appTask+0x2da>
					{
						padLeft((char*)&cardNum[0],9,"200");
     ab4:	4e e3       	ldi	r20, 0x3E	; 62
     ab6:	52 e0       	ldi	r21, 0x02	; 2
     ab8:	69 e0       	ldi	r22, 0x09	; 9
     aba:	c8 01       	movw	r24, r16
     abc:	0e 94 1f 04 	call	0x83e	; 0x83e <padLeft>
						
						CurrentAccount.ID = strtoul((const char*)cardNum,NULL,10);	//save active card's id
     ac0:	4a e0       	ldi	r20, 0x0A	; 10
     ac2:	50 e0       	ldi	r21, 0x00	; 0
     ac4:	60 e0       	ldi	r22, 0x00	; 0
     ac6:	70 e0       	ldi	r23, 0x00	; 0
     ac8:	c8 01       	movw	r24, r16
     aca:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <strtoul>
     ace:	60 93 2b 09 	sts	0x092B, r22	; 0x80092b <CurrentAccount+0x1>
     ad2:	70 93 2c 09 	sts	0x092C, r23	; 0x80092c <CurrentAccount+0x2>
     ad6:	80 93 2d 09 	sts	0x092D, r24	; 0x80092d <CurrentAccount+0x3>
     ada:	90 93 2e 09 	sts	0x092E, r25	; 0x80092e <CurrentAccount+0x4>
						//associated?
						if(macConfig.associated == true)
     ade:	80 91 38 0c 	lds	r24, 0x0C38	; 0x800c38 <macConfig+0x8>
     ae2:	88 23       	and	r24, r24
     ae4:	a1 f1       	breq	.+104    	; 0xb4e <appTask+0x260>
						{
							// Send Data Package via Radio
							sprintf((char*)ucSendDataBuffer+1, "<sN>%s</sN>",cardNum);
     ae6:	1f 93       	push	r17
     ae8:	0f 93       	push	r16
     aea:	82 e4       	ldi	r24, 0x42	; 66
     aec:	92 e0       	ldi	r25, 0x02	; 2
     aee:	9f 93       	push	r25
     af0:	8f 93       	push	r24
     af2:	01 e3       	ldi	r16, 0x31	; 49
     af4:	1a e0       	ldi	r17, 0x0A	; 10
     af6:	1f 93       	push	r17
     af8:	0f 93       	push	r16
     afa:	0e 94 b1 32 	call	0x6562	; 0x6562 <sprintf>

							ucSendDataSize = strlen((char*)ucSendDataBuffer+1);
     afe:	f8 01       	movw	r30, r16
     b00:	01 90       	ld	r0, Z+
     b02:	00 20       	and	r0, r0
     b04:	e9 f7       	brne	.-6      	; 0xb00 <appTask+0x212>
     b06:	bf 01       	movw	r22, r30
     b08:	62 53       	subi	r22, 0x32	; 50
     b0a:	7a 40       	sbci	r23, 0x0A	; 10
							ucSendDataBuffer[0] = ucSendDataSize;   // Length
     b0c:	60 93 30 0a 	sts	0x0A30, r22	; 0x800a30 <ucSendDataBuffer>
							ucSendDataSize = ucSendDataSize + 1;    // data size = data byte + size byte
     b10:	6f 5f       	subi	r22, 0xFF	; 255
     b12:	60 93 0e 0b 	sts	0x0B0E, r22	; 0x800b0e <ucSendDataSize>
							macDataRequest(DEFAULT_COORD_ADDR, ucSendDataSize, ucSendDataBuffer);
     b16:	40 e3       	ldi	r20, 0x30	; 48
     b18:	5a e0       	ldi	r21, 0x0A	; 10
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <macDataRequest>
							
							// Clear Rx Buffer
							memset(DataBuffer,0,sizeof(DataBuffer));
     b22:	80 e8       	ldi	r24, 0x80	; 128
     b24:	e7 e3       	ldi	r30, 0x37	; 55
     b26:	f9 e0       	ldi	r31, 0x09	; 9
     b28:	df 01       	movw	r26, r30
     b2a:	1d 92       	st	X+, r1
     b2c:	8a 95       	dec	r24
     b2e:	e9 f7       	brne	.-6      	; 0xb2a <appTask+0x23c>
							
							OP = WAIT_FOR_SERVER;
     b30:	87 e0       	ldi	r24, 0x07	; 7
     b32:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
							ReaderStateFlag.Busy = true;
     b36:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
     b3a:	80 64       	ori	r24, 0x40	; 64
     b3c:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
     b40:	0f 90       	pop	r0
     b42:	0f 90       	pop	r0
     b44:	0f 90       	pop	r0
     b46:	0f 90       	pop	r0
     b48:	0f 90       	pop	r0
     b4a:	0f 90       	pop	r0
     b4c:	38 c0       	rjmp	.+112    	; 0xbbe <appTask+0x2d0>
							
						}
						#if (DEVICE_CONNECTED == ACA_MACHINE)

						else if((macConfig.associated == false) && (ReaderStateFlag.EnableOfflineTransaction == true) && (ReaderStateFlag.MaxNumTransReached == false))
     b4e:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
     b52:	83 ff       	sbrs	r24, 3
     b54:	31 c0       	rjmp	.+98     	; 0xbb8 <appTask+0x2ca>
     b56:	84 fd       	sbrc	r24, 4
     b58:	2f c0       	rjmp	.+94     	; 0xbb8 <appTask+0x2ca>
						{
							//allow cycle to start when BOW is down
							CurrentAccount.Value = vendPrice * 100;
     b5a:	20 e0       	ldi	r18, 0x00	; 0
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	48 ec       	ldi	r20, 0xC8	; 200
     b60:	52 e4       	ldi	r21, 0x42	; 66
     b62:	60 91 c0 0c 	lds	r22, 0x0CC0	; 0x800cc0 <vendPrice>
     b66:	70 91 c1 0c 	lds	r23, 0x0CC1	; 0x800cc1 <vendPrice+0x1>
     b6a:	80 91 c2 0c 	lds	r24, 0x0CC2	; 0x800cc2 <vendPrice+0x2>
     b6e:	90 91 c3 0c 	lds	r25, 0x0CC3	; 0x800cc3 <vendPrice+0x3>
     b72:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <__mulsf3>
     b76:	0e 94 82 2c 	call	0x5904	; 0x5904 <__fixunssfsi>
     b7a:	70 93 32 09 	sts	0x0932, r23	; 0x800932 <CurrentAccount+0x8>
     b7e:	60 93 31 09 	sts	0x0931, r22	; 0x800931 <CurrentAccount+0x7>
							
							if( SQACAMimicQuantumSequence(REGULAR_VEND)  )
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	0e 94 8c 11 	call	0x2318	; 0x2318 <SQACAMimicQuantumSequence>
     b8a:	89 2b       	or	r24, r25
     b8c:	c1 f0       	breq	.+48     	; 0xbbe <appTask+0x2d0>
							{
								OP = WAIT_FOR_SELECTION;
     b8e:	88 e0       	ldi	r24, 0x08	; 8
     b90:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
								
								KPTOFlag = 0;
     b94:	10 92 2e 05 	sts	0x052E, r1	; 0x80052e <KPTOFlag>
								
								if( waitForMachineStartKey() )
     b98:	0e 94 4d 12 	call	0x249a	; 0x249a <waitForMachineStartKey>
								{
									macSetLongAlarm(MACHINE_KEYPRESS_WAITTIME,KeypressTimeOut);		//KeyPressWaitTime
     b9c:	6e ea       	ldi	r22, 0xAE	; 174
     b9e:	71 e0       	ldi	r23, 0x01	; 1
							{
								OP = WAIT_FOR_SELECTION;
								
								KPTOFlag = 0;
								
								if( waitForMachineStartKey() )
     ba0:	88 23       	and	r24, r24
     ba2:	29 f0       	breq	.+10     	; 0xbae <appTask+0x2c0>
								{
									macSetLongAlarm(MACHINE_KEYPRESS_WAITTIME,KeypressTimeOut);		//KeyPressWaitTime
     ba4:	8e e1       	ldi	r24, 0x1E	; 30
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <macSetLongAlarm>
     bac:	08 c0       	rjmp	.+16     	; 0xbbe <appTask+0x2d0>
								}
								else
								macSetAlarm(500, KeypressTimeOut); // if connected to a washer while cycle is running and a card is swiped, just display the balance and continue scanning.
     bae:	84 ef       	ldi	r24, 0xF4	; 244
     bb0:	91 e0       	ldi	r25, 0x01	; 1
     bb2:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <macSetAlarm>
     bb6:	03 c0       	rjmp	.+6      	; 0xbbe <appTask+0x2d0>
								
							}
						}
						else{
							OP = SCANNING;
     bb8:	82 e0       	ldi	r24, 0x02	; 2
     bba:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
						#if (DEBUG)
						Beeps(1);
						#endif

						//Set Timeout timer
						TOFlag = 0;
     bbe:	10 92 2f 05 	sts	0x052F, r1	; 0x80052f <TOFlag>
						ucTimerID = macSetLongAlarm(SERVER_RESPONSE_TIMEOUT,CommTimeOut);
     bc2:	65 ea       	ldi	r22, 0xA5	; 165
     bc4:	71 e0       	ldi	r23, 0x01	; 1
     bc6:	ee c1       	rjmp	.+988    	; 0xfa4 <appTask+0x6b6>
					else
					{
						#if (DEBUG)
						debugMsgStr("\r\nInvalid CardID\r\n");
						#endif
						OP = SCARD_REMOVED;						
     bc8:	8d e0       	ldi	r24, 0x0D	; 13
     bca:	fa c1       	rjmp	.+1012   	; 0xfc0 <appTask+0x6d2>
				}
				break;
				//case #5
				case SEND_OFFLINE_TRANSACTIONS:
				
				if (timeout.sendingOfflineTransactions)
     bcc:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <timeout>
     bd0:	80 ff       	sbrs	r24, 0
     bd2:	fb c1       	rjmp	.+1014   	; 0xfca <appTask+0x6dc>
				{
					timeout.sendingOfflineTransactions = false;
     bd4:	8e 7f       	andi	r24, 0xFE	; 254
     bd6:	80 93 02 0a 	sts	0x0A02, r24	; 0x800a02 <timeout>
     bda:	f1 c1       	rjmp	.+994    	; 0xfbe <appTask+0x6d0>
				
				case SHOW_BALANCE_REQUEST:
				//case #6
				case WAIT_FOR_SERVER: //wait for response from server

				if(DataBuffer[0] != '\0')
     bdc:	80 91 37 09 	lds	r24, 0x0937	; 0x800937 <DataBuffer>
     be0:	88 23       	and	r24, r24
     be2:	09 f4       	brne	.+2      	; 0xbe6 <appTask+0x2f8>
     be4:	ca c0       	rjmp	.+404    	; 0xd7a <appTask+0x48c>
				{
					// Print response
					ReaderStateFlag.Busy = false;
     be6:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
     bea:	8f 7b       	andi	r24, 0xBF	; 191
     bec:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
					debugMsgStr("\r\n");
					debugMsgStr(DataBuffer);
					debugMsgStr("\r\n");
					#endif

					OP = SCARD_REMOVED;	
     bf0:	8d e0       	ldi	r24, 0x0D	; 13
     bf2:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>

					#if (DEVICE_CONNECTED == ACA_MACHINE )
					
					
					//Extract the Card Id
					if( (uctempBuf = strstr((char *)DataBuffer,"sN: ")) )
     bf6:	6e e4       	ldi	r22, 0x4E	; 78
     bf8:	72 e0       	ldi	r23, 0x02	; 2
     bfa:	87 e3       	ldi	r24, 0x37	; 55
     bfc:	99 e0       	ldi	r25, 0x09	; 9
     bfe:	0e 94 35 32 	call	0x646a	; 0x646a <strstr>
     c02:	00 97       	sbiw	r24, 0x00	; 0
     c04:	09 f4       	brne	.+2      	; 0xc08 <appTask+0x31a>
     c06:	b6 c0       	rjmp	.+364    	; 0xd74 <appTask+0x486>
					{
						CurrentAccount.ID = strtoul((const char*)(uctempBuf+4),NULL,10);	//save active card's id
     c08:	4a e0       	ldi	r20, 0x0A	; 10
     c0a:	50 e0       	ldi	r21, 0x00	; 0
     c0c:	60 e0       	ldi	r22, 0x00	; 0
     c0e:	70 e0       	ldi	r23, 0x00	; 0
     c10:	04 96       	adiw	r24, 0x04	; 4
     c12:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <strtoul>
     c16:	60 93 2b 09 	sts	0x092B, r22	; 0x80092b <CurrentAccount+0x1>
     c1a:	70 93 2c 09 	sts	0x092C, r23	; 0x80092c <CurrentAccount+0x2>
     c1e:	80 93 2d 09 	sts	0x092D, r24	; 0x80092d <CurrentAccount+0x3>
     c22:	90 93 2e 09 	sts	0x092E, r25	; 0x80092e <CurrentAccount+0x4>
						
						//Display card balance on machine
						double fBalance = 0.0;
						
						uctempBuf = strstr((char *)DataBuffer,"Balance: ");
     c26:	63 e5       	ldi	r22, 0x53	; 83
     c28:	72 e0       	ldi	r23, 0x02	; 2
     c2a:	87 e3       	ldi	r24, 0x37	; 55
     c2c:	99 e0       	ldi	r25, 0x09	; 9
     c2e:	0e 94 35 32 	call	0x646a	; 0x646a <strstr>
     c32:	7c 01       	movw	r14, r24
												
						uctempBuf += 9;
     c34:	8c 01       	movw	r16, r24
     c36:	07 5f       	subi	r16, 0xF7	; 247
     c38:	1f 4f       	sbci	r17, 0xFF	; 255
						ptr = strchr(uctempBuf,'.');
     c3a:	6e e2       	ldi	r22, 0x2E	; 46
     c3c:	70 e0       	ldi	r23, 0x00	; 0
     c3e:	c8 01       	movw	r24, r16
     c40:	0e 94 00 32 	call	0x6400	; 0x6400 <strchr>
						k = ptr - uctempBuf;
     c44:	28 2f       	mov	r18, r24
     c46:	20 1b       	sub	r18, r16
						fBalance = atof(uctempBuf);
     c48:	c8 01       	movw	r24, r16
     c4a:	2b a7       	std	Y+43, r18	; 0x2b
     c4c:	0e 94 dc 30 	call	0x61b8	; 0x61b8 <atof>
						
						// Format the Balance to XX.XX
						//capture numeric into string 
						if (k <2)
     c50:	2b a5       	ldd	r18, Y+43	; 0x2b
     c52:	22 30       	cpi	r18, 0x02	; 2
     c54:	38 f4       	brcc	.+14     	; 0xc64 <appTask+0x376>
						sprintf(uctempBuf,"0%.2f",fBalance);
     c56:	9f 93       	push	r25
     c58:	8f 93       	push	r24
     c5a:	7f 93       	push	r23
     c5c:	6f 93       	push	r22
     c5e:	8d e5       	ldi	r24, 0x5D	; 93
     c60:	92 e0       	ldi	r25, 0x02	; 2
     c62:	08 c0       	rjmp	.+16     	; 0xc74 <appTask+0x386>
						else if(k == 2)
     c64:	22 30       	cpi	r18, 0x02	; 2
     c66:	91 f4       	brne	.+36     	; 0xc8c <appTask+0x39e>
						sprintf(uctempBuf,"%.2f",fBalance);
     c68:	9f 93       	push	r25
     c6a:	8f 93       	push	r24
     c6c:	7f 93       	push	r23
     c6e:	6f 93       	push	r22
     c70:	8e e5       	ldi	r24, 0x5E	; 94
     c72:	92 e0       	ldi	r25, 0x02	; 2
     c74:	9f 93       	push	r25
     c76:	8f 93       	push	r24
     c78:	1f 93       	push	r17
     c7a:	0f 93       	push	r16
     c7c:	0e 94 b1 32 	call	0x6562	; 0x6562 <sprintf>
     c80:	0f b6       	in	r0, 0x3f	; 63
     c82:	f8 94       	cli
     c84:	de bf       	out	0x3e, r29	; 62
     c86:	0f be       	out	0x3f, r0	; 63
     c88:	cd bf       	out	0x3d, r28	; 61
     c8a:	05 c0       	rjmp	.+10     	; 0xc96 <appTask+0x3a8>
						else
						strcpy(uctempBuf,"99.99");
     c8c:	63 e6       	ldi	r22, 0x63	; 99
     c8e:	72 e0       	ldi	r23, 0x02	; 2
     c90:	c8 01       	movw	r24, r16
     c92:	0e 94 14 32 	call	0x6428	; 0x6428 <strcpy>
						"1" is just a character as far as the LCD is concerned. It's not a number. The LCD wants you to send the "code" for each character you want to display.
						The codes for characters "0" through "9" are 48 through 57. So just adding 48 to any single-digit number will give you the code for the character that 
						corresponds to that digit, f.e. uctempBuf[0]=49. digit 1=uctempBuf[0]-0x30 .
						*/
						//split string into individual values, skip decimal point
						CurrentAccount.Value = (uctempBuf[0]-0x30) * 1000 + (uctempBuf[1]-0x30) * 100 + (uctempBuf[3]-0x30) * 10 + uctempBuf[4]-0x30;
     c96:	d7 01       	movw	r26, r14
     c98:	19 96       	adiw	r26, 0x09	; 9
     c9a:	2c 91       	ld	r18, X
     c9c:	19 97       	sbiw	r26, 0x09	; 9
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	20 53       	subi	r18, 0x30	; 48
     ca2:	31 09       	sbc	r19, r1
     ca4:	1a 96       	adiw	r26, 0x0a	; 10
     ca6:	4c 91       	ld	r20, X
     ca8:	1a 97       	sbiw	r26, 0x0a	; 10
     caa:	50 e0       	ldi	r21, 0x00	; 0
     cac:	40 53       	subi	r20, 0x30	; 48
     cae:	51 09       	sbc	r21, r1
     cb0:	1c 96       	adiw	r26, 0x0c	; 12
     cb2:	6c 91       	ld	r22, X
     cb4:	1c 97       	sbiw	r26, 0x0c	; 12
     cb6:	70 e0       	ldi	r23, 0x00	; 0
     cb8:	60 53       	subi	r22, 0x30	; 48
     cba:	71 09       	sbc	r23, r1
     cbc:	1d 96       	adiw	r26, 0x0d	; 13
     cbe:	ac 91       	ld	r26, X
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	88 ee       	ldi	r24, 0xE8	; 232
     cc4:	93 e0       	ldi	r25, 0x03	; 3
     cc6:	28 9f       	mul	r18, r24
     cc8:	f0 01       	movw	r30, r0
     cca:	29 9f       	mul	r18, r25
     ccc:	f0 0d       	add	r31, r0
     cce:	38 9f       	mul	r19, r24
     cd0:	f0 0d       	add	r31, r0
     cd2:	11 24       	eor	r1, r1
     cd4:	14 e6       	ldi	r17, 0x64	; 100
     cd6:	14 9f       	mul	r17, r20
     cd8:	c0 01       	movw	r24, r0
     cda:	15 9f       	mul	r17, r21
     cdc:	90 0d       	add	r25, r0
     cde:	11 24       	eor	r1, r1
     ce0:	8e 0f       	add	r24, r30
     ce2:	9f 1f       	adc	r25, r31
     ce4:	1a e0       	ldi	r17, 0x0A	; 10
     ce6:	16 9f       	mul	r17, r22
     ce8:	f0 01       	movw	r30, r0
     cea:	17 9f       	mul	r17, r23
     cec:	f0 0d       	add	r31, r0
     cee:	11 24       	eor	r1, r1
     cf0:	8e 0f       	add	r24, r30
     cf2:	9f 1f       	adc	r25, r31
     cf4:	8a 0f       	add	r24, r26
     cf6:	9b 1f       	adc	r25, r27
     cf8:	c0 97       	sbiw	r24, 0x30	; 48
     cfa:	90 93 32 09 	sts	0x0932, r25	; 0x800932 <CurrentAccount+0x8>
     cfe:	80 93 31 09 	sts	0x0931, r24	; 0x800931 <CurrentAccount+0x7>
						// give display control back to front end controller. Important! Don't forget!!!!
						//displayMsg(BLANK_MSG);
						
						//sendSQDisplayCommand(0x06,0x5B,0x7D,msgNumber[uctempBuf[0]-0x30],msgNumber[uctempBuf[1]-0x30],msgNumber[uctempBuf[3]-0x30],10);
						
						sendSQDisplayCommand(msgNumber[uctempBuf[0]-0x30], msgNumber[uctempBuf[1]-0x30], msgNumber[uctempBuf[3]-0x30], msgNumber[uctempBuf[4]-0x30], LED_BLANK, LED_BLANK,10);
     d02:	a3 52       	subi	r26, 0x23	; 35
     d04:	be 4f       	sbci	r27, 0xFE	; 254
     d06:	63 5f       	subi	r22, 0xF3	; 243
     d08:	7d 4f       	sbci	r23, 0xFD	; 253
     d0a:	ca 01       	movw	r24, r20
     d0c:	83 5f       	subi	r24, 0xF3	; 243
     d0e:	9d 4f       	sbci	r25, 0xFD	; 253
     d10:	f9 01       	movw	r30, r18
     d12:	e3 5f       	subi	r30, 0xF3	; 243
     d14:	fd 4f       	sbci	r31, 0xFD	; 253
     d16:	2a e0       	ldi	r18, 0x0A	; 10
     d18:	c2 2e       	mov	r12, r18
     d1a:	e1 2c       	mov	r14, r1
     d1c:	00 e0       	ldi	r16, 0x00	; 0
     d1e:	2c 91       	ld	r18, X
     d20:	db 01       	movw	r26, r22
     d22:	4c 91       	ld	r20, X
     d24:	dc 01       	movw	r26, r24
     d26:	6c 91       	ld	r22, X
     d28:	80 81       	ld	r24, Z
     d2a:	0e 94 c0 11 	call	0x2380	; 0x2380 <sendSQDisplayCommand>
     d2e:	bf ef       	ldi	r27, 0xFF	; 255
     d30:	e7 ea       	ldi	r30, 0xA7	; 167
     d32:	f1 e6       	ldi	r31, 0x61	; 97
     d34:	b1 50       	subi	r27, 0x01	; 1
     d36:	e0 40       	sbci	r30, 0x00	; 0
     d38:	f0 40       	sbci	r31, 0x00	; 0
     d3a:	e1 f7       	brne	.-8      	; 0xd34 <appTask+0x446>
     d3c:	00 c0       	rjmp	.+0      	; 0xd3e <appTask+0x450>
     d3e:	00 00       	nop
						_delay_ms(2000);

						//display vend price
						if( SQACAMimicQuantumSequence(REGULAR_VEND) )
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	0e 94 8c 11 	call	0x2318	; 0x2318 <SQACAMimicQuantumSequence>
     d48:	89 2b       	or	r24, r25
     d4a:	09 f4       	brne	.+2      	; 0xd4e <appTask+0x460>
     d4c:	3e c1       	rjmp	.+636    	; 0xfca <appTask+0x6dc>
						{
							#if(DEBUG_BOW)
							debugMsgStr("\r\nSQACAMimicQuantumSequence(REGULAR_VEND)\r\n");
							#endif
							
							OP = WAIT_FOR_SELECTION;
     d4e:	88 e0       	ldi	r24, 0x08	; 8
     d50:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
							//Sound Buzzer
							#if (DEBUG)
							Beeps(2);
							#endif

							KPTOFlag = 0;
     d54:	10 92 2e 05 	sts	0x052E, r1	; 0x80052e <KPTOFlag>
							
							if( waitForMachineStartKey() )
     d58:	0e 94 4d 12 	call	0x249a	; 0x249a <waitForMachineStartKey>
							{
								macSetLongAlarm(MACHINE_KEYPRESS_WAITTIME,KeypressTimeOut);
     d5c:	6e ea       	ldi	r22, 0xAE	; 174
     d5e:	71 e0       	ldi	r23, 0x01	; 1
							Beeps(2);
							#endif

							KPTOFlag = 0;
							
							if( waitForMachineStartKey() )
     d60:	88 23       	and	r24, r24
     d62:	19 f0       	breq	.+6      	; 0xd6a <appTask+0x47c>
							{
								macSetLongAlarm(MACHINE_KEYPRESS_WAITTIME,KeypressTimeOut);
     d64:	8e e1       	ldi	r24, 0x1E	; 30
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	1f c1       	rjmp	.+574    	; 0xfa8 <appTask+0x6ba>
							}
							else
							macSetAlarm(500, KeypressTimeOut); // if connected to a washer while cycle is running and a card is swiped, just display the balance and continue scanning.
     d6a:	84 ef       	ldi	r24, 0xF4	; 244
     d6c:	91 e0       	ldi	r25, 0x01	; 1
     d6e:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <macSetAlarm>
     d72:	2b c1       	rjmp	.+598    	; 0xfca <appTask+0x6dc>
						}
						#endif	//ACA_MACHINE
					}	//serial number found in server database
					else //serial number error from server database
					{
						CommTimeOut();//TOFlag = 1;	//force timeout condition
     d74:	0e 94 a5 01 	call	0x34a	; 0x34a <CommTimeOut>
     d78:	28 c1       	rjmp	.+592    	; 0xfca <appTask+0x6dc>
					}
					#endif//ACA_MACHINE

				}

				else if(TOFlag == 1 || macConfig.associated == false) // server fails to respond in time
     d7a:	80 91 2f 05 	lds	r24, 0x052F	; 0x80052f <TOFlag>
     d7e:	81 30       	cpi	r24, 0x01	; 1
     d80:	11 f0       	breq	.+4      	; 0xd86 <appTask+0x498>
     d82:	21 11       	cpse	r18, r1
     d84:	22 c1       	rjmp	.+580    	; 0xfca <appTask+0x6dc>

					// Error Occured
					// Re-enter SCANNING mode

					#if(DEVICE_CONNECTED == ACA_MACHINE)
					if ( cardRemoved(REMOVE_CARD) )
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	0e 94 40 12 	call	0x2480	; 0x2480 <cardRemoved>
     d8e:	89 2b       	or	r24, r25
     d90:	09 f4       	brne	.+2      	; 0xd94 <appTask+0x4a6>
     d92:	1b c1       	rjmp	.+566    	; 0xfca <appTask+0x6dc>
					{
						//TOFlag = 1;
						ReaderStateFlag.Busy = false;
     d94:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
     d98:	8f 7b       	andi	r24, 0xBF	; 191
     d9a:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
						//send error message to machine display
						displayMsg(CARD_ERR_MSG);
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	0e 94 99 0c 	call	0x1932	; 0x1932 <displayMsg>
     da4:	0c c1       	rjmp	.+536    	; 0xfbe <appTask+0x6d0>
				break;
				//case #7
				case WAIT_FOR_SELECTION: //wait to see if cycle start has been requested by user

				#if(DEVICE_CONNECTED == ACA_MACHINE)
				if( (SQACAMachineStatus.CmdToReader == DEDUCT_VEND_COMMAND || SQACAMachineStatus.CmdToReader == DEDUCT_TOPOFF_COMMAND) )
     da6:	80 91 f8 0a 	lds	r24, 0x0AF8	; 0x800af8 <SQACAMachineStatus+0x4>
     daa:	81 30       	cpi	r24, 0x01	; 1
     dac:	11 f0       	breq	.+4      	; 0xdb2 <appTask+0x4c4>
     dae:	87 34       	cpi	r24, 0x47	; 71
     db0:	11 f4       	brne	.+4      	; 0xdb6 <appTask+0x4c8>
				{
					OP = START_CYCLE; // set only if vend price deduction successful.
     db2:	8f e0       	ldi	r24, 0x0F	; 15
     db4:	05 c1       	rjmp	.+522    	; 0xfc0 <appTask+0x6d2>

				}
				else if(KPTOFlag == 1)
     db6:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <KPTOFlag>
     dba:	81 30       	cpi	r24, 0x01	; 1
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <appTask+0x4d2>
     dbe:	05 c1       	rjmp	.+522    	; 0xfca <appTask+0x6dc>
				{
					if ( cardRemoved(CASH_CARD) )
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	0e 94 40 12 	call	0x2480	; 0x2480 <cardRemoved>
     dc8:	89 2b       	or	r24, r25
     dca:	09 f0       	breq	.+2      	; 0xdce <appTask+0x4e0>
     dcc:	f6 c0       	rjmp	.+492    	; 0xfba <appTask+0x6cc>
     dce:	fd c0       	rjmp	.+506    	; 0xfca <appTask+0x6dc>
				//case #8
				case START_CYCLE:	// send start cycle command to machine

				#if(DEVICE_CONNECTED == ACA_MACHINE)

				if( sendSQACAVendingTransactions()  )
     dd0:	0e 94 98 11 	call	0x2330	; 0x2330 <sendSQACAVendingTransactions>
     dd4:	88 23       	and	r24, r24
     dd6:	09 f4       	brne	.+2      	; 0xdda <appTask+0x4ec>
     dd8:	6a c0       	rjmp	.+212    	; 0xeae <appTask+0x5c0>
				{
					structTransaction vend;					
					
					vend.CardId			= CurrentAccount.ID;
     dda:	c0 90 2b 09 	lds	r12, 0x092B	; 0x80092b <CurrentAccount+0x1>
     dde:	d0 90 2c 09 	lds	r13, 0x092C	; 0x80092c <CurrentAccount+0x2>
     de2:	e0 90 2d 09 	lds	r14, 0x092D	; 0x80092d <CurrentAccount+0x3>
     de6:	f0 90 2e 09 	lds	r15, 0x092E	; 0x80092e <CurrentAccount+0x4>
     dea:	ca 86       	std	Y+10, r12	; 0x0a
     dec:	db 86       	std	Y+11, r13	; 0x0b
     dee:	ec 86       	std	Y+12, r14	; 0x0c
     df0:	fd 86       	std	Y+13, r15	; 0x0d
					vend.vendPrice		= vendPrice * 100;
     df2:	20 e0       	ldi	r18, 0x00	; 0
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	48 ec       	ldi	r20, 0xC8	; 200
     df8:	52 e4       	ldi	r21, 0x42	; 66
     dfa:	60 91 c0 0c 	lds	r22, 0x0CC0	; 0x800cc0 <vendPrice>
     dfe:	70 91 c1 0c 	lds	r23, 0x0CC1	; 0x800cc1 <vendPrice+0x1>
     e02:	80 91 c2 0c 	lds	r24, 0x0CC2	; 0x800cc2 <vendPrice+0x2>
     e06:	90 91 c3 0c 	lds	r25, 0x0CC3	; 0x800cc3 <vendPrice+0x3>
     e0a:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <__mulsf3>
     e0e:	9b 01       	movw	r18, r22
     e10:	ac 01       	movw	r20, r24
     e12:	2b a7       	std	Y+43, r18	; 0x2b
     e14:	38 a7       	std	Y+40, r19	; 0x28
     e16:	49 a7       	std	Y+41, r20	; 0x29
     e18:	5a a7       	std	Y+42, r21	; 0x2a
     e1a:	0e 94 82 2c 	call	0x5904	; 0x5904 <__fixunssfsi>
     e1e:	79 87       	std	Y+9, r23	; 0x09
     e20:	68 87       	std	Y+8, r22	; 0x08
					vend.LocationId		= ReaderSetup.locationId;
     e22:	80 91 c0 09 	lds	r24, 0x09C0	; 0x8009c0 <ReaderSetup+0x6>
     e26:	90 91 c1 09 	lds	r25, 0x09C1	; 0x8009c1 <ReaderSetup+0x7>
     e2a:	9a 83       	std	Y+2, r25	; 0x02
     e2c:	89 83       	std	Y+1, r24	; 0x01
					vend.ManufactureId	= ReaderSetup.manufacturerId;
     e2e:	80 91 be 09 	lds	r24, 0x09BE	; 0x8009be <ReaderSetup+0x4>
     e32:	90 91 bf 09 	lds	r25, 0x09BF	; 0x8009bf <ReaderSetup+0x5>
     e36:	9e 83       	std	Y+6, r25	; 0x06
     e38:	8d 83       	std	Y+5, r24	; 0x05
					vend.MachineId[0]	= deviceStatus.deviceType[0];
     e3a:	80 91 f0 0a 	lds	r24, 0x0AF0	; 0x800af0 <deviceStatus>
     e3e:	8b 83       	std	Y+3, r24	; 0x03
					vend.MachineId[1]	= deviceStatus.deviceType[1];
     e40:	80 91 f1 0a 	lds	r24, 0x0AF1	; 0x800af1 <deviceStatus+0x1>
     e44:	8c 83       	std	Y+4, r24	; 0x04
					
					
					
					if((macConfig.associated == false) && (ReaderStateFlag.EnableOfflineTransaction == true))
     e46:	80 91 38 0c 	lds	r24, 0x0C38	; 0x800c38 <macConfig+0x8>
     e4a:	2b a5       	ldd	r18, Y+43	; 0x2b
     e4c:	38 a5       	ldd	r19, Y+40	; 0x28
     e4e:	49 a5       	ldd	r20, Y+41	; 0x29
     e50:	5a a5       	ldd	r21, Y+42	; 0x2a
     e52:	81 11       	cpse	r24, r1
     e54:	0b c0       	rjmp	.+22     	; 0xe6c <appTask+0x57e>
     e56:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
     e5a:	83 ff       	sbrs	r24, 3
     e5c:	07 c0       	rjmp	.+14     	; 0xe6c <appTask+0x57e>
					{//must be offline transaction, store a record.
						vend.isOffline = true;
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	8d 8b       	std	Y+21, r24	; 0x15
						storeOfflineTransaction(CurrentAccount.ID);
     e62:	c7 01       	movw	r24, r14
     e64:	b6 01       	movw	r22, r12
     e66:	0e 94 76 14 	call	0x28ec	; 0x28ec <storeOfflineTransaction>
     e6a:	1e c0       	rjmp	.+60     	; 0xea8 <appTask+0x5ba>
					}
					else{
						vend.isOffline = false;
     e6c:	1d 8a       	std	Y+21, r1	; 0x15
						CurrentAccount.Value -= (vendPrice*100);
     e6e:	80 91 31 09 	lds	r24, 0x0931	; 0x800931 <CurrentAccount+0x7>
     e72:	90 91 32 09 	lds	r25, 0x0932	; 0x800932 <CurrentAccount+0x8>
     e76:	bc 01       	movw	r22, r24
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	2b a7       	std	Y+43, r18	; 0x2b
     e7e:	38 a7       	std	Y+40, r19	; 0x28
     e80:	49 a7       	std	Y+41, r20	; 0x29
     e82:	5a a7       	std	Y+42, r21	; 0x2a
     e84:	0e 94 b1 2c 	call	0x5962	; 0x5962 <__floatunsisf>
     e88:	2b a5       	ldd	r18, Y+43	; 0x2b
     e8a:	38 a5       	ldd	r19, Y+40	; 0x28
     e8c:	49 a5       	ldd	r20, Y+41	; 0x29
     e8e:	5a a5       	ldd	r21, Y+42	; 0x2a
     e90:	0e 94 a3 2b 	call	0x5746	; 0x5746 <__subsf3>
     e94:	0e 94 82 2c 	call	0x5904	; 0x5904 <__fixunssfsi>
     e98:	70 93 32 09 	sts	0x0932, r23	; 0x800932 <CurrentAccount+0x8>
     e9c:	60 93 31 09 	sts	0x0931, r22	; 0x800931 <CurrentAccount+0x7>
						sendBOWCCTransaction(&vend);
     ea0:	ce 01       	movw	r24, r28
     ea2:	01 96       	adiw	r24, 0x01	; 1
     ea4:	0e 94 0f 0c 	call	0x181e	; 0x181e <sendBOWCCTransaction>
					}
					OP = CYCLE_STARTED;
     ea8:	80 e1       	ldi	r24, 0x10	; 16
     eaa:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
					
					//let server know machine is in use.

				}
				
				cardRemoved(CASH_CARD);
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	0e 94 40 12 	call	0x2480	; 0x2480 <cardRemoved>
				
				#endif
				break;
     eb6:	89 c0       	rjmp	.+274    	; 0xfca <appTask+0x6dc>
				break;

				//case #11
				case SETUP_REQUEST:
				
				if( SETUP_TIMEOUT == true)
     eb8:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <SETUP_TIMEOUT>
     ebc:	88 23       	and	r24, r24
     ebe:	09 f4       	brne	.+2      	; 0xec2 <appTask+0x5d4>
     ec0:	84 c0       	rjmp	.+264    	; 0xfca <appTask+0x6dc>
				{
					#if(DEVICE_CONNECTED == ACA_MACHINE)
					
					#ifdef MACHINE_CONNECTED
					DevicePoll();
     ec2:	0e 94 17 04 	call	0x82e	; 0x82e <DevicePoll>
					#else
					deviceStatus.deviceType[0] = 33;
					deviceStatus.deviceType[1] = 1;
					#endif
					#endif //DEVICE_CONNECTED
					sendBOWSetupRequest();
     ec6:	0e 94 05 09 	call	0x120a	; 0x120a <sendBOWSetupRequest>
					
					SETUP_TIMEOUT = false;
     eca:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <SETUP_TIMEOUT>
					macSetLongAlarm(SETUP_REQUEST_TIMEOUT, SetupTimeout);
     ece:	62 eb       	ldi	r22, 0xB2	; 178
     ed0:	71 e0       	ldi	r23, 0x01	; 1
     ed2:	88 e7       	ldi	r24, 0x78	; 120
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	68 c0       	rjmp	.+208    	; 0xfa8 <appTask+0x6ba>
				
				
				//case #12
				case VALIDATE_SETUP:

				if((ptr = GetParam((char *)DataBuffer,"<ValidationResponse>","<")) != NULL)
     ed8:	49 e6       	ldi	r20, 0x69	; 105
     eda:	52 e0       	ldi	r21, 0x02	; 2
     edc:	6b e6       	ldi	r22, 0x6B	; 107
     ede:	72 e0       	ldi	r23, 0x02	; 2
     ee0:	87 e3       	ldi	r24, 0x37	; 55
     ee2:	99 e0       	ldi	r25, 0x09	; 9
     ee4:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <GetParam>
     ee8:	7c 01       	movw	r14, r24
     eea:	00 97       	sbiw	r24, 0x00	; 0
     eec:	09 f4       	brne	.+2      	; 0xef0 <appTask+0x602>
     eee:	50 c0       	rjmp	.+160    	; 0xf90 <appTask+0x6a2>
				{

					u8 addr[8];
					static u8 Len =0;
					n = strlen(ptr);
     ef0:	fc 01       	movw	r30, r24
     ef2:	01 90       	ld	r0, Z+
     ef4:	00 20       	and	r0, r0
     ef6:	e9 f7       	brne	.-6      	; 0xef2 <appTask+0x604>
     ef8:	31 97       	sbiw	r30, 0x01	; 1
     efa:	1e 2f       	mov	r17, r30
     efc:	18 1b       	sub	r17, r24
					k = 0;
					l = 0;
					
					// Get length of Validation code
					halGetEeprom(VALIDATION_CODE_ADDR,1,&Len);
     efe:	4a e2       	ldi	r20, 0x2A	; 42
     f00:	55 e0       	ldi	r21, 0x05	; 5
     f02:	61 e0       	ldi	r22, 0x01	; 1
     f04:	81 e6       	ldi	r24, 0x61	; 97
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <halGetEeprom>
					
					// 	Get Validation Code from EEPROM
					halGetEeprom(((u8*)VALIDATION_CODE_ADDR+1),Len,addr);
     f0c:	ae 01       	movw	r20, r28
     f0e:	41 5e       	subi	r20, 0xE1	; 225
     f10:	5f 4f       	sbci	r21, 0xFF	; 255
     f12:	60 91 2a 05 	lds	r22, 0x052A	; 0x80052a <__data_end>
     f16:	82 e6       	ldi	r24, 0x62	; 98
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <halGetEeprom>

					u8 addr[8];
					static u8 Len =0;
					n = strlen(ptr);
					k = 0;
					l = 0;
     f1e:	00 e0       	ldi	r16, 0x00	; 0
     f20:	80 2f       	mov	r24, r16
     f22:	88 0f       	add	r24, r24
					halGetEeprom(VALIDATION_CODE_ADDR,1,&Len);
					
					// 	Get Validation Code from EEPROM
					halGetEeprom(((u8*)VALIDATION_CODE_ADDR+1),Len,addr);
					
					while (k < n)
     f24:	81 17       	cp	r24, r17
     f26:	c8 f4       	brcc	.+50     	; 0xf5a <appTask+0x66c>
					{
						Setup[l] = (Ascii_to_nible ( *(ptr+k) ) * 16)
     f28:	67 01       	movw	r12, r14
     f2a:	c8 0e       	add	r12, r24
     f2c:	d1 1c       	adc	r13, r1
     f2e:	d6 01       	movw	r26, r12
     f30:	8c 91       	ld	r24, X
     f32:	0e 94 ea 27 	call	0x4fd4	; 0x4fd4 <Ascii_to_nible>
     f36:	b8 2e       	mov	r11, r24
						+  Ascii_to_nible ( *(ptr+k+1));
     f38:	f6 01       	movw	r30, r12
     f3a:	81 81       	ldd	r24, Z+1	; 0x01
     f3c:	0e 94 ea 27 	call	0x4fd4	; 0x4fd4 <Ascii_to_nible>
					// 	Get Validation Code from EEPROM
					halGetEeprom(((u8*)VALIDATION_CODE_ADDR+1),Len,addr);
					
					while (k < n)
					{
						Setup[l] = (Ascii_to_nible ( *(ptr+k) ) * 16)
     f40:	e1 e0       	ldi	r30, 0x01	; 1
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	ec 0f       	add	r30, r28
     f46:	fd 1f       	adc	r31, r29
     f48:	e0 0f       	add	r30, r16
     f4a:	f1 1d       	adc	r31, r1
     f4c:	20 e1       	ldi	r18, 0x10	; 16
     f4e:	b2 9e       	mul	r11, r18
     f50:	80 0d       	add	r24, r0
     f52:	11 24       	eor	r1, r1
     f54:	80 83       	st	Z, r24
						+  Ascii_to_nible ( *(ptr+k+1));
						k += 2;
						l++;
     f56:	0f 5f       	subi	r16, 0xFF	; 255
     f58:	e3 cf       	rjmp	.-58     	; 0xf20 <appTask+0x632>
					}

					if(memcmp(addr,Setup,Len) == 0)
     f5a:	40 91 2a 05 	lds	r20, 0x052A	; 0x80052a <__data_end>
     f5e:	50 e0       	ldi	r21, 0x00	; 0
     f60:	be 01       	movw	r22, r28
     f62:	6f 5f       	subi	r22, 0xFF	; 255
     f64:	7f 4f       	sbci	r23, 0xFF	; 255
     f66:	ce 01       	movw	r24, r28
     f68:	4f 96       	adiw	r24, 0x1f	; 31
     f6a:	0e 94 ea 31 	call	0x63d4	; 0x63d4 <memcmp>
     f6e:	89 2b       	or	r24, r25
     f70:	49 f4       	brne	.+18     	; 0xf84 <appTask+0x696>
					{
						ReaderStateFlag.ValidateSetup = VALID_READER_SETUP; //Don't store this bit in eeprom it allows for validation check on every power cycle.
     f72:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
     f76:	8b 7f       	andi	r24, 0xFB	; 251
     f78:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
						OP = VALIDATE_READER;
     f7c:	83 e1       	ldi	r24, 0x13	; 19
     f7e:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
     f82:	06 c0       	rjmp	.+12     	; 0xf90 <appTask+0x6a2>
					}
					else
					{
					
						OP = SETUP_REQUEST; // validation failed, request new setup info
     f84:	8a e0       	ldi	r24, 0x0A	; 10
     f86:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
						SETUP_TIMEOUT = true;
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <SETUP_TIMEOUT>
						
					}
				}

				// Response TIMEOUT
				if(VALIDATION_TIMEOUT)
     f90:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <VALIDATION_TIMEOUT>
     f94:	88 23       	and	r24, r24
     f96:	c9 f0       	breq	.+50     	; 0xfca <appTask+0x6dc>
				{
					VALIDATION_TIMEOUT = false;
     f98:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <VALIDATION_TIMEOUT>
					sendBOWValidationRequest();// Re-send Validation Request
     f9c:	0e 94 2e 09 	call	0x125c	; 0x125c <sendBOWValidationRequest>
					
					macSetLongAlarm(SETUP_VALIDATION_TIMEOUT, ValidationTimeout); 		//check Every 5s
     fa0:	61 ea       	ldi	r22, 0xA1	; 161
     fa2:	71 e0       	ldi	r23, 0x01	; 1
     fa4:	8c e3       	ldi	r24, 0x3C	; 60
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <macSetLongAlarm>
     fac:	0e c0       	rjmp	.+28     	; 0xfca <appTask+0x6dc>
				break;
				//case #15
				case SCARD_REMOVED:

				//#if(DEVICE_CONNECTED == ACA_MACHINE)
				ucCardStatus = CARD_OUT;
     fae:	10 92 2f 0a 	sts	0x0A2F, r1	; 0x800a2f <ucCardStatus>
				cardRemoved(REMOVE_CARD);
     fb2:	82 e0       	ldi	r24, 0x02	; 2
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	0e 94 40 12 	call	0x2480	; 0x2480 <cardRemoved>
				
				//#endif
				
				OP = SCANNING;
     fba:	82 e0       	ldi	r24, 0x02	; 2
     fbc:	01 c0       	rjmp	.+2      	; 0xfc0 <appTask+0x6d2>
				
				break;
				//case #16
				case BOW_ERROR:
				OP = IDLE;
     fbe:	87 e2       	ldi	r24, 0x27	; 39
     fc0:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
				break;
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <appTask+0x6dc>
				//case #17
				case APP_INIT:
				appInit();
     fc6:	0e 94 3a 03 	call	0x674	; 0x674 <appInit>
			} //switch OP


		}// macConfig.associated

	}//appTask
     fca:	ab 96       	adiw	r28, 0x2b	; 43
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	f8 94       	cli
     fd0:	de bf       	out	0x3e, r29	; 62
     fd2:	0f be       	out	0x3f, r0	; 63
     fd4:	cd bf       	out	0x3d, r28	; 61
     fd6:	df 91       	pop	r29
     fd8:	cf 91       	pop	r28
     fda:	1f 91       	pop	r17
     fdc:	0f 91       	pop	r16
     fde:	ff 90       	pop	r15
     fe0:	ef 90       	pop	r14
     fe2:	df 90       	pop	r13
     fe4:	cf 90       	pop	r12
     fe6:	bf 90       	pop	r11
     fe8:	08 95       	ret

00000fea <timeoutWaitingForOLTReponse>:
bool sendBOWCCTransaction(structTransaction *transRecord);

static inline void timeoutWaitingForOLTReponse(void)
{
	
	timeout.sendingOfflineTransactions = true;
     fea:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <timeout>
     fee:	81 60       	ori	r24, 0x01	; 1
     ff0:	80 93 02 0a 	sts	0x0A02, r24	; 0x800a02 <timeout>
     ff4:	08 95       	ret

00000ff6 <asciiStringToNibble>:
	return true;	
}

//returns number of characters received.
u8 asciiStringToNibble( char *inStr, char *outStr)
{
     ff6:	9f 92       	push	r9
     ff8:	af 92       	push	r10
     ffa:	bf 92       	push	r11
     ffc:	cf 92       	push	r12
     ffe:	df 92       	push	r13
    1000:	ef 92       	push	r14
    1002:	ff 92       	push	r15
    1004:	0f 93       	push	r16
    1006:	1f 93       	push	r17
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	7c 01       	movw	r14, r24
    100e:	6b 01       	movw	r12, r22
	u8 n, k;
	
	n = strlen(inStr);
    1010:	fc 01       	movw	r30, r24
    1012:	01 90       	ld	r0, Z+
    1014:	00 20       	and	r0, r0
    1016:	e9 f7       	brne	.-6      	; 0x1012 <asciiStringToNibble+0x1c>
    1018:	31 97       	sbiw	r30, 0x01	; 1
    101a:	ef 01       	movw	r28, r30
    101c:	c8 1b       	sub	r28, r24
    101e:	d9 0b       	sbc	r29, r25
    1020:	0c 2f       	mov	r16, r28
	k = 0;
    1022:	10 e0       	ldi	r17, 0x00	; 0


	while (k < n)
    1024:	10 17       	cp	r17, r16
    1026:	a8 f4       	brcc	.+42     	; 0x1052 <asciiStringToNibble+0x5c>
	{
		*outStr = (Ascii_to_nible ( *(inStr+k) ) * 16)
    1028:	57 01       	movw	r10, r14
    102a:	a1 0e       	add	r10, r17
    102c:	b1 1c       	adc	r11, r1
    102e:	f5 01       	movw	r30, r10
    1030:	80 81       	ld	r24, Z
    1032:	0e 94 ea 27 	call	0x4fd4	; 0x4fd4 <Ascii_to_nible>
    1036:	98 2e       	mov	r9, r24
		+  Ascii_to_nible ( *(inStr+k+1));
    1038:	f5 01       	movw	r30, r10
    103a:	81 81       	ldd	r24, Z+1	; 0x01
    103c:	0e 94 ea 27 	call	0x4fd4	; 0x4fd4 <Ascii_to_nible>
	k = 0;


	while (k < n)
	{
		*outStr = (Ascii_to_nible ( *(inStr+k) ) * 16)
    1040:	f0 e1       	ldi	r31, 0x10	; 16
    1042:	9f 9e       	mul	r9, r31
    1044:	80 0d       	add	r24, r0
    1046:	11 24       	eor	r1, r1
    1048:	f6 01       	movw	r30, r12
    104a:	81 93       	st	Z+, r24
    104c:	6f 01       	movw	r12, r30
		+  Ascii_to_nible ( *(inStr+k+1));
		k += 2;
    104e:	1e 5f       	subi	r17, 0xFE	; 254
    1050:	e9 cf       	rjmp	.-46     	; 0x1024 <asciiStringToNibble+0x2e>
		
		outStr++;
	}
	return n/2;
}
    1052:	8c 2f       	mov	r24, r28
    1054:	86 95       	lsr	r24
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	1f 91       	pop	r17
    105c:	0f 91       	pop	r16
    105e:	ff 90       	pop	r15
    1060:	ef 90       	pop	r14
    1062:	df 90       	pop	r13
    1064:	cf 90       	pop	r12
    1066:	bf 90       	pop	r11
    1068:	af 90       	pop	r10
    106a:	9f 90       	pop	r9
    106c:	08 95       	ret

0000106e <constructOutgoingString>:
bool constructOutgoingString(u8 strType, char *tempStr)
{
    106e:	0f 93       	push	r16
    1070:	1f 93       	push	r17
    1072:	cf 93       	push	r28
    1074:	df 93       	push	r29
    1076:	8b 01       	movw	r16, r22
    1078:	eb 01       	movw	r28, r22
    107a:	21 96       	adiw	r28, 0x01	; 1
	switch(strType)
    107c:	83 30       	cpi	r24, 0x03	; 3
    107e:	09 f4       	brne	.+2      	; 0x1082 <constructOutgoingString+0x14>
    1080:	4e c0       	rjmp	.+156    	; 0x111e <constructOutgoingString+0xb0>
    1082:	50 f5       	brcc	.+84     	; 0x10d8 <constructOutgoingString+0x6a>
    1084:	81 30       	cpi	r24, 0x01	; 1
    1086:	71 f1       	breq	.+92     	; 0x10e4 <constructOutgoingString+0x76>
    1088:	82 30       	cpi	r24, 0x02	; 2
    108a:	09 f0       	breq	.+2      	; 0x108e <constructOutgoingString+0x20>
    108c:	7f c0       	rjmp	.+254    	; 0x118c <constructOutgoingString+0x11e>
		
			break;
			
		case REQUEST_SETUP:		  	
    			// Build setup request string
    		sprintf(tempStr+1, "<ReaderSetupInfo>"
    108e:	80 91 f1 0a 	lds	r24, 0x0AF1	; 0x800af1 <deviceStatus+0x1>
    1092:	1f 92       	push	r1
    1094:	8f 93       	push	r24
    1096:	80 91 f0 0a 	lds	r24, 0x0AF0	; 0x800af0 <deviceStatus>
    109a:	1f 92       	push	r1
    109c:	8f 93       	push	r24
    109e:	80 91 bf 09 	lds	r24, 0x09BF	; 0x8009bf <ReaderSetup+0x5>
    10a2:	8f 93       	push	r24
    10a4:	80 91 be 09 	lds	r24, 0x09BE	; 0x8009be <ReaderSetup+0x4>
    10a8:	8f 93       	push	r24
    10aa:	80 91 c1 09 	lds	r24, 0x09C1	; 0x8009c1 <ReaderSetup+0x7>
    10ae:	8f 93       	push	r24
    10b0:	80 91 c0 09 	lds	r24, 0x09C0	; 0x8009c0 <ReaderSetup+0x6>
    10b4:	8f 93       	push	r24
    10b6:	83 ec       	ldi	r24, 0xC3	; 195
    10b8:	92 e0       	ldi	r25, 0x02	; 2
    10ba:	9f 93       	push	r25
    10bc:	8f 93       	push	r24
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	0e 94 b1 32 	call	0x6562	; 0x6562 <sprintf>
            "<laundryRoomId>%d</laundryRoomId>"
			"<manufacturerId>%d</manufacturerId>"
            "<code>%d%d</code>",ReaderSetup.locationId, ReaderSetup.manufacturerId, deviceStatus.deviceType[0],deviceStatus.deviceType[1]);
			
			break;
    10c6:	ad b7       	in	r26, 0x3d	; 61
    10c8:	be b7       	in	r27, 0x3e	; 62
    10ca:	1c 96       	adiw	r26, 0x0c	; 12
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	f8 94       	cli
    10d0:	be bf       	out	0x3e, r27	; 62
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	ad bf       	out	0x3d, r26	; 61
    10d6:	5a c0       	rjmp	.+180    	; 0x118c <constructOutgoingString+0x11e>
	}
	return n/2;
}
bool constructOutgoingString(u8 strType, char *tempStr)
{
	switch(strType)
    10d8:	85 30       	cpi	r24, 0x05	; 5
    10da:	71 f1       	breq	.+92     	; 0x1138 <constructOutgoingString+0xca>
    10dc:	30 f1       	brcs	.+76     	; 0x112a <constructOutgoingString+0xbc>
    10de:	86 30       	cpi	r24, 0x06	; 6
    10e0:	b1 f1       	breq	.+108    	; 0x114e <constructOutgoingString+0xe0>
    10e2:	54 c0       	rjmp	.+168    	; 0x118c <constructOutgoingString+0x11e>
	{
		case FIRMWARE_VERSION:
			//build firmware version string
			sprintf(tempStr+1, "<FirmwareVersion>"
    10e4:	80 91 f1 0a 	lds	r24, 0x0AF1	; 0x800af1 <deviceStatus+0x1>
    10e8:	1f 92       	push	r1
    10ea:	8f 93       	push	r24
    10ec:	80 91 f0 0a 	lds	r24, 0x0AF0	; 0x800af0 <deviceStatus>
    10f0:	1f 92       	push	r1
    10f2:	8f 93       	push	r24
    10f4:	80 e8       	ldi	r24, 0x80	; 128
    10f6:	92 e0       	ldi	r25, 0x02	; 2
    10f8:	9f 93       	push	r25
    10fa:	8f 93       	push	r24
    10fc:	8a e8       	ldi	r24, 0x8A	; 138
    10fe:	92 e0       	ldi	r25, 0x02	; 2
    1100:	9f 93       	push	r25
    1102:	8f 93       	push	r24
    1104:	df 93       	push	r29
    1106:	cf 93       	push	r28
    1108:	0e 94 b1 32 	call	0x6562	; 0x6562 <sprintf>
			"<fw>%s</fw>"
			"<DeviceType>%d%d<Devicetype>"
			,__APP_VERSION_STRING__,deviceStatus.deviceType[0],deviceStatus.deviceType[1]);
		
			break;
    110c:	ad b7       	in	r26, 0x3d	; 61
    110e:	be b7       	in	r27, 0x3e	; 62
    1110:	1a 96       	adiw	r26, 0x0a	; 10
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	f8 94       	cli
    1116:	be bf       	out	0x3e, r27	; 62
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	ad bf       	out	0x3d, r26	; 61
    111c:	37 c0       	rjmp	.+110    	; 0x118c <constructOutgoingString+0x11e>
			
			break;
			
		case REQUEST_VALIDATION:
			//build validation request string
			sprintf(tempStr+1, "<ValidationRequest>");
    111e:	6a e2       	ldi	r22, 0x2A	; 42
    1120:	73 e0       	ldi	r23, 0x03	; 3
    1122:	ce 01       	movw	r24, r28
    1124:	0e 94 14 32 	call	0x6428	; 0x6428 <strcpy>
			
			break;
    1128:	31 c0       	rjmp	.+98     	; 0x118c <constructOutgoingString+0x11e>
			
		case REQUEST_MACHINE_LABEL:
			//build machine label response string
							
			sprintf(tempStr+1, "<MachineLabel>"
    112a:	87 ef       	ldi	r24, 0xF7	; 247
    112c:	99 e0       	ldi	r25, 0x09	; 9
    112e:	9f 93       	push	r25
    1130:	8f 93       	push	r24
    1132:	8e e3       	ldi	r24, 0x3E	; 62
    1134:	93 e0       	ldi	r25, 0x03	; 3
    1136:	1e c0       	rjmp	.+60     	; 0x1174 <constructOutgoingString+0x106>
			break;
			
		case REQUEST_MACHINE_DESCRIPTION:
		
			//build machine description response string
			sprintf(tempStr+1, "<MachineDescription>"
    1138:	84 ec       	ldi	r24, 0xC4	; 196
    113a:	99 e0       	ldi	r25, 0x09	; 9
    113c:	9f 93       	push	r25
    113e:	8f 93       	push	r24
    1140:	88 e5       	ldi	r24, 0x58	; 88
    1142:	93 e0       	ldi	r25, 0x03	; 3
    1144:	9f 93       	push	r25
    1146:	8f 93       	push	r24
    1148:	df 93       	push	r29
    114a:	cf 93       	push	r28
    114c:	17 c0       	rjmp	.+46     	; 0x117c <constructOutgoingString+0x10e>
			,ReaderSetup.machineDescription);
		
			break;
		case REQUEST_NUMBER_OF_OLT:
		
			halGetEeprom(OFFLINE_TRANSACTION_RECORD_ADDR, 1, &ReaderSetup.numOfSavedTransactions);
    114e:	43 ec       	ldi	r20, 0xC3	; 195
    1150:	59 e0       	ldi	r21, 0x09	; 9
    1152:	61 e0       	ldi	r22, 0x01	; 1
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	91 e0       	ldi	r25, 0x01	; 1
    1158:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <halGetEeprom>
			if (ReaderSetup.numOfSavedTransactions == 0xff)
    115c:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    1160:	8f 3f       	cpi	r24, 0xFF	; 255
    1162:	11 f4       	brne	.+4      	; 0x1168 <constructOutgoingString+0xfa>
			{
				ReaderSetup.numOfSavedTransactions = 0;
    1164:	10 92 c3 09 	sts	0x09C3, r1	; 0x8009c3 <ReaderSetup+0x9>
			}
			//build number of offline transactions string
			sprintf(tempStr+1, //"<OLT>"
    1168:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    116c:	1f 92       	push	r1
    116e:	8f 93       	push	r24
    1170:	88 e7       	ldi	r24, 0x78	; 120
    1172:	93 e0       	ldi	r25, 0x03	; 3
    1174:	9f 93       	push	r25
    1176:	8f 93       	push	r24
    1178:	df 93       	push	r29
    117a:	cf 93       	push	r28
    117c:	0e 94 b1 32 	call	0x6562	; 0x6562 <sprintf>
			"<OLT>%d</OLT>"
			,ReaderSetup.numOfSavedTransactions);
			
			break;
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
		default:
		
			break;
	}
	
	tempStr[0] = strlen(tempStr+1); //get string length then assign to first element
    118c:	fe 01       	movw	r30, r28
    118e:	01 90       	ld	r0, Z+
    1190:	00 20       	and	r0, r0
    1192:	e9 f7       	brne	.-6      	; 0x118e <constructOutgoingString+0x120>
	tempStr[0] = tempStr[0] + 1;    // data size = data byte + size byte
    1194:	ec 1b       	sub	r30, r28
    1196:	d8 01       	movw	r26, r16
    1198:	ec 93       	st	X, r30
				
	if (tempStr[0] > 127)
    119a:	8e 2f       	mov	r24, r30
    119c:	80 95       	com	r24
		//#error "Outgoing string to large"
		return false;
	}

	return true;
}
    119e:	88 1f       	adc	r24, r24
    11a0:	88 27       	eor	r24, r24
    11a2:	88 1f       	adc	r24, r24
    11a4:	df 91       	pop	r29
    11a6:	cf 91       	pop	r28
    11a8:	1f 91       	pop	r17
    11aa:	0f 91       	pop	r16
    11ac:	08 95       	ret

000011ae <sendBOWReaderFirmwareVersion>:
*/
#define lowNibble 0
#define highNibble 1

bool sendBOWReaderFirmwareVersion()
{
    11ae:	1f 93       	push	r17
    11b0:	cf 93       	push	r28
    11b2:	df 93       	push	r29
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
    11b8:	c0 58       	subi	r28, 0x80	; 128
    11ba:	d1 09       	sbc	r29, r1
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	de bf       	out	0x3e, r29	; 62
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	cd bf       	out	0x3d, r28	; 61
	char tmp[128]={0};
    11c6:	be 01       	movw	r22, r28
    11c8:	6f 5f       	subi	r22, 0xFF	; 255
    11ca:	7f 4f       	sbci	r23, 0xFF	; 255
    11cc:	80 e8       	ldi	r24, 0x80	; 128
    11ce:	fb 01       	movw	r30, r22
    11d0:	11 92       	st	Z+, r1
    11d2:	8a 95       	dec	r24
    11d4:	e9 f7       	brne	.-6      	; 0x11d0 <sendBOWReaderFirmwareVersion+0x22>

	if ( constructOutgoingString(FIRMWARE_VERSION, tmp) )
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	0e 94 37 08 	call	0x106e	; 0x106e <constructOutgoingString>
    11dc:	18 2f       	mov	r17, r24
    11de:	88 23       	and	r24, r24
    11e0:	41 f0       	breq	.+16     	; 0x11f2 <sendBOWReaderFirmwareVersion+0x44>
	{
		macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);	
    11e2:	ae 01       	movw	r20, r28
    11e4:	4e 5f       	subi	r20, 0xFE	; 254
    11e6:	5f 4f       	sbci	r21, 0xFF	; 255
    11e8:	69 81       	ldd	r22, Y+1	; 0x01
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <macDataRequest>
		return true;
	}
	return false;
}
    11f2:	81 2f       	mov	r24, r17
    11f4:	c0 58       	subi	r28, 0x80	; 128
    11f6:	df 4f       	sbci	r29, 0xFF	; 255
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	f8 94       	cli
    11fc:	de bf       	out	0x3e, r29	; 62
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	cd bf       	out	0x3d, r28	; 61
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	1f 91       	pop	r17
    1208:	08 95       	ret

0000120a <sendBOWSetupRequest>:

bool sendBOWSetupRequest()							//virgin
{
    120a:	cf 93       	push	r28
    120c:	df 93       	push	r29
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	c0 58       	subi	r28, 0x80	; 128
    1214:	d1 09       	sbc	r29, r1
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	f8 94       	cli
    121a:	de bf       	out	0x3e, r29	; 62
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	cd bf       	out	0x3d, r28	; 61
	char tmp[128] = {0};
    1220:	be 01       	movw	r22, r28
    1222:	6f 5f       	subi	r22, 0xFF	; 255
    1224:	7f 4f       	sbci	r23, 0xFF	; 255
    1226:	80 e8       	ldi	r24, 0x80	; 128
    1228:	fb 01       	movw	r30, r22
    122a:	11 92       	st	Z+, r1
    122c:	8a 95       	dec	r24
    122e:	e9 f7       	brne	.-6      	; 0x122a <sendBOWSetupRequest+0x20>
		
	constructOutgoingString(REQUEST_SETUP, tmp);
    1230:	82 e0       	ldi	r24, 0x02	; 2
    1232:	0e 94 37 08 	call	0x106e	; 0x106e <constructOutgoingString>
	macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);
    1236:	ae 01       	movw	r20, r28
    1238:	4e 5f       	subi	r20, 0xFE	; 254
    123a:	5f 4f       	sbci	r21, 0xFF	; 255
    123c:	69 81       	ldd	r22, Y+1	; 0x01
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <macDataRequest>
	
	return true;
}
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	c0 58       	subi	r28, 0x80	; 128
    124a:	df 4f       	sbci	r29, 0xFF	; 255
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	f8 94       	cli
    1250:	de bf       	out	0x3e, r29	; 62
    1252:	0f be       	out	0x3f, r0	; 63
    1254:	cd bf       	out	0x3d, r28	; 61
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	08 95       	ret

0000125c <sendBOWValidationRequest>:
bool sendBOWValidationRequest()
{
    125c:	cf 93       	push	r28
    125e:	df 93       	push	r29
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
    1264:	69 97       	sbiw	r28, 0x19	; 25
    1266:	0f b6       	in	r0, 0x3f	; 63
    1268:	f8 94       	cli
    126a:	de bf       	out	0x3e, r29	; 62
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	cd bf       	out	0x3d, r28	; 61
	char tmp[25] = {0};
    1270:	be 01       	movw	r22, r28
    1272:	6f 5f       	subi	r22, 0xFF	; 255
    1274:	7f 4f       	sbci	r23, 0xFF	; 255
    1276:	89 e1       	ldi	r24, 0x19	; 25
    1278:	fb 01       	movw	r30, r22
    127a:	11 92       	st	Z+, r1
    127c:	8a 95       	dec	r24
    127e:	e9 f7       	brne	.-6      	; 0x127a <sendBOWValidationRequest+0x1e>
		
	constructOutgoingString(REQUEST_VALIDATION, tmp);
    1280:	83 e0       	ldi	r24, 0x03	; 3
    1282:	0e 94 37 08 	call	0x106e	; 0x106e <constructOutgoingString>
	macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);
    1286:	ae 01       	movw	r20, r28
    1288:	4e 5f       	subi	r20, 0xFE	; 254
    128a:	5f 4f       	sbci	r21, 0xFF	; 255
    128c:	69 81       	ldd	r22, Y+1	; 0x01
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <macDataRequest>
	
	return true;
}
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	69 96       	adiw	r28, 0x19	; 25
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	f8 94       	cli
    129e:	de bf       	out	0x3e, r29	; 62
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	cd bf       	out	0x3d, r28	; 61
    12a4:	df 91       	pop	r29
    12a6:	cf 91       	pop	r28
    12a8:	08 95       	ret

000012aa <sendBOWMachineLabel>:
bool sendBOWMachineLabel()
{
    12aa:	cf 93       	push	r28
    12ac:	df 93       	push	r29
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
    12b2:	a3 97       	sbiw	r28, 0x23	; 35
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	f8 94       	cli
    12b8:	de bf       	out	0x3e, r29	; 62
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	cd bf       	out	0x3d, r28	; 61
	char tmp[35] = {0};
    12be:	be 01       	movw	r22, r28
    12c0:	6f 5f       	subi	r22, 0xFF	; 255
    12c2:	7f 4f       	sbci	r23, 0xFF	; 255
    12c4:	83 e2       	ldi	r24, 0x23	; 35
    12c6:	fb 01       	movw	r30, r22
    12c8:	11 92       	st	Z+, r1
    12ca:	8a 95       	dec	r24
    12cc:	e9 f7       	brne	.-6      	; 0x12c8 <sendBOWMachineLabel+0x1e>
	
	constructOutgoingString(REQUEST_MACHINE_LABEL, tmp);
    12ce:	84 e0       	ldi	r24, 0x04	; 4
    12d0:	0e 94 37 08 	call	0x106e	; 0x106e <constructOutgoingString>
	macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);
    12d4:	ae 01       	movw	r20, r28
    12d6:	4e 5f       	subi	r20, 0xFE	; 254
    12d8:	5f 4f       	sbci	r21, 0xFF	; 255
    12da:	69 81       	ldd	r22, Y+1	; 0x01
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <macDataRequest>
	
	return true;
}
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	a3 96       	adiw	r28, 0x23	; 35
    12e8:	0f b6       	in	r0, 0x3f	; 63
    12ea:	f8 94       	cli
    12ec:	de bf       	out	0x3e, r29	; 62
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	cd bf       	out	0x3d, r28	; 61
    12f2:	df 91       	pop	r29
    12f4:	cf 91       	pop	r28
    12f6:	08 95       	ret

000012f8 <sendBOWMachineDescription>:
bool sendBOWMachineDescription()
{
    12f8:	cf 93       	push	r28
    12fa:	df 93       	push	r29
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	c5 55       	subi	r28, 0x55	; 85
    1302:	d1 09       	sbc	r29, r1
    1304:	0f b6       	in	r0, 0x3f	; 63
    1306:	f8 94       	cli
    1308:	de bf       	out	0x3e, r29	; 62
    130a:	0f be       	out	0x3f, r0	; 63
    130c:	cd bf       	out	0x3d, r28	; 61
	char tmp[85] = {0};
    130e:	be 01       	movw	r22, r28
    1310:	6f 5f       	subi	r22, 0xFF	; 255
    1312:	7f 4f       	sbci	r23, 0xFF	; 255
    1314:	85 e5       	ldi	r24, 0x55	; 85
    1316:	fb 01       	movw	r30, r22
    1318:	11 92       	st	Z+, r1
    131a:	8a 95       	dec	r24
    131c:	e9 f7       	brne	.-6      	; 0x1318 <sendBOWMachineDescription+0x20>
			
	constructOutgoingString(REQUEST_MACHINE_DESCRIPTION, tmp);
    131e:	85 e0       	ldi	r24, 0x05	; 5
    1320:	0e 94 37 08 	call	0x106e	; 0x106e <constructOutgoingString>
	macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);
    1324:	ae 01       	movw	r20, r28
    1326:	4e 5f       	subi	r20, 0xFE	; 254
    1328:	5f 4f       	sbci	r21, 0xFF	; 255
    132a:	69 81       	ldd	r22, Y+1	; 0x01
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <macDataRequest>
	
	return true;
}
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	cb 5a       	subi	r28, 0xAB	; 171
    1338:	df 4f       	sbci	r29, 0xFF	; 255
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	f8 94       	cli
    133e:	de bf       	out	0x3e, r29	; 62
    1340:	0f be       	out	0x3f, r0	; 63
    1342:	cd bf       	out	0x3d, r28	; 61
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	08 95       	ret

0000134a <sendNumberOfOLT>:
bool sendNumberOfOLT()
{
    134a:	cf 93       	push	r28
    134c:	df 93       	push	r29
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
    1352:	a3 97       	sbiw	r28, 0x23	; 35
    1354:	0f b6       	in	r0, 0x3f	; 63
    1356:	f8 94       	cli
    1358:	de bf       	out	0x3e, r29	; 62
    135a:	0f be       	out	0x3f, r0	; 63
    135c:	cd bf       	out	0x3d, r28	; 61
	char tmp[35] = {0};
    135e:	be 01       	movw	r22, r28
    1360:	6f 5f       	subi	r22, 0xFF	; 255
    1362:	7f 4f       	sbci	r23, 0xFF	; 255
    1364:	83 e2       	ldi	r24, 0x23	; 35
    1366:	fb 01       	movw	r30, r22
    1368:	11 92       	st	Z+, r1
    136a:	8a 95       	dec	r24
    136c:	e9 f7       	brne	.-6      	; 0x1368 <sendNumberOfOLT+0x1e>
	
	constructOutgoingString(REQUEST_NUMBER_OF_OLT, tmp);
    136e:	86 e0       	ldi	r24, 0x06	; 6
    1370:	0e 94 37 08 	call	0x106e	; 0x106e <constructOutgoingString>
	macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);
    1374:	ae 01       	movw	r20, r28
    1376:	4e 5f       	subi	r20, 0xFE	; 254
    1378:	5f 4f       	sbci	r21, 0xFF	; 255
    137a:	69 81       	ldd	r22, Y+1	; 0x01
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <macDataRequest>
		
	return true;	
}
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	a3 96       	adiw	r28, 0x23	; 35
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	cd bf       	out	0x3d, r28	; 61
    1392:	df 91       	pop	r29
    1394:	cf 91       	pop	r28
    1396:	08 95       	ret

00001398 <extractIncomingMessage>:
The extractIncomingMessage(const char *dataBuffer) function returns a pointer to the beginning of the substring.

\returns a pointer to the beginning of
the substring, or \c NULL if the substring is not found.  */
u8 extractIncomingMessage(char *dataBuffer)
{
    1398:	8f 92       	push	r8
    139a:	9f 92       	push	r9
    139c:	af 92       	push	r10
    139e:	bf 92       	push	r11
    13a0:	cf 92       	push	r12
    13a2:	df 92       	push	r13
    13a4:	ff 92       	push	r15
    13a6:	0f 93       	push	r16
    13a8:	1f 93       	push	r17
    13aa:	cf 93       	push	r28
    13ac:	df 93       	push	r29
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
    13b2:	cd 54       	subi	r28, 0x4D	; 77
    13b4:	d1 09       	sbc	r29, r1
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	f8 94       	cli
    13ba:	de bf       	out	0x3e, r29	; 62
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	cd bf       	out	0x3d, r28	; 61
    13c0:	2e 96       	adiw	r28, 0x0e	; 14
    13c2:	9f af       	std	Y+63, r25	; 0x3f
    13c4:	8e af       	std	Y+62, r24	; 0x3e
    13c6:	2e 97       	sbiw	r28, 0x0e	; 14
	u8 TemplongAddr[8] = {0};
    13c8:	6e 01       	movw	r12, r28
    13ca:	83 e4       	ldi	r24, 0x43	; 67
    13cc:	c8 0e       	add	r12, r24
    13ce:	d1 1c       	adc	r13, r1
    13d0:	88 e0       	ldi	r24, 0x08	; 8
    13d2:	f6 01       	movw	r30, r12
    13d4:	98 2f       	mov	r25, r24
    13d6:	11 92       	st	Z+, r1
    13d8:	9a 95       	dec	r25
    13da:	e9 f7       	brne	.-6      	; 0x13d6 <extractIncomingMessage+0x3e>
	u8 MaclongAddr[8]  = {0};
    13dc:	5e 01       	movw	r10, r28
    13de:	eb e3       	ldi	r30, 0x3B	; 59
    13e0:	ae 0e       	add	r10, r30
    13e2:	b1 1c       	adc	r11, r1
    13e4:	f5 01       	movw	r30, r10
    13e6:	11 92       	st	Z+, r1
    13e8:	8a 95       	dec	r24
    13ea:	e9 f7       	brne	.-6      	; 0x13e6 <extractIncomingMessage+0x4e>
	u16 tmp;
	char *ptr;
	u8 n;
	char nibbleStr[50] = {0};
    13ec:	ce 01       	movw	r24, r28
    13ee:	01 96       	adiw	r24, 0x01	; 1
    13f0:	4c 01       	movw	r8, r24
    13f2:	82 e3       	ldi	r24, 0x32	; 50
    13f4:	f4 01       	movw	r30, r8
    13f6:	11 92       	st	Z+, r1
    13f8:	8a 95       	dec	r24
    13fa:	e9 f7       	brne	.-6      	; 0x13f6 <extractIncomingMessage+0x5e>
	u8 i = 0;
    13fc:	2c 96       	adiw	r28, 0x0c	; 12
    13fe:	1f ae       	std	Y+63, r1	; 0x3f
    1400:	2c 97       	sbiw	r28, 0x0c	; 12
	u8 Nibble = 0;	
	u8 returnCode = OP;
    1402:	f0 90 b7 09 	lds	r15, 0x09B7	; 0x8009b7 <OP>
	/*
	*******************************************************************
	*************  Extract SetupString from INcomming String **********
	******************************************************************* */          
			
	if(strstr(dataBuffer, "SetupPackage") != NULL)
    1406:	2e 96       	adiw	r28, 0x0e	; 14
    1408:	0e ad       	ldd	r16, Y+62	; 0x3e
    140a:	1f ad       	ldd	r17, Y+63	; 0x3f
    140c:	2e 97       	sbiw	r28, 0x0e	; 14
    140e:	66 e8       	ldi	r22, 0x86	; 134
    1410:	73 e0       	ldi	r23, 0x03	; 3
    1412:	c8 01       	movw	r24, r16
    1414:	0e 94 35 32 	call	0x646a	; 0x646a <strstr>
    1418:	89 2b       	or	r24, r25
    141a:	09 f4       	brne	.+2      	; 0x141e <extractIncomingMessage+0x86>
    141c:	99 c0       	rjmp	.+306    	; 0x1550 <extractIncomingMessage+0x1b8>
	{
		//if((ptr = GetParam(dataBuffer,"<SetupString>","<")) != NULL)			PPOS170601
		if((ptr = GetParam(dataBuffer,"<SS>","<")) != NULL)
    141e:	49 e6       	ldi	r20, 0x69	; 105
    1420:	52 e0       	ldi	r21, 0x02	; 2
    1422:	63 e9       	ldi	r22, 0x93	; 147
    1424:	73 e0       	ldi	r23, 0x03	; 3
    1426:	c8 01       	movw	r24, r16
    1428:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <GetParam>
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	21 f1       	breq	.+72     	; 0x1478 <extractIncomingMessage+0xe0>
		{ 
			n = asciiStringToNibble(ptr, nibbleStr);
    1430:	b4 01       	movw	r22, r8
    1432:	0e 94 fb 07 	call	0xff6	; 0xff6 <asciiStringToNibble>
    1436:	8b ab       	std	Y+51, r24	; 0x33
			// copy setup data

			halPutEeprom(MACHINE_SETUP_ADDR, n, (u8*)nibbleStr); //write machine setup string to eeprom; Maurice's Fix
    1438:	a4 01       	movw	r20, r8
    143a:	68 2f       	mov	r22, r24
    143c:	84 e2       	ldi	r24, 0x24	; 36
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <halPutEeprom>
            
			ReaderSetup.maxOfflineTransaction = nibbleStr[n-1];
    1444:	8b a9       	ldd	r24, Y+51	; 0x33
    1446:	fe 01       	movw	r30, r28
    1448:	e8 0f       	add	r30, r24
    144a:	f1 1d       	adc	r31, r1
    144c:	80 81       	ld	r24, Z
    144e:	80 93 c2 09 	sts	0x09C2, r24	; 0x8009c2 <ReaderSetup+0x8>
			halPutEeprom(READER_SETUP_ADDR, 1, (u8*)&ReaderSetup.maxOfflineTransaction); //write machine setup string to eeprom minus "number of offline transactions"            
    1452:	42 ec       	ldi	r20, 0xC2	; 194
    1454:	59 e0       	ldi	r21, 0x09	; 9
    1456:	61 e0       	ldi	r22, 0x01	; 1
    1458:	81 e6       	ldi	r24, 0x61	; 97
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <halPutEeprom>
			
			ReaderStateFlag.ReaderSetup = READER_SETUP_DONE;
    1460:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
    1464:	8d 7f       	andi	r24, 0xFD	; 253
    1466:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
			halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
    146a:	45 e3       	ldi	r20, 0x35	; 53
    146c:	59 e0       	ldi	r21, 0x09	; 9
    146e:	61 e0       	ldi	r22, 0x01	; 1
    1470:	82 e2       	ldi	r24, 0x22	; 34
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <halPutEeprom>
	/*
	*******************************************************************
	*************  Extract ValidationCode from INcomming String ********
	******************************************************************* */
            
		if((ptr = GetParam((char *)dataBuffer,"<ValidationCode>","<")) != NULL)
    1478:	49 e6       	ldi	r20, 0x69	; 105
    147a:	52 e0       	ldi	r21, 0x02	; 2
    147c:	68 e9       	ldi	r22, 0x98	; 152
    147e:	73 e0       	ldi	r23, 0x03	; 3
    1480:	2e 96       	adiw	r28, 0x0e	; 14
    1482:	8e ad       	ldd	r24, Y+62	; 0x3e
    1484:	9f ad       	ldd	r25, Y+63	; 0x3f
    1486:	2e 97       	sbiw	r28, 0x0e	; 14
    1488:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <GetParam>
    148c:	00 97       	sbiw	r24, 0x00	; 0
    148e:	91 f0       	breq	.+36     	; 0x14b4 <extractIncomingMessage+0x11c>
		{      
	
			n = asciiStringToNibble(ptr, nibbleStr);	
    1490:	b4 01       	movw	r22, r8
    1492:	0e 94 fb 07 	call	0xff6	; 0xff6 <asciiStringToNibble>
    1496:	8b ab       	std	Y+51, r24	; 0x33
			// save validation code
			halPutEeprom(VALIDATION_CODE_ADDR, 1, (u8*)&n);
    1498:	ae 01       	movw	r20, r28
    149a:	4d 5c       	subi	r20, 0xCD	; 205
    149c:	5f 4f       	sbci	r21, 0xFF	; 255
    149e:	61 e0       	ldi	r22, 0x01	; 1
    14a0:	81 e6       	ldi	r24, 0x61	; 97
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <halPutEeprom>
			halPutEeprom(VALIDATION_CODE_ADDR+1, n, (u8*)nibbleStr);
    14a8:	a4 01       	movw	r20, r8
    14aa:	6b a9       	ldd	r22, Y+51	; 0x33
    14ac:	82 e6       	ldi	r24, 0x62	; 98
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <halPutEeprom>
	/*
	*******************************************************************
	*************  Extract ReaderID from INcomming String *************
	******************************************************************* */
           
	if((ptr = GetParam((char *)dataBuffer,"<ReaderId>","<")) != NULL)
    14b4:	49 e6       	ldi	r20, 0x69	; 105
    14b6:	52 e0       	ldi	r21, 0x02	; 2
    14b8:	69 ea       	ldi	r22, 0xA9	; 169
    14ba:	73 e0       	ldi	r23, 0x03	; 3
    14bc:	2e 96       	adiw	r28, 0x0e	; 14
    14be:	8e ad       	ldd	r24, Y+62	; 0x3e
    14c0:	9f ad       	ldd	r25, Y+63	; 0x3f
    14c2:	2e 97       	sbiw	r28, 0x0e	; 14
    14c4:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <GetParam>
    14c8:	00 97       	sbiw	r24, 0x00	; 0
    14ca:	81 f1       	breq	.+96     	; 0x152c <extractIncomingMessage+0x194>
	{ //1

					tmp = atoi(ptr);         
    14cc:	0e 94 e0 30 	call	0x61c0	; 0x61c0 <atoi>
    14d0:	2c 96       	adiw	r28, 0x0c	; 12
    14d2:	3f ad       	ldd	r19, Y+63	; 0x3f
    14d4:	2c 97       	sbiw	r28, 0x0c	; 12
	u16 tmp;
	char *ptr;
	u8 n;
	char nibbleStr[50] = {0};
	u8 i = 0;
	u8 Nibble = 0;	
    14d6:	20 e0       	ldi	r18, 0x00	; 0
	if((ptr = GetParam((char *)dataBuffer,"<ReaderId>","<")) != NULL)
	{ //1

					tmp = atoi(ptr);         
	
				while (tmp> 0)
    14d8:	00 97       	sbiw	r24, 0x00	; 0
    14da:	c9 f0       	breq	.+50     	; 0x150e <extractIncomingMessage+0x176>
    14dc:	e3 2f       	mov	r30, r19
    14de:	f0 e0       	ldi	r31, 0x00	; 0
							Nibble = highNibble;
						break;

						case highNibble:

							TemplongAddr[i] =  ((tmp % 16)<<4)| TemplongAddr[i]; 
    14e0:	ec 0d       	add	r30, r12
    14e2:	fd 1d       	adc	r31, r13
					tmp = atoi(ptr);         
	
				while (tmp> 0)
				{

					switch(Nibble)
    14e4:	21 30       	cpi	r18, 0x01	; 1
    14e6:	29 f0       	breq	.+10     	; 0x14f2 <extractIncomingMessage+0x15a>
					{
			
						case lowNibble:

							TemplongAddr[i] = (tmp % 16); 
    14e8:	28 2f       	mov	r18, r24
    14ea:	2f 70       	andi	r18, 0x0F	; 15
    14ec:	20 83       	st	Z, r18
							Nibble = highNibble;
    14ee:	21 e0       	ldi	r18, 0x01	; 1
						break;
    14f0:	08 c0       	rjmp	.+16     	; 0x1502 <extractIncomingMessage+0x16a>

						case highNibble:

							TemplongAddr[i] =  ((tmp % 16)<<4)| TemplongAddr[i]; 
    14f2:	40 81       	ld	r20, Z
    14f4:	28 2f       	mov	r18, r24
    14f6:	22 95       	swap	r18
    14f8:	20 7f       	andi	r18, 0xF0	; 240
    14fa:	24 2b       	or	r18, r20
    14fc:	20 83       	st	Z, r18
							i++;
    14fe:	3f 5f       	subi	r19, 0xFF	; 255
							Nibble = lowNibble;
    1500:	20 e0       	ldi	r18, 0x00	; 0
						break;

					}
			
						tmp = tmp / 16;
    1502:	74 e0       	ldi	r23, 0x04	; 4
    1504:	96 95       	lsr	r25
    1506:	87 95       	ror	r24
    1508:	7a 95       	dec	r23
    150a:	e1 f7       	brne	.-8      	; 0x1504 <extractIncomingMessage+0x16c>
    150c:	e5 cf       	rjmp	.-54     	; 0x14d8 <extractIncomingMessage+0x140>
    150e:	2c 96       	adiw	r28, 0x0c	; 12
    1510:	3f af       	std	Y+63, r19	; 0x3f
    1512:	2c 97       	sbiw	r28, 0x0c	; 12
				}

					//Update Reader to eeprom in Hex format
					halPutMacAddr(TemplongAddr);
    1514:	a6 01       	movw	r20, r12
    1516:	68 e0       	ldi	r22, 0x08	; 8
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <halPutEeprom>

					// Verifry write opertaion
					halGetMacAddr(MaclongAddr);
    1520:	a5 01       	movw	r20, r10
    1522:	68 e0       	ldi	r22, 0x08	; 8
    1524:	80 e0       	ldi	r24, 0x00	; 0
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <halGetEeprom>




		// Re-associate with COORD using new ReaderID
		if(strcmp((char*)TemplongAddr,(char*)MaclongAddr) == 0 )
    152c:	b5 01       	movw	r22, r10
    152e:	c6 01       	movw	r24, r12
    1530:	0e 94 0b 32 	call	0x6416	; 0x6416 <strcmp>
    1534:	89 2b       	or	r24, r25
    1536:	09 f0       	breq	.+2      	; 0x153a <extractIncomingMessage+0x1a2>
    1538:	5e c1       	rjmp	.+700    	; 0x17f6 <extractIncomingMessage+0x45e>
				#if (DEBUG)
					Beeps(5);// Beeps 5x
				#endif
		                    

			ReaderStateFlag.FirstRun = NON_VIRGIN_READER;                                        
    153a:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
    153e:	8e 7f       	andi	r24, 0xFE	; 254
    1540:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
			halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
    1544:	45 e3       	ldi	r20, 0x35	; 53
    1546:	59 e0       	ldi	r21, 0x09	; 9
    1548:	61 e0       	ldi	r22, 0x01	; 1
    154a:	82 e2       	ldi	r24, 0x22	; 34
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	30 c0       	rjmp	.+96     	; 0x15b0 <extractIncomingMessage+0x218>
				returnCode = APP_INIT;	
		}

	}
	
	else if(strstr(dataBuffer, "SetupRequest") != NULL)
    1550:	64 eb       	ldi	r22, 0xB4	; 180
    1552:	73 e0       	ldi	r23, 0x03	; 3
    1554:	c8 01       	movw	r24, r16
    1556:	0e 94 35 32 	call	0x646a	; 0x646a <strstr>
    155a:	89 2b       	or	r24, r25
    155c:	09 f0       	breq	.+2      	; 0x1560 <extractIncomingMessage+0x1c8>
    155e:	43 c1       	rjmp	.+646    	; 0x17e6 <extractIncomingMessage+0x44e>
	{		
		returnCode = SETUP_REQUEST;
	}
	
	else if(strstr(dataBuffer, "ValidationResponse") != NULL)
    1560:	61 ec       	ldi	r22, 0xC1	; 193
    1562:	73 e0       	ldi	r23, 0x03	; 3
    1564:	c8 01       	movw	r24, r16
    1566:	0e 94 35 32 	call	0x646a	; 0x646a <strstr>
    156a:	89 2b       	or	r24, r25
    156c:	09 f0       	breq	.+2      	; 0x1570 <extractIncomingMessage+0x1d8>
    156e:	3e c1       	rjmp	.+636    	; 0x17ec <extractIncomingMessage+0x454>
	{
		returnCode = VALIDATE_SETUP;
	}
	else if(strstr(dataBuffer, "GetFirmwareVersion") != NULL)
    1570:	64 ed       	ldi	r22, 0xD4	; 212
    1572:	73 e0       	ldi	r23, 0x03	; 3
    1574:	c8 01       	movw	r24, r16
    1576:	0e 94 35 32 	call	0x646a	; 0x646a <strstr>
    157a:	89 2b       	or	r24, r25
    157c:	19 f0       	breq	.+6      	; 0x1584 <extractIncomingMessage+0x1ec>
	{
		sendBOWReaderFirmwareVersion();
    157e:	0e 94 d7 08 	call	0x11ae	; 0x11ae <sendBOWReaderFirmwareVersion>
    1582:	39 c1       	rjmp	.+626    	; 0x17f6 <extractIncomingMessage+0x45e>
				
	}	
	else if(strstr(dataBuffer, "ResetEEPROM") != NULL)
    1584:	67 ee       	ldi	r22, 0xE7	; 231
    1586:	73 e0       	ldi	r23, 0x03	; 3
    1588:	c8 01       	movw	r24, r16
    158a:	0e 94 35 32 	call	0x646a	; 0x646a <strstr>
    158e:	89 2b       	or	r24, r25
    1590:	a1 f0       	breq	.+40     	; 0x15ba <extractIncomingMessage+0x222>
	{
		 unsigned char reset_eeprom[8] = {255,255,255,255,255,255,255,255};
    1592:	88 e0       	ldi	r24, 0x08	; 8
    1594:	e7 e2       	ldi	r30, 0x27	; 39
    1596:	f2 e0       	ldi	r31, 0x02	; 2
    1598:	de 01       	movw	r26, r28
    159a:	d3 96       	adiw	r26, 0x33	; 51
    159c:	01 90       	ld	r0, Z+
    159e:	0d 92       	st	X+, r0
    15a0:	8a 95       	dec	r24
    15a2:	e1 f7       	brne	.-8      	; 0x159c <extractIncomingMessage+0x204>
		 halPutEeprom(0,8,(u8*)reset_eeprom);
    15a4:	ae 01       	movw	r20, r28
    15a6:	4d 5c       	subi	r20, 0xCD	; 205
    15a8:	5f 4f       	sbci	r21, 0xFF	; 255
    15aa:	68 e0       	ldi	r22, 0x08	; 8
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <halPutEeprom>
		 
		 
		 // re-associate
		 //appInit();
		 returnCode = APP_INIT;		
    15b4:	60 e2       	ldi	r22, 0x20	; 32
    15b6:	f6 2e       	mov	r15, r22
    15b8:	1e c1       	rjmp	.+572    	; 0x17f6 <extractIncomingMessage+0x45e>
	}
	else if(strstr(dataBuffer, "EnterBootloader") != NULL)
    15ba:	63 ef       	ldi	r22, 0xF3	; 243
    15bc:	73 e0       	ldi	r23, 0x03	; 3
    15be:	c8 01       	movw	r24, r16
    15c0:	0e 94 35 32 	call	0x646a	; 0x646a <strstr>
    15c4:	89 2b       	or	r24, r25
    15c6:	09 f4       	brne	.+2      	; 0x15ca <extractIncomingMessage+0x232>
    15c8:	3b c0       	rjmp	.+118    	; 0x1640 <extractIncomingMessage+0x2a8>
	{


		// Store Active CHANNEL to EEPROM Address 0xFF2
		// eeprom_write(CHANNEL_ADDR, macConfig.currentChannel[0]);
		halPutEeprom((u16*)CHANNEL_ADDR, 1, &macConfig.currentChannel);
    15ca:	44 e4       	ldi	r20, 0x44	; 68
    15cc:	5c e0       	ldi	r21, 0x0C	; 12
    15ce:	61 e0       	ldi	r22, 0x01	; 1
    15d0:	82 ef       	ldi	r24, 0xF2	; 242
    15d2:	9f e0       	ldi	r25, 0x0F	; 15
    15d4:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <halPutEeprom>

		// Store Active PAN_ID to EEPROM Address 0xFF4
		halPutEeprom((u16*)PANID_ADDR, 2, (u8*)&macConfig.panId);
    15d8:	4b e3       	ldi	r20, 0x3B	; 59
    15da:	5c e0       	ldi	r21, 0x0C	; 12
    15dc:	62 e0       	ldi	r22, 0x02	; 2
    15de:	84 ef       	ldi	r24, 0xF4	; 244
    15e0:	9f e0       	ldi	r25, 0x0F	; 15
    15e2:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <halPutEeprom>

		// Store Active SHORT SOURCE ADDR to EEPROM Address 0xFF6
		halPutEeprom((u16*)SRCADDR_ADDR,2, (u8*)&macConfig.shortAddress);
    15e6:	4d e3       	ldi	r20, 0x3D	; 61
    15e8:	5c e0       	ldi	r21, 0x0C	; 12
    15ea:	62 e0       	ldi	r22, 0x02	; 2
    15ec:	86 ef       	ldi	r24, 0xF6	; 246
    15ee:	9f e0       	ldi	r25, 0x0F	; 15
    15f0:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <halPutEeprom>

		// Store Active DESTINATION ADDR to EEPROM Address 0xFF8
		// halPutEeprom(DESTADDR_ADDR, 2, &MdcStatus.MachineType);

		i = 0x01;
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	2c 96       	adiw	r28, 0x0c	; 12
    15f8:	8f af       	std	Y+63, r24	; 0x3f
    15fa:	2c 97       	sbiw	r28, 0x0c	; 12
		halPutEeprom((u16*)BOOT_INIT_ADDR,1,(u8*)&i);
    15fc:	ae 01       	movw	r20, r28
    15fe:	45 5b       	subi	r20, 0xB5	; 181
    1600:	5f 4f       	sbci	r21, 0xFF	; 255
    1602:	61 e0       	ldi	r22, 0x01	; 1
    1604:	80 ef       	ldi	r24, 0xF0	; 240
    1606:	9f e0       	ldi	r25, 0x0F	; 15
    1608:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <halPutEeprom>
				
		// zero out CRC and Application size memory location
		memset(dataBuffer,0,sizeof((char*)dataBuffer));
    160c:	2e 96       	adiw	r28, 0x0e	; 14
    160e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1610:	ff ad       	ldd	r31, Y+63	; 0x3f
    1612:	2e 97       	sbiw	r28, 0x0e	; 14
    1614:	11 82       	std	Z+1, r1	; 0x01
    1616:	10 82       	st	Z, r1
		halPutEeprom((u16*)APP_CRC,6,(u8*)&dataBuffer);
    1618:	ae 01       	movw	r20, r28
    161a:	44 5b       	subi	r20, 0xB4	; 180
    161c:	5f 4f       	sbci	r21, 0xFF	; 255
    161e:	66 e0       	ldi	r22, 0x06	; 6
    1620:	8a ef       	ldi	r24, 0xFA	; 250
    1622:	9f e0       	ldi	r25, 0x0F	; 15
    1624:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <halPutEeprom>

				
		// Initiate watchdog timer
		cli();
    1628:	f8 94       	cli
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    162a:	9f e0       	ldi	r25, 0x0F	; 15
    162c:	88 e1       	ldi	r24, 0x18	; 24
    162e:	0f b6       	in	r0, 0x3f	; 63
    1630:	f8 94       	cli
    1632:	a8 95       	wdr
    1634:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1638:	0f be       	out	0x3f, r0	; 63
    163a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		wdt_enable(WDTO_2S);
		while(1);
    163e:	ff cf       	rjmp	.-2      	; 0x163e <extractIncomingMessage+0x2a6>

	}
	else if(strstr(dataBuffer, "SetD") != NULL)
    1640:	63 e0       	ldi	r22, 0x03	; 3
    1642:	74 e0       	ldi	r23, 0x04	; 4
    1644:	c8 01       	movw	r24, r16
    1646:	0e 94 35 32 	call	0x646a	; 0x646a <strstr>
    164a:	89 2b       	or	r24, r25
    164c:	51 f1       	breq	.+84     	; 0x16a2 <extractIncomingMessage+0x30a>
	{
		if((ptr = GetParam((char *)dataBuffer,"<SetD>","<")) != NULL)
    164e:	49 e6       	ldi	r20, 0x69	; 105
    1650:	52 e0       	ldi	r21, 0x02	; 2
    1652:	68 e0       	ldi	r22, 0x08	; 8
    1654:	74 e0       	ldi	r23, 0x04	; 4
    1656:	c8 01       	movw	r24, r16
    1658:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <GetParam>
    165c:	00 97       	sbiw	r24, 0x00	; 0
    165e:	09 f4       	brne	.+2      	; 0x1662 <extractIncomingMessage+0x2ca>
    1660:	ca c0       	rjmp	.+404    	; 0x17f6 <extractIncomingMessage+0x45e>
		{				
			if((n=strlen(ptr)) <= MACHINE_NAME_SIZE)
    1662:	fc 01       	movw	r30, r24
    1664:	01 90       	ld	r0, Z+
    1666:	00 20       	and	r0, r0
    1668:	e9 f7       	brne	.-6      	; 0x1664 <extractIncomingMessage+0x2cc>
    166a:	31 97       	sbiw	r30, 0x01	; 1
    166c:	8f 01       	movw	r16, r30
    166e:	08 1b       	sub	r16, r24
    1670:	19 0b       	sbc	r17, r25
    1672:	0b ab       	std	Y+51, r16	; 0x33
    1674:	03 33       	cpi	r16, 0x33	; 51
    1676:	08 f0       	brcs	.+2      	; 0x167a <extractIncomingMessage+0x2e2>
    1678:	be c0       	rjmp	.+380    	; 0x17f6 <extractIncomingMessage+0x45e>
			{
				strcpy((char*)ReaderSetup.machineDescription, ptr);				
    167a:	bc 01       	movw	r22, r24
    167c:	84 ec       	ldi	r24, 0xC4	; 196
    167e:	99 e0       	ldi	r25, 0x09	; 9
    1680:	0e 94 14 32 	call	0x6428	; 0x6428 <strcpy>
				n++;//add null terminator to string
    1684:	61 e0       	ldi	r22, 0x01	; 1
    1686:	60 0f       	add	r22, r16
    1688:	6b ab       	std	Y+51, r22	; 0x33
				halPutEeprom(MACHINE_DESCRIPTION_ADDR, n, (u8*)&ReaderSetup.machineDescription);
    168a:	44 ec       	ldi	r20, 0xC4	; 196
    168c:	59 e0       	ldi	r21, 0x09	; 9
    168e:	87 e7       	ldi	r24, 0x77	; 119
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <halPutEeprom>
		
				ReaderStateFlag.ReaderNameSetup = SET_READER_FLAG;
    1696:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
    169a:	8f 77       	andi	r24, 0x7F	; 127
    169c:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
    16a0:	3a c0       	rjmp	.+116    	; 0x1716 <extractIncomingMessage+0x37e>
				halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
			}		
		}
	}	
	else if(strstr(dataBuffer, "GetD") != NULL)
    16a2:	6f e0       	ldi	r22, 0x0F	; 15
    16a4:	74 e0       	ldi	r23, 0x04	; 4
    16a6:	c8 01       	movw	r24, r16
    16a8:	0e 94 35 32 	call	0x646a	; 0x646a <strstr>
    16ac:	89 2b       	or	r24, r25
    16ae:	19 f0       	breq	.+6      	; 0x16b6 <extractIncomingMessage+0x31e>
	{
		sendBOWMachineDescription();
    16b0:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <sendBOWMachineDescription>
    16b4:	a0 c0       	rjmp	.+320    	; 0x17f6 <extractIncomingMessage+0x45e>
		
	}	
	else if(strstr(dataBuffer, "SetMachineLabel") != NULL)
    16b6:	64 e1       	ldi	r22, 0x14	; 20
    16b8:	74 e0       	ldi	r23, 0x04	; 4
    16ba:	c8 01       	movw	r24, r16
    16bc:	0e 94 35 32 	call	0x646a	; 0x646a <strstr>
    16c0:	89 2b       	or	r24, r25
    16c2:	89 f1       	breq	.+98     	; 0x1726 <extractIncomingMessage+0x38e>
	{
		if((ptr = GetParam((char *)dataBuffer,"<SetMachineLabel>","<")) != NULL)
    16c4:	49 e6       	ldi	r20, 0x69	; 105
    16c6:	52 e0       	ldi	r21, 0x02	; 2
    16c8:	64 e2       	ldi	r22, 0x24	; 36
    16ca:	74 e0       	ldi	r23, 0x04	; 4
    16cc:	c8 01       	movw	r24, r16
    16ce:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <GetParam>
    16d2:	00 97       	sbiw	r24, 0x00	; 0
    16d4:	09 f4       	brne	.+2      	; 0x16d8 <extractIncomingMessage+0x340>
    16d6:	8f c0       	rjmp	.+286    	; 0x17f6 <extractIncomingMessage+0x45e>
		{
			if((n=strlen(ptr)) <= MACHINE_LABEL_SIZE)
    16d8:	fc 01       	movw	r30, r24
    16da:	01 90       	ld	r0, Z+
    16dc:	00 20       	and	r0, r0
    16de:	e9 f7       	brne	.-6      	; 0x16da <extractIncomingMessage+0x342>
    16e0:	31 97       	sbiw	r30, 0x01	; 1
    16e2:	8f 01       	movw	r16, r30
    16e4:	08 1b       	sub	r16, r24
    16e6:	19 0b       	sbc	r17, r25
    16e8:	0b ab       	std	Y+51, r16	; 0x33
    16ea:	0b 30       	cpi	r16, 0x0B	; 11
    16ec:	08 f0       	brcs	.+2      	; 0x16f0 <extractIncomingMessage+0x358>
    16ee:	83 c0       	rjmp	.+262    	; 0x17f6 <extractIncomingMessage+0x45e>
			{
				strcpy((char*)ReaderSetup.machineLabel, ptr);
    16f0:	bc 01       	movw	r22, r24
    16f2:	87 ef       	ldi	r24, 0xF7	; 247
    16f4:	99 e0       	ldi	r25, 0x09	; 9
    16f6:	0e 94 14 32 	call	0x6428	; 0x6428 <strcpy>
				n++;//add null terminator to string
    16fa:	61 e0       	ldi	r22, 0x01	; 1
    16fc:	60 0f       	add	r22, r16
    16fe:	6b ab       	std	Y+51, r22	; 0x33
				halPutEeprom(MACHINE_LABEL_ADDR, n, (u8*)&ReaderSetup.machineLabel);
    1700:	47 ef       	ldi	r20, 0xF7	; 247
    1702:	59 e0       	ldi	r21, 0x09	; 9
    1704:	8c e6       	ldi	r24, 0x6C	; 108
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <halPutEeprom>
		
				ReaderStateFlag.ReaderLabelSetup = SET_READER_FLAG;
    170c:	80 91 36 09 	lds	r24, 0x0936	; 0x800936 <ReaderStateFlag+0x1>
    1710:	8e 7f       	andi	r24, 0xFE	; 254
    1712:	80 93 36 09 	sts	0x0936, r24	; 0x800936 <ReaderStateFlag+0x1>
				halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
    1716:	45 e3       	ldi	r20, 0x35	; 53
    1718:	59 e0       	ldi	r21, 0x09	; 9
    171a:	61 e0       	ldi	r22, 0x01	; 1
    171c:	82 e2       	ldi	r24, 0x22	; 34
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <halPutEeprom>
    1724:	68 c0       	rjmp	.+208    	; 0x17f6 <extractIncomingMessage+0x45e>
			}
			
		}
	}
	else if(strstr(dataBuffer, "GetMachineLabel") != NULL)
    1726:	66 e3       	ldi	r22, 0x36	; 54
    1728:	74 e0       	ldi	r23, 0x04	; 4
    172a:	c8 01       	movw	r24, r16
    172c:	0e 94 35 32 	call	0x646a	; 0x646a <strstr>
    1730:	89 2b       	or	r24, r25
    1732:	19 f0       	breq	.+6      	; 0x173a <extractIncomingMessage+0x3a2>
	{
		sendBOWMachineLabel();			
    1734:	0e 94 55 09 	call	0x12aa	; 0x12aa <sendBOWMachineLabel>
    1738:	5e c0       	rjmp	.+188    	; 0x17f6 <extractIncomingMessage+0x45e>
	}
	else if (strstr(dataBuffer, "GetOLT") != NULL)
    173a:	66 e4       	ldi	r22, 0x46	; 70
    173c:	74 e0       	ldi	r23, 0x04	; 4
    173e:	c8 01       	movw	r24, r16
    1740:	0e 94 35 32 	call	0x646a	; 0x646a <strstr>
    1744:	89 2b       	or	r24, r25
    1746:	69 f0       	breq	.+26     	; 0x1762 <extractIncomingMessage+0x3ca>
	{
		sendNumberOfOLT();
    1748:	0e 94 a5 09 	call	0x134a	; 0x134a <sendNumberOfOLT>
		
		oLTTimerId = macSetLongAlarm(SERVER_RESPONSE_TIMEOUT,timeoutWaitingForOLTReponse);
    174c:	65 ef       	ldi	r22, 0xF5	; 245
    174e:	77 e0       	ldi	r23, 0x07	; 7
    1750:	8c e3       	ldi	r24, 0x3C	; 60
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <macSetLongAlarm>
    1758:	80 93 30 05 	sts	0x0530, r24	; 0x800530 <oLTTimerId.3842>
		returnCode = SEND_OFFLINE_TRANSACTIONS;
    175c:	58 e2       	ldi	r21, 0x28	; 40
    175e:	f5 2e       	mov	r15, r21
    1760:	4a c0       	rjmp	.+148    	; 0x17f6 <extractIncomingMessage+0x45e>
	}
		
	else if(strstr(dataBuffer, "ShowBalance") != NULL)
    1762:	6d e4       	ldi	r22, 0x4D	; 77
    1764:	74 e0       	ldi	r23, 0x04	; 4
    1766:	c8 01       	movw	r24, r16
    1768:	0e 94 35 32 	call	0x646a	; 0x646a <strstr>
    176c:	89 2b       	or	r24, r25
    176e:	09 f0       	breq	.+2      	; 0x1772 <extractIncomingMessage+0x3da>
    1770:	40 c0       	rjmp	.+128    	; 0x17f2 <extractIncomingMessage+0x45a>
	{
		returnCode = SHOW_BALANCE_REQUEST;		
	}
	else if (strstr(dataBuffer, "faultcode") != NULL)
    1772:	69 e5       	ldi	r22, 0x59	; 89
    1774:	74 e0       	ldi	r23, 0x04	; 4
    1776:	c8 01       	movw	r24, r16
    1778:	0e 94 35 32 	call	0x646a	; 0x646a <strstr>
    177c:	89 2b       	or	r24, r25
    177e:	49 f1       	breq	.+82     	; 0x17d2 <extractIncomingMessage+0x43a>
	{
		char errCode = 0;
    1780:	1b aa       	std	Y+51, r1	; 0x33
		if((ptr = GetParam((char *)dataBuffer,"<faultcode>","<")) != NULL)
    1782:	49 e6       	ldi	r20, 0x69	; 105
    1784:	52 e0       	ldi	r21, 0x02	; 2
    1786:	63 e6       	ldi	r22, 0x63	; 99
    1788:	74 e0       	ldi	r23, 0x04	; 4
    178a:	c8 01       	movw	r24, r16
    178c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <GetParam>
    1790:	00 97       	sbiw	r24, 0x00	; 0
    1792:	89 f1       	breq	.+98     	; 0x17f6 <extractIncomingMessage+0x45e>
		{
			asciiStringToNibble(ptr, &errCode);
    1794:	be 01       	movw	r22, r28
    1796:	6d 5c       	subi	r22, 0xCD	; 205
    1798:	7f 4f       	sbci	r23, 0xFF	; 255
    179a:	0e 94 fb 07 	call	0xff6	; 0xff6 <asciiStringToNibble>
			
			switch(errCode)
    179e:	8b a9       	ldd	r24, Y+51	; 0x33
    17a0:	86 30       	cpi	r24, 0x06	; 6
    17a2:	49 f5       	brne	.+82     	; 0x17f6 <extractIncomingMessage+0x45e>
			{
				case TRANSACTION_SUCCESSFUL:
					if (returnCode == SEND_OFFLINE_TRANSACTIONS)
    17a4:	f8 e2       	ldi	r31, 0x28	; 40
    17a6:	ff 12       	cpse	r15, r31
    17a8:	26 c0       	rjmp	.+76     	; 0x17f6 <extractIncomingMessage+0x45e>
					{
						macTimerEnd(oLTTimerId);
    17aa:	80 91 30 05 	lds	r24, 0x0530	; 0x800530 <oLTTimerId.3842>
    17ae:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <macTimerEnd>
						if( !sendStoredTransaction() )
    17b2:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <sendStoredTransaction>
    17b6:	88 23       	and	r24, r24
    17b8:	49 f0       	breq	.+18     	; 0x17cc <extractIncomingMessage+0x434>
						{ //All stored transactions have been sent
							returnCode = IDLE;
						}
						else
						{	//set new timer while waiting for next response
							oLTTimerId = macSetLongAlarm(SERVER_RESPONSE_TIMEOUT,timeoutWaitingForOLTReponse);
    17ba:	65 ef       	ldi	r22, 0xF5	; 245
    17bc:	77 e0       	ldi	r23, 0x07	; 7
    17be:	8c e3       	ldi	r24, 0x3C	; 60
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <macSetLongAlarm>
    17c6:	80 93 30 05 	sts	0x0530, r24	; 0x800530 <oLTTimerId.3842>
    17ca:	15 c0       	rjmp	.+42     	; 0x17f6 <extractIncomingMessage+0x45e>
					if (returnCode == SEND_OFFLINE_TRANSACTIONS)
					{
						macTimerEnd(oLTTimerId);
						if( !sendStoredTransaction() )
						{ //All stored transactions have been sent
							returnCode = IDLE;
    17cc:	47 e2       	ldi	r20, 0x27	; 39
    17ce:	f4 2e       	mov	r15, r20
    17d0:	12 c0       	rjmp	.+36     	; 0x17f6 <extractIncomingMessage+0x45e>
					break;	  
			}
		}
			
	}
	else if(strstr(dataBuffer, "AuditRq") != NULL)     //new: Audit Data ACA
    17d2:	6f e6       	ldi	r22, 0x6F	; 111
    17d4:	74 e0       	ldi	r23, 0x04	; 4
    17d6:	c8 01       	movw	r24, r16
    17d8:	0e 94 35 32 	call	0x646a	; 0x646a <strstr>
    17dc:	89 2b       	or	r24, r25
    17de:	59 f0       	breq	.+22     	; 0x17f6 <extractIncomingMessage+0x45e>
	{
		returnCode = REQUEST_AUDITDATA;
    17e0:	38 e0       	ldi	r19, 0x08	; 8
    17e2:	f3 2e       	mov	r15, r19
    17e4:	08 c0       	rjmp	.+16     	; 0x17f6 <extractIncomingMessage+0x45e>

	}
	
	else if(strstr(dataBuffer, "SetupRequest") != NULL)
	{		
		returnCode = SETUP_REQUEST;
    17e6:	2a e0       	ldi	r18, 0x0A	; 10
    17e8:	f2 2e       	mov	r15, r18
    17ea:	05 c0       	rjmp	.+10     	; 0x17f6 <extractIncomingMessage+0x45e>
	}
	
	else if(strstr(dataBuffer, "ValidationResponse") != NULL)
	{
		returnCode = VALIDATE_SETUP;
    17ec:	94 e1       	ldi	r25, 0x14	; 20
    17ee:	f9 2e       	mov	r15, r25
    17f0:	02 c0       	rjmp	.+4      	; 0x17f6 <extractIncomingMessage+0x45e>
		returnCode = SEND_OFFLINE_TRANSACTIONS;
	}
		
	else if(strstr(dataBuffer, "ShowBalance") != NULL)
	{
		returnCode = SHOW_BALANCE_REQUEST;		
    17f2:	8f e1       	ldi	r24, 0x1F	; 31
    17f4:	f8 2e       	mov	r15, r24
	}
	


	return returnCode;
}
    17f6:	8f 2d       	mov	r24, r15
    17f8:	c3 5b       	subi	r28, 0xB3	; 179
    17fa:	df 4f       	sbci	r29, 0xFF	; 255
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	f8 94       	cli
    1800:	de bf       	out	0x3e, r29	; 62
    1802:	0f be       	out	0x3f, r0	; 63
    1804:	cd bf       	out	0x3d, r28	; 61
    1806:	df 91       	pop	r29
    1808:	cf 91       	pop	r28
    180a:	1f 91       	pop	r17
    180c:	0f 91       	pop	r16
    180e:	ff 90       	pop	r15
    1810:	df 90       	pop	r13
    1812:	cf 90       	pop	r12
    1814:	bf 90       	pop	r11
    1816:	af 90       	pop	r10
    1818:	9f 90       	pop	r9
    181a:	8f 90       	pop	r8
    181c:	08 95       	ret

0000181e <sendBOWCCTransaction>:

bool sendBOWCCTransaction(structTransaction *transRecord)
{
    181e:	ef 92       	push	r14
    1820:	ff 92       	push	r15
    1822:	0f 93       	push	r16
    1824:	1f 93       	push	r17
    1826:	cf 93       	push	r28
    1828:	df 93       	push	r29
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
    182e:	ca 58       	subi	r28, 0x8A	; 138
    1830:	d1 09       	sbc	r29, r1
    1832:	0f b6       	in	r0, 0x3f	; 63
    1834:	f8 94       	cli
    1836:	de bf       	out	0x3e, r29	; 62
    1838:	0f be       	out	0x3f, r0	; 63
    183a:	cd bf       	out	0x3d, r28	; 61
    183c:	8c 01       	movw	r16, r24
	char tmpCardIdString[10] = {0};
    183e:	7e 01       	movw	r14, r28
    1840:	81 e8       	ldi	r24, 0x81	; 129
    1842:	e8 0e       	add	r14, r24
    1844:	f1 1c       	adc	r15, r1
    1846:	8a e0       	ldi	r24, 0x0A	; 10
    1848:	d7 01       	movw	r26, r14
    184a:	1d 92       	st	X+, r1
    184c:	8a 95       	dec	r24
    184e:	e9 f7       	brne	.-6      	; 0x184a <sendBOWCCTransaction+0x2c>
	char tempStr[128] = {0};
    1850:	fe 01       	movw	r30, r28
    1852:	31 96       	adiw	r30, 0x01	; 1
    1854:	80 e8       	ldi	r24, 0x80	; 128
    1856:	df 01       	movw	r26, r30
    1858:	1d 92       	st	X+, r1
    185a:	8a 95       	dec	r24
    185c:	e9 f7       	brne	.-6      	; 0x1858 <sendBOWCCTransaction+0x3a>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ultoa_ncheck (unsigned long, char *, unsigned char);
	return __ultoa_ncheck (__val, __s, __radix);
    185e:	f8 01       	movw	r30, r16
    1860:	61 85       	ldd	r22, Z+9	; 0x09
    1862:	72 85       	ldd	r23, Z+10	; 0x0a
    1864:	83 85       	ldd	r24, Z+11	; 0x0b
    1866:	94 85       	ldd	r25, Z+12	; 0x0c
    1868:	2a e0       	ldi	r18, 0x0A	; 10
    186a:	a7 01       	movw	r20, r14
    186c:	0e 94 57 32 	call	0x64ae	; 0x64ae <__ultoa_ncheck>
	
	//send data to BOW
	ultoa(transRecord->CardId,tmpCardIdString,10);
	sprintf((char *)tempStr+1, "<CC>"
    1870:	d8 01       	movw	r26, r16
    1872:	54 96       	adiw	r26, 0x14	; 20
    1874:	8c 91       	ld	r24, X
    1876:	54 97       	sbiw	r26, 0x14	; 20
    1878:	1f 92       	push	r1
    187a:	8f 93       	push	r24
    187c:	13 96       	adiw	r26, 0x03	; 3
    187e:	8c 91       	ld	r24, X
    1880:	13 97       	sbiw	r26, 0x03	; 3
    1882:	1f 92       	push	r1
    1884:	8f 93       	push	r24
    1886:	12 96       	adiw	r26, 0x02	; 2
    1888:	8c 91       	ld	r24, X
    188a:	12 97       	sbiw	r26, 0x02	; 2
    188c:	1f 92       	push	r1
    188e:	8f 93       	push	r24
    1890:	15 96       	adiw	r26, 0x05	; 5
    1892:	8c 91       	ld	r24, X
    1894:	15 97       	sbiw	r26, 0x05	; 5
    1896:	8f 93       	push	r24
    1898:	14 96       	adiw	r26, 0x04	; 4
    189a:	8c 91       	ld	r24, X
    189c:	14 97       	sbiw	r26, 0x04	; 4
    189e:	8f 93       	push	r24
    18a0:	11 96       	adiw	r26, 0x01	; 1
    18a2:	8c 91       	ld	r24, X
    18a4:	11 97       	sbiw	r26, 0x01	; 1
    18a6:	8f 93       	push	r24
    18a8:	8c 91       	ld	r24, X
    18aa:	8f 93       	push	r24
    18ac:	17 96       	adiw	r26, 0x07	; 7
    18ae:	6d 91       	ld	r22, X+
    18b0:	7c 91       	ld	r23, X
    18b2:	18 97       	sbiw	r26, 0x08	; 8
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	0e 94 b1 2c 	call	0x5962	; 0x5962 <__floatunsisf>
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	48 ec       	ldi	r20, 0xC8	; 200
    18c2:	52 e4       	ldi	r21, 0x42	; 66
    18c4:	0e 94 10 2c 	call	0x5820	; 0x5820 <__divsf3>
    18c8:	9f 93       	push	r25
    18ca:	8f 93       	push	r24
    18cc:	7f 93       	push	r23
    18ce:	6f 93       	push	r22
    18d0:	ff 92       	push	r15
    18d2:	ef 92       	push	r14
    18d4:	87 e7       	ldi	r24, 0x77	; 119
    18d6:	94 e0       	ldi	r25, 0x04	; 4
    18d8:	9f 93       	push	r25
    18da:	8f 93       	push	r24
    18dc:	8e 01       	movw	r16, r28
    18de:	0e 5f       	subi	r16, 0xFE	; 254
    18e0:	1f 4f       	sbci	r17, 0xFF	; 255
    18e2:	1f 93       	push	r17
    18e4:	0f 93       	push	r16
    18e6:	0e 94 b1 32 	call	0x6562	; 0x6562 <sprintf>
	"<code>%d%d</code>"
	"<isOL>%d</isOL>"
	,tmpCardIdString, (double)(transRecord->vendPrice / 100.0), transRecord->LocationId, transRecord->ManufactureId
	, transRecord->MachineId[0] , transRecord->MachineId[1], transRecord->isOffline);
	
	tempStr[0] = strlen(tempStr+1); //get string length then assign to first element
    18ea:	f8 01       	movw	r30, r16
    18ec:	01 90       	ld	r0, Z+
    18ee:	00 20       	and	r0, r0
    18f0:	e9 f7       	brne	.-6      	; 0x18ec <sendBOWCCTransaction+0xce>
	tempStr[0] = tempStr[0] + 1;    // data size = data byte + size byte
    18f2:	6e 2f       	mov	r22, r30
    18f4:	60 1b       	sub	r22, r16
    18f6:	69 83       	std	Y+1, r22	; 0x01
	
	if (tempStr[0] > 127)
    18f8:	0f b6       	in	r0, 0x3f	; 63
    18fa:	f8 94       	cli
    18fc:	de bf       	out	0x3e, r29	; 62
    18fe:	0f be       	out	0x3f, r0	; 63
    1900:	cd bf       	out	0x3d, r28	; 61
    1902:	67 fd       	sbrc	r22, 7
    1904:	07 c0       	rjmp	.+14     	; 0x1914 <sendBOWCCTransaction+0xf6>
	{
		//#error "Outgoing string to large"
		return false;
	}
	
	macDataRequest(DEFAULT_COORD_ADDR,(u8)tempStr[0],(u8*)tempStr+1); //send record via radio
    1906:	a8 01       	movw	r20, r16
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <macDataRequest>
	
	return true;
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	01 c0       	rjmp	.+2      	; 0x1916 <sendBOWCCTransaction+0xf8>
	tempStr[0] = tempStr[0] + 1;    // data size = data byte + size byte
	
	if (tempStr[0] > 127)
	{
		//#error "Outgoing string to large"
		return false;
    1914:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	macDataRequest(DEFAULT_COORD_ADDR,(u8)tempStr[0],(u8*)tempStr+1); //send record via radio
	
	return true;
}
    1916:	c6 57       	subi	r28, 0x76	; 118
    1918:	df 4f       	sbci	r29, 0xFF	; 255
    191a:	0f b6       	in	r0, 0x3f	; 63
    191c:	f8 94       	cli
    191e:	de bf       	out	0x3e, r29	; 62
    1920:	0f be       	out	0x3f, r0	; 63
    1922:	cd bf       	out	0x3d, r28	; 61
    1924:	df 91       	pop	r29
    1926:	cf 91       	pop	r28
    1928:	1f 91       	pop	r17
    192a:	0f 91       	pop	r16
    192c:	ff 90       	pop	r15
    192e:	ef 90       	pop	r14
    1930:	08 95       	ret

00001932 <displayMsg>:
Led1 to led6 are limited to values defined in "display.h"
***********************************************************************************************
*/

void displayMsg(u8 msg) 
{
    1932:	cf 92       	push	r12
    1934:	ef 92       	push	r14
    1936:	0f 93       	push	r16
	if (msg == CARD_ERR_MSG)
    1938:	81 30       	cpi	r24, 0x01	; 1
    193a:	29 f4       	brne	.+10     	; 0x1946 <displayMsg+0x14>
	else if (msg == BLANK_MSG)
	{
		sendSQDisplayCommand(LED_BLANK,LED_BLANK,LED_BLANK,LED_BLANK,LED_BLANK,LED_BLANK,0);
	}

}
    193c:	0f 91       	pop	r16
    193e:	ef 90       	pop	r14
    1940:	cf 90       	pop	r12

void displayMsg(u8 msg) 
{
	if (msg == CARD_ERR_MSG)
	{
		displaySQCardError();
    1942:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <displaySQCardError>
	}
	else if (msg == SETUP_MSG)		//no communication with the BOW
    1946:	82 30       	cpi	r24, 0x02	; 2
    1948:	49 f4       	brne	.+18     	; 0x195c <displayMsg+0x2a>
	{
		sendSQDisplayCommand(LED_n,LED_o,LED_S,LED_U,LED_BLANK,LED_BLANK,5);
    194a:	25 e0       	ldi	r18, 0x05	; 5
    194c:	c2 2e       	mov	r12, r18
    194e:	e1 2c       	mov	r14, r1
    1950:	00 e0       	ldi	r16, 0x00	; 0
    1952:	2e e3       	ldi	r18, 0x3E	; 62
    1954:	4d e6       	ldi	r20, 0x6D	; 109
    1956:	6c e5       	ldi	r22, 0x5C	; 92
    1958:	84 e5       	ldi	r24, 0x54	; 84
    195a:	1f c0       	rjmp	.+62     	; 0x199a <displayMsg+0x68>
	}
	else if (msg == BUSY_MSG)
    195c:	84 30       	cpi	r24, 0x04	; 4
    195e:	49 f4       	brne	.+18     	; 0x1972 <displayMsg+0x40>
	{
		sendSQDisplayCommand(LED_b,LED_U,LED_S,LED_Y,LED_BLANK,LED_BLANK,5);
    1960:	95 e0       	ldi	r25, 0x05	; 5
    1962:	c9 2e       	mov	r12, r25
    1964:	e1 2c       	mov	r14, r1
    1966:	00 e0       	ldi	r16, 0x00	; 0
    1968:	2e e6       	ldi	r18, 0x6E	; 110
    196a:	4d e6       	ldi	r20, 0x6D	; 109
    196c:	6e e3       	ldi	r22, 0x3E	; 62
    196e:	8c e7       	ldi	r24, 0x7C	; 124
    1970:	14 c0       	rjmp	.+40     	; 0x199a <displayMsg+0x68>
	}
	else if (msg == SERVICE_MSG)
    1972:	83 30       	cpi	r24, 0x03	; 3
    1974:	49 f4       	brne	.+18     	; 0x1988 <displayMsg+0x56>
	{
		sendSQDisplayCommand(LED_S,LED_E,LED_r,LED_BLANK,LED_BLANK,LED_BLANK,5);
    1976:	85 e0       	ldi	r24, 0x05	; 5
    1978:	c8 2e       	mov	r12, r24
    197a:	e1 2c       	mov	r14, r1
    197c:	00 e0       	ldi	r16, 0x00	; 0
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	40 e5       	ldi	r20, 0x50	; 80
    1982:	69 e7       	ldi	r22, 0x79	; 121
    1984:	8d e6       	ldi	r24, 0x6D	; 109
    1986:	09 c0       	rjmp	.+18     	; 0x199a <displayMsg+0x68>
	}
	else if (msg == BLANK_MSG)
    1988:	85 30       	cpi	r24, 0x05	; 5
    198a:	49 f4       	brne	.+18     	; 0x199e <displayMsg+0x6c>
	{
		sendSQDisplayCommand(LED_BLANK,LED_BLANK,LED_BLANK,LED_BLANK,LED_BLANK,LED_BLANK,0);
    198c:	c1 2c       	mov	r12, r1
    198e:	e1 2c       	mov	r14, r1
    1990:	00 e0       	ldi	r16, 0x00	; 0
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	40 e0       	ldi	r20, 0x00	; 0
    1996:	60 e0       	ldi	r22, 0x00	; 0
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	0e 94 c0 11 	call	0x2380	; 0x2380 <sendSQDisplayCommand>
	}

}
    199e:	0f 91       	pop	r16
    19a0:	ef 90       	pop	r14
    19a2:	cf 90       	pop	r12
    19a4:	08 95       	ret

000019a6 <displayVersion>:

*/

void displayVersion(void)
{	
	displaySQReaderVersion();
    19a6:	0c 94 ee 11 	jmp	0x23dc	; 0x23dc <displaySQReaderVersion>

000019aa <getSQSetupData>:
	if( (cardType == REGULAR_VEND) && sendSQCashCardInserted() )
	{
		CurrentAccount.CardState = CARD_IN;
		return true;
	}
	else if ( (cardType == TOPOFF_VEND) && sendSQCashCardInsetedForTopoff() )
    19aa:	1f 93       	push	r17
    19ac:	cf 93       	push	r28
    19ae:	df 93       	push	r29
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
    19b4:	ec 97       	sbiw	r28, 0x3c	; 60
    19b6:	0f b6       	in	r0, 0x3f	; 63
    19b8:	f8 94       	cli
    19ba:	de bf       	out	0x3e, r29	; 62
    19bc:	0f be       	out	0x3f, r0	; 63
    19be:	cd bf       	out	0x3d, r28	; 61
    19c0:	ae 01       	movw	r20, r28
    19c2:	4f 5f       	subi	r20, 0xFF	; 255
    19c4:	5f 4f       	sbci	r21, 0xFF	; 255
    19c6:	8c e3       	ldi	r24, 0x3C	; 60
    19c8:	fa 01       	movw	r30, r20
    19ca:	11 92       	st	Z+, r1
    19cc:	8a 95       	dec	r24
    19ce:	e9 f7       	brne	.-6      	; 0x19ca <getSQSetupData+0x20>
    19d0:	80 91 f0 0a 	lds	r24, 0x0AF0	; 0x800af0 <deviceStatus>
    19d4:	82 32       	cpi	r24, 0x22	; 34
    19d6:	09 f4       	brne	.+2      	; 0x19da <getSQSetupData+0x30>
    19d8:	91 c0       	rjmp	.+290    	; 0x1afc <getSQSetupData+0x152>
    19da:	89 32       	cpi	r24, 0x29	; 41
    19dc:	09 f4       	brne	.+2      	; 0x19e0 <getSQSetupData+0x36>
    19de:	fb c0       	rjmp	.+502    	; 0x1bd6 <getSQSetupData+0x22c>
    19e0:	81 32       	cpi	r24, 0x21	; 33
    19e2:	09 f0       	breq	.+2      	; 0x19e6 <getSQSetupData+0x3c>
    19e4:	74 c1       	rjmp	.+744    	; 0x1cce <getSQSetupData+0x324>
    19e6:	65 e1       	ldi	r22, 0x15	; 21
    19e8:	84 e2       	ldi	r24, 0x24	; 36
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <halGetEeprom>
    19f0:	1a 85       	ldd	r17, Y+10	; 0x0a
    19f2:	61 2f       	mov	r22, r17
    19f4:	70 e0       	ldi	r23, 0x00	; 0
    19f6:	76 2f       	mov	r23, r22
    19f8:	66 27       	eor	r22, r22
    19fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    19fc:	68 0f       	add	r22, r24
    19fe:	71 1d       	adc	r23, r1
    1a00:	07 2e       	mov	r0, r23
    1a02:	00 0c       	add	r0, r0
    1a04:	88 0b       	sbc	r24, r24
    1a06:	99 0b       	sbc	r25, r25
    1a08:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__floatsisf>
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	48 ec       	ldi	r20, 0xC8	; 200
    1a12:	52 e4       	ldi	r21, 0x42	; 66
    1a14:	0e 94 10 2c 	call	0x5820	; 0x5820 <__divsf3>
    1a18:	60 93 c0 0c 	sts	0x0CC0, r22	; 0x800cc0 <vendPrice>
    1a1c:	70 93 c1 0c 	sts	0x0CC1, r23	; 0x800cc1 <vendPrice+0x1>
    1a20:	80 93 c2 0c 	sts	0x0CC2, r24	; 0x800cc2 <vendPrice+0x2>
    1a24:	90 93 c3 0c 	sts	0x0CC3, r25	; 0x800cc3 <vendPrice+0x3>
    1a28:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2a:	80 93 ce 08 	sts	0x08CE, r24	; 0x8008ce <SQACAToploadProgramming+0x5>
    1a2e:	10 92 cf 08 	sts	0x08CF, r1	; 0x8008cf <SQACAToploadProgramming+0x6>
    1a32:	8c 81       	ldd	r24, Y+4	; 0x04
    1a34:	80 93 d0 08 	sts	0x08D0, r24	; 0x8008d0 <SQACAToploadProgramming+0x7>
    1a38:	10 92 d1 08 	sts	0x08D1, r1	; 0x8008d1 <SQACAToploadProgramming+0x8>
    1a3c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a3e:	80 93 d2 08 	sts	0x08D2, r24	; 0x8008d2 <SQACAToploadProgramming+0x9>
    1a42:	10 92 d3 08 	sts	0x08D3, r1	; 0x8008d3 <SQACAToploadProgramming+0xa>
    1a46:	88 85       	ldd	r24, Y+8	; 0x08
    1a48:	80 93 d4 08 	sts	0x08D4, r24	; 0x8008d4 <SQACAToploadProgramming+0xb>
    1a4c:	10 92 d5 08 	sts	0x08D5, r1	; 0x8008d5 <SQACAToploadProgramming+0xc>
    1a50:	10 93 d6 08 	sts	0x08D6, r17	; 0x8008d6 <SQACAToploadProgramming+0xd>
    1a54:	10 92 d7 08 	sts	0x08D7, r1	; 0x8008d7 <SQACAToploadProgramming+0xe>
    1a58:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a5a:	80 93 d8 08 	sts	0x08D8, r24	; 0x8008d8 <SQACAToploadProgramming+0xf>
    1a5e:	10 92 d9 08 	sts	0x08D9, r1	; 0x8008d9 <SQACAToploadProgramming+0x10>
    1a62:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a64:	80 93 da 08 	sts	0x08DA, r24	; 0x8008da <SQACAToploadProgramming+0x11>
    1a68:	10 92 db 08 	sts	0x08DB, r1	; 0x8008db <SQACAToploadProgramming+0x12>
    1a6c:	88 89       	ldd	r24, Y+16	; 0x10
    1a6e:	80 93 dc 08 	sts	0x08DC, r24	; 0x8008dc <SQACAToploadProgramming+0x13>
    1a72:	10 92 dd 08 	sts	0x08DD, r1	; 0x8008dd <SQACAToploadProgramming+0x14>
    1a76:	8a 89       	ldd	r24, Y+18	; 0x12
    1a78:	80 93 de 08 	sts	0x08DE, r24	; 0x8008de <SQACAToploadProgramming+0x15>
    1a7c:	10 92 df 08 	sts	0x08DF, r1	; 0x8008df <SQACAToploadProgramming+0x16>
    1a80:	8c 89       	ldd	r24, Y+20	; 0x14
    1a82:	80 93 e0 08 	sts	0x08E0, r24	; 0x8008e0 <SQACAToploadProgramming+0x17>
    1a86:	10 92 e1 08 	sts	0x08E1, r1	; 0x8008e1 <SQACAToploadProgramming+0x18>
    1a8a:	82 e3       	ldi	r24, 0x32	; 50
    1a8c:	80 93 e2 08 	sts	0x08E2, r24	; 0x8008e2 <SQACAToploadProgramming+0x19>
    1a90:	10 92 e3 08 	sts	0x08E3, r1	; 0x8008e3 <SQACAToploadProgramming+0x1a>
    1a94:	10 92 e4 08 	sts	0x08E4, r1	; 0x8008e4 <SQACAToploadProgramming+0x1b>
    1a98:	10 92 e5 08 	sts	0x08E5, r1	; 0x8008e5 <SQACAToploadProgramming+0x1c>
    1a9c:	10 92 e6 08 	sts	0x08E6, r1	; 0x8008e6 <SQACAToploadProgramming+0x1d>
    1aa0:	10 92 e7 08 	sts	0x08E7, r1	; 0x8008e7 <SQACAToploadProgramming+0x1e>
    1aa4:	10 92 e8 08 	sts	0x08E8, r1	; 0x8008e8 <SQACAToploadProgramming+0x1f>
    1aa8:	10 92 e9 08 	sts	0x08E9, r1	; 0x8008e9 <SQACAToploadProgramming+0x20>
    1aac:	9a e0       	ldi	r25, 0x0A	; 10
    1aae:	90 93 ea 08 	sts	0x08EA, r25	; 0x8008ea <SQACAToploadProgramming+0x21>
    1ab2:	84 e0       	ldi	r24, 0x04	; 4
    1ab4:	80 93 eb 08 	sts	0x08EB, r24	; 0x8008eb <SQACAToploadProgramming+0x22>
    1ab8:	10 92 ec 08 	sts	0x08EC, r1	; 0x8008ec <SQACAToploadProgramming+0x23>
    1abc:	27 e0       	ldi	r18, 0x07	; 7
    1abe:	20 93 ed 08 	sts	0x08ED, r18	; 0x8008ed <SQACAToploadProgramming+0x24>
    1ac2:	90 93 ee 08 	sts	0x08EE, r25	; 0x8008ee <SQACAToploadProgramming+0x25>
    1ac6:	80 93 f0 08 	sts	0x08F0, r24	; 0x8008f0 <SQACAToploadProgramming+0x27>
    1aca:	10 92 ef 08 	sts	0x08EF, r1	; 0x8008ef <SQACAToploadProgramming+0x26>
    1ace:	26 e0       	ldi	r18, 0x06	; 6
    1ad0:	20 93 f1 08 	sts	0x08F1, r18	; 0x8008f1 <SQACAToploadProgramming+0x28>
    1ad4:	90 93 f2 08 	sts	0x08F2, r25	; 0x8008f2 <SQACAToploadProgramming+0x29>
    1ad8:	80 93 f3 08 	sts	0x08F3, r24	; 0x8008f3 <SQACAToploadProgramming+0x2a>
    1adc:	10 92 f4 08 	sts	0x08F4, r1	; 0x8008f4 <SQACAToploadProgramming+0x2b>
    1ae0:	85 e0       	ldi	r24, 0x05	; 5
    1ae2:	80 93 f5 08 	sts	0x08F5, r24	; 0x8008f5 <SQACAToploadProgramming+0x2c>
    1ae6:	80 93 f6 08 	sts	0x08F6, r24	; 0x8008f6 <SQACAToploadProgramming+0x2d>
    1aea:	10 92 f7 08 	sts	0x08F7, r1	; 0x8008f7 <SQACAToploadProgramming+0x2e>
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	80 93 f8 08 	sts	0x08F8, r24	; 0x8008f8 <SQACAToploadProgramming+0x2f>
    1af4:	8d e1       	ldi	r24, 0x1D	; 29
    1af6:	80 93 f9 08 	sts	0x08F9, r24	; 0x8008f9 <SQACAToploadProgramming+0x30>
    1afa:	e9 c0       	rjmp	.+466    	; 0x1cce <getSQSetupData+0x324>
    1afc:	60 e1       	ldi	r22, 0x10	; 16
    1afe:	84 e2       	ldi	r24, 0x24	; 36
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <halGetEeprom>
    1b06:	1a 85       	ldd	r17, Y+10	; 0x0a
    1b08:	61 2f       	mov	r22, r17
    1b0a:	70 e0       	ldi	r23, 0x00	; 0
    1b0c:	76 2f       	mov	r23, r22
    1b0e:	66 27       	eor	r22, r22
    1b10:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b12:	68 0f       	add	r22, r24
    1b14:	71 1d       	adc	r23, r1
    1b16:	07 2e       	mov	r0, r23
    1b18:	00 0c       	add	r0, r0
    1b1a:	88 0b       	sbc	r24, r24
    1b1c:	99 0b       	sbc	r25, r25
    1b1e:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__floatsisf>
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	48 ec       	ldi	r20, 0xC8	; 200
    1b28:	52 e4       	ldi	r21, 0x42	; 66
    1b2a:	0e 94 10 2c 	call	0x5820	; 0x5820 <__divsf3>
    1b2e:	60 93 c0 0c 	sts	0x0CC0, r22	; 0x800cc0 <vendPrice>
    1b32:	70 93 c1 0c 	sts	0x0CC1, r23	; 0x800cc1 <vendPrice+0x1>
    1b36:	80 93 c2 0c 	sts	0x0CC2, r24	; 0x800cc2 <vendPrice+0x2>
    1b3a:	90 93 c3 0c 	sts	0x0CC3, r25	; 0x800cc3 <vendPrice+0x3>
    1b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b40:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <SQACAFrontloadProgramming+0x5>
    1b44:	10 92 a8 08 	sts	0x08A8, r1	; 0x8008a8 <SQACAFrontloadProgramming+0x6>
    1b48:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4a:	80 93 a9 08 	sts	0x08A9, r24	; 0x8008a9 <SQACAFrontloadProgramming+0x7>
    1b4e:	10 92 aa 08 	sts	0x08AA, r1	; 0x8008aa <SQACAFrontloadProgramming+0x8>
    1b52:	8e 81       	ldd	r24, Y+6	; 0x06
    1b54:	80 93 ab 08 	sts	0x08AB, r24	; 0x8008ab <SQACAFrontloadProgramming+0x9>
    1b58:	10 92 ac 08 	sts	0x08AC, r1	; 0x8008ac <SQACAFrontloadProgramming+0xa>
    1b5c:	88 85       	ldd	r24, Y+8	; 0x08
    1b5e:	80 93 ad 08 	sts	0x08AD, r24	; 0x8008ad <SQACAFrontloadProgramming+0xb>
    1b62:	10 92 ae 08 	sts	0x08AE, r1	; 0x8008ae <SQACAFrontloadProgramming+0xc>
    1b66:	10 93 af 08 	sts	0x08AF, r17	; 0x8008af <SQACAFrontloadProgramming+0xd>
    1b6a:	10 92 b0 08 	sts	0x08B0, r1	; 0x8008b0 <SQACAFrontloadProgramming+0xe>
    1b6e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b70:	80 93 b1 08 	sts	0x08B1, r24	; 0x8008b1 <SQACAFrontloadProgramming+0xf>
    1b74:	10 92 b2 08 	sts	0x08B2, r1	; 0x8008b2 <SQACAFrontloadProgramming+0x10>
    1b78:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b7a:	80 93 b3 08 	sts	0x08B3, r24	; 0x8008b3 <SQACAFrontloadProgramming+0x11>
    1b7e:	10 92 b4 08 	sts	0x08B4, r1	; 0x8008b4 <SQACAFrontloadProgramming+0x12>
    1b82:	88 89       	ldd	r24, Y+16	; 0x10
    1b84:	80 93 b5 08 	sts	0x08B5, r24	; 0x8008b5 <SQACAFrontloadProgramming+0x13>
    1b88:	10 92 b6 08 	sts	0x08B6, r1	; 0x8008b6 <SQACAFrontloadProgramming+0x14>
    1b8c:	8a 89       	ldd	r24, Y+18	; 0x12
    1b8e:	80 93 b7 08 	sts	0x08B7, r24	; 0x8008b7 <SQACAFrontloadProgramming+0x15>
    1b92:	10 92 b8 08 	sts	0x08B8, r1	; 0x8008b8 <SQACAFrontloadProgramming+0x16>
    1b96:	8c 89       	ldd	r24, Y+20	; 0x14
    1b98:	80 93 b9 08 	sts	0x08B9, r24	; 0x8008b9 <SQACAFrontloadProgramming+0x17>
    1b9c:	10 92 ba 08 	sts	0x08BA, r1	; 0x8008ba <SQACAFrontloadProgramming+0x18>
    1ba0:	82 e3       	ldi	r24, 0x32	; 50
    1ba2:	80 93 bb 08 	sts	0x08BB, r24	; 0x8008bb <SQACAFrontloadProgramming+0x19>
    1ba6:	10 92 bc 08 	sts	0x08BC, r1	; 0x8008bc <SQACAFrontloadProgramming+0x1a>
    1baa:	82 e0       	ldi	r24, 0x02	; 2
    1bac:	80 93 bd 08 	sts	0x08BD, r24	; 0x8008bd <SQACAFrontloadProgramming+0x1b>
    1bb0:	93 e0       	ldi	r25, 0x03	; 3
    1bb2:	90 93 be 08 	sts	0x08BE, r25	; 0x8008be <SQACAFrontloadProgramming+0x1c>
    1bb6:	80 93 bf 08 	sts	0x08BF, r24	; 0x8008bf <SQACAFrontloadProgramming+0x1d>
    1bba:	91 e0       	ldi	r25, 0x01	; 1
    1bbc:	90 93 c0 08 	sts	0x08C0, r25	; 0x8008c0 <SQACAFrontloadProgramming+0x1e>
    1bc0:	94 e0       	ldi	r25, 0x04	; 4
    1bc2:	90 93 c1 08 	sts	0x08C1, r25	; 0x8008c1 <SQACAFrontloadProgramming+0x1f>
    1bc6:	80 93 c2 08 	sts	0x08C2, r24	; 0x8008c2 <SQACAFrontloadProgramming+0x20>
    1bca:	10 92 c4 08 	sts	0x08C4, r1	; 0x8008c4 <SQACAFrontloadProgramming+0x22>
    1bce:	8d e1       	ldi	r24, 0x1D	; 29
    1bd0:	80 93 c5 08 	sts	0x08C5, r24	; 0x8008c5 <SQACAFrontloadProgramming+0x23>
    1bd4:	7c c0       	rjmp	.+248    	; 0x1cce <getSQSetupData+0x324>
    1bd6:	61 e1       	ldi	r22, 0x11	; 17
    1bd8:	84 e2       	ldi	r24, 0x24	; 36
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <halGetEeprom>
    1be0:	1a 81       	ldd	r17, Y+2	; 0x02
    1be2:	61 2f       	mov	r22, r17
    1be4:	70 e0       	ldi	r23, 0x00	; 0
    1be6:	76 2f       	mov	r23, r22
    1be8:	66 27       	eor	r22, r22
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	68 0f       	add	r22, r24
    1bee:	71 1d       	adc	r23, r1
    1bf0:	07 2e       	mov	r0, r23
    1bf2:	00 0c       	add	r0, r0
    1bf4:	88 0b       	sbc	r24, r24
    1bf6:	99 0b       	sbc	r25, r25
    1bf8:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__floatsisf>
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	48 ec       	ldi	r20, 0xC8	; 200
    1c02:	52 e4       	ldi	r21, 0x42	; 66
    1c04:	0e 94 10 2c 	call	0x5820	; 0x5820 <__divsf3>
    1c08:	60 93 c0 0c 	sts	0x0CC0, r22	; 0x800cc0 <vendPrice>
    1c0c:	70 93 c1 0c 	sts	0x0CC1, r23	; 0x800cc1 <vendPrice+0x1>
    1c10:	80 93 c2 0c 	sts	0x0CC2, r24	; 0x800cc2 <vendPrice+0x2>
    1c14:	90 93 c3 0c 	sts	0x0CC3, r25	; 0x800cc3 <vendPrice+0x3>
    1c18:	10 93 08 0a 	sts	0x0A08, r17	; 0x800a08 <SQACADryerProgramming+0x5>
    1c1c:	10 92 09 0a 	sts	0x0A09, r1	; 0x800a09 <SQACADryerProgramming+0x6>
    1c20:	8c 81       	ldd	r24, Y+4	; 0x04
    1c22:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <SQACADryerProgramming+0x7>
    1c26:	10 92 0b 0a 	sts	0x0A0B, r1	; 0x800a0b <SQACADryerProgramming+0x8>
    1c2a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c2c:	80 93 0c 0a 	sts	0x0A0C, r24	; 0x800a0c <SQACADryerProgramming+0x9>
    1c30:	10 92 0d 0a 	sts	0x0A0D, r1	; 0x800a0d <SQACADryerProgramming+0xa>
    1c34:	88 85       	ldd	r24, Y+8	; 0x08
    1c36:	80 93 0e 0a 	sts	0x0A0E, r24	; 0x800a0e <SQACADryerProgramming+0xb>
    1c3a:	10 92 0f 0a 	sts	0x0A0F, r1	; 0x800a0f <SQACADryerProgramming+0xc>
    1c3e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c40:	80 93 10 0a 	sts	0x0A10, r24	; 0x800a10 <SQACADryerProgramming+0xd>
    1c44:	10 92 11 0a 	sts	0x0A11, r1	; 0x800a11 <SQACADryerProgramming+0xe>
    1c48:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c4a:	80 93 12 0a 	sts	0x0A12, r24	; 0x800a12 <SQACADryerProgramming+0xf>
    1c4e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c50:	80 93 13 0a 	sts	0x0A13, r24	; 0x800a13 <SQACADryerProgramming+0x10>
    1c54:	10 92 14 0a 	sts	0x0A14, r1	; 0x800a14 <SQACADryerProgramming+0x11>
    1c58:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c5a:	80 93 15 0a 	sts	0x0A15, r24	; 0x800a15 <SQACADryerProgramming+0x12>
    1c5e:	86 e2       	ldi	r24, 0x26	; 38
    1c60:	80 93 16 0a 	sts	0x0A16, r24	; 0x800a16 <SQACADryerProgramming+0x13>
    1c64:	95 e0       	ldi	r25, 0x05	; 5
    1c66:	90 93 17 0a 	sts	0x0A17, r25	; 0x800a17 <SQACADryerProgramming+0x14>
    1c6a:	80 93 18 0a 	sts	0x0A18, r24	; 0x800a18 <SQACADryerProgramming+0x15>
    1c6e:	86 e1       	ldi	r24, 0x16	; 22
    1c70:	80 93 19 0a 	sts	0x0A19, r24	; 0x800a19 <SQACADryerProgramming+0x16>
    1c74:	8e e1       	ldi	r24, 0x1E	; 30
    1c76:	80 93 1a 0a 	sts	0x0A1A, r24	; 0x800a1a <SQACADryerProgramming+0x17>
    1c7a:	8d e2       	ldi	r24, 0x2D	; 45
    1c7c:	80 93 1b 0a 	sts	0x0A1B, r24	; 0x800a1b <SQACADryerProgramming+0x18>
    1c80:	10 92 1c 0a 	sts	0x0A1C, r1	; 0x800a1c <SQACADryerProgramming+0x19>
    1c84:	80 93 1d 0a 	sts	0x0A1D, r24	; 0x800a1d <SQACADryerProgramming+0x1a>
    1c88:	10 92 1e 0a 	sts	0x0A1E, r1	; 0x800a1e <SQACADryerProgramming+0x1b>
    1c8c:	83 e0       	ldi	r24, 0x03	; 3
    1c8e:	80 93 1f 0a 	sts	0x0A1F, r24	; 0x800a1f <SQACADryerProgramming+0x1c>
    1c92:	80 93 20 0a 	sts	0x0A20, r24	; 0x800a20 <SQACADryerProgramming+0x1d>
    1c96:	80 93 21 0a 	sts	0x0A21, r24	; 0x800a21 <SQACADryerProgramming+0x1e>
    1c9a:	80 93 22 0a 	sts	0x0A22, r24	; 0x800a22 <SQACADryerProgramming+0x1f>
    1c9e:	80 ea       	ldi	r24, 0xA0	; 160
    1ca0:	80 93 23 0a 	sts	0x0A23, r24	; 0x800a23 <SQACADryerProgramming+0x20>
    1ca4:	8b e9       	ldi	r24, 0x9B	; 155
    1ca6:	80 93 24 0a 	sts	0x0A24, r24	; 0x800a24 <SQACADryerProgramming+0x21>
    1caa:	83 e7       	ldi	r24, 0x73	; 115
    1cac:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <SQACADryerProgramming+0x23>
    1cb0:	84 e0       	ldi	r24, 0x04	; 4
    1cb2:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <SQACADryerProgramming+0x24>
    1cb6:	8d e1       	ldi	r24, 0x1D	; 29
    1cb8:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <SQACADryerProgramming+0x25>
    1cbc:	10 92 29 0a 	sts	0x0A29, r1	; 0x800a29 <SQACADryerProgramming+0x26>
    1cc0:	10 92 2a 0a 	sts	0x0A2A, r1	; 0x800a2a <SQACADryerProgramming+0x27>
    1cc4:	10 92 2b 0a 	sts	0x0A2B, r1	; 0x800a2b <SQACADryerProgramming+0x28>
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	80 93 2c 0a 	sts	0x0A2C, r24	; 0x800a2c <SQACADryerProgramming+0x29>
    1cce:	ec 96       	adiw	r28, 0x3c	; 60
    1cd0:	0f b6       	in	r0, 0x3f	; 63
    1cd2:	f8 94       	cli
    1cd4:	de bf       	out	0x3e, r29	; 62
    1cd6:	0f be       	out	0x3f, r0	; 63
    1cd8:	cd bf       	out	0x3d, r28	; 61
    1cda:	df 91       	pop	r29
    1cdc:	cf 91       	pop	r28
    1cde:	1f 91       	pop	r17
    1ce0:	08 95       	ret

00001ce2 <sendSQDataPacket>:
    1ce2:	af 92       	push	r10
    1ce4:	bf 92       	push	r11
    1ce6:	cf 92       	push	r12
    1ce8:	df 92       	push	r13
    1cea:	ef 92       	push	r14
    1cec:	ff 92       	push	r15
    1cee:	0f 93       	push	r16
    1cf0:	1f 93       	push	r17
    1cf2:	cf 93       	push	r28
    1cf4:	df 93       	push	r29
    1cf6:	8c 01       	movw	r16, r24
    1cf8:	98 e0       	ldi	r25, 0x08	; 8
    1cfa:	f9 2e       	mov	r15, r25
    1cfc:	c0 2e       	mov	r12, r16
    1cfe:	0e 94 04 27 	call	0x4e08	; 0x4e08 <init_rx_buf>
    1d02:	f8 01       	movw	r30, r16
    1d04:	d0 80       	ld	r13, Z
    1d06:	d3 94       	inc	r13
    1d08:	82 e0       	ldi	r24, 0x02	; 2
    1d0a:	0e 94 21 27 	call	0x4e42	; 0x4e42 <serial_putchar>
    1d0e:	c0 2f       	mov	r28, r16
    1d10:	d1 2f       	mov	r29, r17
    1d12:	82 e0       	ldi	r24, 0x02	; 2
    1d14:	e8 2e       	mov	r14, r24
    1d16:	8c 2f       	mov	r24, r28
    1d18:	8c 19       	sub	r24, r12
    1d1a:	8d 15       	cp	r24, r13
    1d1c:	40 f4       	brcc	.+16     	; 0x1d2e <sendSQDataPacket+0x4c>
    1d1e:	5e 01       	movw	r10, r28
    1d20:	89 91       	ld	r24, Y+
    1d22:	0e 94 21 27 	call	0x4e42	; 0x4e42 <serial_putchar>
    1d26:	f5 01       	movw	r30, r10
    1d28:	80 81       	ld	r24, Z
    1d2a:	e8 26       	eor	r14, r24
    1d2c:	f4 cf       	rjmp	.-24     	; 0x1d16 <sendSQDataPacket+0x34>
    1d2e:	8e 2d       	mov	r24, r14
    1d30:	0e 94 21 27 	call	0x4e42	; 0x4e42 <serial_putchar>
    1d34:	10 92 bf 0c 	sts	0x0CBF, r1	; 0x800cbf <ucTimerCount>
    1d38:	78 94       	sei
    1d3a:	0e 94 da 26 	call	0x4db4	; 0x4db4 <StartTimerZero>
    1d3e:	80 91 bf 0c 	lds	r24, 0x0CBF	; 0x800cbf <ucTimerCount>
    1d42:	86 34       	cpi	r24, 0x46	; 70
    1d44:	20 f4       	brcc	.+8      	; 0x1d4e <sendSQDataPacket+0x6c>
    1d46:	0e 94 50 27 	call	0x4ea0	; 0x4ea0 <rx_buf_count>
    1d4a:	88 23       	and	r24, r24
    1d4c:	39 f0       	breq	.+14     	; 0x1d5c <sendSQDataPacket+0x7a>
    1d4e:	0e 94 d8 26 	call	0x4db0	; 0x4db0 <StopTimerZero>
    1d52:	80 91 bf 0c 	lds	r24, 0x0CBF	; 0x800cbf <ucTimerCount>
    1d56:	86 34       	cpi	r24, 0x46	; 70
    1d58:	40 f0       	brcs	.+16     	; 0x1d6a <sendSQDataPacket+0x88>
    1d5a:	0d c0       	rjmp	.+26     	; 0x1d76 <sendSQDataPacket+0x94>
    1d5c:	0e 94 8b 21 	call	0x4316	; 0x4316 <mac_event_pending>
    1d60:	88 23       	and	r24, r24
    1d62:	69 f3       	breq	.-38     	; 0x1d3e <sendSQDataPacket+0x5c>
    1d64:	0e 94 df 21 	call	0x43be	; 0x43be <macTask>
    1d68:	ea cf       	rjmp	.-44     	; 0x1d3e <sendSQDataPacket+0x5c>
    1d6a:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <serial_getchar>
    1d6e:	86 30       	cpi	r24, 0x06	; 6
    1d70:	69 f0       	breq	.+26     	; 0x1d8c <sendSQDataPacket+0xaa>
    1d72:	89 30       	cpi	r24, 0x09	; 9
    1d74:	49 f0       	breq	.+18     	; 0x1d88 <sendSQDataPacket+0xa6>
    1d76:	8f ed       	ldi	r24, 0xDF	; 223
    1d78:	9e e2       	ldi	r25, 0x2E	; 46
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	f1 f7       	brne	.-4      	; 0x1d7a <sendSQDataPacket+0x98>
    1d7e:	00 c0       	rjmp	.+0      	; 0x1d80 <sendSQDataPacket+0x9e>
    1d80:	00 00       	nop
    1d82:	fa 94       	dec	r15
    1d84:	f1 10       	cpse	r15, r1
    1d86:	bb cf       	rjmp	.-138    	; 0x1cfe <sendSQDataPacket+0x1c>
    1d88:	80 e0       	ldi	r24, 0x00	; 0
    1d8a:	01 c0       	rjmp	.+2      	; 0x1d8e <sendSQDataPacket+0xac>
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	df 91       	pop	r29
    1d90:	cf 91       	pop	r28
    1d92:	1f 91       	pop	r17
    1d94:	0f 91       	pop	r16
    1d96:	ff 90       	pop	r15
    1d98:	ef 90       	pop	r14
    1d9a:	df 90       	pop	r13
    1d9c:	cf 90       	pop	r12
    1d9e:	bf 90       	pop	r11
    1da0:	af 90       	pop	r10
    1da2:	08 95       	ret

00001da4 <sendSQACAVendPrice>:
    1da4:	cf 93       	push	r28
    1da6:	df 93       	push	r29
    1da8:	cd b7       	in	r28, 0x3d	; 61
    1daa:	de b7       	in	r29, 0x3e	; 62
    1dac:	2b 97       	sbiw	r28, 0x0b	; 11
    1dae:	0f b6       	in	r0, 0x3f	; 63
    1db0:	f8 94       	cli
    1db2:	de bf       	out	0x3e, r29	; 62
    1db4:	0f be       	out	0x3f, r0	; 63
    1db6:	cd bf       	out	0x3d, r28	; 61
    1db8:	ce 01       	movw	r24, r28
    1dba:	01 96       	adiw	r24, 0x01	; 1
    1dbc:	2b e0       	ldi	r18, 0x0B	; 11
    1dbe:	fc 01       	movw	r30, r24
    1dc0:	11 92       	st	Z+, r1
    1dc2:	2a 95       	dec	r18
    1dc4:	e9 f7       	brne	.-6      	; 0x1dc0 <sendSQACAVendPrice+0x1c>
    1dc6:	20 91 f5 0a 	lds	r18, 0x0AF5	; 0x800af5 <SQACAMachineStatus+0x1>
    1dca:	23 30       	cpi	r18, 0x03	; 3
    1dcc:	09 f0       	breq	.+2      	; 0x1dd0 <sendSQACAVendPrice+0x2c>
    1dce:	e4 c0       	rjmp	.+456    	; 0x1f98 <sendSQACAVendPrice+0x1f4>
    1dd0:	20 91 f0 0a 	lds	r18, 0x0AF0	; 0x800af0 <deviceStatus>
    1dd4:	22 32       	cpi	r18, 0x22	; 34
    1dd6:	09 f4       	brne	.+2      	; 0x1dda <sendSQACAVendPrice+0x36>
    1dd8:	61 c0       	rjmp	.+194    	; 0x1e9c <sendSQACAVendPrice+0xf8>
    1dda:	29 32       	cpi	r18, 0x29	; 41
    1ddc:	09 f4       	brne	.+2      	; 0x1de0 <sendSQACAVendPrice+0x3c>
    1dde:	ab c0       	rjmp	.+342    	; 0x1f36 <sendSQACAVendPrice+0x192>
    1de0:	21 32       	cpi	r18, 0x21	; 33
    1de2:	09 f0       	breq	.+2      	; 0x1de6 <sendSQACAVendPrice+0x42>
    1de4:	d9 c0       	rjmp	.+434    	; 0x1f98 <sendSQACAVendPrice+0x1f4>
    1de6:	2a e0       	ldi	r18, 0x0A	; 10
    1de8:	29 83       	std	Y+1, r18	; 0x01
    1dea:	22 e7       	ldi	r18, 0x72	; 114
    1dec:	2a 83       	std	Y+2, r18	; 0x02
    1dee:	e0 91 f6 0a 	lds	r30, 0x0AF6	; 0x800af6 <SQACAMachineStatus+0x2>
    1df2:	4e 2f       	mov	r20, r30
    1df4:	50 e0       	ldi	r21, 0x00	; 0
    1df6:	fa 01       	movw	r30, r20
    1df8:	31 97       	sbiw	r30, 0x01	; 1
    1dfa:	e9 30       	cpi	r30, 0x09	; 9
    1dfc:	f1 05       	cpc	r31, r1
    1dfe:	d0 f5       	brcc	.+116    	; 0x1e74 <sendSQACAVendPrice+0xd0>
    1e00:	e8 54       	subi	r30, 0x48	; 72
    1e02:	ff 4f       	sbci	r31, 0xFF	; 255
    1e04:	0c 94 f6 2d 	jmp	0x5bec	; 0x5bec <__tablejump2__>
    1e08:	20 91 de 08 	lds	r18, 0x08DE	; 0x8008de <SQACAToploadProgramming+0x15>
    1e0c:	2b 83       	std	Y+3, r18	; 0x03
    1e0e:	20 91 df 08 	lds	r18, 0x08DF	; 0x8008df <SQACAToploadProgramming+0x16>
    1e12:	2f c0       	rjmp	.+94     	; 0x1e72 <sendSQACAVendPrice+0xce>
    1e14:	20 91 dc 08 	lds	r18, 0x08DC	; 0x8008dc <SQACAToploadProgramming+0x13>
    1e18:	2b 83       	std	Y+3, r18	; 0x03
    1e1a:	20 91 dd 08 	lds	r18, 0x08DD	; 0x8008dd <SQACAToploadProgramming+0x14>
    1e1e:	29 c0       	rjmp	.+82     	; 0x1e72 <sendSQACAVendPrice+0xce>
    1e20:	20 91 da 08 	lds	r18, 0x08DA	; 0x8008da <SQACAToploadProgramming+0x11>
    1e24:	2b 83       	std	Y+3, r18	; 0x03
    1e26:	20 91 db 08 	lds	r18, 0x08DB	; 0x8008db <SQACAToploadProgramming+0x12>
    1e2a:	23 c0       	rjmp	.+70     	; 0x1e72 <sendSQACAVendPrice+0xce>
    1e2c:	20 91 d8 08 	lds	r18, 0x08D8	; 0x8008d8 <SQACAToploadProgramming+0xf>
    1e30:	2b 83       	std	Y+3, r18	; 0x03
    1e32:	20 91 d9 08 	lds	r18, 0x08D9	; 0x8008d9 <SQACAToploadProgramming+0x10>
    1e36:	1d c0       	rjmp	.+58     	; 0x1e72 <sendSQACAVendPrice+0xce>
    1e38:	20 91 d6 08 	lds	r18, 0x08D6	; 0x8008d6 <SQACAToploadProgramming+0xd>
    1e3c:	2b 83       	std	Y+3, r18	; 0x03
    1e3e:	20 91 d7 08 	lds	r18, 0x08D7	; 0x8008d7 <SQACAToploadProgramming+0xe>
    1e42:	17 c0       	rjmp	.+46     	; 0x1e72 <sendSQACAVendPrice+0xce>
    1e44:	20 91 d4 08 	lds	r18, 0x08D4	; 0x8008d4 <SQACAToploadProgramming+0xb>
    1e48:	2b 83       	std	Y+3, r18	; 0x03
    1e4a:	20 91 d5 08 	lds	r18, 0x08D5	; 0x8008d5 <SQACAToploadProgramming+0xc>
    1e4e:	11 c0       	rjmp	.+34     	; 0x1e72 <sendSQACAVendPrice+0xce>
    1e50:	20 91 d2 08 	lds	r18, 0x08D2	; 0x8008d2 <SQACAToploadProgramming+0x9>
    1e54:	2b 83       	std	Y+3, r18	; 0x03
    1e56:	20 91 d3 08 	lds	r18, 0x08D3	; 0x8008d3 <SQACAToploadProgramming+0xa>
    1e5a:	0b c0       	rjmp	.+22     	; 0x1e72 <sendSQACAVendPrice+0xce>
    1e5c:	20 91 d0 08 	lds	r18, 0x08D0	; 0x8008d0 <SQACAToploadProgramming+0x7>
    1e60:	2b 83       	std	Y+3, r18	; 0x03
    1e62:	20 91 d1 08 	lds	r18, 0x08D1	; 0x8008d1 <SQACAToploadProgramming+0x8>
    1e66:	05 c0       	rjmp	.+10     	; 0x1e72 <sendSQACAVendPrice+0xce>
    1e68:	20 91 ce 08 	lds	r18, 0x08CE	; 0x8008ce <SQACAToploadProgramming+0x5>
    1e6c:	2b 83       	std	Y+3, r18	; 0x03
    1e6e:	20 91 cf 08 	lds	r18, 0x08CF	; 0x8008cf <SQACAToploadProgramming+0x6>
    1e72:	2c 83       	std	Y+4, r18	; 0x04
    1e74:	20 91 f7 0a 	lds	r18, 0x0AF7	; 0x800af7 <SQACAMachineStatus+0x3>
    1e78:	21 30       	cpi	r18, 0x01	; 1
    1e7a:	49 f0       	breq	.+18     	; 0x1e8e <sendSQACAVendPrice+0xea>
    1e7c:	22 30       	cpi	r18, 0x02	; 2
    1e7e:	09 f0       	breq	.+2      	; 0x1e82 <sendSQACAVendPrice+0xde>
    1e80:	8b c0       	rjmp	.+278    	; 0x1f98 <sendSQACAVendPrice+0x1f4>
    1e82:	20 91 e2 08 	lds	r18, 0x08E2	; 0x8008e2 <SQACAToploadProgramming+0x19>
    1e86:	2d 83       	std	Y+5, r18	; 0x05
    1e88:	20 91 e3 08 	lds	r18, 0x08E3	; 0x8008e3 <SQACAToploadProgramming+0x1a>
    1e8c:	05 c0       	rjmp	.+10     	; 0x1e98 <sendSQACAVendPrice+0xf4>
    1e8e:	20 91 e0 08 	lds	r18, 0x08E0	; 0x8008e0 <SQACAToploadProgramming+0x17>
    1e92:	2d 83       	std	Y+5, r18	; 0x05
    1e94:	20 91 e1 08 	lds	r18, 0x08E1	; 0x8008e1 <SQACAToploadProgramming+0x18>
    1e98:	2e 83       	std	Y+6, r18	; 0x06
    1e9a:	7e c0       	rjmp	.+252    	; 0x1f98 <sendSQACAVendPrice+0x1f4>
    1e9c:	2a e0       	ldi	r18, 0x0A	; 10
    1e9e:	29 83       	std	Y+1, r18	; 0x01
    1ea0:	22 e7       	ldi	r18, 0x72	; 114
    1ea2:	2a 83       	std	Y+2, r18	; 0x02
    1ea4:	e0 91 f6 0a 	lds	r30, 0x0AF6	; 0x800af6 <SQACAMachineStatus+0x2>
    1ea8:	4e 2f       	mov	r20, r30
    1eaa:	50 e0       	ldi	r21, 0x00	; 0
    1eac:	fa 01       	movw	r30, r20
    1eae:	31 97       	sbiw	r30, 0x01	; 1
    1eb0:	e9 30       	cpi	r30, 0x09	; 9
    1eb2:	f1 05       	cpc	r31, r1
    1eb4:	d0 f5       	brcc	.+116    	; 0x1f2a <sendSQACAVendPrice+0x186>
    1eb6:	ef 53       	subi	r30, 0x3F	; 63
    1eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eba:	0c 94 f6 2d 	jmp	0x5bec	; 0x5bec <__tablejump2__>
    1ebe:	20 91 b7 08 	lds	r18, 0x08B7	; 0x8008b7 <SQACAFrontloadProgramming+0x15>
    1ec2:	2b 83       	std	Y+3, r18	; 0x03
    1ec4:	20 91 b8 08 	lds	r18, 0x08B8	; 0x8008b8 <SQACAFrontloadProgramming+0x16>
    1ec8:	2f c0       	rjmp	.+94     	; 0x1f28 <sendSQACAVendPrice+0x184>
    1eca:	20 91 b5 08 	lds	r18, 0x08B5	; 0x8008b5 <SQACAFrontloadProgramming+0x13>
    1ece:	2b 83       	std	Y+3, r18	; 0x03
    1ed0:	20 91 b6 08 	lds	r18, 0x08B6	; 0x8008b6 <SQACAFrontloadProgramming+0x14>
    1ed4:	29 c0       	rjmp	.+82     	; 0x1f28 <sendSQACAVendPrice+0x184>
    1ed6:	20 91 b3 08 	lds	r18, 0x08B3	; 0x8008b3 <SQACAFrontloadProgramming+0x11>
    1eda:	2b 83       	std	Y+3, r18	; 0x03
    1edc:	20 91 b4 08 	lds	r18, 0x08B4	; 0x8008b4 <SQACAFrontloadProgramming+0x12>
    1ee0:	23 c0       	rjmp	.+70     	; 0x1f28 <sendSQACAVendPrice+0x184>
    1ee2:	20 91 b1 08 	lds	r18, 0x08B1	; 0x8008b1 <SQACAFrontloadProgramming+0xf>
    1ee6:	2b 83       	std	Y+3, r18	; 0x03
    1ee8:	20 91 b2 08 	lds	r18, 0x08B2	; 0x8008b2 <SQACAFrontloadProgramming+0x10>
    1eec:	1d c0       	rjmp	.+58     	; 0x1f28 <sendSQACAVendPrice+0x184>
    1eee:	20 91 af 08 	lds	r18, 0x08AF	; 0x8008af <SQACAFrontloadProgramming+0xd>
    1ef2:	2b 83       	std	Y+3, r18	; 0x03
    1ef4:	20 91 b0 08 	lds	r18, 0x08B0	; 0x8008b0 <SQACAFrontloadProgramming+0xe>
    1ef8:	17 c0       	rjmp	.+46     	; 0x1f28 <sendSQACAVendPrice+0x184>
    1efa:	20 91 ad 08 	lds	r18, 0x08AD	; 0x8008ad <SQACAFrontloadProgramming+0xb>
    1efe:	2b 83       	std	Y+3, r18	; 0x03
    1f00:	20 91 ae 08 	lds	r18, 0x08AE	; 0x8008ae <SQACAFrontloadProgramming+0xc>
    1f04:	11 c0       	rjmp	.+34     	; 0x1f28 <sendSQACAVendPrice+0x184>
    1f06:	20 91 ab 08 	lds	r18, 0x08AB	; 0x8008ab <SQACAFrontloadProgramming+0x9>
    1f0a:	2b 83       	std	Y+3, r18	; 0x03
    1f0c:	20 91 ac 08 	lds	r18, 0x08AC	; 0x8008ac <SQACAFrontloadProgramming+0xa>
    1f10:	0b c0       	rjmp	.+22     	; 0x1f28 <sendSQACAVendPrice+0x184>
    1f12:	20 91 a9 08 	lds	r18, 0x08A9	; 0x8008a9 <SQACAFrontloadProgramming+0x7>
    1f16:	2b 83       	std	Y+3, r18	; 0x03
    1f18:	20 91 aa 08 	lds	r18, 0x08AA	; 0x8008aa <SQACAFrontloadProgramming+0x8>
    1f1c:	05 c0       	rjmp	.+10     	; 0x1f28 <sendSQACAVendPrice+0x184>
    1f1e:	20 91 a7 08 	lds	r18, 0x08A7	; 0x8008a7 <SQACAFrontloadProgramming+0x5>
    1f22:	2b 83       	std	Y+3, r18	; 0x03
    1f24:	20 91 a8 08 	lds	r18, 0x08A8	; 0x8008a8 <SQACAFrontloadProgramming+0x6>
    1f28:	2c 83       	std	Y+4, r18	; 0x04
    1f2a:	20 91 bb 08 	lds	r18, 0x08BB	; 0x8008bb <SQACAFrontloadProgramming+0x19>
    1f2e:	2d 83       	std	Y+5, r18	; 0x05
    1f30:	20 91 bc 08 	lds	r18, 0x08BC	; 0x8008bc <SQACAFrontloadProgramming+0x1a>
    1f34:	b1 cf       	rjmp	.-158    	; 0x1e98 <sendSQACAVendPrice+0xf4>
    1f36:	2a e0       	ldi	r18, 0x0A	; 10
    1f38:	29 83       	std	Y+1, r18	; 0x01
    1f3a:	22 e7       	ldi	r18, 0x72	; 114
    1f3c:	2a 83       	std	Y+2, r18	; 0x02
    1f3e:	20 91 f6 0a 	lds	r18, 0x0AF6	; 0x800af6 <SQACAMachineStatus+0x2>
    1f42:	24 30       	cpi	r18, 0x04	; 4
    1f44:	50 f4       	brcc	.+20     	; 0x1f5a <sendSQACAVendPrice+0x1b6>
    1f46:	22 30       	cpi	r18, 0x02	; 2
    1f48:	c0 f4       	brcc	.+48     	; 0x1f7a <sendSQACAVendPrice+0x1d6>
    1f4a:	21 30       	cpi	r18, 0x01	; 1
    1f4c:	e1 f4       	brne	.+56     	; 0x1f86 <sendSQACAVendPrice+0x1e2>
    1f4e:	20 91 0a 0a 	lds	r18, 0x0A0A	; 0x800a0a <SQACADryerProgramming+0x7>
    1f52:	2b 83       	std	Y+3, r18	; 0x03
    1f54:	20 91 0b 0a 	lds	r18, 0x0A0B	; 0x800a0b <SQACADryerProgramming+0x8>
    1f58:	15 c0       	rjmp	.+42     	; 0x1f84 <sendSQACAVendPrice+0x1e0>
    1f5a:	24 30       	cpi	r18, 0x04	; 4
    1f5c:	41 f0       	breq	.+16     	; 0x1f6e <sendSQACAVendPrice+0x1ca>
    1f5e:	25 30       	cpi	r18, 0x05	; 5
    1f60:	91 f4       	brne	.+36     	; 0x1f86 <sendSQACAVendPrice+0x1e2>
    1f62:	20 91 0e 0a 	lds	r18, 0x0A0E	; 0x800a0e <SQACADryerProgramming+0xb>
    1f66:	2b 83       	std	Y+3, r18	; 0x03
    1f68:	20 91 0f 0a 	lds	r18, 0x0A0F	; 0x800a0f <SQACADryerProgramming+0xc>
    1f6c:	0b c0       	rjmp	.+22     	; 0x1f84 <sendSQACAVendPrice+0x1e0>
    1f6e:	20 91 08 0a 	lds	r18, 0x0A08	; 0x800a08 <SQACADryerProgramming+0x5>
    1f72:	2b 83       	std	Y+3, r18	; 0x03
    1f74:	20 91 09 0a 	lds	r18, 0x0A09	; 0x800a09 <SQACADryerProgramming+0x6>
    1f78:	05 c0       	rjmp	.+10     	; 0x1f84 <sendSQACAVendPrice+0x1e0>
    1f7a:	20 91 0c 0a 	lds	r18, 0x0A0C	; 0x800a0c <SQACADryerProgramming+0x9>
    1f7e:	2b 83       	std	Y+3, r18	; 0x03
    1f80:	20 91 0d 0a 	lds	r18, 0x0A0D	; 0x800a0d <SQACADryerProgramming+0xa>
    1f84:	2c 83       	std	Y+4, r18	; 0x04
    1f86:	20 91 13 0a 	lds	r18, 0x0A13	; 0x800a13 <SQACADryerProgramming+0x10>
    1f8a:	2f 83       	std	Y+7, r18	; 0x07
    1f8c:	20 91 14 0a 	lds	r18, 0x0A14	; 0x800a14 <SQACADryerProgramming+0x11>
    1f90:	28 87       	std	Y+8, r18	; 0x08
    1f92:	20 91 15 0a 	lds	r18, 0x0A15	; 0x800a15 <SQACADryerProgramming+0x12>
    1f96:	29 87       	std	Y+9, r18	; 0x09
    1f98:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <sendSQDataPacket>
    1f9c:	2b 96       	adiw	r28, 0x0b	; 11
    1f9e:	0f b6       	in	r0, 0x3f	; 63
    1fa0:	f8 94       	cli
    1fa2:	de bf       	out	0x3e, r29	; 62
    1fa4:	0f be       	out	0x3f, r0	; 63
    1fa6:	cd bf       	out	0x3d, r28	; 61
    1fa8:	df 91       	pop	r29
    1faa:	cf 91       	pop	r28
    1fac:	08 95       	ret

00001fae <getSQDataPacket>:
    1fae:	df 92       	push	r13
    1fb0:	ef 92       	push	r14
    1fb2:	ff 92       	push	r15
    1fb4:	0f 93       	push	r16
    1fb6:	1f 93       	push	r17
    1fb8:	cf 93       	push	r28
    1fba:	df 93       	push	r29
    1fbc:	7c 01       	movw	r14, r24
    1fbe:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <serial_getchar>
    1fc2:	c8 2f       	mov	r28, r24
    1fc4:	82 30       	cpi	r24, 0x02	; 2
    1fc6:	09 f5       	brne	.+66     	; 0x200a <getSQDataPacket+0x5c>
    1fc8:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <serial_getchar>
    1fcc:	d8 2f       	mov	r29, r24
    1fce:	f7 01       	movw	r30, r14
    1fd0:	80 81       	ld	r24, Z
    1fd2:	8d 17       	cp	r24, r29
    1fd4:	d0 f0       	brcs	.+52     	; 0x200a <getSQDataPacket+0x5c>
    1fd6:	cd 27       	eor	r28, r29
    1fd8:	de 2c       	mov	r13, r14
    1fda:	87 01       	movw	r16, r14
    1fdc:	80 2f       	mov	r24, r16
    1fde:	8d 19       	sub	r24, r13
    1fe0:	8d 17       	cp	r24, r29
    1fe2:	38 f4       	brcc	.+14     	; 0x1ff2 <getSQDataPacket+0x44>
    1fe4:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <serial_getchar>
    1fe8:	f8 01       	movw	r30, r16
    1fea:	81 93       	st	Z+, r24
    1fec:	8f 01       	movw	r16, r30
    1fee:	c8 27       	eor	r28, r24
    1ff0:	f5 cf       	rjmp	.-22     	; 0x1fdc <getSQDataPacket+0x2e>
    1ff2:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <serial_getchar>
    1ff6:	c8 13       	cpse	r28, r24
    1ff8:	05 c0       	rjmp	.+10     	; 0x2004 <getSQDataPacket+0x56>
    1ffa:	86 e0       	ldi	r24, 0x06	; 6
    1ffc:	0e 94 21 27 	call	0x4e42	; 0x4e42 <serial_putchar>
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	04 c0       	rjmp	.+8      	; 0x200c <getSQDataPacket+0x5e>
    2004:	85 e1       	ldi	r24, 0x15	; 21
    2006:	0e 94 21 27 	call	0x4e42	; 0x4e42 <serial_putchar>
    200a:	80 e0       	ldi	r24, 0x00	; 0
    200c:	df 91       	pop	r29
    200e:	cf 91       	pop	r28
    2010:	1f 91       	pop	r17
    2012:	0f 91       	pop	r16
    2014:	ff 90       	pop	r15
    2016:	ef 90       	pop	r14
    2018:	df 90       	pop	r13
    201a:	08 95       	ret

0000201c <getSQACAStatusData>:
    201c:	cf 93       	push	r28
    201e:	df 93       	push	r29
    2020:	cd b7       	in	r28, 0x3d	; 61
    2022:	de b7       	in	r29, 0x3e	; 62
    2024:	6a 97       	sbiw	r28, 0x1a	; 26
    2026:	0f b6       	in	r0, 0x3f	; 63
    2028:	f8 94       	cli
    202a:	de bf       	out	0x3e, r29	; 62
    202c:	0f be       	out	0x3f, r0	; 63
    202e:	cd bf       	out	0x3d, r28	; 61
    2030:	80 91 f5 0a 	lds	r24, 0x0AF5	; 0x800af5 <SQACAMachineStatus+0x1>
    2034:	83 30       	cpi	r24, 0x03	; 3
    2036:	09 f0       	breq	.+2      	; 0x203a <getSQACAStatusData+0x1e>
    2038:	5f c0       	rjmp	.+190    	; 0x20f8 <getSQACAStatusData+0xdc>
    203a:	2a e1       	ldi	r18, 0x1A	; 26
    203c:	ce 01       	movw	r24, r28
    203e:	01 96       	adiw	r24, 0x01	; 1
    2040:	fc 01       	movw	r30, r24
    2042:	32 2f       	mov	r19, r18
    2044:	11 92       	st	Z+, r1
    2046:	3a 95       	dec	r19
    2048:	e9 f7       	brne	.-6      	; 0x2044 <getSQACAStatusData+0x28>
    204a:	29 83       	std	Y+1, r18	; 0x01
    204c:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <getSQDataPacket>
    2050:	88 23       	and	r24, r24
    2052:	09 f4       	brne	.+2      	; 0x2056 <getSQACAStatusData+0x3a>
    2054:	51 c0       	rjmp	.+162    	; 0x20f8 <getSQACAStatusData+0xdc>
    2056:	99 81       	ldd	r25, Y+1	; 0x01
    2058:	91 37       	cpi	r25, 0x71	; 113
    205a:	09 f0       	breq	.+2      	; 0x205e <getSQACAStatusData+0x42>
    205c:	4d c0       	rjmp	.+154    	; 0x20f8 <getSQACAStatusData+0xdc>
    205e:	9a 81       	ldd	r25, Y+2	; 0x02
    2060:	90 5e       	subi	r25, 0xE0	; 224
    2062:	90 93 f4 0a 	sts	0x0AF4, r25	; 0x800af4 <SQACAMachineStatus>
    2066:	9b 81       	ldd	r25, Y+3	; 0x03
    2068:	90 93 f6 0a 	sts	0x0AF6, r25	; 0x800af6 <SQACAMachineStatus+0x2>
    206c:	9c 81       	ldd	r25, Y+4	; 0x04
    206e:	90 93 f7 0a 	sts	0x0AF7, r25	; 0x800af7 <SQACAMachineStatus+0x3>
    2072:	9d 81       	ldd	r25, Y+5	; 0x05
    2074:	90 93 f8 0a 	sts	0x0AF8, r25	; 0x800af8 <SQACAMachineStatus+0x4>
    2078:	9e 81       	ldd	r25, Y+6	; 0x06
    207a:	90 93 f9 0a 	sts	0x0AF9, r25	; 0x800af9 <SQACAMachineStatus+0x5>
    207e:	9f 81       	ldd	r25, Y+7	; 0x07
    2080:	90 93 fa 0a 	sts	0x0AFA, r25	; 0x800afa <SQACAMachineStatus+0x6>
    2084:	98 85       	ldd	r25, Y+8	; 0x08
    2086:	90 93 fb 0a 	sts	0x0AFB, r25	; 0x800afb <SQACAMachineStatus+0x7>
    208a:	99 85       	ldd	r25, Y+9	; 0x09
    208c:	90 93 fc 0a 	sts	0x0AFC, r25	; 0x800afc <SQACAMachineStatus+0x8>
    2090:	9a 85       	ldd	r25, Y+10	; 0x0a
    2092:	90 93 fd 0a 	sts	0x0AFD, r25	; 0x800afd <SQACAMachineStatus+0x9>
    2096:	9b 85       	ldd	r25, Y+11	; 0x0b
    2098:	90 93 fe 0a 	sts	0x0AFE, r25	; 0x800afe <SQACAMachineStatus+0xa>
    209c:	9c 85       	ldd	r25, Y+12	; 0x0c
    209e:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <SQACAMachineStatus+0xb>
    20a2:	9d 85       	ldd	r25, Y+13	; 0x0d
    20a4:	90 93 00 0b 	sts	0x0B00, r25	; 0x800b00 <SQACAMachineStatus+0xc>
    20a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20aa:	90 93 01 0b 	sts	0x0B01, r25	; 0x800b01 <SQACAMachineStatus+0xd>
    20ae:	9f 85       	ldd	r25, Y+15	; 0x0f
    20b0:	90 93 02 0b 	sts	0x0B02, r25	; 0x800b02 <SQACAMachineStatus+0xe>
    20b4:	98 89       	ldd	r25, Y+16	; 0x10
    20b6:	90 93 03 0b 	sts	0x0B03, r25	; 0x800b03 <SQACAMachineStatus+0xf>
    20ba:	99 89       	ldd	r25, Y+17	; 0x11
    20bc:	90 93 04 0b 	sts	0x0B04, r25	; 0x800b04 <SQACAMachineStatus+0x10>
    20c0:	9a 89       	ldd	r25, Y+18	; 0x12
    20c2:	90 93 05 0b 	sts	0x0B05, r25	; 0x800b05 <SQACAMachineStatus+0x11>
    20c6:	9b 89       	ldd	r25, Y+19	; 0x13
    20c8:	90 93 06 0b 	sts	0x0B06, r25	; 0x800b06 <SQACAMachineStatus+0x12>
    20cc:	9c 89       	ldd	r25, Y+20	; 0x14
    20ce:	90 93 07 0b 	sts	0x0B07, r25	; 0x800b07 <SQACAMachineStatus+0x13>
    20d2:	9d 89       	ldd	r25, Y+21	; 0x15
    20d4:	90 93 08 0b 	sts	0x0B08, r25	; 0x800b08 <SQACAMachineStatus+0x14>
    20d8:	9e 89       	ldd	r25, Y+22	; 0x16
    20da:	90 93 09 0b 	sts	0x0B09, r25	; 0x800b09 <SQACAMachineStatus+0x15>
    20de:	9f 89       	ldd	r25, Y+23	; 0x17
    20e0:	90 93 0a 0b 	sts	0x0B0A, r25	; 0x800b0a <SQACAMachineStatus+0x16>
    20e4:	98 8d       	ldd	r25, Y+24	; 0x18
    20e6:	90 93 0b 0b 	sts	0x0B0B, r25	; 0x800b0b <SQACAMachineStatus+0x17>
    20ea:	99 8d       	ldd	r25, Y+25	; 0x19
    20ec:	90 93 0c 0b 	sts	0x0B0C, r25	; 0x800b0c <SQACAMachineStatus+0x18>
    20f0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    20f2:	90 93 0d 0b 	sts	0x0B0D, r25	; 0x800b0d <SQACAMachineStatus+0x19>
    20f6:	01 c0       	rjmp	.+2      	; 0x20fa <getSQACAStatusData+0xde>
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	6a 96       	adiw	r28, 0x1a	; 26
    20fc:	0f b6       	in	r0, 0x3f	; 63
    20fe:	f8 94       	cli
    2100:	de bf       	out	0x3e, r29	; 62
    2102:	0f be       	out	0x3f, r0	; 63
    2104:	cd bf       	out	0x3d, r28	; 61
    2106:	df 91       	pop	r29
    2108:	cf 91       	pop	r28
    210a:	08 95       	ret

0000210c <SQACAMachineStatusSequence>:
    210c:	1f 93       	push	r17
    210e:	cf 93       	push	r28
    2110:	df 93       	push	r29
    2112:	00 d0       	rcall	.+0      	; 0x2114 <SQACAMachineStatusSequence+0x8>
    2114:	cd b7       	in	r28, 0x3d	; 61
    2116:	de b7       	in	r29, 0x3e	; 62
    2118:	1a 82       	std	Y+2, r1	; 0x02
    211a:	19 82       	std	Y+1, r1	; 0x01
    211c:	80 91 f5 0a 	lds	r24, 0x0AF5	; 0x800af5 <SQACAMachineStatus+0x1>
    2120:	83 30       	cpi	r24, 0x03	; 3
    2122:	21 f4       	brne	.+8      	; 0x212c <SQACAMachineStatusSequence+0x20>
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	89 83       	std	Y+1, r24	; 0x01
    2128:	80 e7       	ldi	r24, 0x70	; 112
    212a:	8a 83       	std	Y+2, r24	; 0x02
    212c:	ce 01       	movw	r24, r28
    212e:	01 96       	adiw	r24, 0x01	; 1
    2130:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <sendSQDataPacket>
    2134:	81 11       	cpse	r24, r1
    2136:	02 c0       	rjmp	.+4      	; 0x213c <SQACAMachineStatusSequence+0x30>
    2138:	80 e0       	ldi	r24, 0x00	; 0
    213a:	15 c0       	rjmp	.+42     	; 0x2166 <SQACAMachineStatusSequence+0x5a>
    213c:	0e 94 0e 10 	call	0x201c	; 0x201c <getSQACAStatusData>
    2140:	18 2f       	mov	r17, r24
    2142:	88 23       	and	r24, r24
    2144:	c9 f3       	breq	.-14     	; 0x2138 <SQACAMachineStatusSequence+0x2c>
    2146:	90 91 35 09 	lds	r25, 0x0935	; 0x800935 <ReaderStateFlag>
    214a:	91 fb       	bst	r25, 1
    214c:	88 27       	eor	r24, r24
    214e:	80 f9       	bld	r24, 0
    2150:	91 fd       	sbrc	r25, 1
    2152:	09 c0       	rjmp	.+18     	; 0x2166 <SQACAMachineStatusSequence+0x5a>
    2154:	8f ed       	ldi	r24, 0xDF	; 223
    2156:	9e e2       	ldi	r25, 0x2E	; 46
    2158:	01 97       	sbiw	r24, 0x01	; 1
    215a:	f1 f7       	brne	.-4      	; 0x2158 <SQACAMachineStatusSequence+0x4c>
    215c:	00 c0       	rjmp	.+0      	; 0x215e <SQACAMachineStatusSequence+0x52>
    215e:	00 00       	nop
    2160:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <sendSQACAVendPrice>
    2164:	81 2f       	mov	r24, r17
    2166:	0f 90       	pop	r0
    2168:	0f 90       	pop	r0
    216a:	df 91       	pop	r29
    216c:	cf 91       	pop	r28
    216e:	1f 91       	pop	r17
    2170:	08 95       	ret

00002172 <getSQACAInitData>:
    2172:	cf 93       	push	r28
    2174:	df 93       	push	r29
    2176:	cd b7       	in	r28, 0x3d	; 61
    2178:	de b7       	in	r29, 0x3e	; 62
    217a:	6f 97       	sbiw	r28, 0x1f	; 31
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	f8 94       	cli
    2180:	de bf       	out	0x3e, r29	; 62
    2182:	0f be       	out	0x3f, r0	; 63
    2184:	cd bf       	out	0x3d, r28	; 61
    2186:	2f e1       	ldi	r18, 0x1F	; 31
    2188:	ce 01       	movw	r24, r28
    218a:	01 96       	adiw	r24, 0x01	; 1
    218c:	fc 01       	movw	r30, r24
    218e:	32 2f       	mov	r19, r18
    2190:	11 92       	st	Z+, r1
    2192:	3a 95       	dec	r19
    2194:	e9 f7       	brne	.-6      	; 0x2190 <getSQACAInitData+0x1e>
    2196:	29 83       	std	Y+1, r18	; 0x01
    2198:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <getSQDataPacket>
    219c:	88 23       	and	r24, r24
    219e:	79 f0       	breq	.+30     	; 0x21be <getSQACAInitData+0x4c>
    21a0:	9a 81       	ldd	r25, Y+2	; 0x02
    21a2:	90 93 c9 08 	sts	0x08C9, r25	; 0x8008c9 <SQACAToploadProgramming>
    21a6:	9b 81       	ldd	r25, Y+3	; 0x03
    21a8:	90 93 ca 08 	sts	0x08CA, r25	; 0x8008ca <SQACAToploadProgramming+0x1>
    21ac:	9c 81       	ldd	r25, Y+4	; 0x04
    21ae:	90 93 cb 08 	sts	0x08CB, r25	; 0x8008cb <SQACAToploadProgramming+0x2>
    21b2:	9f 81       	ldd	r25, Y+7	; 0x07
    21b4:	90 93 fa 08 	sts	0x08FA, r25	; 0x8008fa <SQACAToploadProgramming+0x31>
    21b8:	99 89       	ldd	r25, Y+17	; 0x11
    21ba:	90 93 fb 08 	sts	0x08FB, r25	; 0x8008fb <SQACAToploadProgramming+0x32>
    21be:	6f 96       	adiw	r28, 0x1f	; 31
    21c0:	0f b6       	in	r0, 0x3f	; 63
    21c2:	f8 94       	cli
    21c4:	de bf       	out	0x3e, r29	; 62
    21c6:	0f be       	out	0x3f, r0	; 63
    21c8:	cd bf       	out	0x3d, r28	; 61
    21ca:	df 91       	pop	r29
    21cc:	cf 91       	pop	r28
    21ce:	08 95       	ret

000021d0 <IsACA>:
    21d0:	cf 93       	push	r28
    21d2:	df 93       	push	r29
    21d4:	cd b7       	in	r28, 0x3d	; 61
    21d6:	de b7       	in	r29, 0x3e	; 62
    21d8:	2a 97       	sbiw	r28, 0x0a	; 10
    21da:	0f b6       	in	r0, 0x3f	; 63
    21dc:	f8 94       	cli
    21de:	de bf       	out	0x3e, r29	; 62
    21e0:	0f be       	out	0x3f, r0	; 63
    21e2:	cd bf       	out	0x3d, r28	; 61
    21e4:	8a e0       	ldi	r24, 0x0A	; 10
    21e6:	ef e2       	ldi	r30, 0x2F	; 47
    21e8:	f2 e0       	ldi	r31, 0x02	; 2
    21ea:	de 01       	movw	r26, r28
    21ec:	11 96       	adiw	r26, 0x01	; 1
    21ee:	01 90       	ld	r0, Z+
    21f0:	0d 92       	st	X+, r0
    21f2:	8a 95       	dec	r24
    21f4:	e1 f7       	brne	.-8      	; 0x21ee <IsACA+0x1e>
    21f6:	89 e0       	ldi	r24, 0x09	; 9
    21f8:	89 83       	std	Y+1, r24	; 0x01
    21fa:	83 e7       	ldi	r24, 0x73	; 115
    21fc:	8a 83       	std	Y+2, r24	; 0x02
    21fe:	1e 82       	std	Y+6, r1	; 0x06
    2200:	81 e0       	ldi	r24, 0x01	; 1
    2202:	8f 83       	std	Y+7, r24	; 0x07
    2204:	80 e1       	ldi	r24, 0x10	; 16
    2206:	88 87       	std	Y+8, r24	; 0x08
    2208:	19 86       	std	Y+9, r1	; 0x09
    220a:	82 e0       	ldi	r24, 0x02	; 2
    220c:	8a 87       	std	Y+10, r24	; 0x0a
    220e:	ce 01       	movw	r24, r28
    2210:	01 96       	adiw	r24, 0x01	; 1
    2212:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <sendSQDataPacket>
    2216:	81 11       	cpse	r24, r1
    2218:	0e 94 b9 10 	call	0x2172	; 0x2172 <getSQACAInitData>
    221c:	2a 96       	adiw	r28, 0x0a	; 10
    221e:	0f b6       	in	r0, 0x3f	; 63
    2220:	f8 94       	cli
    2222:	de bf       	out	0x3e, r29	; 62
    2224:	0f be       	out	0x3f, r0	; 63
    2226:	cd bf       	out	0x3d, r28	; 61
    2228:	df 91       	pop	r29
    222a:	cf 91       	pop	r28
    222c:	08 95       	ret

0000222e <waitSQStartKey>:
    222e:	80 91 f5 0a 	lds	r24, 0x0AF5	; 0x800af5 <SQACAMachineStatus+0x1>
    2232:	83 30       	cpi	r24, 0x03	; 3
    2234:	59 f4       	brne	.+22     	; 0x224c <waitSQStartKey+0x1e>
    2236:	80 91 f9 0a 	lds	r24, 0x0AF9	; 0x800af9 <SQACAMachineStatus+0x5>
    223a:	80 fd       	sbrc	r24, 0
    223c:	02 c0       	rjmp	.+4      	; 0x2242 <waitSQStartKey+0x14>
    223e:	88 30       	cpi	r24, 0x08	; 8
    2240:	29 f4       	brne	.+10     	; 0x224c <waitSQStartKey+0x1e>
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	90 91 fa 0a 	lds	r25, 0x0AFA	; 0x800afa <SQACAMachineStatus+0x6>
    2248:	90 32       	cpi	r25, 0x20	; 32
    224a:	09 f0       	breq	.+2      	; 0x224e <waitSQStartKey+0x20>
    224c:	80 e0       	ldi	r24, 0x00	; 0
    224e:	08 95       	ret

00002250 <isSQCycleRunning>:
    2250:	80 91 f9 0a 	lds	r24, 0x0AF9	; 0x800af9 <SQACAMachineStatus+0x5>
    2254:	88 30       	cpi	r24, 0x08	; 8
    2256:	39 f0       	breq	.+14     	; 0x2266 <isSQCycleRunning+0x16>
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	90 91 fa 0a 	lds	r25, 0x0AFA	; 0x800afa <SQACAMachineStatus+0x6>
    225e:	98 30       	cpi	r25, 0x08	; 8
    2260:	19 f0       	breq	.+6      	; 0x2268 <isSQCycleRunning+0x18>
    2262:	80 e0       	ldi	r24, 0x00	; 0
    2264:	01 c0       	rjmp	.+2      	; 0x2268 <isSQCycleRunning+0x18>
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	81 70       	andi	r24, 0x01	; 1
    226a:	08 95       	ret

0000226c <sendSQCashCardRemoved>:
    226c:	cf 93       	push	r28
    226e:	df 93       	push	r29
    2270:	cd b7       	in	r28, 0x3d	; 61
    2272:	de b7       	in	r29, 0x3e	; 62
    2274:	27 97       	sbiw	r28, 0x07	; 7
    2276:	0f b6       	in	r0, 0x3f	; 63
    2278:	f8 94       	cli
    227a:	de bf       	out	0x3e, r29	; 62
    227c:	0f be       	out	0x3f, r0	; 63
    227e:	cd bf       	out	0x3d, r28	; 61
    2280:	ce 01       	movw	r24, r28
    2282:	01 96       	adiw	r24, 0x01	; 1
    2284:	27 e0       	ldi	r18, 0x07	; 7
    2286:	fc 01       	movw	r30, r24
    2288:	11 92       	st	Z+, r1
    228a:	2a 95       	dec	r18
    228c:	e9 f7       	brne	.-6      	; 0x2288 <sendSQCashCardRemoved+0x1c>
    228e:	40 91 f5 0a 	lds	r20, 0x0AF5	; 0x800af5 <SQACAMachineStatus+0x1>
    2292:	20 91 31 09 	lds	r18, 0x0931	; 0x800931 <CurrentAccount+0x7>
    2296:	30 91 32 09 	lds	r19, 0x0932	; 0x800932 <CurrentAccount+0x8>
    229a:	43 30       	cpi	r20, 0x03	; 3
    229c:	31 f4       	brne	.+12     	; 0x22aa <sendSQCashCardRemoved+0x3e>
    229e:	49 83       	std	Y+1, r20	; 0x01
    22a0:	41 e4       	ldi	r20, 0x41	; 65
    22a2:	4a 83       	std	Y+2, r20	; 0x02
    22a4:	3b 83       	std	Y+3, r19	; 0x03
    22a6:	2c 83       	std	Y+4, r18	; 0x04
    22a8:	0c c0       	rjmp	.+24     	; 0x22c2 <sendSQCashCardRemoved+0x56>
    22aa:	45 e0       	ldi	r20, 0x05	; 5
    22ac:	49 83       	std	Y+1, r20	; 0x01
    22ae:	41 e4       	ldi	r20, 0x41	; 65
    22b0:	4a 83       	std	Y+2, r20	; 0x02
    22b2:	3b 83       	std	Y+3, r19	; 0x03
    22b4:	2c 83       	std	Y+4, r18	; 0x04
    22b6:	20 91 ce 08 	lds	r18, 0x08CE	; 0x8008ce <SQACAToploadProgramming+0x5>
    22ba:	2d 83       	std	Y+5, r18	; 0x05
    22bc:	20 91 cf 08 	lds	r18, 0x08CF	; 0x8008cf <SQACAToploadProgramming+0x6>
    22c0:	2e 83       	std	Y+6, r18	; 0x06
    22c2:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <sendSQDataPacket>
    22c6:	27 96       	adiw	r28, 0x07	; 7
    22c8:	0f b6       	in	r0, 0x3f	; 63
    22ca:	f8 94       	cli
    22cc:	de bf       	out	0x3e, r29	; 62
    22ce:	0f be       	out	0x3f, r0	; 63
    22d0:	cd bf       	out	0x3d, r28	; 61
    22d2:	df 91       	pop	r29
    22d4:	cf 91       	pop	r28
    22d6:	08 95       	ret

000022d8 <sendSQACAMimicQuantumVending>:
    22d8:	cf 93       	push	r28
    22da:	df 93       	push	r29
    22dc:	00 d0       	rcall	.+0      	; 0x22de <sendSQACAMimicQuantumVending+0x6>
    22de:	00 d0       	rcall	.+0      	; 0x22e0 <sendSQACAMimicQuantumVending+0x8>
    22e0:	cd b7       	in	r28, 0x3d	; 61
    22e2:	de b7       	in	r29, 0x3e	; 62
    22e4:	19 82       	std	Y+1, r1	; 0x01
    22e6:	1a 82       	std	Y+2, r1	; 0x02
    22e8:	1b 82       	std	Y+3, r1	; 0x03
    22ea:	1c 82       	std	Y+4, r1	; 0x04
    22ec:	80 91 f5 0a 	lds	r24, 0x0AF5	; 0x800af5 <SQACAMachineStatus+0x1>
    22f0:	83 30       	cpi	r24, 0x03	; 3
    22f2:	39 f4       	brne	.+14     	; 0x2302 <sendSQACAMimicQuantumVending+0x2a>
    22f4:	89 83       	std	Y+1, r24	; 0x01
    22f6:	84 e6       	ldi	r24, 0x64	; 100
    22f8:	8a 83       	std	Y+2, r24	; 0x02
    22fa:	8e e1       	ldi	r24, 0x1E	; 30
    22fc:	8b 83       	std	Y+3, r24	; 0x03
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	8c 83       	std	Y+4, r24	; 0x04
    2302:	ce 01       	movw	r24, r28
    2304:	01 96       	adiw	r24, 0x01	; 1
    2306:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <sendSQDataPacket>
    230a:	0f 90       	pop	r0
    230c:	0f 90       	pop	r0
    230e:	0f 90       	pop	r0
    2310:	0f 90       	pop	r0
    2312:	df 91       	pop	r29
    2314:	cf 91       	pop	r28
    2316:	08 95       	ret

00002318 <SQACAMimicQuantumSequence>:
    2318:	81 30       	cpi	r24, 0x01	; 1
    231a:	11 f0       	breq	.+4      	; 0x2320 <SQACAMimicQuantumSequence+0x8>
    231c:	80 e0       	ldi	r24, 0x00	; 0
    231e:	08 95       	ret
    2320:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <sendSQACAMimicQuantumVending>
    2324:	88 23       	and	r24, r24
    2326:	d1 f3       	breq	.-12     	; 0x231c <SQACAMimicQuantumSequence+0x4>
    2328:	90 e8       	ldi	r25, 0x80	; 128
    232a:	90 93 33 09 	sts	0x0933, r25	; 0x800933 <CurrentAccount+0x9>
    232e:	08 95       	ret

00002330 <sendSQACAVendingTransactions>:
    2330:	cf 93       	push	r28
    2332:	df 93       	push	r29
    2334:	cd b7       	in	r28, 0x3d	; 61
    2336:	de b7       	in	r29, 0x3e	; 62
    2338:	27 97       	sbiw	r28, 0x07	; 7
    233a:	0f b6       	in	r0, 0x3f	; 63
    233c:	f8 94       	cli
    233e:	de bf       	out	0x3e, r29	; 62
    2340:	0f be       	out	0x3f, r0	; 63
    2342:	cd bf       	out	0x3d, r28	; 61
    2344:	ce 01       	movw	r24, r28
    2346:	01 96       	adiw	r24, 0x01	; 1
    2348:	27 e0       	ldi	r18, 0x07	; 7
    234a:	fc 01       	movw	r30, r24
    234c:	11 92       	st	Z+, r1
    234e:	2a 95       	dec	r18
    2350:	e9 f7       	brne	.-6      	; 0x234c <sendSQACAVendingTransactions+0x1c>
    2352:	26 e0       	ldi	r18, 0x06	; 6
    2354:	29 83       	std	Y+1, r18	; 0x01
    2356:	2a e6       	ldi	r18, 0x6A	; 106
    2358:	2a 83       	std	Y+2, r18	; 0x02
    235a:	e4 ef       	ldi	r30, 0xF4	; 244
    235c:	fa e0       	ldi	r31, 0x0A	; 10
    235e:	33 85       	ldd	r19, Z+11	; 0x0b
    2360:	3b 83       	std	Y+3, r19	; 0x03
    2362:	24 85       	ldd	r18, Z+12	; 0x0c
    2364:	2c 83       	std	Y+4, r18	; 0x04
    2366:	3d 83       	std	Y+5, r19	; 0x05
    2368:	2e 83       	std	Y+6, r18	; 0x06
    236a:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <sendSQDataPacket>
    236e:	27 96       	adiw	r28, 0x07	; 7
    2370:	0f b6       	in	r0, 0x3f	; 63
    2372:	f8 94       	cli
    2374:	de bf       	out	0x3e, r29	; 62
    2376:	0f be       	out	0x3f, r0	; 63
    2378:	cd bf       	out	0x3d, r28	; 61
    237a:	df 91       	pop	r29
    237c:	cf 91       	pop	r28
    237e:	08 95       	ret

00002380 <sendSQDisplayCommand>:
    2380:	cf 92       	push	r12
    2382:	ef 92       	push	r14
    2384:	0f 93       	push	r16
    2386:	cf 93       	push	r28
    2388:	df 93       	push	r29
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
    238e:	29 97       	sbiw	r28, 0x09	; 9
    2390:	0f b6       	in	r0, 0x3f	; 63
    2392:	f8 94       	cli
    2394:	de bf       	out	0x3e, r29	; 62
    2396:	0f be       	out	0x3f, r0	; 63
    2398:	cd bf       	out	0x3d, r28	; 61
    239a:	fe 01       	movw	r30, r28
    239c:	31 96       	adiw	r30, 0x01	; 1
    239e:	99 e0       	ldi	r25, 0x09	; 9
    23a0:	df 01       	movw	r26, r30
    23a2:	1d 92       	st	X+, r1
    23a4:	9a 95       	dec	r25
    23a6:	e9 f7       	brne	.-6      	; 0x23a2 <sendSQDisplayCommand+0x22>
    23a8:	98 e0       	ldi	r25, 0x08	; 8
    23aa:	99 83       	std	Y+1, r25	; 0x01
    23ac:	90 e6       	ldi	r25, 0x60	; 96
    23ae:	9a 83       	std	Y+2, r25	; 0x02
    23b0:	8b 83       	std	Y+3, r24	; 0x03
    23b2:	6c 83       	std	Y+4, r22	; 0x04
    23b4:	4d 83       	std	Y+5, r20	; 0x05
    23b6:	2e 83       	std	Y+6, r18	; 0x06
    23b8:	0f 83       	std	Y+7, r16	; 0x07
    23ba:	e8 86       	std	Y+8, r14	; 0x08
    23bc:	c9 86       	std	Y+9, r12	; 0x09
    23be:	cf 01       	movw	r24, r30
    23c0:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <sendSQDataPacket>
    23c4:	29 96       	adiw	r28, 0x09	; 9
    23c6:	0f b6       	in	r0, 0x3f	; 63
    23c8:	f8 94       	cli
    23ca:	de bf       	out	0x3e, r29	; 62
    23cc:	0f be       	out	0x3f, r0	; 63
    23ce:	cd bf       	out	0x3d, r28	; 61
    23d0:	df 91       	pop	r29
    23d2:	cf 91       	pop	r28
    23d4:	0f 91       	pop	r16
    23d6:	ef 90       	pop	r14
    23d8:	cf 90       	pop	r12
    23da:	08 95       	ret

000023dc <displaySQReaderVersion>:
    23dc:	cf 92       	push	r12
    23de:	ef 92       	push	r14
    23e0:	0f 93       	push	r16
    23e2:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <msgNumber+0x1>
    23e6:	85 e0       	ldi	r24, 0x05	; 5
    23e8:	c8 2e       	mov	r12, r24
    23ea:	e1 2c       	mov	r14, r1
    23ec:	00 e0       	ldi	r16, 0x00	; 0
    23ee:	20 91 0d 02 	lds	r18, 0x020D	; 0x80020d <msgNumber>
    23f2:	46 2f       	mov	r20, r22
    23f4:	80 e5       	ldi	r24, 0x50	; 80
    23f6:	0e 94 c0 11 	call	0x2380	; 0x2380 <sendSQDisplayCommand>
    23fa:	88 23       	and	r24, r24
    23fc:	49 f0       	breq	.+18     	; 0x2410 <displaySQReaderVersion+0x34>
    23fe:	2f ef       	ldi	r18, 0xFF	; 255
    2400:	37 ea       	ldi	r19, 0xA7	; 167
    2402:	91 e6       	ldi	r25, 0x61	; 97
    2404:	21 50       	subi	r18, 0x01	; 1
    2406:	30 40       	sbci	r19, 0x00	; 0
    2408:	90 40       	sbci	r25, 0x00	; 0
    240a:	e1 f7       	brne	.-8      	; 0x2404 <displaySQReaderVersion+0x28>
    240c:	00 c0       	rjmp	.+0      	; 0x240e <displaySQReaderVersion+0x32>
    240e:	00 00       	nop
    2410:	0f 91       	pop	r16
    2412:	ef 90       	pop	r14
    2414:	cf 90       	pop	r12
    2416:	08 95       	ret

00002418 <displaySQCardError>:
    2418:	cf 92       	push	r12
    241a:	ef 92       	push	r14
    241c:	0f 93       	push	r16
    241e:	cf 93       	push	r28
    2420:	94 e0       	ldi	r25, 0x04	; 4
    2422:	c9 2e       	mov	r12, r25
    2424:	e1 2c       	mov	r14, r1
    2426:	00 e0       	ldi	r16, 0x00	; 0
    2428:	2e e5       	ldi	r18, 0x5E	; 94
    242a:	40 e5       	ldi	r20, 0x50	; 80
    242c:	67 e7       	ldi	r22, 0x77	; 119
    242e:	89 e3       	ldi	r24, 0x39	; 57
    2430:	0e 94 c0 11 	call	0x2380	; 0x2380 <sendSQDisplayCommand>
    2434:	c8 2f       	mov	r28, r24
    2436:	88 23       	and	r24, r24
    2438:	e9 f0       	breq	.+58     	; 0x2474 <displaySQCardError+0x5c>
    243a:	2f ef       	ldi	r18, 0xFF	; 255
    243c:	37 ea       	ldi	r19, 0xA7	; 167
    243e:	81 e6       	ldi	r24, 0x61	; 97
    2440:	21 50       	subi	r18, 0x01	; 1
    2442:	30 40       	sbci	r19, 0x00	; 0
    2444:	80 40       	sbci	r24, 0x00	; 0
    2446:	e1 f7       	brne	.-8      	; 0x2440 <displaySQCardError+0x28>
    2448:	00 c0       	rjmp	.+0      	; 0x244a <displaySQCardError+0x32>
    244a:	00 00       	nop
    244c:	83 e0       	ldi	r24, 0x03	; 3
    244e:	c8 2e       	mov	r12, r24
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	40 e5       	ldi	r20, 0x50	; 80
    2454:	60 e5       	ldi	r22, 0x50	; 80
    2456:	89 e7       	ldi	r24, 0x79	; 121
    2458:	0e 94 c0 11 	call	0x2380	; 0x2380 <sendSQDisplayCommand>
    245c:	88 23       	and	r24, r24
    245e:	51 f0       	breq	.+20     	; 0x2474 <displaySQCardError+0x5c>
    2460:	9f ef       	ldi	r25, 0xFF	; 255
    2462:	27 ea       	ldi	r18, 0xA7	; 167
    2464:	31 e6       	ldi	r19, 0x61	; 97
    2466:	91 50       	subi	r25, 0x01	; 1
    2468:	20 40       	sbci	r18, 0x00	; 0
    246a:	30 40       	sbci	r19, 0x00	; 0
    246c:	e1 f7       	brne	.-8      	; 0x2466 <displaySQCardError+0x4e>
    246e:	00 c0       	rjmp	.+0      	; 0x2470 <displaySQCardError+0x58>
    2470:	00 00       	nop
    2472:	c8 2f       	mov	r28, r24
    2474:	8c 2f       	mov	r24, r28
    2476:	cf 91       	pop	r28
    2478:	0f 91       	pop	r16
    247a:	ef 90       	pop	r14
    247c:	cf 90       	pop	r12
    247e:	08 95       	ret

00002480 <cardRemoved>:
    2480:	81 30       	cpi	r24, 0x01	; 1
    2482:	11 f0       	breq	.+4      	; 0x2488 <cardRemoved+0x8>
    2484:	80 e0       	ldi	r24, 0x00	; 0
    2486:	08 95       	ret
    2488:	0e 94 36 11 	call	0x226c	; 0x226c <sendSQCashCardRemoved>
    248c:	88 23       	and	r24, r24
    248e:	d1 f3       	breq	.-12     	; 0x2484 <cardRemoved+0x4>
    2490:	10 92 33 09 	sts	0x0933, r1	; 0x800933 <CurrentAccount+0x9>
    2494:	08 95       	ret

00002496 <isMachineCycleRunning>:
	deviceStatus.deviceType[1] = SQACAMachineStatus.MachineType[1];
}

bool isMachineCycleRunning()
{
	return (isSQCycleRunning() );
    2496:	0c 94 28 11 	jmp	0x2250	; 0x2250 <isSQCycleRunning>

0000249a <waitForMachineStartKey>:
}
bool waitForMachineStartKey()
{

	return waitSQStartKey();
    249a:	0c 94 17 11 	jmp	0x222e	; 0x222e <waitSQStartKey>

0000249e <SQACAMachineStatusCommSequence>:
price to be written to the display and used in a vending transaction. The ucDeviceStateFlag is set to be online.
*/
void SQACAMachineStatusCommSequence(void)
{
	
	if( SQACAMachineStatusSequence() )
    249e:	0e 94 86 10 	call	0x210c	; 0x210c <SQACAMachineStatusSequence>
    24a2:	88 23       	and	r24, r24
    24a4:	19 f0       	breq	.+6      	; 0x24ac <SQACAMachineStatusCommSequence+0xe>
	{
		//set machine status ok flag;
		ucDeviceStateFlag = MACHINE_STATUS_ON; //machine status has been done
    24a6:	82 e0       	ldi	r24, 0x02	; 2
    24a8:	80 93 b9 09 	sts	0x09B9, r24	; 0x8009b9 <ucDeviceStateFlag>
    24ac:	08 95       	ret

000024ae <SQACAInitializationSequence>:

@ingroup pposreader
*/
void SQACAInitializationSequence(void)
{
	if( IsACA() )
    24ae:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <IsACA>
    24b2:	88 23       	and	r24, r24
    24b4:	19 f0       	breq	.+6      	; 0x24bc <SQACAInitializationSequence+0xe>
	{
		//set q flag
		SQACAMachineStatus.MachineType[1] = ACA_SERIES;
    24b6:	83 e0       	ldi	r24, 0x03	; 3
    24b8:	80 93 f5 0a 	sts	0x0AF5, r24	; 0x800af5 <SQACAMachineStatus+0x1>
    24bc:	8f e3       	ldi	r24, 0x3F	; 63
    24be:	9f e1       	ldi	r25, 0x1F	; 31
    24c0:	01 97       	sbiw	r24, 0x01	; 1
    24c2:	f1 f7       	brne	.-4      	; 0x24c0 <SQACAInitializationSequence+0x12>
    24c4:	00 c0       	rjmp	.+0      	; 0x24c6 <SQACAInitializationSequence+0x18>
    24c6:	00 00       	nop

	}
	

	_delay_ms(2);
	SQACAMachineStatusCommSequence();
    24c8:	0e 94 4f 12 	call	0x249e	; 0x249e <SQACAMachineStatusCommSequence>
	deviceStatus.deviceType[0] = SQACAMachineStatus.MachineType[0];
    24cc:	80 91 f4 0a 	lds	r24, 0x0AF4	; 0x800af4 <SQACAMachineStatus>
    24d0:	80 93 f0 0a 	sts	0x0AF0, r24	; 0x800af0 <deviceStatus>
	deviceStatus.deviceType[1] = SQACAMachineStatus.MachineType[1];
    24d4:	80 91 f5 0a 	lds	r24, 0x0AF5	; 0x800af5 <SQACAMachineStatus+0x1>
    24d8:	80 93 f1 0a 	sts	0x0AF1, r24	; 0x800af1 <deviceStatus+0x1>
    24dc:	08 95       	ret

000024de <getSQReaderMachineSetup>:
	}
	
}

bool getSQReaderMachineSetup(void)
{
    24de:	cf 93       	push	r28
    24e0:	df 93       	push	r29
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
    24e6:	ec 97       	sbiw	r28, 0x3c	; 60
    24e8:	0f b6       	in	r0, 0x3f	; 63
    24ea:	f8 94       	cli
    24ec:	de bf       	out	0x3e, r29	; 62
    24ee:	0f be       	out	0x3f, r0	; 63
    24f0:	cd bf       	out	0x3d, r28	; 61
	u8 temp[ACA_MAX_PACKET_SIZE] = {0};	
    24f2:	fe 01       	movw	r30, r28
    24f4:	31 96       	adiw	r30, 0x01	; 1
    24f6:	8c e3       	ldi	r24, 0x3C	; 60
    24f8:	df 01       	movw	r26, r30
    24fa:	1d 92       	st	X+, r1
    24fc:	8a 95       	dec	r24
    24fe:	e9 f7       	brne	.-6      	; 0x24fa <getSQReaderMachineSetup+0x1c>
	
switch( deviceStatus.deviceType[0] )
    2500:	90 91 f0 0a 	lds	r25, 0x0AF0	; 0x800af0 <deviceStatus>
    2504:	92 32       	cpi	r25, 0x22	; 34
    2506:	09 f4       	brne	.+2      	; 0x250a <getSQReaderMachineSetup+0x2c>
    2508:	98 c0       	rjmp	.+304    	; 0x263a <getSQReaderMachineSetup+0x15c>
    250a:	99 32       	cpi	r25, 0x29	; 41
    250c:	09 f4       	brne	.+2      	; 0x2510 <getSQReaderMachineSetup+0x32>
    250e:	04 c1       	rjmp	.+520    	; 0x2718 <getSQReaderMachineSetup+0x23a>
    2510:	91 32       	cpi	r25, 0x21	; 33
    2512:	09 f0       	breq	.+2      	; 0x2516 <getSQReaderMachineSetup+0x38>
    2514:	70 c1       	rjmp	.+736    	; 0x27f6 <getSQReaderMachineSetup+0x318>
	{
		case PROGRAMMING_DATA_TOPLOAD:

			temp[0] = QTL_PROGRAMMING_DATA_SIZE;					//50 bytes
    2516:	82 e3       	ldi	r24, 0x32	; 50
    2518:	89 83       	std	Y+1, r24	; 0x01
			temp[1] = deviceStatus.deviceType[0];					//0x21 (TLW Prog)
    251a:	9a 83       	std	Y+2, r25	; 0x02
			temp[2] = SQACAToploadProgramming.ProductByte[0];
    251c:	80 91 c9 08 	lds	r24, 0x08C9	; 0x8008c9 <SQACAToploadProgramming>
    2520:	8b 83       	std	Y+3, r24	; 0x03
			temp[3] = SQACAToploadProgramming.ProductByte[1];
    2522:	80 91 ca 08 	lds	r24, 0x08CA	; 0x8008ca <SQACAToploadProgramming+0x1>
    2526:	8c 83       	std	Y+4, r24	; 0x04
			temp[4] = SQACAToploadProgramming.ProductByte[2];
    2528:	80 91 cb 08 	lds	r24, 0x08CB	; 0x8008cb <SQACAToploadProgramming+0x2>
    252c:	8d 83       	std	Y+5, r24	; 0x05
			temp[5] = SQACAToploadProgramming.ProductByte[3];
    252e:	80 91 cc 08 	lds	r24, 0x08CC	; 0x8008cc <SQACAToploadProgramming+0x3>
    2532:	8e 83       	std	Y+6, r24	; 0x06
			temp[6] = SQACAToploadProgramming.ProductByte[4];
    2534:	80 91 cd 08 	lds	r24, 0x08CD	; 0x8008cd <SQACAToploadProgramming+0x4>
    2538:	8f 83       	std	Y+7, r24	; 0x07
			temp[7] = SQACAToploadProgramming.VendPrice1[0];
    253a:	80 91 ce 08 	lds	r24, 0x08CE	; 0x8008ce <SQACAToploadProgramming+0x5>
    253e:	88 87       	std	Y+8, r24	; 0x08
			temp[8] = SQACAToploadProgramming.VendPrice1[1];
    2540:	80 91 cf 08 	lds	r24, 0x08CF	; 0x8008cf <SQACAToploadProgramming+0x6>
    2544:	89 87       	std	Y+9, r24	; 0x09
			temp[9] = SQACAToploadProgramming.VendPrice2[0];
    2546:	80 91 d0 08 	lds	r24, 0x08D0	; 0x8008d0 <SQACAToploadProgramming+0x7>
    254a:	8a 87       	std	Y+10, r24	; 0x0a
			temp[10] = SQACAToploadProgramming.VendPrice2[1];
    254c:	80 91 d1 08 	lds	r24, 0x08D1	; 0x8008d1 <SQACAToploadProgramming+0x8>
    2550:	8b 87       	std	Y+11, r24	; 0x0b
			temp[11] = SQACAToploadProgramming.VendPrice3[0];
    2552:	80 91 d2 08 	lds	r24, 0x08D2	; 0x8008d2 <SQACAToploadProgramming+0x9>
    2556:	8c 87       	std	Y+12, r24	; 0x0c
			temp[12] = SQACAToploadProgramming.VendPrice3[1];
    2558:	80 91 d3 08 	lds	r24, 0x08D3	; 0x8008d3 <SQACAToploadProgramming+0xa>
    255c:	8d 87       	std	Y+13, r24	; 0x0d
			temp[13] = SQACAToploadProgramming.VendPrice4[0];
    255e:	80 91 d4 08 	lds	r24, 0x08D4	; 0x8008d4 <SQACAToploadProgramming+0xb>
    2562:	8e 87       	std	Y+14, r24	; 0x0e
			temp[14] = SQACAToploadProgramming.VendPrice4[1];
    2564:	80 91 d5 08 	lds	r24, 0x08D5	; 0x8008d5 <SQACAToploadProgramming+0xc>
    2568:	8f 87       	std	Y+15, r24	; 0x0f
			temp[15] = SQACAToploadProgramming.VendPrice5[0];
    256a:	80 91 d6 08 	lds	r24, 0x08D6	; 0x8008d6 <SQACAToploadProgramming+0xd>
    256e:	88 8b       	std	Y+16, r24	; 0x10
			temp[16] = SQACAToploadProgramming.VendPrice5[1];
    2570:	80 91 d7 08 	lds	r24, 0x08D7	; 0x8008d7 <SQACAToploadProgramming+0xe>
    2574:	89 8b       	std	Y+17, r24	; 0x11
			temp[17] = SQACAToploadProgramming.VendPrice6[0];
    2576:	80 91 d8 08 	lds	r24, 0x08D8	; 0x8008d8 <SQACAToploadProgramming+0xf>
    257a:	8a 8b       	std	Y+18, r24	; 0x12
			temp[18] = SQACAToploadProgramming.VendPrice6[1];
    257c:	80 91 d9 08 	lds	r24, 0x08D9	; 0x8008d9 <SQACAToploadProgramming+0x10>
    2580:	8b 8b       	std	Y+19, r24	; 0x13
			temp[19] = SQACAToploadProgramming.VendPrice7[0];
    2582:	80 91 da 08 	lds	r24, 0x08DA	; 0x8008da <SQACAToploadProgramming+0x11>
    2586:	8c 8b       	std	Y+20, r24	; 0x14
			temp[20] = SQACAToploadProgramming.VendPrice7[1];
    2588:	80 91 db 08 	lds	r24, 0x08DB	; 0x8008db <SQACAToploadProgramming+0x12>
    258c:	8d 8b       	std	Y+21, r24	; 0x15
			temp[21] = SQACAToploadProgramming.VendPrice8[0];
    258e:	80 91 dc 08 	lds	r24, 0x08DC	; 0x8008dc <SQACAToploadProgramming+0x13>
    2592:	8e 8b       	std	Y+22, r24	; 0x16
			temp[22] = SQACAToploadProgramming.VendPrice8[1];
    2594:	80 91 dd 08 	lds	r24, 0x08DD	; 0x8008dd <SQACAToploadProgramming+0x14>
    2598:	8f 8b       	std	Y+23, r24	; 0x17
			temp[23] = SQACAToploadProgramming.VendPrice9[0];
    259a:	80 91 de 08 	lds	r24, 0x08DE	; 0x8008de <SQACAToploadProgramming+0x15>
    259e:	88 8f       	std	Y+24, r24	; 0x18
			temp[24] = SQACAToploadProgramming.VendPrice9[1];
    25a0:	80 91 df 08 	lds	r24, 0x08DF	; 0x8008df <SQACAToploadProgramming+0x16>
    25a4:	89 8f       	std	Y+25, r24	; 0x19
			temp[25] = SQACAToploadProgramming.MediumCycle_VendPrice[0];
    25a6:	80 91 e0 08 	lds	r24, 0x08E0	; 0x8008e0 <SQACAToploadProgramming+0x17>
    25aa:	8a 8f       	std	Y+26, r24	; 0x1a
			temp[26] = SQACAToploadProgramming.MediumCycle_VendPrice[1];
    25ac:	80 91 e1 08 	lds	r24, 0x08E1	; 0x8008e1 <SQACAToploadProgramming+0x18>
    25b0:	8b 8f       	std	Y+27, r24	; 0x1b
			temp[27] = SQACAToploadProgramming.HeavyCycle_VendPrice[0];
    25b2:	80 91 e2 08 	lds	r24, 0x08E2	; 0x8008e2 <SQACAToploadProgramming+0x19>
    25b6:	8c 8f       	std	Y+28, r24	; 0x1c
			temp[28] = SQACAToploadProgramming.HeavyCycle_VendPrice[1];
    25b8:	80 91 e3 08 	lds	r24, 0x08E3	; 0x8008e3 <SQACAToploadProgramming+0x1a>
    25bc:	8d 8f       	std	Y+29, r24	; 0x1d
			temp[29] = SQACAToploadProgramming.HeavyCycle_option;
    25be:	80 91 e5 08 	lds	r24, 0x08E5	; 0x8008e5 <SQACAToploadProgramming+0x1c>
    25c2:	8e 8f       	std	Y+30, r24	; 0x1e
			temp[30] = SQACAToploadProgramming.MediumCycle_option;
    25c4:	80 91 e4 08 	lds	r24, 0x08E4	; 0x8008e4 <SQACAToploadProgramming+0x1b>
    25c8:	8f 8f       	std	Y+31, r24	; 0x1f
			temp[31] = SQACAToploadProgramming.MediumCycle_extraWashTime;
    25ca:	80 91 e6 08 	lds	r24, 0x08E6	; 0x8008e6 <SQACAToploadProgramming+0x1d>
    25ce:	88 a3       	std	Y+32, r24	; 0x20
			temp[32] = SQACAToploadProgramming.MediumCycle_extraRinseTime;
    25d0:	80 91 e7 08 	lds	r24, 0x08E7	; 0x8008e7 <SQACAToploadProgramming+0x1e>
    25d4:	89 a3       	std	Y+33, r24	; 0x21
			temp[33] = SQACAToploadProgramming.HeavyCycle_extraWashTime;
    25d6:	80 91 e8 08 	lds	r24, 0x08E8	; 0x8008e8 <SQACAToploadProgramming+0x1f>
    25da:	8a a3       	std	Y+34, r24	; 0x22
			temp[34] = SQACAToploadProgramming.HeavyCycle_extraRinseTime;
    25dc:	80 91 e9 08 	lds	r24, 0x08E9	; 0x8008e9 <SQACAToploadProgramming+0x20>
    25e0:	8b a3       	std	Y+35, r24	; 0x23
			temp[35] = SQACAToploadProgramming.NormalCycle_washAgitateTime;
    25e2:	80 91 ea 08 	lds	r24, 0x08EA	; 0x8008ea <SQACAToploadProgramming+0x21>
    25e6:	8c a3       	std	Y+36, r24	; 0x24
			temp[36] = SQACAToploadProgramming.NormalCycle_rinseAgitateTime;
    25e8:	80 91 eb 08 	lds	r24, 0x08EB	; 0x8008eb <SQACAToploadProgramming+0x22>
    25ec:	8d a3       	std	Y+37, r24	; 0x25
			temp[37] = SQACAToploadProgramming.NormalCycle_rinseAgitateTime;
    25ee:	8e a3       	std	Y+38, r24	; 0x26
			temp[38] = SQACAToploadProgramming.NormalCycle_finalSpinTime;
    25f0:	80 91 ed 08 	lds	r24, 0x08ED	; 0x8008ed <SQACAToploadProgramming+0x24>
    25f4:	8f a3       	std	Y+39, r24	; 0x27
			temp[39] = SQACAToploadProgramming.PermPressCycle_washAgitateTime;
    25f6:	80 91 ee 08 	lds	r24, 0x08EE	; 0x8008ee <SQACAToploadProgramming+0x25>
    25fa:	88 a7       	std	Y+40, r24	; 0x28
			temp[40] = SQACAToploadProgramming.PermPressCycle_extraRinseAgitateTime;
    25fc:	80 91 f0 08 	lds	r24, 0x08F0	; 0x8008f0 <SQACAToploadProgramming+0x27>
    2600:	89 a7       	std	Y+41, r24	; 0x29
			temp[41] = SQACAToploadProgramming.PermPressCycle_rinseAgitateTime;
			temp[42] = SQACAToploadProgramming.PermPressCycle_finalSpinTime;
    2602:	80 91 f1 08 	lds	r24, 0x08F1	; 0x8008f1 <SQACAToploadProgramming+0x28>
    2606:	8b a7       	std	Y+43, r24	; 0x2b
			temp[43] = SQACAToploadProgramming.DelicateCycle_washAgitateTime;
    2608:	80 91 f2 08 	lds	r24, 0x08F2	; 0x8008f2 <SQACAToploadProgramming+0x29>
    260c:	8c a7       	std	Y+44, r24	; 0x2c
			temp[44] = SQACAToploadProgramming.DelicateCycle_extraRinseAgitateTime;
    260e:	80 91 f4 08 	lds	r24, 0x08F4	; 0x8008f4 <SQACAToploadProgramming+0x2b>
    2612:	8d a7       	std	Y+45, r24	; 0x2d
			temp[41] = SQACAToploadProgramming.DelicateCycle_rinseAgitateTime;
    2614:	80 91 f3 08 	lds	r24, 0x08F3	; 0x8008f3 <SQACAToploadProgramming+0x2a>
    2618:	8a a7       	std	Y+42, r24	; 0x2a
			temp[46] = SQACAToploadProgramming.DelicateCycle_finalSpinTime;
    261a:	80 91 f5 08 	lds	r24, 0x08F5	; 0x8008f5 <SQACAToploadProgramming+0x2c>
    261e:	8f a7       	std	Y+47, r24	; 0x2f
			temp[47] = SQACAToploadProgramming.DefaultCycle;
    2620:	80 91 f6 08 	lds	r24, 0x08F6	; 0x8008f6 <SQACAToploadProgramming+0x2d>
    2624:	88 ab       	std	Y+48, r24	; 0x30
			temp[48] = SQACAToploadProgramming.DefaultCycleModifier;
    2626:	80 91 f7 08 	lds	r24, 0x08F7	; 0x8008f7 <SQACAToploadProgramming+0x2e>
    262a:	89 ab       	std	Y+49, r24	; 0x31
			temp[49] = SQACAToploadProgramming.WarmRinse;
    262c:	80 91 f8 08 	lds	r24, 0x08F8	; 0x8008f8 <SQACAToploadProgramming+0x2f>
    2630:	8a ab       	std	Y+50, r24	; 0x32
			temp[50] = SQACAToploadProgramming.AudioSetting;
    2632:	80 91 f9 08 	lds	r24, 0x08F9	; 0x8008f9 <SQACAToploadProgramming+0x30>
    2636:	8b ab       	std	Y+51, r24	; 0x33
			break;
    2638:	de c0       	rjmp	.+444    	; 0x27f6 <getSQReaderMachineSetup+0x318>
			case PROGRAMMING_DATA_FRONTLOAD:
			temp[0] = QTL_PROGRAMMING_DATA_SIZE;					//37 bytes
    263a:	82 e3       	ldi	r24, 0x32	; 50
    263c:	89 83       	std	Y+1, r24	; 0x01
			temp[1] = deviceStatus.deviceType[0];					//0x22 (FLW Prog)
    263e:	9a 83       	std	Y+2, r25	; 0x02
			temp[2] = SQACAFrontloadProgramming.ProductByte[0];
    2640:	80 91 a2 08 	lds	r24, 0x08A2	; 0x8008a2 <SQACAFrontloadProgramming>
    2644:	8b 83       	std	Y+3, r24	; 0x03
			temp[3] = SQACAFrontloadProgramming.ProductByte[1];
    2646:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <SQACAFrontloadProgramming+0x1>
    264a:	8c 83       	std	Y+4, r24	; 0x04
			temp[4] = SQACAFrontloadProgramming.ProductByte[2];
    264c:	80 91 a4 08 	lds	r24, 0x08A4	; 0x8008a4 <SQACAFrontloadProgramming+0x2>
    2650:	8d 83       	std	Y+5, r24	; 0x05
			temp[5] = SQACAFrontloadProgramming.ProductByte[3];
    2652:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <SQACAFrontloadProgramming+0x3>
    2656:	8e 83       	std	Y+6, r24	; 0x06
			temp[6] = SQACAFrontloadProgramming.ProductByte[4];
    2658:	80 91 a6 08 	lds	r24, 0x08A6	; 0x8008a6 <SQACAFrontloadProgramming+0x4>
    265c:	8f 83       	std	Y+7, r24	; 0x07
			temp[7] = SQACAFrontloadProgramming.VendPrice1[0];
    265e:	80 91 a7 08 	lds	r24, 0x08A7	; 0x8008a7 <SQACAFrontloadProgramming+0x5>
    2662:	88 87       	std	Y+8, r24	; 0x08
			temp[8] = SQACAFrontloadProgramming.VendPrice1[1];
    2664:	80 91 a8 08 	lds	r24, 0x08A8	; 0x8008a8 <SQACAFrontloadProgramming+0x6>
    2668:	89 87       	std	Y+9, r24	; 0x09
			temp[9] = SQACAFrontloadProgramming.VendPrice2[0];
    266a:	80 91 a9 08 	lds	r24, 0x08A9	; 0x8008a9 <SQACAFrontloadProgramming+0x7>
    266e:	8a 87       	std	Y+10, r24	; 0x0a
			temp[10] = SQACAFrontloadProgramming.VendPrice2[1];
    2670:	80 91 aa 08 	lds	r24, 0x08AA	; 0x8008aa <SQACAFrontloadProgramming+0x8>
    2674:	8b 87       	std	Y+11, r24	; 0x0b
			temp[11] = SQACAFrontloadProgramming.VendPrice3[0];
    2676:	80 91 ab 08 	lds	r24, 0x08AB	; 0x8008ab <SQACAFrontloadProgramming+0x9>
    267a:	8c 87       	std	Y+12, r24	; 0x0c
			temp[12] = SQACAFrontloadProgramming.VendPrice3[1];
    267c:	80 91 ac 08 	lds	r24, 0x08AC	; 0x8008ac <SQACAFrontloadProgramming+0xa>
    2680:	8d 87       	std	Y+13, r24	; 0x0d
			temp[13] = SQACAFrontloadProgramming.VendPrice4[0];
    2682:	80 91 ad 08 	lds	r24, 0x08AD	; 0x8008ad <SQACAFrontloadProgramming+0xb>
    2686:	8e 87       	std	Y+14, r24	; 0x0e
			temp[14] = SQACAFrontloadProgramming.VendPrice4[1];
    2688:	80 91 ae 08 	lds	r24, 0x08AE	; 0x8008ae <SQACAFrontloadProgramming+0xc>
    268c:	8f 87       	std	Y+15, r24	; 0x0f
			temp[15] = SQACAFrontloadProgramming.VendPrice5[0];
    268e:	80 91 af 08 	lds	r24, 0x08AF	; 0x8008af <SQACAFrontloadProgramming+0xd>
    2692:	88 8b       	std	Y+16, r24	; 0x10
			temp[16] = SQACAFrontloadProgramming.VendPrice5[1];
    2694:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <SQACAFrontloadProgramming+0xe>
    2698:	89 8b       	std	Y+17, r24	; 0x11
			temp[17] = SQACAFrontloadProgramming.VendPrice6[0];
    269a:	80 91 b1 08 	lds	r24, 0x08B1	; 0x8008b1 <SQACAFrontloadProgramming+0xf>
    269e:	8a 8b       	std	Y+18, r24	; 0x12
			temp[18] = SQACAFrontloadProgramming.VendPrice6[1];
    26a0:	80 91 b2 08 	lds	r24, 0x08B2	; 0x8008b2 <SQACAFrontloadProgramming+0x10>
    26a4:	8b 8b       	std	Y+19, r24	; 0x13
			temp[19] = SQACAFrontloadProgramming.VendPrice7[0];
    26a6:	80 91 b3 08 	lds	r24, 0x08B3	; 0x8008b3 <SQACAFrontloadProgramming+0x11>
    26aa:	8c 8b       	std	Y+20, r24	; 0x14
			temp[20] = SQACAFrontloadProgramming.VendPrice7[1];
    26ac:	80 91 b4 08 	lds	r24, 0x08B4	; 0x8008b4 <SQACAFrontloadProgramming+0x12>
    26b0:	8d 8b       	std	Y+21, r24	; 0x15
			temp[21] = SQACAFrontloadProgramming.VendPrice8[0];
    26b2:	80 91 b5 08 	lds	r24, 0x08B5	; 0x8008b5 <SQACAFrontloadProgramming+0x13>
    26b6:	8e 8b       	std	Y+22, r24	; 0x16
			temp[22] = SQACAFrontloadProgramming.VendPrice8[1];
    26b8:	80 91 b6 08 	lds	r24, 0x08B6	; 0x8008b6 <SQACAFrontloadProgramming+0x14>
    26bc:	8f 8b       	std	Y+23, r24	; 0x17
			temp[23] = SQACAFrontloadProgramming.VendPrice9[0];
    26be:	80 91 b7 08 	lds	r24, 0x08B7	; 0x8008b7 <SQACAFrontloadProgramming+0x15>
    26c2:	88 8f       	std	Y+24, r24	; 0x18
			temp[24] = SQACAFrontloadProgramming.VendPrice9[1];
    26c4:	80 91 b8 08 	lds	r24, 0x08B8	; 0x8008b8 <SQACAFrontloadProgramming+0x16>
    26c8:	89 8f       	std	Y+25, r24	; 0x19
			temp[25] = SQACAFrontloadProgramming.MediumCycle_VendPrice[0];
    26ca:	80 91 b9 08 	lds	r24, 0x08B9	; 0x8008b9 <SQACAFrontloadProgramming+0x17>
    26ce:	8a 8f       	std	Y+26, r24	; 0x1a
			temp[26] = SQACAFrontloadProgramming.MediumCycle_VendPrice[1];
    26d0:	80 91 ba 08 	lds	r24, 0x08BA	; 0x8008ba <SQACAFrontloadProgramming+0x18>
    26d4:	8b 8f       	std	Y+27, r24	; 0x1b
			temp[27] = SQACAFrontloadProgramming.HeavyCycle_VendPrice[0];
    26d6:	80 91 bb 08 	lds	r24, 0x08BB	; 0x8008bb <SQACAFrontloadProgramming+0x19>
    26da:	8c 8f       	std	Y+28, r24	; 0x1c
			temp[28] = SQACAFrontloadProgramming.HeavyCycle_VendPrice[1];
    26dc:	80 91 bc 08 	lds	r24, 0x08BC	; 0x8008bc <SQACAFrontloadProgramming+0x1a>
    26e0:	8d 8f       	std	Y+29, r24	; 0x1d
			temp[29] = SQACAFrontloadProgramming.HeavyCycle_option;
    26e2:	80 91 be 08 	lds	r24, 0x08BE	; 0x8008be <SQACAFrontloadProgramming+0x1c>
    26e6:	8e 8f       	std	Y+30, r24	; 0x1e
			temp[30] = SQACAFrontloadProgramming.MediumCycle_option;
    26e8:	80 91 bd 08 	lds	r24, 0x08BD	; 0x8008bd <SQACAFrontloadProgramming+0x1b>
    26ec:	8f 8f       	std	Y+31, r24	; 0x1f
			temp[31] = SQACAFrontloadProgramming.MediumCycle_extraWashTime;
    26ee:	80 91 bf 08 	lds	r24, 0x08BF	; 0x8008bf <SQACAFrontloadProgramming+0x1d>
    26f2:	88 a3       	std	Y+32, r24	; 0x20
			temp[32] = SQACAFrontloadProgramming.MediumCycle_extraRinseTime;
    26f4:	80 91 c0 08 	lds	r24, 0x08C0	; 0x8008c0 <SQACAFrontloadProgramming+0x1e>
    26f8:	89 a3       	std	Y+33, r24	; 0x21
			temp[33] = SQACAFrontloadProgramming.HeavyCycle_extraWashTime;
    26fa:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <SQACAFrontloadProgramming+0x1f>
    26fe:	8a a3       	std	Y+34, r24	; 0x22
			temp[34] = SQACAFrontloadProgramming.HeavyCycle_extraRinseTime;
    2700:	80 91 c2 08 	lds	r24, 0x08C2	; 0x8008c2 <SQACAFrontloadProgramming+0x20>
    2704:	8b a3       	std	Y+35, r24	; 0x23
			temp[35] = SQACAFrontloadProgramming.DefaultCycle;
    2706:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <SQACAFrontloadProgramming+0x21>
    270a:	8c a3       	std	Y+36, r24	; 0x24
			temp[36] = SQACAFrontloadProgramming.DefaultCycleModifier;
    270c:	80 91 c4 08 	lds	r24, 0x08C4	; 0x8008c4 <SQACAFrontloadProgramming+0x22>
    2710:	8d a3       	std	Y+37, r24	; 0x25
			temp[37] = SQACAFrontloadProgramming.AudioSetting;
    2712:	80 91 c5 08 	lds	r24, 0x08C5	; 0x8008c5 <SQACAFrontloadProgramming+0x23>
    2716:	6e c0       	rjmp	.+220    	; 0x27f4 <getSQReaderMachineSetup+0x316>
			break;
			case PROGRAMMING_DATA_DRYER:									//DRYER PROGRAMMING
			temp[0] = QDT_PROGRAMMING_DATA_SIZE;							//37 bytes
    2718:	85 e2       	ldi	r24, 0x25	; 37
    271a:	89 83       	std	Y+1, r24	; 0x01
			temp[1] = deviceStatus.deviceType[0];							//0x29 for Dryer Prog
    271c:	9a 83       	std	Y+2, r25	; 0x02
			temp[2] = SQACADryerProgramming.ProductByte[0];
    271e:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <SQACADryerProgramming>
    2722:	8b 83       	std	Y+3, r24	; 0x03
			temp[3] = SQACADryerProgramming.ProductByte[1];
    2724:	80 91 04 0a 	lds	r24, 0x0A04	; 0x800a04 <SQACADryerProgramming+0x1>
    2728:	8c 83       	std	Y+4, r24	; 0x04
			temp[4] = SQACADryerProgramming.ProductByte[2];
    272a:	80 91 05 0a 	lds	r24, 0x0A05	; 0x800a05 <SQACADryerProgramming+0x2>
    272e:	8d 83       	std	Y+5, r24	; 0x05
			temp[5] = SQACADryerProgramming.ProductByte[3];
    2730:	80 91 06 0a 	lds	r24, 0x0A06	; 0x800a06 <SQACADryerProgramming+0x3>
    2734:	8e 83       	std	Y+6, r24	; 0x06
			temp[6] = SQACADryerProgramming.ProductByte[4];
    2736:	80 91 07 0a 	lds	r24, 0x0A07	; 0x800a07 <SQACADryerProgramming+0x4>
    273a:	8f 83       	std	Y+7, r24	; 0x07
			temp[7] = SQACADryerProgramming.HeatVendPrice1[0];				//Heat Vend Price
    273c:	80 91 08 0a 	lds	r24, 0x0A08	; 0x800a08 <SQACADryerProgramming+0x5>
    2740:	88 87       	std	Y+8, r24	; 0x08
			temp[8] = SQACADryerProgramming.HeatVendPrice1[1];
    2742:	80 91 09 0a 	lds	r24, 0x0A09	; 0x800a09 <SQACADryerProgramming+0x6>
    2746:	89 87       	std	Y+9, r24	; 0x09
			temp[9] = SQACADryerProgramming.NoHeatVendPrice[0];				//No Heat Vend Price
    2748:	80 91 10 0a 	lds	r24, 0x0A10	; 0x800a10 <SQACADryerProgramming+0xd>
    274c:	8a 87       	std	Y+10, r24	; 0x0a
			temp[10] = SQACADryerProgramming.NoHeatVendPrice[1];
    274e:	80 91 11 0a 	lds	r24, 0x0A11	; 0x800a11 <SQACADryerProgramming+0xe>
    2752:	8b 87       	std	Y+11, r24	; 0x0b
			temp[13] = SQACADryerProgramming.PaymSTopoffOn;					//Top-Off On/Off
    2754:	80 91 12 0a 	lds	r24, 0x0A12	; 0x800a12 <SQACADryerProgramming+0xf>
    2758:	8e 87       	std	Y+14, r24	; 0x0e
			temp[11] = SQACADryerProgramming.PaymSTopoffPrice[0];			//Payment System Top-Off Vend Price
    275a:	80 91 13 0a 	lds	r24, 0x0A13	; 0x800a13 <SQACADryerProgramming+0x10>
    275e:	8c 87       	std	Y+12, r24	; 0x0c
			temp[12] = SQACADryerProgramming.PaymSTopoffPrice[1];
    2760:	80 91 14 0a 	lds	r24, 0x0A14	; 0x800a14 <SQACADryerProgramming+0x11>
    2764:	8d 87       	std	Y+13, r24	; 0x0d
			temp[14] = SQACADryerProgramming.PaymSTopoffMinutes;			//Payment System Top-Off Time
    2766:	80 91 15 0a 	lds	r24, 0x0A15	; 0x800a15 <SQACADryerProgramming+0x12>
    276a:	8f 87       	std	Y+15, r24	; 0x0f
			temp[15] = SQACADryerProgramming.PaymSTopoffSeconds;
    276c:	80 91 16 0a 	lds	r24, 0x0A16	; 0x800a16 <SQACADryerProgramming+0x13>
    2770:	88 8b       	std	Y+16, r24	; 0x10
			temp[16] = SQACADryerProgramming.Coin1TopoffMinutes;			//Coin #1 Top-off Time
    2772:	80 91 17 0a 	lds	r24, 0x0A17	; 0x800a17 <SQACADryerProgramming+0x14>
    2776:	89 8b       	std	Y+17, r24	; 0x11
			temp[17] = SQACADryerProgramming.Coin1TopoffSeconds;
    2778:	80 91 18 0a 	lds	r24, 0x0A18	; 0x800a18 <SQACADryerProgramming+0x15>
    277c:	8a 8b       	std	Y+18, r24	; 0x12
			temp[18] = SQACADryerProgramming.Coin2TopoffMinutes;			//Coin #2 Top-off Time
    277e:	80 91 19 0a 	lds	r24, 0x0A19	; 0x800a19 <SQACADryerProgramming+0x16>
    2782:	8b 8b       	std	Y+19, r24	; 0x13
			temp[19] = SQACADryerProgramming.Coin2TopoffSeconds;
    2784:	80 91 1a 0a 	lds	r24, 0x0A1A	; 0x800a1a <SQACADryerProgramming+0x17>
    2788:	8c 8b       	std	Y+20, r24	; 0x14
			temp[20] = SQACADryerProgramming.HeatCycleMinutes;				//Heat Cycle Time
    278a:	80 91 1b 0a 	lds	r24, 0x0A1B	; 0x800a1b <SQACADryerProgramming+0x18>
    278e:	8d 8b       	std	Y+21, r24	; 0x15
			temp[21] = SQACADryerProgramming.HeatCycleSeconds;
    2790:	80 91 1c 0a 	lds	r24, 0x0A1C	; 0x800a1c <SQACADryerProgramming+0x19>
    2794:	8e 8b       	std	Y+22, r24	; 0x16
			temp[22] = SQACADryerProgramming.NoHeatCycleMinutes;			//No Heat Cycle Time
    2796:	80 91 1d 0a 	lds	r24, 0x0A1D	; 0x800a1d <SQACADryerProgramming+0x1a>
    279a:	8f 8b       	std	Y+23, r24	; 0x17
			temp[23] = SQACADryerProgramming.NoHeatCycleSeconds;
    279c:	80 91 1e 0a 	lds	r24, 0x0A1E	; 0x800a1e <SQACADryerProgramming+0x1b>
    27a0:	88 8f       	std	Y+24, r24	; 0x18
			temp[24] = SQACADryerProgramming.HighCoolDownTime;				//High Temperature Cool Down Time (Minutes)
    27a2:	80 91 1f 0a 	lds	r24, 0x0A1F	; 0x800a1f <SQACADryerProgramming+0x1c>
    27a6:	89 8f       	std	Y+25, r24	; 0x19
			temp[25] = SQACADryerProgramming.MediumCoolDownTime;			//Medium Temperature Cool Down Time (Minutes)
    27a8:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <SQACADryerProgramming+0x1d>
    27ac:	8a 8f       	std	Y+26, r24	; 0x1a
			temp[26] = SQACADryerProgramming.LowCoolDownTime;				//Low Temperature Cool Down Time (Minutes)
    27ae:	80 91 21 0a 	lds	r24, 0x0A21	; 0x800a21 <SQACADryerProgramming+0x1e>
    27b2:	8b 8f       	std	Y+27, r24	; 0x1b
			temp[27] = SQACADryerProgramming.DelicateCoolDownTime;			//Delicate Temperature Cool Down Time (Minutes)
    27b4:	80 91 22 0a 	lds	r24, 0x0A22	; 0x800a22 <SQACADryerProgramming+0x1f>
    27b8:	8c 8f       	std	Y+28, r24	; 0x1c
			temp[28] = SQACADryerProgramming.HighTempSetting;				//High Temperature
    27ba:	80 91 23 0a 	lds	r24, 0x0A23	; 0x800a23 <SQACADryerProgramming+0x20>
    27be:	8d 8f       	std	Y+29, r24	; 0x1d
			temp[29] = SQACADryerProgramming.MediumTempSetting;
    27c0:	80 91 24 0a 	lds	r24, 0x0A24	; 0x800a24 <SQACADryerProgramming+0x21>
    27c4:	8e 8f       	std	Y+30, r24	; 0x1e
			temp[30] = SQACADryerProgramming.LowTempSetting;				//Low Temperature
    27c6:	80 91 25 0a 	lds	r24, 0x0A25	; 0x800a25 <SQACADryerProgramming+0x22>
    27ca:	8f 8f       	std	Y+31, r24	; 0x1f
			temp[31] = SQACADryerProgramming.DelicateTempSetting;
    27cc:	80 91 26 0a 	lds	r24, 0x0A26	; 0x800a26 <SQACADryerProgramming+0x23>
    27d0:	88 a3       	std	Y+32, r24	; 0x20
			temp[32] = SQACADryerProgramming.DefaultCycle;					//Default Cycle
    27d2:	80 91 27 0a 	lds	r24, 0x0A27	; 0x800a27 <SQACADryerProgramming+0x24>
    27d6:	89 a3       	std	Y+33, r24	; 0x21
			temp[33] = SQACADryerProgramming.AudioSetting;					//Audio
    27d8:	80 91 28 0a 	lds	r24, 0x0A28	; 0x800a28 <SQACADryerProgramming+0x25>
    27dc:	8a a3       	std	Y+34, r24	; 0x22
			temp[34] = SQACADryerProgramming.AudioEnable1;					//Anti-Wrinkle Audio Enable
    27de:	80 91 29 0a 	lds	r24, 0x0A29	; 0x800a29 <SQACADryerProgramming+0x26>
    27e2:	8b a3       	std	Y+35, r24	; 0x23
			temp[35] = SQACADryerProgramming.AudioEnable2;					//Extended Tumble Audio Enable
    27e4:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <SQACADryerProgramming+0x27>
    27e8:	8c a3       	std	Y+36, r24	; 0x24
			temp[36] = SQACADryerProgramming.DisplaySetting1;				//Fahrenheit / Celsius
    27ea:	80 91 2b 0a 	lds	r24, 0x0A2B	; 0x800a2b <SQACADryerProgramming+0x28>
    27ee:	8d a3       	std	Y+37, r24	; 0x25
			temp[37] = SQACADryerProgramming.DisplaySetting2;				//Minutes / Minutes & Seconds Display
    27f0:	80 91 2c 0a 	lds	r24, 0x0A2C	; 0x800a2c <SQACADryerProgramming+0x29>
    27f4:	8e a3       	std	Y+38, r24	; 0x26
			
			break;
		}
	return (sendSQDataPacket(temp) );
    27f6:	cf 01       	movw	r24, r30
    27f8:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <sendSQDataPacket>
}
    27fc:	ec 96       	adiw	r28, 0x3c	; 60
    27fe:	0f b6       	in	r0, 0x3f	; 63
    2800:	f8 94       	cli
    2802:	de bf       	out	0x3e, r29	; 62
    2804:	0f be       	out	0x3f, r0	; 63
    2806:	cd bf       	out	0x3d, r28	; 61
    2808:	df 91       	pop	r29
    280a:	cf 91       	pop	r28
    280c:	08 95       	ret

0000280e <initReader>:
*
*/
void initReader(void)
{

halGetEeprom(READER_STATE_ADDR, READER_STATE_FLAG_SIZE, (u8*)&ReaderStateFlag); 
    280e:	45 e3       	ldi	r20, 0x35	; 53
    2810:	59 e0       	ldi	r21, 0x09	; 9
    2812:	62 e0       	ldi	r22, 0x02	; 2
    2814:	82 e2       	ldi	r24, 0x22	; 34
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <halGetEeprom>
halGetEeprom(MACHINE_TYPE_ADDR, MACHINE_TYPE_SIZE, (u8*)&deviceStatus.deviceType);
    281c:	40 ef       	ldi	r20, 0xF0	; 240
    281e:	5a e0       	ldi	r21, 0x0A	; 10
    2820:	62 e0       	ldi	r22, 0x02	; 2
    2822:	8e e1       	ldi	r24, 0x1E	; 30
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <halGetEeprom>
	
ReaderSetup.customerId = 0;
    282a:	10 92 ba 09 	sts	0x09BA, r1	; 0x8009ba <ReaderSetup>
    282e:	10 92 bb 09 	sts	0x09BB, r1	; 0x8009bb <ReaderSetup+0x1>
    2832:	10 92 bc 09 	sts	0x09BC, r1	; 0x8009bc <ReaderSetup+0x2>
    2836:	10 92 bd 09 	sts	0x09BD, r1	; 0x8009bd <ReaderSetup+0x3>
ReaderSetup.manufacturerId = 1;
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	90 93 bf 09 	sts	0x09BF, r25	; 0x8009bf <ReaderSetup+0x5>
    2842:	80 93 be 09 	sts	0x09BE, r24	; 0x8009be <ReaderSetup+0x4>
ReaderSetup.locationId = 1;
    2846:	90 93 c1 09 	sts	0x09C1, r25	; 0x8009c1 <ReaderSetup+0x7>
    284a:	80 93 c0 09 	sts	0x09C0, r24	; 0x8009c0 <ReaderSetup+0x6>
//ReaderSetup.MaxOfflineTransaction = MAX_NUM_OFFLINE_TRANS; // to become variable once setup is done.
ReaderStateFlag.Busy = false;
    284e:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
    2852:	8f 7b       	andi	r24, 0xBF	; 191
    2854:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
//check setup status then set reader state flag
	
#if (DEVICE_CONNECTED == ACA_MACHINE)
	//Init machine variables

	if (ReaderStateFlag.ReaderSetup == READER_SETUP_DONE)
    2858:	81 fd       	sbrc	r24, 1
    285a:	47 c0       	rjmp	.+142    	; 0x28ea <initReader+0xdc>
	{
        //a valid reader ID has been detected. check for valid setup
        getSQSetupData();  
    285c:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <getSQSetupData>
		ReaderStateFlag.ValidateSetup = VALIDATE_READER_SETUP;
    2860:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
    2864:	84 60       	ori	r24, 0x04	; 4
    2866:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
		halGetEeprom(READER_SETUP_ADDR, 1, (u8*)&ReaderSetup.maxOfflineTransaction);
    286a:	42 ec       	ldi	r20, 0xC2	; 194
    286c:	59 e0       	ldi	r21, 0x09	; 9
    286e:	61 e0       	ldi	r22, 0x01	; 1
    2870:	81 e6       	ldi	r24, 0x61	; 97
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <halGetEeprom>
		if (ReaderSetup.maxOfflineTransaction)
    2878:	80 91 c2 09 	lds	r24, 0x09C2	; 0x8009c2 <ReaderSetup+0x8>
    287c:	88 23       	and	r24, r24
    287e:	c9 f0       	breq	.+50     	; 0x28b2 <initReader+0xa4>
		{
			ReaderStateFlag.EnableOfflineTransaction = true;
    2880:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
    2884:	88 60       	ori	r24, 0x08	; 8
    2886:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
			halGetEeprom(OFFLINE_TRANSACTION_RECORD_ADDR, 1, &ReaderSetup.numOfSavedTransactions);
    288a:	43 ec       	ldi	r20, 0xC3	; 195
    288c:	59 e0       	ldi	r21, 0x09	; 9
    288e:	61 e0       	ldi	r22, 0x01	; 1
    2890:	80 e0       	ldi	r24, 0x00	; 0
    2892:	91 e0       	ldi	r25, 0x01	; 1
    2894:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <halGetEeprom>
			if (ReaderSetup.numOfSavedTransactions == 0xff)
    2898:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    289c:	8f 3f       	cpi	r24, 0xFF	; 255
    289e:	49 f4       	brne	.+18     	; 0x28b2 <initReader+0xa4>
			{
				ReaderSetup.numOfSavedTransactions = 0;
    28a0:	10 92 c3 09 	sts	0x09C3, r1	; 0x8009c3 <ReaderSetup+0x9>
				halPutEeprom(OFFLINE_TRANSACTION_RECORD_ADDR, 1, &ReaderSetup.numOfSavedTransactions);
    28a4:	43 ec       	ldi	r20, 0xC3	; 195
    28a6:	59 e0       	ldi	r21, 0x09	; 9
    28a8:	61 e0       	ldi	r22, 0x01	; 1
    28aa:	80 e0       	ldi	r24, 0x00	; 0
    28ac:	91 e0       	ldi	r25, 0x01	; 1
    28ae:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <halPutEeprom>
			}
			 
		}
		//clear buffers
		memset(ReaderSetup.machineLabel,0,MACHINE_LABEL_SIZE+1);
    28b2:	8b e0       	ldi	r24, 0x0B	; 11
    28b4:	e7 ef       	ldi	r30, 0xF7	; 247
    28b6:	f9 e0       	ldi	r31, 0x09	; 9
    28b8:	df 01       	movw	r26, r30
    28ba:	1d 92       	st	X+, r1
    28bc:	8a 95       	dec	r24
    28be:	e9 f7       	brne	.-6      	; 0x28ba <initReader+0xac>
		memset(ReaderSetup.machineDescription,0,MACHINE_NAME_SIZE+1);
    28c0:	83 e3       	ldi	r24, 0x33	; 51
    28c2:	e4 ec       	ldi	r30, 0xC4	; 196
    28c4:	f9 e0       	ldi	r31, 0x09	; 9
    28c6:	df 01       	movw	r26, r30
    28c8:	1d 92       	st	X+, r1
    28ca:	8a 95       	dec	r24
    28cc:	e9 f7       	brne	.-6      	; 0x28c8 <initReader+0xba>
		halGetEeprom(MACHINE_LABEL_ADDR, MACHINE_LABEL_SIZE, (u8*)&ReaderSetup.machineLabel);
    28ce:	47 ef       	ldi	r20, 0xF7	; 247
    28d0:	59 e0       	ldi	r21, 0x09	; 9
    28d2:	6a e0       	ldi	r22, 0x0A	; 10
    28d4:	8c e6       	ldi	r24, 0x6C	; 108
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <halGetEeprom>
		halGetEeprom(MACHINE_DESCRIPTION_ADDR, MACHINE_NAME_SIZE, (u8*)&ReaderSetup.machineDescription);
    28dc:	44 ec       	ldi	r20, 0xC4	; 196
    28de:	59 e0       	ldi	r21, 0x09	; 9
    28e0:	62 e3       	ldi	r22, 0x32	; 50
    28e2:	87 e7       	ldi	r24, 0x77	; 119
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	0c 94 c2 1e 	jmp	0x3d84	; 0x3d84 <halGetEeprom>
    28ea:	08 95       	ret

000028ec <storeOfflineTransaction>:
Store transactions,that occur when server is off line, in EEPROM.
*/

#if(DEVICE_CONNECTED == ACA_MACHINE)
u8 storeOfflineTransaction(u32 cardNum)
{
    28ec:	cf 93       	push	r28
    28ee:	df 93       	push	r29
    28f0:	cd b7       	in	r28, 0x3d	; 61
    28f2:	de b7       	in	r29, 0x3e	; 62
    28f4:	67 97       	sbiw	r28, 0x17	; 23
    28f6:	0f b6       	in	r0, 0x3f	; 63
    28f8:	f8 94       	cli
    28fa:	de bf       	out	0x3e, r29	; 62
    28fc:	0f be       	out	0x3f, r0	; 63
    28fe:	cd bf       	out	0x3d, r28	; 61
	u8 addr[2];
	u16 temp;
	structTransaction OfflineTransaction;
	
	temp  = (u16)OFFLINE_TRANSACTION_ADDR_START;
	addr[1] = temp >> 8;
    2900:	21 e0       	ldi	r18, 0x01	; 1
    2902:	2f 8b       	std	Y+23, r18	; 0x17
	addr[0] = temp;
    2904:	28 e1       	ldi	r18, 0x18	; 24
    2906:	2e 8b       	std	Y+22, r18	; 0x16
	
	OfflineTransaction.CardId		= cardNum;	
    2908:	6a 87       	std	Y+10, r22	; 0x0a
    290a:	7b 87       	std	Y+11, r23	; 0x0b
    290c:	8c 87       	std	Y+12, r24	; 0x0c
    290e:	9d 87       	std	Y+13, r25	; 0x0d
	OfflineTransaction.LocationId	= ReaderSetup.locationId;	
    2910:	80 91 c0 09 	lds	r24, 0x09C0	; 0x8009c0 <ReaderSetup+0x6>
    2914:	90 91 c1 09 	lds	r25, 0x09C1	; 0x8009c1 <ReaderSetup+0x7>
    2918:	9a 83       	std	Y+2, r25	; 0x02
    291a:	89 83       	std	Y+1, r24	; 0x01
	OfflineTransaction.MachineId[0] = SQACAMachineStatus.MachineType[0];
    291c:	80 91 f4 0a 	lds	r24, 0x0AF4	; 0x800af4 <SQACAMachineStatus>
    2920:	8b 83       	std	Y+3, r24	; 0x03
	OfflineTransaction.MachineId[1] = SQACAMachineStatus.MachineType[1];
    2922:	80 91 f5 0a 	lds	r24, 0x0AF5	; 0x800af5 <SQACAMachineStatus+0x1>
    2926:	8c 83       	std	Y+4, r24	; 0x04
	OfflineTransaction.CycleType	= SQACAMachineStatus.CycleType;
    2928:	80 91 f6 0a 	lds	r24, 0x0AF6	; 0x800af6 <SQACAMachineStatus+0x2>
    292c:	8f 83       	std	Y+7, r24	; 0x07
	
	OfflineTransaction.ManufactureId = ReaderSetup.manufacturerId;
    292e:	20 91 be 09 	lds	r18, 0x09BE	; 0x8009be <ReaderSetup+0x4>
    2932:	30 91 bf 09 	lds	r19, 0x09BF	; 0x8009bf <ReaderSetup+0x5>
    2936:	3e 83       	std	Y+6, r19	; 0x06
    2938:	2d 83       	std	Y+5, r18	; 0x05
	switch( deviceStatus.deviceType[0] )
    293a:	90 91 f0 0a 	lds	r25, 0x0AF0	; 0x800af0 <deviceStatus>
    293e:	92 32       	cpi	r25, 0x22	; 34
    2940:	59 f0       	breq	.+22     	; 0x2958 <storeOfflineTransaction+0x6c>
    2942:	99 32       	cpi	r25, 0x29	; 41
    2944:	01 f1       	breq	.+64     	; 0x2986 <storeOfflineTransaction+0x9a>
    2946:	91 32       	cpi	r25, 0x21	; 33
    2948:	d9 f5       	brne	.+118    	; 0x29c0 <storeOfflineTransaction+0xd4>
	{
		case PROGRAMMING_DATA_TOPLOAD:
		
		switch( SQACAMachineStatus.CycleType )								//user selected Cycle Value 1-9
    294a:	48 2f       	mov	r20, r24
    294c:	50 e0       	ldi	r21, 0x00	; 0
    294e:	fa 01       	movw	r30, r20
    2950:	31 97       	sbiw	r30, 0x01	; 1
    2952:	e9 30       	cpi	r30, 0x09	; 9
    2954:	f1 05       	cpc	r31, r1
    2956:	38 f0       	brcs	.+14     	; 0x2966 <storeOfflineTransaction+0x7a>
			OfflineTransaction.vendPrice = (OfflineTransaction.vendPrice >> 8 ) |SQACAToploadProgramming.VendPrice1[1];
			break;
		}
		case PROGRAMMING_DATA_FRONTLOAD:
		
		switch( SQACAMachineStatus.CycleType )								//user selected Cycle Value 1-9
    2958:	48 2f       	mov	r20, r24
    295a:	50 e0       	ldi	r21, 0x00	; 0
    295c:	fa 01       	movw	r30, r20
    295e:	31 97       	sbiw	r30, 0x01	; 1
    2960:	e9 30       	cpi	r30, 0x09	; 9
    2962:	f1 05       	cpc	r31, r1
    2964:	80 f4       	brcc	.+32     	; 0x2986 <storeOfflineTransaction+0x9a>
    2966:	e6 53       	subi	r30, 0x36	; 54
    2968:	ff 4f       	sbci	r31, 0xFF	; 255
    296a:	0c 94 f6 2d 	jmp	0x5bec	; 0x5bec <__tablejump2__>
		{
			case 9:
			OfflineTransaction.vendPrice = SQACAFrontloadProgramming.VendPrice9[0];
			OfflineTransaction.vendPrice = (OfflineTransaction.vendPrice >> 8 ) |SQACAFrontloadProgramming.VendPrice9[1];
    296e:	80 91 b8 08 	lds	r24, 0x08B8	; 0x8008b8 <SQACAFrontloadProgramming+0x16>
    2972:	23 c0       	rjmp	.+70     	; 0x29ba <storeOfflineTransaction+0xce>
			break;
			case 8:
			OfflineTransaction.vendPrice = SQACAFrontloadProgramming.VendPrice8[0];
			OfflineTransaction.vendPrice = (OfflineTransaction.vendPrice >> 8 ) |SQACAFrontloadProgramming.VendPrice8[1];
    2974:	80 91 b6 08 	lds	r24, 0x08B6	; 0x8008b6 <SQACAFrontloadProgramming+0x14>
    2978:	20 c0       	rjmp	.+64     	; 0x29ba <storeOfflineTransaction+0xce>
			break;
			case 7:
			OfflineTransaction.vendPrice = SQACAFrontloadProgramming.VendPrice7[0];
			OfflineTransaction.vendPrice = (OfflineTransaction.vendPrice >> 8 ) |SQACAFrontloadProgramming.VendPrice7[1];
    297a:	80 91 b4 08 	lds	r24, 0x08B4	; 0x8008b4 <SQACAFrontloadProgramming+0x12>
    297e:	1d c0       	rjmp	.+58     	; 0x29ba <storeOfflineTransaction+0xce>
			break;
			case 6:
			OfflineTransaction.vendPrice = SQACAFrontloadProgramming.VendPrice6[0];
			OfflineTransaction.vendPrice = (OfflineTransaction.vendPrice >> 8 ) |SQACAFrontloadProgramming.VendPrice6[1];
    2980:	80 91 b2 08 	lds	r24, 0x08B2	; 0x8008b2 <SQACAFrontloadProgramming+0x10>
    2984:	1a c0       	rjmp	.+52     	; 0x29ba <storeOfflineTransaction+0xce>
			OfflineTransaction.vendPrice = (OfflineTransaction.vendPrice >> 8 ) |SQACAFrontloadProgramming.VendPrice1[1];
			break;
		}
		case PROGRAMMING_DATA_DRYER:
		
		switch( SQACAMachineStatus.CycleType )								//user selected Cycle Value 1-9
    2986:	83 30       	cpi	r24, 0x03	; 3
    2988:	81 f0       	breq	.+32     	; 0x29aa <storeOfflineTransaction+0xbe>
    298a:	28 f4       	brcc	.+10     	; 0x2996 <storeOfflineTransaction+0xaa>
    298c:	81 30       	cpi	r24, 0x01	; 1
    298e:	99 f0       	breq	.+38     	; 0x29b6 <storeOfflineTransaction+0xca>
    2990:	82 30       	cpi	r24, 0x02	; 2
    2992:	71 f0       	breq	.+28     	; 0x29b0 <storeOfflineTransaction+0xc4>
    2994:	15 c0       	rjmp	.+42     	; 0x29c0 <storeOfflineTransaction+0xd4>
    2996:	84 30       	cpi	r24, 0x04	; 4
    2998:	29 f0       	breq	.+10     	; 0x29a4 <storeOfflineTransaction+0xb8>
    299a:	85 30       	cpi	r24, 0x05	; 5
    299c:	89 f4       	brne	.+34     	; 0x29c0 <storeOfflineTransaction+0xd4>
		{
			case 5:
			OfflineTransaction.vendPrice = SQACADryerProgramming.HeatVendPrice4[0];
			OfflineTransaction.vendPrice = (OfflineTransaction.vendPrice >> 8 ) | SQACADryerProgramming.HeatVendPrice4[1];
    299e:	80 91 0f 0a 	lds	r24, 0x0A0F	; 0x800a0f <SQACADryerProgramming+0xc>
    29a2:	0b c0       	rjmp	.+22     	; 0x29ba <storeOfflineTransaction+0xce>
			break;
			case 4:
			OfflineTransaction.vendPrice = SQACADryerProgramming.HeatVendPrice1[0];
			OfflineTransaction.vendPrice = (OfflineTransaction.vendPrice >> 8 ) | SQACADryerProgramming.HeatVendPrice2[1];
    29a4:	80 91 0b 0a 	lds	r24, 0x0A0B	; 0x800a0b <SQACADryerProgramming+0x8>
    29a8:	08 c0       	rjmp	.+16     	; 0x29ba <storeOfflineTransaction+0xce>
			break;
			case 3:
			OfflineTransaction.vendPrice = SQACADryerProgramming.NoHeatVendPrice[0];
			OfflineTransaction.vendPrice = (OfflineTransaction.vendPrice >> 8 ) | SQACADryerProgramming.NoHeatVendPrice[1];
    29aa:	80 91 11 0a 	lds	r24, 0x0A11	; 0x800a11 <SQACADryerProgramming+0xe>
    29ae:	05 c0       	rjmp	.+10     	; 0x29ba <storeOfflineTransaction+0xce>
			break;
			case 2:
			OfflineTransaction.vendPrice = SQACADryerProgramming.HeatVendPrice3[0];
			OfflineTransaction.vendPrice = (OfflineTransaction.vendPrice >> 8 ) | SQACADryerProgramming.HeatVendPrice3[1];
    29b0:	80 91 0d 0a 	lds	r24, 0x0A0D	; 0x800a0d <SQACADryerProgramming+0xa>
    29b4:	02 c0       	rjmp	.+4      	; 0x29ba <storeOfflineTransaction+0xce>
			break;
			case 1:
			OfflineTransaction.vendPrice = SQACADryerProgramming.HeatVendPrice2[1];
			OfflineTransaction.vendPrice = (OfflineTransaction.vendPrice >> 8 ) |SQACAToploadProgramming.VendPrice1[1];
    29b6:	80 91 cf 08 	lds	r24, 0x08CF	; 0x8008cf <SQACAToploadProgramming+0x6>
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	99 87       	std	Y+9, r25	; 0x09
    29be:	88 87       	std	Y+8, r24	; 0x08
		}
	}
	//OfflineTransaction.vendPrice = SQACAToploadProgramming.VendPrice1[0];
	//OfflineTransaction.vendPrice = (OfflineTransaction.vendPrice >> 8 ) | SQACAToploadProgramming.VendPrice1[1];	
	
	OfflineTransaction.Date[0] = 0x00;
    29c0:	1e 86       	std	Y+14, r1	; 0x0e
	OfflineTransaction.Date[1] = 0x00;
    29c2:	1f 86       	std	Y+15, r1	; 0x0f
	OfflineTransaction.Date[2] = 0x00;
    29c4:	18 8a       	std	Y+16, r1	; 0x10
	OfflineTransaction.Date[3] = 0x00;
    29c6:	19 8a       	std	Y+17, r1	; 0x11
	
	OfflineTransaction.Time[0] = 0x00;	
    29c8:	1a 8a       	std	Y+18, r1	; 0x12
	OfflineTransaction.Time[1] = 0x00;	
    29ca:	1b 8a       	std	Y+19, r1	; 0x13
	OfflineTransaction.Time[2] = 0x00;
    29cc:	1c 8a       	std	Y+20, r1	; 0x14
	
	OfflineTransaction.isOffline = true;
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	8d 8b       	std	Y+21, r24	; 0x15
	//get number of stored records
	halGetEeprom(OFFLINE_TRANSACTION_RECORD_ADDR, 1, &ReaderSetup.numOfSavedTransactions);
    29d2:	43 ec       	ldi	r20, 0xC3	; 195
    29d4:	59 e0       	ldi	r21, 0x09	; 9
    29d6:	61 e0       	ldi	r22, 0x01	; 1
    29d8:	80 e0       	ldi	r24, 0x00	; 0
    29da:	91 e0       	ldi	r25, 0x01	; 1
    29dc:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <halGetEeprom>
	//store structure in the next EEPROM record address
	if ((ReaderSetup.numOfSavedTransactions == 0xff) || (ReaderSetup.numOfSavedTransactions < ReaderSetup.maxOfflineTransaction))
    29e0:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    29e4:	8f 3f       	cpi	r24, 0xFF	; 255
    29e6:	29 f0       	breq	.+10     	; 0x29f2 <storeOfflineTransaction+0x106>
    29e8:	90 91 c2 09 	lds	r25, 0x09C2	; 0x8009c2 <ReaderSetup+0x8>
    29ec:	89 17       	cp	r24, r25
    29ee:	08 f0       	brcs	.+2      	; 0x29f2 <storeOfflineTransaction+0x106>
    29f0:	48 c0       	rjmp	.+144    	; 0x2a82 <storeOfflineTransaction+0x196>
	{	
		if (ReaderSetup.numOfSavedTransactions == 0xff || ReaderSetup.numOfSavedTransactions == 0x00)
    29f2:	81 50       	subi	r24, 0x01	; 1
    29f4:	8e 3f       	cpi	r24, 0xFE	; 254
    29f6:	50 f0       	brcs	.+20     	; 0x2a0c <storeOfflineTransaction+0x120>
		{
			ReaderSetup.numOfSavedTransactions = 0;
    29f8:	10 92 c3 09 	sts	0x09C3, r1	; 0x8009c3 <ReaderSetup+0x9>
			//halPutEeprom(OFFLINE_TRANSACTION_RECORD_ADDR,1, &num_of_trans);
			//store first transaction records address.
			halPutEeprom(OFFLINE_TRANSACTION_RECORD_START,2,addr);
    29fc:	ae 01       	movw	r20, r28
    29fe:	4a 5e       	subi	r20, 0xEA	; 234
    2a00:	5f 4f       	sbci	r21, 0xFF	; 255
    2a02:	62 e0       	ldi	r22, 0x02	; 2
    2a04:	81 e0       	ldi	r24, 0x01	; 1
    2a06:	91 e0       	ldi	r25, 0x01	; 1
    2a08:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <halPutEeprom>
/*		else{
			//start at end of existing records
			halGetEeprom(OFFLINE_TRANSACTION_RECORD_START,2,addr);  
		}	*/		
					
		halPutEeprom((u8*)(OFFLINE_TRANSACTION_ADDR_START + (ReaderSetup.numOfSavedTransactions * OFFLINE_TRANSACTION_NUM_BYTE)), OFFLINE_TRANSACTION_NUM_BYTE, (u8*)&OfflineTransaction);
    2a0c:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    2a10:	25 e1       	ldi	r18, 0x15	; 21
    2a12:	82 9f       	mul	r24, r18
    2a14:	c0 01       	movw	r24, r0
    2a16:	11 24       	eor	r1, r1
    2a18:	ae 01       	movw	r20, r28
    2a1a:	4f 5f       	subi	r20, 0xFF	; 255
    2a1c:	5f 4f       	sbci	r21, 0xFF	; 255
    2a1e:	65 e1       	ldi	r22, 0x15	; 21
    2a20:	88 5e       	subi	r24, 0xE8	; 232
    2a22:	9e 4f       	sbci	r25, 0xFE	; 254
    2a24:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <halPutEeprom>
		ReaderSetup.numOfSavedTransactions++;
    2a28:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    2a2c:	8f 5f       	subi	r24, 0xFF	; 255
    2a2e:	80 93 c3 09 	sts	0x09C3, r24	; 0x8009c3 <ReaderSetup+0x9>
		halPutEeprom((u8*)OFFLINE_TRANSACTION_RECORD_ADDR,1,&ReaderSetup.numOfSavedTransactions);
    2a32:	43 ec       	ldi	r20, 0xC3	; 195
    2a34:	59 e0       	ldi	r21, 0x09	; 9
    2a36:	61 e0       	ldi	r22, 0x01	; 1
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	91 e0       	ldi	r25, 0x01	; 1
    2a3c:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <halPutEeprom>
		if(ReaderStateFlag.OfflineTransactionExist == false)
    2a40:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
    2a44:	85 fd       	sbrc	r24, 5
    2a46:	0a c0       	rjmp	.+20     	; 0x2a5c <storeOfflineTransaction+0x170>
		{
			ReaderStateFlag.OfflineTransactionExist = true;
    2a48:	80 62       	ori	r24, 0x20	; 32
    2a4a:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
			halPutEeprom(READER_STATE_ADDR,READER_STATE_FLAG_SIZE,(u8*)&ReaderStateFlag);	
    2a4e:	45 e3       	ldi	r20, 0x35	; 53
    2a50:	59 e0       	ldi	r21, 0x09	; 9
    2a52:	62 e0       	ldi	r22, 0x02	; 2
    2a54:	82 e2       	ldi	r24, 0x22	; 34
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <halPutEeprom>
		}
		if (ReaderSetup.numOfSavedTransactions == ReaderSetup.maxOfflineTransaction)
    2a5c:	90 91 c3 09 	lds	r25, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    2a60:	80 91 c2 09 	lds	r24, 0x09C2	; 0x8009c2 <ReaderSetup+0x8>
    2a64:	98 13       	cpse	r25, r24
    2a66:	23 c0       	rjmp	.+70     	; 0x2aae <storeOfflineTransaction+0x1c2>
		{
			ReaderStateFlag.MaxNumTransReached = true;
    2a68:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
    2a6c:	80 61       	ori	r24, 0x10	; 16
    2a6e:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
			halPutEeprom(READER_STATE_ADDR,READER_STATE_FLAG_SIZE,(u8*)&ReaderStateFlag);
    2a72:	45 e3       	ldi	r20, 0x35	; 53
    2a74:	59 e0       	ldi	r21, 0x09	; 9
    2a76:	62 e0       	ldi	r22, 0x02	; 2
    2a78:	82 e2       	ldi	r24, 0x22	; 34
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <halPutEeprom>
    2a80:	16 c0       	rjmp	.+44     	; 0x2aae <storeOfflineTransaction+0x1c2>
		}
	}
	else if(ReaderSetup.numOfSavedTransactions >= ReaderSetup.maxOfflineTransaction){
		halGetEeprom(READER_STATE_ADDR, 1, (u8*)&ReaderStateFlag);
    2a82:	45 e3       	ldi	r20, 0x35	; 53
    2a84:	59 e0       	ldi	r21, 0x09	; 9
    2a86:	61 e0       	ldi	r22, 0x01	; 1
    2a88:	82 e2       	ldi	r24, 0x22	; 34
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <halGetEeprom>
		ReaderStateFlag.EnableOfflineTransaction = false; // stop conducting off line transaction, EEPROM is full.
    2a90:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
		ReaderStateFlag.MaxNumTransReached = true;
    2a94:	87 7f       	andi	r24, 0xF7	; 247
    2a96:	80 61       	ori	r24, 0x10	; 16
    2a98:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
		halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
    2a9c:	45 e3       	ldi	r20, 0x35	; 53
    2a9e:	59 e0       	ldi	r21, 0x09	; 9
    2aa0:	61 e0       	ldi	r22, 0x01	; 1
    2aa2:	82 e2       	ldi	r24, 0x22	; 34
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <halPutEeprom>
		return_code = 0;
    2aaa:	80 e0       	ldi	r24, 0x00	; 0
    2aac:	01 c0       	rjmp	.+2      	; 0x2ab0 <storeOfflineTransaction+0x1c4>
*/

#if(DEVICE_CONNECTED == ACA_MACHINE)
u8 storeOfflineTransaction(u32 cardNum)
{
	u8 return_code = 1;
    2aae:	81 e0       	ldi	r24, 0x01	; 1
		ReaderStateFlag.MaxNumTransReached = true;
		halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
		return_code = 0;
	}
	return return_code;	
}
    2ab0:	67 96       	adiw	r28, 0x17	; 23
    2ab2:	0f b6       	in	r0, 0x3f	; 63
    2ab4:	f8 94       	cli
    2ab6:	de bf       	out	0x3e, r29	; 62
    2ab8:	0f be       	out	0x3f, r0	; 63
    2aba:	cd bf       	out	0x3d, r28	; 61
    2abc:	df 91       	pop	r29
    2abe:	cf 91       	pop	r28
    2ac0:	08 95       	ret

00002ac2 <sendStoredTransaction>:

u8 sendStoredTransaction(void)
{	
    2ac2:	cf 93       	push	r28
    2ac4:	df 93       	push	r29
    2ac6:	cd b7       	in	r28, 0x3d	; 61
    2ac8:	de b7       	in	r29, 0x3e	; 62
    2aca:	67 97       	sbiw	r28, 0x17	; 23
    2acc:	0f b6       	in	r0, 0x3f	; 63
    2ace:	f8 94       	cli
    2ad0:	de bf       	out	0x3e, r29	; 62
    2ad2:	0f be       	out	0x3f, r0	; 63
    2ad4:	cd bf       	out	0x3d, r28	; 61
	//get total number of stored off line transactions from EEPROM.
	halGetEeprom(OFFLINE_TRANSACTION_RECORD_ADDR, 1, &ReaderSetup.numOfSavedTransactions);
    2ad6:	43 ec       	ldi	r20, 0xC3	; 195
    2ad8:	59 e0       	ldi	r21, 0x09	; 9
    2ada:	61 e0       	ldi	r22, 0x01	; 1
    2adc:	80 e0       	ldi	r24, 0x00	; 0
    2ade:	91 e0       	ldi	r25, 0x01	; 1
    2ae0:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <halGetEeprom>
	
	//build buffer of transactions to be transmitted.
	if (ReaderSetup.numOfSavedTransactions > 0 && ReaderSetup.numOfSavedTransactions < 0xFF) // valid number of transactions stored, prepare to send to BOW
    2ae4:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    2ae8:	81 50       	subi	r24, 0x01	; 1
    2aea:	8e 3f       	cpi	r24, 0xFE	; 254
    2aec:	78 f5       	brcc	.+94     	; 0x2b4c <sendStoredTransaction+0x8a>
		structTransaction record;
		u16 addr;
		
		//send data to BOW

		halGetEeprom(OFFLINE_TRANSACTION_RECORD_START,2,(u8*)&addr);		
    2aee:	ae 01       	movw	r20, r28
    2af0:	4a 5e       	subi	r20, 0xEA	; 234
    2af2:	5f 4f       	sbci	r21, 0xFF	; 255
    2af4:	62 e0       	ldi	r22, 0x02	; 2
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	91 e0       	ldi	r25, 0x01	; 1
    2afa:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <halGetEeprom>
		halGetEeprom((void*)addr,OFFLINE_TRANSACTION_NUM_BYTE,(u8*)&record); // get transaction record
    2afe:	ae 01       	movw	r20, r28
    2b00:	4f 5f       	subi	r20, 0xFF	; 255
    2b02:	5f 4f       	sbci	r21, 0xFF	; 255
    2b04:	65 e1       	ldi	r22, 0x15	; 21
    2b06:	8e 89       	ldd	r24, Y+22	; 0x16
    2b08:	9f 89       	ldd	r25, Y+23	; 0x17
    2b0a:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <halGetEeprom>
			
		if( sendBOWCCTransaction(&record) )
    2b0e:	ce 01       	movw	r24, r28
    2b10:	01 96       	adiw	r24, 0x01	; 1
    2b12:	0e 94 0f 0c 	call	0x181e	; 0x181e <sendBOWCCTransaction>
    2b16:	88 23       	and	r24, r24
    2b18:	c9 f0       	breq	.+50     	; 0x2b4c <sendStoredTransaction+0x8a>
		{//update current record address
			addr = addr + OFFLINE_TRANSACTION_NUM_BYTE;
    2b1a:	8e 89       	ldd	r24, Y+22	; 0x16
    2b1c:	9f 89       	ldd	r25, Y+23	; 0x17
    2b1e:	45 96       	adiw	r24, 0x15	; 21
    2b20:	9f 8b       	std	Y+23, r25	; 0x17
    2b22:	8e 8b       	std	Y+22, r24	; 0x16
			
			ReaderSetup.numOfSavedTransactions--;
    2b24:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    2b28:	81 50       	subi	r24, 0x01	; 1
    2b2a:	80 93 c3 09 	sts	0x09C3, r24	; 0x8009c3 <ReaderSetup+0x9>
			halPutEeprom(OFFLINE_TRANSACTION_RECORD_START,2,(u8*)&addr);
    2b2e:	ae 01       	movw	r20, r28
    2b30:	4a 5e       	subi	r20, 0xEA	; 234
    2b32:	5f 4f       	sbci	r21, 0xFF	; 255
    2b34:	62 e0       	ldi	r22, 0x02	; 2
    2b36:	81 e0       	ldi	r24, 0x01	; 1
    2b38:	91 e0       	ldi	r25, 0x01	; 1
    2b3a:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <halPutEeprom>
			halPutEeprom(OFFLINE_TRANSACTION_RECORD_ADDR, 1, &ReaderSetup.numOfSavedTransactions);
    2b3e:	43 ec       	ldi	r20, 0xC3	; 195
    2b40:	59 e0       	ldi	r21, 0x09	; 9
    2b42:	61 e0       	ldi	r22, 0x01	; 1
    2b44:	80 e0       	ldi	r24, 0x00	; 0
    2b46:	91 e0       	ldi	r25, 0x01	; 1
    2b48:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <halPutEeprom>
		}
	}
	if (ReaderSetup.numOfSavedTransactions == 0)
    2b4c:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    2b50:	81 11       	cpse	r24, r1
    2b52:	0d c0       	rjmp	.+26     	; 0x2b6e <sendStoredTransaction+0xac>
	{
		ReaderStateFlag.OfflineTransactionExist = false;
    2b54:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
		ReaderStateFlag.MaxNumTransReached = false;
    2b58:	8f 7d       	andi	r24, 0xDF	; 223
    2b5a:	8f 7e       	andi	r24, 0xEF	; 239
    2b5c:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
		halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
    2b60:	45 e3       	ldi	r20, 0x35	; 53
    2b62:	59 e0       	ldi	r21, 0x09	; 9
    2b64:	61 e0       	ldi	r22, 0x01	; 1
    2b66:	82 e2       	ldi	r24, 0x22	; 34
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <halPutEeprom>
	}
	
	return ReaderSetup.numOfSavedTransactions;
}
    2b6e:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    2b72:	67 96       	adiw	r28, 0x17	; 23
    2b74:	0f b6       	in	r0, 0x3f	; 63
    2b76:	f8 94       	cli
    2b78:	de bf       	out	0x3e, r29	; 62
    2b7a:	0f be       	out	0x3f, r0	; 63
    2b7c:	cd bf       	out	0x3d, r28	; 61
    2b7e:	df 91       	pop	r29
    2b80:	cf 91       	pop	r28
    2b82:	08 95       	ret

00002b84 <SetTimeOut>:
	tmp[13]=255-addr;
	tmp[14]=tmp[12];
	tmp[15]=tmp[13];
	status=Write(addr,tmp);
	return status;
}
    2b84:	1f 93       	push	r17
    2b86:	cf 93       	push	r28
    2b88:	df 93       	push	r29
    2b8a:	1f 92       	push	r1
    2b8c:	cd b7       	in	r28, 0x3d	; 61
    2b8e:	de b7       	in	r29, 0x3e	; 62
    2b90:	64 e6       	ldi	r22, 0x64	; 100
    2b92:	70 e0       	ldi	r23, 0x00	; 0
    2b94:	0e 94 ac 2d 	call	0x5b58	; 0x5b58 <__udivmodhi4>
    2b98:	16 2f       	mov	r17, r22
    2b9a:	40 e8       	ldi	r20, 0x80	; 128
    2b9c:	61 e0       	ldi	r22, 0x01	; 1
    2b9e:	8a e2       	ldi	r24, 0x2A	; 42
    2ba0:	79 83       	std	Y+1, r23	; 0x01
    2ba2:	0e 94 b4 1a 	call	0x3568	; 0x3568 <RcModifyReg>
    2ba6:	66 ea       	ldi	r22, 0xA6	; 166
    2ba8:	8b e2       	ldi	r24, 0x2B	; 43
    2baa:	0e 94 96 1a 	call	0x352c	; 0x352c <RcSetReg>
    2bae:	8a e2       	ldi	r24, 0x2A	; 42
    2bb0:	0e 94 aa 1a 	call	0x3554	; 0x3554 <RcGetReg>
    2bb4:	80 7f       	andi	r24, 0xF0	; 240
    2bb6:	68 2f       	mov	r22, r24
    2bb8:	62 60       	ori	r22, 0x02	; 2
    2bba:	8a e2       	ldi	r24, 0x2A	; 42
    2bbc:	0e 94 96 1a 	call	0x352c	; 0x352c <RcSetReg>
    2bc0:	61 2f       	mov	r22, r17
    2bc2:	8d e2       	ldi	r24, 0x2D	; 45
    2bc4:	0e 94 96 1a 	call	0x352c	; 0x352c <RcSetReg>
    2bc8:	79 81       	ldd	r23, Y+1	; 0x01
    2bca:	67 2f       	mov	r22, r23
    2bcc:	8c e2       	ldi	r24, 0x2C	; 44
    2bce:	0e 94 96 1a 	call	0x352c	; 0x352c <RcSetReg>
    2bd2:	80 e0       	ldi	r24, 0x00	; 0
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	0f 90       	pop	r0
    2bd8:	df 91       	pop	r29
    2bda:	cf 91       	pop	r28
    2bdc:	1f 91       	pop	r17
    2bde:	08 95       	ret

00002be0 <Rc522Init>:
    2be0:	6f e0       	ldi	r22, 0x0F	; 15
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	0e 94 96 1a 	call	0x352c	; 0x352c <RcSetReg>
    2be8:	60 e4       	ldi	r22, 0x40	; 64
    2bea:	85 e1       	ldi	r24, 0x15	; 21
    2bec:	0e 94 96 1a 	call	0x352c	; 0x352c <RcSetReg>
    2bf0:	48 e0       	ldi	r20, 0x08	; 8
    2bf2:	60 e0       	ldi	r22, 0x00	; 0
    2bf4:	88 e0       	ldi	r24, 0x08	; 8
    2bf6:	0e 94 b4 1a 	call	0x3568	; 0x3568 <RcModifyReg>
    2bfa:	82 e1       	ldi	r24, 0x12	; 18
    2bfc:	0e 94 aa 1a 	call	0x3554	; 0x3554 <RcGetReg>
    2c00:	88 70       	andi	r24, 0x08	; 8
    2c02:	68 2f       	mov	r22, r24
    2c04:	60 68       	ori	r22, 0x80	; 128
    2c06:	82 e1       	ldi	r24, 0x12	; 18
    2c08:	0e 94 96 1a 	call	0x352c	; 0x352c <RcSetReg>
    2c0c:	83 e1       	ldi	r24, 0x13	; 19
    2c0e:	0e 94 aa 1a 	call	0x3554	; 0x3554 <RcGetReg>
    2c12:	88 70       	andi	r24, 0x08	; 8
    2c14:	68 2f       	mov	r22, r24
    2c16:	60 68       	ori	r22, 0x80	; 128
    2c18:	83 e1       	ldi	r24, 0x13	; 19
    2c1a:	0e 94 96 1a 	call	0x352c	; 0x352c <RcSetReg>
    2c1e:	6d e6       	ldi	r22, 0x6D	; 109
    2c20:	89 e1       	ldi	r24, 0x19	; 25
    2c22:	0e 94 96 1a 	call	0x352c	; 0x352c <RcSetReg>
    2c26:	68 e4       	ldi	r22, 0x48	; 72
    2c28:	86 e2       	ldi	r24, 0x26	; 38
    2c2a:	0e 94 96 1a 	call	0x352c	; 0x352c <RcSetReg>
    2c2e:	65 e5       	ldi	r22, 0x55	; 85
    2c30:	88 e1       	ldi	r24, 0x18	; 24
    2c32:	0e 94 96 1a 	call	0x352c	; 0x352c <RcSetReg>
    2c36:	66 e2       	ldi	r22, 0x26	; 38
    2c38:	84 e2       	ldi	r24, 0x24	; 36
    2c3a:	0e 94 96 1a 	call	0x352c	; 0x352c <RcSetReg>
    2c3e:	64 ef       	ldi	r22, 0xF4	; 244
    2c40:	87 e2       	ldi	r24, 0x27	; 39
    2c42:	0e 94 96 1a 	call	0x352c	; 0x352c <RcSetReg>
    2c46:	88 e8       	ldi	r24, 0x88	; 136
    2c48:	93 e1       	ldi	r25, 0x13	; 19
    2c4a:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <SetTimeOut>
    2c4e:	43 e0       	ldi	r20, 0x03	; 3
    2c50:	61 e0       	ldi	r22, 0x01	; 1
    2c52:	84 e1       	ldi	r24, 0x14	; 20
    2c54:	0e 94 b4 1a 	call	0x3568	; 0x3568 <RcModifyReg>
    2c58:	40 e4       	ldi	r20, 0x40	; 64
    2c5a:	61 e0       	ldi	r22, 0x01	; 1
    2c5c:	8c e0       	ldi	r24, 0x0C	; 12
    2c5e:	0e 94 b4 1a 	call	0x3568	; 0x3568 <RcModifyReg>
    2c62:	84 e0       	ldi	r24, 0x04	; 4
    2c64:	0e 94 aa 1a 	call	0x3554	; 0x3554 <RcGetReg>
    2c68:	80 ff       	sbrs	r24, 0
    2c6a:	fb cf       	rjmp	.-10     	; 0x2c62 <Rc522Init+0x82>
    2c6c:	61 e0       	ldi	r22, 0x01	; 1
    2c6e:	84 e0       	ldi	r24, 0x04	; 4
    2c70:	0e 94 96 1a 	call	0x352c	; 0x352c <RcSetReg>
    2c74:	88 e8       	ldi	r24, 0x88	; 136
    2c76:	93 e1       	ldi	r25, 0x13	; 19
    2c78:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <SetTimeOut>
    2c7c:	6a e1       	ldi	r22, 0x1A	; 26
    2c7e:	8b e0       	ldi	r24, 0x0B	; 11
    2c80:	0e 94 96 1a 	call	0x352c	; 0x352c <RcSetReg>
    2c84:	60 e1       	ldi	r22, 0x10	; 16
    2c86:	86 e1       	ldi	r24, 0x16	; 22
    2c88:	0e 94 96 1a 	call	0x352c	; 0x352c <RcSetReg>
    2c8c:	64 e8       	ldi	r22, 0x84	; 132
    2c8e:	87 e1       	ldi	r24, 0x17	; 23
    2c90:	0e 94 96 1a 	call	0x352c	; 0x352c <RcSetReg>
    2c94:	60 e0       	ldi	r22, 0x00	; 0
    2c96:	81 e0       	ldi	r24, 0x01	; 1
    2c98:	0e 94 96 1a 	call	0x352c	; 0x352c <RcSetReg>
    2c9c:	80 ed       	ldi	r24, 0xD0	; 208
    2c9e:	97 e0       	ldi	r25, 0x07	; 7
    2ca0:	0c 94 c2 15 	jmp	0x2b84	; 0x2b84 <SetTimeOut>

00002ca4 <M522PcdCmd>:
    2ca4:	9f 92       	push	r9
    2ca6:	af 92       	push	r10
    2ca8:	bf 92       	push	r11
    2caa:	cf 92       	push	r12
    2cac:	df 92       	push	r13
    2cae:	ef 92       	push	r14
    2cb0:	ff 92       	push	r15
    2cb2:	0f 93       	push	r16
    2cb4:	1f 93       	push	r17
    2cb6:	cf 93       	push	r28
    2cb8:	df 93       	push	r29
    2cba:	18 2f       	mov	r17, r24
    2cbc:	7b 01       	movw	r14, r22
    2cbe:	ea 01       	movw	r28, r20
    2cc0:	62 e4       	ldi	r22, 0x42	; 66
    2cc2:	84 e0       	ldi	r24, 0x04	; 4
    2cc4:	0e 94 96 1a 	call	0x352c	; 0x352c <RcSetReg>
    2cc8:	60 e0       	ldi	r22, 0x00	; 0
    2cca:	85 e0       	ldi	r24, 0x05	; 5
    2ccc:	0e 94 96 1a 	call	0x352c	; 0x352c <RcSetReg>
    2cd0:	60 e8       	ldi	r22, 0x80	; 128
    2cd2:	8a e0       	ldi	r24, 0x0A	; 10
    2cd4:	0e 94 96 1a 	call	0x352c	; 0x352c <RcSetReg>
    2cd8:	81 e0       	ldi	r24, 0x01	; 1
    2cda:	0e 94 aa 1a 	call	0x3554	; 0x3554 <RcGetReg>
    2cde:	68 2f       	mov	r22, r24
    2ce0:	60 7f       	andi	r22, 0xF0	; 240
    2ce2:	1c 30       	cpi	r17, 0x0C	; 12
    2ce4:	09 f4       	brne	.+2      	; 0x2ce8 <M522PcdCmd+0x44>
    2ce6:	6c 60       	ori	r22, 0x0C	; 12
    2ce8:	81 e0       	ldi	r24, 0x01	; 1
    2cea:	0e 94 96 1a 	call	0x352c	; 0x352c <RcSetReg>
    2cee:	d0 93 32 05 	sts	0x0532, r29	; 0x800532 <MpIsrInfo+0x1>
    2cf2:	c0 93 31 05 	sts	0x0531, r28	; 0x800531 <MpIsrInfo>
    2cf6:	10 31       	cpi	r17, 0x10	; 16
    2cf8:	08 f0       	brcs	.+2      	; 0x2cfc <M522PcdCmd+0x58>
    2cfa:	63 c0       	rjmp	.+198    	; 0x2dc2 <M522PcdCmd+0x11e>
    2cfc:	81 2f       	mov	r24, r17
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	fc 01       	movw	r30, r24
    2d02:	ee 0f       	add	r30, r30
    2d04:	ff 1f       	adc	r31, r31
    2d06:	e6 5f       	subi	r30, 0xF6	; 246
    2d08:	fa 4f       	sbci	r31, 0xFA	; 250
    2d0a:	c0 81       	ld	r28, Z
    2d0c:	d1 81       	ldd	r29, Z+1	; 0x01
    2d0e:	fc 01       	movw	r30, r24
    2d10:	e6 50       	subi	r30, 0x06	; 6
    2d12:	fb 4f       	sbci	r31, 0xFB	; 251
    2d14:	c0 80       	ld	r12, Z
    2d16:	fc 01       	movw	r30, r24
    2d18:	e6 51       	subi	r30, 0x16	; 22
    2d1a:	fb 4f       	sbci	r31, 0xFB	; 251
    2d1c:	00 81       	ld	r16, Z
    2d1e:	fc 01       	movw	r30, r24
    2d20:	e6 52       	subi	r30, 0x26	; 38
    2d22:	fb 4f       	sbci	r31, 0xFB	; 251
    2d24:	90 80       	ld	r9, Z
    2d26:	20 97       	sbiw	r28, 0x00	; 0
    2d28:	09 f0       	breq	.+2      	; 0x2d2c <M522PcdCmd+0x88>
    2d2a:	50 c0       	rjmp	.+160    	; 0x2dcc <M522PcdCmd+0x128>
    2d2c:	82 e0       	ldi	r24, 0x02	; 2
    2d2e:	0e 94 aa 1a 	call	0x3554	; 0x3554 <RcGetReg>
    2d32:	68 2f       	mov	r22, r24
    2d34:	6c 29       	or	r22, r12
    2d36:	82 e0       	ldi	r24, 0x02	; 2
    2d38:	0e 94 96 1a 	call	0x352c	; 0x352c <RcSetReg>
    2d3c:	83 e0       	ldi	r24, 0x03	; 3
    2d3e:	0e 94 aa 1a 	call	0x3554	; 0x3554 <RcGetReg>
    2d42:	68 2f       	mov	r22, r24
    2d44:	83 e0       	ldi	r24, 0x03	; 3
    2d46:	0e 94 96 1a 	call	0x352c	; 0x352c <RcSetReg>
    2d4a:	d1 2c       	mov	r13, r1
    2d4c:	e0 91 31 05 	lds	r30, 0x0531	; 0x800531 <MpIsrInfo>
    2d50:	f0 91 32 05 	lds	r31, 0x0532	; 0x800532 <MpIsrInfo+0x1>
    2d54:	83 81       	ldd	r24, Z+3	; 0x03
    2d56:	d8 16       	cp	r13, r24
    2d58:	48 f4       	brcc	.+18     	; 0x2d6c <M522PcdCmd+0xc8>
    2d5a:	f7 01       	movw	r30, r14
    2d5c:	ed 0d       	add	r30, r13
    2d5e:	f1 1d       	adc	r31, r1
    2d60:	60 81       	ld	r22, Z
    2d62:	89 e0       	ldi	r24, 0x09	; 9
    2d64:	0e 94 96 1a 	call	0x352c	; 0x352c <RcSetReg>
    2d68:	d3 94       	inc	r13
    2d6a:	f0 cf       	rjmp	.-32     	; 0x2d4c <M522PcdCmd+0xa8>
    2d6c:	1c 30       	cpi	r17, 0x0C	; 12
    2d6e:	31 f4       	brne	.+12     	; 0x2d7c <M522PcdCmd+0xd8>
    2d70:	40 e8       	ldi	r20, 0x80	; 128
    2d72:	61 e0       	ldi	r22, 0x01	; 1
    2d74:	8d e0       	ldi	r24, 0x0D	; 13
    2d76:	0e 94 b4 1a 	call	0x3568	; 0x3568 <RcModifyReg>
    2d7a:	09 c0       	rjmp	.+18     	; 0x2d8e <M522PcdCmd+0xea>
    2d7c:	81 e0       	ldi	r24, 0x01	; 1
    2d7e:	0e 94 aa 1a 	call	0x3554	; 0x3554 <RcGetReg>
    2d82:	80 7f       	andi	r24, 0xF0	; 240
    2d84:	68 2f       	mov	r22, r24
    2d86:	61 2b       	or	r22, r17
    2d88:	81 e0       	ldi	r24, 0x01	; 1
    2d8a:	0e 94 96 1a 	call	0x352c	; 0x352c <RcSetReg>
    2d8e:	aa 24       	eor	r10, r10
    2d90:	a3 94       	inc	r10
    2d92:	ba 2c       	mov	r11, r10
    2d94:	10 e0       	ldi	r17, 0x00	; 0
    2d96:	00 23       	and	r16, r16
    2d98:	71 f0       	breq	.+28     	; 0x2db6 <M522PcdCmd+0x112>
    2d9a:	81 2f       	mov	r24, r17
    2d9c:	80 23       	and	r24, r16
    2d9e:	59 f4       	brne	.+22     	; 0x2db6 <M522PcdCmd+0x112>
    2da0:	84 e0       	ldi	r24, 0x04	; 4
    2da2:	0e 94 aa 1a 	call	0x3554	; 0x3554 <RcGetReg>
    2da6:	18 2f       	mov	r17, r24
    2da8:	85 e0       	ldi	r24, 0x05	; 5
    2daa:	0e 94 aa 1a 	call	0x3554	; 0x3554 <RcGetReg>
    2dae:	81 e0       	ldi	r24, 0x01	; 1
    2db0:	a8 1a       	sub	r10, r24
    2db2:	b1 08       	sbc	r11, r1
    2db4:	81 f7       	brne	.-32     	; 0x2d96 <M522PcdCmd+0xf2>
    2db6:	01 23       	and	r16, r17
    2db8:	11 70       	andi	r17, 0x01	; 1
    2dba:	c1 2f       	mov	r28, r17
    2dbc:	e0 e0       	ldi	r30, 0x00	; 0
    2dbe:	de 2f       	mov	r29, r30
    2dc0:	05 c0       	rjmp	.+10     	; 0x2dcc <M522PcdCmd+0x128>
    2dc2:	91 2c       	mov	r9, r1
    2dc4:	c1 2c       	mov	r12, r1
    2dc6:	02 e4       	ldi	r16, 0x42	; 66
    2dc8:	c3 e0       	ldi	r28, 0x03	; 3
    2dca:	d1 e0       	ldi	r29, 0x01	; 1
    2dcc:	4c 2d       	mov	r20, r12
    2dce:	60 e0       	ldi	r22, 0x00	; 0
    2dd0:	82 e0       	ldi	r24, 0x02	; 2
    2dd2:	0e 94 b4 1a 	call	0x3568	; 0x3568 <RcModifyReg>
    2dd6:	40 e0       	ldi	r20, 0x00	; 0
    2dd8:	60 e0       	ldi	r22, 0x00	; 0
    2dda:	83 e0       	ldi	r24, 0x03	; 3
    2ddc:	0e 94 b4 1a 	call	0x3568	; 0x3568 <RcModifyReg>
    2de0:	99 20       	and	r9, r9
    2de2:	09 f4       	brne	.+2      	; 0x2de6 <M522PcdCmd+0x142>
    2de4:	7e c0       	rjmp	.+252    	; 0x2ee2 <M522PcdCmd+0x23e>
    2de6:	20 97       	sbiw	r28, 0x00	; 0
    2de8:	09 f0       	breq	.+2      	; 0x2dec <M522PcdCmd+0x148>
    2dea:	7b c0       	rjmp	.+246    	; 0x2ee2 <M522PcdCmd+0x23e>
    2dec:	c0 90 31 05 	lds	r12, 0x0531	; 0x800531 <MpIsrInfo>
    2df0:	d0 90 32 05 	lds	r13, 0x0532	; 0x800532 <MpIsrInfo+0x1>
    2df4:	8a e0       	ldi	r24, 0x0A	; 10
    2df6:	0e 94 aa 1a 	call	0x3554	; 0x3554 <RcGetReg>
    2dfa:	f6 01       	movw	r30, r12
    2dfc:	84 83       	std	Z+4, r24	; 0x04
    2dfe:	8c e0       	ldi	r24, 0x0C	; 12
    2e00:	0e 94 aa 1a 	call	0x3554	; 0x3554 <RcGetReg>
    2e04:	e0 91 31 05 	lds	r30, 0x0531	; 0x800531 <MpIsrInfo>
    2e08:	f0 91 32 05 	lds	r31, 0x0532	; 0x800532 <MpIsrInfo+0x1>
    2e0c:	87 70       	andi	r24, 0x07	; 7
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	96 83       	std	Z+6, r25	; 0x06
    2e12:	85 83       	std	Z+5, r24	; 0x05
    2e14:	86 e0       	ldi	r24, 0x06	; 6
    2e16:	0e 94 aa 1a 	call	0x3554	; 0x3554 <RcGetReg>
    2e1a:	18 2f       	mov	r17, r24
    2e1c:	88 23       	and	r24, r24
    2e1e:	09 f4       	brne	.+2      	; 0x2e22 <M522PcdCmd+0x17e>
    2e20:	46 c0       	rjmp	.+140    	; 0x2eae <M522PcdCmd+0x20a>
    2e22:	83 fd       	sbrc	r24, 3
    2e24:	05 c0       	rjmp	.+10     	; 0x2e30 <M522PcdCmd+0x18c>
    2e26:	81 ff       	sbrs	r24, 1
    2e28:	05 c0       	rjmp	.+10     	; 0x2e34 <M522PcdCmd+0x190>
    2e2a:	c3 e0       	ldi	r28, 0x03	; 3
    2e2c:	d0 e0       	ldi	r29, 0x00	; 0
    2e2e:	02 c0       	rjmp	.+4      	; 0x2e34 <M522PcdCmd+0x190>
    2e30:	c6 e0       	ldi	r28, 0x06	; 6
    2e32:	d0 e0       	ldi	r29, 0x00	; 0
    2e34:	10 fd       	sbrc	r17, 0
    2e36:	22 c0       	rjmp	.+68     	; 0x2e7c <M522PcdCmd+0x1d8>
    2e38:	14 fd       	sbrc	r17, 4
    2e3a:	23 c0       	rjmp	.+70     	; 0x2e82 <M522PcdCmd+0x1de>
    2e3c:	12 ff       	sbrs	r17, 2
    2e3e:	19 c0       	rjmp	.+50     	; 0x2e72 <M522PcdCmd+0x1ce>
    2e40:	e0 91 31 05 	lds	r30, 0x0531	; 0x800531 <MpIsrInfo>
    2e44:	f0 91 32 05 	lds	r31, 0x0532	; 0x800532 <MpIsrInfo+0x1>
    2e48:	c4 81       	ldd	r28, Z+4	; 0x04
    2e4a:	c1 30       	cpi	r28, 0x01	; 1
    2e4c:	e9 f4       	brne	.+58     	; 0x2e88 <M522PcdCmd+0x1e4>
    2e4e:	85 81       	ldd	r24, Z+5	; 0x05
    2e50:	96 81       	ldd	r25, Z+6	; 0x06
    2e52:	8b 7f       	andi	r24, 0xFB	; 251
    2e54:	89 2b       	or	r24, r25
    2e56:	c1 f4       	brne	.+48     	; 0x2e88 <M522PcdCmd+0x1e4>
    2e58:	89 e0       	ldi	r24, 0x09	; 9
    2e5a:	0e 94 aa 1a 	call	0x3554	; 0x3554 <RcGetReg>
    2e5e:	f7 01       	movw	r30, r14
    2e60:	80 83       	st	Z, r24
    2e62:	e0 91 31 05 	lds	r30, 0x0531	; 0x800531 <MpIsrInfo>
    2e66:	f0 91 32 05 	lds	r31, 0x0532	; 0x800532 <MpIsrInfo+0x1>
    2e6a:	c4 83       	std	Z+4, r28	; 0x04
    2e6c:	c2 e0       	ldi	r28, 0x02	; 2
    2e6e:	d2 e0       	ldi	r29, 0x02	; 2
    2e70:	0d c0       	rjmp	.+26     	; 0x2e8c <M522PcdCmd+0x1e8>
    2e72:	16 ff       	sbrs	r17, 6
    2e74:	0b c0       	rjmp	.+22     	; 0x2e8c <M522PcdCmd+0x1e8>
    2e76:	c4 e0       	ldi	r28, 0x04	; 4
    2e78:	de e7       	ldi	r29, 0x7E	; 126
    2e7a:	08 c0       	rjmp	.+16     	; 0x2e8c <M522PcdCmd+0x1e8>
    2e7c:	cb e0       	ldi	r28, 0x0B	; 11
    2e7e:	d0 e0       	ldi	r29, 0x00	; 0
    2e80:	05 c0       	rjmp	.+10     	; 0x2e8c <M522PcdCmd+0x1e8>
    2e82:	c9 e0       	ldi	r28, 0x09	; 9
    2e84:	d0 e0       	ldi	r29, 0x00	; 0
    2e86:	02 c0       	rjmp	.+4      	; 0x2e8c <M522PcdCmd+0x1e8>
    2e88:	c2 e0       	ldi	r28, 0x02	; 2
    2e8a:	d0 e0       	ldi	r29, 0x00	; 0
    2e8c:	17 fd       	sbrc	r17, 7
    2e8e:	05 c0       	rjmp	.+10     	; 0x2e9a <M522PcdCmd+0x1f6>
    2e90:	20 97       	sbiw	r28, 0x00	; 0
    2e92:	29 f4       	brne	.+10     	; 0x2e9e <M522PcdCmd+0x1fa>
    2e94:	cc e0       	ldi	r28, 0x0C	; 12
    2e96:	d0 e0       	ldi	r29, 0x00	; 0
    2e98:	02 c0       	rjmp	.+4      	; 0x2e9e <M522PcdCmd+0x1fa>
    2e9a:	cd e0       	ldi	r28, 0x0D	; 13
    2e9c:	d0 e0       	ldi	r29, 0x00	; 0
    2e9e:	60 e0       	ldi	r22, 0x00	; 0
    2ea0:	86 e0       	ldi	r24, 0x06	; 6
    2ea2:	0e 94 96 1a 	call	0x352c	; 0x352c <RcSetReg>
    2ea6:	c2 30       	cpi	r28, 0x02	; 2
    2ea8:	f2 e0       	ldi	r31, 0x02	; 2
    2eaa:	df 07       	cpc	r29, r31
    2eac:	d1 f0       	breq	.+52     	; 0x2ee2 <M522PcdCmd+0x23e>
    2eae:	10 e0       	ldi	r17, 0x00	; 0
    2eb0:	e0 91 31 05 	lds	r30, 0x0531	; 0x800531 <MpIsrInfo>
    2eb4:	f0 91 32 05 	lds	r31, 0x0532	; 0x800532 <MpIsrInfo+0x1>
    2eb8:	84 81       	ldd	r24, Z+4	; 0x04
    2eba:	18 17       	cp	r17, r24
    2ebc:	50 f4       	brcc	.+20     	; 0x2ed2 <M522PcdCmd+0x22e>
    2ebe:	67 01       	movw	r12, r14
    2ec0:	c1 0e       	add	r12, r17
    2ec2:	d1 1c       	adc	r13, r1
    2ec4:	89 e0       	ldi	r24, 0x09	; 9
    2ec6:	0e 94 aa 1a 	call	0x3554	; 0x3554 <RcGetReg>
    2eca:	f6 01       	movw	r30, r12
    2ecc:	80 83       	st	Z, r24
    2ece:	1f 5f       	subi	r17, 0xFF	; 255
    2ed0:	ef cf       	rjmp	.-34     	; 0x2eb0 <M522PcdCmd+0x20c>
    2ed2:	25 81       	ldd	r18, Z+5	; 0x05
    2ed4:	36 81       	ldd	r19, Z+6	; 0x06
    2ed6:	23 2b       	or	r18, r19
    2ed8:	21 f0       	breq	.+8      	; 0x2ee2 <M522PcdCmd+0x23e>
    2eda:	88 23       	and	r24, r24
    2edc:	11 f0       	breq	.+4      	; 0x2ee2 <M522PcdCmd+0x23e>
    2ede:	81 50       	subi	r24, 0x01	; 1
    2ee0:	84 83       	std	Z+4, r24	; 0x04
    2ee2:	60 2f       	mov	r22, r16
    2ee4:	84 e0       	ldi	r24, 0x04	; 4
    2ee6:	0e 94 96 1a 	call	0x352c	; 0x352c <RcSetReg>
    2eea:	60 e0       	ldi	r22, 0x00	; 0
    2eec:	85 e0       	ldi	r24, 0x05	; 5
    2eee:	0e 94 96 1a 	call	0x352c	; 0x352c <RcSetReg>
    2ef2:	60 e8       	ldi	r22, 0x80	; 128
    2ef4:	8a e0       	ldi	r24, 0x0A	; 10
    2ef6:	0e 94 96 1a 	call	0x352c	; 0x352c <RcSetReg>
    2efa:	61 e0       	ldi	r22, 0x01	; 1
    2efc:	84 e0       	ldi	r24, 0x04	; 4
    2efe:	0e 94 96 1a 	call	0x352c	; 0x352c <RcSetReg>
    2f02:	60 e0       	ldi	r22, 0x00	; 0
    2f04:	8d e0       	ldi	r24, 0x0D	; 13
    2f06:	0e 94 96 1a 	call	0x352c	; 0x352c <RcSetReg>
    2f0a:	ce 01       	movw	r24, r28
    2f0c:	df 91       	pop	r29
    2f0e:	cf 91       	pop	r28
    2f10:	1f 91       	pop	r17
    2f12:	0f 91       	pop	r16
    2f14:	ff 90       	pop	r15
    2f16:	ef 90       	pop	r14
    2f18:	df 90       	pop	r13
    2f1a:	cf 90       	pop	r12
    2f1c:	bf 90       	pop	r11
    2f1e:	af 90       	pop	r10
    2f20:	9f 90       	pop	r9
    2f22:	08 95       	ret

00002f24 <Request>:
    2f24:	1f 93       	push	r17
    2f26:	cf 93       	push	r28
    2f28:	df 93       	push	r29
    2f2a:	18 2f       	mov	r17, r24
    2f2c:	eb 01       	movw	r28, r22
    2f2e:	48 e0       	ldi	r20, 0x08	; 8
    2f30:	60 e0       	ldi	r22, 0x00	; 0
    2f32:	88 e0       	ldi	r24, 0x08	; 8
    2f34:	0e 94 b4 1a 	call	0x3568	; 0x3568 <RcModifyReg>
    2f38:	60 e8       	ldi	r22, 0x80	; 128
    2f3a:	8e e0       	ldi	r24, 0x0E	; 14
    2f3c:	0e 94 96 1a 	call	0x352c	; 0x352c <RcSetReg>
    2f40:	40 e8       	ldi	r20, 0x80	; 128
    2f42:	60 e0       	ldi	r22, 0x00	; 0
    2f44:	82 e1       	ldi	r24, 0x12	; 18
    2f46:	0e 94 b4 1a 	call	0x3568	; 0x3568 <RcModifyReg>
    2f4a:	40 e8       	ldi	r20, 0x80	; 128
    2f4c:	60 e0       	ldi	r22, 0x00	; 0
    2f4e:	83 e1       	ldi	r24, 0x13	; 19
    2f50:	0e 94 b4 1a 	call	0x3568	; 0x3568 <RcModifyReg>
    2f54:	67 e0       	ldi	r22, 0x07	; 7
    2f56:	8d e0       	ldi	r24, 0x0D	; 13
    2f58:	0e 94 96 1a 	call	0x352c	; 0x352c <RcSetReg>
    2f5c:	10 92 24 0b 	sts	0x0B24, r1	; 0x800b24 <MInfo>
    2f60:	10 92 25 0b 	sts	0x0B25, r1	; 0x800b25 <MInfo+0x1>
    2f64:	10 92 26 0b 	sts	0x0B26, r1	; 0x800b26 <MInfo+0x2>
    2f68:	10 92 28 0b 	sts	0x0B28, r1	; 0x800b28 <MInfo+0x4>
    2f6c:	10 92 2a 0b 	sts	0x0B2A, r1	; 0x800b2a <MInfo+0x6>
    2f70:	10 92 29 0b 	sts	0x0B29, r1	; 0x800b29 <MInfo+0x5>
    2f74:	10 92 2b 0b 	sts	0x0B2B, r1	; 0x800b2b <MInfo+0x7>
    2f78:	10 93 10 0b 	sts	0x0B10, r17	; 0x800b10 <SerBuffer>
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	80 93 27 0b 	sts	0x0B27, r24	; 0x800b27 <MInfo+0x3>
    2f82:	80 e9       	ldi	r24, 0x90	; 144
    2f84:	91 e0       	ldi	r25, 0x01	; 1
    2f86:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <SetTimeOut>
    2f8a:	44 e2       	ldi	r20, 0x24	; 36
    2f8c:	5b e0       	ldi	r21, 0x0B	; 11
    2f8e:	60 e1       	ldi	r22, 0x10	; 16
    2f90:	7b e0       	ldi	r23, 0x0B	; 11
    2f92:	8c e0       	ldi	r24, 0x0C	; 12
    2f94:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <M522PcdCmd>
    2f98:	88 23       	and	r24, r24
    2f9a:	11 f0       	breq	.+4      	; 0x2fa0 <Request+0x7c>
    2f9c:	86 30       	cpi	r24, 0x06	; 6
    2f9e:	89 f4       	brne	.+34     	; 0x2fc2 <Request+0x9e>
    2fa0:	90 91 28 0b 	lds	r25, 0x0B28	; 0x800b28 <MInfo+0x4>
    2fa4:	92 30       	cpi	r25, 0x02	; 2
    2fa6:	81 f4       	brne	.+32     	; 0x2fc8 <Request+0xa4>
    2fa8:	20 91 29 0b 	lds	r18, 0x0B29	; 0x800b29 <MInfo+0x5>
    2fac:	30 91 2a 0b 	lds	r19, 0x0B2A	; 0x800b2a <MInfo+0x6>
    2fb0:	23 2b       	or	r18, r19
    2fb2:	51 f4       	brne	.+20     	; 0x2fc8 <Request+0xa4>
    2fb4:	20 91 10 0b 	lds	r18, 0x0B10	; 0x800b10 <SerBuffer>
    2fb8:	30 91 11 0b 	lds	r19, 0x0B11	; 0x800b11 <SerBuffer+0x1>
    2fbc:	39 83       	std	Y+1, r19	; 0x01
    2fbe:	28 83       	st	Y, r18
    2fc0:	04 c0       	rjmp	.+8      	; 0x2fca <Request+0xa6>
    2fc2:	18 82       	st	Y, r1
    2fc4:	19 82       	std	Y+1, r1	; 0x01
    2fc6:	01 c0       	rjmp	.+2      	; 0x2fca <Request+0xa6>
    2fc8:	8b e0       	ldi	r24, 0x0B	; 11
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	df 91       	pop	r29
    2fce:	cf 91       	pop	r28
    2fd0:	1f 91       	pop	r17
    2fd2:	08 95       	ret

00002fd4 <CascAnticoll>:
    2fd4:	6f 92       	push	r6
    2fd6:	7f 92       	push	r7
    2fd8:	9f 92       	push	r9
    2fda:	af 92       	push	r10
    2fdc:	bf 92       	push	r11
    2fde:	cf 92       	push	r12
    2fe0:	df 92       	push	r13
    2fe2:	ef 92       	push	r14
    2fe4:	ff 92       	push	r15
    2fe6:	0f 93       	push	r16
    2fe8:	1f 93       	push	r17
    2fea:	cf 93       	push	r28
    2fec:	df 93       	push	r29
    2fee:	1f 92       	push	r1
    2ff0:	cd b7       	in	r28, 0x3d	; 61
    2ff2:	de b7       	in	r29, 0x3e	; 62
    2ff4:	e8 2e       	mov	r14, r24
    2ff6:	f6 2e       	mov	r15, r22
    2ff8:	3a 01       	movw	r6, r20
    2ffa:	10 92 12 0b 	sts	0x0B12, r1	; 0x800b12 <SerBuffer+0x2>
    2ffe:	10 92 13 0b 	sts	0x0B13, r1	; 0x800b13 <SerBuffer+0x3>
    3002:	10 92 14 0b 	sts	0x0B14, r1	; 0x800b14 <SerBuffer+0x4>
    3006:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <SerBuffer+0x5>
    300a:	10 92 16 0b 	sts	0x0B16, r1	; 0x800b16 <SerBuffer+0x6>
    300e:	40 e8       	ldi	r20, 0x80	; 128
    3010:	60 e0       	ldi	r22, 0x00	; 0
    3012:	82 e1       	ldi	r24, 0x12	; 18
    3014:	0e 94 b4 1a 	call	0x3568	; 0x3568 <RcModifyReg>
    3018:	40 e8       	ldi	r20, 0x80	; 128
    301a:	60 e0       	ldi	r22, 0x00	; 0
    301c:	83 e1       	ldi	r24, 0x13	; 19
    301e:	0e 94 b4 1a 	call	0x3568	; 0x3568 <RcModifyReg>
    3022:	60 e0       	ldi	r22, 0x00	; 0
    3024:	8e e0       	ldi	r24, 0x0E	; 14
    3026:	0e 94 96 1a 	call	0x352c	; 0x352c <RcSetReg>
    302a:	b6 2c       	mov	r11, r6
    302c:	84 e0       	ldi	r24, 0x04	; 4
    302e:	c8 2e       	mov	r12, r24
    3030:	d1 2c       	mov	r13, r1
    3032:	30 e2       	ldi	r19, 0x20	; 32
    3034:	3f 15       	cp	r19, r15
    3036:	08 f4       	brcc	.+2      	; 0x303a <CascAnticoll+0x66>
    3038:	a9 c0       	rjmp	.+338    	; 0x318c <CascAnticoll+0x1b8>
    303a:	2f 2d       	mov	r18, r15
    303c:	27 70       	andi	r18, 0x07	; 7
    303e:	9f 2d       	mov	r25, r15
    3040:	96 95       	lsr	r25
    3042:	96 95       	lsr	r25
    3044:	96 95       	lsr	r25
    3046:	22 23       	and	r18, r18
    3048:	21 f0       	breq	.+8      	; 0x3052 <CascAnticoll+0x7e>
    304a:	aa 24       	eor	r10, r10
    304c:	a3 94       	inc	r10
    304e:	a9 0e       	add	r10, r25
    3050:	01 c0       	rjmp	.+2      	; 0x3054 <CascAnticoll+0x80>
    3052:	a9 2e       	mov	r10, r25
    3054:	e0 92 10 0b 	sts	0x0B10, r14	; 0x800b10 <SerBuffer>
    3058:	80 e2       	ldi	r24, 0x20	; 32
    305a:	82 0f       	add	r24, r18
    305c:	e0 e1       	ldi	r30, 0x10	; 16
    305e:	9e 9f       	mul	r25, r30
    3060:	80 0d       	add	r24, r0
    3062:	11 24       	eor	r1, r1
    3064:	80 93 11 0b 	sts	0x0B11, r24	; 0x800b11 <SerBuffer+0x1>
    3068:	a2 e1       	ldi	r26, 0x12	; 18
    306a:	bb e0       	ldi	r27, 0x0B	; 11
    306c:	f3 01       	movw	r30, r6
    306e:	8e 2f       	mov	r24, r30
    3070:	8b 19       	sub	r24, r11
    3072:	8a 15       	cp	r24, r10
    3074:	18 f4       	brcc	.+6      	; 0x307c <CascAnticoll+0xa8>
    3076:	81 91       	ld	r24, Z+
    3078:	8d 93       	st	X+, r24
    307a:	f9 cf       	rjmp	.-14     	; 0x306e <CascAnticoll+0x9a>
    307c:	f0 e1       	ldi	r31, 0x10	; 16
    307e:	2f 9f       	mul	r18, r31
    3080:	b0 01       	movw	r22, r0
    3082:	11 24       	eor	r1, r1
    3084:	62 2b       	or	r22, r18
    3086:	8d e0       	ldi	r24, 0x0D	; 13
    3088:	29 83       	std	Y+1, r18	; 0x01
    308a:	0e 94 96 1a 	call	0x352c	; 0x352c <RcSetReg>
    308e:	10 92 24 0b 	sts	0x0B24, r1	; 0x800b24 <MInfo>
    3092:	10 92 25 0b 	sts	0x0B25, r1	; 0x800b25 <MInfo+0x1>
    3096:	10 92 26 0b 	sts	0x0B26, r1	; 0x800b26 <MInfo+0x2>
    309a:	10 92 28 0b 	sts	0x0B28, r1	; 0x800b28 <MInfo+0x4>
    309e:	10 92 2a 0b 	sts	0x0B2A, r1	; 0x800b2a <MInfo+0x6>
    30a2:	10 92 29 0b 	sts	0x0B29, r1	; 0x800b29 <MInfo+0x5>
    30a6:	10 92 2b 0b 	sts	0x0B2B, r1	; 0x800b2b <MInfo+0x7>
    30aa:	82 e0       	ldi	r24, 0x02	; 2
    30ac:	8a 0d       	add	r24, r10
    30ae:	80 93 27 0b 	sts	0x0B27, r24	; 0x800b27 <MInfo+0x3>
    30b2:	80 e1       	ldi	r24, 0x10	; 16
    30b4:	97 e2       	ldi	r25, 0x27	; 39
    30b6:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <SetTimeOut>
    30ba:	44 e2       	ldi	r20, 0x24	; 36
    30bc:	5b e0       	ldi	r21, 0x0B	; 11
    30be:	60 e1       	ldi	r22, 0x10	; 16
    30c0:	7b e0       	ldi	r23, 0x0B	; 11
    30c2:	8c e0       	ldi	r24, 0x0C	; 12
    30c4:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <M522PcdCmd>
    30c8:	8c 01       	movw	r16, r24
    30ca:	29 81       	ldd	r18, Y+1	; 0x01
    30cc:	86 30       	cpi	r24, 0x06	; 6
    30ce:	91 05       	cpc	r25, r1
    30d0:	19 f0       	breq	.+6      	; 0x30d8 <CascAnticoll+0x104>
    30d2:	89 2b       	or	r24, r25
    30d4:	09 f0       	breq	.+2      	; 0x30d8 <CascAnticoll+0x104>
    30d6:	5f c0       	rjmp	.+190    	; 0x3196 <CascAnticoll+0x1c2>
    30d8:	60 91 29 0b 	lds	r22, 0x0B29	; 0x800b29 <MInfo+0x5>
    30dc:	70 91 2a 0b 	lds	r23, 0x0B2A	; 0x800b2a <MInfo+0x6>
    30e0:	80 91 28 0b 	lds	r24, 0x0B28	; 0x800b28 <MInfo+0x4>
    30e4:	a6 2f       	mov	r26, r22
    30e6:	38 e0       	ldi	r19, 0x08	; 8
    30e8:	83 9f       	mul	r24, r19
    30ea:	a0 0d       	add	r26, r0
    30ec:	11 24       	eor	r1, r1
    30ee:	a2 1b       	sub	r26, r18
    30f0:	4f 2d       	mov	r20, r15
    30f2:	50 e0       	ldi	r21, 0x00	; 0
    30f4:	4a 0f       	add	r20, r26
    30f6:	51 1d       	adc	r21, r1
    30f8:	49 32       	cpi	r20, 0x29	; 41
    30fa:	51 05       	cpc	r21, r1
    30fc:	0c f0       	brlt	.+2      	; 0x3100 <CascAnticoll+0x12c>
    30fe:	49 c0       	rjmp	.+146    	; 0x3192 <CascAnticoll+0x1be>
    3100:	67 2b       	or	r22, r23
    3102:	19 f0       	breq	.+6      	; 0x310a <CascAnticoll+0x136>
    3104:	8f 5f       	subi	r24, 0xFF	; 255
    3106:	80 93 28 0b 	sts	0x0B28, r24	; 0x800b28 <MInfo+0x4>
    310a:	4a 2d       	mov	r20, r10
    310c:	50 e0       	ldi	r21, 0x00	; 0
    310e:	22 23       	and	r18, r18
    3110:	59 f0       	breq	.+22     	; 0x3128 <CascAnticoll+0x154>
    3112:	fa 01       	movw	r30, r20
    3114:	31 97       	sbiw	r30, 0x01	; 1
    3116:	e6 0d       	add	r30, r6
    3118:	f7 1d       	adc	r31, r7
    311a:	90 81       	ld	r25, Z
    311c:	80 91 10 0b 	lds	r24, 0x0B10	; 0x800b10 <SerBuffer>
    3120:	89 2b       	or	r24, r25
    3122:	80 83       	st	Z, r24
    3124:	b1 e0       	ldi	r27, 0x01	; 1
    3126:	01 c0       	rjmp	.+2      	; 0x312a <CascAnticoll+0x156>
    3128:	b0 e0       	ldi	r27, 0x00	; 0
    312a:	a1 2c       	mov	r10, r1
    312c:	c6 01       	movw	r24, r12
    312e:	84 1b       	sub	r24, r20
    3130:	95 0b       	sbc	r25, r21
    3132:	6b 2f       	mov	r22, r27
    3134:	70 e0       	ldi	r23, 0x00	; 0
    3136:	2a 2d       	mov	r18, r10
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	28 17       	cp	r18, r24
    313c:	39 07       	cpc	r19, r25
    313e:	74 f4       	brge	.+28     	; 0x315c <CascAnticoll+0x188>
    3140:	f9 01       	movw	r30, r18
    3142:	e0 5f       	subi	r30, 0xF0	; 240
    3144:	f4 4f       	sbci	r31, 0xF4	; 244
    3146:	e6 0f       	add	r30, r22
    3148:	f7 1f       	adc	r31, r23
    314a:	90 80       	ld	r9, Z
    314c:	26 0d       	add	r18, r6
    314e:	37 1d       	adc	r19, r7
    3150:	f9 01       	movw	r30, r18
    3152:	e4 0f       	add	r30, r20
    3154:	f5 1f       	adc	r31, r21
    3156:	90 82       	st	Z, r9
    3158:	a3 94       	inc	r10
    315a:	ed cf       	rjmp	.-38     	; 0x3136 <CascAnticoll+0x162>
    315c:	06 30       	cpi	r16, 0x06	; 6
    315e:	11 05       	cpc	r17, r1
    3160:	11 f4       	brne	.+4      	; 0x3166 <CascAnticoll+0x192>
    3162:	fa 0e       	add	r15, r26
    3164:	66 cf       	rjmp	.-308    	; 0x3032 <CascAnticoll+0x5e>
    3166:	f3 01       	movw	r30, r6
    3168:	91 81       	ldd	r25, Z+1	; 0x01
    316a:	80 81       	ld	r24, Z
    316c:	89 27       	eor	r24, r25
    316e:	92 81       	ldd	r25, Z+2	; 0x02
    3170:	89 27       	eor	r24, r25
    3172:	93 81       	ldd	r25, Z+3	; 0x03
    3174:	89 27       	eor	r24, r25
    3176:	20 5f       	subi	r18, 0xF0	; 240
    3178:	34 4f       	sbci	r19, 0xF4	; 244
    317a:	f9 01       	movw	r30, r18
    317c:	eb 0f       	add	r30, r27
    317e:	f1 1d       	adc	r31, r1
    3180:	90 81       	ld	r25, Z
    3182:	89 17       	cp	r24, r25
    3184:	41 f0       	breq	.+16     	; 0x3196 <CascAnticoll+0x1c2>
    3186:	01 e0       	ldi	r16, 0x01	; 1
    3188:	15 e0       	ldi	r17, 0x05	; 5
    318a:	05 c0       	rjmp	.+10     	; 0x3196 <CascAnticoll+0x1c2>
    318c:	01 e0       	ldi	r16, 0x01	; 1
    318e:	11 e0       	ldi	r17, 0x01	; 1
    3190:	02 c0       	rjmp	.+4      	; 0x3196 <CascAnticoll+0x1c2>
    3192:	04 e0       	ldi	r16, 0x04	; 4
    3194:	10 e0       	ldi	r17, 0x00	; 0
    3196:	60 e0       	ldi	r22, 0x00	; 0
    3198:	8d e0       	ldi	r24, 0x0D	; 13
    319a:	0e 94 96 1a 	call	0x352c	; 0x352c <RcSetReg>
    319e:	60 e8       	ldi	r22, 0x80	; 128
    31a0:	8e e0       	ldi	r24, 0x0E	; 14
    31a2:	0e 94 96 1a 	call	0x352c	; 0x352c <RcSetReg>
    31a6:	c8 01       	movw	r24, r16
    31a8:	0f 90       	pop	r0
    31aa:	df 91       	pop	r29
    31ac:	cf 91       	pop	r28
    31ae:	1f 91       	pop	r17
    31b0:	0f 91       	pop	r16
    31b2:	ff 90       	pop	r15
    31b4:	ef 90       	pop	r14
    31b6:	df 90       	pop	r13
    31b8:	cf 90       	pop	r12
    31ba:	bf 90       	pop	r11
    31bc:	af 90       	pop	r10
    31be:	9f 90       	pop	r9
    31c0:	7f 90       	pop	r7
    31c2:	6f 90       	pop	r6
    31c4:	08 95       	ret

000031c6 <Select>:
    31c6:	ff 92       	push	r15
    31c8:	0f 93       	push	r16
    31ca:	1f 93       	push	r17
    31cc:	cf 93       	push	r28
    31ce:	df 93       	push	r29
    31d0:	f8 2e       	mov	r15, r24
    31d2:	eb 01       	movw	r28, r22
    31d4:	8a 01       	movw	r16, r20
    31d6:	40 e8       	ldi	r20, 0x80	; 128
    31d8:	61 e0       	ldi	r22, 0x01	; 1
    31da:	82 e1       	ldi	r24, 0x12	; 18
    31dc:	0e 94 b4 1a 	call	0x3568	; 0x3568 <RcModifyReg>
    31e0:	40 e8       	ldi	r20, 0x80	; 128
    31e2:	61 e0       	ldi	r22, 0x01	; 1
    31e4:	83 e1       	ldi	r24, 0x13	; 19
    31e6:	0e 94 b4 1a 	call	0x3568	; 0x3568 <RcModifyReg>
    31ea:	f0 92 10 0b 	sts	0x0B10, r15	; 0x800b10 <SerBuffer>
    31ee:	80 e7       	ldi	r24, 0x70	; 112
    31f0:	80 93 11 0b 	sts	0x0B11, r24	; 0x800b11 <SerBuffer+0x1>
    31f4:	fe 01       	movw	r30, r28
    31f6:	a2 e1       	ldi	r26, 0x12	; 18
    31f8:	bb e0       	ldi	r27, 0x0B	; 11
    31fa:	ce 01       	movw	r24, r28
    31fc:	04 96       	adiw	r24, 0x04	; 4
    31fe:	21 91       	ld	r18, Z+
    3200:	2d 93       	st	X+, r18
    3202:	e8 17       	cp	r30, r24
    3204:	f9 07       	cpc	r31, r25
    3206:	d9 f7       	brne	.-10     	; 0x31fe <Select+0x38>
    3208:	99 81       	ldd	r25, Y+1	; 0x01
    320a:	88 81       	ld	r24, Y
    320c:	89 27       	eor	r24, r25
    320e:	9a 81       	ldd	r25, Y+2	; 0x02
    3210:	89 27       	eor	r24, r25
    3212:	9b 81       	ldd	r25, Y+3	; 0x03
    3214:	89 27       	eor	r24, r25
    3216:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <SerBuffer+0x6>
    321a:	10 92 24 0b 	sts	0x0B24, r1	; 0x800b24 <MInfo>
    321e:	10 92 25 0b 	sts	0x0B25, r1	; 0x800b25 <MInfo+0x1>
    3222:	10 92 26 0b 	sts	0x0B26, r1	; 0x800b26 <MInfo+0x2>
    3226:	10 92 28 0b 	sts	0x0B28, r1	; 0x800b28 <MInfo+0x4>
    322a:	10 92 2a 0b 	sts	0x0B2A, r1	; 0x800b2a <MInfo+0x6>
    322e:	10 92 29 0b 	sts	0x0B29, r1	; 0x800b29 <MInfo+0x5>
    3232:	10 92 2b 0b 	sts	0x0B2B, r1	; 0x800b2b <MInfo+0x7>
    3236:	87 e0       	ldi	r24, 0x07	; 7
    3238:	80 93 27 0b 	sts	0x0B27, r24	; 0x800b27 <MInfo+0x3>
    323c:	80 ed       	ldi	r24, 0xD0	; 208
    323e:	97 e0       	ldi	r25, 0x07	; 7
    3240:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <SetTimeOut>
    3244:	44 e2       	ldi	r20, 0x24	; 36
    3246:	5b e0       	ldi	r21, 0x0B	; 11
    3248:	60 e1       	ldi	r22, 0x10	; 16
    324a:	7b e0       	ldi	r23, 0x0B	; 11
    324c:	8c e0       	ldi	r24, 0x0C	; 12
    324e:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <M522PcdCmd>
    3252:	00 97       	sbiw	r24, 0x00	; 0
    3254:	89 f4       	brne	.+34     	; 0x3278 <Select+0xb2>
    3256:	20 91 28 0b 	lds	r18, 0x0B28	; 0x800b28 <MInfo+0x4>
    325a:	21 30       	cpi	r18, 0x01	; 1
    325c:	59 f4       	brne	.+22     	; 0x3274 <Select+0xae>
    325e:	20 91 29 0b 	lds	r18, 0x0B29	; 0x800b29 <MInfo+0x5>
    3262:	30 91 2a 0b 	lds	r19, 0x0B2A	; 0x800b2a <MInfo+0x6>
    3266:	23 2b       	or	r18, r19
    3268:	29 f4       	brne	.+10     	; 0x3274 <Select+0xae>
    326a:	20 91 10 0b 	lds	r18, 0x0B10	; 0x800b10 <SerBuffer>
    326e:	f8 01       	movw	r30, r16
    3270:	20 83       	st	Z, r18
    3272:	02 c0       	rjmp	.+4      	; 0x3278 <Select+0xb2>
    3274:	84 e0       	ldi	r24, 0x04	; 4
    3276:	90 e0       	ldi	r25, 0x00	; 0
    3278:	df 91       	pop	r29
    327a:	cf 91       	pop	r28
    327c:	1f 91       	pop	r17
    327e:	0f 91       	pop	r16
    3280:	ff 90       	pop	r15
    3282:	08 95       	ret

00003284 <AnticollSelect>:
    3284:	6f 92       	push	r6
    3286:	7f 92       	push	r7
    3288:	8f 92       	push	r8
    328a:	9f 92       	push	r9
    328c:	af 92       	push	r10
    328e:	bf 92       	push	r11
    3290:	cf 92       	push	r12
    3292:	df 92       	push	r13
    3294:	ef 92       	push	r14
    3296:	ff 92       	push	r15
    3298:	0f 93       	push	r16
    329a:	1f 93       	push	r17
    329c:	cf 93       	push	r28
    329e:	df 93       	push	r29
    32a0:	cd b7       	in	r28, 0x3d	; 61
    32a2:	de b7       	in	r29, 0x3e	; 62
    32a4:	2d 97       	sbiw	r28, 0x0d	; 13
    32a6:	0f b6       	in	r0, 0x3f	; 63
    32a8:	f8 94       	cli
    32aa:	de bf       	out	0x3e, r29	; 62
    32ac:	0f be       	out	0x3f, r0	; 63
    32ae:	cd bf       	out	0x3d, r28	; 61
    32b0:	7b 01       	movw	r14, r22
    32b2:	6a 01       	movw	r12, r20
    32b4:	9e 01       	movw	r18, r28
    32b6:	2f 5f       	subi	r18, 0xFF	; 255
    32b8:	3f 4f       	sbci	r19, 0xFF	; 255
    32ba:	59 01       	movw	r10, r18
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	10 e0       	ldi	r17, 0x00	; 0
    32c2:	88 23       	and	r24, r24
    32c4:	a1 f0       	breq	.+40     	; 0x32ee <AnticollSelect+0x6a>
    32c6:	81 32       	cpi	r24, 0x21	; 33
    32c8:	40 f0       	brcs	.+16     	; 0x32da <AnticollSelect+0x56>
    32ca:	00 ee       	ldi	r16, 0xE0	; 224
    32cc:	08 0f       	add	r16, r24
    32ce:	11 30       	cpi	r17, 0x01	; 1
    32d0:	61 f0       	breq	.+24     	; 0x32ea <AnticollSelect+0x66>
    32d2:	12 30       	cpi	r17, 0x02	; 2
    32d4:	71 f5       	brne	.+92     	; 0x3332 <AnticollSelect+0xae>
    32d6:	80 e2       	ldi	r24, 0x20	; 32
    32d8:	05 c0       	rjmp	.+10     	; 0x32e4 <AnticollSelect+0x60>
    32da:	11 30       	cpi	r17, 0x01	; 1
    32dc:	51 f0       	breq	.+20     	; 0x32f2 <AnticollSelect+0x6e>
    32de:	12 30       	cpi	r17, 0x02	; 2
    32e0:	99 f4       	brne	.+38     	; 0x3308 <AnticollSelect+0x84>
    32e2:	00 e0       	ldi	r16, 0x00	; 0
    32e4:	67 e9       	ldi	r22, 0x97	; 151
    32e6:	96 2e       	mov	r9, r22
    32e8:	12 c0       	rjmp	.+36     	; 0x330e <AnticollSelect+0x8a>
    32ea:	80 e2       	ldi	r24, 0x20	; 32
    32ec:	03 c0       	rjmp	.+6      	; 0x32f4 <AnticollSelect+0x70>
    32ee:	11 30       	cpi	r17, 0x01	; 1
    32f0:	89 f4       	brne	.+34     	; 0x3314 <AnticollSelect+0x90>
    32f2:	00 e0       	ldi	r16, 0x00	; 0
    32f4:	6a 80       	ldd	r6, Y+2	; 0x02
    32f6:	7b 80       	ldd	r7, Y+3	; 0x03
    32f8:	8c 80       	ldd	r8, Y+4	; 0x04
    32fa:	f7 01       	movw	r30, r14
    32fc:	60 82       	st	Z, r6
    32fe:	71 82       	std	Z+1, r7	; 0x01
    3300:	82 82       	std	Z+2, r8	; 0x02
    3302:	55 e9       	ldi	r21, 0x95	; 149
    3304:	95 2e       	mov	r9, r21
    3306:	03 c0       	rjmp	.+6      	; 0x330e <AnticollSelect+0x8a>
    3308:	00 e0       	ldi	r16, 0x00	; 0
    330a:	43 e9       	ldi	r20, 0x93	; 147
    330c:	94 2e       	mov	r9, r20
    330e:	80 32       	cpi	r24, 0x20	; 32
    3310:	31 f4       	brne	.+12     	; 0x331e <AnticollSelect+0x9a>
    3312:	11 c0       	rjmp	.+34     	; 0x3336 <AnticollSelect+0xb2>
    3314:	12 30       	cpi	r17, 0x02	; 2
    3316:	29 f3       	breq	.-54     	; 0x32e2 <AnticollSelect+0x5e>
    3318:	00 e0       	ldi	r16, 0x00	; 0
    331a:	93 e9       	ldi	r25, 0x93	; 147
    331c:	99 2e       	mov	r9, r25
    331e:	21 15       	cp	r18, r1
    3320:	31 05       	cpc	r19, r1
    3322:	09 f5       	brne	.+66     	; 0x3366 <AnticollSelect+0xe2>
    3324:	a5 01       	movw	r20, r10
    3326:	68 2f       	mov	r22, r24
    3328:	89 2d       	mov	r24, r9
    332a:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <CascAnticoll>
    332e:	9c 01       	movw	r18, r24
    3330:	02 c0       	rjmp	.+4      	; 0x3336 <AnticollSelect+0xb2>
    3332:	83 e9       	ldi	r24, 0x93	; 147
    3334:	98 2e       	mov	r9, r24
    3336:	21 15       	cp	r18, r1
    3338:	31 05       	cpc	r19, r1
    333a:	a9 f4       	brne	.+42     	; 0x3366 <AnticollSelect+0xe2>
    333c:	ae 01       	movw	r20, r28
    333e:	43 5f       	subi	r20, 0xF3	; 243
    3340:	5f 4f       	sbci	r21, 0xFF	; 255
    3342:	b5 01       	movw	r22, r10
    3344:	89 2d       	mov	r24, r9
    3346:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <Select>
    334a:	9c 01       	movw	r18, r24
    334c:	89 2b       	or	r24, r25
    334e:	19 f4       	brne	.+6      	; 0x3356 <AnticollSelect+0xd2>
    3350:	8d 85       	ldd	r24, Y+13	; 0x0d
    3352:	82 ff       	sbrs	r24, 2
    3354:	08 c0       	rjmp	.+16     	; 0x3366 <AnticollSelect+0xe2>
    3356:	1f 5f       	subi	r17, 0xFF	; 255
    3358:	f4 e0       	ldi	r31, 0x04	; 4
    335a:	af 0e       	add	r10, r31
    335c:	b1 1c       	adc	r11, r1
    335e:	13 30       	cpi	r17, 0x03	; 3
    3360:	d1 f0       	breq	.+52     	; 0x3396 <AnticollSelect+0x112>
    3362:	80 2f       	mov	r24, r16
    3364:	ae cf       	rjmp	.-164    	; 0x32c2 <AnticollSelect+0x3e>
    3366:	11 30       	cpi	r17, 0x01	; 1
    3368:	61 f0       	breq	.+24     	; 0x3382 <AnticollSelect+0xfe>
    336a:	12 30       	cpi	r17, 0x02	; 2
    336c:	a1 f4       	brne	.+40     	; 0x3396 <AnticollSelect+0x112>
    336e:	8d 81       	ldd	r24, Y+5	; 0x05
    3370:	9e 81       	ldd	r25, Y+6	; 0x06
    3372:	af 81       	ldd	r26, Y+7	; 0x07
    3374:	b8 85       	ldd	r27, Y+8	; 0x08
    3376:	f7 01       	movw	r30, r14
    3378:	86 83       	std	Z+6, r24	; 0x06
    337a:	97 83       	std	Z+7, r25	; 0x07
    337c:	a0 87       	std	Z+8, r26	; 0x08
    337e:	b1 87       	std	Z+9, r27	; 0x09
    3380:	13 c0       	rjmp	.+38     	; 0x33a8 <AnticollSelect+0x124>
    3382:	8d 81       	ldd	r24, Y+5	; 0x05
    3384:	9e 81       	ldd	r25, Y+6	; 0x06
    3386:	af 81       	ldd	r26, Y+7	; 0x07
    3388:	b8 85       	ldd	r27, Y+8	; 0x08
    338a:	f7 01       	movw	r30, r14
    338c:	83 83       	std	Z+3, r24	; 0x03
    338e:	94 83       	std	Z+4, r25	; 0x04
    3390:	a5 83       	std	Z+5, r26	; 0x05
    3392:	b6 83       	std	Z+6, r27	; 0x06
    3394:	09 c0       	rjmp	.+18     	; 0x33a8 <AnticollSelect+0x124>
    3396:	89 81       	ldd	r24, Y+1	; 0x01
    3398:	9a 81       	ldd	r25, Y+2	; 0x02
    339a:	ab 81       	ldd	r26, Y+3	; 0x03
    339c:	bc 81       	ldd	r27, Y+4	; 0x04
    339e:	f7 01       	movw	r30, r14
    33a0:	80 83       	st	Z, r24
    33a2:	91 83       	std	Z+1, r25	; 0x01
    33a4:	a2 83       	std	Z+2, r26	; 0x02
    33a6:	b3 83       	std	Z+3, r27	; 0x03
    33a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    33aa:	f6 01       	movw	r30, r12
    33ac:	80 83       	st	Z, r24
    33ae:	c9 01       	movw	r24, r18
    33b0:	2d 96       	adiw	r28, 0x0d	; 13
    33b2:	0f b6       	in	r0, 0x3f	; 63
    33b4:	f8 94       	cli
    33b6:	de bf       	out	0x3e, r29	; 62
    33b8:	0f be       	out	0x3f, r0	; 63
    33ba:	cd bf       	out	0x3d, r28	; 61
    33bc:	df 91       	pop	r29
    33be:	cf 91       	pop	r28
    33c0:	1f 91       	pop	r17
    33c2:	0f 91       	pop	r16
    33c4:	ff 90       	pop	r15
    33c6:	ef 90       	pop	r14
    33c8:	df 90       	pop	r13
    33ca:	cf 90       	pop	r12
    33cc:	bf 90       	pop	r11
    33ce:	af 90       	pop	r10
    33d0:	9f 90       	pop	r9
    33d2:	8f 90       	pop	r8
    33d4:	7f 90       	pop	r7
    33d6:	6f 90       	pop	r6
    33d8:	08 95       	ret

000033da <Authentication>:
    33da:	cf 93       	push	r28
    33dc:	df 93       	push	r29
    33de:	10 92 24 0b 	sts	0x0B24, r1	; 0x800b24 <MInfo>
    33e2:	10 92 25 0b 	sts	0x0B25, r1	; 0x800b25 <MInfo+0x1>
    33e6:	10 92 26 0b 	sts	0x0B26, r1	; 0x800b26 <MInfo+0x2>
    33ea:	10 92 27 0b 	sts	0x0B27, r1	; 0x800b27 <MInfo+0x3>
    33ee:	10 92 28 0b 	sts	0x0B28, r1	; 0x800b28 <MInfo+0x4>
    33f2:	10 92 2a 0b 	sts	0x0B2A, r1	; 0x800b2a <MInfo+0x6>
    33f6:	10 92 29 0b 	sts	0x0B29, r1	; 0x800b29 <MInfo+0x5>
    33fa:	10 92 2b 0b 	sts	0x0B2B, r1	; 0x800b2b <MInfo+0x7>
    33fe:	80 93 10 0b 	sts	0x0B10, r24	; 0x800b10 <SerBuffer>
    3402:	20 93 11 0b 	sts	0x0B11, r18	; 0x800b11 <SerBuffer+0x1>
    3406:	86 e0       	ldi	r24, 0x06	; 6
    3408:	fb 01       	movw	r30, r22
    340a:	a2 e1       	ldi	r26, 0x12	; 18
    340c:	bb e0       	ldi	r27, 0x0B	; 11
    340e:	01 90       	ld	r0, Z+
    3410:	0d 92       	st	X+, r0
    3412:	8a 95       	dec	r24
    3414:	e1 f7       	brne	.-8      	; 0x340e <Authentication+0x34>
    3416:	fa 01       	movw	r30, r20
    3418:	80 81       	ld	r24, Z
    341a:	91 81       	ldd	r25, Z+1	; 0x01
    341c:	a2 81       	ldd	r26, Z+2	; 0x02
    341e:	b3 81       	ldd	r27, Z+3	; 0x03
    3420:	80 93 18 0b 	sts	0x0B18, r24	; 0x800b18 <SerBuffer+0x8>
    3424:	90 93 19 0b 	sts	0x0B19, r25	; 0x800b19 <SerBuffer+0x9>
    3428:	a0 93 1a 0b 	sts	0x0B1A, r26	; 0x800b1a <SerBuffer+0xa>
    342c:	b0 93 1b 0b 	sts	0x0B1B, r27	; 0x800b1b <SerBuffer+0xb>
    3430:	8c e0       	ldi	r24, 0x0C	; 12
    3432:	80 93 27 0b 	sts	0x0B27, r24	; 0x800b27 <MInfo+0x3>
    3436:	80 ed       	ldi	r24, 0xD0	; 208
    3438:	97 e0       	ldi	r25, 0x07	; 7
    343a:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <SetTimeOut>
    343e:	44 e2       	ldi	r20, 0x24	; 36
    3440:	5b e0       	ldi	r21, 0x0B	; 11
    3442:	60 e1       	ldi	r22, 0x10	; 16
    3444:	7b e0       	ldi	r23, 0x0B	; 11
    3446:	8e e0       	ldi	r24, 0x0E	; 14
    3448:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <M522PcdCmd>
    344c:	ec 01       	movw	r28, r24
    344e:	89 2b       	or	r24, r25
    3450:	41 f4       	brne	.+16     	; 0x3462 <Authentication+0x88>
    3452:	88 e0       	ldi	r24, 0x08	; 8
    3454:	0e 94 aa 1a 	call	0x3554	; 0x3554 <RcGetReg>
    3458:	8f 70       	andi	r24, 0x0F	; 15
    345a:	88 30       	cpi	r24, 0x08	; 8
    345c:	11 f0       	breq	.+4      	; 0x3462 <Authentication+0x88>
    345e:	c1 e0       	ldi	r28, 0x01	; 1
    3460:	d2 e0       	ldi	r29, 0x02	; 2
    3462:	ce 01       	movw	r24, r28
    3464:	df 91       	pop	r29
    3466:	cf 91       	pop	r28
    3468:	08 95       	ret

0000346a <Read>:
    346a:	cf 93       	push	r28
    346c:	df 93       	push	r29
    346e:	eb 01       	movw	r28, r22
    3470:	10 92 24 0b 	sts	0x0B24, r1	; 0x800b24 <MInfo>
    3474:	10 92 25 0b 	sts	0x0B25, r1	; 0x800b25 <MInfo+0x1>
    3478:	10 92 26 0b 	sts	0x0B26, r1	; 0x800b26 <MInfo+0x2>
    347c:	10 92 28 0b 	sts	0x0B28, r1	; 0x800b28 <MInfo+0x4>
    3480:	10 92 2a 0b 	sts	0x0B2A, r1	; 0x800b2a <MInfo+0x6>
    3484:	10 92 29 0b 	sts	0x0B29, r1	; 0x800b29 <MInfo+0x5>
    3488:	10 92 2b 0b 	sts	0x0B2B, r1	; 0x800b2b <MInfo+0x7>
    348c:	90 e3       	ldi	r25, 0x30	; 48
    348e:	90 93 10 0b 	sts	0x0B10, r25	; 0x800b10 <SerBuffer>
    3492:	80 93 11 0b 	sts	0x0B11, r24	; 0x800b11 <SerBuffer+0x1>
    3496:	82 e0       	ldi	r24, 0x02	; 2
    3498:	80 93 27 0b 	sts	0x0B27, r24	; 0x800b27 <MInfo+0x3>
    349c:	80 e1       	ldi	r24, 0x10	; 16
    349e:	97 e2       	ldi	r25, 0x27	; 39
    34a0:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <SetTimeOut>
    34a4:	44 e2       	ldi	r20, 0x24	; 36
    34a6:	5b e0       	ldi	r21, 0x0B	; 11
    34a8:	60 e1       	ldi	r22, 0x10	; 16
    34aa:	7b e0       	ldi	r23, 0x0B	; 11
    34ac:	8c e0       	ldi	r24, 0x0C	; 12
    34ae:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <M522PcdCmd>
    34b2:	00 97       	sbiw	r24, 0x00	; 0
    34b4:	e9 f0       	breq	.+58     	; 0x34f0 <Read+0x86>
    34b6:	81 30       	cpi	r24, 0x01	; 1
    34b8:	91 05       	cpc	r25, r1
    34ba:	a1 f0       	breq	.+40     	; 0x34e4 <Read+0x7a>
    34bc:	20 91 29 0b 	lds	r18, 0x0B29	; 0x800b29 <MInfo+0x5>
    34c0:	30 91 2a 0b 	lds	r19, 0x0B2A	; 0x800b2a <MInfo+0x6>
    34c4:	24 30       	cpi	r18, 0x04	; 4
    34c6:	31 05       	cpc	r19, r1
    34c8:	69 f4       	brne	.+26     	; 0x34e4 <Read+0x7a>
    34ca:	80 91 10 0b 	lds	r24, 0x0B10	; 0x800b10 <SerBuffer>
    34ce:	98 2f       	mov	r25, r24
    34d0:	9f 70       	andi	r25, 0x0F	; 15
    34d2:	90 93 10 0b 	sts	0x0B10, r25	; 0x800b10 <SerBuffer>
    34d6:	8a 70       	andi	r24, 0x0A	; 10
    34d8:	19 f0       	breq	.+6      	; 0x34e0 <Read+0x76>
    34da:	85 e0       	ldi	r24, 0x05	; 5
    34dc:	91 e0       	ldi	r25, 0x01	; 1
    34de:	02 c0       	rjmp	.+4      	; 0x34e4 <Read+0x7a>
    34e0:	81 e0       	ldi	r24, 0x01	; 1
    34e2:	92 e0       	ldi	r25, 0x02	; 2
    34e4:	20 e1       	ldi	r18, 0x10	; 16
    34e6:	fe 01       	movw	r30, r28
    34e8:	11 92       	st	Z+, r1
    34ea:	2a 95       	dec	r18
    34ec:	e9 f7       	brne	.-6      	; 0x34e8 <Read+0x7e>
    34ee:	14 c0       	rjmp	.+40     	; 0x3518 <Read+0xae>
    34f0:	20 91 28 0b 	lds	r18, 0x0B28	; 0x800b28 <MInfo+0x4>
    34f4:	20 31       	cpi	r18, 0x10	; 16
    34f6:	41 f0       	breq	.+16     	; 0x3508 <Read+0x9e>
    34f8:	80 e1       	ldi	r24, 0x10	; 16
    34fa:	fe 01       	movw	r30, r28
    34fc:	11 92       	st	Z+, r1
    34fe:	8a 95       	dec	r24
    3500:	e9 f7       	brne	.-6      	; 0x34fc <Read+0x92>
    3502:	88 e0       	ldi	r24, 0x08	; 8
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	08 c0       	rjmp	.+16     	; 0x3518 <Read+0xae>
    3508:	20 e1       	ldi	r18, 0x10	; 16
    350a:	e0 e1       	ldi	r30, 0x10	; 16
    350c:	fb e0       	ldi	r31, 0x0B	; 11
    350e:	de 01       	movw	r26, r28
    3510:	01 90       	ld	r0, Z+
    3512:	0d 92       	st	X+, r0
    3514:	2a 95       	dec	r18
    3516:	e1 f7       	brne	.-8      	; 0x3510 <Read+0xa6>
    3518:	df 91       	pop	r29
    351a:	cf 91       	pop	r28
    351c:	08 95       	ret

0000351e <readCardID>:

short readCardID(unsigned char cardType, unsigned char *buffer)
{
	unsigned char zone = 4;

	if(cardType == MIFARE_1K)
    351e:	88 30       	cpi	r24, 0x08	; 8
    3520:	11 f4       	brne	.+4      	; 0x3526 <readCardID+0x8>
	{
		zone = 1;
    3522:	81 e0       	ldi	r24, 0x01	; 1
    3524:	01 c0       	rjmp	.+2      	; 0x3528 <readCardID+0xa>
}


short readCardID(unsigned char cardType, unsigned char *buffer)
{
	unsigned char zone = 4;
    3526:	84 e0       	ldi	r24, 0x04	; 4
	{
		zone = 1;
	}
	
	//Read CardID from User Zone
	return(Read(zone, buffer));
    3528:	0c 94 35 1a 	jmp	0x346a	; 0x346a <Read>

0000352c <RcSetReg>:
     RegVal        The value to be written
Return:
     None
**************************************************/
void RcSetReg(unsigned char RegAddr, unsigned char RegVal)
{ 
    352c:	cf 93       	push	r28
    352e:	df 93       	push	r29
    3530:	1f 92       	push	r1
    3532:	cd b7       	in	r28, 0x3d	; 61
    3534:	de b7       	in	r29, 0x3e	; 62

	// shift addr, bits[6:1] defines address
	RegAddr = RegAddr << 1;
    3536:	88 0f       	add	r24, r24
	
	//clear bits 7 and 0 for SPI write address
    RegAddr &= 0x7e;   
	Spi_ss_low;
    3538:	71 98       	cbi	0x0e, 1	; 14
    
	Spi_send(RegAddr);
    353a:	8e 77       	andi	r24, 0x7E	; 126
    353c:	69 83       	std	Y+1, r22	; 0x01
    353e:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <Spi_send>
	Spi_send(RegVal);
    3542:	69 81       	ldd	r22, Y+1	; 0x01
    3544:	86 2f       	mov	r24, r22
    3546:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <Spi_send>

	Spi_ss_high;
    354a:	71 9a       	sbi	0x0e, 1	; 14

}
    354c:	0f 90       	pop	r0
    354e:	df 91       	pop	r29
    3550:	cf 91       	pop	r28
    3552:	08 95       	ret

00003554 <RcGetReg>:
{
    unsigned char RegVal;
    //short status;	
	
	// shift addr, bits[6:1] defines address
	RegAddr = RegAddr << 1;
    3554:	88 0f       	add	r24, r24
	
	// for SPI read, clear bit 0 and set bit 
	RegAddr = (RegAddr & 0xfe) | 0x80; 
    3556:	8e 77       	andi	r24, 0x7E	; 126
    
	Spi_ss_low;
    3558:	71 98       	cbi	0x0e, 1	; 14
	
	// send address byte w/ read bit(7) set 
	Spi_send(RegAddr);
    355a:	80 68       	ori	r24, 0x80	; 128
    355c:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <Spi_send>
	
	// read register value
	RegVal = Spi_receive();
    3560:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <Spi_receive>
	
	Spi_ss_high;
    3564:	71 9a       	sbi	0x0e, 1	; 14
		
    return RegVal;
}
    3566:	08 95       	ret

00003568 <RcModifyReg>:
     MaskByte      Only the corresponding bit '1' is valid,
Return:
     None
**************************************************/
void RcModifyReg(unsigned char RegAddr, unsigned char ModifyVal, unsigned char MaskByte)
{
    3568:	1f 93       	push	r17
    356a:	cf 93       	push	r28
    356c:	df 93       	push	r29
    356e:	00 d0       	rcall	.+0      	; 0x3570 <RcModifyReg+0x8>
    3570:	cd b7       	in	r28, 0x3d	; 61
    3572:	de b7       	in	r29, 0x3e	; 62
    3574:	18 2f       	mov	r17, r24
    unsigned char RegVal;
    RegVal = RcGetReg(RegAddr);
    3576:	4a 83       	std	Y+2, r20	; 0x02
    3578:	69 83       	std	Y+1, r22	; 0x01
    357a:	0e 94 aa 1a 	call	0x3554	; 0x3554 <RcGetReg>
    if(ModifyVal)
    357e:	69 81       	ldd	r22, Y+1	; 0x01
    3580:	4a 81       	ldd	r20, Y+2	; 0x02
    3582:	66 23       	and	r22, r22
    3584:	19 f0       	breq	.+6      	; 0x358c <RcModifyReg+0x24>
    {
        RegVal |= MaskByte;
    3586:	68 2f       	mov	r22, r24
    3588:	64 2b       	or	r22, r20
    358a:	03 c0       	rjmp	.+6      	; 0x3592 <RcModifyReg+0x2a>
    }
    else
    {
        RegVal &= (~MaskByte);
    358c:	64 2f       	mov	r22, r20
    358e:	60 95       	com	r22
    3590:	68 23       	and	r22, r24
    }
    RcSetReg(RegAddr, RegVal);
    3592:	81 2f       	mov	r24, r17
}
    3594:	0f 90       	pop	r0
    3596:	0f 90       	pop	r0
    3598:	df 91       	pop	r29
    359a:	cf 91       	pop	r28
    359c:	1f 91       	pop	r17
    }
    else
    {
        RegVal &= (~MaskByte);
    }
    RcSetReg(RegAddr, RegVal);
    359e:	0c 94 96 1a 	jmp	0x352c	; 0x352c <RcSetReg>

000035a2 <Spi_initialize>:
 * \param ucData is data to be sent.
 * \return ucData1 is received data from SPI
 */
void Spi_send_only ( uint8_t ucData )
{
   Spi_send_and_receive(ucData);
    35a2:	cf 93       	push	r28
    35a4:	df 93       	push	r29
    35a6:	1f 92       	push	r1
    35a8:	cd b7       	in	r28, 0x3d	; 61
    35aa:	de b7       	in	r29, 0x3e	; 62
    35ac:	84 b1       	in	r24, 0x04	; 4
    35ae:	87 60       	ori	r24, 0x07	; 7
    35b0:	84 b9       	out	0x04, r24	; 4
    35b2:	23 98       	cbi	0x04, 3	; 4
    35b4:	28 9a       	sbi	0x05, 0	; 5
    35b6:	82 e0       	ldi	r24, 0x02	; 2
    35b8:	8d b9       	out	0x0d, r24	; 13
    35ba:	71 9a       	sbi	0x0e, 1	; 14
    35bc:	29 98       	cbi	0x05, 1	; 5
    35be:	82 e5       	ldi	r24, 0x52	; 82
    35c0:	8c bd       	out	0x2c, r24	; 44
    35c2:	8d b5       	in	r24, 0x2d	; 45
    35c4:	89 83       	std	Y+1, r24	; 0x01
    35c6:	8e b5       	in	r24, 0x2e	; 46
    35c8:	89 83       	std	Y+1, r24	; 0x01
    35ca:	0f 90       	pop	r0
    35cc:	df 91       	pop	r29
    35ce:	cf 91       	pop	r28
    35d0:	08 95       	ret

000035d2 <Spi_send>:

void Spi_send ( uint8_t ucData )
{
	
    /* Start transmission */
    SPDR  = ucData ;     // Send Character
    35d2:	8e bd       	out	0x2e, r24	; 46

    /* Wait for transmission complete */
    while (!(SPSR & (1 << SPIF)))
    35d4:	0d b4       	in	r0, 0x2d	; 45
    35d6:	07 fe       	sbrs	r0, 7
    35d8:	fd cf       	rjmp	.-6      	; 0x35d4 <Spi_send+0x2>
    {
        // Wait until Char is sent
    }

}
    35da:	08 95       	ret

000035dc <Spi_receive>:

uint8_t Spi_receive ()
{
	
    /* Start transmission */
    SPDR  = 0xff;     // Send dummy byte
    35dc:	8f ef       	ldi	r24, 0xFF	; 255
    35de:	8e bd       	out	0x2e, r24	; 46

    /* Wait for transmission complete */
    while (!(SPSR & (1 << SPIF)))
    35e0:	0d b4       	in	r0, 0x2d	; 45
    35e2:	07 fe       	sbrs	r0, 7
    35e4:	fd cf       	rjmp	.-6      	; 0x35e0 <Spi_receive+0x4>
    {
        // Wait until Char is sent
    }

    /* Return the received byte*/
    return SPDR;
    35e6:	8e b5       	in	r24, 0x2e	; 46
}
    35e8:	08 95       	ret

000035ea <mifareInit>:
*/

/*Initialize the processor and RC522*/
void mifareInit(void)
{
	Spi_initialize();
    35ea:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <Spi_initialize>
	Rc522Init();	
    35ee:	0c 94 f0 15 	jmp	0x2be0	; 0x2be0 <Rc522Init>

000035f2 <main>:

int main(void){

	
	// SINGLE-CHIP SOLUTION
	cli(); //make sure interrupts are disabled before initialization.
    35f2:	f8 94       	cli
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    35f4:	0f b6       	in	r0, 0x3f	; 63
    35f6:	f8 94       	cli
    35f8:	a8 95       	wdr
    35fa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    35fe:	88 61       	ori	r24, 0x18	; 24
    3600:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3604:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3608:	0f be       	out	0x3f, r0	; 63
	wdt_disable();

	// init serial for PinPointSystem LCD output
	serial_init(NULL);
    360a:	80 e0       	ldi	r24, 0x00	; 0
    360c:	90 e0       	ldi	r25, 0x00	; 0
    360e:	0e 94 09 27 	call	0x4e12	; 0x4e12 <serial_init>
#ifdef DEBUG_UART
	debugMsgStrConst("\r\nUART TEST\r\n ");
#endif

    // Init the timer system for the MAC
    timerInit();
    3612:	0e 94 11 26 	call	0x4c22	; 0x4c22 <timerInit>

#if (DEVICE_CONNECTED == ACA_MACHINE)
	InitTimerZero();	//timer for MDC machine comm.
    3616:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <InitTimerZero>
#endif

    sei();
    361a:	78 94       	sei
{
	getPressedKey();
	_delay_ms(1000);	
}*/
    // Init the (sample) application
    appInit();
    361c:	0e 94 3a 03 	call	0x674	; 0x674 <appInit>
#if( DEBUG )
	Beeps(2);
#endif
       
    // Initialize mifare
	mifareInit();
    3620:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <mifareInit>
    for(;;)
    {
        // Turn interrupts on if they are off.  They should always be on
        // at this point in the loop, so just turn them on every time, in
        // case interrupts were inadvertently turned off elsewhere.
        sei();
    3624:	78 94       	sei

        // Task functions called from main loop.  Either add your own task loop
        // or edit the example appTask().
        appTask();
    3626:	0e 94 77 04 	call	0x8ee	; 0x8ee <appTask>
        macTask();
    362a:	0e 94 df 21 	call	0x43be	; 0x43be <macTask>

    }
    362e:	fa cf       	rjmp	.-12     	; 0x3624 <main+0x32>

00003630 <isSleeping>:
    {
    }
}

void radioSetModulation(u8 modulation)
{
    3630:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    3634:	86 95       	lsr	r24
    3636:	81 70       	andi	r24, 0x01	; 1
    3638:	08 95       	ret

0000363a <radioGetPartnum>:
    363a:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <radio_part_number.3584>
    363e:	81 11       	cpse	r24, r1
    3640:	04 c0       	rjmp	.+8      	; 0x364a <radioGetPartnum+0x10>
    3642:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__TEXT_REGION_LENGTH__+0x7e015c>
    3646:	80 93 33 05 	sts	0x0533, r24	; 0x800533 <radio_part_number.3584>
    364a:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <radio_part_number.3584>
    364e:	08 95       	ret

00003650 <radioRxStartEvent>:
    3650:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__TEXT_REGION_LENGTH__+0x7e0146>
    3654:	8f 71       	andi	r24, 0x1F	; 31
    3656:	80 93 34 05 	sts	0x0534, r24	; 0x800534 <rssi_val>
    365a:	10 92 47 0c 	sts	0x0C47, r1	; 0x800c47 <macConfig+0x17>
    365e:	08 95       	ret

00003660 <radioGetSavedRssiValue>:
    3660:	0e 94 1d 1b 	call	0x363a	; 0x363a <radioGetPartnum>
    3664:	82 30       	cpi	r24, 0x02	; 2
    3666:	19 f0       	breq	.+6      	; 0x366e <radioGetSavedRssiValue+0xe>
    3668:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <rssi_val>
    366c:	08 95       	ret
    366e:	86 e1       	ldi	r24, 0x16	; 22
    3670:	08 95       	ret

00003672 <radioGetSavedLqiValue>:
    3672:	80 91 ac 0b 	lds	r24, 0x0BAC	; 0x800bac <mac_buffer_rx+0x80>
    3676:	08 95       	ret

00003678 <radioSetOperatingChannel>:
    3678:	cf 93       	push	r28
    367a:	95 ef       	ldi	r25, 0xF5	; 245
    367c:	98 0f       	add	r25, r24
    367e:	90 31       	cpi	r25, 0x10	; 16
    3680:	18 f5       	brcc	.+70     	; 0x36c8 <radioSetOperatingChannel+0x50>
    3682:	c8 2f       	mov	r28, r24
    3684:	0e 94 18 1b 	call	0x3630	; 0x3630 <isSleeping>
    3688:	81 11       	cpse	r24, r1
    368a:	20 c0       	rjmp	.+64     	; 0x36cc <radioSetOperatingChannel+0x54>
    368c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x7e0148>
    3690:	8f 71       	andi	r24, 0x1F	; 31
    3692:	8c 17       	cp	r24, r28
    3694:	e9 f0       	breq	.+58     	; 0x36d0 <radioSetOperatingChannel+0x58>
    3696:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x7e0148>
    369a:	80 7e       	andi	r24, 0xE0	; 224
    369c:	9c 2f       	mov	r25, r28
    369e:	9f 71       	andi	r25, 0x1F	; 31
    36a0:	89 2b       	or	r24, r25
    36a2:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <__TEXT_REGION_LENGTH__+0x7e0148>
    36a6:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    36aa:	8f 71       	andi	r24, 0x1F	; 31
    36ac:	86 30       	cpi	r24, 0x06	; 6
    36ae:	11 f0       	breq	.+4      	; 0x36b4 <radioSetOperatingChannel+0x3c>
    36b0:	89 30       	cpi	r24, 0x09	; 9
    36b2:	21 f4       	brne	.+8      	; 0x36bc <radioSetOperatingChannel+0x44>
    36b4:	8d e2       	ldi	r24, 0x2D	; 45
    36b6:	91 e0       	ldi	r25, 0x01	; 1
    36b8:	01 97       	sbiw	r24, 0x01	; 1
    36ba:	f1 f7       	brne	.-4      	; 0x36b8 <radioSetOperatingChannel+0x40>
    36bc:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x7e0148>
    36c0:	8f 71       	andi	r24, 0x1F	; 31
    36c2:	8c 13       	cpse	r24, r28
    36c4:	07 c0       	rjmp	.+14     	; 0x36d4 <radioSetOperatingChannel+0x5c>
    36c6:	04 c0       	rjmp	.+8      	; 0x36d0 <radioSetOperatingChannel+0x58>
    36c8:	82 e4       	ldi	r24, 0x42	; 66
    36ca:	05 c0       	rjmp	.+10     	; 0x36d6 <radioSetOperatingChannel+0x5e>
    36cc:	84 e4       	ldi	r24, 0x44	; 68
    36ce:	03 c0       	rjmp	.+6      	; 0x36d6 <radioSetOperatingChannel+0x5e>
    36d0:	80 e4       	ldi	r24, 0x40	; 64
    36d2:	01 c0       	rjmp	.+2      	; 0x36d6 <radioSetOperatingChannel+0x5e>
    36d4:	83 e4       	ldi	r24, 0x43	; 67
    36d6:	cf 91       	pop	r28
    36d8:	08 95       	ret

000036da <radioSetClockSpeed>:
    36da:	66 30       	cpi	r22, 0x06	; 6
    36dc:	98 f4       	brcc	.+38     	; 0x3704 <radioSetClockSpeed+0x2a>
    36de:	81 11       	cpse	r24, r1
    36e0:	04 c0       	rjmp	.+8      	; 0x36ea <radioSetClockSpeed+0x10>
    36e2:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    36e6:	88 60       	ori	r24, 0x08	; 8
    36e8:	03 c0       	rjmp	.+6      	; 0x36f0 <radioSetClockSpeed+0x16>
    36ea:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    36ee:	87 7f       	andi	r24, 0xF7	; 247
    36f0:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    36f4:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    36f8:	88 7f       	andi	r24, 0xF8	; 248
    36fa:	68 2b       	or	r22, r24
    36fc:	60 93 43 01 	sts	0x0143, r22	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    3700:	80 e4       	ldi	r24, 0x40	; 64
    3702:	08 95       	ret
    3704:	82 e4       	ldi	r24, 0x42	; 66
    3706:	08 95       	ret

00003708 <radioGetTrxState>:
    3708:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    370c:	8f 71       	andi	r24, 0x1F	; 31
    370e:	08 95       	ret

00003710 <radioResetStateMachine>:
    3710:	e9 e3       	ldi	r30, 0x39	; 57
    3712:	f1 e0       	ldi	r31, 0x01	; 1
    3714:	80 81       	ld	r24, Z
    3716:	8d 7f       	andi	r24, 0xFD	; 253
    3718:	80 83       	st	Z, r24
    371a:	8d e0       	ldi	r24, 0x0D	; 13
    371c:	90 e0       	ldi	r25, 0x00	; 0
    371e:	01 97       	sbiw	r24, 0x01	; 1
    3720:	f1 f7       	brne	.-4      	; 0x371e <radioResetStateMachine+0xe>
    3722:	e2 e4       	ldi	r30, 0x42	; 66
    3724:	f1 e0       	ldi	r31, 0x01	; 1
    3726:	80 81       	ld	r24, Z
    3728:	80 7e       	andi	r24, 0xE0	; 224
    372a:	83 60       	ori	r24, 0x03	; 3
    372c:	80 83       	st	Z, r24
    372e:	83 e0       	ldi	r24, 0x03	; 3
    3730:	90 e0       	ldi	r25, 0x00	; 0
    3732:	01 97       	sbiw	r24, 0x01	; 1
    3734:	f1 f7       	brne	.-4      	; 0x3732 <radioResetStateMachine+0x22>
    3736:	08 95       	ret

00003738 <radioResetTrx>:
    3738:	e9 e3       	ldi	r30, 0x39	; 57
    373a:	f1 e0       	ldi	r31, 0x01	; 1
    373c:	80 81       	ld	r24, Z
    373e:	81 60       	ori	r24, 0x01	; 1
    3740:	80 83       	st	Z, r24
    3742:	80 81       	ld	r24, Z
    3744:	8d 7f       	andi	r24, 0xFD	; 253
    3746:	80 83       	st	Z, r24
    3748:	8d e0       	ldi	r24, 0x0D	; 13
    374a:	90 e0       	ldi	r25, 0x00	; 0
    374c:	01 97       	sbiw	r24, 0x01	; 1
    374e:	f1 f7       	brne	.-4      	; 0x374c <radioResetTrx+0x14>
    3750:	80 81       	ld	r24, Z
    3752:	8e 7f       	andi	r24, 0xFE	; 254
    3754:	80 83       	st	Z, r24
    3756:	08 95       	ret

00003758 <radioInit>:
    3758:	0f 93       	push	r16
    375a:	1f 93       	push	r17
    375c:	cf 93       	push	r28
    375e:	df 93       	push	r29
    3760:	1f 92       	push	r1
    3762:	cd b7       	in	r28, 0x3d	; 61
    3764:	de b7       	in	r29, 0x3e	; 62
    3766:	0d ef       	ldi	r16, 0xFD	; 253
    3768:	13 e0       	ldi	r17, 0x03	; 3
    376a:	f8 01       	movw	r30, r16
    376c:	31 97       	sbiw	r30, 0x01	; 1
    376e:	f1 f7       	brne	.-4      	; 0x376c <radioInit+0x14>
    3770:	89 83       	std	Y+1, r24	; 0x01
    3772:	0e 94 9c 1b 	call	0x3738	; 0x3738 <radioResetTrx>
    3776:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    377a:	90 7e       	andi	r25, 0xE0	; 224
    377c:	93 60       	ori	r25, 0x03	; 3
    377e:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3782:	f8 01       	movw	r30, r16
    3784:	31 97       	sbiw	r30, 0x01	; 1
    3786:	f1 f7       	brne	.-4      	; 0x3784 <radioInit+0x2c>
    3788:	9c e4       	ldi	r25, 0x4C	; 76
    378a:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <__TEXT_REGION_LENGTH__+0x7e014e>
    378e:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x7e0149>
    3792:	90 7f       	andi	r25, 0xF0	; 240
    3794:	97 60       	ori	r25, 0x07	; 7
    3796:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <__TEXT_REGION_LENGTH__+0x7e0149>
    379a:	89 81       	ldd	r24, Y+1	; 0x01
    379c:	81 11       	cpse	r24, r1
    379e:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <calibrate_rc_osc>
    37a2:	80 e4       	ldi	r24, 0x40	; 64
    37a4:	0f 90       	pop	r0
    37a6:	df 91       	pop	r29
    37a8:	cf 91       	pop	r28
    37aa:	1f 91       	pop	r17
    37ac:	0f 91       	pop	r16
    37ae:	08 95       	ret

000037b0 <radioUseAutoTxCrc>:
    37b0:	cf 93       	push	r28
    37b2:	c8 2f       	mov	r28, r24
    37b4:	0e 94 1d 1b 	call	0x363a	; 0x363a <radioGetPartnum>
    37b8:	82 30       	cpi	r24, 0x02	; 2
    37ba:	31 f4       	brne	.+12     	; 0x37c8 <radioUseAutoTxCrc+0x18>
    37bc:	80 91 05 00 	lds	r24, 0x0005	; 0x800005 <__TEXT_REGION_LENGTH__+0x7e0005>
    37c0:	c0 fb       	bst	r28, 0
    37c2:	87 f9       	bld	r24, 7
    37c4:	80 93 05 00 	sts	0x0005, r24	; 0x800005 <__TEXT_REGION_LENGTH__+0x7e0005>
    37c8:	0e 94 1d 1b 	call	0x363a	; 0x363a <radioGetPartnum>
    37cc:	83 30       	cpi	r24, 0x03	; 3
    37ce:	61 f4       	brne	.+24     	; 0x37e8 <radioUseAutoTxCrc+0x38>
    37d0:	20 91 04 00 	lds	r18, 0x0004	; 0x800004 <__TEXT_REGION_LENGTH__+0x7e0004>
    37d4:	30 e2       	ldi	r19, 0x20	; 32
    37d6:	c3 9f       	mul	r28, r19
    37d8:	c0 01       	movw	r24, r0
    37da:	11 24       	eor	r1, r1
    37dc:	80 72       	andi	r24, 0x20	; 32
    37de:	92 2f       	mov	r25, r18
    37e0:	9f 7d       	andi	r25, 0xDF	; 223
    37e2:	89 2b       	or	r24, r25
    37e4:	80 93 04 00 	sts	0x0004, r24	; 0x800004 <__TEXT_REGION_LENGTH__+0x7e0004>
    37e8:	cf 91       	pop	r28
    37ea:	08 95       	ret

000037ec <radioIsBusy>:
    37ec:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    37f0:	98 2f       	mov	r25, r24
    37f2:	9f 70       	andi	r25, 0x0F	; 15
    37f4:	91 50       	subi	r25, 0x01	; 1
    37f6:	92 30       	cpi	r25, 0x02	; 2
    37f8:	38 f0       	brcs	.+14     	; 0x3808 <radioIsBusy+0x1c>
    37fa:	98 2f       	mov	r25, r24
    37fc:	9f 71       	andi	r25, 0x1F	; 31
    37fe:	81 e0       	ldi	r24, 0x01	; 1
    3800:	9e 31       	cpi	r25, 0x1E	; 30
    3802:	19 f0       	breq	.+6      	; 0x380a <radioIsBusy+0x1e>
    3804:	80 e0       	ldi	r24, 0x00	; 0
    3806:	08 95       	ret
    3808:	81 e0       	ldi	r24, 0x01	; 1
    380a:	08 95       	ret

0000380c <radioSetTrxState>:
    380c:	cf 93       	push	r28
    380e:	c8 2f       	mov	r28, r24
    3810:	88 ef       	ldi	r24, 0xF8	; 248
    3812:	8c 0f       	add	r24, r28
    3814:	82 30       	cpi	r24, 0x02	; 2
    3816:	38 f0       	brcs	.+14     	; 0x3826 <radioSetTrxState+0x1a>
    3818:	8c 2f       	mov	r24, r28
    381a:	8f 7e       	andi	r24, 0xEF	; 239
    381c:	86 30       	cpi	r24, 0x06	; 6
    381e:	19 f0       	breq	.+6      	; 0x3826 <radioSetTrxState+0x1a>
    3820:	c9 31       	cpi	r28, 0x19	; 25
    3822:	09 f0       	breq	.+2      	; 0x3826 <radioSetTrxState+0x1a>
    3824:	55 c0       	rjmp	.+170    	; 0x38d0 <radioSetTrxState+0xc4>
    3826:	0e 94 18 1b 	call	0x3630	; 0x3630 <isSleeping>
    382a:	81 11       	cpse	r24, r1
    382c:	53 c0       	rjmp	.+166    	; 0x38d4 <radioSetTrxState+0xc8>
    382e:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <radioIsBusy>
    3832:	81 11       	cpse	r24, r1
    3834:	fc cf       	rjmp	.-8      	; 0x382e <radioSetTrxState+0x22>
    3836:	0e 94 1d 1b 	call	0x363a	; 0x363a <radioGetPartnum>
    383a:	82 30       	cpi	r24, 0x02	; 2
    383c:	39 f4       	brne	.+14     	; 0x384c <radioSetTrxState+0x40>
    383e:	0e 94 66 24 	call	0x48cc	; 0x48cc <macIsScanning>
    3842:	88 23       	and	r24, r24
    3844:	19 f0       	breq	.+6      	; 0x384c <radioSetTrxState+0x40>
    3846:	c6 31       	cpi	r28, 0x16	; 22
    3848:	09 f4       	brne	.+2      	; 0x384c <radioSetTrxState+0x40>
    384a:	c6 e0       	ldi	r28, 0x06	; 6
    384c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    3850:	8f 71       	andi	r24, 0x1F	; 31
    3852:	c8 17       	cp	r28, r24
    3854:	09 f4       	brne	.+2      	; 0x3858 <radioSetTrxState+0x4c>
    3856:	40 c0       	rjmp	.+128    	; 0x38d8 <radioSetTrxState+0xcc>
    3858:	c8 30       	cpi	r28, 0x08	; 8
    385a:	19 f4       	brne	.+6      	; 0x3862 <radioSetTrxState+0x56>
    385c:	0e 94 88 1b 	call	0x3710	; 0x3710 <radioResetStateMachine>
    3860:	31 c0       	rjmp	.+98     	; 0x38c4 <radioSetTrxState+0xb8>
    3862:	c9 31       	cpi	r28, 0x19	; 25
    3864:	59 f4       	brne	.+22     	; 0x387c <radioSetTrxState+0x70>
    3866:	89 30       	cpi	r24, 0x09	; 9
    3868:	e1 f0       	breq	.+56     	; 0x38a2 <radioSetTrxState+0x96>
    386a:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    386e:	90 7e       	andi	r25, 0xE0	; 224
    3870:	99 60       	ori	r25, 0x09	; 9
    3872:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3876:	86 31       	cpi	r24, 0x16	; 22
    3878:	81 f4       	brne	.+32     	; 0x389a <radioSetTrxState+0x8e>
    387a:	0c c0       	rjmp	.+24     	; 0x3894 <radioSetTrxState+0x88>
    387c:	c6 31       	cpi	r28, 0x16	; 22
    387e:	89 f4       	brne	.+34     	; 0x38a2 <radioSetTrxState+0x96>
    3880:	89 30       	cpi	r24, 0x09	; 9
    3882:	79 f0       	breq	.+30     	; 0x38a2 <radioSetTrxState+0x96>
    3884:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3888:	90 7e       	andi	r25, 0xE0	; 224
    388a:	99 60       	ori	r25, 0x09	; 9
    388c:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3890:	89 31       	cpi	r24, 0x19	; 25
    3892:	19 f4       	brne	.+6      	; 0x389a <radioSetTrxState+0x8e>
    3894:	e3 e0       	ldi	r30, 0x03	; 3
    3896:	f0 e0       	ldi	r31, 0x00	; 0
    3898:	02 c0       	rjmp	.+4      	; 0x389e <radioSetTrxState+0x92>
    389a:	e9 e6       	ldi	r30, 0x69	; 105
    389c:	f1 e0       	ldi	r31, 0x01	; 1
    389e:	31 97       	sbiw	r30, 0x01	; 1
    38a0:	f1 f7       	brne	.-4      	; 0x389e <radioSetTrxState+0x92>
    38a2:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    38a6:	90 7e       	andi	r25, 0xE0	; 224
    38a8:	2c 2f       	mov	r18, r28
    38aa:	2f 71       	andi	r18, 0x1F	; 31
    38ac:	92 2b       	or	r25, r18
    38ae:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    38b2:	88 30       	cpi	r24, 0x08	; 8
    38b4:	19 f4       	brne	.+6      	; 0x38bc <radioSetTrxState+0xb0>
    38b6:	89 e6       	ldi	r24, 0x69	; 105
    38b8:	91 e0       	ldi	r25, 0x01	; 1
    38ba:	02 c0       	rjmp	.+4      	; 0x38c0 <radioSetTrxState+0xb4>
    38bc:	83 e0       	ldi	r24, 0x03	; 3
    38be:	90 e0       	ldi	r25, 0x00	; 0
    38c0:	01 97       	sbiw	r24, 0x01	; 1
    38c2:	f1 f7       	brne	.-4      	; 0x38c0 <radioSetTrxState+0xb4>
    38c4:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    38c8:	8f 71       	andi	r24, 0x1F	; 31
    38ca:	8c 13       	cpse	r24, r28
    38cc:	07 c0       	rjmp	.+14     	; 0x38dc <radioSetTrxState+0xd0>
    38ce:	04 c0       	rjmp	.+8      	; 0x38d8 <radioSetTrxState+0xcc>
    38d0:	82 e4       	ldi	r24, 0x42	; 66
    38d2:	05 c0       	rjmp	.+10     	; 0x38de <radioSetTrxState+0xd2>
    38d4:	84 e4       	ldi	r24, 0x44	; 68
    38d6:	03 c0       	rjmp	.+6      	; 0x38de <radioSetTrxState+0xd2>
    38d8:	80 e4       	ldi	r24, 0x40	; 64
    38da:	01 c0       	rjmp	.+2      	; 0x38de <radioSetTrxState+0xd2>
    38dc:	83 e4       	ldi	r24, 0x43	; 67
    38de:	cf 91       	pop	r28
    38e0:	08 95       	ret

000038e2 <radioTrxEndEvent>:
    38e2:	cf 93       	push	r28
    38e4:	df 93       	push	r29
    38e6:	00 d0       	rcall	.+0      	; 0x38e8 <radioTrxEndEvent+0x6>
    38e8:	00 d0       	rcall	.+0      	; 0x38ea <radioTrxEndEvent+0x8>
    38ea:	1f 92       	push	r1
    38ec:	cd b7       	in	r28, 0x3d	; 61
    38ee:	de b7       	in	r29, 0x3e	; 62
    38f0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    38f4:	8f 71       	andi	r24, 0x1F	; 31
    38f6:	8c 83       	std	Y+4, r24	; 0x04
    38f8:	8c 81       	ldd	r24, Y+4	; 0x04
    38fa:	81 31       	cpi	r24, 0x11	; 17
    38fc:	51 f0       	breq	.+20     	; 0x3912 <radioTrxEndEvent+0x30>
    38fe:	8c 81       	ldd	r24, Y+4	; 0x04
    3900:	86 30       	cpi	r24, 0x06	; 6
    3902:	39 f0       	breq	.+14     	; 0x3912 <radioTrxEndEvent+0x30>
    3904:	8c 81       	ldd	r24, Y+4	; 0x04
    3906:	81 30       	cpi	r24, 0x01	; 1
    3908:	21 f0       	breq	.+8      	; 0x3912 <radioTrxEndEvent+0x30>
    390a:	8c 81       	ldd	r24, Y+4	; 0x04
    390c:	86 31       	cpi	r24, 0x16	; 22
    390e:	09 f0       	breq	.+2      	; 0x3912 <radioTrxEndEvent+0x30>
    3910:	5f c0       	rjmp	.+190    	; 0x39d0 <radioTrxEndEvent+0xee>
    3912:	40 91 7b 01 	lds	r20, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7e017b>
    3916:	50 e0       	ldi	r21, 0x00	; 0
    3918:	60 e8       	ldi	r22, 0x80	; 128
    391a:	71 e0       	ldi	r23, 0x01	; 1
    391c:	8d e2       	ldi	r24, 0x2D	; 45
    391e:	9b e0       	ldi	r25, 0x0B	; 11
    3920:	0e 94 f7 31 	call	0x63ee	; 0x63ee <memcpy>
    3924:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7e017b>
    3928:	80 93 2c 0b 	sts	0x0B2C, r24	; 0x800b2c <mac_buffer_rx>
    392c:	e0 91 7b 01 	lds	r30, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7e017b>
    3930:	f0 e0       	ldi	r31, 0x00	; 0
    3932:	e4 5d       	subi	r30, 0xD4	; 212
    3934:	f4 4f       	sbci	r31, 0xF4	; 244
    3936:	80 81       	ld	r24, Z
    3938:	80 93 ac 0b 	sts	0x0BAC, r24	; 0x800bac <mac_buffer_rx+0x80>
    393c:	19 82       	std	Y+1, r1	; 0x01
    393e:	1b 82       	std	Y+3, r1	; 0x03
    3940:	1a 82       	std	Y+2, r1	; 0x02
    3942:	20 91 2d 0b 	lds	r18, 0x0B2D	; 0x800b2d <mac_buffer_rx+0x1>
    3946:	80 91 2e 0b 	lds	r24, 0x0B2E	; 0x800b2e <mac_buffer_rx+0x2>
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	98 2f       	mov	r25, r24
    394e:	88 27       	eor	r24, r24
    3950:	82 0f       	add	r24, r18
    3952:	91 1d       	adc	r25, r1
    3954:	90 93 2e 0b 	sts	0x0B2E, r25	; 0x800b2e <mac_buffer_rx+0x2>
    3958:	80 93 2d 0b 	sts	0x0B2D, r24	; 0x800b2d <mac_buffer_rx+0x1>
    395c:	81 36       	cpi	r24, 0x61	; 97
    395e:	28 e8       	ldi	r18, 0x88	; 136
    3960:	92 07       	cpc	r25, r18
    3962:	09 f1       	breq	.+66     	; 0x39a6 <radioTrxEndEvent+0xc4>
    3964:	40 f4       	brcc	.+16     	; 0x3976 <radioTrxEndEvent+0x94>
    3966:	83 30       	cpi	r24, 0x03	; 3
    3968:	28 e0       	ldi	r18, 0x08	; 8
    396a:	92 07       	cpc	r25, r18
    396c:	81 f0       	breq	.+32     	; 0x398e <radioTrxEndEvent+0xac>
    396e:	81 15       	cp	r24, r1
    3970:	90 48       	sbci	r25, 0x80	; 128
    3972:	99 f0       	breq	.+38     	; 0x399a <radioTrxEndEvent+0xb8>
    3974:	28 c0       	rjmp	.+80     	; 0x39c6 <radioTrxEndEvent+0xe4>
    3976:	83 36       	cpi	r24, 0x63	; 99
    3978:	2c e8       	ldi	r18, 0x8C	; 140
    397a:	92 07       	cpc	r25, r18
    397c:	01 f1       	breq	.+64     	; 0x39be <radioTrxEndEvent+0xdc>
    397e:	83 36       	cpi	r24, 0x63	; 99
    3980:	28 ec       	ldi	r18, 0xC8	; 200
    3982:	92 07       	cpc	r25, r18
    3984:	d1 f0       	breq	.+52     	; 0x39ba <radioTrxEndEvent+0xd8>
    3986:	83 36       	cpi	r24, 0x63	; 99
    3988:	98 48       	sbci	r25, 0x88	; 136
    398a:	e9 f4       	brne	.+58     	; 0x39c6 <radioTrxEndEvent+0xe4>
    398c:	0e c0       	rjmp	.+28     	; 0x39aa <radioTrxEndEvent+0xc8>
    398e:	80 91 38 0c 	lds	r24, 0x0C38	; 0x800c38 <macConfig+0x8>
    3992:	88 23       	and	r24, r24
    3994:	c1 f0       	breq	.+48     	; 0x39c6 <radioTrxEndEvent+0xe4>
    3996:	85 e1       	ldi	r24, 0x15	; 21
    3998:	15 c0       	rjmp	.+42     	; 0x39c4 <radioTrxEndEvent+0xe2>
    399a:	0e 94 66 24 	call	0x48cc	; 0x48cc <macIsScanning>
    399e:	88 23       	and	r24, r24
    39a0:	91 f0       	breq	.+36     	; 0x39c6 <radioTrxEndEvent+0xe4>
    39a2:	84 e1       	ldi	r24, 0x14	; 20
    39a4:	0f c0       	rjmp	.+30     	; 0x39c4 <radioTrxEndEvent+0xe2>
    39a6:	80 e1       	ldi	r24, 0x10	; 16
    39a8:	0d c0       	rjmp	.+26     	; 0x39c4 <radioTrxEndEvent+0xe2>
    39aa:	80 91 36 0b 	lds	r24, 0x0B36	; 0x800b36 <mac_buffer_rx+0xa>
    39ae:	82 30       	cpi	r24, 0x02	; 2
    39b0:	31 f0       	breq	.+12     	; 0x39be <radioTrxEndEvent+0xdc>
    39b2:	8b 3b       	cpi	r24, 0xBB	; 187
    39b4:	31 f0       	breq	.+12     	; 0x39c2 <radioTrxEndEvent+0xe0>
    39b6:	81 30       	cpi	r24, 0x01	; 1
    39b8:	31 f4       	brne	.+12     	; 0x39c6 <radioTrxEndEvent+0xe4>
    39ba:	87 e1       	ldi	r24, 0x17	; 23
    39bc:	03 c0       	rjmp	.+6      	; 0x39c4 <radioTrxEndEvent+0xe2>
    39be:	88 e1       	ldi	r24, 0x18	; 24
    39c0:	01 c0       	rjmp	.+2      	; 0x39c4 <radioTrxEndEvent+0xe2>
    39c2:	89 e1       	ldi	r24, 0x19	; 25
    39c4:	89 83       	std	Y+1, r24	; 0x01
    39c6:	ce 01       	movw	r24, r28
    39c8:	01 96       	adiw	r24, 0x01	; 1
    39ca:	0e 94 94 21 	call	0x4328	; 0x4328 <mac_put_event>
    39ce:	35 c0       	rjmp	.+106    	; 0x3a3a <radioTrxEndEvent+0x158>
    39d0:	8c 81       	ldd	r24, Y+4	; 0x04
    39d2:	82 30       	cpi	r24, 0x02	; 2
    39d4:	49 f0       	breq	.+18     	; 0x39e8 <radioTrxEndEvent+0x106>
    39d6:	8c 81       	ldd	r24, Y+4	; 0x04
    39d8:	82 31       	cpi	r24, 0x12	; 18
    39da:	31 f0       	breq	.+12     	; 0x39e8 <radioTrxEndEvent+0x106>
    39dc:	8c 81       	ldd	r24, Y+4	; 0x04
    39de:	89 31       	cpi	r24, 0x19	; 25
    39e0:	19 f0       	breq	.+6      	; 0x39e8 <radioTrxEndEvent+0x106>
    39e2:	8c 81       	ldd	r24, Y+4	; 0x04
    39e4:	89 30       	cpi	r24, 0x09	; 9
    39e6:	49 f5       	brne	.+82     	; 0x3a3a <radioTrxEndEvent+0x158>
    39e8:	10 92 47 0c 	sts	0x0C47, r1	; 0x800c47 <macConfig+0x17>
    39ec:	19 82       	std	Y+1, r1	; 0x01
    39ee:	1b 82       	std	Y+3, r1	; 0x03
    39f0:	1a 82       	std	Y+2, r1	; 0x02
    39f2:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    39f6:	82 95       	swap	r24
    39f8:	86 95       	lsr	r24
    39fa:	87 70       	andi	r24, 0x07	; 7
    39fc:	8d 83       	std	Y+5, r24	; 0x05
    39fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3a00:	83 30       	cpi	r24, 0x03	; 3
    3a02:	49 f0       	breq	.+18     	; 0x3a16 <radioTrxEndEvent+0x134>
    3a04:	20 f4       	brcc	.+8      	; 0x3a0e <radioTrxEndEvent+0x12c>
    3a06:	82 30       	cpi	r24, 0x02	; 2
    3a08:	40 f4       	brcc	.+16     	; 0x3a1a <radioTrxEndEvent+0x138>
    3a0a:	81 e1       	ldi	r24, 0x11	; 17
    3a0c:	05 c0       	rjmp	.+10     	; 0x3a18 <radioTrxEndEvent+0x136>
    3a0e:	85 30       	cpi	r24, 0x05	; 5
    3a10:	21 f4       	brne	.+8      	; 0x3a1a <radioTrxEndEvent+0x138>
    3a12:	82 e1       	ldi	r24, 0x12	; 18
    3a14:	01 c0       	rjmp	.+2      	; 0x3a18 <radioTrxEndEvent+0x136>
    3a16:	83 e1       	ldi	r24, 0x13	; 19
    3a18:	89 83       	std	Y+1, r24	; 0x01
    3a1a:	89 81       	ldd	r24, Y+1	; 0x01
    3a1c:	88 23       	and	r24, r24
    3a1e:	21 f0       	breq	.+8      	; 0x3a28 <radioTrxEndEvent+0x146>
    3a20:	ce 01       	movw	r24, r28
    3a22:	01 96       	adiw	r24, 0x01	; 1
    3a24:	0e 94 94 21 	call	0x4328	; 0x4328 <mac_put_event>
    3a28:	86 e1       	ldi	r24, 0x16	; 22
    3a2a:	0e 94 06 1c 	call	0x380c	; 0x380c <radioSetTrxState>
    3a2e:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
    3a32:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    3a36:	0e 94 99 2f 	call	0x5f32	; 0x5f32 <srand>
    3a3a:	0f 90       	pop	r0
    3a3c:	0f 90       	pop	r0
    3a3e:	0f 90       	pop	r0
    3a40:	0f 90       	pop	r0
    3a42:	0f 90       	pop	r0
    3a44:	df 91       	pop	r29
    3a46:	cf 91       	pop	r28
    3a48:	08 95       	ret

00003a4a <radioSendData>:
    3a4a:	0f 93       	push	r16
    3a4c:	1f 93       	push	r17
    3a4e:	cf 93       	push	r28
    3a50:	c8 2f       	mov	r28, r24
    3a52:	8b 01       	movw	r16, r22
    3a54:	87 fd       	sbrc	r24, 7
    3a56:	2b c0       	rjmp	.+86     	; 0x3aae <radioSendData+0x64>
    3a58:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <radioIsBusy>
    3a5c:	81 11       	cpse	r24, r1
    3a5e:	fc cf       	rjmp	.-8      	; 0x3a58 <radioSendData+0xe>
    3a60:	89 e1       	ldi	r24, 0x19	; 25
    3a62:	0e 94 06 1c 	call	0x380c	; 0x380c <radioSetTrxState>
    3a66:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    3a6a:	8f 71       	andi	r24, 0x1F	; 31
    3a6c:	89 31       	cpi	r24, 0x19	; 25
    3a6e:	c1 f7       	brne	.-16     	; 0x3a60 <radioSendData+0x16>
    3a70:	f8 01       	movw	r30, r16
    3a72:	85 81       	ldd	r24, Z+5	; 0x05
    3a74:	96 81       	ldd	r25, Z+6	; 0x06
    3a76:	90 93 46 0c 	sts	0x0C46, r25	; 0x800c46 <macConfig+0x16>
    3a7a:	80 93 45 0c 	sts	0x0C45, r24	; 0x800c45 <macConfig+0x15>
    3a7e:	4c 2f       	mov	r20, r28
    3a80:	50 e0       	ldi	r21, 0x00	; 0
    3a82:	4e 5f       	subi	r20, 0xFE	; 254
    3a84:	5f 4f       	sbci	r21, 0xFF	; 255
    3a86:	b8 01       	movw	r22, r16
    3a88:	81 e8       	ldi	r24, 0x81	; 129
    3a8a:	91 e0       	ldi	r25, 0x01	; 1
    3a8c:	0e 94 f7 31 	call	0x63ee	; 0x63ee <memcpy>
    3a90:	ce 5f       	subi	r28, 0xFE	; 254
    3a92:	c0 93 80 01 	sts	0x0180, r28	; 0x800180 <__TEXT_REGION_LENGTH__+0x7e0180>
    3a96:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    3a9a:	82 60       	ori	r24, 0x02	; 2
    3a9c:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    3aa0:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    3aa4:	8d 7f       	andi	r24, 0xFD	; 253
    3aa6:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    3aaa:	80 e4       	ldi	r24, 0x40	; 64
    3aac:	01 c0       	rjmp	.+2      	; 0x3ab0 <radioSendData+0x66>
    3aae:	82 e4       	ldi	r24, 0x42	; 66
    3ab0:	cf 91       	pop	r28
    3ab2:	1f 91       	pop	r17
    3ab4:	0f 91       	pop	r16
    3ab6:	08 95       	ret

00003ab8 <radioSetDeviceRole>:
    3ab8:	ee e6       	ldi	r30, 0x6E	; 110
    3aba:	f1 e0       	ldi	r31, 0x01	; 1
    3abc:	90 81       	ld	r25, Z
    3abe:	80 fb       	bst	r24, 0
    3ac0:	93 f9       	bld	r25, 3
    3ac2:	90 83       	st	Z, r25
    3ac4:	08 95       	ret

00003ac6 <radioSetPanId>:
    3ac6:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7e0162>
    3aca:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <__TEXT_REGION_LENGTH__+0x7e0163>
    3ace:	08 95       	ret

00003ad0 <radioSetShortAddress>:
    3ad0:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7e0160>
    3ad4:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <__TEXT_REGION_LENGTH__+0x7e0161>
    3ad8:	08 95       	ret

00003ada <radioSetExtendedAddress>:
    3ada:	e4 e6       	ldi	r30, 0x64	; 100
    3adc:	f1 e0       	ldi	r31, 0x01	; 1
    3ade:	dc 01       	movw	r26, r24
    3ae0:	2d 91       	ld	r18, X+
    3ae2:	cd 01       	movw	r24, r26
    3ae4:	21 93       	st	Z+, r18
    3ae6:	ec 36       	cpi	r30, 0x6C	; 108
    3ae8:	b1 e0       	ldi	r27, 0x01	; 1
    3aea:	fb 07       	cpc	r31, r27
    3aec:	c1 f7       	brne	.-16     	; 0x3ade <radioSetExtendedAddress+0x4>
    3aee:	08 95       	ret

00003af0 <radioRandom>:
    3af0:	cf 93       	push	r28
    3af2:	df 93       	push	r29
    3af4:	c8 2f       	mov	r28, r24
    3af6:	d0 91 41 01 	lds	r29, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    3afa:	0e 94 1d 1b 	call	0x363a	; 0x363a <radioGetPartnum>
    3afe:	83 30       	cpi	r24, 0x03	; 3
    3b00:	39 f4       	brne	.+14     	; 0x3b10 <radioRandom+0x20>
    3b02:	df 70       	andi	r29, 0x0F	; 15
    3b04:	d6 30       	cpi	r29, 0x06	; 6
    3b06:	f1 f4       	brne	.+60     	; 0x3b44 <radioRandom+0x54>
    3b08:	c6 95       	lsr	r28
    3b0a:	90 e0       	ldi	r25, 0x00	; 0
    3b0c:	20 e0       	ldi	r18, 0x00	; 0
    3b0e:	09 c0       	rjmp	.+18     	; 0x3b22 <radioRandom+0x32>
    3b10:	0e 94 1d 1b 	call	0x363a	; 0x363a <radioGetPartnum>
    3b14:	83 38       	cpi	r24, 0x83	; 131
    3b16:	a9 f3       	breq	.-22     	; 0x3b02 <radioRandom+0x12>
    3b18:	0e 94 1d 1b 	call	0x363a	; 0x363a <radioGetPartnum>
    3b1c:	87 30       	cpi	r24, 0x07	; 7
    3b1e:	91 f4       	brne	.+36     	; 0x3b44 <radioRandom+0x54>
    3b20:	f0 cf       	rjmp	.-32     	; 0x3b02 <radioRandom+0x12>
    3b22:	9c 17       	cp	r25, r28
    3b24:	69 f0       	breq	.+26     	; 0x3b40 <radioRandom+0x50>
    3b26:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__TEXT_REGION_LENGTH__+0x7e0146>
    3b2a:	44 e0       	ldi	r20, 0x04	; 4
    3b2c:	24 9f       	mul	r18, r20
    3b2e:	90 01       	movw	r18, r0
    3b30:	11 24       	eor	r1, r1
    3b32:	80 76       	andi	r24, 0x60	; 96
    3b34:	82 95       	swap	r24
    3b36:	86 95       	lsr	r24
    3b38:	87 70       	andi	r24, 0x07	; 7
    3b3a:	28 2b       	or	r18, r24
    3b3c:	9f 5f       	subi	r25, 0xFF	; 255
    3b3e:	f1 cf       	rjmp	.-30     	; 0x3b22 <radioRandom+0x32>
    3b40:	82 2f       	mov	r24, r18
    3b42:	02 c0       	rjmp	.+4      	; 0x3b48 <radioRandom+0x58>
    3b44:	0e 94 95 2f 	call	0x5f2a	; 0x5f2a <rand>
    3b48:	df 91       	pop	r29
    3b4a:	cf 91       	pop	r28
    3b4c:	08 95       	ret

00003b4e <radioSetup900>:
    {
    }
}

void radioSetup900(void)
{
    3b4e:	08 95       	ret

00003b50 <__vector_59>:
	/*! \brief ISR for the Radio RX_START event.
	 */
	void TRX24_RX_START_vect(void);
	#else  /* !DOXYGEN */
	ISR(TRX24_RX_START_vect)
	{
    3b50:	1f 92       	push	r1
    3b52:	0f 92       	push	r0
    3b54:	0f b6       	in	r0, 0x3f	; 63
    3b56:	0f 92       	push	r0
    3b58:	11 24       	eor	r1, r1
    3b5a:	0b b6       	in	r0, 0x3b	; 59
    3b5c:	0f 92       	push	r0
    3b5e:	2f 93       	push	r18
    3b60:	3f 93       	push	r19
    3b62:	4f 93       	push	r20
    3b64:	5f 93       	push	r21
    3b66:	6f 93       	push	r22
    3b68:	7f 93       	push	r23
    3b6a:	8f 93       	push	r24
    3b6c:	9f 93       	push	r25
    3b6e:	af 93       	push	r26
    3b70:	bf 93       	push	r27
    3b72:	ef 93       	push	r30
    3b74:	ff 93       	push	r31
	    //    debugMsgStr("rxstart");
	    radioRxStartEvent();
    3b76:	0e 94 28 1b 	call	0x3650	; 0x3650 <radioRxStartEvent>
	}
    3b7a:	ff 91       	pop	r31
    3b7c:	ef 91       	pop	r30
    3b7e:	bf 91       	pop	r27
    3b80:	af 91       	pop	r26
    3b82:	9f 91       	pop	r25
    3b84:	8f 91       	pop	r24
    3b86:	7f 91       	pop	r23
    3b88:	6f 91       	pop	r22
    3b8a:	5f 91       	pop	r21
    3b8c:	4f 91       	pop	r20
    3b8e:	3f 91       	pop	r19
    3b90:	2f 91       	pop	r18
    3b92:	0f 90       	pop	r0
    3b94:	0b be       	out	0x3b, r0	; 59
    3b96:	0f 90       	pop	r0
    3b98:	0f be       	out	0x3f, r0	; 63
    3b9a:	0f 90       	pop	r0
    3b9c:	1f 90       	pop	r1
    3b9e:	18 95       	reti

00003ba0 <__vector_60>:
/*! \brief ISR for the Radio RX_START event.
 */
void TRX24_RX_END_vect(void);
#else  /* !DOXYGEN */
	ISR(TRX24_RX_END_vect)
	{
    3ba0:	1f 92       	push	r1
    3ba2:	0f 92       	push	r0
    3ba4:	0f b6       	in	r0, 0x3f	; 63
    3ba6:	0f 92       	push	r0
    3ba8:	11 24       	eor	r1, r1
    3baa:	0b b6       	in	r0, 0x3b	; 59
    3bac:	0f 92       	push	r0
    3bae:	2f 93       	push	r18
    3bb0:	3f 93       	push	r19
    3bb2:	4f 93       	push	r20
    3bb4:	5f 93       	push	r21
    3bb6:	6f 93       	push	r22
    3bb8:	7f 93       	push	r23
    3bba:	8f 93       	push	r24
    3bbc:	9f 93       	push	r25
    3bbe:	af 93       	push	r26
    3bc0:	bf 93       	push	r27
    3bc2:	ef 93       	push	r30
    3bc4:	ff 93       	push	r31
	    //debugMsgStr("rxend");
	    radioTrxEndEvent();
    3bc6:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <radioTrxEndEvent>
	}
    3bca:	ff 91       	pop	r31
    3bcc:	ef 91       	pop	r30
    3bce:	bf 91       	pop	r27
    3bd0:	af 91       	pop	r26
    3bd2:	9f 91       	pop	r25
    3bd4:	8f 91       	pop	r24
    3bd6:	7f 91       	pop	r23
    3bd8:	6f 91       	pop	r22
    3bda:	5f 91       	pop	r21
    3bdc:	4f 91       	pop	r20
    3bde:	3f 91       	pop	r19
    3be0:	2f 91       	pop	r18
    3be2:	0f 90       	pop	r0
    3be4:	0b be       	out	0x3b, r0	; 59
    3be6:	0f 90       	pop	r0
    3be8:	0f be       	out	0x3f, r0	; 63
    3bea:	0f 90       	pop	r0
    3bec:	1f 90       	pop	r1
    3bee:	18 95       	reti

00003bf0 <__vector_63>:
/*! \brief ISR for the Radio RX_START event.
 */
void TRX24_TX_END_vect(void);
#else  /* !DOXYGEN */
ISR(TRX24_TX_END_vect)
{
    3bf0:	1f 92       	push	r1
    3bf2:	0f 92       	push	r0
    3bf4:	0f b6       	in	r0, 0x3f	; 63
    3bf6:	0f 92       	push	r0
    3bf8:	11 24       	eor	r1, r1
    3bfa:	0b b6       	in	r0, 0x3b	; 59
    3bfc:	0f 92       	push	r0
    3bfe:	2f 93       	push	r18
    3c00:	3f 93       	push	r19
    3c02:	4f 93       	push	r20
    3c04:	5f 93       	push	r21
    3c06:	6f 93       	push	r22
    3c08:	7f 93       	push	r23
    3c0a:	8f 93       	push	r24
    3c0c:	9f 93       	push	r25
    3c0e:	af 93       	push	r26
    3c10:	bf 93       	push	r27
    3c12:	ef 93       	push	r30
    3c14:	ff 93       	push	r31
    //    debugMsgStr("txend");
    //    debugMsgHex(hal_subregister_read(SR_TRX_STATUS));

    /// @todo fix this - this interrupt should never occur!!
    if (hal_subregister_read(SR_TRX_STATUS) != 0x16)
    3c16:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    3c1a:	8f 71       	andi	r24, 0x1F	; 31
    3c1c:	86 31       	cpi	r24, 0x16	; 22
    3c1e:	11 f0       	breq	.+4      	; 0x3c24 <__vector_63+0x34>
        radioTrxEndEvent();
    3c20:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <radioTrxEndEvent>
}
    3c24:	ff 91       	pop	r31
    3c26:	ef 91       	pop	r30
    3c28:	bf 91       	pop	r27
    3c2a:	af 91       	pop	r26
    3c2c:	9f 91       	pop	r25
    3c2e:	8f 91       	pop	r24
    3c30:	7f 91       	pop	r23
    3c32:	6f 91       	pop	r22
    3c34:	5f 91       	pop	r21
    3c36:	4f 91       	pop	r20
    3c38:	3f 91       	pop	r19
    3c3a:	2f 91       	pop	r18
    3c3c:	0f 90       	pop	r0
    3c3e:	0b be       	out	0x3b, r0	; 59
    3c40:	0f 90       	pop	r0
    3c42:	0f be       	out	0x3f, r0	; 63
    3c44:	0f 90       	pop	r0
    3c46:	1f 90       	pop	r1
    3c48:	18 95       	reti

00003c4a <__vector_61>:
	#ifndef TRX24_CCA_ED_READY_vect
	  #define TRX24_CCA_ED_READY_vect TRX24_CCA_ED_DONE_vect
	#endif

	ISR(TRX24_CCA_ED_READY_vect)
	{
    3c4a:	1f 92       	push	r1
    3c4c:	0f 92       	push	r0
    3c4e:	0f b6       	in	r0, 0x3f	; 63
    3c50:	0f 92       	push	r0
    3c52:	11 24       	eor	r1, r1
    3c54:	0b b6       	in	r0, 0x3b	; 59
    3c56:	0f 92       	push	r0
    3c58:	2f 93       	push	r18
    3c5a:	3f 93       	push	r19
    3c5c:	4f 93       	push	r20
    3c5e:	5f 93       	push	r21
    3c60:	6f 93       	push	r22
    3c62:	7f 93       	push	r23
    3c64:	8f 93       	push	r24
    3c66:	9f 93       	push	r25
    3c68:	af 93       	push	r26
    3c6a:	bf 93       	push	r27
    3c6c:	ef 93       	push	r30
    3c6e:	ff 93       	push	r31
	    //    debugMsgStr("ccaend");

	    macEdCallback();
    3c70:	0e 94 24 25 	call	0x4a48	; 0x4a48 <macEdCallback>
	}
    3c74:	ff 91       	pop	r31
    3c76:	ef 91       	pop	r30
    3c78:	bf 91       	pop	r27
    3c7a:	af 91       	pop	r26
    3c7c:	9f 91       	pop	r25
    3c7e:	8f 91       	pop	r24
    3c80:	7f 91       	pop	r23
    3c82:	6f 91       	pop	r22
    3c84:	5f 91       	pop	r21
    3c86:	4f 91       	pop	r20
    3c88:	3f 91       	pop	r19
    3c8a:	2f 91       	pop	r18
    3c8c:	0f 90       	pop	r0
    3c8e:	0b be       	out	0x3b, r0	; 59
    3c90:	0f 90       	pop	r0
    3c92:	0f be       	out	0x3f, r0	; 63
    3c94:	0f 90       	pop	r0
    3c96:	1f 90       	pop	r1
    3c98:	18 95       	reti

00003c9a <calibrate_rc_osc>:
    and monitor the CPU clock on an I/O pin.

    @return TRUE if calibrate passed; FALSE if calibrate failed.
*/
bool calibrate_rc_osc(void)
{
    3c9a:	cf 92       	push	r12
    3c9c:	df 92       	push	r13
    3c9e:	ef 92       	push	r14
    3ca0:	ff 92       	push	r15
    3ca2:	0f 93       	push	r16
    3ca4:	1f 93       	push	r17
    3ca6:	cf 93       	push	r28
    3ca8:	df 93       	push	r29
    3caa:	00 d0       	rcall	.+0      	; 0x3cac <calibrate_rc_osc+0x12>
    3cac:	cd b7       	in	r28, 0x3d	; 61
    3cae:	de b7       	in	r29, 0x3e	; 62
    if (SERIAL && F_CPU >= 2000000UL) // only need for making serial port work
    {
        bool success = false;
        static bool once=0;

        if (once)
    3cb0:	10 91 35 05 	lds	r17, 0x0535	; 0x800535 <once.3484>
    3cb4:	11 23       	and	r17, r17
    3cb6:	11 f0       	breq	.+4      	; 0x3cbc <calibrate_rc_osc+0x22>
            // Only calibrate once
            return true;
    3cb8:	11 e0       	ldi	r17, 0x01	; 1
    3cba:	58 c0       	rjmp	.+176    	; 0x3d6c <calibrate_rc_osc+0xd2>

        once = true;
    3cbc:	81 e0       	ldi	r24, 0x01	; 1
    3cbe:	80 93 35 05 	sts	0x0535, r24	; 0x800535 <once.3484>
        //   timer2 to overflow
        // Timer 2 (8-bit) is run from the main CPU clock divided by
        //   32.  This means the clock is 31250Hz at 1MHz, or 250KHz at 8MHz.
        //   Target time is 1024uS (8MHz) or 8192uS (1MHz).

        osccal_saved = OSCCAL;
    3cc2:	f0 90 66 00 	lds	r15, 0x0066	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>
        cli();
    3cc6:	f8 94       	cli

        radioSetClockSpeed(true, CLKM_1MHz);
    3cc8:	61 e0       	ldi	r22, 0x01	; 1
    3cca:	0e 94 6d 1b 	call	0x36da	; 0x36da <radioSetClockSpeed>

        // Save current values of timer status.
        tccr2b = TCCR2B;
    3cce:	c0 90 b1 00 	lds	r12, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
        tccr1b = TCCR1B;
    3cd2:	d0 90 81 00 	lds	r13, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        tccr1a = TCCR1A;
    3cd6:	e0 90 80 00 	lds	r14, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>

        // Stop timers 1 and 2.
        // Set timer 1 to normal mode (no CTC, no PWM, just count).
        TCCR2B = 0;
    3cda:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
        TCCR1B = 0;
    3cde:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        TCCR1A = 0;
    3ce2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3ce6:	88 ee       	ldi	r24, 0xE8	; 232
    3ce8:	93 e0       	ldi	r25, 0x03	; 3

        for (counter = 0; counter < 1000;  counter++)
        {
            // Timer 2 driven from clock divided by 32
            TCCR2B = (1 << CS21) | (1 << CS20);
    3cea:	43 e0       	ldi	r20, 0x03	; 3
            // Timer 1 driven with external clock
            TCCR1B = (1 << CS12) | (1 << CS11);
    3cec:	56 e0       	ldi	r21, 0x06	; 6

            // Clear pending timer 1 and 2 interrupts, and clear the
            // counters.
            TCNT2 = 0;
            TCNT1 = 0;
            TIFR1 = 0xFF;
    3cee:	3f ef       	ldi	r19, 0xFF	; 255
        TCCR1A = 0;

        for (counter = 0; counter < 1000;  counter++)
        {
            // Timer 2 driven from clock divided by 32
            TCCR2B = (1 << CS21) | (1 << CS20);
    3cf0:	40 93 b1 00 	sts	0x00B1, r20	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
            // Timer 1 driven with external clock
            TCCR1B = (1 << CS12) | (1 << CS11);
    3cf4:	50 93 81 00 	sts	0x0081, r21	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

            // Clear pending timer 1 and 2 interrupts, and clear the
            // counters.
            TCNT2 = 0;
    3cf8:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
            TCNT1 = 0;
    3cfc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    3d00:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
            TIFR1 = 0xFF;
    3d04:	36 bb       	out	0x16, r19	; 22
            TIFR2 = 0xFF;
    3d06:	37 bb       	out	0x17, r19	; 23

            // Wait for timer 2 to overflow.
            while (!(TIFR2 & (1 << TOV2)))
    3d08:	b8 9b       	sbis	0x17, 0	; 23
    3d0a:	fe cf       	rjmp	.-4      	; 0x3d08 <calibrate_rc_osc+0x6e>
                ;

            temp = TCNT1;
    3d0c:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    3d10:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    3d14:	7a 83       	std	Y+2, r23	; 0x02
    3d16:	69 83       	std	Y+1, r22	; 0x01


            // Stop timer 1.  Now, TCNT1 contains the number of 1MHz RF2xx cycles
            // counted while timer 2 was counting CPU cycles
            TCCR1B = 0;
    3d18:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
            TCCR2B = 0;
    3d1c:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>

            if (temp < (u16)(0.995 * TARGETVAL))
    3d20:	69 81       	ldd	r22, Y+1	; 0x01
    3d22:	7a 81       	ldd	r23, Y+2	; 0x02
    3d24:	6d 3f       	cpi	r22, 0xFD	; 253
    3d26:	71 40       	sbci	r23, 0x01	; 1
    3d28:	20 f4       	brcc	.+8      	; 0x3d32 <calibrate_rc_osc+0x98>
            {
                // Too fast, slow down
                OSCCAL--;
    3d2a:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>
    3d2e:	21 50       	subi	r18, 0x01	; 1
    3d30:	08 c0       	rjmp	.+16     	; 0x3d42 <calibrate_rc_osc+0xa8>
            }
            else if (temp > (u16)(1.005 * TARGETVAL))
    3d32:	69 81       	ldd	r22, Y+1	; 0x01
    3d34:	7a 81       	ldd	r23, Y+2	; 0x02
    3d36:	63 30       	cpi	r22, 0x03	; 3
    3d38:	72 40       	sbci	r23, 0x02	; 2
    3d3a:	48 f0       	brcs	.+18     	; 0x3d4e <calibrate_rc_osc+0xb4>
            {
                // Too slow, speed up
                OSCCAL++;
    3d3c:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>
    3d40:	2f 5f       	subi	r18, 0xFF	; 255
    3d42:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>
    3d46:	01 97       	sbiw	r24, 0x01	; 1
        // Set timer 1 to normal mode (no CTC, no PWM, just count).
        TCCR2B = 0;
        TCCR1B = 0;
        TCCR1A = 0;

        for (counter = 0; counter < 1000;  counter++)
    3d48:	99 f6       	brne	.-90     	; 0x3cf0 <calibrate_rc_osc+0x56>
*/
bool calibrate_rc_osc(void)
{
    if (SERIAL && F_CPU >= 2000000UL) // only need for making serial port work
    {
        bool success = false;
    3d4a:	00 e0       	ldi	r16, 0x00	; 0
    3d4c:	01 c0       	rjmp	.+2      	; 0x3d50 <calibrate_rc_osc+0xb6>
            }
            else
            {
                // We are within +/- 0.5 % of our target frequency, so we're
                // done.
                success = true;
    3d4e:	01 e0       	ldi	r16, 0x01	; 1
                break;
            }
        }

        radioSetClockSpeed(true, CLKM_DISABLED);
    3d50:	60 e0       	ldi	r22, 0x00	; 0
    3d52:	81 e0       	ldi	r24, 0x01	; 1
    3d54:	0e 94 6d 1b 	call	0x36da	; 0x36da <radioSetClockSpeed>

        // restore timer status regs
        TCCR2B = tccr2b;
    3d58:	c0 92 b1 00 	sts	0x00B1, r12	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
        TCCR1B = tccr1b;
    3d5c:	d0 92 81 00 	sts	0x0081, r13	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        TCCR1A = tccr1a;
    3d60:	e0 92 80 00 	sts	0x0080, r14	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
        if (!success)
    3d64:	01 11       	cpse	r16, r1
    3d66:	a8 cf       	rjmp	.-176    	; 0x3cb8 <calibrate_rc_osc+0x1e>
        {
            // We failed, therefore restore previous OSCCAL value.
            OSCCAL = osccal_saved;
    3d68:	f0 92 66 00 	sts	0x0066, r15	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>

        return success;
    }
    else
        return 0;
}
    3d6c:	81 2f       	mov	r24, r17
    3d6e:	0f 90       	pop	r0
    3d70:	0f 90       	pop	r0
    3d72:	df 91       	pop	r29
    3d74:	cf 91       	pop	r28
    3d76:	1f 91       	pop	r17
    3d78:	0f 91       	pop	r16
    3d7a:	ff 90       	pop	r15
    3d7c:	ef 90       	pop	r14
    3d7e:	df 90       	pop	r13
    3d80:	cf 90       	pop	r12
    3d82:	08 95       	ret

00003d84 <halGetEeprom>:
   @param offset The offset in EEPROM of the start of the data block
   @param length The length in bytes of the data block
   @param dest  Pointer to the area in memory to place the data block
*/
void halGetEeprom(void *addr, u8 length, u8 *dest)
{
    3d84:	cf 93       	push	r28
    3d86:	df 93       	push	r29
    3d88:	1f 92       	push	r1
    3d8a:	cd b7       	in	r28, 0x3d	; 61
    3d8c:	de b7       	in	r29, 0x3e	; 62
    3d8e:	fc 01       	movw	r30, r24
    3d90:	ca 01       	movw	r24, r20
    AVR_ENTER_CRITICAL_REGION();
    3d92:	3f b7       	in	r19, 0x3f	; 63
    3d94:	39 83       	std	Y+1, r19	; 0x01
    3d96:	f8 94       	cli
    eeprom_read_block (dest, addr, length);
    3d98:	46 2f       	mov	r20, r22
    3d9a:	50 e0       	ldi	r21, 0x00	; 0
    3d9c:	bf 01       	movw	r22, r30
    3d9e:	0e 94 02 35 	call	0x6a04	; 0x6a04 <eeprom_read_block>
    AVR_LEAVE_CRITICAL_REGION();
    3da2:	89 81       	ldd	r24, Y+1	; 0x01
    3da4:	8f bf       	out	0x3f, r24	; 63
}
    3da6:	0f 90       	pop	r0
    3da8:	df 91       	pop	r29
    3daa:	cf 91       	pop	r28
    3dac:	08 95       	ret

00003dae <halPutEeprom>:
   @param offset The offset in EEPROM of the start of the data block
   @param length The length in bytes of the data block
   @param src  Pointer to the area in memory which contains the data block
*/
void halPutEeprom(void *addr, u8 length, u8 *src)
{
    3dae:	cf 93       	push	r28
    3db0:	df 93       	push	r29
    3db2:	1f 92       	push	r1
    3db4:	cd b7       	in	r28, 0x3d	; 61
    3db6:	de b7       	in	r29, 0x3e	; 62
    3db8:	fc 01       	movw	r30, r24
    3dba:	ca 01       	movw	r24, r20
    AVR_ENTER_CRITICAL_REGION();
    3dbc:	3f b7       	in	r19, 0x3f	; 63
    3dbe:	39 83       	std	Y+1, r19	; 0x01
    3dc0:	f8 94       	cli
    eeprom_write_block (src, addr, length);
    3dc2:	46 2f       	mov	r20, r22
    3dc4:	50 e0       	ldi	r21, 0x00	; 0
    3dc6:	bf 01       	movw	r22, r30
    3dc8:	0e 94 24 35 	call	0x6a48	; 0x6a48 <eeprom_write_block>
    AVR_LEAVE_CRITICAL_REGION();
    3dcc:	89 81       	ldd	r24, Y+1	; 0x01
    3dce:	8f bf       	out	0x3f, r24	; 63
}
    3dd0:	0f 90       	pop	r0
    3dd2:	df 91       	pop	r29
    3dd4:	cf 91       	pop	r28
    3dd6:	08 95       	ret

00003dd8 <macInit>:

   @param Channel Sets the channel to use for the MAC.  Use 0xff for
   non-coordinator nodes.
*/
void macInit(u8 Channel)
{
    3dd8:	1f 93       	push	r17
    3dda:	cf 93       	push	r28
    3ddc:	df 93       	push	r29
    3dde:	cd b7       	in	r28, 0x3d	; 61
    3de0:	de b7       	in	r29, 0x3e	; 62
    3de2:	28 97       	sbiw	r28, 0x08	; 8
    3de4:	0f b6       	in	r0, 0x3f	; 63
    3de6:	f8 94       	cli
    3de8:	de bf       	out	0x3e, r29	; 62
    3dea:	0f be       	out	0x3f, r0	; 63
    3dec:	cd bf       	out	0x3d, r28	; 61
    3dee:	18 2f       	mov	r17, r24
    // ETG DEBUG
    // Base address of the GPIO modules.
  //  volatile avr32_gpio_t * myGpio = &AVR32_GPIO;
#endif

    macConfig.panId = BROADCASTPANID;
    3df0:	2f ef       	ldi	r18, 0xFF	; 255
    3df2:	3f ef       	ldi	r19, 0xFF	; 255
    3df4:	30 93 3c 0c 	sts	0x0C3C, r19	; 0x800c3c <macConfig+0xc>
    3df8:	20 93 3b 0c 	sts	0x0C3B, r18	; 0x800c3b <macConfig+0xb>
    macConfig.shortAddress = BROADCASTADDR;
    3dfc:	30 93 3e 0c 	sts	0x0C3E, r19	; 0x800c3e <macConfig+0xe>
    3e00:	20 93 3d 0c 	sts	0x0C3D, r18	; 0x800c3d <macConfig+0xd>
    macConfig.associated = false;
    3e04:	10 92 38 0c 	sts	0x0C38, r1	; 0x800c38 <macConfig+0x8>

    macConfig.parentShortAddress = BROADCASTADDR;
    3e08:	30 93 40 0c 	sts	0x0C40, r19	; 0x800c40 <macConfig+0x10>
    3e0c:	20 93 3f 0c 	sts	0x0C3F, r18	; 0x800c3f <macConfig+0xf>
    macConfig.lastRoute = BROADCASTADDR;
    3e10:	30 93 42 0c 	sts	0x0C42, r19	; 0x800c42 <macConfig+0x12>
    3e14:	20 93 41 0c 	sts	0x0C41, r18	; 0x800c41 <macConfig+0x11>
    macConfig.hopsToCoord = 0;
    3e18:	10 92 43 0c 	sts	0x0C43, r1	; 0x800c43 <macConfig+0x13>
    macConfig.busy = 0;
    3e1c:	10 92 47 0c 	sts	0x0C47, r1	; 0x800c47 <macConfig+0x17>
    macConfig.sleeping = 1; // Assume sleeping state initially
    3e20:	81 e0       	ldi	r24, 0x01	; 1
    3e22:	80 93 48 0c 	sts	0x0C48, r24	; 0x800c48 <macConfig+0x18>

    // Init radio
    radioInit(SERIAL ? true : false);
    3e26:	0e 94 ac 1b 	call	0x3758	; 0x3758 <radioInit>

    // Set the channel
    macConfig.currentChannel = Channel;
    3e2a:	10 93 44 0c 	sts	0x0C44, r17	; 0x800c44 <macConfig+0x14>
    if (Channel != 0xff)
    3e2e:	1f 3f       	cpi	r17, 0xFF	; 255
    3e30:	19 f0       	breq	.+6      	; 0x3e38 <macInit+0x60>
        radioSetOperatingChannel(Channel);
    3e32:	81 2f       	mov	r24, r17
    3e34:	0e 94 3c 1b 	call	0x3678	; 0x3678 <radioSetOperatingChannel>

    radioUseAutoTxCrc(true);
    3e38:	81 e0       	ldi	r24, 0x01	; 1
    3e3a:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <radioUseAutoTxCrc>
    radioSetTrxState(TRX_OFF);
    3e3e:	88 e0       	ldi	r24, 0x08	; 8
    3e40:	0e 94 06 1c 	call	0x380c	; 0x380c <radioSetTrxState>

    // Set RF212 to 250KB mode.
    radioSetup900();
    3e44:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <radioSetup900>

    // Set ack times shorter
   /// hal_subregister_write(SR_AACK_ACK_TIME, 1); //longer ack response time seems to work better, pb

    radioSetTrxState(RX_AACK_ON);
    3e48:	86 e1       	ldi	r24, 0x16	; 22
    3e4a:	0e 94 06 1c 	call	0x380c	; 0x380c <radioSetTrxState>
    // DEBUG
//    myGpio->port[0].ovr &= ~(1<<0);
#endif

    // Setup the address of this device by reading a stored address from eeprom.
    halGetMacAddr((u8*)&(macConfig.longAddr));
    3e4e:	40 e3       	ldi	r20, 0x30	; 48
    3e50:	5c e0       	ldi	r21, 0x0C	; 12
    3e52:	68 e0       	ldi	r22, 0x08	; 8
    3e54:	80 e0       	ldi	r24, 0x00	; 0
    3e56:	90 e0       	ldi	r25, 0x00	; 0
    3e58:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <halGetEeprom>

    // Set up radio's coordinator flag
    radioSetDeviceRole(NODETYPE == COORD);
    3e5c:	80 e0       	ldi	r24, 0x00	; 0
    3e5e:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <radioSetDeviceRole>

    // Setup radio's short addess
    radioSetShortAddress(BROADCASTADDR);
    3e62:	8f ef       	ldi	r24, 0xFF	; 255
    3e64:	9f ef       	ldi	r25, 0xFF	; 255
    3e66:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <radioSetShortAddress>

    // Setup radio's PANID
    radioSetPanId(BROADCASTPANID);
    3e6a:	8f ef       	ldi	r24, 0xFF	; 255
    3e6c:	9f ef       	ldi	r25, 0xFF	; 255
    3e6e:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <radioSetPanId>

    // Set up the radio for auto mode operation.
    hal_subregister_write( SR_MAX_FRAME_RETRIES, 2 );
    3e72:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <__TEXT_REGION_LENGTH__+0x7e016c>
    3e76:	8f 70       	andi	r24, 0x0F	; 15
    3e78:	80 62       	ori	r24, 0x20	; 32
    3e7a:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <__TEXT_REGION_LENGTH__+0x7e016c>

    // Load the long address into the radio. Needed for auto modes.
// ETG
    u64 longAddr = htons_64(macConfig.longAddr);
    3e7e:	80 91 30 0c 	lds	r24, 0x0C30	; 0x800c30 <macConfig>
    3e82:	89 83       	std	Y+1, r24	; 0x01
    3e84:	80 91 31 0c 	lds	r24, 0x0C31	; 0x800c31 <macConfig+0x1>
    3e88:	8a 83       	std	Y+2, r24	; 0x02
    3e8a:	80 91 32 0c 	lds	r24, 0x0C32	; 0x800c32 <macConfig+0x2>
    3e8e:	8b 83       	std	Y+3, r24	; 0x03
    3e90:	80 91 33 0c 	lds	r24, 0x0C33	; 0x800c33 <macConfig+0x3>
    3e94:	8c 83       	std	Y+4, r24	; 0x04
    3e96:	80 91 34 0c 	lds	r24, 0x0C34	; 0x800c34 <macConfig+0x4>
    3e9a:	8d 83       	std	Y+5, r24	; 0x05
    3e9c:	80 91 35 0c 	lds	r24, 0x0C35	; 0x800c35 <macConfig+0x5>
    3ea0:	8e 83       	std	Y+6, r24	; 0x06
    3ea2:	80 91 36 0c 	lds	r24, 0x0C36	; 0x800c36 <macConfig+0x6>
    3ea6:	8f 83       	std	Y+7, r24	; 0x07
    3ea8:	80 91 37 0c 	lds	r24, 0x0C37	; 0x800c37 <macConfig+0x7>
    3eac:	88 87       	std	Y+8, r24	; 0x08
// ETG    radioSetExtendedAddress((uint8_t *)&macConfig.longAddr);
    radioSetExtendedAddress((uint8_t *)&longAddr);
    3eae:	ce 01       	movw	r24, r28
    3eb0:	01 96       	adiw	r24, 0x01	; 1
    3eb2:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <radioSetExtendedAddress>

    // Initialize the array of nodes (coordinator only)
    macInitNodes();
    3eb6:	0e 94 35 20 	call	0x406a	; 0x406a <macInitNodes>
}
    3eba:	28 96       	adiw	r28, 0x08	; 8
    3ebc:	0f b6       	in	r0, 0x3f	; 63
    3ebe:	f8 94       	cli
    3ec0:	de bf       	out	0x3e, r29	; 62
    3ec2:	0f be       	out	0x3f, r0	; 63
    3ec4:	cd bf       	out	0x3d, r28	; 61
    3ec6:	df 91       	pop	r29
    3ec8:	cf 91       	pop	r28
    3eca:	1f 91       	pop	r17
    3ecc:	08 95       	ret

00003ece <macSetOperatingChannel>:
   @param channel The channel number to use for radio communication.
*/
void macSetOperatingChannel(u8 channel)
{
    // Set the channel
    macConfig.currentChannel = channel;
    3ece:	80 93 44 0c 	sts	0x0C44, r24	; 0x800c44 <macConfig+0x14>
    radioSetOperatingChannel(channel);
    3ed2:	0c 94 3c 1b 	jmp	0x3678	; 0x3678 <radioSetOperatingChannel>

00003ed6 <macAssociationConfirm>:
   parent.

   @param addr The short address of the child node that has woken up.
*/
void macClearChildWakeFlag(u16 addr)
{
    3ed6:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <associationTimer>
    3eda:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <macTimerEnd>
    3ede:	90 91 38 0c 	lds	r25, 0x0C38	; 0x800c38 <macConfig+0x8>
    3ee2:	81 e0       	ldi	r24, 0x01	; 1
    3ee4:	89 27       	eor	r24, r25
    3ee6:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <appAssociateConfirm>

00003eea <macAssociate>:
    3eea:	cf 93       	push	r28
    3eec:	df 93       	push	r29
    3eee:	ec 01       	movw	r28, r24
    3ef0:	86 2f       	mov	r24, r22
    3ef2:	0e 94 67 1f 	call	0x3ece	; 0x3ece <macSetOperatingChannel>
    3ef6:	ee ea       	ldi	r30, 0xAE	; 174
    3ef8:	fb e0       	ldi	r31, 0x0B	; 11
    3efa:	83 e6       	ldi	r24, 0x63	; 99
    3efc:	98 ec       	ldi	r25, 0xC8	; 200
    3efe:	92 83       	std	Z+2, r25	; 0x02
    3f00:	81 83       	std	Z+1, r24	; 0x01
    3f02:	a0 e3       	ldi	r26, 0x30	; 48
    3f04:	bc e0       	ldi	r27, 0x0C	; 12
    3f06:	1a 96       	adiw	r26, 0x0a	; 10
    3f08:	8c 91       	ld	r24, X
    3f0a:	1a 97       	sbiw	r26, 0x0a	; 10
    3f0c:	91 e0       	ldi	r25, 0x01	; 1
    3f0e:	98 0f       	add	r25, r24
    3f10:	1a 96       	adiw	r26, 0x0a	; 10
    3f12:	9c 93       	st	X, r25
    3f14:	1a 97       	sbiw	r26, 0x0a	; 10
    3f16:	83 83       	std	Z+3, r24	; 0x03
    3f18:	1b 96       	adiw	r26, 0x0b	; 11
    3f1a:	8d 91       	ld	r24, X+
    3f1c:	9c 91       	ld	r25, X
    3f1e:	1c 97       	sbiw	r26, 0x0c	; 12
    3f20:	95 83       	std	Z+5, r25	; 0x05
    3f22:	84 83       	std	Z+4, r24	; 0x04
    3f24:	d7 83       	std	Z+7, r29	; 0x07
    3f26:	c6 83       	std	Z+6, r28	; 0x06
    3f28:	8c 91       	ld	r24, X
    3f2a:	80 87       	std	Z+8, r24	; 0x08
    3f2c:	11 96       	adiw	r26, 0x01	; 1
    3f2e:	8c 91       	ld	r24, X
    3f30:	11 97       	sbiw	r26, 0x01	; 1
    3f32:	81 87       	std	Z+9, r24	; 0x09
    3f34:	12 96       	adiw	r26, 0x02	; 2
    3f36:	8c 91       	ld	r24, X
    3f38:	12 97       	sbiw	r26, 0x02	; 2
    3f3a:	82 87       	std	Z+10, r24	; 0x0a
    3f3c:	13 96       	adiw	r26, 0x03	; 3
    3f3e:	8c 91       	ld	r24, X
    3f40:	13 97       	sbiw	r26, 0x03	; 3
    3f42:	83 87       	std	Z+11, r24	; 0x0b
    3f44:	14 96       	adiw	r26, 0x04	; 4
    3f46:	8c 91       	ld	r24, X
    3f48:	14 97       	sbiw	r26, 0x04	; 4
    3f4a:	84 87       	std	Z+12, r24	; 0x0c
    3f4c:	15 96       	adiw	r26, 0x05	; 5
    3f4e:	8c 91       	ld	r24, X
    3f50:	15 97       	sbiw	r26, 0x05	; 5
    3f52:	85 87       	std	Z+13, r24	; 0x0d
    3f54:	16 96       	adiw	r26, 0x06	; 6
    3f56:	8c 91       	ld	r24, X
    3f58:	16 97       	sbiw	r26, 0x06	; 6
    3f5a:	86 87       	std	Z+14, r24	; 0x0e
    3f5c:	17 96       	adiw	r26, 0x07	; 7
    3f5e:	8c 91       	ld	r24, X
    3f60:	87 87       	std	Z+15, r24	; 0x0f
    3f62:	81 e0       	ldi	r24, 0x01	; 1
    3f64:	80 8b       	std	Z+16, r24	; 0x10
    3f66:	d2 8b       	std	Z+18, r29	; 0x12
    3f68:	c1 8b       	std	Z+17, r28	; 0x11
    3f6a:	82 e0       	ldi	r24, 0x02	; 2
    3f6c:	83 8b       	std	Z+19, r24	; 0x13
    3f6e:	6f ea       	ldi	r22, 0xAF	; 175
    3f70:	7b e0       	ldi	r23, 0x0B	; 11
    3f72:	83 e1       	ldi	r24, 0x13	; 19
    3f74:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <radioSendData>
    3f78:	6b e6       	ldi	r22, 0x6B	; 107
    3f7a:	7f e1       	ldi	r23, 0x1F	; 31
    3f7c:	88 ee       	ldi	r24, 0xE8	; 232
    3f7e:	93 e0       	ldi	r25, 0x03	; 3
    3f80:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <macSetAlarm>
    3f84:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <associationTimer>
    3f88:	df 91       	pop	r29
    3f8a:	cf 91       	pop	r28
    3f8c:	08 95       	ret

00003f8e <macIsChild>:
    3f8e:	00 97       	sbiw	r24, 0x00	; 0
    3f90:	61 f0       	breq	.+24     	; 0x3faa <macIsChild+0x1c>
    3f92:	e6 e3       	ldi	r30, 0x36	; 54
    3f94:	f5 e0       	ldi	r31, 0x05	; 5
    3f96:	20 81       	ld	r18, Z
    3f98:	31 81       	ldd	r19, Z+1	; 0x01
    3f9a:	28 17       	cp	r18, r24
    3f9c:	39 07       	cpc	r19, r25
    3f9e:	39 f0       	breq	.+14     	; 0x3fae <macIsChild+0x20>
    3fa0:	33 96       	adiw	r30, 0x03	; 3
    3fa2:	26 e0       	ldi	r18, 0x06	; 6
    3fa4:	e2 36       	cpi	r30, 0x62	; 98
    3fa6:	f2 07       	cpc	r31, r18
    3fa8:	b1 f7       	brne	.-20     	; 0x3f96 <macIsChild+0x8>
    3faa:	80 e0       	ldi	r24, 0x00	; 0
    3fac:	08 95       	ret
    3fae:	81 e0       	ldi	r24, 0x01	; 1
    3fb0:	08 95       	ret

00003fb2 <macAddChild>:
    3fb2:	e6 e3       	ldi	r30, 0x36	; 54
    3fb4:	f5 e0       	ldi	r31, 0x05	; 5
    3fb6:	df 01       	movw	r26, r30
    3fb8:	20 e0       	ldi	r18, 0x00	; 0
    3fba:	30 e0       	ldi	r19, 0x00	; 0
    3fbc:	4d 91       	ld	r20, X+
    3fbe:	5c 91       	ld	r21, X
    3fc0:	11 97       	sbiw	r26, 0x01	; 1
    3fc2:	48 17       	cp	r20, r24
    3fc4:	59 07       	cpc	r21, r25
    3fc6:	69 f4       	brne	.+26     	; 0x3fe2 <macAddChild+0x30>
    3fc8:	f9 01       	movw	r30, r18
    3fca:	ee 0f       	add	r30, r30
    3fcc:	ff 1f       	adc	r31, r31
    3fce:	2e 0f       	add	r18, r30
    3fd0:	3f 1f       	adc	r19, r31
    3fd2:	f9 01       	movw	r30, r18
    3fd4:	e8 5c       	subi	r30, 0xC8	; 200
    3fd6:	fa 4f       	sbci	r31, 0xFA	; 250
    3fd8:	80 81       	ld	r24, Z
    3fda:	8e 7f       	andi	r24, 0xFE	; 254
    3fdc:	8d 7f       	andi	r24, 0xFD	; 253
    3fde:	80 83       	st	Z, r24
    3fe0:	08 95       	ret
    3fe2:	2f 5f       	subi	r18, 0xFF	; 255
    3fe4:	3f 4f       	sbci	r19, 0xFF	; 255
    3fe6:	13 96       	adiw	r26, 0x03	; 3
    3fe8:	24 36       	cpi	r18, 0x64	; 100
    3fea:	31 05       	cpc	r19, r1
    3fec:	39 f7       	brne	.-50     	; 0x3fbc <macAddChild+0xa>
    3fee:	20 e0       	ldi	r18, 0x00	; 0
    3ff0:	30 e0       	ldi	r19, 0x00	; 0
    3ff2:	42 2f       	mov	r20, r18
    3ff4:	60 81       	ld	r22, Z
    3ff6:	71 81       	ldd	r23, Z+1	; 0x01
    3ff8:	67 2b       	or	r22, r23
    3ffa:	a9 f4       	brne	.+42     	; 0x4026 <__stack+0x26>
    3ffc:	f9 01       	movw	r30, r18
    3ffe:	ee 0f       	add	r30, r30
    4000:	ff 1f       	adc	r31, r31
    4002:	2e 0f       	add	r18, r30
    4004:	3f 1f       	adc	r19, r31
    4006:	f9 01       	movw	r30, r18
    4008:	ea 5c       	subi	r30, 0xCA	; 202
    400a:	fa 4f       	sbci	r31, 0xFA	; 250
    400c:	91 83       	std	Z+1, r25	; 0x01
    400e:	80 83       	st	Z, r24
    4010:	f9 01       	movw	r30, r18
    4012:	e8 5c       	subi	r30, 0xC8	; 200
    4014:	fa 4f       	sbci	r31, 0xFA	; 250
    4016:	90 81       	ld	r25, Z
    4018:	9e 7f       	andi	r25, 0xFE	; 254
    401a:	9d 7f       	andi	r25, 0xFD	; 253
    401c:	90 83       	st	Z, r25
    401e:	84 2f       	mov	r24, r20
    4020:	90 e0       	ldi	r25, 0x00	; 0
    4022:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <appChildAssociated>
    4026:	2f 5f       	subi	r18, 0xFF	; 255
    4028:	3f 4f       	sbci	r19, 0xFF	; 255
    402a:	33 96       	adiw	r30, 0x03	; 3
    402c:	24 36       	cpi	r18, 0x64	; 100
    402e:	31 05       	cpc	r19, r1
    4030:	01 f7       	brne	.-64     	; 0x3ff2 <macAddChild+0x40>
    4032:	08 95       	ret

00004034 <macRemoveChild>:
    4034:	e6 e3       	ldi	r30, 0x36	; 54
    4036:	f5 e0       	ldi	r31, 0x05	; 5
    4038:	20 e0       	ldi	r18, 0x00	; 0
    403a:	30 e0       	ldi	r19, 0x00	; 0
    403c:	40 81       	ld	r20, Z
    403e:	51 81       	ldd	r21, Z+1	; 0x01
    4040:	48 17       	cp	r20, r24
    4042:	59 07       	cpc	r21, r25
    4044:	59 f4       	brne	.+22     	; 0x405c <macRemoveChild+0x28>
    4046:	f9 01       	movw	r30, r18
    4048:	ee 0f       	add	r30, r30
    404a:	ff 1f       	adc	r31, r31
    404c:	2e 0f       	add	r18, r30
    404e:	3f 1f       	adc	r19, r31
    4050:	f9 01       	movw	r30, r18
    4052:	ea 5c       	subi	r30, 0xCA	; 202
    4054:	fa 4f       	sbci	r31, 0xFA	; 250
    4056:	11 82       	std	Z+1, r1	; 0x01
    4058:	10 82       	st	Z, r1
    405a:	08 95       	ret
    405c:	2f 5f       	subi	r18, 0xFF	; 255
    405e:	3f 4f       	sbci	r19, 0xFF	; 255
    4060:	33 96       	adiw	r30, 0x03	; 3
    4062:	24 36       	cpi	r18, 0x64	; 100
    4064:	31 05       	cpc	r19, r1
    4066:	51 f7       	brne	.-44     	; 0x403c <macRemoveChild+0x8>
    4068:	08 95       	ret

0000406a <macInitNodes>:
    406a:	08 95       	ret

0000406c <macWakeChildNode>:
    406c:	08 95       	ret

0000406e <macChildIsAwake>:
   This function is called on the receipt of every packet.

   @param frame Pointer to ftData struct, the received packet.
*/
void macChildIsAwake(ftData *frame)
{
    406e:	fc 01       	movw	r30, r24
            if (RUMSLEEP)
                macSendStoredFrame(addr);
        }
    }
    // Reset the sleeping bit in the frame.
    frame->type &= ~0x80;
    4070:	95 85       	ldd	r25, Z+13	; 0x0d
    4072:	9f 77       	andi	r25, 0x7F	; 127
    4074:	95 87       	std	Z+13, r25	; 0x0d
    4076:	08 95       	ret

00004078 <sendBeaconFrame>:
{
    if (NODETYPE != ENDDEVICE)
    {
        ftBeacon* data_frame = (ftBeacon*)(mac_buffer_tx+1);

        data_frame->fcf   = htons_16(FCF_BEACON);
    4078:	ee ea       	ldi	r30, 0xAE	; 174
    407a:	fb e0       	ldi	r31, 0x0B	; 11
    407c:	80 e0       	ldi	r24, 0x00	; 0
    407e:	90 e8       	ldi	r25, 0x80	; 128
    4080:	92 83       	std	Z+2, r25	; 0x02
    4082:	81 83       	std	Z+1, r24	; 0x01
        data_frame->seq   = macConfig.bsn++;
    4084:	a0 e3       	ldi	r26, 0x30	; 48
    4086:	bc e0       	ldi	r27, 0x0C	; 12
    4088:	19 96       	adiw	r26, 0x09	; 9
    408a:	8c 91       	ld	r24, X
    408c:	19 97       	sbiw	r26, 0x09	; 9
    408e:	91 e0       	ldi	r25, 0x01	; 1
    4090:	98 0f       	add	r25, r24
    4092:	19 96       	adiw	r26, 0x09	; 9
    4094:	9c 93       	st	X, r25
    4096:	19 97       	sbiw	r26, 0x09	; 9
    4098:	83 83       	std	Z+3, r24	; 0x03
        data_frame->panid = htons_16(macConfig.panId);
    409a:	1b 96       	adiw	r26, 0x0b	; 11
    409c:	8d 91       	ld	r24, X+
    409e:	9c 91       	ld	r25, X
    40a0:	1c 97       	sbiw	r26, 0x0c	; 12
    40a2:	95 83       	std	Z+5, r25	; 0x05
    40a4:	84 83       	std	Z+4, r24	; 0x04
        data_frame->addr  = htons_16(macConfig.shortAddress);
    40a6:	1d 96       	adiw	r26, 0x0d	; 13
    40a8:	8d 91       	ld	r24, X+
    40aa:	9c 91       	ld	r25, X
    40ac:	1e 97       	sbiw	r26, 0x0e	; 14
    40ae:	97 83       	std	Z+7, r25	; 0x07
    40b0:	86 83       	std	Z+6, r24	; 0x06

        if (NODETYPE == ROUTER)
            data_frame->superFrame = htons_16(ROUTER_SUPERFRAME);
    40b2:	8f ef       	ldi	r24, 0xFF	; 255
    40b4:	90 e0       	ldi	r25, 0x00	; 0
    40b6:	91 87       	std	Z+9, r25	; 0x09
    40b8:	80 87       	std	Z+8, r24	; 0x08
        else
            data_frame->superFrame = htons_16(COORD_SUPERFRAME);

        data_frame->netID = 0x06;
    40ba:	86 e0       	ldi	r24, 0x06	; 6
    40bc:	82 87       	std	Z+10, r24	; 0x0a
        data_frame->hops = macConfig.hopsToCoord;
    40be:	53 96       	adiw	r26, 0x13	; 19
    40c0:	8c 91       	ld	r24, X
    40c2:	83 87       	std	Z+11, r24	; 0x0b

        // send data to radio.
        radioSendData(sizeof(ftBeacon), (u8 *)data_frame);
    40c4:	6f ea       	ldi	r22, 0xAF	; 175
    40c6:	7b e0       	ldi	r23, 0x0B	; 11
    40c8:	8b e0       	ldi	r24, 0x0B	; 11
    40ca:	0c 94 25 1d 	jmp	0x3a4a	; 0x3a4a <radioSendData>

000040ce <mdr_timer>:
    @param data Pointer to the data to be sent.

    @ingroup avr6lowpan
*/
void macsixlowpanDataRequest(u16 addr, u8 len, u8 * data)
{
    40ce:	6f ea       	ldi	r22, 0xAF	; 175
    40d0:	7b e0       	ldi	r23, 0x0B	; 11
    40d2:	80 91 ae 0b 	lds	r24, 0x0BAE	; 0x800bae <mac_buffer_tx>
    40d6:	0c 94 25 1d 	jmp	0x3a4a	; 0x3a4a <radioSendData>

000040da <macDataRequestInt>:
    40da:	ef 92       	push	r14
    40dc:	ff 92       	push	r15
    40de:	0f 93       	push	r16
    40e0:	1f 93       	push	r17
    40e2:	cf 93       	push	r28
    40e4:	df 93       	push	r29
    40e6:	e0 91 3d 0c 	lds	r30, 0x0C3D	; 0x800c3d <macConfig+0xd>
    40ea:	f0 91 3e 0c 	lds	r31, 0x0C3E	; 0x800c3e <macConfig+0xe>
    40ee:	8e 17       	cp	r24, r30
    40f0:	9f 07       	cpc	r25, r31
    40f2:	09 f4       	brne	.+2      	; 0x40f6 <macDataRequestInt+0x1c>
    40f4:	6e c0       	rjmp	.+220    	; 0x41d2 <macDataRequestInt+0xf8>
    40f6:	8f 3f       	cpi	r24, 0xFF	; 255
    40f8:	3f ef       	ldi	r19, 0xFF	; 255
    40fa:	93 07       	cpc	r25, r19
    40fc:	09 f4       	brne	.+2      	; 0x4100 <macDataRequestInt+0x26>
    40fe:	69 c0       	rjmp	.+210    	; 0x41d2 <macDataRequestInt+0xf8>
    4100:	30 91 38 0c 	lds	r19, 0x0C38	; 0x800c38 <macConfig+0x8>
    4104:	33 23       	and	r19, r19
    4106:	09 f4       	brne	.+2      	; 0x410a <macDataRequestInt+0x30>
    4108:	64 c0       	rjmp	.+200    	; 0x41d2 <macDataRequestInt+0xf8>
    410a:	c2 2f       	mov	r28, r18
    410c:	7a 01       	movw	r14, r20
    410e:	d6 2f       	mov	r29, r22
    4110:	8c 01       	movw	r16, r24
    4112:	81 e6       	ldi	r24, 0x61	; 97
    4114:	98 e8       	ldi	r25, 0x88	; 136
    4116:	90 93 b0 0b 	sts	0x0BB0, r25	; 0x800bb0 <mac_buffer_tx+0x2>
    411a:	80 93 af 0b 	sts	0x0BAF, r24	; 0x800baf <mac_buffer_tx+0x1>
    411e:	80 91 3a 0c 	lds	r24, 0x0C3A	; 0x800c3a <macConfig+0xa>
    4122:	91 e0       	ldi	r25, 0x01	; 1
    4124:	98 0f       	add	r25, r24
    4126:	90 93 3a 0c 	sts	0x0C3A, r25	; 0x800c3a <macConfig+0xa>
    412a:	80 93 b1 0b 	sts	0x0BB1, r24	; 0x800bb1 <mac_buffer_tx+0x3>
    412e:	80 91 3b 0c 	lds	r24, 0x0C3B	; 0x800c3b <macConfig+0xb>
    4132:	90 91 3c 0c 	lds	r25, 0x0C3C	; 0x800c3c <macConfig+0xc>
    4136:	90 93 b3 0b 	sts	0x0BB3, r25	; 0x800bb3 <mac_buffer_tx+0x5>
    413a:	80 93 b2 0b 	sts	0x0BB2, r24	; 0x800bb2 <mac_buffer_tx+0x4>
    413e:	f0 93 b7 0b 	sts	0x0BB7, r31	; 0x800bb7 <mac_buffer_tx+0x9>
    4142:	e0 93 b6 0b 	sts	0x0BB6, r30	; 0x800bb6 <mac_buffer_tx+0x8>
    4146:	10 93 b9 0b 	sts	0x0BB9, r17	; 0x800bb9 <mac_buffer_tx+0xb>
    414a:	00 93 b8 0b 	sts	0x0BB8, r16	; 0x800bb8 <mac_buffer_tx+0xa>
    414e:	f0 93 bb 0b 	sts	0x0BBB, r31	; 0x800bbb <mac_buffer_tx+0xd>
    4152:	e0 93 ba 0b 	sts	0x0BBA, r30	; 0x800bba <mac_buffer_tx+0xc>
    4156:	c8 01       	movw	r24, r16
    4158:	0e 94 3e 24 	call	0x487c	; 0x487c <macSendRoutingPacket>
    415c:	c6 30       	cpi	r28, 0x06	; 6
    415e:	29 f4       	brne	.+10     	; 0x416a <macDataRequestInt+0x90>
    4160:	10 93 b5 0b 	sts	0x0BB5, r17	; 0x800bb5 <mac_buffer_tx+0x7>
    4164:	00 93 b4 0b 	sts	0x0BB4, r16	; 0x800bb4 <mac_buffer_tx+0x6>
    4168:	08 c0       	rjmp	.+16     	; 0x417a <macDataRequestInt+0xa0>
    416a:	80 91 3f 0c 	lds	r24, 0x0C3F	; 0x800c3f <macConfig+0xf>
    416e:	90 91 40 0c 	lds	r25, 0x0C40	; 0x800c40 <macConfig+0x10>
    4172:	90 93 b5 0b 	sts	0x0BB5, r25	; 0x800bb5 <mac_buffer_tx+0x7>
    4176:	80 93 b4 0b 	sts	0x0BB4, r24	; 0x800bb4 <mac_buffer_tx+0x6>
    417a:	c0 93 bc 0b 	sts	0x0BBC, r28	; 0x800bbc <mac_buffer_tx+0xe>
    417e:	f7 01       	movw	r30, r14
    4180:	2d eb       	ldi	r18, 0xBD	; 189
    4182:	3b e0       	ldi	r19, 0x0B	; 11
    4184:	d9 01       	movw	r26, r18
    4186:	8a 2f       	mov	r24, r26
    4188:	82 1b       	sub	r24, r18
    418a:	8d 17       	cp	r24, r29
    418c:	18 f4       	brcc	.+6      	; 0x4194 <macDataRequestInt+0xba>
    418e:	81 91       	ld	r24, Z+
    4190:	8d 93       	st	X+, r24
    4192:	f9 cf       	rjmp	.-14     	; 0x4186 <macDataRequestInt+0xac>
    4194:	80 91 b4 0b 	lds	r24, 0x0BB4	; 0x800bb4 <mac_buffer_tx+0x6>
    4198:	90 91 b5 0b 	lds	r25, 0x0BB5	; 0x800bb5 <mac_buffer_tx+0x7>
    419c:	20 91 3d 0c 	lds	r18, 0x0C3D	; 0x800c3d <macConfig+0xd>
    41a0:	30 91 3e 0c 	lds	r19, 0x0C3E	; 0x800c3e <macConfig+0xe>
    41a4:	82 17       	cp	r24, r18
    41a6:	93 07       	cpc	r25, r19
    41a8:	a1 f0       	breq	.+40     	; 0x41d2 <macDataRequestInt+0xf8>
    41aa:	01 96       	adiw	r24, 0x01	; 1
    41ac:	91 f0       	breq	.+36     	; 0x41d2 <macDataRequestInt+0xf8>
    41ae:	d2 5f       	subi	r29, 0xF2	; 242
    41b0:	d0 93 ae 0b 	sts	0x0BAE, r29	; 0x800bae <mac_buffer_tx>
    41b4:	c6 50       	subi	r28, 0x06	; 6
    41b6:	c2 30       	cpi	r28, 0x02	; 2
    41b8:	18 f0       	brcs	.+6      	; 0x41c0 <macDataRequestInt+0xe6>
    41ba:	87 e0       	ldi	r24, 0x07	; 7
    41bc:	90 e0       	ldi	r25, 0x00	; 0
    41be:	02 c0       	rjmp	.+4      	; 0x41c4 <macDataRequestInt+0xea>
    41c0:	80 e0       	ldi	r24, 0x00	; 0
    41c2:	90 e0       	ldi	r25, 0x00	; 0
    41c4:	67 e6       	ldi	r22, 0x67	; 103
    41c6:	70 e2       	ldi	r23, 0x20	; 32
    41c8:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <macSetAlarm>
    41cc:	81 e0       	ldi	r24, 0x01	; 1
    41ce:	80 93 47 0c 	sts	0x0C47, r24	; 0x800c47 <macConfig+0x17>
    41d2:	df 91       	pop	r29
    41d4:	cf 91       	pop	r28
    41d6:	1f 91       	pop	r17
    41d8:	0f 91       	pop	r16
    41da:	ff 90       	pop	r15
    41dc:	ef 90       	pop	r14
    41de:	08 95       	ret

000041e0 <macDataRequest>:
    41e0:	21 e0       	ldi	r18, 0x01	; 1
    41e2:	0c 94 6d 20 	jmp	0x40da	; 0x40da <macDataRequestInt>

000041e6 <macDataIndication>:
                fnDebugMsg("\r\nData indication buffer problem");
        }
    }
#endif

    switch (frame->type & 0x7f)  // Mask high bit just in case it was somehow missed
    41e6:	80 91 3a 0b 	lds	r24, 0x0B3A	; 0x800b3a <mac_buffer_rx+0xe>
    41ea:	8f 77       	andi	r24, 0x7F	; 127
    41ec:	83 30       	cpi	r24, 0x03	; 3
    41ee:	29 f1       	breq	.+74     	; 0x423a <macDataIndication+0x54>
    41f0:	28 f4       	brcc	.+10     	; 0x41fc <macDataIndication+0x16>
    41f2:	81 30       	cpi	r24, 0x01	; 1
    41f4:	41 f0       	breq	.+16     	; 0x4206 <macDataIndication+0x20>
    41f6:	82 30       	cpi	r24, 0x02	; 2
    41f8:	d1 f0       	breq	.+52     	; 0x422e <macDataIndication+0x48>
    41fa:	08 95       	ret
    41fc:	84 30       	cpi	r24, 0x04	; 4
    41fe:	19 f1       	breq	.+70     	; 0x4246 <macDataIndication+0x60>
    4200:	86 30       	cpi	r24, 0x06	; 6
    4202:	19 f0       	breq	.+6      	; 0x420a <macDataIndication+0x24>
    4204:	08 95       	ret
    {
    case DATA_FRAME:
        // Plain old data, send it up the chain
        appDataIndication();
    4206:	0c 94 28 02 	jmp	0x450	; 0x450 <appDataIndication>
        break;
    case WAKE_NODE:
        // Wake up the end node.
        if (NODETYPE == ROUTER)
        {
            u8 addr = ((ftWake*)frame)->addr;
    420a:	80 91 3b 0b 	lds	r24, 0x0B3B	; 0x800b3b <mac_buffer_rx+0xf>
    420e:	90 91 3c 0b 	lds	r25, 0x0B3C	; 0x800b3c <mac_buffer_rx+0x10>
            // See if this is from parent or child
            if ((((ftWake*)frame)->srcAddr) == macConfig.parentShortAddress)
    4212:	40 91 34 0b 	lds	r20, 0x0B34	; 0x800b34 <mac_buffer_rx+0x8>
    4216:	50 91 35 0b 	lds	r21, 0x0B35	; 0x800b35 <mac_buffer_rx+0x9>
    421a:	20 91 3f 0c 	lds	r18, 0x0C3F	; 0x800c3f <macConfig+0xf>
    421e:	30 91 40 0c 	lds	r19, 0x0C40	; 0x800c40 <macConfig+0x10>
    4222:	42 17       	cp	r20, r18
    4224:	53 07       	cpc	r21, r19
    4226:	a9 f4       	brne	.+42     	; 0x4252 <macDataIndication+0x6c>
                // Set the flag to wake up the end node when it sends a packet
                macWakeChildNode(addr);
    4228:	99 27       	eor	r25, r25
    422a:	0c 94 36 20 	jmp	0x406c	; 0x406c <macWakeChildNode>
            debugMsgStrConst("\r\nAwake");
        }
        break;
    case PING_REQ_FRAME:
        // We got a ping request, let the app handle that
        appPingReq(frame->originAddr);
    422e:	80 91 38 0b 	lds	r24, 0x0B38	; 0x800b38 <mac_buffer_rx+0xc>
    4232:	90 91 39 0b 	lds	r25, 0x0B39	; 0x800b39 <mac_buffer_rx+0xd>
    4236:	0c 94 c6 01 	jmp	0x38c	; 0x38c <appPingReq>
        break;
    case PING_RSP_FRAME:
        // We got a ping response, app will handle it
        appPingRsp(frame->originAddr);
    423a:	80 91 38 0b 	lds	r24, 0x0B38	; 0x800b38 <mac_buffer_rx+0xc>
    423e:	90 91 39 0b 	lds	r25, 0x0B39	; 0x800b39 <mac_buffer_rx+0xd>
    4242:	0c 94 ca 01 	jmp	0x394	; 0x394 <appPingRsp>
        break;
    case DROP_CHILD_FRAME:
        // Coordinator is telling us to drop a child
        if (NODETYPE == ROUTER)
            macRemoveChild(*(u16*)(&frame->payload));
    4246:	80 91 3b 0b 	lds	r24, 0x0B3B	; 0x800b3b <mac_buffer_rx+0xf>
    424a:	90 91 3c 0b 	lds	r25, 0x0B3C	; 0x800b3c <mac_buffer_rx+0x10>
    424e:	0c 94 1a 20 	jmp	0x4034	; 0x4034 <macRemoveChild>
    4252:	08 95       	ret

00004254 <mp>:
    }
}

// Target function to timer, sends ping packet after a delay
void mp(void)
{
    4254:	0f 93       	push	r16
    4256:	1f 93       	push	r17
    4258:	cf 93       	push	r28
    425a:	df 93       	push	r29
    425c:	cd b7       	in	r28, 0x3d	; 61
    425e:	de b7       	in	r29, 0x3e	; 62
    4260:	60 97       	sbiw	r28, 0x10	; 16
    4262:	0f b6       	in	r0, 0x3f	; 63
    4264:	f8 94       	cli
    4266:	de bf       	out	0x3e, r29	; 62
    4268:	0f be       	out	0x3f, r0	; 63
    426a:	cd bf       	out	0x3d, r28	; 61
    ftPing frame;

    frame.fcf = htons_16(FCF_DATA);
    426c:	81 e6       	ldi	r24, 0x61	; 97
    426e:	98 e8       	ldi	r25, 0x88	; 136
    4270:	9a 83       	std	Y+2, r25	; 0x02
    4272:	89 83       	std	Y+1, r24	; 0x01
    frame.seq = macConfig.dsn++;
    4274:	00 e3       	ldi	r16, 0x30	; 48
    4276:	1c e0       	ldi	r17, 0x0C	; 12
    4278:	f8 01       	movw	r30, r16
    427a:	82 85       	ldd	r24, Z+10	; 0x0a
    427c:	91 e0       	ldi	r25, 0x01	; 1
    427e:	98 0f       	add	r25, r24
    4280:	92 87       	std	Z+10, r25	; 0x0a
    4282:	8b 83       	std	Y+3, r24	; 0x03
    frame.panid = htons_16(macConfig.panId);
    4284:	83 85       	ldd	r24, Z+11	; 0x0b
    4286:	94 85       	ldd	r25, Z+12	; 0x0c
    4288:	9d 83       	std	Y+5, r25	; 0x05
    428a:	8c 83       	std	Y+4, r24	; 0x04
    frame.srcAddr = htons_16(macConfig.shortAddress);
    428c:	85 85       	ldd	r24, Z+13	; 0x0d
    428e:	96 85       	ldd	r25, Z+14	; 0x0e
    4290:	99 87       	std	Y+9, r25	; 0x09
    4292:	88 87       	std	Y+8, r24	; 0x08
    frame.originAddr = htons_16(macConfig.shortAddress);
    4294:	9d 87       	std	Y+13, r25	; 0x0d
    4296:	8c 87       	std	Y+12, r24	; 0x0c
    frame.finalDestAddr = htons_16(pingAddr);
    4298:	80 91 65 06 	lds	r24, 0x0665	; 0x800665 <pingAddr>
    429c:	90 91 66 06 	lds	r25, 0x0666	; 0x800666 <pingAddr+0x1>
    42a0:	9b 87       	std	Y+11, r25	; 0x0b
    42a2:	8a 87       	std	Y+10, r24	; 0x0a
    frame.type = pingType;
    42a4:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <pingType>
    42a8:	8e 87       	std	Y+14, r24	; 0x0e
    frame.rssi = radioGetSavedRssiValue();
    42aa:	0e 94 30 1b 	call	0x3660	; 0x3660 <radioGetSavedRssiValue>
    42ae:	8f 87       	std	Y+15, r24	; 0x0f
    frame.lqi = radioGetSavedLqiValue();
    42b0:	0e 94 39 1b 	call	0x3672	; 0x3672 <radioGetSavedLqiValue>
    42b4:	88 8b       	std	Y+16, r24	; 0x10
            return;
        }
    }
    else
        // End/router nodes
        frame.destAddr = htons_16(macConfig.parentShortAddress);
    42b6:	f8 01       	movw	r30, r16
    42b8:	87 85       	ldd	r24, Z+15	; 0x0f
    42ba:	90 89       	ldd	r25, Z+16	; 0x10
    42bc:	9f 83       	std	Y+7, r25	; 0x07
    42be:	8e 83       	std	Y+6, r24	; 0x06


    radioSendData(sizeof(ftPing), (u8*)&frame);
    42c0:	be 01       	movw	r22, r28
    42c2:	6f 5f       	subi	r22, 0xFF	; 255
    42c4:	7f 4f       	sbci	r23, 0xFF	; 255
    42c6:	80 e1       	ldi	r24, 0x10	; 16
    42c8:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <radioSendData>
}
    42cc:	60 96       	adiw	r28, 0x10	; 16
    42ce:	0f b6       	in	r0, 0x3f	; 63
    42d0:	f8 94       	cli
    42d2:	de bf       	out	0x3e, r29	; 62
    42d4:	0f be       	out	0x3f, r0	; 63
    42d6:	cd bf       	out	0x3d, r28	; 61
    42d8:	df 91       	pop	r29
    42da:	cf 91       	pop	r28
    42dc:	1f 91       	pop	r17
    42de:	0f 91       	pop	r16
    42e0:	08 95       	ret

000042e2 <macPing>:

   @param addr Short address of node to send ping
*/
void macPing(u8 pingTypeArg, u16 addr)
{
    if (addr == macConfig.shortAddress)
    42e2:	20 91 3d 0c 	lds	r18, 0x0C3D	; 0x800c3d <macConfig+0xd>
    42e6:	30 91 3e 0c 	lds	r19, 0x0C3E	; 0x800c3e <macConfig+0xe>
    42ea:	62 17       	cp	r22, r18
    42ec:	73 07       	cpc	r23, r19
    42ee:	91 f0       	breq	.+36     	; 0x4314 <macPing+0x32>
        // Don't send to self
        return;

    if (!macConfig.associated)
    42f0:	90 91 38 0c 	lds	r25, 0x0C38	; 0x800c38 <macConfig+0x8>
    42f4:	99 23       	and	r25, r25
    42f6:	71 f0       	breq	.+28     	; 0x4314 <macPing+0x32>
        // Broadcast addr
        return;

    pingAddr = addr;
    42f8:	70 93 66 06 	sts	0x0666, r23	; 0x800666 <pingAddr+0x1>
    42fc:	60 93 65 06 	sts	0x0665, r22	; 0x800665 <pingAddr>
    pingType = pingTypeArg;
    4300:	90 e0       	ldi	r25, 0x00	; 0
    4302:	90 93 64 06 	sts	0x0664, r25	; 0x800664 <pingType+0x1>
    4306:	80 93 63 06 	sts	0x0663, r24	; 0x800663 <pingType>
        macConfig.busy = true;
    }
    else
    {
        // End/router nodes
        mp();
    430a:	0e 94 2a 21 	call	0x4254	; 0x4254 <mp>
        macConfig.busy = true;
    430e:	81 e0       	ldi	r24, 0x01	; 1
    4310:	80 93 47 0c 	sts	0x0C47, r24	; 0x800c47 <macConfig+0x17>
    4314:	08 95       	ret

00004316 <mac_event_pending>:

    @return True if there is a pending event, else false.
*/
u8 mac_event_pending(void)
{
    u8 head = event_queue.head;
    4316:	20 91 49 0c 	lds	r18, 0x0C49	; 0x800c49 <event_queue>
    return (head != event_queue.tail);
    431a:	90 91 4a 0c 	lds	r25, 0x0C4A	; 0x800c4a <event_queue+0x1>
    431e:	81 e0       	ldi	r24, 0x01	; 1
    4320:	29 13       	cpse	r18, r25
    4322:	01 c0       	rjmp	.+2      	; 0x4326 <mac_event_pending+0x10>
    4324:	80 e0       	ldi	r24, 0x00	; 0
}
    4326:	08 95       	ret

00004328 <mac_put_event>:
    @brief Puts an event into the queue of events.

    @param object is a pointer to the event to add to queue.
*/
void mac_put_event(event_object_t *object)
{
    4328:	cf 93       	push	r28
    432a:	df 93       	push	r29
    432c:	ec 01       	movw	r28, r24
    u8 newhead = event_queue.head;
    432e:	40 91 49 0c 	lds	r20, 0x0C49	; 0x800c49 <event_queue>

    if ((newhead + 1) % MAX_EVENTS == event_queue.tail)
    4332:	24 2f       	mov	r18, r20
    4334:	30 e0       	ldi	r19, 0x00	; 0
    4336:	e0 91 4a 0c 	lds	r30, 0x0C4A	; 0x800c4a <event_queue+0x1>
    433a:	c9 01       	movw	r24, r18
    433c:	01 96       	adiw	r24, 0x01	; 1
    433e:	6e e1       	ldi	r22, 0x1E	; 30
    4340:	70 e0       	ldi	r23, 0x00	; 0
    4342:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <__divmodhi4>
    4346:	6e 2f       	mov	r22, r30
    4348:	70 e0       	ldi	r23, 0x00	; 0
    434a:	86 17       	cp	r24, r22
    434c:	97 07       	cpc	r25, r23
    434e:	a9 f0       	breq	.+42     	; 0x437a <mac_put_event+0x52>
        return;

    //    newhead = event_queue.head;

    // store in queue
    event_queue.event_object[newhead] = *object;
    4350:	f9 01       	movw	r30, r18
    4352:	ee 0f       	add	r30, r30
    4354:	ff 1f       	adc	r31, r31
    4356:	2e 0f       	add	r18, r30
    4358:	3f 1f       	adc	r19, r31
    435a:	f9 01       	movw	r30, r18
    435c:	e7 5b       	subi	r30, 0xB7	; 183
    435e:	f3 4f       	sbci	r31, 0xF3	; 243
    4360:	88 81       	ld	r24, Y
    4362:	99 81       	ldd	r25, Y+1	; 0x01
    4364:	aa 81       	ldd	r26, Y+2	; 0x02
    4366:	82 83       	std	Z+2, r24	; 0x02
    4368:	93 83       	std	Z+3, r25	; 0x03
    436a:	a4 83       	std	Z+4, r26	; 0x04

    // calculate new head index
    newhead++;
    436c:	81 e0       	ldi	r24, 0x01	; 1
    436e:	84 0f       	add	r24, r20
    if (newhead >= MAX_EVENTS)
    4370:	8e 31       	cpi	r24, 0x1E	; 30
    4372:	08 f0       	brcs	.+2      	; 0x4376 <mac_put_event+0x4e>
        newhead = 0;
    4374:	80 e0       	ldi	r24, 0x00	; 0
    event_queue.head = newhead;
    4376:	80 93 49 0c 	sts	0x0C49, r24	; 0x800c49 <event_queue>
}
    437a:	df 91       	pop	r29
    437c:	cf 91       	pop	r28
    437e:	08 95       	ret

00004380 <mac_get_event>:

    @return Pointer to the event object, or garbage data if the queue
    is empty.
*/
event_object_t * mac_get_event(void)
{
    4380:	cf 93       	push	r28
    4382:	df 93       	push	r29
    4384:	1f 92       	push	r1
    4386:	cd b7       	in	r28, 0x3d	; 61
    4388:	de b7       	in	r29, 0x3e	; 62
    event_object_t *object = NULL;
    volatile u8 newtail;

    newtail = event_queue.tail;
    438a:	80 91 4a 0c 	lds	r24, 0x0C4A	; 0x800c4a <event_queue+0x1>
    438e:	89 83       	std	Y+1, r24	; 0x01

    object = &(event_queue.event_object[newtail]);
    4390:	89 81       	ldd	r24, Y+1	; 0x01
    4392:	90 e0       	ldi	r25, 0x00	; 0
    4394:	9c 01       	movw	r18, r24
    4396:	22 0f       	add	r18, r18
    4398:	33 1f       	adc	r19, r19
    439a:	82 0f       	add	r24, r18
    439c:	93 1f       	adc	r25, r19
    439e:	85 5b       	subi	r24, 0xB5	; 181
    43a0:	93 4f       	sbci	r25, 0xF3	; 243

    // calculate new tail
    newtail++;
    43a2:	29 81       	ldd	r18, Y+1	; 0x01
    43a4:	2f 5f       	subi	r18, 0xFF	; 255
    43a6:	29 83       	std	Y+1, r18	; 0x01
    if (newtail >= MAX_EVENTS)
    43a8:	29 81       	ldd	r18, Y+1	; 0x01
    43aa:	2e 31       	cpi	r18, 0x1E	; 30
    43ac:	08 f0       	brcs	.+2      	; 0x43b0 <mac_get_event+0x30>
        newtail = 0;
    43ae:	19 82       	std	Y+1, r1	; 0x01

    event_queue.tail = newtail;
    43b0:	29 81       	ldd	r18, Y+1	; 0x01
    43b2:	20 93 4a 0c 	sts	0x0C4A, r18	; 0x800c4a <event_queue+0x1>

    return(object);
}
    43b6:	0f 90       	pop	r0
    43b8:	df 91       	pop	r29
    43ba:	cf 91       	pop	r28
    43bc:	08 95       	ret

000043be <macTask>:
   "forever" loop or by an OS task or thread.  This function processes
   interrupt events that are stored in the event queue by the radio or
   timer.
*/
void macTask(void)
{
    43be:	cf 93       	push	r28
                //   if (*((u16*)(mac_buffer_rx+1)) == FCF_ASSOC_RESP_DIRECT) // Direct to MAC Addr?
                if ((mac_buffer_rx[2] == (htons_16(FCF_ASSOC_RESP_DIRECT) >> 8)) &&
                    (mac_buffer_rx[1] == (htons_16(FCF_ASSOC_RESP_DIRECT) & 0xff)))
                {
                    // this is a new node, do the association thing
                    macConfig.associated = true;
    43c0:	c1 e0       	ldi	r28, 0x01	; 1
void macTask(void)
{
    event_object_t *event;

    event = 0;
    while(mac_event_pending())
    43c2:	0e 94 8b 21 	call	0x4316	; 0x4316 <mac_event_pending>
    43c6:	88 23       	and	r24, r24
    43c8:	09 f4       	brne	.+2      	; 0x43cc <macTask+0xe>
    43ca:	81 c0       	rjmp	.+258    	; 0x44ce <macTask+0x110>
    {
        event = mac_get_event();
    43cc:	0e 94 c0 21 	call	0x4380	; 0x4380 <mac_get_event>
        switch (event->event)
    43d0:	dc 01       	movw	r26, r24
    43d2:	ec 91       	ld	r30, X
    43d4:	4e 2f       	mov	r20, r30
    43d6:	50 e0       	ldi	r21, 0x00	; 0
    43d8:	fa 01       	movw	r30, r20
    43da:	70 97       	sbiw	r30, 0x10	; 16
    43dc:	ea 30       	cpi	r30, 0x0A	; 10
    43de:	f1 05       	cpc	r31, r1
    43e0:	80 f7       	brcc	.-32     	; 0x43c2 <macTask+0x4>
    43e2:	ed 52       	subi	r30, 0x2D	; 45
    43e4:	ff 4f       	sbci	r31, 0xFF	; 255
    43e6:	0c 94 f6 2d 	jmp	0x5bec	; 0x5bec <__tablejump2__>
        {
        case MAC_EVENT_SCAN:
            // A beacon has been received as a result of an active scan.
            // Record the pan descriptor and store it until the scan has
            // completed.
            if (!macConfig.associated)
    43ea:	80 91 38 0c 	lds	r24, 0x0C38	; 0x800c38 <macConfig+0x8>
    43ee:	81 11       	cpse	r24, r1
    43f0:	e8 cf       	rjmp	.-48     	; 0x43c2 <macTask+0x4>
                mac_logPanDescriptors();
    43f2:	0e 94 69 24 	call	0x48d2	; 0x48d2 <mac_logPanDescriptors>
    43f6:	e5 cf       	rjmp	.-54     	; 0x43c2 <macTask+0x4>
            break;
// ETG #if __AVR__ || __AVR32__
#if __AVR__ || __AVR32__
       case MAC_EVENT_TIMER:
           // Timer has expired, just callback the stored function pointer
           ((void (*)(void))event->data)();  // cast data to function pointer
    43f8:	dc 01       	movw	r26, r24
    43fa:	11 96       	adiw	r26, 0x01	; 1
    43fc:	ed 91       	ld	r30, X+
    43fe:	fc 91       	ld	r31, X
    4400:	12 97       	sbiw	r26, 0x02	; 2
    4402:	09 95       	icall
           break;
    4404:	de cf       	rjmp	.-68     	; 0x43c2 <macTask+0x4>
#endif
        case MAC_EVENT_RX:
            if (macConfig.associated)
    4406:	80 91 38 0c 	lds	r24, 0x0C38	; 0x800c38 <macConfig+0x8>
    440a:	88 23       	and	r24, r24
    440c:	d1 f2       	breq	.-76     	; 0x43c2 <macTask+0x4>
                frame->finalDestAddr = ntohs_16(frame->finalDestAddr);
                frame->originAddr = ntohs_16(frame->originAddr);

                // Wake up
                if (NODETYPE != ENDDEVICE)
                    macChildIsAwake((ftData*)(mac_buffer_rx+1));
    440e:	8d e2       	ldi	r24, 0x2D	; 45
    4410:	9b e0       	ldi	r25, 0x0B	; 11
    4412:	0e 94 37 20 	call	0x406e	; 0x406e <macChildIsAwake>
                // Received a data frame, process it or route it
                if (((ftData*)(mac_buffer_rx+1))->finalDestAddr == macConfig.shortAddress)
    4416:	20 91 36 0b 	lds	r18, 0x0B36	; 0x800b36 <mac_buffer_rx+0xa>
    441a:	30 91 37 0b 	lds	r19, 0x0B37	; 0x800b37 <mac_buffer_rx+0xb>
    441e:	80 91 3d 0c 	lds	r24, 0x0C3D	; 0x800c3d <macConfig+0xd>
    4422:	90 91 3e 0c 	lds	r25, 0x0C3E	; 0x800c3e <macConfig+0xe>
    4426:	28 17       	cp	r18, r24
    4428:	39 07       	cpc	r19, r25
    442a:	19 f4       	brne	.+6      	; 0x4432 <macTask+0x74>
                    // This data frame is for this node
                    macDataIndication();
    442c:	0e 94 f3 20 	call	0x41e6	; 0x41e6 <macDataIndication>
    4430:	c8 cf       	rjmp	.-112    	; 0x43c2 <macTask+0x4>
                else
                    // Route the packet up/down stream
                    if (NODETYPE != ENDDEVICE)
                        macRouteData();
    4432:	0e 94 e5 23 	call	0x47ca	; 0x47ca <macRouteData>
    4436:	c5 cf       	rjmp	.-118    	; 0x43c2 <macTask+0x4>
            {
                ftBeaconReq *frame = (ftBeaconReq*)(mac_buffer_rx+1);
                frame->panid = ntohs_16(frame->panid);
                
                // Generate and send the beacon.
                if (NODETYPE == ROUTER && macConfig.associated)
    4438:	80 91 38 0c 	lds	r24, 0x0C38	; 0x800c38 <macConfig+0x8>
    443c:	88 23       	and	r24, r24
    443e:	09 f2       	breq	.-126    	; 0x43c2 <macTask+0x4>
                    macSetAlarm(1, sendBeaconFrame);
    4440:	6c e3       	ldi	r22, 0x3C	; 60
    4442:	70 e2       	ldi	r23, 0x20	; 32
    4444:	81 e0       	ldi	r24, 0x01	; 1
    4446:	90 e0       	ldi	r25, 0x00	; 0
    4448:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <macSetAlarm>
    444c:	ba cf       	rjmp	.-140    	; 0x43c2 <macTask+0x4>
                break;                
            }
            if (NODETYPE == COORD)
                // Pan Coord has received this request.
                macAssociationResponse();
            if (NODETYPE == ROUTER && macConfig.associated)
    444e:	80 91 38 0c 	lds	r24, 0x0C38	; 0x800c38 <macConfig+0x8>
    4452:	88 23       	and	r24, r24
    4454:	09 f4       	brne	.+2      	; 0x4458 <macTask+0x9a>
    4456:	b5 cf       	rjmp	.-150    	; 0x43c2 <macTask+0x4>
            {
                // Send this packet along to parent
                macRouteAssociateRequest();
    4458:	0e 94 44 23 	call	0x4688	; 0x4688 <macRouteAssociateRequest>
    445c:	b2 cf       	rjmp	.-156    	; 0x43c2 <macTask+0x4>
        case MAC_EVENT_ASSOCIATION_RESPONSE:
            // End device has recieved this response.
            if (NODETYPE != COORD)
            {
                //   if (*((u16*)(mac_buffer_rx+1)) == FCF_ASSOC_RESP_DIRECT) // Direct to MAC Addr?
                if ((mac_buffer_rx[2] == (htons_16(FCF_ASSOC_RESP_DIRECT) >> 8)) &&
    445e:	80 91 2e 0b 	lds	r24, 0x0B2E	; 0x800b2e <mac_buffer_rx+0x2>
    4462:	8c 38       	cpi	r24, 0x8C	; 140
    4464:	d9 f4       	brne	.+54     	; 0x449c <macTask+0xde>
    4466:	80 91 2d 0b 	lds	r24, 0x0B2D	; 0x800b2d <mac_buffer_rx+0x1>
    446a:	83 36       	cpi	r24, 0x63	; 99
    446c:	b9 f4       	brne	.+46     	; 0x449c <macTask+0xde>
                    (mac_buffer_rx[1] == (htons_16(FCF_ASSOC_RESP_DIRECT) & 0xff)))
                {
                    // this is a new node, do the association thing
                    macConfig.associated = true;
    446e:	c0 93 38 0c 	sts	0x0C38, r28	; 0x800c38 <macConfig+0x8>
                    macConfig.parentShortAddress = ntohs_16(((ftAssocRespDirect*)(mac_buffer_rx+1))->srcAddr);
    4472:	80 91 3a 0b 	lds	r24, 0x0B3A	; 0x800b3a <mac_buffer_rx+0xe>
    4476:	90 91 3b 0b 	lds	r25, 0x0B3B	; 0x800b3b <mac_buffer_rx+0xf>
    447a:	90 93 40 0c 	sts	0x0C40, r25	; 0x800c40 <macConfig+0x10>
    447e:	80 93 3f 0c 	sts	0x0C3F, r24	; 0x800c3f <macConfig+0xf>
                    macConfig.shortAddress = ntohs_16(((ftAssocRespDirect*)(mac_buffer_rx+1))->shortAddr);
    4482:	80 91 3d 0b 	lds	r24, 0x0B3D	; 0x800b3d <mac_buffer_rx+0x11>
    4486:	90 91 3e 0b 	lds	r25, 0x0B3E	; 0x800b3e <mac_buffer_rx+0x12>
    448a:	90 93 3e 0c 	sts	0x0C3E, r25	; 0x800c3e <macConfig+0xe>
    448e:	80 93 3d 0c 	sts	0x0C3D, r24	; 0x800c3d <macConfig+0xd>

                    radioSetShortAddress(macConfig.shortAddress);
    4492:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <radioSetShortAddress>
                    macAssociationConfirm();
    4496:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <macAssociationConfirm>
    449a:	93 cf       	rjmp	.-218    	; 0x43c2 <macTask+0x4>
                }
                else
                {
                    // we are indirect, so just send this packet along.
                    if (NODETYPE == ROUTER && macConfig.associated)
    449c:	80 91 38 0c 	lds	r24, 0x0C38	; 0x800c38 <macConfig+0x8>
    44a0:	88 23       	and	r24, r24
    44a2:	09 f4       	brne	.+2      	; 0x44a6 <macTask+0xe8>
    44a4:	8e cf       	rjmp	.-228    	; 0x43c2 <macTask+0x4>
                        frame->srcAddr = ntohs_16(frame->srcAddr);
                        frame->parentAddr = ntohs_16(frame->parentAddr);
                        frame->shortAddr = ntohs_16(frame->shortAddr);
                        frame->macAddr = ntohs_64(frame->macAddr);
                        // Route the packet
                        macRouteAssociateResponse();
    44a6:	0e 94 b5 22 	call	0x456a	; 0x456a <macRouteAssociateResponse>
    44aa:	8b cf       	rjmp	.-234    	; 0x43c2 <macTask+0x4>
                }
            }
            break;
        case MAC_EVENT_ROUTE:
            // Routing packet received, forward it
            if (NODETYPE == ROUTER && macConfig.associated)
    44ac:	80 91 38 0c 	lds	r24, 0x0C38	; 0x800c38 <macConfig+0x8>
    44b0:	88 23       	and	r24, r24
    44b2:	09 f4       	brne	.+2      	; 0x44b6 <macTask+0xf8>
    44b4:	86 cf       	rjmp	.-244    	; 0x43c2 <macTask+0x4>
                macForwardRoutingPacket();
    44b6:	0e 94 69 22 	call	0x44d2	; 0x44d2 <macForwardRoutingPacket>
    44ba:	83 cf       	rjmp	.-250    	; 0x43c2 <macTask+0x4>
            break;
        case MAC_EVENT_ACCESS:
            // Channel access failure
            appPacketSendAccessFail();
    44bc:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <appPacketSendAccessFail>
            break;
    44c0:	80 cf       	rjmp	.-256    	; 0x43c2 <macTask+0x4>
        case MAC_EVENT_NACK:
            // Packet failed to be sent, alert application
            appPacketSendFailed();
    44c2:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <appPacketSendFailed>
            break;
    44c6:	7d cf       	rjmp	.-262    	; 0x43c2 <macTask+0x4>
        case MAC_EVENT_ACK:
            // Packet got through, alert application
            appPacketSendSucceed();
    44c8:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <appPacketSendSucceed>
            break;
    44cc:	7a cf       	rjmp	.-268    	; 0x43c2 <macTask+0x4>
        default:
            break;
        }
    }
}
    44ce:	cf 91       	pop	r28
    44d0:	08 95       	ret

000044d2 <macForwardRoutingPacket>:
        }
    }
}

void mrd(void)
{
    44d2:	80 91 2c 0b 	lds	r24, 0x0B2C	; 0x800b2c <mac_buffer_rx>
    44d6:	92 e8       	ldi	r25, 0x82	; 130
    44d8:	ec e2       	ldi	r30, 0x2C	; 44
    44da:	fb e0       	ldi	r31, 0x0B	; 11
    44dc:	ae ea       	ldi	r26, 0xAE	; 174
    44de:	bb e0       	ldi	r27, 0x0B	; 11
    44e0:	01 90       	ld	r0, Z+
    44e2:	0d 92       	st	X+, r0
    44e4:	9a 95       	dec	r25
    44e6:	e1 f7       	brne	.-8      	; 0x44e0 <macForwardRoutingPacket+0xe>
    44e8:	90 91 38 0c 	lds	r25, 0x0C38	; 0x800c38 <macConfig+0x8>
    44ec:	99 23       	and	r25, r25
    44ee:	e1 f1       	breq	.+120    	; 0x4568 <macForwardRoutingPacket+0x96>
    44f0:	8c 50       	subi	r24, 0x0C	; 12
    44f2:	86 95       	lsr	r24
    44f4:	e8 2f       	mov	r30, r24
    44f6:	f0 e0       	ldi	r31, 0x00	; 0
    44f8:	ee 0f       	add	r30, r30
    44fa:	ff 1f       	adc	r31, r31
    44fc:	e9 54       	subi	r30, 0x49	; 73
    44fe:	f4 4f       	sbci	r31, 0xF4	; 244
    4500:	20 81       	ld	r18, Z
    4502:	31 81       	ldd	r19, Z+1	; 0x01
    4504:	30 93 42 0c 	sts	0x0C42, r19	; 0x800c42 <macConfig+0x12>
    4508:	20 93 41 0c 	sts	0x0C41, r18	; 0x800c41 <macConfig+0x11>
    450c:	82 30       	cpi	r24, 0x02	; 2
    450e:	60 f1       	brcs	.+88     	; 0x4568 <macForwardRoutingPacket+0x96>
    4510:	81 50       	subi	r24, 0x01	; 1
    4512:	23 e6       	ldi	r18, 0x63	; 99
    4514:	38 e8       	ldi	r19, 0x88	; 136
    4516:	30 93 b0 0b 	sts	0x0BB0, r19	; 0x800bb0 <mac_buffer_tx+0x2>
    451a:	20 93 af 0b 	sts	0x0BAF, r18	; 0x800baf <mac_buffer_tx+0x1>
    451e:	90 91 3a 0c 	lds	r25, 0x0C3A	; 0x800c3a <macConfig+0xa>
    4522:	21 e0       	ldi	r18, 0x01	; 1
    4524:	29 0f       	add	r18, r25
    4526:	20 93 3a 0c 	sts	0x0C3A, r18	; 0x800c3a <macConfig+0xa>
    452a:	90 93 b1 0b 	sts	0x0BB1, r25	; 0x800bb1 <mac_buffer_tx+0x3>
    452e:	90 e0       	ldi	r25, 0x00	; 0
    4530:	fc 01       	movw	r30, r24
    4532:	ee 0f       	add	r30, r30
    4534:	ff 1f       	adc	r31, r31
    4536:	e7 54       	subi	r30, 0x47	; 71
    4538:	f4 4f       	sbci	r31, 0xF4	; 244
    453a:	20 81       	ld	r18, Z
    453c:	31 81       	ldd	r19, Z+1	; 0x01
    453e:	30 93 b5 0b 	sts	0x0BB5, r19	; 0x800bb5 <mac_buffer_tx+0x7>
    4542:	20 93 b4 0b 	sts	0x0BB4, r18	; 0x800bb4 <mac_buffer_tx+0x6>
    4546:	20 91 3d 0c 	lds	r18, 0x0C3D	; 0x800c3d <macConfig+0xd>
    454a:	30 91 3e 0c 	lds	r19, 0x0C3E	; 0x800c3e <macConfig+0xe>
    454e:	30 93 b7 0b 	sts	0x0BB7, r19	; 0x800bb7 <mac_buffer_tx+0x9>
    4552:	20 93 b6 0b 	sts	0x0BB6, r18	; 0x800bb6 <mac_buffer_tx+0x8>
    4556:	9b eb       	ldi	r25, 0xBB	; 187
    4558:	90 93 b8 0b 	sts	0x0BB8, r25	; 0x800bb8 <mac_buffer_tx+0xa>
    455c:	8b 5f       	subi	r24, 0xFB	; 251
    455e:	6f ea       	ldi	r22, 0xAF	; 175
    4560:	7b e0       	ldi	r23, 0x0B	; 11
    4562:	88 0f       	add	r24, r24
    4564:	0c 94 25 1d 	jmp	0x3a4a	; 0x3a4a <radioSendData>
    4568:	08 95       	ret

0000456a <macRouteAssociateResponse>:
    456a:	80 91 38 0c 	lds	r24, 0x0C38	; 0x800c38 <macConfig+0x8>
    456e:	88 23       	and	r24, r24
    4570:	09 f4       	brne	.+2      	; 0x4574 <macRouteAssociateResponse+0xa>
    4572:	89 c0       	rjmp	.+274    	; 0x4686 <macRouteAssociateResponse+0x11c>
    4574:	20 91 37 0b 	lds	r18, 0x0B37	; 0x800b37 <mac_buffer_rx+0xb>
    4578:	30 91 38 0b 	lds	r19, 0x0B38	; 0x800b38 <mac_buffer_rx+0xc>
    457c:	80 91 3d 0c 	lds	r24, 0x0C3D	; 0x800c3d <macConfig+0xd>
    4580:	90 91 3e 0c 	lds	r25, 0x0C3E	; 0x800c3e <macConfig+0xe>
    4584:	28 17       	cp	r18, r24
    4586:	39 07       	cpc	r19, r25
    4588:	09 f0       	breq	.+2      	; 0x458c <macRouteAssociateResponse+0x22>
    458a:	4b c0       	rjmp	.+150    	; 0x4622 <macRouteAssociateResponse+0xb8>
    458c:	83 e6       	ldi	r24, 0x63	; 99
    458e:	9c e8       	ldi	r25, 0x8C	; 140
    4590:	90 93 af 0b 	sts	0x0BAF, r25	; 0x800baf <mac_buffer_tx+0x1>
    4594:	80 93 ae 0b 	sts	0x0BAE, r24	; 0x800bae <mac_buffer_tx>
    4598:	80 91 3a 0c 	lds	r24, 0x0C3A	; 0x800c3a <macConfig+0xa>
    459c:	91 e0       	ldi	r25, 0x01	; 1
    459e:	98 0f       	add	r25, r24
    45a0:	90 93 3a 0c 	sts	0x0C3A, r25	; 0x800c3a <macConfig+0xa>
    45a4:	80 93 b0 0b 	sts	0x0BB0, r24	; 0x800bb0 <mac_buffer_tx+0x2>
    45a8:	80 91 3b 0c 	lds	r24, 0x0C3B	; 0x800c3b <macConfig+0xb>
    45ac:	90 91 3c 0c 	lds	r25, 0x0C3C	; 0x800c3c <macConfig+0xc>
    45b0:	90 93 b2 0b 	sts	0x0BB2, r25	; 0x800bb2 <mac_buffer_tx+0x4>
    45b4:	80 93 b1 0b 	sts	0x0BB1, r24	; 0x800bb1 <mac_buffer_tx+0x3>
    45b8:	80 91 39 0b 	lds	r24, 0x0B39	; 0x800b39 <mac_buffer_rx+0xd>
    45bc:	80 93 b3 0b 	sts	0x0BB3, r24	; 0x800bb3 <mac_buffer_tx+0x5>
    45c0:	80 91 3a 0b 	lds	r24, 0x0B3A	; 0x800b3a <mac_buffer_rx+0xe>
    45c4:	80 93 b4 0b 	sts	0x0BB4, r24	; 0x800bb4 <mac_buffer_tx+0x6>
    45c8:	80 91 3b 0b 	lds	r24, 0x0B3B	; 0x800b3b <mac_buffer_rx+0xf>
    45cc:	80 93 b5 0b 	sts	0x0BB5, r24	; 0x800bb5 <mac_buffer_tx+0x7>
    45d0:	80 91 3c 0b 	lds	r24, 0x0B3C	; 0x800b3c <mac_buffer_rx+0x10>
    45d4:	80 93 b6 0b 	sts	0x0BB6, r24	; 0x800bb6 <mac_buffer_tx+0x8>
    45d8:	80 91 3d 0b 	lds	r24, 0x0B3D	; 0x800b3d <mac_buffer_rx+0x11>
    45dc:	80 93 b7 0b 	sts	0x0BB7, r24	; 0x800bb7 <mac_buffer_tx+0x9>
    45e0:	80 91 3e 0b 	lds	r24, 0x0B3E	; 0x800b3e <mac_buffer_rx+0x12>
    45e4:	80 93 b8 0b 	sts	0x0BB8, r24	; 0x800bb8 <mac_buffer_tx+0xa>
    45e8:	80 91 3f 0b 	lds	r24, 0x0B3F	; 0x800b3f <mac_buffer_rx+0x13>
    45ec:	80 93 b9 0b 	sts	0x0BB9, r24	; 0x800bb9 <mac_buffer_tx+0xb>
    45f0:	80 91 40 0b 	lds	r24, 0x0B40	; 0x800b40 <mac_buffer_rx+0x14>
    45f4:	80 93 ba 0b 	sts	0x0BBA, r24	; 0x800bba <mac_buffer_tx+0xc>
    45f8:	30 93 bc 0b 	sts	0x0BBC, r19	; 0x800bbc <mac_buffer_tx+0xe>
    45fc:	20 93 bb 0b 	sts	0x0BBB, r18	; 0x800bbb <mac_buffer_tx+0xd>
    4600:	82 e0       	ldi	r24, 0x02	; 2
    4602:	80 93 bd 0b 	sts	0x0BBD, r24	; 0x800bbd <mac_buffer_tx+0xf>
    4606:	80 91 41 0b 	lds	r24, 0x0B41	; 0x800b41 <mac_buffer_rx+0x15>
    460a:	90 91 42 0b 	lds	r25, 0x0B42	; 0x800b42 <mac_buffer_rx+0x16>
    460e:	90 93 bf 0b 	sts	0x0BBF, r25	; 0x800bbf <mac_buffer_tx+0x11>
    4612:	80 93 be 0b 	sts	0x0BBE, r24	; 0x800bbe <mac_buffer_tx+0x10>
    4616:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <macAddChild>
    461a:	6e ea       	ldi	r22, 0xAE	; 174
    461c:	7b e0       	ldi	r23, 0x0B	; 11
    461e:	82 e1       	ldi	r24, 0x12	; 18
    4620:	30 c0       	rjmp	.+96     	; 0x4682 <macRouteAssociateResponse+0x118>
    4622:	22 e8       	ldi	r18, 0x82	; 130
    4624:	ec e2       	ldi	r30, 0x2C	; 44
    4626:	fb e0       	ldi	r31, 0x0B	; 11
    4628:	ae ea       	ldi	r26, 0xAE	; 174
    462a:	bb e0       	ldi	r27, 0x0B	; 11
    462c:	01 90       	ld	r0, Z+
    462e:	0d 92       	st	X+, r0
    4630:	2a 95       	dec	r18
    4632:	e1 f7       	brne	.-8      	; 0x462c <macRouteAssociateResponse+0xc2>
    4634:	20 91 3a 0c 	lds	r18, 0x0C3A	; 0x800c3a <macConfig+0xa>
    4638:	31 e0       	ldi	r19, 0x01	; 1
    463a:	32 0f       	add	r19, r18
    463c:	30 93 3a 0c 	sts	0x0C3A, r19	; 0x800c3a <macConfig+0xa>
    4640:	20 93 b1 0b 	sts	0x0BB1, r18	; 0x800bb1 <mac_buffer_tx+0x3>
    4644:	20 91 41 0c 	lds	r18, 0x0C41	; 0x800c41 <macConfig+0x11>
    4648:	30 91 42 0c 	lds	r19, 0x0C42	; 0x800c42 <macConfig+0x12>
    464c:	30 93 b5 0b 	sts	0x0BB5, r19	; 0x800bb5 <mac_buffer_tx+0x7>
    4650:	20 93 b4 0b 	sts	0x0BB4, r18	; 0x800bb4 <mac_buffer_tx+0x6>
    4654:	90 93 b7 0b 	sts	0x0BB7, r25	; 0x800bb7 <mac_buffer_tx+0x9>
    4658:	80 93 b6 0b 	sts	0x0BB6, r24	; 0x800bb6 <mac_buffer_tx+0x8>
    465c:	80 91 b9 0b 	lds	r24, 0x0BB9	; 0x800bb9 <mac_buffer_tx+0xb>
    4660:	90 91 ba 0b 	lds	r25, 0x0BBA	; 0x800bba <mac_buffer_tx+0xc>
    4664:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <macIsChild>
    4668:	88 23       	and	r24, r24
    466a:	41 f0       	breq	.+16     	; 0x467c <macRouteAssociateResponse+0x112>
    466c:	80 91 b9 0b 	lds	r24, 0x0BB9	; 0x800bb9 <mac_buffer_tx+0xb>
    4670:	90 91 ba 0b 	lds	r25, 0x0BBA	; 0x800bba <mac_buffer_tx+0xc>
    4674:	90 93 b5 0b 	sts	0x0BB5, r25	; 0x800bb5 <mac_buffer_tx+0x7>
    4678:	80 93 b4 0b 	sts	0x0BB4, r24	; 0x800bb4 <mac_buffer_tx+0x6>
    467c:	6f ea       	ldi	r22, 0xAF	; 175
    467e:	7b e0       	ldi	r23, 0x0B	; 11
    4680:	86 e1       	ldi	r24, 0x16	; 22
    4682:	0c 94 25 1d 	jmp	0x3a4a	; 0x3a4a <radioSendData>
    4686:	08 95       	ret

00004688 <macRouteAssociateRequest>:
    4688:	cf 93       	push	r28
    468a:	df 93       	push	r29
    468c:	cd b7       	in	r28, 0x3d	; 61
    468e:	de b7       	in	r29, 0x3e	; 62
    4690:	65 97       	sbiw	r28, 0x15	; 21
    4692:	0f b6       	in	r0, 0x3f	; 63
    4694:	f8 94       	cli
    4696:	de bf       	out	0x3e, r29	; 62
    4698:	0f be       	out	0x3f, r0	; 63
    469a:	cd bf       	out	0x3d, r28	; 61
    469c:	a0 91 2e 0b 	lds	r26, 0x0B2E	; 0x800b2e <mac_buffer_rx+0x2>
    46a0:	80 91 3a 0c 	lds	r24, 0x0C3A	; 0x800c3a <macConfig+0xa>
    46a4:	e0 91 3b 0c 	lds	r30, 0x0C3B	; 0x800c3b <macConfig+0xb>
    46a8:	f0 91 3c 0c 	lds	r31, 0x0C3C	; 0x800c3c <macConfig+0xc>
    46ac:	60 91 3f 0c 	lds	r22, 0x0C3F	; 0x800c3f <macConfig+0xf>
    46b0:	70 91 40 0c 	lds	r23, 0x0C40	; 0x800c40 <macConfig+0x10>
    46b4:	40 91 3d 0c 	lds	r20, 0x0C3D	; 0x800c3d <macConfig+0xd>
    46b8:	50 91 3e 0c 	lds	r21, 0x0C3E	; 0x800c3e <macConfig+0xe>
    46bc:	30 91 39 0b 	lds	r19, 0x0B39	; 0x800b39 <mac_buffer_rx+0xd>
    46c0:	20 91 3a 0b 	lds	r18, 0x0B3A	; 0x800b3a <mac_buffer_rx+0xe>
    46c4:	90 91 3b 0b 	lds	r25, 0x0B3B	; 0x800b3b <mac_buffer_rx+0xf>
    46c8:	a8 3c       	cpi	r26, 0xC8	; 200
    46ca:	81 f5       	brne	.+96     	; 0x472c <macRouteAssociateRequest+0xa4>
    46cc:	a3 e6       	ldi	r26, 0x63	; 99
    46ce:	b8 e8       	ldi	r27, 0x88	; 136
    46d0:	ba 83       	std	Y+2, r27	; 0x02
    46d2:	a9 83       	std	Y+1, r26	; 0x01
    46d4:	a1 e0       	ldi	r26, 0x01	; 1
    46d6:	a8 0f       	add	r26, r24
    46d8:	a0 93 3a 0c 	sts	0x0C3A, r26	; 0x800c3a <macConfig+0xa>
    46dc:	8b 83       	std	Y+3, r24	; 0x03
    46de:	fd 83       	std	Y+5, r31	; 0x05
    46e0:	ec 83       	std	Y+4, r30	; 0x04
    46e2:	7f 83       	std	Y+7, r23	; 0x07
    46e4:	6e 83       	std	Y+6, r22	; 0x06
    46e6:	59 87       	std	Y+9, r21	; 0x09
    46e8:	48 87       	std	Y+8, r20	; 0x08
    46ea:	81 e0       	ldi	r24, 0x01	; 1
    46ec:	8a 87       	std	Y+10, r24	; 0x0a
    46ee:	40 91 3d 0b 	lds	r20, 0x0B3D	; 0x800b3d <mac_buffer_rx+0x11>
    46f2:	50 91 3e 0b 	lds	r21, 0x0B3E	; 0x800b3e <mac_buffer_rx+0x12>
    46f6:	5c 87       	std	Y+12, r21	; 0x0c
    46f8:	4b 87       	std	Y+11, r20	; 0x0b
    46fa:	80 91 34 0b 	lds	r24, 0x0B34	; 0x800b34 <mac_buffer_rx+0x8>
    46fe:	8d 87       	std	Y+13, r24	; 0x0d
    4700:	80 91 35 0b 	lds	r24, 0x0B35	; 0x800b35 <mac_buffer_rx+0x9>
    4704:	8e 87       	std	Y+14, r24	; 0x0e
    4706:	80 91 36 0b 	lds	r24, 0x0B36	; 0x800b36 <mac_buffer_rx+0xa>
    470a:	8f 87       	std	Y+15, r24	; 0x0f
    470c:	80 91 37 0b 	lds	r24, 0x0B37	; 0x800b37 <mac_buffer_rx+0xb>
    4710:	88 8b       	std	Y+16, r24	; 0x10
    4712:	80 91 38 0b 	lds	r24, 0x0B38	; 0x800b38 <mac_buffer_rx+0xc>
    4716:	89 8b       	std	Y+17, r24	; 0x11
    4718:	3a 8b       	std	Y+18, r19	; 0x12
    471a:	2b 8b       	std	Y+19, r18	; 0x13
    471c:	9c 8b       	std	Y+20, r25	; 0x14
    471e:	80 91 3f 0b 	lds	r24, 0x0B3F	; 0x800b3f <mac_buffer_rx+0x13>
    4722:	8d 8b       	std	Y+21, r24	; 0x15
    4724:	be 01       	movw	r22, r28
    4726:	6f 5f       	subi	r22, 0xFF	; 255
    4728:	7f 4f       	sbci	r23, 0xFF	; 255
    472a:	43 c0       	rjmp	.+134    	; 0x47b2 <macRouteAssociateRequest+0x12a>
    472c:	a3 e6       	ldi	r26, 0x63	; 99
    472e:	b8 e8       	ldi	r27, 0x88	; 136
    4730:	b0 93 af 0b 	sts	0x0BAF, r27	; 0x800baf <mac_buffer_tx+0x1>
    4734:	a0 93 ae 0b 	sts	0x0BAE, r26	; 0x800bae <mac_buffer_tx>
    4738:	a1 e0       	ldi	r26, 0x01	; 1
    473a:	a8 0f       	add	r26, r24
    473c:	a0 93 3a 0c 	sts	0x0C3A, r26	; 0x800c3a <macConfig+0xa>
    4740:	80 93 b0 0b 	sts	0x0BB0, r24	; 0x800bb0 <mac_buffer_tx+0x2>
    4744:	f0 93 b2 0b 	sts	0x0BB2, r31	; 0x800bb2 <mac_buffer_tx+0x4>
    4748:	e0 93 b1 0b 	sts	0x0BB1, r30	; 0x800bb1 <mac_buffer_tx+0x3>
    474c:	70 93 b4 0b 	sts	0x0BB4, r23	; 0x800bb4 <mac_buffer_tx+0x6>
    4750:	60 93 b3 0b 	sts	0x0BB3, r22	; 0x800bb3 <mac_buffer_tx+0x5>
    4754:	50 93 b6 0b 	sts	0x0BB6, r21	; 0x800bb6 <mac_buffer_tx+0x8>
    4758:	40 93 b5 0b 	sts	0x0BB5, r20	; 0x800bb5 <mac_buffer_tx+0x7>
    475c:	81 e0       	ldi	r24, 0x01	; 1
    475e:	80 93 b7 0b 	sts	0x0BB7, r24	; 0x800bb7 <mac_buffer_tx+0x9>
    4762:	40 91 37 0b 	lds	r20, 0x0B37	; 0x800b37 <mac_buffer_rx+0xb>
    4766:	50 91 38 0b 	lds	r21, 0x0B38	; 0x800b38 <mac_buffer_rx+0xc>
    476a:	50 93 b9 0b 	sts	0x0BB9, r21	; 0x800bb9 <mac_buffer_tx+0xb>
    476e:	40 93 b8 0b 	sts	0x0BB8, r20	; 0x800bb8 <mac_buffer_tx+0xa>
    4772:	30 93 ba 0b 	sts	0x0BBA, r19	; 0x800bba <mac_buffer_tx+0xc>
    4776:	20 93 bb 0b 	sts	0x0BBB, r18	; 0x800bbb <mac_buffer_tx+0xd>
    477a:	90 93 bc 0b 	sts	0x0BBC, r25	; 0x800bbc <mac_buffer_tx+0xe>
    477e:	80 91 3c 0b 	lds	r24, 0x0B3C	; 0x800b3c <mac_buffer_rx+0x10>
    4782:	80 93 bd 0b 	sts	0x0BBD, r24	; 0x800bbd <mac_buffer_tx+0xf>
    4786:	80 91 3d 0b 	lds	r24, 0x0B3D	; 0x800b3d <mac_buffer_rx+0x11>
    478a:	80 93 be 0b 	sts	0x0BBE, r24	; 0x800bbe <mac_buffer_tx+0x10>
    478e:	80 91 3e 0b 	lds	r24, 0x0B3E	; 0x800b3e <mac_buffer_rx+0x12>
    4792:	80 93 bf 0b 	sts	0x0BBF, r24	; 0x800bbf <mac_buffer_tx+0x11>
    4796:	80 91 3f 0b 	lds	r24, 0x0B3F	; 0x800b3f <mac_buffer_rx+0x13>
    479a:	80 93 c0 0b 	sts	0x0BC0, r24	; 0x800bc0 <mac_buffer_tx+0x12>
    479e:	80 91 40 0b 	lds	r24, 0x0B40	; 0x800b40 <mac_buffer_rx+0x14>
    47a2:	80 93 c1 0b 	sts	0x0BC1, r24	; 0x800bc1 <mac_buffer_tx+0x13>
    47a6:	80 91 41 0b 	lds	r24, 0x0B41	; 0x800b41 <mac_buffer_rx+0x15>
    47aa:	80 93 c2 0b 	sts	0x0BC2, r24	; 0x800bc2 <mac_buffer_tx+0x14>
    47ae:	6e ea       	ldi	r22, 0xAE	; 174
    47b0:	7b e0       	ldi	r23, 0x0B	; 11
    47b2:	85 e1       	ldi	r24, 0x15	; 21
    47b4:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <radioSendData>
    47b8:	65 96       	adiw	r28, 0x15	; 21
    47ba:	0f b6       	in	r0, 0x3f	; 63
    47bc:	f8 94       	cli
    47be:	de bf       	out	0x3e, r29	; 62
    47c0:	0f be       	out	0x3f, r0	; 63
    47c2:	cd bf       	out	0x3d, r28	; 61
    47c4:	df 91       	pop	r29
    47c6:	cf 91       	pop	r28
    47c8:	08 95       	ret

000047ca <macRouteData>:
    {
        ftData *frame = (ftData *)(mac_buffer_tx+1);
        u8 holdFlag=0;

        // Copy RX to TX buffer
        macCopyRxToTx();
    47ca:	82 e8       	ldi	r24, 0x82	; 130
    47cc:	ec e2       	ldi	r30, 0x2C	; 44
    47ce:	fb e0       	ldi	r31, 0x0B	; 11
    47d0:	ae ea       	ldi	r26, 0xAE	; 174
    47d2:	bb e0       	ldi	r27, 0x0B	; 11
    47d4:	01 90       	ld	r0, Z+
    47d6:	0d 92       	st	X+, r0
    47d8:	8a 95       	dec	r24
    47da:	e1 f7       	brne	.-8      	; 0x47d4 <macRouteData+0xa>

        Led1_on();
    47dc:	a0 9a       	sbi	0x14, 0	; 20
        macSetAlarm(LED_DELAY,ledoff1);
    47de:	6d e9       	ldi	r22, 0x9D	; 157
    47e0:	71 e0       	ldi	r23, 0x01	; 1
    47e2:	8a e0       	ldi	r24, 0x0A	; 10
    47e4:	90 e0       	ldi	r25, 0x00	; 0
    47e6:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <macSetAlarm>

        // See if this frame is in the child table
        if (macIsChild(frame->finalDestAddr))
    47ea:	80 91 b8 0b 	lds	r24, 0x0BB8	; 0x800bb8 <mac_buffer_tx+0xa>
    47ee:	90 91 b9 0b 	lds	r25, 0x0BB9	; 0x800bb9 <mac_buffer_tx+0xb>
    47f2:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <macIsChild>
    47f6:	90 91 3a 0c 	lds	r25, 0x0C3A	; 0x800c3a <macConfig+0xa>
    47fa:	20 91 3d 0c 	lds	r18, 0x0C3D	; 0x800c3d <macConfig+0xd>
    47fe:	30 91 3e 0c 	lds	r19, 0x0C3E	; 0x800c3e <macConfig+0xe>
    4802:	88 23       	and	r24, r24
    4804:	59 f0       	breq	.+22     	; 0x481c <macRouteData+0x52>
        {
            // send frame to child
            frame->seq = macConfig.dsn++;
    4806:	81 e0       	ldi	r24, 0x01	; 1
    4808:	89 0f       	add	r24, r25
    480a:	80 93 3a 0c 	sts	0x0C3A, r24	; 0x800c3a <macConfig+0xa>
    480e:	90 93 b1 0b 	sts	0x0BB1, r25	; 0x800bb1 <mac_buffer_tx+0x3>
            frame->destAddr = frame->finalDestAddr;
    4812:	80 91 b8 0b 	lds	r24, 0x0BB8	; 0x800bb8 <mac_buffer_tx+0xa>
    4816:	90 91 b9 0b 	lds	r25, 0x0BB9	; 0x800bb9 <mac_buffer_tx+0xb>
    481a:	15 c0       	rjmp	.+42     	; 0x4846 <macRouteData+0x7c>
                }
            }
            else if (NODETYPE == ROUTER)
            {
                // See if we should route up or down
                if (frame->srcAddr == macConfig.parentShortAddress)
    481c:	40 91 3f 0c 	lds	r20, 0x0C3F	; 0x800c3f <macConfig+0xf>
    4820:	50 91 40 0c 	lds	r21, 0x0C40	; 0x800c40 <macConfig+0x10>
    4824:	60 91 b6 0b 	lds	r22, 0x0BB6	; 0x800bb6 <mac_buffer_tx+0x8>
    4828:	70 91 b7 0b 	lds	r23, 0x0BB7	; 0x800bb7 <mac_buffer_tx+0x9>
                {
                    // this frame is from parent, send it down default route
                    frame->seq = macConfig.dsn++;
    482c:	81 e0       	ldi	r24, 0x01	; 1
    482e:	89 0f       	add	r24, r25
    4830:	80 93 3a 0c 	sts	0x0C3A, r24	; 0x800c3a <macConfig+0xa>
    4834:	90 93 b1 0b 	sts	0x0BB1, r25	; 0x800bb1 <mac_buffer_tx+0x3>
                }
            }
            else if (NODETYPE == ROUTER)
            {
                // See if we should route up or down
                if (frame->srcAddr == macConfig.parentShortAddress)
    4838:	64 17       	cp	r22, r20
    483a:	75 07       	cpc	r23, r21
    483c:	49 f4       	brne	.+18     	; 0x4850 <macRouteData+0x86>
                {
                    // this frame is from parent, send it down default route
                    frame->seq = macConfig.dsn++;
                    frame->destAddr = macConfig.lastRoute;
    483e:	80 91 41 0c 	lds	r24, 0x0C41	; 0x800c41 <macConfig+0x11>
    4842:	90 91 42 0c 	lds	r25, 0x0C42	; 0x800c42 <macConfig+0x12>
    4846:	90 93 b5 0b 	sts	0x0BB5, r25	; 0x800bb5 <mac_buffer_tx+0x7>
    484a:	80 93 b4 0b 	sts	0x0BB4, r24	; 0x800bb4 <mac_buffer_tx+0x6>
    484e:	04 c0       	rjmp	.+8      	; 0x4858 <macRouteData+0x8e>
                }
                else
                {
                    // this frame is from child, send up the chain
                    frame->seq = macConfig.dsn++;
                    frame->destAddr = macConfig.parentShortAddress;
    4850:	50 93 b5 0b 	sts	0x0BB5, r21	; 0x800bb5 <mac_buffer_tx+0x7>
    4854:	40 93 b4 0b 	sts	0x0BB4, r20	; 0x800bb4 <mac_buffer_tx+0x6>
                    frame->srcAddr = macConfig.shortAddress;
    4858:	30 93 b7 0b 	sts	0x0BB7, r19	; 0x800bb7 <mac_buffer_tx+0x9>
    485c:	20 93 b6 0b 	sts	0x0BB6, r18	; 0x800bb6 <mac_buffer_tx+0x8>
        if (holdFlag)
                macHoldFrame(frame->finalDestAddr, (u8*)frame, (u8)*mac_buffer_tx - 2);
        else
        {
            // Make sure we're not broadcasting frames
            if (frame->destAddr != BROADCASTADDR)
    4860:	80 91 b4 0b 	lds	r24, 0x0BB4	; 0x800bb4 <mac_buffer_tx+0x6>
    4864:	90 91 b5 0b 	lds	r25, 0x0BB5	; 0x800bb5 <mac_buffer_tx+0x7>
    4868:	01 96       	adiw	r24, 0x01	; 1
    486a:	39 f0       	breq	.+14     	; 0x487a <macRouteData+0xb0>
                // Send the frame along (subtract 2 bytes from length for checksum length)
                radioSendData(*mac_buffer_tx - 2, (u8*)frame);
    486c:	80 91 ae 0b 	lds	r24, 0x0BAE	; 0x800bae <mac_buffer_tx>
    4870:	6f ea       	ldi	r22, 0xAF	; 175
    4872:	7b e0       	ldi	r23, 0x0B	; 11
    4874:	82 50       	subi	r24, 0x02	; 2
    4876:	0c 94 25 1d 	jmp	0x3a4a	; 0x3a4a <radioSendData>
    487a:	08 95       	ret

0000487c <macSendRoutingPacket>:

        // Set the flag to say we sent a routing packet.
        return 1;
    }
    return 0;
}
    487c:	80 e0       	ldi	r24, 0x00	; 0
    487e:	08 95       	ret

00004880 <store_pandescriptors>:
   @return The channel set by @ref macSetScanChannel().
*/
u8 macGetScanChannel(void)
{
    return scanChannel;
}
    4880:	cf 93       	push	r28
    4882:	df 93       	push	r29
    4884:	ec e2       	ldi	r30, 0x2C	; 44
    4886:	fb e0       	ldi	r31, 0x0B	; 11
    4888:	20 91 ac 0b 	lds	r18, 0x0BAC	; 0x800bac <mac_buffer_rx+0x80>
    488c:	c5 ea       	ldi	r28, 0xA5	; 165
    488e:	dc e0       	ldi	r29, 0x0C	; 12
    4890:	81 81       	ldd	r24, Z+1	; 0x01
    4892:	92 81       	ldd	r25, Z+2	; 0x02
    4894:	84 e0       	ldi	r24, 0x04	; 4
    4896:	98 9f       	mul	r25, r24
    4898:	81 2d       	mov	r24, r1
    489a:	99 27       	eor	r25, r25
    489c:	11 24       	eor	r1, r1
    489e:	88 83       	st	Y, r24
    48a0:	84 81       	ldd	r24, Z+4	; 0x04
    48a2:	95 81       	ldd	r25, Z+5	; 0x05
    48a4:	9a 83       	std	Y+2, r25	; 0x02
    48a6:	89 83       	std	Y+1, r24	; 0x01
    48a8:	86 81       	ldd	r24, Z+6	; 0x06
    48aa:	97 81       	ldd	r25, Z+7	; 0x07
    48ac:	9c 83       	std	Y+4, r25	; 0x04
    48ae:	8b 83       	std	Y+3, r24	; 0x03
    48b0:	83 85       	ldd	r24, Z+11	; 0x0b
    48b2:	89 87       	std	Y+9, r24	; 0x09
    48b4:	80 91 44 0c 	lds	r24, 0x0C44	; 0x800c44 <macConfig+0x14>
    48b8:	81 50       	subi	r24, 0x01	; 1
    48ba:	8d 83       	std	Y+5, r24	; 0x05
    48bc:	1e 82       	std	Y+6, r1	; 0x06
    48be:	2a 87       	std	Y+10, r18	; 0x0a
    48c0:	0e 94 30 1b 	call	0x3660	; 0x3660 <radioGetSavedRssiValue>
    48c4:	8b 87       	std	Y+11, r24	; 0x0b
    48c6:	df 91       	pop	r29
    48c8:	cf 91       	pop	r28
    48ca:	08 95       	ret

000048cc <macIsScanning>:
    48cc:	80 91 67 06 	lds	r24, 0x0667	; 0x800667 <scanInProcess>
    48d0:	08 95       	ret

000048d2 <mac_logPanDescriptors>:
    In @ref DEMO mode, the only criteria used is to pick the parent
    with the lowest RSSI reading.  This is done to encourage the
    formation of a multi-hop network for test and demo purposes.
*/
void mac_logPanDescriptors(void)
{
    48d2:	cf 93       	push	r28
    ftBeacon *frame = (ftBeacon *)(mac_buffer_rx+1);
    u8 lqi = ((rx_frame_t *)mac_buffer_rx)->lqi;
    48d4:	80 91 ac 0b 	lds	r24, 0x0BAC	; 0x800bac <mac_buffer_rx+0x80>

    // Swap frame
    frame->panid = ntohs_16(frame->panid);
    frame->addr = ntohs_16(frame->addr);
    frame->superFrame = ntohs_16(frame->superFrame);
    48d8:	40 91 34 0b 	lds	r20, 0x0B34	; 0x800b34 <mac_buffer_rx+0x8>
    48dc:	50 91 35 0b 	lds	r21, 0x0B35	; 0x800b35 <mac_buffer_rx+0x9>


    if (!scanInProcess)
    48e0:	90 91 67 06 	lds	r25, 0x0667	; 0x800667 <scanInProcess>
    48e4:	99 23       	and	r25, r25
    48e6:	61 f1       	breq	.+88     	; 0x4940 <mac_logPanDescriptors+0x6e>
        return;
    if (frame->netID != 6)
    48e8:	90 91 36 0b 	lds	r25, 0x0B36	; 0x800b36 <mac_buffer_rx+0xa>
    48ec:	96 30       	cpi	r25, 0x06	; 6
    48ee:	41 f5       	brne	.+80     	; 0x4940 <mac_logPanDescriptors+0x6e>
        energy.energy[energy.currentChannel] += 500;
    }
    else  // Router and end nodes
    {
        // Check the Beacon frame Superframe spec value.
        u16 previous_superframe = panDescriptor.superFrameSpec.superframe_data;
    48f0:	20 91 ac 0c 	lds	r18, 0x0CAC	; 0x800cac <panDescriptor+0x7>
    48f4:	30 91 ad 0c 	lds	r19, 0x0CAD	; 0x800cad <panDescriptor+0x8>
        panDescriptor.superFrameSpec.superframe_data = htons_16(frame->superFrame);
    48f8:	50 93 ad 0c 	sts	0x0CAD, r21	; 0x800cad <panDescriptor+0x8>
    48fc:	40 93 ac 0c 	sts	0x0CAC, r20	; 0x800cac <panDescriptor+0x7>

        // Determine if association permit is true. We're looking for false.
        if(panDescriptor.superFrameSpec.superframe_struct.association_permit)
    4900:	90 91 ad 0c 	lds	r25, 0x0CAD	; 0x800cad <panDescriptor+0x8>
    4904:	97 ff       	sbrs	r25, 7
    4906:	05 c0       	rjmp	.+10     	; 0x4912 <mac_logPanDescriptors+0x40>
        {
            panDescriptor.superFrameSpec.superframe_data = previous_superframe;
    4908:	30 93 ad 0c 	sts	0x0CAD, r19	; 0x800cad <panDescriptor+0x8>
    490c:	20 93 ac 0c 	sts	0x0CAC, r18	; 0x800cac <panDescriptor+0x7>
            return;
    4910:	17 c0       	rjmp	.+46     	; 0x4940 <mac_logPanDescriptors+0x6e>
            }
        }
        else
        {
            // Determine if the Beacon LQI value is stronger than the previous scan.
            if(panDescriptor.lqi < lqi)
    4912:	90 91 af 0c 	lds	r25, 0x0CAF	; 0x800caf <panDescriptor+0xa>
    4916:	98 17       	cp	r25, r24
    4918:	18 f4       	brcc	.+6      	; 0x4920 <mac_logPanDescriptors+0x4e>
            {
                store_pandescriptors();
            }
        }
    }
}
    491a:	cf 91       	pop	r28
        else
        {
            // Determine if the Beacon LQI value is stronger than the previous scan.
            if(panDescriptor.lqi < lqi)
            {
                store_pandescriptors();
    491c:	0c 94 40 24 	jmp	0x4880	; 0x4880 <store_pandescriptors>
            }
            // If LQI is equal to previous stored, check for the least amount of hops to the coord.
            else if((panDescriptor.lqi == lqi)
    4920:	98 13       	cpse	r25, r24
    4922:	0e c0       	rjmp	.+28     	; 0x4940 <mac_logPanDescriptors+0x6e>
                    && (panDescriptor.hopsToCoord > frame->hops))
    4924:	90 91 ae 0c 	lds	r25, 0x0CAE	; 0x800cae <panDescriptor+0x9>
    4928:	80 91 37 0b 	lds	r24, 0x0B37	; 0x800b37 <mac_buffer_rx+0xb>
    492c:	89 17       	cp	r24, r25
    492e:	a8 f3       	brcs	.-22     	; 0x491a <mac_logPanDescriptors+0x48>
            {
                store_pandescriptors();
            }
            // If LQI and hops are equal to the previous stored, check for the best RSSI value.
            else if((panDescriptor.lqi == lqi)
                    && (panDescriptor.hopsToCoord == frame->hops)
    4930:	98 13       	cpse	r25, r24
    4932:	06 c0       	rjmp	.+12     	; 0x4940 <mac_logPanDescriptors+0x6e>
                    && (panDescriptor.rssi < radioGetSavedRssiValue()))
    4934:	c0 91 b0 0c 	lds	r28, 0x0CB0	; 0x800cb0 <panDescriptor+0xb>
    4938:	0e 94 30 1b 	call	0x3660	; 0x3660 <radioGetSavedRssiValue>
    493c:	c8 17       	cp	r28, r24
    493e:	68 f3       	brcs	.-38     	; 0x491a <mac_logPanDescriptors+0x48>
            {
                store_pandescriptors();
            }
        }
    }
}
    4940:	cf 91       	pop	r28
    4942:	08 95       	ret

00004944 <mac_scanConfirm>:
    @brief Trigger a call to @ref appScanConfirm(), since the scanning
    process is done.  If at least one valid beacon was received, then signal that
    success to the application.
*/
void mac_scanConfirm(void)
{
    4944:	cf 93       	push	r28
    // logicalChannel is used as flag to show that we received a valid beacon
    u8 gotbeacon = (panDescriptor.logicalChannel != 0xff);
    4946:	c1 e0       	ldi	r28, 0x01	; 1
    4948:	80 91 aa 0c 	lds	r24, 0x0CAA	; 0x800caa <panDescriptor+0x5>
    494c:	8f 3f       	cpi	r24, 0xFF	; 255
    494e:	11 f4       	brne	.+4      	; 0x4954 <mac_scanConfirm+0x10>
    4950:	c0 e0       	ldi	r28, 0x00	; 0
    4952:	1b c0       	rjmp	.+54     	; 0x498a <mac_scanConfirm+0x46>

    if (gotbeacon)
    {
        // Save the panDescriptor data to the PIB's.
        macConfig.panId = panDescriptor.coorPANId;
    4954:	80 91 a6 0c 	lds	r24, 0x0CA6	; 0x800ca6 <panDescriptor+0x1>
    4958:	90 91 a7 0c 	lds	r25, 0x0CA7	; 0x800ca7 <panDescriptor+0x2>
    495c:	90 93 3c 0c 	sts	0x0C3C, r25	; 0x800c3c <macConfig+0xc>
    4960:	80 93 3b 0c 	sts	0x0C3B, r24	; 0x800c3b <macConfig+0xb>
        macConfig.parentShortAddress = panDescriptor.coordAddr;
    4964:	20 91 a8 0c 	lds	r18, 0x0CA8	; 0x800ca8 <panDescriptor+0x3>
    4968:	30 91 a9 0c 	lds	r19, 0x0CA9	; 0x800ca9 <panDescriptor+0x4>
    496c:	30 93 40 0c 	sts	0x0C40, r19	; 0x800c40 <macConfig+0x10>
    4970:	20 93 3f 0c 	sts	0x0C3F, r18	; 0x800c3f <macConfig+0xf>

        // Need to reset the PAN ID in the radio.
        radioSetPanId(macConfig.panId);
    4974:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <radioSetPanId>

        macSetOperatingChannel(panDescriptor.logicalChannel);
    4978:	80 91 aa 0c 	lds	r24, 0x0CAA	; 0x800caa <panDescriptor+0x5>
    497c:	0e 94 67 1f 	call	0x3ece	; 0x3ece <macSetOperatingChannel>

        // We are one hop more than our (prospective) parent
        macConfig.hopsToCoord = panDescriptor.hopsToCoord + 1;
    4980:	90 91 ae 0c 	lds	r25, 0x0CAE	; 0x800cae <panDescriptor+0x9>
    4984:	9f 5f       	subi	r25, 0xFF	; 255
    4986:	90 93 43 0c 	sts	0x0C43, r25	; 0x800c43 <macConfig+0x13>
    }
    // Confirm the scan, only if we have a valid coordinator
    appScanConfirm(gotbeacon);
    498a:	8c 2f       	mov	r24, r28
}
    498c:	cf 91       	pop	r28

        // We are one hop more than our (prospective) parent
        macConfig.hopsToCoord = panDescriptor.hopsToCoord + 1;
    }
    // Confirm the scan, only if we have a valid coordinator
    appScanConfirm(gotbeacon);
    498e:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <appScanConfirm>

00004992 <macScan>:
    // Check for fixed channel
    if (PAN_CHANNEL != CHANNEL255)
        macSetScanChannel(PAN_CHANNEL);

    // Set up some varibles on the initial call to macScan()
    if (0xFF == macConfig.currentChannel)
    4992:	80 91 44 0c 	lds	r24, 0x0C44	; 0x800c44 <macConfig+0x14>
    4996:	8f 3f       	cpi	r24, 0xFF	; 255
    4998:	b1 f4       	brne	.+44     	; 0x49c6 <macScan+0x34>
    {
        scanInProcess = true;
    499a:	91 e0       	ldi	r25, 0x01	; 1
    499c:	90 93 67 06 	sts	0x0667, r25	; 0x800667 <scanInProcess>

        // Reset the variables.
        memset(&panDescriptor, 0, sizeof(panDescriptor_t));
    49a0:	96 e1       	ldi	r25, 0x16	; 22
    49a2:	e5 ea       	ldi	r30, 0xA5	; 165
    49a4:	fc e0       	ldi	r31, 0x0C	; 12
    49a6:	df 01       	movw	r26, r30
    49a8:	1d 92       	st	X+, r1
    49aa:	9a 95       	dec	r25
    49ac:	e9 f7       	brne	.-6      	; 0x49a8 <macScan+0x16>

        // logicalChannel is used as flag to show that we received a valid beacon
        panDescriptor.logicalChannel = 0xff;
    49ae:	80 93 aa 0c 	sts	0x0CAA, r24	; 0x800caa <panDescriptor+0x5>

        macConfig.currentChannel = MIN_CHANNEL; // First possible channel for RF23x
    49b2:	8b e0       	ldi	r24, 0x0B	; 11
    49b4:	80 93 44 0c 	sts	0x0C44, r24	; 0x800c44 <macConfig+0x14>

        // Check for a single pre-defined channel to scan.
        if (scanChannel != ALL_CHANNELS)
    49b8:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <scanChannel>
    49bc:	80 38       	cpi	r24, 0x80	; 128
    49be:	a9 f0       	breq	.+42     	; 0x49ea <macScan+0x58>
            macConfig.currentChannel = scanChannel;
    49c0:	80 93 44 0c 	sts	0x0C44, r24	; 0x800c44 <macConfig+0x14>
    49c4:	12 c0       	rjmp	.+36     	; 0x49ea <macScan+0x58>
        // Not first time through, must sleep very low power nodes.
        #if (VLP && (NODETYPE == ENDDEVICE))
            nodeSleep(SCAN_SLEEP_TIME);
		#endif
    // See if we're done scanning
    if(macConfig.currentChannel > (CHINA_MODE ? 4 : MAX_CHANNEL) ||
    49c6:	8b 31       	cpi	r24, 0x1B	; 27
    49c8:	48 f4       	brcc	.+18     	; 0x49dc <macScan+0x4a>
       macConfig.currentChannel == scanChannel + 1)
    49ca:	90 e0       	ldi	r25, 0x00	; 0
    49cc:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <scanChannel>
    49d0:	30 e0       	ldi	r19, 0x00	; 0
    49d2:	2f 5f       	subi	r18, 0xFF	; 255
    49d4:	3f 4f       	sbci	r19, 0xFF	; 255
        // Not first time through, must sleep very low power nodes.
        #if (VLP && (NODETYPE == ENDDEVICE))
            nodeSleep(SCAN_SLEEP_TIME);
		#endif
    // See if we're done scanning
    if(macConfig.currentChannel > (CHINA_MODE ? 4 : MAX_CHANNEL) ||
    49d6:	82 17       	cp	r24, r18
    49d8:	93 07       	cpc	r25, r19
    49da:	39 f4       	brne	.+14     	; 0x49ea <macScan+0x58>
       macConfig.currentChannel == scanChannel + 1)
        {
            // done scanning
            scanInProcess = false;
    49dc:	10 92 67 06 	sts	0x0667, r1	; 0x800667 <scanInProcess>
            macConfig.currentChannel = 0xFF;
    49e0:	8f ef       	ldi	r24, 0xFF	; 255
    49e2:	80 93 44 0c 	sts	0x0C44, r24	; 0x800c44 <macConfig+0x14>

            mac_scanConfirm();
    49e6:	0c 94 a2 24 	jmp	0x4944	; 0x4944 <mac_scanConfirm>
            return;
        }

    // Set the channel.
    macSetOperatingChannel(macConfig.currentChannel);
    49ea:	80 91 44 0c 	lds	r24, 0x0C44	; 0x800c44 <macConfig+0x14>
    49ee:	0e 94 67 1f 	call	0x3ece	; 0x3ece <macSetOperatingChannel>
{
    // Create a struct pointer to the global variable...
    volatile ftBeaconReq* brFrame = (ftBeaconReq*)(mac_buffer_tx+1);

    // Fill in beacon request frame
    brFrame->fcf = htons_16(FCF_BEACONREQ);
    49f2:	83 e0       	ldi	r24, 0x03	; 3
    49f4:	98 e0       	ldi	r25, 0x08	; 8
    49f6:	90 93 b0 0b 	sts	0x0BB0, r25	; 0x800bb0 <mac_buffer_tx+0x2>
    49fa:	80 93 af 0b 	sts	0x0BAF, r24	; 0x800baf <mac_buffer_tx+0x1>
    brFrame->seq = macConfig.bsn++;
    49fe:	80 91 39 0c 	lds	r24, 0x0C39	; 0x800c39 <macConfig+0x9>
    4a02:	91 e0       	ldi	r25, 0x01	; 1
    4a04:	98 0f       	add	r25, r24
    4a06:	90 93 39 0c 	sts	0x0C39, r25	; 0x800c39 <macConfig+0x9>
    4a0a:	80 93 b1 0b 	sts	0x0BB1, r24	; 0x800bb1 <mac_buffer_tx+0x3>
    brFrame->panid = htons_16(PAN_ID);
    4a0e:	8f ef       	ldi	r24, 0xFF	; 255
    4a10:	9f ef       	ldi	r25, 0xFF	; 255
    4a12:	90 93 b3 0b 	sts	0x0BB3, r25	; 0x800bb3 <mac_buffer_tx+0x5>
    4a16:	80 93 b2 0b 	sts	0x0BB2, r24	; 0x800bb2 <mac_buffer_tx+0x4>
    brFrame->broadcastAddr = BROADCASTADDR;
    4a1a:	90 93 b5 0b 	sts	0x0BB5, r25	; 0x800bb5 <mac_buffer_tx+0x7>
    4a1e:	80 93 b4 0b 	sts	0x0BB4, r24	; 0x800bb4 <mac_buffer_tx+0x6>
    brFrame->cmd = BEACON_REQUEST;
    4a22:	87 e0       	ldi	r24, 0x07	; 7
    4a24:	80 93 b6 0b 	sts	0x0BB6, r24	; 0x800bb6 <mac_buffer_tx+0x8>

    // Send the frame via radio
    radioSendData(sizeof(ftBeaconReq), (u8*)brFrame);
    4a28:	6f ea       	ldi	r22, 0xAF	; 175
    4a2a:	7b e0       	ldi	r23, 0x0B	; 11
    4a2c:	88 e0       	ldi	r24, 0x08	; 8
    4a2e:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <radioSendData>

    // Send the beacon request
    sendBeaconRequest();

    // Beacon was send, increment channel to prepare for the next one.
    macConfig.currentChannel++;
    4a32:	80 91 44 0c 	lds	r24, 0x0C44	; 0x800c44 <macConfig+0x14>
    4a36:	8f 5f       	subi	r24, 0xFF	; 255
    4a38:	80 93 44 0c 	sts	0x0C44, r24	; 0x800c44 <macConfig+0x14>

    // Set the scan duration timer.
    macSetAlarm(SCANDURATION, macScan);
    4a3c:	69 ec       	ldi	r22, 0xC9	; 201
    4a3e:	74 e2       	ldi	r23, 0x24	; 36
    4a40:	84 e1       	ldi	r24, 0x14	; 20
    4a42:	90 e0       	ldi	r25, 0x00	; 0
    4a44:	0c 94 5b 25 	jmp	0x4ab6	; 0x4ab6 <macSetAlarm>

00004a48 <macEdCallback>:
   @brief Callback function, called by the radio ISR function when the
   radio issues an energy measurement interrupt.  This function stores
   the energy measurement for later use.
 */
void macEdCallback(void)
{
    4a48:	08 95       	ret

00004a4a <getUniqueID>:
    localtime = tickTimer;
    AVR_LEAVE_CRITICAL_REGION();

    return localtime;

}
    4a4a:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <currentTimerID.3607>
    4a4e:	8f 5f       	subi	r24, 0xFF	; 255
    4a50:	09 f4       	brne	.+2      	; 0x4a54 <getUniqueID+0xa>
    4a52:	81 e0       	ldi	r24, 0x01	; 1
    4a54:	20 e0       	ldi	r18, 0x00	; 0
    4a56:	30 e0       	ldi	r19, 0x00	; 0
    4a58:	91 e0       	ldi	r25, 0x01	; 1
    4a5a:	f9 01       	movw	r30, r18
    4a5c:	e0 53       	subi	r30, 0x30	; 48
    4a5e:	f9 4f       	sbci	r31, 0xF9	; 249
    4a60:	42 81       	ldd	r20, Z+2	; 0x02
    4a62:	48 13       	cpse	r20, r24
    4a64:	01 c0       	rjmp	.+2      	; 0x4a68 <getUniqueID+0x1e>
    4a66:	90 e0       	ldi	r25, 0x00	; 0
    4a68:	2b 5f       	subi	r18, 0xFB	; 251
    4a6a:	3f 4f       	sbci	r19, 0xFF	; 255
    4a6c:	24 36       	cpi	r18, 0x64	; 100
    4a6e:	31 05       	cpc	r19, r1
    4a70:	a1 f7       	brne	.-24     	; 0x4a5a <getUniqueID+0x10>
    4a72:	20 e0       	ldi	r18, 0x00	; 0
    4a74:	30 e0       	ldi	r19, 0x00	; 0
    4a76:	f9 01       	movw	r30, r18
    4a78:	e4 59       	subi	r30, 0x94	; 148
    4a7a:	f9 4f       	sbci	r31, 0xF9	; 249
    4a7c:	42 81       	ldd	r20, Z+2	; 0x02
    4a7e:	48 13       	cpse	r20, r24
    4a80:	01 c0       	rjmp	.+2      	; 0x4a84 <getUniqueID+0x3a>
    4a82:	90 e0       	ldi	r25, 0x00	; 0
    4a84:	2b 5f       	subi	r18, 0xFB	; 251
    4a86:	3f 4f       	sbci	r19, 0xFF	; 255
    4a88:	24 36       	cpi	r18, 0x64	; 100
    4a8a:	31 05       	cpc	r19, r1
    4a8c:	a1 f7       	brne	.-24     	; 0x4a76 <getUniqueID+0x2c>
    4a8e:	99 23       	and	r25, r25
    4a90:	f1 f2       	breq	.-68     	; 0x4a4e <getUniqueID+0x4>
    4a92:	80 93 68 06 	sts	0x0668, r24	; 0x800668 <currentTimerID.3607>
    4a96:	08 95       	ret

00004a98 <timerStart>:
    4a98:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <timerRunning>
    4a9c:	81 11       	cpse	r24, r1
    4a9e:	0a c0       	rjmp	.+20     	; 0x4ab4 <timerStart+0x1c>
    4aa0:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    4aa4:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
    4aa8:	82 e0       	ldi	r24, 0x02	; 2
    4aaa:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    4aae:	81 e0       	ldi	r24, 0x01	; 1
    4ab0:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <timerRunning>
    4ab4:	08 95       	ret

00004ab6 <macSetAlarm>:
   return nothing.

   @return Handle to timer.  Can be used to call macTimerEnd().
*/
u8 macSetAlarm(u16 time, void(*callback)(void))
{
    4ab6:	0f 93       	push	r16
    4ab8:	1f 93       	push	r17
    4aba:	cf 93       	push	r28
    4abc:	df 93       	push	r29
    4abe:	1f 92       	push	r1
    4ac0:	cd b7       	in	r28, 0x3d	; 61
    4ac2:	de b7       	in	r29, 0x3e	; 62
    u8 i;
    u16 ticks;

    if (!time)
    4ac4:	00 97       	sbiw	r24, 0x00	; 0
    4ac6:	19 f4       	brne	.+6      	; 0x4ace <macSetAlarm+0x18>
    {
        // Don't delay, just call it
        callback();
    4ac8:	fb 01       	movw	r30, r22
    4aca:	09 95       	icall
    4acc:	12 c0       	rjmp	.+36     	; 0x4af2 <macSetAlarm+0x3c>

    // Store the timer details in the array
    ticks = max(time, 1);  // At least one tick

    // Protect this section from an ISR that will add an alarm
    AVR_ENTER_CRITICAL_REGION();
    4ace:	2f b7       	in	r18, 0x3f	; 63
    4ad0:	29 83       	std	Y+1, r18	; 0x01
    4ad2:	f8 94       	cli
    4ad4:	a0 ed       	ldi	r26, 0xD0	; 208
    4ad6:	b6 e0       	ldi	r27, 0x06	; 6
    4ad8:	20 e0       	ldi	r18, 0x00	; 0
    4ada:	30 e0       	ldi	r19, 0x00	; 0
    // search for free event structure
    for (i=0;i<TIMER_EVENTS_MAX;i++)
        if (!timerEvents[i].time)
    4adc:	4d 91       	ld	r20, X+
    4ade:	5c 91       	ld	r21, X
    4ae0:	11 97       	sbiw	r26, 0x01	; 1
    4ae2:	45 2b       	or	r20, r21
    4ae4:	41 f0       	breq	.+16     	; 0x4af6 <macSetAlarm+0x40>
    4ae6:	2f 5f       	subi	r18, 0xFF	; 255
    4ae8:	3f 4f       	sbci	r19, 0xFF	; 255
    4aea:	15 96       	adiw	r26, 0x05	; 5
    ticks = max(time, 1);  // At least one tick

    // Protect this section from an ISR that will add an alarm
    AVR_ENTER_CRITICAL_REGION();
    // search for free event structure
    for (i=0;i<TIMER_EVENTS_MAX;i++)
    4aec:	24 31       	cpi	r18, 0x14	; 20
    4aee:	31 05       	cpc	r19, r1
    4af0:	a9 f7       	brne	.-22     	; 0x4adc <macSetAlarm+0x26>
            // free, use this one
            break;

    if (i >= TIMER_EVENTS_MAX)
        // Out of timers to use, just quit
        return 0;
    4af2:	80 e0       	ldi	r24, 0x00	; 0
    4af4:	23 c0       	rjmp	.+70     	; 0x4b3c <macSetAlarm+0x86>

    timerEvents[i].time = ticks;
    4af6:	45 e0       	ldi	r20, 0x05	; 5
    4af8:	42 9f       	mul	r20, r18
    4afa:	d0 01       	movw	r26, r0
    4afc:	43 9f       	mul	r20, r19
    4afe:	b0 0d       	add	r27, r0
    4b00:	11 24       	eor	r1, r1
    4b02:	a0 53       	subi	r26, 0x30	; 48
    4b04:	b9 4f       	sbci	r27, 0xF9	; 249
        callback();
        return 0;
    }

    // Store the timer details in the array
    ticks = max(time, 1);  // At least one tick
    4b06:	00 97       	sbiw	r24, 0x00	; 0
    4b08:	11 f4       	brne	.+4      	; 0x4b0e <macSetAlarm+0x58>
    4b0a:	81 e0       	ldi	r24, 0x01	; 1
    4b0c:	90 e0       	ldi	r25, 0x00	; 0

    if (i >= TIMER_EVENTS_MAX)
        // Out of timers to use, just quit
        return 0;

    timerEvents[i].time = ticks;
    4b0e:	8d 93       	st	X+, r24
    4b10:	9c 93       	st	X, r25
    timerEvents[i].callback = callback;
    4b12:	85 e0       	ldi	r24, 0x05	; 5
    4b14:	82 9f       	mul	r24, r18
    4b16:	80 01       	movw	r16, r0
    4b18:	83 9f       	mul	r24, r19
    4b1a:	10 0d       	add	r17, r0
    4b1c:	11 24       	eor	r1, r1
    4b1e:	00 53       	subi	r16, 0x30	; 48
    4b20:	19 4f       	sbci	r17, 0xF9	; 249
    4b22:	f8 01       	movw	r30, r16
    4b24:	74 83       	std	Z+4, r23	; 0x04
    4b26:	63 83       	std	Z+3, r22	; 0x03
    // don't return zero as a timer ID
    timerEvents[i].timerID = getUniqueID();
    4b28:	0e 94 25 25 	call	0x4a4a	; 0x4a4a <getUniqueID>
    4b2c:	f8 01       	movw	r30, r16
    4b2e:	82 83       	std	Z+2, r24	; 0x02

    // start timer running, since we have at least one timer running
    timerStart();
    4b30:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <timerStart>
    AVR_LEAVE_CRITICAL_REGION();
    4b34:	89 81       	ldd	r24, Y+1	; 0x01
    4b36:	8f bf       	out	0x3f, r24	; 63

    return timerEvents[i].timerID;
    4b38:	f8 01       	movw	r30, r16
    4b3a:	82 81       	ldd	r24, Z+2	; 0x02
}
    4b3c:	0f 90       	pop	r0
    4b3e:	df 91       	pop	r29
    4b40:	cf 91       	pop	r28
    4b42:	1f 91       	pop	r17
    4b44:	0f 91       	pop	r16
    4b46:	08 95       	ret

00004b48 <macSetLongAlarm>:
   hours.

   @return Handle to timer.  Can be used to call macTimerEnd().
*/
u8 macSetLongAlarm(u16 seconds, void(*callback)(void))
{
    4b48:	0f 93       	push	r16
    4b4a:	1f 93       	push	r17
    4b4c:	cf 93       	push	r28
    4b4e:	df 93       	push	r29
    4b50:	1f 92       	push	r1
    4b52:	cd b7       	in	r28, 0x3d	; 61
    4b54:	de b7       	in	r29, 0x3e	; 62
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        // Find a free timer
        u8 i;
        
        if (!seconds)
    4b56:	00 97       	sbiw	r24, 0x00	; 0
    4b58:	19 f4       	brne	.+6      	; 0x4b60 <macSetLongAlarm+0x18>
        {
            // Just go right now
            callback();
    4b5a:	fb 01       	movw	r30, r22
    4b5c:	09 95       	icall
    4b5e:	0f c0       	rjmp	.+30     	; 0x4b7e <macSetLongAlarm+0x36>
    4b60:	ac e6       	ldi	r26, 0x6C	; 108
    4b62:	b6 e0       	ldi	r27, 0x06	; 6
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        // Find a free timer
        u8 i;
        
        if (!seconds)
    4b64:	20 e0       	ldi	r18, 0x00	; 0
    4b66:	30 e0       	ldi	r19, 0x00	; 0
            callback();
            return 0;
        }
        
        for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
            if (!longTimerEvents[i].time)
    4b68:	4d 91       	ld	r20, X+
    4b6a:	5c 91       	ld	r21, X
    4b6c:	11 97       	sbiw	r26, 0x01	; 1
    4b6e:	45 2b       	or	r20, r21
    4b70:	41 f0       	breq	.+16     	; 0x4b82 <macSetLongAlarm+0x3a>
    4b72:	2f 5f       	subi	r18, 0xFF	; 255
    4b74:	3f 4f       	sbci	r19, 0xFF	; 255
    4b76:	15 96       	adiw	r26, 0x05	; 5
            // Just go right now
            callback();
            return 0;
        }
        
        for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
    4b78:	24 31       	cpi	r18, 0x14	; 20
    4b7a:	31 05       	cpc	r19, r1
    4b7c:	a9 f7       	brne	.-22     	; 0x4b68 <macSetLongAlarm+0x20>
                // free, use this one
                break;

        if (i >= LONG_TIMER_EVENTS_MAX)
            // No more timers, just quit
            return 0;
    4b7e:	80 e0       	ldi	r24, 0x00	; 0
    4b80:	1a c0       	rjmp	.+52     	; 0x4bb6 <macSetLongAlarm+0x6e>
        
        // Store the time and callback into free timer
        longTimerEvents[i].time = seconds;
    4b82:	45 e0       	ldi	r20, 0x05	; 5
    4b84:	42 9f       	mul	r20, r18
    4b86:	80 01       	movw	r16, r0
    4b88:	43 9f       	mul	r20, r19
    4b8a:	10 0d       	add	r17, r0
    4b8c:	11 24       	eor	r1, r1
    4b8e:	04 59       	subi	r16, 0x94	; 148
    4b90:	19 4f       	sbci	r17, 0xF9	; 249
    4b92:	f8 01       	movw	r30, r16
    4b94:	91 83       	std	Z+1, r25	; 0x01
    4b96:	80 83       	st	Z, r24
        longTimerEvents[i].callback = callback;
    4b98:	74 83       	std	Z+4, r23	; 0x04
    4b9a:	63 83       	std	Z+3, r22	; 0x03
        longTimerEvents[i].timerID = getUniqueID();
    4b9c:	0e 94 25 25 	call	0x4a4a	; 0x4a4a <getUniqueID>
    4ba0:	f8 01       	movw	r30, r16
    4ba2:	82 83       	std	Z+2, r24	; 0x02
        
        // start timer running, since we have at least one timer running
        AVR_ENTER_CRITICAL_REGION();
    4ba4:	8f b7       	in	r24, 0x3f	; 63
    4ba6:	89 83       	std	Y+1, r24	; 0x01
    4ba8:	f8 94       	cli
        timerStart();
    4baa:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <timerStart>
        AVR_LEAVE_CRITICAL_REGION();
    4bae:	89 81       	ldd	r24, Y+1	; 0x01
    4bb0:	8f bf       	out	0x3f, r24	; 63
        
        return longTimerEvents[i].timerID;
    4bb2:	f8 01       	movw	r30, r16
    4bb4:	82 81       	ldd	r24, Z+2	; 0x02
    }
    return 0;
}
    4bb6:	0f 90       	pop	r0
    4bb8:	df 91       	pop	r29
    4bba:	cf 91       	pop	r28
    4bbc:	1f 91       	pop	r17
    4bbe:	0f 91       	pop	r16
    4bc0:	08 95       	ret

00004bc2 <macTimerEnd>:

   @param timerID The value returned from macSetAlarm when the alarm
   was set.
*/
void macTimerEnd(u8 timerID)
{
    4bc2:	e2 ed       	ldi	r30, 0xD2	; 210
    4bc4:	f6 e0       	ldi	r31, 0x06	; 6
    4bc6:	20 e0       	ldi	r18, 0x00	; 0
    4bc8:	30 e0       	ldi	r19, 0x00	; 0
    u8 i;

    // search for timer with timerID
    for (i=0;i<TIMER_EVENTS_MAX;i++)
        if (timerEvents[i].timerID == timerID)
    4bca:	90 81       	ld	r25, Z
    4bcc:	98 13       	cpse	r25, r24
    4bce:	09 c0       	rjmp	.+18     	; 0x4be2 <macTimerEnd+0x20>
        {
            // kill this timer
            timerEvents[i].time = 0;
    4bd0:	85 e0       	ldi	r24, 0x05	; 5
    4bd2:	82 9f       	mul	r24, r18
    4bd4:	f0 01       	movw	r30, r0
    4bd6:	83 9f       	mul	r24, r19
    4bd8:	f0 0d       	add	r31, r0
    4bda:	11 24       	eor	r1, r1
    4bdc:	e0 53       	subi	r30, 0x30	; 48
    4bde:	f9 4f       	sbci	r31, 0xF9	; 249
    4be0:	15 c0       	rjmp	.+42     	; 0x4c0c <macTimerEnd+0x4a>
    4be2:	2f 5f       	subi	r18, 0xFF	; 255
    4be4:	3f 4f       	sbci	r19, 0xFF	; 255
    4be6:	35 96       	adiw	r30, 0x05	; 5
void macTimerEnd(u8 timerID)
{
    u8 i;

    // search for timer with timerID
    for (i=0;i<TIMER_EVENTS_MAX;i++)
    4be8:	24 31       	cpi	r18, 0x14	; 20
    4bea:	31 05       	cpc	r19, r1
    4bec:	71 f7       	brne	.-36     	; 0x4bca <macTimerEnd+0x8>
    4bee:	ee e6       	ldi	r30, 0x6E	; 110
    4bf0:	f6 e0       	ldi	r31, 0x06	; 6
    4bf2:	20 e0       	ldi	r18, 0x00	; 0
    4bf4:	30 e0       	ldi	r19, 0x00	; 0

    // search for long timer with timerID
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
            if (longTimerEvents[i].timerID == timerID)
    4bf6:	90 81       	ld	r25, Z
    4bf8:	98 13       	cpse	r25, r24
    4bfa:	0c c0       	rjmp	.+24     	; 0x4c14 <macTimerEnd+0x52>
            {
                // kill this timer
                longTimerEvents[i].time = 0;
    4bfc:	85 e0       	ldi	r24, 0x05	; 5
    4bfe:	82 9f       	mul	r24, r18
    4c00:	f0 01       	movw	r30, r0
    4c02:	83 9f       	mul	r24, r19
    4c04:	f0 0d       	add	r31, r0
    4c06:	11 24       	eor	r1, r1
    4c08:	e4 59       	subi	r30, 0x94	; 148
    4c0a:	f9 4f       	sbci	r31, 0xF9	; 249
    4c0c:	11 82       	std	Z+1, r1	; 0x01
    4c0e:	10 82       	st	Z, r1
                longTimerEvents[i].timerID = 0;
    4c10:	12 82       	std	Z+2, r1	; 0x02
                return;
    4c12:	08 95       	ret
    4c14:	2f 5f       	subi	r18, 0xFF	; 255
    4c16:	3f 4f       	sbci	r19, 0xFF	; 255
    4c18:	35 96       	adiw	r30, 0x05	; 5
        }

    // search for long timer with timerID
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
    4c1a:	24 31       	cpi	r18, 0x14	; 20
    4c1c:	31 05       	cpc	r19, r1
    4c1e:	59 f7       	brne	.-42     	; 0x4bf6 <macTimerEnd+0x34>
    4c20:	08 95       	ret

00004c22 <timerInit>:
   want to clear all timers.  Sets the timeout for each tick of the
   system clock.
 */
void timerInit(void)
{
    TIMER_INIT();
    4c22:	e1 e9       	ldi	r30, 0x91	; 145
    4c24:	f0 e0       	ldi	r31, 0x00	; 0
    4c26:	80 81       	ld	r24, Z
    4c28:	8a 60       	ori	r24, 0x0A	; 10
    4c2a:	80 83       	st	Z, r24
    4c2c:	80 ed       	ldi	r24, 0xD0	; 208
    4c2e:	97 e0       	ldi	r25, 0x07	; 7
    4c30:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    4c34:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>

#if __AVR__
    // Init the PRNG
    if (NODETYPE != ENDDEVICE)
        srand(TCNT(TICKTIMER));
    4c38:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
    4c3c:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    4c40:	0c 94 99 2f 	jmp	0x5f32	; 0x5f32 <srand>

00004c44 <__vector_32>:
#if __AVR__
/**
   @brief Timer interrupt service routine.
*/
ISR(TICKVECT)
{
    4c44:	1f 92       	push	r1
    4c46:	0f 92       	push	r0
    4c48:	0f b6       	in	r0, 0x3f	; 63
    4c4a:	0f 92       	push	r0
    4c4c:	11 24       	eor	r1, r1
    4c4e:	0b b6       	in	r0, 0x3b	; 59
    4c50:	0f 92       	push	r0
    4c52:	ff 92       	push	r15
    4c54:	0f 93       	push	r16
    4c56:	1f 93       	push	r17
    4c58:	2f 93       	push	r18
    4c5a:	3f 93       	push	r19
    4c5c:	4f 93       	push	r20
    4c5e:	5f 93       	push	r21
    4c60:	6f 93       	push	r22
    4c62:	7f 93       	push	r23
    4c64:	8f 93       	push	r24
    4c66:	9f 93       	push	r25
    4c68:	af 93       	push	r26
    4c6a:	bf 93       	push	r27
    4c6c:	ef 93       	push	r30
    4c6e:	ff 93       	push	r31
    4c70:	cf 93       	push	r28
    4c72:	df 93       	push	r29
    4c74:	00 d0       	rcall	.+0      	; 0x4c76 <__vector_32+0x32>
    4c76:	1f 92       	push	r1
    4c78:	cd b7       	in	r28, 0x3d	; 61
    4c7a:	de b7       	in	r29, 0x3e	; 62
    u8 i;
    event_object_t event;

    tickTimer++;
    4c7c:	80 91 69 06 	lds	r24, 0x0669	; 0x800669 <tickTimer>
    4c80:	90 91 6a 06 	lds	r25, 0x066A	; 0x80066a <tickTimer+0x1>
    4c84:	01 96       	adiw	r24, 0x01	; 1
    4c86:	90 93 6a 06 	sts	0x066A, r25	; 0x80066a <tickTimer+0x1>
    4c8a:	80 93 69 06 	sts	0x0669, r24	; 0x800669 <tickTimer>
#endif
    
    // Decrement second timer
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        if (!--secondTimer)
    4c8e:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <secondTimer>
    4c92:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <secondTimer+0x1>
    4c96:	01 97       	sbiw	r24, 0x01	; 1
    4c98:	49 f0       	breq	.+18     	; 0x4cac <__vector_32+0x68>
    4c9a:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <secondTimer+0x1>
    4c9e:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <secondTimer>
    4ca2:	00 ed       	ldi	r16, 0xD0	; 208
    4ca4:	16 e0       	ldi	r17, 0x06	; 6
        {
            // this timer event is live, check for expiration
            if (!--timerEvents[i].time)
            {
                // Timer expired, queue the associated callback
                event.event = MAC_EVENT_TIMER;  // Event type, see event_t for details.
    4ca6:	96 e1       	ldi	r25, 0x16	; 22
    4ca8:	f9 2e       	mov	r15, r25
    4caa:	24 c0       	rjmp	.+72     	; 0x4cf4 <__vector_32+0xb0>
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        if (!--secondTimer)
        {
            // Reset one second timer
            secondTimer = 1000/MS_PER_TICK;
    4cac:	84 ef       	ldi	r24, 0xF4	; 244
    4cae:	91 e0       	ldi	r25, 0x01	; 1
    4cb0:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <secondTimer+0x1>
    4cb4:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <secondTimer>
    4cb8:	0c e6       	ldi	r16, 0x6C	; 108
    4cba:	16 e0       	ldi	r17, 0x06	; 6
                {
                    // This timer is active, check for expiration
                    if (!--longTimerEvents[i].time)
                    {
                        // Timer expired, queue the associated callback
                        event.event = MAC_EVENT_TIMER;  // Event type, see event_t for details.
    4cbc:	86 e1       	ldi	r24, 0x16	; 22
    4cbe:	f8 2e       	mov	r15, r24
            // Reset one second timer
            secondTimer = 1000/MS_PER_TICK;
            // Handle the one-second timers
            for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
            {
                if (longTimerEvents[i].time)
    4cc0:	f8 01       	movw	r30, r16
    4cc2:	80 81       	ld	r24, Z
    4cc4:	91 81       	ldd	r25, Z+1	; 0x01
    4cc6:	00 97       	sbiw	r24, 0x00	; 0
    4cc8:	71 f0       	breq	.+28     	; 0x4ce6 <__vector_32+0xa2>
                {
                    // This timer is active, check for expiration
                    if (!--longTimerEvents[i].time)
    4cca:	01 97       	sbiw	r24, 0x01	; 1
    4ccc:	91 83       	std	Z+1, r25	; 0x01
    4cce:	80 83       	st	Z, r24
    4cd0:	89 2b       	or	r24, r25
    4cd2:	49 f4       	brne	.+18     	; 0x4ce6 <__vector_32+0xa2>
                    {
                        // Timer expired, queue the associated callback
                        event.event = MAC_EVENT_TIMER;  // Event type, see event_t for details.
    4cd4:	f9 82       	std	Y+1, r15	; 0x01
                        event.data = (void(*)(void))longTimerEvents[i].callback;
    4cd6:	83 81       	ldd	r24, Z+3	; 0x03
    4cd8:	94 81       	ldd	r25, Z+4	; 0x04
    4cda:	9b 83       	std	Y+3, r25	; 0x03
    4cdc:	8a 83       	std	Y+2, r24	; 0x02
                        mac_put_event(&event);
    4cde:	ce 01       	movw	r24, r28
    4ce0:	01 96       	adiw	r24, 0x01	; 1
    4ce2:	0e 94 94 21 	call	0x4328	; 0x4328 <mac_put_event>
    4ce6:	0b 5f       	subi	r16, 0xFB	; 251
    4ce8:	1f 4f       	sbci	r17, 0xFF	; 255
        if (!--secondTimer)
        {
            // Reset one second timer
            secondTimer = 1000/MS_PER_TICK;
            // Handle the one-second timers
            for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
    4cea:	f6 e0       	ldi	r31, 0x06	; 6
    4cec:	00 3d       	cpi	r16, 0xD0	; 208
    4cee:	1f 07       	cpc	r17, r31
    4cf0:	39 f7       	brne	.-50     	; 0x4cc0 <__vector_32+0x7c>
    4cf2:	d7 cf       	rjmp	.-82     	; 0x4ca2 <__vector_32+0x5e>
    }

    // check for pending events
    for (i=0;i<TIMER_EVENTS_MAX;i++)
    {
        if (timerEvents[i].time)
    4cf4:	f8 01       	movw	r30, r16
    4cf6:	80 81       	ld	r24, Z
    4cf8:	91 81       	ldd	r25, Z+1	; 0x01
    4cfa:	00 97       	sbiw	r24, 0x00	; 0
    4cfc:	71 f0       	breq	.+28     	; 0x4d1a <__vector_32+0xd6>
        {
            // this timer event is live, check for expiration
            if (!--timerEvents[i].time)
    4cfe:	01 97       	sbiw	r24, 0x01	; 1
    4d00:	91 83       	std	Z+1, r25	; 0x01
    4d02:	80 83       	st	Z, r24
    4d04:	89 2b       	or	r24, r25
    4d06:	49 f4       	brne	.+18     	; 0x4d1a <__vector_32+0xd6>
            {
                // Timer expired, queue the associated callback
                event.event = MAC_EVENT_TIMER;  // Event type, see event_t for details.
    4d08:	f9 82       	std	Y+1, r15	; 0x01
                event.data = (void (*)(void))(timerEvents[i].callback);
    4d0a:	83 81       	ldd	r24, Z+3	; 0x03
    4d0c:	94 81       	ldd	r25, Z+4	; 0x04
    4d0e:	9b 83       	std	Y+3, r25	; 0x03
    4d10:	8a 83       	std	Y+2, r24	; 0x02
                mac_put_event(&event);
    4d12:	ce 01       	movw	r24, r28
    4d14:	01 96       	adiw	r24, 0x01	; 1
    4d16:	0e 94 94 21 	call	0x4328	; 0x4328 <mac_put_event>
    4d1a:	0b 5f       	subi	r16, 0xFB	; 251
    4d1c:	1f 4f       	sbci	r17, 0xFF	; 255
            }
        }
    }

    // check for pending events
    for (i=0;i<TIMER_EVENTS_MAX;i++)
    4d1e:	f7 e0       	ldi	r31, 0x07	; 7
    4d20:	04 33       	cpi	r16, 0x34	; 52
    4d22:	1f 07       	cpc	r17, r31
    4d24:	39 f7       	brne	.-50     	; 0x4cf4 <__vector_32+0xb0>
                event.data = (void (*)(void))(timerEvents[i].callback);
                mac_put_event(&event);
            }
        }
    }
}
    4d26:	0f 90       	pop	r0
    4d28:	0f 90       	pop	r0
    4d2a:	0f 90       	pop	r0
    4d2c:	df 91       	pop	r29
    4d2e:	cf 91       	pop	r28
    4d30:	ff 91       	pop	r31
    4d32:	ef 91       	pop	r30
    4d34:	bf 91       	pop	r27
    4d36:	af 91       	pop	r26
    4d38:	9f 91       	pop	r25
    4d3a:	8f 91       	pop	r24
    4d3c:	7f 91       	pop	r23
    4d3e:	6f 91       	pop	r22
    4d40:	5f 91       	pop	r21
    4d42:	4f 91       	pop	r20
    4d44:	3f 91       	pop	r19
    4d46:	2f 91       	pop	r18
    4d48:	1f 91       	pop	r17
    4d4a:	0f 91       	pop	r16
    4d4c:	ff 90       	pop	r15
    4d4e:	0f 90       	pop	r0
    4d50:	0b be       	out	0x3b, r0	; 59
    4d52:	0f 90       	pop	r0
    4d54:	0f be       	out	0x3f, r0	; 63
    4d56:	0f 90       	pop	r0
    4d58:	1f 90       	pop	r1
    4d5a:	18 95       	reti

00004d5c <__vector_35>:

    for(i = 0; i < uiDelay; i++)
    {
        Timer_delay_us ( 1000 );
    }
}
    4d5c:	1f 92       	push	r1
    4d5e:	0f 92       	push	r0
    4d60:	0f b6       	in	r0, 0x3f	; 63
    4d62:	0f 92       	push	r0
    4d64:	11 24       	eor	r1, r1
    4d66:	8f 93       	push	r24
    4d68:	82 e0       	ldi	r24, 0x02	; 2
    4d6a:	80 93 35 07 	sts	0x0735, r24	; 0x800735 <GenericTimerFlag>
    4d6e:	8f 91       	pop	r24
    4d70:	0f 90       	pop	r0
    4d72:	0f be       	out	0x3f, r0	; 63
    4d74:	0f 90       	pop	r0
    4d76:	1f 90       	pop	r1
    4d78:	18 95       	reti

00004d7a <__vector_12>:

/** \brief Watchdog Timer Interrupt Service Routine.
 */
ISR ( WDT_vect )
{    
    4d7a:	1f 92       	push	r1
    4d7c:	0f 92       	push	r0
    4d7e:	0f b6       	in	r0, 0x3f	; 63
    4d80:	0f 92       	push	r0
    4d82:	11 24       	eor	r1, r1
    4d84:	8f 93       	push	r24
    WDTFlag = 1;
    4d86:	81 e0       	ldi	r24, 0x01	; 1
    4d88:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <WDTFlag>
}
    4d8c:	8f 91       	pop	r24
    4d8e:	0f 90       	pop	r0
    4d90:	0f be       	out	0x3f, r0	; 63
    4d92:	0f 90       	pop	r0
    4d94:	1f 90       	pop	r1
    4d96:	18 95       	reti

00004d98 <WaitForMachine>:



void WaitForMachine(void)
{
	ucMachineWait = MACHINE_TIME_OUT;
    4d98:	81 e0       	ldi	r24, 0x01	; 1
    4d9a:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <ucMachineWait>
    4d9e:	08 95       	ret

00004da0 <InitTimerZero>:


void InitTimerZero(void)
{
//	TCCR0B = (1<<CS02) | (1<<CS00);	//set prescaler to 1024
TIFR0 = 2;//1<<TOV0;					//clear TOV0 / clear interrupt
    4da0:	82 e0       	ldi	r24, 0x02	; 2
    4da2:	85 bb       	out	0x15, r24	; 21
TIMSK0 = 2;//1<<TOIE0;				//enable timer0 overflow interrupt
    4da4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
TCNT0 = 0;//16;
    4da8:	16 bc       	out	0x26, r1	; 38
ucTimerCount = 0;
    4daa:	10 92 bf 0c 	sts	0x0CBF, r1	; 0x800cbf <ucTimerCount>
    4dae:	08 95       	ret

00004db0 <StopTimerZero>:
}


void StopTimerZero(void)
{
TCCR0B = 0;//~(1<<CS02) | ~(1<<CS01) | ~(1<<CS00);	//set prescaler to zero
    4db0:	15 bc       	out	0x25, r1	; 37
    4db2:	08 95       	ret

00004db4 <StartTimerZero>:
}

/* set timer zero to 5 milisecond resolution and start.*/
void StartTimerZero(void)
{
OCR0A = 78;
    4db4:	8e e4       	ldi	r24, 0x4E	; 78
    4db6:	87 bd       	out	0x27, r24	; 39
TCCR0A = 2;
    4db8:	82 e0       	ldi	r24, 0x02	; 2
    4dba:	84 bd       	out	0x24, r24	; 36
TCCR0B = (1<<CS02) | (1<<CS00);	//set prescaler to 1024
    4dbc:	85 e0       	ldi	r24, 0x05	; 5
    4dbe:	85 bd       	out	0x25, r24	; 37
    4dc0:	08 95       	ret

00004dc2 <__vector_21>:
}

ISR(TIMER0_COMPA_vect)
{
    4dc2:	1f 92       	push	r1
    4dc4:	0f 92       	push	r0
    4dc6:	0f b6       	in	r0, 0x3f	; 63
    4dc8:	0f 92       	push	r0
    4dca:	11 24       	eor	r1, r1
    4dcc:	8f 93       	push	r24
ucTimerCount++;
    4dce:	80 91 bf 0c 	lds	r24, 0x0CBF	; 0x800cbf <ucTimerCount>
    4dd2:	8f 5f       	subi	r24, 0xFF	; 255
    4dd4:	80 93 bf 0c 	sts	0x0CBF, r24	; 0x800cbf <ucTimerCount>

}
    4dd8:	8f 91       	pop	r24
    4dda:	0f 90       	pop	r0
    4ddc:	0f be       	out	0x3f, r0	; 63
    4dde:	0f 90       	pop	r0
    4de0:	1f 90       	pop	r1
    4de2:	18 95       	reti

00004de4 <get_from_circ_buf>:
    else
    {
        ucData = ucData - 10 + 'A';
    }
    return ucData;
}
    4de4:	fc 01       	movw	r30, r24
    4de6:	91 81       	ldd	r25, Z+1	; 0x01
    4de8:	df 01       	movw	r26, r30
    4dea:	a9 0f       	add	r26, r25
    4dec:	b1 1d       	adc	r27, r1
    4dee:	12 96       	adiw	r26, 0x02	; 2
    4df0:	2c 91       	ld	r18, X
    4df2:	80 81       	ld	r24, Z
    4df4:	98 17       	cp	r25, r24
    4df6:	31 f0       	breq	.+12     	; 0x4e04 <get_from_circ_buf+0x20>
    4df8:	9f 5f       	subi	r25, 0xFF	; 255
    4dfa:	97 fd       	sbrc	r25, 7
    4dfc:	90 e0       	ldi	r25, 0x00	; 0
    4dfe:	91 83       	std	Z+1, r25	; 0x01
    4e00:	82 2f       	mov	r24, r18
    4e02:	08 95       	ret
    4e04:	8f ef       	ldi	r24, 0xFF	; 255
    4e06:	08 95       	ret

00004e08 <init_rx_buf>:
    4e08:	ea e3       	ldi	r30, 0x3A	; 58
    4e0a:	f7 e0       	ldi	r31, 0x07	; 7
    4e0c:	11 82       	std	Z+1, r1	; 0x01
    4e0e:	10 82       	st	Z, r1
    4e10:	08 95       	ret

00004e12 <serial_init>:
    4e12:	ea e3       	ldi	r30, 0x3A	; 58
    4e14:	f7 e0       	ldi	r31, 0x07	; 7
    4e16:	11 82       	std	Z+1, r1	; 0x01
    4e18:	10 82       	st	Z, r1
    4e1a:	ec eb       	ldi	r30, 0xBC	; 188
    4e1c:	f7 e0       	ldi	r31, 0x07	; 7
    4e1e:	11 82       	std	Z+1, r1	; 0x01
    4e20:	10 82       	st	Z, r1
    4e22:	28 e9       	ldi	r18, 0x98	; 152
    4e24:	20 93 c9 00 	sts	0x00C9, r18	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    4e28:	26 e0       	ldi	r18, 0x06	; 6
    4e2a:	20 93 ca 00 	sts	0x00CA, r18	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
    4e2e:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    4e32:	27 e6       	ldi	r18, 0x67	; 103
    4e34:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    4e38:	90 93 39 07 	sts	0x0739, r25	; 0x800739 <rx_handler+0x1>
    4e3c:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <rx_handler>
    4e40:	08 95       	ret

00004e42 <serial_putchar>:
    4e42:	90 91 36 07 	lds	r25, 0x0736	; 0x800736 <pause>
    4e46:	91 11       	cpse	r25, r1
    4e48:	2a c0       	rjmp	.+84     	; 0x4e9e <serial_putchar+0x5c>
    4e4a:	78 94       	sei
    4e4c:	90 91 bc 07 	lds	r25, 0x07BC	; 0x8007bc <txbuf>
    4e50:	9f 5f       	subi	r25, 0xFF	; 255
    4e52:	97 fd       	sbrc	r25, 7
    4e54:	90 e0       	ldi	r25, 0x00	; 0
    4e56:	30 91 37 07 	lds	r19, 0x0737	; 0x800737 <rx>
    4e5a:	20 91 bd 07 	lds	r18, 0x07BD	; 0x8007bd <txbuf+0x1>
    4e5e:	92 13       	cpse	r25, r18
    4e60:	03 c0       	rjmp	.+6      	; 0x4e68 <serial_putchar+0x26>
    4e62:	33 23       	and	r19, r19
    4e64:	d1 f3       	breq	.-12     	; 0x4e5a <serial_putchar+0x18>
    4e66:	08 c0       	rjmp	.+16     	; 0x4e78 <serial_putchar+0x36>
    4e68:	e0 91 bc 07 	lds	r30, 0x07BC	; 0x8007bc <txbuf>
    4e6c:	f0 e0       	ldi	r31, 0x00	; 0
    4e6e:	e4 54       	subi	r30, 0x44	; 68
    4e70:	f8 4f       	sbci	r31, 0xF8	; 248
    4e72:	82 83       	std	Z+2, r24	; 0x02
    4e74:	90 93 bc 07 	sts	0x07BC, r25	; 0x8007bc <txbuf>
    4e78:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    4e7c:	85 fd       	sbrc	r24, 5
    4e7e:	0f c0       	rjmp	.+30     	; 0x4e9e <serial_putchar+0x5c>
    4e80:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    4e84:	85 ff       	sbrs	r24, 5
    4e86:	fc cf       	rjmp	.-8      	; 0x4e80 <serial_putchar+0x3e>
    4e88:	8c eb       	ldi	r24, 0xBC	; 188
    4e8a:	97 e0       	ldi	r25, 0x07	; 7
    4e8c:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <get_from_circ_buf>
    4e90:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    4e94:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    4e98:	80 62       	ori	r24, 0x20	; 32
    4e9a:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    4e9e:	08 95       	ret

00004ea0 <rx_buf_count>:
    4ea0:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <rxbuf>
    4ea4:	90 e0       	ldi	r25, 0x00	; 0
    4ea6:	20 91 3b 07 	lds	r18, 0x073B	; 0x80073b <rxbuf+0x1>
    4eaa:	82 1b       	sub	r24, r18
    4eac:	91 09       	sbc	r25, r1
    4eae:	97 ff       	sbrs	r25, 7
    4eb0:	02 c0       	rjmp	.+4      	; 0x4eb6 <rx_buf_count+0x16>
    4eb2:	80 58       	subi	r24, 0x80	; 128
    4eb4:	9f 4f       	sbci	r25, 0xFF	; 255
    4eb6:	08 95       	ret

00004eb8 <serial_getchar>:
    4eb8:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <rxbuf>
    4ebc:	90 e0       	ldi	r25, 0x00	; 0
    4ebe:	20 91 3b 07 	lds	r18, 0x073B	; 0x80073b <rxbuf+0x1>
    4ec2:	82 1b       	sub	r24, r18
    4ec4:	91 09       	sbc	r25, r1
    4ec6:	97 ff       	sbrs	r25, 7
    4ec8:	02 c0       	rjmp	.+4      	; 0x4ece <serial_getchar+0x16>
    4eca:	80 58       	subi	r24, 0x80	; 128
    4ecc:	9f 4f       	sbci	r25, 0xFF	; 255
    4ece:	88 23       	and	r24, r24
    4ed0:	99 f3       	breq	.-26     	; 0x4eb8 <serial_getchar>
    4ed2:	8a e3       	ldi	r24, 0x3A	; 58
    4ed4:	97 e0       	ldi	r25, 0x07	; 7
    4ed6:	0c 94 f2 26 	jmp	0x4de4	; 0x4de4 <get_from_circ_buf>

00004eda <__vector_36>:
    4eda:	1f 92       	push	r1
    4edc:	0f 92       	push	r0
    4ede:	0f b6       	in	r0, 0x3f	; 63
    4ee0:	0f 92       	push	r0
    4ee2:	11 24       	eor	r1, r1
    4ee4:	0b b6       	in	r0, 0x3b	; 59
    4ee6:	0f 92       	push	r0
    4ee8:	2f 93       	push	r18
    4eea:	3f 93       	push	r19
    4eec:	4f 93       	push	r20
    4eee:	5f 93       	push	r21
    4ef0:	6f 93       	push	r22
    4ef2:	7f 93       	push	r23
    4ef4:	8f 93       	push	r24
    4ef6:	9f 93       	push	r25
    4ef8:	af 93       	push	r26
    4efa:	bf 93       	push	r27
    4efc:	ef 93       	push	r30
    4efe:	ff 93       	push	r31
    4f00:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    4f04:	91 e0       	ldi	r25, 0x01	; 1
    4f06:	90 93 37 07 	sts	0x0737, r25	; 0x800737 <rx>
    4f0a:	90 91 3a 07 	lds	r25, 0x073A	; 0x80073a <rxbuf>
    4f0e:	9f 5f       	subi	r25, 0xFF	; 255
    4f10:	97 fd       	sbrc	r25, 7
    4f12:	90 e0       	ldi	r25, 0x00	; 0
    4f14:	20 91 3b 07 	lds	r18, 0x073B	; 0x80073b <rxbuf+0x1>
    4f18:	92 17       	cp	r25, r18
    4f1a:	41 f0       	breq	.+16     	; 0x4f2c <__vector_36+0x52>
    4f1c:	e0 91 3a 07 	lds	r30, 0x073A	; 0x80073a <rxbuf>
    4f20:	f0 e0       	ldi	r31, 0x00	; 0
    4f22:	e6 5c       	subi	r30, 0xC6	; 198
    4f24:	f8 4f       	sbci	r31, 0xF8	; 248
    4f26:	82 83       	std	Z+2, r24	; 0x02
    4f28:	90 93 3a 07 	sts	0x073A, r25	; 0x80073a <rxbuf>
    4f2c:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <rx>
    4f30:	e0 91 38 07 	lds	r30, 0x0738	; 0x800738 <rx_handler>
    4f34:	f0 91 39 07 	lds	r31, 0x0739	; 0x800739 <rx_handler+0x1>
    4f38:	30 97       	sbiw	r30, 0x00	; 0
    4f3a:	09 f0       	breq	.+2      	; 0x4f3e <__vector_36+0x64>
    4f3c:	09 95       	icall
    4f3e:	ff 91       	pop	r31
    4f40:	ef 91       	pop	r30
    4f42:	bf 91       	pop	r27
    4f44:	af 91       	pop	r26
    4f46:	9f 91       	pop	r25
    4f48:	8f 91       	pop	r24
    4f4a:	7f 91       	pop	r23
    4f4c:	6f 91       	pop	r22
    4f4e:	5f 91       	pop	r21
    4f50:	4f 91       	pop	r20
    4f52:	3f 91       	pop	r19
    4f54:	2f 91       	pop	r18
    4f56:	0f 90       	pop	r0
    4f58:	0b be       	out	0x3b, r0	; 59
    4f5a:	0f 90       	pop	r0
    4f5c:	0f be       	out	0x3f, r0	; 63
    4f5e:	0f 90       	pop	r0
    4f60:	1f 90       	pop	r1
    4f62:	18 95       	reti

00004f64 <__vector_37>:
    4f64:	1f 92       	push	r1
    4f66:	0f 92       	push	r0
    4f68:	0f b6       	in	r0, 0x3f	; 63
    4f6a:	0f 92       	push	r0
    4f6c:	11 24       	eor	r1, r1
    4f6e:	0b b6       	in	r0, 0x3b	; 59
    4f70:	0f 92       	push	r0
    4f72:	2f 93       	push	r18
    4f74:	3f 93       	push	r19
    4f76:	4f 93       	push	r20
    4f78:	5f 93       	push	r21
    4f7a:	6f 93       	push	r22
    4f7c:	7f 93       	push	r23
    4f7e:	8f 93       	push	r24
    4f80:	9f 93       	push	r25
    4f82:	af 93       	push	r26
    4f84:	bf 93       	push	r27
    4f86:	ef 93       	push	r30
    4f88:	ff 93       	push	r31
    4f8a:	90 91 bc 07 	lds	r25, 0x07BC	; 0x8007bc <txbuf>
    4f8e:	80 91 bd 07 	lds	r24, 0x07BD	; 0x8007bd <txbuf+0x1>
    4f92:	98 17       	cp	r25, r24
    4f94:	39 f0       	breq	.+14     	; 0x4fa4 <__vector_37+0x40>
    4f96:	8c eb       	ldi	r24, 0xBC	; 188
    4f98:	97 e0       	ldi	r25, 0x07	; 7
    4f9a:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <get_from_circ_buf>
    4f9e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    4fa2:	05 c0       	rjmp	.+10     	; 0x4fae <__vector_37+0x4a>
    4fa4:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    4fa8:	8f 7d       	andi	r24, 0xDF	; 223
    4faa:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    4fae:	ff 91       	pop	r31
    4fb0:	ef 91       	pop	r30
    4fb2:	bf 91       	pop	r27
    4fb4:	af 91       	pop	r26
    4fb6:	9f 91       	pop	r25
    4fb8:	8f 91       	pop	r24
    4fba:	7f 91       	pop	r23
    4fbc:	6f 91       	pop	r22
    4fbe:	5f 91       	pop	r21
    4fc0:	4f 91       	pop	r20
    4fc2:	3f 91       	pop	r19
    4fc4:	2f 91       	pop	r18
    4fc6:	0f 90       	pop	r0
    4fc8:	0b be       	out	0x3b, r0	; 59
    4fca:	0f 90       	pop	r0
    4fcc:	0f be       	out	0x3f, r0	; 63
    4fce:	0f 90       	pop	r0
    4fd0:	1f 90       	pop	r1
    4fd2:	18 95       	reti

00004fd4 <Ascii_to_nible>:
 * \param ucData is the ASCII value to be converted.
 *
 * \return ucData is the nible value.
**/
u8 Ascii_to_nible ( u8 ucData )
{
    4fd4:	98 2f       	mov	r25, r24
    if ((ucData <= '9' ) && (ucData >= '0')) 
    4fd6:	80 ed       	ldi	r24, 0xD0	; 208
    4fd8:	89 0f       	add	r24, r25
    4fda:	8a 30       	cpi	r24, 0x0A	; 10
    4fdc:	70 f0       	brcs	.+28     	; 0x4ffa <Ascii_to_nible+0x26>
    {
        ucData -= '0';
    }
    else if ((ucData <= 'F' ) && (ucData >= 'A')) 
    4fde:	8f eb       	ldi	r24, 0xBF	; 191
    4fe0:	89 0f       	add	r24, r25
    4fe2:	86 30       	cpi	r24, 0x06	; 6
    4fe4:	10 f4       	brcc	.+4      	; 0x4fea <Ascii_to_nible+0x16>
    {
        ucData = ucData -'A' + 10;
    4fe6:	89 ec       	ldi	r24, 0xC9	; 201
    4fe8:	05 c0       	rjmp	.+10     	; 0x4ff4 <Ascii_to_nible+0x20>
    }
    else if ((ucData <= 'f' ) && (ucData >= 'a')) 
    4fea:	8f e9       	ldi	r24, 0x9F	; 159
    4fec:	89 0f       	add	r24, r25
    4fee:	86 30       	cpi	r24, 0x06	; 6
    4ff0:	18 f4       	brcc	.+6      	; 0x4ff8 <Ascii_to_nible+0x24>
    {
        ucData = ucData -'a' + 10;
    4ff2:	89 ea       	ldi	r24, 0xA9	; 169
    4ff4:	89 0f       	add	r24, r25
    4ff6:	08 95       	ret
    }
    else 
    {
        ucData = 0;
    4ff8:	80 e0       	ldi	r24, 0x00	; 0
    }
    return ucData;
}
    4ffa:	08 95       	ret

00004ffc <vfprintf>:
    4ffc:	2f 92       	push	r2
    4ffe:	3f 92       	push	r3
    5000:	4f 92       	push	r4
    5002:	5f 92       	push	r5
    5004:	6f 92       	push	r6
    5006:	7f 92       	push	r7
    5008:	8f 92       	push	r8
    500a:	9f 92       	push	r9
    500c:	af 92       	push	r10
    500e:	bf 92       	push	r11
    5010:	cf 92       	push	r12
    5012:	df 92       	push	r13
    5014:	ef 92       	push	r14
    5016:	ff 92       	push	r15
    5018:	0f 93       	push	r16
    501a:	1f 93       	push	r17
    501c:	cf 93       	push	r28
    501e:	df 93       	push	r29
    5020:	cd b7       	in	r28, 0x3d	; 61
    5022:	de b7       	in	r29, 0x3e	; 62
    5024:	63 97       	sbiw	r28, 0x13	; 19
    5026:	0f b6       	in	r0, 0x3f	; 63
    5028:	f8 94       	cli
    502a:	de bf       	out	0x3e, r29	; 62
    502c:	0f be       	out	0x3f, r0	; 63
    502e:	cd bf       	out	0x3d, r28	; 61
    5030:	6c 01       	movw	r12, r24
    5032:	4b 01       	movw	r8, r22
    5034:	2a 01       	movw	r4, r20
    5036:	fc 01       	movw	r30, r24
    5038:	17 82       	std	Z+7, r1	; 0x07
    503a:	16 82       	std	Z+6, r1	; 0x06
    503c:	83 81       	ldd	r24, Z+3	; 0x03
    503e:	81 ff       	sbrs	r24, 1
    5040:	43 c3       	rjmp	.+1670   	; 0x56c8 <vfprintf+0x6cc>
    5042:	ae 01       	movw	r20, r28
    5044:	4f 5f       	subi	r20, 0xFF	; 255
    5046:	5f 4f       	sbci	r21, 0xFF	; 255
    5048:	3a 01       	movw	r6, r20
    504a:	f6 01       	movw	r30, r12
    504c:	93 81       	ldd	r25, Z+3	; 0x03
    504e:	f4 01       	movw	r30, r8
    5050:	93 fd       	sbrc	r25, 3
    5052:	85 91       	lpm	r24, Z+
    5054:	93 ff       	sbrs	r25, 3
    5056:	81 91       	ld	r24, Z+
    5058:	4f 01       	movw	r8, r30
    505a:	88 23       	and	r24, r24
    505c:	09 f4       	brne	.+2      	; 0x5060 <vfprintf+0x64>
    505e:	30 c3       	rjmp	.+1632   	; 0x56c0 <vfprintf+0x6c4>
    5060:	85 32       	cpi	r24, 0x25	; 37
    5062:	39 f4       	brne	.+14     	; 0x5072 <vfprintf+0x76>
    5064:	93 fd       	sbrc	r25, 3
    5066:	85 91       	lpm	r24, Z+
    5068:	93 ff       	sbrs	r25, 3
    506a:	81 91       	ld	r24, Z+
    506c:	4f 01       	movw	r8, r30
    506e:	85 32       	cpi	r24, 0x25	; 37
    5070:	39 f4       	brne	.+14     	; 0x5080 <vfprintf+0x84>
    5072:	b6 01       	movw	r22, r12
    5074:	90 e0       	ldi	r25, 0x00	; 0
    5076:	0e 94 79 32 	call	0x64f2	; 0x64f2 <fputc>
    507a:	52 01       	movw	r10, r4
    507c:	25 01       	movw	r4, r10
    507e:	e5 cf       	rjmp	.-54     	; 0x504a <vfprintf+0x4e>
    5080:	10 e0       	ldi	r17, 0x00	; 0
    5082:	f1 2c       	mov	r15, r1
    5084:	20 e0       	ldi	r18, 0x00	; 0
    5086:	20 32       	cpi	r18, 0x20	; 32
    5088:	a0 f4       	brcc	.+40     	; 0x50b2 <vfprintf+0xb6>
    508a:	8b 32       	cpi	r24, 0x2B	; 43
    508c:	69 f0       	breq	.+26     	; 0x50a8 <vfprintf+0xac>
    508e:	30 f4       	brcc	.+12     	; 0x509c <vfprintf+0xa0>
    5090:	80 32       	cpi	r24, 0x20	; 32
    5092:	59 f0       	breq	.+22     	; 0x50aa <vfprintf+0xae>
    5094:	83 32       	cpi	r24, 0x23	; 35
    5096:	69 f4       	brne	.+26     	; 0x50b2 <vfprintf+0xb6>
    5098:	20 61       	ori	r18, 0x10	; 16
    509a:	2c c0       	rjmp	.+88     	; 0x50f4 <vfprintf+0xf8>
    509c:	8d 32       	cpi	r24, 0x2D	; 45
    509e:	39 f0       	breq	.+14     	; 0x50ae <vfprintf+0xb2>
    50a0:	80 33       	cpi	r24, 0x30	; 48
    50a2:	39 f4       	brne	.+14     	; 0x50b2 <vfprintf+0xb6>
    50a4:	21 60       	ori	r18, 0x01	; 1
    50a6:	26 c0       	rjmp	.+76     	; 0x50f4 <vfprintf+0xf8>
    50a8:	22 60       	ori	r18, 0x02	; 2
    50aa:	24 60       	ori	r18, 0x04	; 4
    50ac:	23 c0       	rjmp	.+70     	; 0x50f4 <vfprintf+0xf8>
    50ae:	28 60       	ori	r18, 0x08	; 8
    50b0:	21 c0       	rjmp	.+66     	; 0x50f4 <vfprintf+0xf8>
    50b2:	27 fd       	sbrc	r18, 7
    50b4:	27 c0       	rjmp	.+78     	; 0x5104 <vfprintf+0x108>
    50b6:	30 ed       	ldi	r19, 0xD0	; 208
    50b8:	38 0f       	add	r19, r24
    50ba:	3a 30       	cpi	r19, 0x0A	; 10
    50bc:	78 f4       	brcc	.+30     	; 0x50dc <vfprintf+0xe0>
    50be:	26 ff       	sbrs	r18, 6
    50c0:	06 c0       	rjmp	.+12     	; 0x50ce <vfprintf+0xd2>
    50c2:	fa e0       	ldi	r31, 0x0A	; 10
    50c4:	1f 9f       	mul	r17, r31
    50c6:	30 0d       	add	r19, r0
    50c8:	11 24       	eor	r1, r1
    50ca:	13 2f       	mov	r17, r19
    50cc:	13 c0       	rjmp	.+38     	; 0x50f4 <vfprintf+0xf8>
    50ce:	4a e0       	ldi	r20, 0x0A	; 10
    50d0:	f4 9e       	mul	r15, r20
    50d2:	30 0d       	add	r19, r0
    50d4:	11 24       	eor	r1, r1
    50d6:	f3 2e       	mov	r15, r19
    50d8:	20 62       	ori	r18, 0x20	; 32
    50da:	0c c0       	rjmp	.+24     	; 0x50f4 <vfprintf+0xf8>
    50dc:	8e 32       	cpi	r24, 0x2E	; 46
    50de:	21 f4       	brne	.+8      	; 0x50e8 <vfprintf+0xec>
    50e0:	26 fd       	sbrc	r18, 6
    50e2:	ee c2       	rjmp	.+1500   	; 0x56c0 <vfprintf+0x6c4>
    50e4:	20 64       	ori	r18, 0x40	; 64
    50e6:	06 c0       	rjmp	.+12     	; 0x50f4 <vfprintf+0xf8>
    50e8:	8c 36       	cpi	r24, 0x6C	; 108
    50ea:	11 f4       	brne	.+4      	; 0x50f0 <vfprintf+0xf4>
    50ec:	20 68       	ori	r18, 0x80	; 128
    50ee:	02 c0       	rjmp	.+4      	; 0x50f4 <vfprintf+0xf8>
    50f0:	88 36       	cpi	r24, 0x68	; 104
    50f2:	41 f4       	brne	.+16     	; 0x5104 <vfprintf+0x108>
    50f4:	f4 01       	movw	r30, r8
    50f6:	93 fd       	sbrc	r25, 3
    50f8:	85 91       	lpm	r24, Z+
    50fa:	93 ff       	sbrs	r25, 3
    50fc:	81 91       	ld	r24, Z+
    50fe:	4f 01       	movw	r8, r30
    5100:	81 11       	cpse	r24, r1
    5102:	c1 cf       	rjmp	.-126    	; 0x5086 <vfprintf+0x8a>
    5104:	9b eb       	ldi	r25, 0xBB	; 187
    5106:	98 0f       	add	r25, r24
    5108:	93 30       	cpi	r25, 0x03	; 3
    510a:	18 f4       	brcc	.+6      	; 0x5112 <vfprintf+0x116>
    510c:	20 61       	ori	r18, 0x10	; 16
    510e:	80 5e       	subi	r24, 0xE0	; 224
    5110:	06 c0       	rjmp	.+12     	; 0x511e <vfprintf+0x122>
    5112:	9b e9       	ldi	r25, 0x9B	; 155
    5114:	98 0f       	add	r25, r24
    5116:	93 30       	cpi	r25, 0x03	; 3
    5118:	08 f0       	brcs	.+2      	; 0x511c <vfprintf+0x120>
    511a:	71 c1       	rjmp	.+738    	; 0x53fe <vfprintf+0x402>
    511c:	2f 7e       	andi	r18, 0xEF	; 239
    511e:	26 ff       	sbrs	r18, 6
    5120:	16 e0       	ldi	r17, 0x06	; 6
    5122:	2f 73       	andi	r18, 0x3F	; 63
    5124:	32 2e       	mov	r3, r18
    5126:	85 36       	cpi	r24, 0x65	; 101
    5128:	19 f4       	brne	.+6      	; 0x5130 <vfprintf+0x134>
    512a:	20 64       	ori	r18, 0x40	; 64
    512c:	32 2e       	mov	r3, r18
    512e:	08 c0       	rjmp	.+16     	; 0x5140 <vfprintf+0x144>
    5130:	86 36       	cpi	r24, 0x66	; 102
    5132:	21 f4       	brne	.+8      	; 0x513c <vfprintf+0x140>
    5134:	f2 2f       	mov	r31, r18
    5136:	f0 68       	ori	r31, 0x80	; 128
    5138:	3f 2e       	mov	r3, r31
    513a:	02 c0       	rjmp	.+4      	; 0x5140 <vfprintf+0x144>
    513c:	11 11       	cpse	r17, r1
    513e:	11 50       	subi	r17, 0x01	; 1
    5140:	37 fe       	sbrs	r3, 7
    5142:	07 c0       	rjmp	.+14     	; 0x5152 <vfprintf+0x156>
    5144:	1c 33       	cpi	r17, 0x3C	; 60
    5146:	50 f4       	brcc	.+20     	; 0x515c <vfprintf+0x160>
    5148:	ee 24       	eor	r14, r14
    514a:	e3 94       	inc	r14
    514c:	e1 0e       	add	r14, r17
    514e:	27 e0       	ldi	r18, 0x07	; 7
    5150:	0b c0       	rjmp	.+22     	; 0x5168 <vfprintf+0x16c>
    5152:	18 30       	cpi	r17, 0x08	; 8
    5154:	38 f0       	brcs	.+14     	; 0x5164 <vfprintf+0x168>
    5156:	27 e0       	ldi	r18, 0x07	; 7
    5158:	17 e0       	ldi	r17, 0x07	; 7
    515a:	05 c0       	rjmp	.+10     	; 0x5166 <vfprintf+0x16a>
    515c:	27 e0       	ldi	r18, 0x07	; 7
    515e:	4c e3       	ldi	r20, 0x3C	; 60
    5160:	e4 2e       	mov	r14, r20
    5162:	02 c0       	rjmp	.+4      	; 0x5168 <vfprintf+0x16c>
    5164:	21 2f       	mov	r18, r17
    5166:	e1 2c       	mov	r14, r1
    5168:	52 01       	movw	r10, r4
    516a:	44 e0       	ldi	r20, 0x04	; 4
    516c:	a4 0e       	add	r10, r20
    516e:	b1 1c       	adc	r11, r1
    5170:	f2 01       	movw	r30, r4
    5172:	60 81       	ld	r22, Z
    5174:	71 81       	ldd	r23, Z+1	; 0x01
    5176:	82 81       	ldd	r24, Z+2	; 0x02
    5178:	93 81       	ldd	r25, Z+3	; 0x03
    517a:	0e 2d       	mov	r16, r14
    517c:	a3 01       	movw	r20, r6
    517e:	0e 94 fe 30 	call	0x61fc	; 0x61fc <__ftoa_engine>
    5182:	2c 01       	movw	r4, r24
    5184:	09 81       	ldd	r16, Y+1	; 0x01
    5186:	00 ff       	sbrs	r16, 0
    5188:	02 c0       	rjmp	.+4      	; 0x518e <vfprintf+0x192>
    518a:	03 ff       	sbrs	r16, 3
    518c:	07 c0       	rjmp	.+14     	; 0x519c <vfprintf+0x1a0>
    518e:	31 fc       	sbrc	r3, 1
    5190:	08 c0       	rjmp	.+16     	; 0x51a2 <vfprintf+0x1a6>
    5192:	32 fe       	sbrs	r3, 2
    5194:	09 c0       	rjmp	.+18     	; 0x51a8 <vfprintf+0x1ac>
    5196:	30 e2       	ldi	r19, 0x20	; 32
    5198:	23 2e       	mov	r2, r19
    519a:	07 c0       	rjmp	.+14     	; 0x51aa <vfprintf+0x1ae>
    519c:	2d e2       	ldi	r18, 0x2D	; 45
    519e:	22 2e       	mov	r2, r18
    51a0:	04 c0       	rjmp	.+8      	; 0x51aa <vfprintf+0x1ae>
    51a2:	9b e2       	ldi	r25, 0x2B	; 43
    51a4:	29 2e       	mov	r2, r25
    51a6:	01 c0       	rjmp	.+2      	; 0x51aa <vfprintf+0x1ae>
    51a8:	21 2c       	mov	r2, r1
    51aa:	80 2f       	mov	r24, r16
    51ac:	8c 70       	andi	r24, 0x0C	; 12
    51ae:	19 f0       	breq	.+6      	; 0x51b6 <vfprintf+0x1ba>
    51b0:	21 10       	cpse	r2, r1
    51b2:	68 c2       	rjmp	.+1232   	; 0x5684 <vfprintf+0x688>
    51b4:	a8 c2       	rjmp	.+1360   	; 0x5706 <vfprintf+0x70a>
    51b6:	37 fe       	sbrs	r3, 7
    51b8:	0f c0       	rjmp	.+30     	; 0x51d8 <vfprintf+0x1dc>
    51ba:	e4 0c       	add	r14, r4
    51bc:	04 ff       	sbrs	r16, 4
    51be:	04 c0       	rjmp	.+8      	; 0x51c8 <vfprintf+0x1cc>
    51c0:	8a 81       	ldd	r24, Y+2	; 0x02
    51c2:	81 33       	cpi	r24, 0x31	; 49
    51c4:	09 f4       	brne	.+2      	; 0x51c8 <vfprintf+0x1cc>
    51c6:	ea 94       	dec	r14
    51c8:	1e 14       	cp	r1, r14
    51ca:	74 f5       	brge	.+92     	; 0x5228 <vfprintf+0x22c>
    51cc:	f8 e0       	ldi	r31, 0x08	; 8
    51ce:	fe 15       	cp	r31, r14
    51d0:	78 f5       	brcc	.+94     	; 0x5230 <vfprintf+0x234>
    51d2:	88 e0       	ldi	r24, 0x08	; 8
    51d4:	e8 2e       	mov	r14, r24
    51d6:	2c c0       	rjmp	.+88     	; 0x5230 <vfprintf+0x234>
    51d8:	36 fc       	sbrc	r3, 6
    51da:	2a c0       	rjmp	.+84     	; 0x5230 <vfprintf+0x234>
    51dc:	81 2f       	mov	r24, r17
    51de:	90 e0       	ldi	r25, 0x00	; 0
    51e0:	84 15       	cp	r24, r4
    51e2:	95 05       	cpc	r25, r5
    51e4:	9c f0       	brlt	.+38     	; 0x520c <vfprintf+0x210>
    51e6:	2c ef       	ldi	r18, 0xFC	; 252
    51e8:	42 16       	cp	r4, r18
    51ea:	2f ef       	ldi	r18, 0xFF	; 255
    51ec:	52 06       	cpc	r5, r18
    51ee:	74 f0       	brlt	.+28     	; 0x520c <vfprintf+0x210>
    51f0:	43 2d       	mov	r20, r3
    51f2:	40 68       	ori	r20, 0x80	; 128
    51f4:	34 2e       	mov	r3, r20
    51f6:	0a c0       	rjmp	.+20     	; 0x520c <vfprintf+0x210>
    51f8:	e2 e0       	ldi	r30, 0x02	; 2
    51fa:	f0 e0       	ldi	r31, 0x00	; 0
    51fc:	ec 0f       	add	r30, r28
    51fe:	fd 1f       	adc	r31, r29
    5200:	e1 0f       	add	r30, r17
    5202:	f1 1d       	adc	r31, r1
    5204:	80 81       	ld	r24, Z
    5206:	80 33       	cpi	r24, 0x30	; 48
    5208:	19 f4       	brne	.+6      	; 0x5210 <vfprintf+0x214>
    520a:	11 50       	subi	r17, 0x01	; 1
    520c:	11 11       	cpse	r17, r1
    520e:	f4 cf       	rjmp	.-24     	; 0x51f8 <vfprintf+0x1fc>
    5210:	37 fe       	sbrs	r3, 7
    5212:	0e c0       	rjmp	.+28     	; 0x5230 <vfprintf+0x234>
    5214:	ee 24       	eor	r14, r14
    5216:	e3 94       	inc	r14
    5218:	e1 0e       	add	r14, r17
    521a:	81 2f       	mov	r24, r17
    521c:	90 e0       	ldi	r25, 0x00	; 0
    521e:	48 16       	cp	r4, r24
    5220:	59 06       	cpc	r5, r25
    5222:	2c f4       	brge	.+10     	; 0x522e <vfprintf+0x232>
    5224:	14 19       	sub	r17, r4
    5226:	04 c0       	rjmp	.+8      	; 0x5230 <vfprintf+0x234>
    5228:	ee 24       	eor	r14, r14
    522a:	e3 94       	inc	r14
    522c:	01 c0       	rjmp	.+2      	; 0x5230 <vfprintf+0x234>
    522e:	10 e0       	ldi	r17, 0x00	; 0
    5230:	37 fe       	sbrs	r3, 7
    5232:	06 c0       	rjmp	.+12     	; 0x5240 <vfprintf+0x244>
    5234:	14 14       	cp	r1, r4
    5236:	15 04       	cpc	r1, r5
    5238:	34 f4       	brge	.+12     	; 0x5246 <vfprintf+0x24a>
    523a:	c2 01       	movw	r24, r4
    523c:	01 96       	adiw	r24, 0x01	; 1
    523e:	05 c0       	rjmp	.+10     	; 0x524a <vfprintf+0x24e>
    5240:	85 e0       	ldi	r24, 0x05	; 5
    5242:	90 e0       	ldi	r25, 0x00	; 0
    5244:	02 c0       	rjmp	.+4      	; 0x524a <vfprintf+0x24e>
    5246:	81 e0       	ldi	r24, 0x01	; 1
    5248:	90 e0       	ldi	r25, 0x00	; 0
    524a:	21 10       	cpse	r2, r1
    524c:	01 96       	adiw	r24, 0x01	; 1
    524e:	11 23       	and	r17, r17
    5250:	31 f0       	breq	.+12     	; 0x525e <vfprintf+0x262>
    5252:	21 2f       	mov	r18, r17
    5254:	30 e0       	ldi	r19, 0x00	; 0
    5256:	2f 5f       	subi	r18, 0xFF	; 255
    5258:	3f 4f       	sbci	r19, 0xFF	; 255
    525a:	82 0f       	add	r24, r18
    525c:	93 1f       	adc	r25, r19
    525e:	2f 2d       	mov	r18, r15
    5260:	30 e0       	ldi	r19, 0x00	; 0
    5262:	82 17       	cp	r24, r18
    5264:	93 07       	cpc	r25, r19
    5266:	14 f4       	brge	.+4      	; 0x526c <vfprintf+0x270>
    5268:	f8 1a       	sub	r15, r24
    526a:	01 c0       	rjmp	.+2      	; 0x526e <vfprintf+0x272>
    526c:	f1 2c       	mov	r15, r1
    526e:	83 2d       	mov	r24, r3
    5270:	89 70       	andi	r24, 0x09	; 9
    5272:	49 f4       	brne	.+18     	; 0x5286 <vfprintf+0x28a>
    5274:	ff 20       	and	r15, r15
    5276:	39 f0       	breq	.+14     	; 0x5286 <vfprintf+0x28a>
    5278:	b6 01       	movw	r22, r12
    527a:	80 e2       	ldi	r24, 0x20	; 32
    527c:	90 e0       	ldi	r25, 0x00	; 0
    527e:	0e 94 79 32 	call	0x64f2	; 0x64f2 <fputc>
    5282:	fa 94       	dec	r15
    5284:	f7 cf       	rjmp	.-18     	; 0x5274 <vfprintf+0x278>
    5286:	22 20       	and	r2, r2
    5288:	29 f0       	breq	.+10     	; 0x5294 <vfprintf+0x298>
    528a:	b6 01       	movw	r22, r12
    528c:	82 2d       	mov	r24, r2
    528e:	90 e0       	ldi	r25, 0x00	; 0
    5290:	0e 94 79 32 	call	0x64f2	; 0x64f2 <fputc>
    5294:	33 fc       	sbrc	r3, 3
    5296:	09 c0       	rjmp	.+18     	; 0x52aa <vfprintf+0x2ae>
    5298:	ff 20       	and	r15, r15
    529a:	39 f0       	breq	.+14     	; 0x52aa <vfprintf+0x2ae>
    529c:	b6 01       	movw	r22, r12
    529e:	80 e3       	ldi	r24, 0x30	; 48
    52a0:	90 e0       	ldi	r25, 0x00	; 0
    52a2:	0e 94 79 32 	call	0x64f2	; 0x64f2 <fputc>
    52a6:	fa 94       	dec	r15
    52a8:	f7 cf       	rjmp	.-18     	; 0x5298 <vfprintf+0x29c>
    52aa:	37 fe       	sbrs	r3, 7
    52ac:	5a c0       	rjmp	.+180    	; 0x5362 <vfprintf+0x366>
    52ae:	94 2d       	mov	r25, r4
    52b0:	85 2d       	mov	r24, r5
    52b2:	57 fe       	sbrs	r5, 7
    52b4:	02 c0       	rjmp	.+4      	; 0x52ba <vfprintf+0x2be>
    52b6:	90 e0       	ldi	r25, 0x00	; 0
    52b8:	80 e0       	ldi	r24, 0x00	; 0
    52ba:	29 2e       	mov	r2, r25
    52bc:	38 2e       	mov	r3, r24
    52be:	20 e0       	ldi	r18, 0x00	; 0
    52c0:	30 e0       	ldi	r19, 0x00	; 0
    52c2:	a2 01       	movw	r20, r4
    52c4:	4e 19       	sub	r20, r14
    52c6:	51 09       	sbc	r21, r1
    52c8:	5d 87       	std	Y+13, r21	; 0x0d
    52ca:	4c 87       	std	Y+12, r20	; 0x0c
    52cc:	a2 01       	movw	r20, r4
    52ce:	42 19       	sub	r20, r2
    52d0:	53 09       	sbc	r21, r3
    52d2:	5f 87       	std	Y+15, r21	; 0x0f
    52d4:	4e 87       	std	Y+14, r20	; 0x0e
    52d6:	61 2f       	mov	r22, r17
    52d8:	70 e0       	ldi	r23, 0x00	; 0
    52da:	44 27       	eor	r20, r20
    52dc:	55 27       	eor	r21, r21
    52de:	46 1b       	sub	r20, r22
    52e0:	57 0b       	sbc	r21, r23
    52e2:	59 8b       	std	Y+17, r21	; 0x11
    52e4:	48 8b       	std	Y+16, r20	; 0x10
    52e6:	5f ef       	ldi	r21, 0xFF	; 255
    52e8:	25 16       	cp	r2, r21
    52ea:	35 06       	cpc	r3, r21
    52ec:	49 f4       	brne	.+18     	; 0x5300 <vfprintf+0x304>
    52ee:	b6 01       	movw	r22, r12
    52f0:	8e e2       	ldi	r24, 0x2E	; 46
    52f2:	90 e0       	ldi	r25, 0x00	; 0
    52f4:	2a 8b       	std	Y+18, r18	; 0x12
    52f6:	3b 8b       	std	Y+19, r19	; 0x13
    52f8:	0e 94 79 32 	call	0x64f2	; 0x64f2 <fputc>
    52fc:	3b 89       	ldd	r19, Y+19	; 0x13
    52fe:	2a 89       	ldd	r18, Y+18	; 0x12
    5300:	42 14       	cp	r4, r2
    5302:	53 04       	cpc	r5, r3
    5304:	6c f0       	brlt	.+26     	; 0x5320 <vfprintf+0x324>
    5306:	4c 85       	ldd	r20, Y+12	; 0x0c
    5308:	5d 85       	ldd	r21, Y+13	; 0x0d
    530a:	42 15       	cp	r20, r2
    530c:	53 05       	cpc	r21, r3
    530e:	44 f4       	brge	.+16     	; 0x5320 <vfprintf+0x324>
    5310:	ee 85       	ldd	r30, Y+14	; 0x0e
    5312:	ff 85       	ldd	r31, Y+15	; 0x0f
    5314:	e2 0f       	add	r30, r18
    5316:	f3 1f       	adc	r31, r19
    5318:	e6 0d       	add	r30, r6
    531a:	f7 1d       	adc	r31, r7
    531c:	81 81       	ldd	r24, Z+1	; 0x01
    531e:	01 c0       	rjmp	.+2      	; 0x5322 <vfprintf+0x326>
    5320:	80 e3       	ldi	r24, 0x30	; 48
    5322:	51 e0       	ldi	r21, 0x01	; 1
    5324:	25 1a       	sub	r2, r21
    5326:	31 08       	sbc	r3, r1
    5328:	2f 5f       	subi	r18, 0xFF	; 255
    532a:	3f 4f       	sbci	r19, 0xFF	; 255
    532c:	48 89       	ldd	r20, Y+16	; 0x10
    532e:	59 89       	ldd	r21, Y+17	; 0x11
    5330:	24 16       	cp	r2, r20
    5332:	35 06       	cpc	r3, r21
    5334:	4c f0       	brlt	.+18     	; 0x5348 <vfprintf+0x34c>
    5336:	b6 01       	movw	r22, r12
    5338:	90 e0       	ldi	r25, 0x00	; 0
    533a:	2a 8b       	std	Y+18, r18	; 0x12
    533c:	3b 8b       	std	Y+19, r19	; 0x13
    533e:	0e 94 79 32 	call	0x64f2	; 0x64f2 <fputc>
    5342:	2a 89       	ldd	r18, Y+18	; 0x12
    5344:	3b 89       	ldd	r19, Y+19	; 0x13
    5346:	cf cf       	rjmp	.-98     	; 0x52e6 <vfprintf+0x2ea>
    5348:	24 14       	cp	r2, r4
    534a:	35 04       	cpc	r3, r5
    534c:	39 f4       	brne	.+14     	; 0x535c <vfprintf+0x360>
    534e:	9a 81       	ldd	r25, Y+2	; 0x02
    5350:	96 33       	cpi	r25, 0x36	; 54
    5352:	18 f4       	brcc	.+6      	; 0x535a <vfprintf+0x35e>
    5354:	95 33       	cpi	r25, 0x35	; 53
    5356:	11 f4       	brne	.+4      	; 0x535c <vfprintf+0x360>
    5358:	04 ff       	sbrs	r16, 4
    535a:	81 e3       	ldi	r24, 0x31	; 49
    535c:	b6 01       	movw	r22, r12
    535e:	90 e0       	ldi	r25, 0x00	; 0
    5360:	4b c0       	rjmp	.+150    	; 0x53f8 <vfprintf+0x3fc>
    5362:	8a 81       	ldd	r24, Y+2	; 0x02
    5364:	81 33       	cpi	r24, 0x31	; 49
    5366:	09 f0       	breq	.+2      	; 0x536a <vfprintf+0x36e>
    5368:	0f 7e       	andi	r16, 0xEF	; 239
    536a:	b6 01       	movw	r22, r12
    536c:	90 e0       	ldi	r25, 0x00	; 0
    536e:	0e 94 79 32 	call	0x64f2	; 0x64f2 <fputc>
    5372:	11 11       	cpse	r17, r1
    5374:	05 c0       	rjmp	.+10     	; 0x5380 <vfprintf+0x384>
    5376:	34 fc       	sbrc	r3, 4
    5378:	18 c0       	rjmp	.+48     	; 0x53aa <vfprintf+0x3ae>
    537a:	85 e6       	ldi	r24, 0x65	; 101
    537c:	90 e0       	ldi	r25, 0x00	; 0
    537e:	17 c0       	rjmp	.+46     	; 0x53ae <vfprintf+0x3b2>
    5380:	b6 01       	movw	r22, r12
    5382:	8e e2       	ldi	r24, 0x2E	; 46
    5384:	90 e0       	ldi	r25, 0x00	; 0
    5386:	0e 94 79 32 	call	0x64f2	; 0x64f2 <fputc>
    538a:	82 e0       	ldi	r24, 0x02	; 2
    538c:	ee 24       	eor	r14, r14
    538e:	e3 94       	inc	r14
    5390:	e8 0e       	add	r14, r24
    5392:	f3 01       	movw	r30, r6
    5394:	e8 0f       	add	r30, r24
    5396:	f1 1d       	adc	r31, r1
    5398:	80 81       	ld	r24, Z
    539a:	b6 01       	movw	r22, r12
    539c:	90 e0       	ldi	r25, 0x00	; 0
    539e:	0e 94 79 32 	call	0x64f2	; 0x64f2 <fputc>
    53a2:	11 50       	subi	r17, 0x01	; 1
    53a4:	8e 2d       	mov	r24, r14
    53a6:	91 f7       	brne	.-28     	; 0x538c <vfprintf+0x390>
    53a8:	e6 cf       	rjmp	.-52     	; 0x5376 <vfprintf+0x37a>
    53aa:	85 e4       	ldi	r24, 0x45	; 69
    53ac:	90 e0       	ldi	r25, 0x00	; 0
    53ae:	b6 01       	movw	r22, r12
    53b0:	0e 94 79 32 	call	0x64f2	; 0x64f2 <fputc>
    53b4:	57 fc       	sbrc	r5, 7
    53b6:	05 c0       	rjmp	.+10     	; 0x53c2 <vfprintf+0x3c6>
    53b8:	41 14       	cp	r4, r1
    53ba:	51 04       	cpc	r5, r1
    53bc:	39 f4       	brne	.+14     	; 0x53cc <vfprintf+0x3d0>
    53be:	04 ff       	sbrs	r16, 4
    53c0:	05 c0       	rjmp	.+10     	; 0x53cc <vfprintf+0x3d0>
    53c2:	51 94       	neg	r5
    53c4:	41 94       	neg	r4
    53c6:	51 08       	sbc	r5, r1
    53c8:	8d e2       	ldi	r24, 0x2D	; 45
    53ca:	01 c0       	rjmp	.+2      	; 0x53ce <vfprintf+0x3d2>
    53cc:	8b e2       	ldi	r24, 0x2B	; 43
    53ce:	b6 01       	movw	r22, r12
    53d0:	90 e0       	ldi	r25, 0x00	; 0
    53d2:	0e 94 79 32 	call	0x64f2	; 0x64f2 <fputc>
    53d6:	80 e3       	ldi	r24, 0x30	; 48
    53d8:	9a e0       	ldi	r25, 0x0A	; 10
    53da:	49 16       	cp	r4, r25
    53dc:	51 04       	cpc	r5, r1
    53de:	2c f0       	brlt	.+10     	; 0x53ea <vfprintf+0x3ee>
    53e0:	8f 5f       	subi	r24, 0xFF	; 255
    53e2:	5a e0       	ldi	r21, 0x0A	; 10
    53e4:	45 1a       	sub	r4, r21
    53e6:	51 08       	sbc	r5, r1
    53e8:	f7 cf       	rjmp	.-18     	; 0x53d8 <vfprintf+0x3dc>
    53ea:	b6 01       	movw	r22, r12
    53ec:	90 e0       	ldi	r25, 0x00	; 0
    53ee:	0e 94 79 32 	call	0x64f2	; 0x64f2 <fputc>
    53f2:	b6 01       	movw	r22, r12
    53f4:	c2 01       	movw	r24, r4
    53f6:	c0 96       	adiw	r24, 0x30	; 48
    53f8:	0e 94 79 32 	call	0x64f2	; 0x64f2 <fputc>
    53fc:	57 c1       	rjmp	.+686    	; 0x56ac <vfprintf+0x6b0>
    53fe:	83 36       	cpi	r24, 0x63	; 99
    5400:	31 f0       	breq	.+12     	; 0x540e <vfprintf+0x412>
    5402:	83 37       	cpi	r24, 0x73	; 115
    5404:	79 f0       	breq	.+30     	; 0x5424 <vfprintf+0x428>
    5406:	83 35       	cpi	r24, 0x53	; 83
    5408:	09 f0       	breq	.+2      	; 0x540c <vfprintf+0x410>
    540a:	58 c0       	rjmp	.+176    	; 0x54bc <vfprintf+0x4c0>
    540c:	21 c0       	rjmp	.+66     	; 0x5450 <vfprintf+0x454>
    540e:	52 01       	movw	r10, r4
    5410:	e2 e0       	ldi	r30, 0x02	; 2
    5412:	ae 0e       	add	r10, r30
    5414:	b1 1c       	adc	r11, r1
    5416:	f2 01       	movw	r30, r4
    5418:	80 81       	ld	r24, Z
    541a:	89 83       	std	Y+1, r24	; 0x01
    541c:	01 e0       	ldi	r16, 0x01	; 1
    541e:	10 e0       	ldi	r17, 0x00	; 0
    5420:	23 01       	movw	r4, r6
    5422:	14 c0       	rjmp	.+40     	; 0x544c <vfprintf+0x450>
    5424:	52 01       	movw	r10, r4
    5426:	f2 e0       	ldi	r31, 0x02	; 2
    5428:	af 0e       	add	r10, r31
    542a:	b1 1c       	adc	r11, r1
    542c:	f2 01       	movw	r30, r4
    542e:	40 80       	ld	r4, Z
    5430:	51 80       	ldd	r5, Z+1	; 0x01
    5432:	26 ff       	sbrs	r18, 6
    5434:	03 c0       	rjmp	.+6      	; 0x543c <vfprintf+0x440>
    5436:	61 2f       	mov	r22, r17
    5438:	70 e0       	ldi	r23, 0x00	; 0
    543a:	02 c0       	rjmp	.+4      	; 0x5440 <vfprintf+0x444>
    543c:	6f ef       	ldi	r22, 0xFF	; 255
    543e:	7f ef       	ldi	r23, 0xFF	; 255
    5440:	c2 01       	movw	r24, r4
    5442:	2a 8b       	std	Y+18, r18	; 0x12
    5444:	0e 94 2a 32 	call	0x6454	; 0x6454 <strnlen>
    5448:	8c 01       	movw	r16, r24
    544a:	2a 89       	ldd	r18, Y+18	; 0x12
    544c:	2f 77       	andi	r18, 0x7F	; 127
    544e:	15 c0       	rjmp	.+42     	; 0x547a <vfprintf+0x47e>
    5450:	52 01       	movw	r10, r4
    5452:	f2 e0       	ldi	r31, 0x02	; 2
    5454:	af 0e       	add	r10, r31
    5456:	b1 1c       	adc	r11, r1
    5458:	f2 01       	movw	r30, r4
    545a:	40 80       	ld	r4, Z
    545c:	51 80       	ldd	r5, Z+1	; 0x01
    545e:	26 ff       	sbrs	r18, 6
    5460:	03 c0       	rjmp	.+6      	; 0x5468 <vfprintf+0x46c>
    5462:	61 2f       	mov	r22, r17
    5464:	70 e0       	ldi	r23, 0x00	; 0
    5466:	02 c0       	rjmp	.+4      	; 0x546c <vfprintf+0x470>
    5468:	6f ef       	ldi	r22, 0xFF	; 255
    546a:	7f ef       	ldi	r23, 0xFF	; 255
    546c:	c2 01       	movw	r24, r4
    546e:	2a 8b       	std	Y+18, r18	; 0x12
    5470:	0e 94 df 31 	call	0x63be	; 0x63be <strnlen_P>
    5474:	8c 01       	movw	r16, r24
    5476:	2a 89       	ldd	r18, Y+18	; 0x12
    5478:	20 68       	ori	r18, 0x80	; 128
    547a:	32 2e       	mov	r3, r18
    547c:	23 fd       	sbrc	r18, 3
    547e:	1a c0       	rjmp	.+52     	; 0x54b4 <vfprintf+0x4b8>
    5480:	8f 2d       	mov	r24, r15
    5482:	90 e0       	ldi	r25, 0x00	; 0
    5484:	08 17       	cp	r16, r24
    5486:	19 07       	cpc	r17, r25
    5488:	a8 f4       	brcc	.+42     	; 0x54b4 <vfprintf+0x4b8>
    548a:	b6 01       	movw	r22, r12
    548c:	80 e2       	ldi	r24, 0x20	; 32
    548e:	90 e0       	ldi	r25, 0x00	; 0
    5490:	0e 94 79 32 	call	0x64f2	; 0x64f2 <fputc>
    5494:	fa 94       	dec	r15
    5496:	f4 cf       	rjmp	.-24     	; 0x5480 <vfprintf+0x484>
    5498:	f2 01       	movw	r30, r4
    549a:	37 fc       	sbrc	r3, 7
    549c:	85 91       	lpm	r24, Z+
    549e:	37 fe       	sbrs	r3, 7
    54a0:	81 91       	ld	r24, Z+
    54a2:	2f 01       	movw	r4, r30
    54a4:	b6 01       	movw	r22, r12
    54a6:	90 e0       	ldi	r25, 0x00	; 0
    54a8:	0e 94 79 32 	call	0x64f2	; 0x64f2 <fputc>
    54ac:	f1 10       	cpse	r15, r1
    54ae:	fa 94       	dec	r15
    54b0:	01 50       	subi	r16, 0x01	; 1
    54b2:	11 09       	sbc	r17, r1
    54b4:	01 15       	cp	r16, r1
    54b6:	11 05       	cpc	r17, r1
    54b8:	79 f7       	brne	.-34     	; 0x5498 <vfprintf+0x49c>
    54ba:	f8 c0       	rjmp	.+496    	; 0x56ac <vfprintf+0x6b0>
    54bc:	84 36       	cpi	r24, 0x64	; 100
    54be:	11 f0       	breq	.+4      	; 0x54c4 <vfprintf+0x4c8>
    54c0:	89 36       	cpi	r24, 0x69	; 105
    54c2:	59 f5       	brne	.+86     	; 0x551a <vfprintf+0x51e>
    54c4:	52 01       	movw	r10, r4
    54c6:	27 ff       	sbrs	r18, 7
    54c8:	09 c0       	rjmp	.+18     	; 0x54dc <vfprintf+0x4e0>
    54ca:	f4 e0       	ldi	r31, 0x04	; 4
    54cc:	af 0e       	add	r10, r31
    54ce:	b1 1c       	adc	r11, r1
    54d0:	f2 01       	movw	r30, r4
    54d2:	60 81       	ld	r22, Z
    54d4:	71 81       	ldd	r23, Z+1	; 0x01
    54d6:	82 81       	ldd	r24, Z+2	; 0x02
    54d8:	93 81       	ldd	r25, Z+3	; 0x03
    54da:	0a c0       	rjmp	.+20     	; 0x54f0 <vfprintf+0x4f4>
    54dc:	f2 e0       	ldi	r31, 0x02	; 2
    54de:	af 0e       	add	r10, r31
    54e0:	b1 1c       	adc	r11, r1
    54e2:	f2 01       	movw	r30, r4
    54e4:	60 81       	ld	r22, Z
    54e6:	71 81       	ldd	r23, Z+1	; 0x01
    54e8:	07 2e       	mov	r0, r23
    54ea:	00 0c       	add	r0, r0
    54ec:	88 0b       	sbc	r24, r24
    54ee:	99 0b       	sbc	r25, r25
    54f0:	2f 76       	andi	r18, 0x6F	; 111
    54f2:	32 2e       	mov	r3, r18
    54f4:	97 ff       	sbrs	r25, 7
    54f6:	09 c0       	rjmp	.+18     	; 0x550a <vfprintf+0x50e>
    54f8:	90 95       	com	r25
    54fa:	80 95       	com	r24
    54fc:	70 95       	com	r23
    54fe:	61 95       	neg	r22
    5500:	7f 4f       	sbci	r23, 0xFF	; 255
    5502:	8f 4f       	sbci	r24, 0xFF	; 255
    5504:	9f 4f       	sbci	r25, 0xFF	; 255
    5506:	20 68       	ori	r18, 0x80	; 128
    5508:	32 2e       	mov	r3, r18
    550a:	2a e0       	ldi	r18, 0x0A	; 10
    550c:	30 e0       	ldi	r19, 0x00	; 0
    550e:	a3 01       	movw	r20, r6
    5510:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <__ultoa_invert>
    5514:	e8 2e       	mov	r14, r24
    5516:	e6 18       	sub	r14, r6
    5518:	3f c0       	rjmp	.+126    	; 0x5598 <vfprintf+0x59c>
    551a:	02 2f       	mov	r16, r18
    551c:	85 37       	cpi	r24, 0x75	; 117
    551e:	21 f4       	brne	.+8      	; 0x5528 <vfprintf+0x52c>
    5520:	0f 7e       	andi	r16, 0xEF	; 239
    5522:	2a e0       	ldi	r18, 0x0A	; 10
    5524:	30 e0       	ldi	r19, 0x00	; 0
    5526:	1d c0       	rjmp	.+58     	; 0x5562 <vfprintf+0x566>
    5528:	09 7f       	andi	r16, 0xF9	; 249
    552a:	8f 36       	cpi	r24, 0x6F	; 111
    552c:	91 f0       	breq	.+36     	; 0x5552 <vfprintf+0x556>
    552e:	18 f4       	brcc	.+6      	; 0x5536 <vfprintf+0x53a>
    5530:	88 35       	cpi	r24, 0x58	; 88
    5532:	59 f0       	breq	.+22     	; 0x554a <vfprintf+0x54e>
    5534:	c5 c0       	rjmp	.+394    	; 0x56c0 <vfprintf+0x6c4>
    5536:	80 37       	cpi	r24, 0x70	; 112
    5538:	19 f0       	breq	.+6      	; 0x5540 <vfprintf+0x544>
    553a:	88 37       	cpi	r24, 0x78	; 120
    553c:	11 f0       	breq	.+4      	; 0x5542 <vfprintf+0x546>
    553e:	c0 c0       	rjmp	.+384    	; 0x56c0 <vfprintf+0x6c4>
    5540:	00 61       	ori	r16, 0x10	; 16
    5542:	04 ff       	sbrs	r16, 4
    5544:	09 c0       	rjmp	.+18     	; 0x5558 <vfprintf+0x55c>
    5546:	04 60       	ori	r16, 0x04	; 4
    5548:	07 c0       	rjmp	.+14     	; 0x5558 <vfprintf+0x55c>
    554a:	24 ff       	sbrs	r18, 4
    554c:	08 c0       	rjmp	.+16     	; 0x555e <vfprintf+0x562>
    554e:	06 60       	ori	r16, 0x06	; 6
    5550:	06 c0       	rjmp	.+12     	; 0x555e <vfprintf+0x562>
    5552:	28 e0       	ldi	r18, 0x08	; 8
    5554:	30 e0       	ldi	r19, 0x00	; 0
    5556:	05 c0       	rjmp	.+10     	; 0x5562 <vfprintf+0x566>
    5558:	20 e1       	ldi	r18, 0x10	; 16
    555a:	30 e0       	ldi	r19, 0x00	; 0
    555c:	02 c0       	rjmp	.+4      	; 0x5562 <vfprintf+0x566>
    555e:	20 e1       	ldi	r18, 0x10	; 16
    5560:	32 e0       	ldi	r19, 0x02	; 2
    5562:	52 01       	movw	r10, r4
    5564:	07 ff       	sbrs	r16, 7
    5566:	09 c0       	rjmp	.+18     	; 0x557a <vfprintf+0x57e>
    5568:	f4 e0       	ldi	r31, 0x04	; 4
    556a:	af 0e       	add	r10, r31
    556c:	b1 1c       	adc	r11, r1
    556e:	f2 01       	movw	r30, r4
    5570:	60 81       	ld	r22, Z
    5572:	71 81       	ldd	r23, Z+1	; 0x01
    5574:	82 81       	ldd	r24, Z+2	; 0x02
    5576:	93 81       	ldd	r25, Z+3	; 0x03
    5578:	08 c0       	rjmp	.+16     	; 0x558a <vfprintf+0x58e>
    557a:	f2 e0       	ldi	r31, 0x02	; 2
    557c:	af 0e       	add	r10, r31
    557e:	b1 1c       	adc	r11, r1
    5580:	f2 01       	movw	r30, r4
    5582:	60 81       	ld	r22, Z
    5584:	71 81       	ldd	r23, Z+1	; 0x01
    5586:	80 e0       	ldi	r24, 0x00	; 0
    5588:	90 e0       	ldi	r25, 0x00	; 0
    558a:	a3 01       	movw	r20, r6
    558c:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <__ultoa_invert>
    5590:	e8 2e       	mov	r14, r24
    5592:	e6 18       	sub	r14, r6
    5594:	0f 77       	andi	r16, 0x7F	; 127
    5596:	30 2e       	mov	r3, r16
    5598:	36 fe       	sbrs	r3, 6
    559a:	0b c0       	rjmp	.+22     	; 0x55b2 <vfprintf+0x5b6>
    559c:	33 2d       	mov	r19, r3
    559e:	3e 7f       	andi	r19, 0xFE	; 254
    55a0:	e1 16       	cp	r14, r17
    55a2:	50 f4       	brcc	.+20     	; 0x55b8 <vfprintf+0x5bc>
    55a4:	34 fe       	sbrs	r3, 4
    55a6:	0a c0       	rjmp	.+20     	; 0x55bc <vfprintf+0x5c0>
    55a8:	32 fc       	sbrc	r3, 2
    55aa:	08 c0       	rjmp	.+16     	; 0x55bc <vfprintf+0x5c0>
    55ac:	33 2d       	mov	r19, r3
    55ae:	3e 7e       	andi	r19, 0xEE	; 238
    55b0:	05 c0       	rjmp	.+10     	; 0x55bc <vfprintf+0x5c0>
    55b2:	0e 2d       	mov	r16, r14
    55b4:	33 2d       	mov	r19, r3
    55b6:	03 c0       	rjmp	.+6      	; 0x55be <vfprintf+0x5c2>
    55b8:	0e 2d       	mov	r16, r14
    55ba:	01 c0       	rjmp	.+2      	; 0x55be <vfprintf+0x5c2>
    55bc:	01 2f       	mov	r16, r17
    55be:	34 ff       	sbrs	r19, 4
    55c0:	0c c0       	rjmp	.+24     	; 0x55da <vfprintf+0x5de>
    55c2:	fe 01       	movw	r30, r28
    55c4:	ee 0d       	add	r30, r14
    55c6:	f1 1d       	adc	r31, r1
    55c8:	80 81       	ld	r24, Z
    55ca:	80 33       	cpi	r24, 0x30	; 48
    55cc:	11 f4       	brne	.+4      	; 0x55d2 <vfprintf+0x5d6>
    55ce:	39 7e       	andi	r19, 0xE9	; 233
    55d0:	08 c0       	rjmp	.+16     	; 0x55e2 <vfprintf+0x5e6>
    55d2:	32 ff       	sbrs	r19, 2
    55d4:	05 c0       	rjmp	.+10     	; 0x55e0 <vfprintf+0x5e4>
    55d6:	0e 5f       	subi	r16, 0xFE	; 254
    55d8:	04 c0       	rjmp	.+8      	; 0x55e2 <vfprintf+0x5e6>
    55da:	83 2f       	mov	r24, r19
    55dc:	86 78       	andi	r24, 0x86	; 134
    55de:	09 f0       	breq	.+2      	; 0x55e2 <vfprintf+0x5e6>
    55e0:	0f 5f       	subi	r16, 0xFF	; 255
    55e2:	33 fd       	sbrc	r19, 3
    55e4:	13 c0       	rjmp	.+38     	; 0x560c <vfprintf+0x610>
    55e6:	30 ff       	sbrs	r19, 0
    55e8:	06 c0       	rjmp	.+12     	; 0x55f6 <vfprintf+0x5fa>
    55ea:	1e 2d       	mov	r17, r14
    55ec:	0f 15       	cp	r16, r15
    55ee:	18 f4       	brcc	.+6      	; 0x55f6 <vfprintf+0x5fa>
    55f0:	1f 0d       	add	r17, r15
    55f2:	10 1b       	sub	r17, r16
    55f4:	0f 2d       	mov	r16, r15
    55f6:	0f 15       	cp	r16, r15
    55f8:	68 f4       	brcc	.+26     	; 0x5614 <vfprintf+0x618>
    55fa:	b6 01       	movw	r22, r12
    55fc:	80 e2       	ldi	r24, 0x20	; 32
    55fe:	90 e0       	ldi	r25, 0x00	; 0
    5600:	3b 8b       	std	Y+19, r19	; 0x13
    5602:	0e 94 79 32 	call	0x64f2	; 0x64f2 <fputc>
    5606:	0f 5f       	subi	r16, 0xFF	; 255
    5608:	3b 89       	ldd	r19, Y+19	; 0x13
    560a:	f5 cf       	rjmp	.-22     	; 0x55f6 <vfprintf+0x5fa>
    560c:	0f 15       	cp	r16, r15
    560e:	10 f4       	brcc	.+4      	; 0x5614 <vfprintf+0x618>
    5610:	f0 1a       	sub	r15, r16
    5612:	01 c0       	rjmp	.+2      	; 0x5616 <vfprintf+0x61a>
    5614:	f1 2c       	mov	r15, r1
    5616:	34 ff       	sbrs	r19, 4
    5618:	12 c0       	rjmp	.+36     	; 0x563e <vfprintf+0x642>
    561a:	b6 01       	movw	r22, r12
    561c:	80 e3       	ldi	r24, 0x30	; 48
    561e:	90 e0       	ldi	r25, 0x00	; 0
    5620:	3b 8b       	std	Y+19, r19	; 0x13
    5622:	0e 94 79 32 	call	0x64f2	; 0x64f2 <fputc>
    5626:	3b 89       	ldd	r19, Y+19	; 0x13
    5628:	32 ff       	sbrs	r19, 2
    562a:	17 c0       	rjmp	.+46     	; 0x565a <vfprintf+0x65e>
    562c:	31 fd       	sbrc	r19, 1
    562e:	03 c0       	rjmp	.+6      	; 0x5636 <vfprintf+0x63a>
    5630:	88 e7       	ldi	r24, 0x78	; 120
    5632:	90 e0       	ldi	r25, 0x00	; 0
    5634:	02 c0       	rjmp	.+4      	; 0x563a <vfprintf+0x63e>
    5636:	88 e5       	ldi	r24, 0x58	; 88
    5638:	90 e0       	ldi	r25, 0x00	; 0
    563a:	b6 01       	movw	r22, r12
    563c:	0c c0       	rjmp	.+24     	; 0x5656 <vfprintf+0x65a>
    563e:	83 2f       	mov	r24, r19
    5640:	86 78       	andi	r24, 0x86	; 134
    5642:	59 f0       	breq	.+22     	; 0x565a <vfprintf+0x65e>
    5644:	31 ff       	sbrs	r19, 1
    5646:	02 c0       	rjmp	.+4      	; 0x564c <vfprintf+0x650>
    5648:	8b e2       	ldi	r24, 0x2B	; 43
    564a:	01 c0       	rjmp	.+2      	; 0x564e <vfprintf+0x652>
    564c:	80 e2       	ldi	r24, 0x20	; 32
    564e:	37 fd       	sbrc	r19, 7
    5650:	8d e2       	ldi	r24, 0x2D	; 45
    5652:	b6 01       	movw	r22, r12
    5654:	90 e0       	ldi	r25, 0x00	; 0
    5656:	0e 94 79 32 	call	0x64f2	; 0x64f2 <fputc>
    565a:	e1 16       	cp	r14, r17
    565c:	38 f4       	brcc	.+14     	; 0x566c <vfprintf+0x670>
    565e:	b6 01       	movw	r22, r12
    5660:	80 e3       	ldi	r24, 0x30	; 48
    5662:	90 e0       	ldi	r25, 0x00	; 0
    5664:	0e 94 79 32 	call	0x64f2	; 0x64f2 <fputc>
    5668:	11 50       	subi	r17, 0x01	; 1
    566a:	f7 cf       	rjmp	.-18     	; 0x565a <vfprintf+0x65e>
    566c:	ea 94       	dec	r14
    566e:	f3 01       	movw	r30, r6
    5670:	ee 0d       	add	r30, r14
    5672:	f1 1d       	adc	r31, r1
    5674:	80 81       	ld	r24, Z
    5676:	b6 01       	movw	r22, r12
    5678:	90 e0       	ldi	r25, 0x00	; 0
    567a:	0e 94 79 32 	call	0x64f2	; 0x64f2 <fputc>
    567e:	e1 10       	cpse	r14, r1
    5680:	f5 cf       	rjmp	.-22     	; 0x566c <vfprintf+0x670>
    5682:	14 c0       	rjmp	.+40     	; 0x56ac <vfprintf+0x6b0>
    5684:	f4 e0       	ldi	r31, 0x04	; 4
    5686:	ff 15       	cp	r31, r15
    5688:	58 f5       	brcc	.+86     	; 0x56e0 <vfprintf+0x6e4>
    568a:	84 e0       	ldi	r24, 0x04	; 4
    568c:	f8 1a       	sub	r15, r24
    568e:	33 fe       	sbrs	r3, 3
    5690:	1e c0       	rjmp	.+60     	; 0x56ce <vfprintf+0x6d2>
    5692:	21 10       	cpse	r2, r1
    5694:	26 c0       	rjmp	.+76     	; 0x56e2 <vfprintf+0x6e6>
    5696:	03 ff       	sbrs	r16, 3
    5698:	2a c0       	rjmp	.+84     	; 0x56ee <vfprintf+0x6f2>
    569a:	0a eb       	ldi	r16, 0xBA	; 186
    569c:	11 e0       	ldi	r17, 0x01	; 1
    569e:	f3 2d       	mov	r31, r3
    56a0:	f0 71       	andi	r31, 0x10	; 16
    56a2:	3f 2e       	mov	r3, r31
    56a4:	f8 01       	movw	r30, r16
    56a6:	84 91       	lpm	r24, Z
    56a8:	81 11       	cpse	r24, r1
    56aa:	24 c0       	rjmp	.+72     	; 0x56f4 <vfprintf+0x6f8>
    56ac:	ff 20       	and	r15, r15
    56ae:	09 f4       	brne	.+2      	; 0x56b2 <vfprintf+0x6b6>
    56b0:	e5 cc       	rjmp	.-1590   	; 0x507c <vfprintf+0x80>
    56b2:	b6 01       	movw	r22, r12
    56b4:	80 e2       	ldi	r24, 0x20	; 32
    56b6:	90 e0       	ldi	r25, 0x00	; 0
    56b8:	0e 94 79 32 	call	0x64f2	; 0x64f2 <fputc>
    56bc:	fa 94       	dec	r15
    56be:	f6 cf       	rjmp	.-20     	; 0x56ac <vfprintf+0x6b0>
    56c0:	f6 01       	movw	r30, r12
    56c2:	86 81       	ldd	r24, Z+6	; 0x06
    56c4:	97 81       	ldd	r25, Z+7	; 0x07
    56c6:	26 c0       	rjmp	.+76     	; 0x5714 <vfprintf+0x718>
    56c8:	8f ef       	ldi	r24, 0xFF	; 255
    56ca:	9f ef       	ldi	r25, 0xFF	; 255
    56cc:	23 c0       	rjmp	.+70     	; 0x5714 <vfprintf+0x718>
    56ce:	b6 01       	movw	r22, r12
    56d0:	80 e2       	ldi	r24, 0x20	; 32
    56d2:	90 e0       	ldi	r25, 0x00	; 0
    56d4:	0e 94 79 32 	call	0x64f2	; 0x64f2 <fputc>
    56d8:	fa 94       	dec	r15
    56da:	f1 10       	cpse	r15, r1
    56dc:	f8 cf       	rjmp	.-16     	; 0x56ce <vfprintf+0x6d2>
    56de:	d9 cf       	rjmp	.-78     	; 0x5692 <vfprintf+0x696>
    56e0:	f1 2c       	mov	r15, r1
    56e2:	b6 01       	movw	r22, r12
    56e4:	82 2d       	mov	r24, r2
    56e6:	90 e0       	ldi	r25, 0x00	; 0
    56e8:	0e 94 79 32 	call	0x64f2	; 0x64f2 <fputc>
    56ec:	d4 cf       	rjmp	.-88     	; 0x5696 <vfprintf+0x69a>
    56ee:	0e eb       	ldi	r16, 0xBE	; 190
    56f0:	11 e0       	ldi	r17, 0x01	; 1
    56f2:	d5 cf       	rjmp	.-86     	; 0x569e <vfprintf+0x6a2>
    56f4:	31 10       	cpse	r3, r1
    56f6:	80 52       	subi	r24, 0x20	; 32
    56f8:	b6 01       	movw	r22, r12
    56fa:	90 e0       	ldi	r25, 0x00	; 0
    56fc:	0e 94 79 32 	call	0x64f2	; 0x64f2 <fputc>
    5700:	0f 5f       	subi	r16, 0xFF	; 255
    5702:	1f 4f       	sbci	r17, 0xFF	; 255
    5704:	cf cf       	rjmp	.-98     	; 0x56a4 <vfprintf+0x6a8>
    5706:	23 e0       	ldi	r18, 0x03	; 3
    5708:	2f 15       	cp	r18, r15
    570a:	10 f4       	brcc	.+4      	; 0x5710 <vfprintf+0x714>
    570c:	83 e0       	ldi	r24, 0x03	; 3
    570e:	be cf       	rjmp	.-132    	; 0x568c <vfprintf+0x690>
    5710:	f1 2c       	mov	r15, r1
    5712:	c1 cf       	rjmp	.-126    	; 0x5696 <vfprintf+0x69a>
    5714:	63 96       	adiw	r28, 0x13	; 19
    5716:	0f b6       	in	r0, 0x3f	; 63
    5718:	f8 94       	cli
    571a:	de bf       	out	0x3e, r29	; 62
    571c:	0f be       	out	0x3f, r0	; 63
    571e:	cd bf       	out	0x3d, r28	; 61
    5720:	df 91       	pop	r29
    5722:	cf 91       	pop	r28
    5724:	1f 91       	pop	r17
    5726:	0f 91       	pop	r16
    5728:	ff 90       	pop	r15
    572a:	ef 90       	pop	r14
    572c:	df 90       	pop	r13
    572e:	cf 90       	pop	r12
    5730:	bf 90       	pop	r11
    5732:	af 90       	pop	r10
    5734:	9f 90       	pop	r9
    5736:	8f 90       	pop	r8
    5738:	7f 90       	pop	r7
    573a:	6f 90       	pop	r6
    573c:	5f 90       	pop	r5
    573e:	4f 90       	pop	r4
    5740:	3f 90       	pop	r3
    5742:	2f 90       	pop	r2
    5744:	08 95       	ret

00005746 <__subsf3>:
    5746:	50 58       	subi	r21, 0x80	; 128

00005748 <__addsf3>:
    5748:	bb 27       	eor	r27, r27
    574a:	aa 27       	eor	r26, r26
    574c:	0e 94 bb 2b 	call	0x5776	; 0x5776 <__addsf3x>
    5750:	0c 94 05 2d 	jmp	0x5a0a	; 0x5a0a <__fp_round>
    5754:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <__fp_pscA>
    5758:	38 f0       	brcs	.+14     	; 0x5768 <__addsf3+0x20>
    575a:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <__fp_pscB>
    575e:	20 f0       	brcs	.+8      	; 0x5768 <__addsf3+0x20>
    5760:	39 f4       	brne	.+14     	; 0x5770 <__addsf3+0x28>
    5762:	9f 3f       	cpi	r25, 0xFF	; 255
    5764:	19 f4       	brne	.+6      	; 0x576c <__addsf3+0x24>
    5766:	26 f4       	brtc	.+8      	; 0x5770 <__addsf3+0x28>
    5768:	0c 94 f4 2c 	jmp	0x59e8	; 0x59e8 <__fp_nan>
    576c:	0e f4       	brtc	.+2      	; 0x5770 <__addsf3+0x28>
    576e:	e0 95       	com	r30
    5770:	e7 fb       	bst	r30, 7
    5772:	0c 94 ee 2c 	jmp	0x59dc	; 0x59dc <__fp_inf>

00005776 <__addsf3x>:
    5776:	e9 2f       	mov	r30, r25
    5778:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <__fp_split3>
    577c:	58 f3       	brcs	.-42     	; 0x5754 <__addsf3+0xc>
    577e:	ba 17       	cp	r27, r26
    5780:	62 07       	cpc	r22, r18
    5782:	73 07       	cpc	r23, r19
    5784:	84 07       	cpc	r24, r20
    5786:	95 07       	cpc	r25, r21
    5788:	20 f0       	brcs	.+8      	; 0x5792 <__addsf3x+0x1c>
    578a:	79 f4       	brne	.+30     	; 0x57aa <__addsf3x+0x34>
    578c:	a6 f5       	brtc	.+104    	; 0x57f6 <__addsf3x+0x80>
    578e:	0c 94 38 2d 	jmp	0x5a70	; 0x5a70 <__fp_zero>
    5792:	0e f4       	brtc	.+2      	; 0x5796 <__addsf3x+0x20>
    5794:	e0 95       	com	r30
    5796:	0b 2e       	mov	r0, r27
    5798:	ba 2f       	mov	r27, r26
    579a:	a0 2d       	mov	r26, r0
    579c:	0b 01       	movw	r0, r22
    579e:	b9 01       	movw	r22, r18
    57a0:	90 01       	movw	r18, r0
    57a2:	0c 01       	movw	r0, r24
    57a4:	ca 01       	movw	r24, r20
    57a6:	a0 01       	movw	r20, r0
    57a8:	11 24       	eor	r1, r1
    57aa:	ff 27       	eor	r31, r31
    57ac:	59 1b       	sub	r21, r25
    57ae:	99 f0       	breq	.+38     	; 0x57d6 <__addsf3x+0x60>
    57b0:	59 3f       	cpi	r21, 0xF9	; 249
    57b2:	50 f4       	brcc	.+20     	; 0x57c8 <__addsf3x+0x52>
    57b4:	50 3e       	cpi	r21, 0xE0	; 224
    57b6:	68 f1       	brcs	.+90     	; 0x5812 <__addsf3x+0x9c>
    57b8:	1a 16       	cp	r1, r26
    57ba:	f0 40       	sbci	r31, 0x00	; 0
    57bc:	a2 2f       	mov	r26, r18
    57be:	23 2f       	mov	r18, r19
    57c0:	34 2f       	mov	r19, r20
    57c2:	44 27       	eor	r20, r20
    57c4:	58 5f       	subi	r21, 0xF8	; 248
    57c6:	f3 cf       	rjmp	.-26     	; 0x57ae <__addsf3x+0x38>
    57c8:	46 95       	lsr	r20
    57ca:	37 95       	ror	r19
    57cc:	27 95       	ror	r18
    57ce:	a7 95       	ror	r26
    57d0:	f0 40       	sbci	r31, 0x00	; 0
    57d2:	53 95       	inc	r21
    57d4:	c9 f7       	brne	.-14     	; 0x57c8 <__addsf3x+0x52>
    57d6:	7e f4       	brtc	.+30     	; 0x57f6 <__addsf3x+0x80>
    57d8:	1f 16       	cp	r1, r31
    57da:	ba 0b       	sbc	r27, r26
    57dc:	62 0b       	sbc	r22, r18
    57de:	73 0b       	sbc	r23, r19
    57e0:	84 0b       	sbc	r24, r20
    57e2:	ba f0       	brmi	.+46     	; 0x5812 <__addsf3x+0x9c>
    57e4:	91 50       	subi	r25, 0x01	; 1
    57e6:	a1 f0       	breq	.+40     	; 0x5810 <__addsf3x+0x9a>
    57e8:	ff 0f       	add	r31, r31
    57ea:	bb 1f       	adc	r27, r27
    57ec:	66 1f       	adc	r22, r22
    57ee:	77 1f       	adc	r23, r23
    57f0:	88 1f       	adc	r24, r24
    57f2:	c2 f7       	brpl	.-16     	; 0x57e4 <__addsf3x+0x6e>
    57f4:	0e c0       	rjmp	.+28     	; 0x5812 <__addsf3x+0x9c>
    57f6:	ba 0f       	add	r27, r26
    57f8:	62 1f       	adc	r22, r18
    57fa:	73 1f       	adc	r23, r19
    57fc:	84 1f       	adc	r24, r20
    57fe:	48 f4       	brcc	.+18     	; 0x5812 <__addsf3x+0x9c>
    5800:	87 95       	ror	r24
    5802:	77 95       	ror	r23
    5804:	67 95       	ror	r22
    5806:	b7 95       	ror	r27
    5808:	f7 95       	ror	r31
    580a:	9e 3f       	cpi	r25, 0xFE	; 254
    580c:	08 f0       	brcs	.+2      	; 0x5810 <__addsf3x+0x9a>
    580e:	b0 cf       	rjmp	.-160    	; 0x5770 <__addsf3+0x28>
    5810:	93 95       	inc	r25
    5812:	88 0f       	add	r24, r24
    5814:	08 f0       	brcs	.+2      	; 0x5818 <__addsf3x+0xa2>
    5816:	99 27       	eor	r25, r25
    5818:	ee 0f       	add	r30, r30
    581a:	97 95       	ror	r25
    581c:	87 95       	ror	r24
    581e:	08 95       	ret

00005820 <__divsf3>:
    5820:	0e 94 24 2c 	call	0x5848	; 0x5848 <__divsf3x>
    5824:	0c 94 05 2d 	jmp	0x5a0a	; 0x5a0a <__fp_round>
    5828:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <__fp_pscB>
    582c:	58 f0       	brcs	.+22     	; 0x5844 <__divsf3+0x24>
    582e:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <__fp_pscA>
    5832:	40 f0       	brcs	.+16     	; 0x5844 <__divsf3+0x24>
    5834:	29 f4       	brne	.+10     	; 0x5840 <__divsf3+0x20>
    5836:	5f 3f       	cpi	r21, 0xFF	; 255
    5838:	29 f0       	breq	.+10     	; 0x5844 <__divsf3+0x24>
    583a:	0c 94 ee 2c 	jmp	0x59dc	; 0x59dc <__fp_inf>
    583e:	51 11       	cpse	r21, r1
    5840:	0c 94 39 2d 	jmp	0x5a72	; 0x5a72 <__fp_szero>
    5844:	0c 94 f4 2c 	jmp	0x59e8	; 0x59e8 <__fp_nan>

00005848 <__divsf3x>:
    5848:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <__fp_split3>
    584c:	68 f3       	brcs	.-38     	; 0x5828 <__divsf3+0x8>

0000584e <__divsf3_pse>:
    584e:	99 23       	and	r25, r25
    5850:	b1 f3       	breq	.-20     	; 0x583e <__divsf3+0x1e>
    5852:	55 23       	and	r21, r21
    5854:	91 f3       	breq	.-28     	; 0x583a <__divsf3+0x1a>
    5856:	95 1b       	sub	r25, r21
    5858:	55 0b       	sbc	r21, r21
    585a:	bb 27       	eor	r27, r27
    585c:	aa 27       	eor	r26, r26
    585e:	62 17       	cp	r22, r18
    5860:	73 07       	cpc	r23, r19
    5862:	84 07       	cpc	r24, r20
    5864:	38 f0       	brcs	.+14     	; 0x5874 <__divsf3_pse+0x26>
    5866:	9f 5f       	subi	r25, 0xFF	; 255
    5868:	5f 4f       	sbci	r21, 0xFF	; 255
    586a:	22 0f       	add	r18, r18
    586c:	33 1f       	adc	r19, r19
    586e:	44 1f       	adc	r20, r20
    5870:	aa 1f       	adc	r26, r26
    5872:	a9 f3       	breq	.-22     	; 0x585e <__divsf3_pse+0x10>
    5874:	35 d0       	rcall	.+106    	; 0x58e0 <__divsf3_pse+0x92>
    5876:	0e 2e       	mov	r0, r30
    5878:	3a f0       	brmi	.+14     	; 0x5888 <__divsf3_pse+0x3a>
    587a:	e0 e8       	ldi	r30, 0x80	; 128
    587c:	32 d0       	rcall	.+100    	; 0x58e2 <__divsf3_pse+0x94>
    587e:	91 50       	subi	r25, 0x01	; 1
    5880:	50 40       	sbci	r21, 0x00	; 0
    5882:	e6 95       	lsr	r30
    5884:	00 1c       	adc	r0, r0
    5886:	ca f7       	brpl	.-14     	; 0x587a <__divsf3_pse+0x2c>
    5888:	2b d0       	rcall	.+86     	; 0x58e0 <__divsf3_pse+0x92>
    588a:	fe 2f       	mov	r31, r30
    588c:	29 d0       	rcall	.+82     	; 0x58e0 <__divsf3_pse+0x92>
    588e:	66 0f       	add	r22, r22
    5890:	77 1f       	adc	r23, r23
    5892:	88 1f       	adc	r24, r24
    5894:	bb 1f       	adc	r27, r27
    5896:	26 17       	cp	r18, r22
    5898:	37 07       	cpc	r19, r23
    589a:	48 07       	cpc	r20, r24
    589c:	ab 07       	cpc	r26, r27
    589e:	b0 e8       	ldi	r27, 0x80	; 128
    58a0:	09 f0       	breq	.+2      	; 0x58a4 <__divsf3_pse+0x56>
    58a2:	bb 0b       	sbc	r27, r27
    58a4:	80 2d       	mov	r24, r0
    58a6:	bf 01       	movw	r22, r30
    58a8:	ff 27       	eor	r31, r31
    58aa:	93 58       	subi	r25, 0x83	; 131
    58ac:	5f 4f       	sbci	r21, 0xFF	; 255
    58ae:	3a f0       	brmi	.+14     	; 0x58be <__divsf3_pse+0x70>
    58b0:	9e 3f       	cpi	r25, 0xFE	; 254
    58b2:	51 05       	cpc	r21, r1
    58b4:	78 f0       	brcs	.+30     	; 0x58d4 <__divsf3_pse+0x86>
    58b6:	0c 94 ee 2c 	jmp	0x59dc	; 0x59dc <__fp_inf>
    58ba:	0c 94 39 2d 	jmp	0x5a72	; 0x5a72 <__fp_szero>
    58be:	5f 3f       	cpi	r21, 0xFF	; 255
    58c0:	e4 f3       	brlt	.-8      	; 0x58ba <__divsf3_pse+0x6c>
    58c2:	98 3e       	cpi	r25, 0xE8	; 232
    58c4:	d4 f3       	brlt	.-12     	; 0x58ba <__divsf3_pse+0x6c>
    58c6:	86 95       	lsr	r24
    58c8:	77 95       	ror	r23
    58ca:	67 95       	ror	r22
    58cc:	b7 95       	ror	r27
    58ce:	f7 95       	ror	r31
    58d0:	9f 5f       	subi	r25, 0xFF	; 255
    58d2:	c9 f7       	brne	.-14     	; 0x58c6 <__divsf3_pse+0x78>
    58d4:	88 0f       	add	r24, r24
    58d6:	91 1d       	adc	r25, r1
    58d8:	96 95       	lsr	r25
    58da:	87 95       	ror	r24
    58dc:	97 f9       	bld	r25, 7
    58de:	08 95       	ret
    58e0:	e1 e0       	ldi	r30, 0x01	; 1
    58e2:	66 0f       	add	r22, r22
    58e4:	77 1f       	adc	r23, r23
    58e6:	88 1f       	adc	r24, r24
    58e8:	bb 1f       	adc	r27, r27
    58ea:	62 17       	cp	r22, r18
    58ec:	73 07       	cpc	r23, r19
    58ee:	84 07       	cpc	r24, r20
    58f0:	ba 07       	cpc	r27, r26
    58f2:	20 f0       	brcs	.+8      	; 0x58fc <__divsf3_pse+0xae>
    58f4:	62 1b       	sub	r22, r18
    58f6:	73 0b       	sbc	r23, r19
    58f8:	84 0b       	sbc	r24, r20
    58fa:	ba 0b       	sbc	r27, r26
    58fc:	ee 1f       	adc	r30, r30
    58fe:	88 f7       	brcc	.-30     	; 0x58e2 <__divsf3_pse+0x94>
    5900:	e0 95       	com	r30
    5902:	08 95       	ret

00005904 <__fixunssfsi>:
    5904:	0e 94 1e 2d 	call	0x5a3c	; 0x5a3c <__fp_splitA>
    5908:	88 f0       	brcs	.+34     	; 0x592c <__fixunssfsi+0x28>
    590a:	9f 57       	subi	r25, 0x7F	; 127
    590c:	98 f0       	brcs	.+38     	; 0x5934 <__fixunssfsi+0x30>
    590e:	b9 2f       	mov	r27, r25
    5910:	99 27       	eor	r25, r25
    5912:	b7 51       	subi	r27, 0x17	; 23
    5914:	b0 f0       	brcs	.+44     	; 0x5942 <__fixunssfsi+0x3e>
    5916:	e1 f0       	breq	.+56     	; 0x5950 <__fixunssfsi+0x4c>
    5918:	66 0f       	add	r22, r22
    591a:	77 1f       	adc	r23, r23
    591c:	88 1f       	adc	r24, r24
    591e:	99 1f       	adc	r25, r25
    5920:	1a f0       	brmi	.+6      	; 0x5928 <__fixunssfsi+0x24>
    5922:	ba 95       	dec	r27
    5924:	c9 f7       	brne	.-14     	; 0x5918 <__fixunssfsi+0x14>
    5926:	14 c0       	rjmp	.+40     	; 0x5950 <__fixunssfsi+0x4c>
    5928:	b1 30       	cpi	r27, 0x01	; 1
    592a:	91 f0       	breq	.+36     	; 0x5950 <__fixunssfsi+0x4c>
    592c:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <__fp_zero>
    5930:	b1 e0       	ldi	r27, 0x01	; 1
    5932:	08 95       	ret
    5934:	0c 94 38 2d 	jmp	0x5a70	; 0x5a70 <__fp_zero>
    5938:	67 2f       	mov	r22, r23
    593a:	78 2f       	mov	r23, r24
    593c:	88 27       	eor	r24, r24
    593e:	b8 5f       	subi	r27, 0xF8	; 248
    5940:	39 f0       	breq	.+14     	; 0x5950 <__fixunssfsi+0x4c>
    5942:	b9 3f       	cpi	r27, 0xF9	; 249
    5944:	cc f3       	brlt	.-14     	; 0x5938 <__fixunssfsi+0x34>
    5946:	86 95       	lsr	r24
    5948:	77 95       	ror	r23
    594a:	67 95       	ror	r22
    594c:	b3 95       	inc	r27
    594e:	d9 f7       	brne	.-10     	; 0x5946 <__fixunssfsi+0x42>
    5950:	3e f4       	brtc	.+14     	; 0x5960 <__fixunssfsi+0x5c>
    5952:	90 95       	com	r25
    5954:	80 95       	com	r24
    5956:	70 95       	com	r23
    5958:	61 95       	neg	r22
    595a:	7f 4f       	sbci	r23, 0xFF	; 255
    595c:	8f 4f       	sbci	r24, 0xFF	; 255
    595e:	9f 4f       	sbci	r25, 0xFF	; 255
    5960:	08 95       	ret

00005962 <__floatunsisf>:
    5962:	e8 94       	clt
    5964:	09 c0       	rjmp	.+18     	; 0x5978 <__floatsisf+0x12>

00005966 <__floatsisf>:
    5966:	97 fb       	bst	r25, 7
    5968:	3e f4       	brtc	.+14     	; 0x5978 <__floatsisf+0x12>
    596a:	90 95       	com	r25
    596c:	80 95       	com	r24
    596e:	70 95       	com	r23
    5970:	61 95       	neg	r22
    5972:	7f 4f       	sbci	r23, 0xFF	; 255
    5974:	8f 4f       	sbci	r24, 0xFF	; 255
    5976:	9f 4f       	sbci	r25, 0xFF	; 255
    5978:	99 23       	and	r25, r25
    597a:	a9 f0       	breq	.+42     	; 0x59a6 <__floatsisf+0x40>
    597c:	f9 2f       	mov	r31, r25
    597e:	96 e9       	ldi	r25, 0x96	; 150
    5980:	bb 27       	eor	r27, r27
    5982:	93 95       	inc	r25
    5984:	f6 95       	lsr	r31
    5986:	87 95       	ror	r24
    5988:	77 95       	ror	r23
    598a:	67 95       	ror	r22
    598c:	b7 95       	ror	r27
    598e:	f1 11       	cpse	r31, r1
    5990:	f8 cf       	rjmp	.-16     	; 0x5982 <__floatsisf+0x1c>
    5992:	fa f4       	brpl	.+62     	; 0x59d2 <__floatsisf+0x6c>
    5994:	bb 0f       	add	r27, r27
    5996:	11 f4       	brne	.+4      	; 0x599c <__floatsisf+0x36>
    5998:	60 ff       	sbrs	r22, 0
    599a:	1b c0       	rjmp	.+54     	; 0x59d2 <__floatsisf+0x6c>
    599c:	6f 5f       	subi	r22, 0xFF	; 255
    599e:	7f 4f       	sbci	r23, 0xFF	; 255
    59a0:	8f 4f       	sbci	r24, 0xFF	; 255
    59a2:	9f 4f       	sbci	r25, 0xFF	; 255
    59a4:	16 c0       	rjmp	.+44     	; 0x59d2 <__floatsisf+0x6c>
    59a6:	88 23       	and	r24, r24
    59a8:	11 f0       	breq	.+4      	; 0x59ae <__floatsisf+0x48>
    59aa:	96 e9       	ldi	r25, 0x96	; 150
    59ac:	11 c0       	rjmp	.+34     	; 0x59d0 <__floatsisf+0x6a>
    59ae:	77 23       	and	r23, r23
    59b0:	21 f0       	breq	.+8      	; 0x59ba <__floatsisf+0x54>
    59b2:	9e e8       	ldi	r25, 0x8E	; 142
    59b4:	87 2f       	mov	r24, r23
    59b6:	76 2f       	mov	r23, r22
    59b8:	05 c0       	rjmp	.+10     	; 0x59c4 <__floatsisf+0x5e>
    59ba:	66 23       	and	r22, r22
    59bc:	71 f0       	breq	.+28     	; 0x59da <__floatsisf+0x74>
    59be:	96 e8       	ldi	r25, 0x86	; 134
    59c0:	86 2f       	mov	r24, r22
    59c2:	70 e0       	ldi	r23, 0x00	; 0
    59c4:	60 e0       	ldi	r22, 0x00	; 0
    59c6:	2a f0       	brmi	.+10     	; 0x59d2 <__floatsisf+0x6c>
    59c8:	9a 95       	dec	r25
    59ca:	66 0f       	add	r22, r22
    59cc:	77 1f       	adc	r23, r23
    59ce:	88 1f       	adc	r24, r24
    59d0:	da f7       	brpl	.-10     	; 0x59c8 <__floatsisf+0x62>
    59d2:	88 0f       	add	r24, r24
    59d4:	96 95       	lsr	r25
    59d6:	87 95       	ror	r24
    59d8:	97 f9       	bld	r25, 7
    59da:	08 95       	ret

000059dc <__fp_inf>:
    59dc:	97 f9       	bld	r25, 7
    59de:	9f 67       	ori	r25, 0x7F	; 127
    59e0:	80 e8       	ldi	r24, 0x80	; 128
    59e2:	70 e0       	ldi	r23, 0x00	; 0
    59e4:	60 e0       	ldi	r22, 0x00	; 0
    59e6:	08 95       	ret

000059e8 <__fp_nan>:
    59e8:	9f ef       	ldi	r25, 0xFF	; 255
    59ea:	80 ec       	ldi	r24, 0xC0	; 192
    59ec:	08 95       	ret

000059ee <__fp_pscA>:
    59ee:	00 24       	eor	r0, r0
    59f0:	0a 94       	dec	r0
    59f2:	16 16       	cp	r1, r22
    59f4:	17 06       	cpc	r1, r23
    59f6:	18 06       	cpc	r1, r24
    59f8:	09 06       	cpc	r0, r25
    59fa:	08 95       	ret

000059fc <__fp_pscB>:
    59fc:	00 24       	eor	r0, r0
    59fe:	0a 94       	dec	r0
    5a00:	12 16       	cp	r1, r18
    5a02:	13 06       	cpc	r1, r19
    5a04:	14 06       	cpc	r1, r20
    5a06:	05 06       	cpc	r0, r21
    5a08:	08 95       	ret

00005a0a <__fp_round>:
    5a0a:	09 2e       	mov	r0, r25
    5a0c:	03 94       	inc	r0
    5a0e:	00 0c       	add	r0, r0
    5a10:	11 f4       	brne	.+4      	; 0x5a16 <__fp_round+0xc>
    5a12:	88 23       	and	r24, r24
    5a14:	52 f0       	brmi	.+20     	; 0x5a2a <__fp_round+0x20>
    5a16:	bb 0f       	add	r27, r27
    5a18:	40 f4       	brcc	.+16     	; 0x5a2a <__fp_round+0x20>
    5a1a:	bf 2b       	or	r27, r31
    5a1c:	11 f4       	brne	.+4      	; 0x5a22 <__fp_round+0x18>
    5a1e:	60 ff       	sbrs	r22, 0
    5a20:	04 c0       	rjmp	.+8      	; 0x5a2a <__fp_round+0x20>
    5a22:	6f 5f       	subi	r22, 0xFF	; 255
    5a24:	7f 4f       	sbci	r23, 0xFF	; 255
    5a26:	8f 4f       	sbci	r24, 0xFF	; 255
    5a28:	9f 4f       	sbci	r25, 0xFF	; 255
    5a2a:	08 95       	ret

00005a2c <__fp_split3>:
    5a2c:	57 fd       	sbrc	r21, 7
    5a2e:	90 58       	subi	r25, 0x80	; 128
    5a30:	44 0f       	add	r20, r20
    5a32:	55 1f       	adc	r21, r21
    5a34:	59 f0       	breq	.+22     	; 0x5a4c <__fp_splitA+0x10>
    5a36:	5f 3f       	cpi	r21, 0xFF	; 255
    5a38:	71 f0       	breq	.+28     	; 0x5a56 <__fp_splitA+0x1a>
    5a3a:	47 95       	ror	r20

00005a3c <__fp_splitA>:
    5a3c:	88 0f       	add	r24, r24
    5a3e:	97 fb       	bst	r25, 7
    5a40:	99 1f       	adc	r25, r25
    5a42:	61 f0       	breq	.+24     	; 0x5a5c <__fp_splitA+0x20>
    5a44:	9f 3f       	cpi	r25, 0xFF	; 255
    5a46:	79 f0       	breq	.+30     	; 0x5a66 <__fp_splitA+0x2a>
    5a48:	87 95       	ror	r24
    5a4a:	08 95       	ret
    5a4c:	12 16       	cp	r1, r18
    5a4e:	13 06       	cpc	r1, r19
    5a50:	14 06       	cpc	r1, r20
    5a52:	55 1f       	adc	r21, r21
    5a54:	f2 cf       	rjmp	.-28     	; 0x5a3a <__fp_split3+0xe>
    5a56:	46 95       	lsr	r20
    5a58:	f1 df       	rcall	.-30     	; 0x5a3c <__fp_splitA>
    5a5a:	08 c0       	rjmp	.+16     	; 0x5a6c <__fp_splitA+0x30>
    5a5c:	16 16       	cp	r1, r22
    5a5e:	17 06       	cpc	r1, r23
    5a60:	18 06       	cpc	r1, r24
    5a62:	99 1f       	adc	r25, r25
    5a64:	f1 cf       	rjmp	.-30     	; 0x5a48 <__fp_splitA+0xc>
    5a66:	86 95       	lsr	r24
    5a68:	71 05       	cpc	r23, r1
    5a6a:	61 05       	cpc	r22, r1
    5a6c:	08 94       	sec
    5a6e:	08 95       	ret

00005a70 <__fp_zero>:
    5a70:	e8 94       	clt

00005a72 <__fp_szero>:
    5a72:	bb 27       	eor	r27, r27
    5a74:	66 27       	eor	r22, r22
    5a76:	77 27       	eor	r23, r23
    5a78:	cb 01       	movw	r24, r22
    5a7a:	97 f9       	bld	r25, 7
    5a7c:	08 95       	ret

00005a7e <__mulsf3>:
    5a7e:	0e 94 52 2d 	call	0x5aa4	; 0x5aa4 <__mulsf3x>
    5a82:	0c 94 05 2d 	jmp	0x5a0a	; 0x5a0a <__fp_round>
    5a86:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <__fp_pscA>
    5a8a:	38 f0       	brcs	.+14     	; 0x5a9a <__mulsf3+0x1c>
    5a8c:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <__fp_pscB>
    5a90:	20 f0       	brcs	.+8      	; 0x5a9a <__mulsf3+0x1c>
    5a92:	95 23       	and	r25, r21
    5a94:	11 f0       	breq	.+4      	; 0x5a9a <__mulsf3+0x1c>
    5a96:	0c 94 ee 2c 	jmp	0x59dc	; 0x59dc <__fp_inf>
    5a9a:	0c 94 f4 2c 	jmp	0x59e8	; 0x59e8 <__fp_nan>
    5a9e:	11 24       	eor	r1, r1
    5aa0:	0c 94 39 2d 	jmp	0x5a72	; 0x5a72 <__fp_szero>

00005aa4 <__mulsf3x>:
    5aa4:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <__fp_split3>
    5aa8:	70 f3       	brcs	.-36     	; 0x5a86 <__mulsf3+0x8>

00005aaa <__mulsf3_pse>:
    5aaa:	95 9f       	mul	r25, r21
    5aac:	c1 f3       	breq	.-16     	; 0x5a9e <__mulsf3+0x20>
    5aae:	95 0f       	add	r25, r21
    5ab0:	50 e0       	ldi	r21, 0x00	; 0
    5ab2:	55 1f       	adc	r21, r21
    5ab4:	62 9f       	mul	r22, r18
    5ab6:	f0 01       	movw	r30, r0
    5ab8:	72 9f       	mul	r23, r18
    5aba:	bb 27       	eor	r27, r27
    5abc:	f0 0d       	add	r31, r0
    5abe:	b1 1d       	adc	r27, r1
    5ac0:	63 9f       	mul	r22, r19
    5ac2:	aa 27       	eor	r26, r26
    5ac4:	f0 0d       	add	r31, r0
    5ac6:	b1 1d       	adc	r27, r1
    5ac8:	aa 1f       	adc	r26, r26
    5aca:	64 9f       	mul	r22, r20
    5acc:	66 27       	eor	r22, r22
    5ace:	b0 0d       	add	r27, r0
    5ad0:	a1 1d       	adc	r26, r1
    5ad2:	66 1f       	adc	r22, r22
    5ad4:	82 9f       	mul	r24, r18
    5ad6:	22 27       	eor	r18, r18
    5ad8:	b0 0d       	add	r27, r0
    5ada:	a1 1d       	adc	r26, r1
    5adc:	62 1f       	adc	r22, r18
    5ade:	73 9f       	mul	r23, r19
    5ae0:	b0 0d       	add	r27, r0
    5ae2:	a1 1d       	adc	r26, r1
    5ae4:	62 1f       	adc	r22, r18
    5ae6:	83 9f       	mul	r24, r19
    5ae8:	a0 0d       	add	r26, r0
    5aea:	61 1d       	adc	r22, r1
    5aec:	22 1f       	adc	r18, r18
    5aee:	74 9f       	mul	r23, r20
    5af0:	33 27       	eor	r19, r19
    5af2:	a0 0d       	add	r26, r0
    5af4:	61 1d       	adc	r22, r1
    5af6:	23 1f       	adc	r18, r19
    5af8:	84 9f       	mul	r24, r20
    5afa:	60 0d       	add	r22, r0
    5afc:	21 1d       	adc	r18, r1
    5afe:	82 2f       	mov	r24, r18
    5b00:	76 2f       	mov	r23, r22
    5b02:	6a 2f       	mov	r22, r26
    5b04:	11 24       	eor	r1, r1
    5b06:	9f 57       	subi	r25, 0x7F	; 127
    5b08:	50 40       	sbci	r21, 0x00	; 0
    5b0a:	9a f0       	brmi	.+38     	; 0x5b32 <__mulsf3_pse+0x88>
    5b0c:	f1 f0       	breq	.+60     	; 0x5b4a <__mulsf3_pse+0xa0>
    5b0e:	88 23       	and	r24, r24
    5b10:	4a f0       	brmi	.+18     	; 0x5b24 <__mulsf3_pse+0x7a>
    5b12:	ee 0f       	add	r30, r30
    5b14:	ff 1f       	adc	r31, r31
    5b16:	bb 1f       	adc	r27, r27
    5b18:	66 1f       	adc	r22, r22
    5b1a:	77 1f       	adc	r23, r23
    5b1c:	88 1f       	adc	r24, r24
    5b1e:	91 50       	subi	r25, 0x01	; 1
    5b20:	50 40       	sbci	r21, 0x00	; 0
    5b22:	a9 f7       	brne	.-22     	; 0x5b0e <__mulsf3_pse+0x64>
    5b24:	9e 3f       	cpi	r25, 0xFE	; 254
    5b26:	51 05       	cpc	r21, r1
    5b28:	80 f0       	brcs	.+32     	; 0x5b4a <__mulsf3_pse+0xa0>
    5b2a:	0c 94 ee 2c 	jmp	0x59dc	; 0x59dc <__fp_inf>
    5b2e:	0c 94 39 2d 	jmp	0x5a72	; 0x5a72 <__fp_szero>
    5b32:	5f 3f       	cpi	r21, 0xFF	; 255
    5b34:	e4 f3       	brlt	.-8      	; 0x5b2e <__mulsf3_pse+0x84>
    5b36:	98 3e       	cpi	r25, 0xE8	; 232
    5b38:	d4 f3       	brlt	.-12     	; 0x5b2e <__mulsf3_pse+0x84>
    5b3a:	86 95       	lsr	r24
    5b3c:	77 95       	ror	r23
    5b3e:	67 95       	ror	r22
    5b40:	b7 95       	ror	r27
    5b42:	f7 95       	ror	r31
    5b44:	e7 95       	ror	r30
    5b46:	9f 5f       	subi	r25, 0xFF	; 255
    5b48:	c1 f7       	brne	.-16     	; 0x5b3a <__mulsf3_pse+0x90>
    5b4a:	fe 2b       	or	r31, r30
    5b4c:	88 0f       	add	r24, r24
    5b4e:	91 1d       	adc	r25, r1
    5b50:	96 95       	lsr	r25
    5b52:	87 95       	ror	r24
    5b54:	97 f9       	bld	r25, 7
    5b56:	08 95       	ret

00005b58 <__udivmodhi4>:
    5b58:	aa 1b       	sub	r26, r26
    5b5a:	bb 1b       	sub	r27, r27
    5b5c:	51 e1       	ldi	r21, 0x11	; 17
    5b5e:	07 c0       	rjmp	.+14     	; 0x5b6e <__udivmodhi4_ep>

00005b60 <__udivmodhi4_loop>:
    5b60:	aa 1f       	adc	r26, r26
    5b62:	bb 1f       	adc	r27, r27
    5b64:	a6 17       	cp	r26, r22
    5b66:	b7 07       	cpc	r27, r23
    5b68:	10 f0       	brcs	.+4      	; 0x5b6e <__udivmodhi4_ep>
    5b6a:	a6 1b       	sub	r26, r22
    5b6c:	b7 0b       	sbc	r27, r23

00005b6e <__udivmodhi4_ep>:
    5b6e:	88 1f       	adc	r24, r24
    5b70:	99 1f       	adc	r25, r25
    5b72:	5a 95       	dec	r21
    5b74:	a9 f7       	brne	.-22     	; 0x5b60 <__udivmodhi4_loop>
    5b76:	80 95       	com	r24
    5b78:	90 95       	com	r25
    5b7a:	bc 01       	movw	r22, r24
    5b7c:	cd 01       	movw	r24, r26
    5b7e:	08 95       	ret

00005b80 <__divmodhi4>:
    5b80:	97 fb       	bst	r25, 7
    5b82:	07 2e       	mov	r0, r23
    5b84:	16 f4       	brtc	.+4      	; 0x5b8a <__divmodhi4+0xa>
    5b86:	00 94       	com	r0
    5b88:	07 d0       	rcall	.+14     	; 0x5b98 <__divmodhi4_neg1>
    5b8a:	77 fd       	sbrc	r23, 7
    5b8c:	09 d0       	rcall	.+18     	; 0x5ba0 <__divmodhi4_neg2>
    5b8e:	0e 94 ac 2d 	call	0x5b58	; 0x5b58 <__udivmodhi4>
    5b92:	07 fc       	sbrc	r0, 7
    5b94:	05 d0       	rcall	.+10     	; 0x5ba0 <__divmodhi4_neg2>
    5b96:	3e f4       	brtc	.+14     	; 0x5ba6 <__divmodhi4_exit>

00005b98 <__divmodhi4_neg1>:
    5b98:	90 95       	com	r25
    5b9a:	81 95       	neg	r24
    5b9c:	9f 4f       	sbci	r25, 0xFF	; 255
    5b9e:	08 95       	ret

00005ba0 <__divmodhi4_neg2>:
    5ba0:	70 95       	com	r23
    5ba2:	61 95       	neg	r22
    5ba4:	7f 4f       	sbci	r23, 0xFF	; 255

00005ba6 <__divmodhi4_exit>:
    5ba6:	08 95       	ret

00005ba8 <__udivmodsi4>:
    5ba8:	a1 e2       	ldi	r26, 0x21	; 33
    5baa:	1a 2e       	mov	r1, r26
    5bac:	aa 1b       	sub	r26, r26
    5bae:	bb 1b       	sub	r27, r27
    5bb0:	fd 01       	movw	r30, r26
    5bb2:	0d c0       	rjmp	.+26     	; 0x5bce <__udivmodsi4_ep>

00005bb4 <__udivmodsi4_loop>:
    5bb4:	aa 1f       	adc	r26, r26
    5bb6:	bb 1f       	adc	r27, r27
    5bb8:	ee 1f       	adc	r30, r30
    5bba:	ff 1f       	adc	r31, r31
    5bbc:	a2 17       	cp	r26, r18
    5bbe:	b3 07       	cpc	r27, r19
    5bc0:	e4 07       	cpc	r30, r20
    5bc2:	f5 07       	cpc	r31, r21
    5bc4:	20 f0       	brcs	.+8      	; 0x5bce <__udivmodsi4_ep>
    5bc6:	a2 1b       	sub	r26, r18
    5bc8:	b3 0b       	sbc	r27, r19
    5bca:	e4 0b       	sbc	r30, r20
    5bcc:	f5 0b       	sbc	r31, r21

00005bce <__udivmodsi4_ep>:
    5bce:	66 1f       	adc	r22, r22
    5bd0:	77 1f       	adc	r23, r23
    5bd2:	88 1f       	adc	r24, r24
    5bd4:	99 1f       	adc	r25, r25
    5bd6:	1a 94       	dec	r1
    5bd8:	69 f7       	brne	.-38     	; 0x5bb4 <__udivmodsi4_loop>
    5bda:	60 95       	com	r22
    5bdc:	70 95       	com	r23
    5bde:	80 95       	com	r24
    5be0:	90 95       	com	r25
    5be2:	9b 01       	movw	r18, r22
    5be4:	ac 01       	movw	r20, r24
    5be6:	bd 01       	movw	r22, r26
    5be8:	cf 01       	movw	r24, r30
    5bea:	08 95       	ret

00005bec <__tablejump2__>:
    5bec:	ee 0f       	add	r30, r30
    5bee:	ff 1f       	adc	r31, r31
    5bf0:	00 24       	eor	r0, r0
    5bf2:	00 1c       	adc	r0, r0
    5bf4:	0b be       	out	0x3b, r0	; 59
    5bf6:	07 90       	elpm	r0, Z+
    5bf8:	f6 91       	elpm	r31, Z
    5bfa:	e0 2d       	mov	r30, r0
    5bfc:	09 94       	ijmp

00005bfe <__ashrdi3>:
    5bfe:	97 fb       	bst	r25, 7
    5c00:	10 f8       	bld	r1, 0

00005c02 <__lshrdi3>:
    5c02:	16 94       	lsr	r1
    5c04:	00 08       	sbc	r0, r0
    5c06:	0f 93       	push	r16
    5c08:	08 30       	cpi	r16, 0x08	; 8
    5c0a:	98 f0       	brcs	.+38     	; 0x5c32 <__lshrdi3+0x30>
    5c0c:	08 50       	subi	r16, 0x08	; 8
    5c0e:	23 2f       	mov	r18, r19
    5c10:	34 2f       	mov	r19, r20
    5c12:	45 2f       	mov	r20, r21
    5c14:	56 2f       	mov	r21, r22
    5c16:	67 2f       	mov	r22, r23
    5c18:	78 2f       	mov	r23, r24
    5c1a:	89 2f       	mov	r24, r25
    5c1c:	90 2d       	mov	r25, r0
    5c1e:	f4 cf       	rjmp	.-24     	; 0x5c08 <__lshrdi3+0x6>
    5c20:	05 94       	asr	r0
    5c22:	97 95       	ror	r25
    5c24:	87 95       	ror	r24
    5c26:	77 95       	ror	r23
    5c28:	67 95       	ror	r22
    5c2a:	57 95       	ror	r21
    5c2c:	47 95       	ror	r20
    5c2e:	37 95       	ror	r19
    5c30:	27 95       	ror	r18
    5c32:	0a 95       	dec	r16
    5c34:	aa f7       	brpl	.-22     	; 0x5c20 <__lshrdi3+0x1e>
    5c36:	0f 91       	pop	r16
    5c38:	08 95       	ret

00005c3a <malloc>:
    5c3a:	cf 93       	push	r28
    5c3c:	df 93       	push	r29
    5c3e:	82 30       	cpi	r24, 0x02	; 2
    5c40:	91 05       	cpc	r25, r1
    5c42:	10 f4       	brcc	.+4      	; 0x5c48 <malloc+0xe>
    5c44:	82 e0       	ldi	r24, 0x02	; 2
    5c46:	90 e0       	ldi	r25, 0x00	; 0
    5c48:	e0 91 c8 0c 	lds	r30, 0x0CC8	; 0x800cc8 <__flp>
    5c4c:	f0 91 c9 0c 	lds	r31, 0x0CC9	; 0x800cc9 <__flp+0x1>
    5c50:	20 e0       	ldi	r18, 0x00	; 0
    5c52:	30 e0       	ldi	r19, 0x00	; 0
    5c54:	c0 e0       	ldi	r28, 0x00	; 0
    5c56:	d0 e0       	ldi	r29, 0x00	; 0
    5c58:	30 97       	sbiw	r30, 0x00	; 0
    5c5a:	11 f1       	breq	.+68     	; 0x5ca0 <malloc+0x66>
    5c5c:	40 81       	ld	r20, Z
    5c5e:	51 81       	ldd	r21, Z+1	; 0x01
    5c60:	48 17       	cp	r20, r24
    5c62:	59 07       	cpc	r21, r25
    5c64:	c0 f0       	brcs	.+48     	; 0x5c96 <malloc+0x5c>
    5c66:	48 17       	cp	r20, r24
    5c68:	59 07       	cpc	r21, r25
    5c6a:	61 f4       	brne	.+24     	; 0x5c84 <malloc+0x4a>
    5c6c:	82 81       	ldd	r24, Z+2	; 0x02
    5c6e:	93 81       	ldd	r25, Z+3	; 0x03
    5c70:	20 97       	sbiw	r28, 0x00	; 0
    5c72:	19 f0       	breq	.+6      	; 0x5c7a <malloc+0x40>
    5c74:	9b 83       	std	Y+3, r25	; 0x03
    5c76:	8a 83       	std	Y+2, r24	; 0x02
    5c78:	2b c0       	rjmp	.+86     	; 0x5cd0 <malloc+0x96>
    5c7a:	90 93 c9 0c 	sts	0x0CC9, r25	; 0x800cc9 <__flp+0x1>
    5c7e:	80 93 c8 0c 	sts	0x0CC8, r24	; 0x800cc8 <__flp>
    5c82:	26 c0       	rjmp	.+76     	; 0x5cd0 <malloc+0x96>
    5c84:	21 15       	cp	r18, r1
    5c86:	31 05       	cpc	r19, r1
    5c88:	19 f0       	breq	.+6      	; 0x5c90 <malloc+0x56>
    5c8a:	42 17       	cp	r20, r18
    5c8c:	53 07       	cpc	r21, r19
    5c8e:	18 f4       	brcc	.+6      	; 0x5c96 <malloc+0x5c>
    5c90:	9a 01       	movw	r18, r20
    5c92:	be 01       	movw	r22, r28
    5c94:	df 01       	movw	r26, r30
    5c96:	ef 01       	movw	r28, r30
    5c98:	02 80       	ldd	r0, Z+2	; 0x02
    5c9a:	f3 81       	ldd	r31, Z+3	; 0x03
    5c9c:	e0 2d       	mov	r30, r0
    5c9e:	dc cf       	rjmp	.-72     	; 0x5c58 <malloc+0x1e>
    5ca0:	21 15       	cp	r18, r1
    5ca2:	31 05       	cpc	r19, r1
    5ca4:	09 f1       	breq	.+66     	; 0x5ce8 <malloc+0xae>
    5ca6:	28 1b       	sub	r18, r24
    5ca8:	39 0b       	sbc	r19, r25
    5caa:	24 30       	cpi	r18, 0x04	; 4
    5cac:	31 05       	cpc	r19, r1
    5cae:	90 f4       	brcc	.+36     	; 0x5cd4 <malloc+0x9a>
    5cb0:	12 96       	adiw	r26, 0x02	; 2
    5cb2:	8d 91       	ld	r24, X+
    5cb4:	9c 91       	ld	r25, X
    5cb6:	13 97       	sbiw	r26, 0x03	; 3
    5cb8:	61 15       	cp	r22, r1
    5cba:	71 05       	cpc	r23, r1
    5cbc:	21 f0       	breq	.+8      	; 0x5cc6 <malloc+0x8c>
    5cbe:	fb 01       	movw	r30, r22
    5cc0:	93 83       	std	Z+3, r25	; 0x03
    5cc2:	82 83       	std	Z+2, r24	; 0x02
    5cc4:	04 c0       	rjmp	.+8      	; 0x5cce <malloc+0x94>
    5cc6:	90 93 c9 0c 	sts	0x0CC9, r25	; 0x800cc9 <__flp+0x1>
    5cca:	80 93 c8 0c 	sts	0x0CC8, r24	; 0x800cc8 <__flp>
    5cce:	fd 01       	movw	r30, r26
    5cd0:	32 96       	adiw	r30, 0x02	; 2
    5cd2:	44 c0       	rjmp	.+136    	; 0x5d5c <malloc+0x122>
    5cd4:	fd 01       	movw	r30, r26
    5cd6:	e2 0f       	add	r30, r18
    5cd8:	f3 1f       	adc	r31, r19
    5cda:	81 93       	st	Z+, r24
    5cdc:	91 93       	st	Z+, r25
    5cde:	22 50       	subi	r18, 0x02	; 2
    5ce0:	31 09       	sbc	r19, r1
    5ce2:	2d 93       	st	X+, r18
    5ce4:	3c 93       	st	X, r19
    5ce6:	3a c0       	rjmp	.+116    	; 0x5d5c <malloc+0x122>
    5ce8:	20 91 c6 0c 	lds	r18, 0x0CC6	; 0x800cc6 <__brkval>
    5cec:	30 91 c7 0c 	lds	r19, 0x0CC7	; 0x800cc7 <__brkval+0x1>
    5cf0:	23 2b       	or	r18, r19
    5cf2:	41 f4       	brne	.+16     	; 0x5d04 <malloc+0xca>
    5cf4:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5cf8:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5cfc:	30 93 c7 0c 	sts	0x0CC7, r19	; 0x800cc7 <__brkval+0x1>
    5d00:	20 93 c6 0c 	sts	0x0CC6, r18	; 0x800cc6 <__brkval>
    5d04:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    5d08:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    5d0c:	21 15       	cp	r18, r1
    5d0e:	31 05       	cpc	r19, r1
    5d10:	41 f4       	brne	.+16     	; 0x5d22 <malloc+0xe8>
    5d12:	2d b7       	in	r18, 0x3d	; 61
    5d14:	3e b7       	in	r19, 0x3e	; 62
    5d16:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5d1a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5d1e:	24 1b       	sub	r18, r20
    5d20:	35 0b       	sbc	r19, r21
    5d22:	e0 91 c6 0c 	lds	r30, 0x0CC6	; 0x800cc6 <__brkval>
    5d26:	f0 91 c7 0c 	lds	r31, 0x0CC7	; 0x800cc7 <__brkval+0x1>
    5d2a:	e2 17       	cp	r30, r18
    5d2c:	f3 07       	cpc	r31, r19
    5d2e:	a0 f4       	brcc	.+40     	; 0x5d58 <malloc+0x11e>
    5d30:	2e 1b       	sub	r18, r30
    5d32:	3f 0b       	sbc	r19, r31
    5d34:	28 17       	cp	r18, r24
    5d36:	39 07       	cpc	r19, r25
    5d38:	78 f0       	brcs	.+30     	; 0x5d58 <malloc+0x11e>
    5d3a:	ac 01       	movw	r20, r24
    5d3c:	4e 5f       	subi	r20, 0xFE	; 254
    5d3e:	5f 4f       	sbci	r21, 0xFF	; 255
    5d40:	24 17       	cp	r18, r20
    5d42:	35 07       	cpc	r19, r21
    5d44:	48 f0       	brcs	.+18     	; 0x5d58 <malloc+0x11e>
    5d46:	4e 0f       	add	r20, r30
    5d48:	5f 1f       	adc	r21, r31
    5d4a:	50 93 c7 0c 	sts	0x0CC7, r21	; 0x800cc7 <__brkval+0x1>
    5d4e:	40 93 c6 0c 	sts	0x0CC6, r20	; 0x800cc6 <__brkval>
    5d52:	81 93       	st	Z+, r24
    5d54:	91 93       	st	Z+, r25
    5d56:	02 c0       	rjmp	.+4      	; 0x5d5c <malloc+0x122>
    5d58:	e0 e0       	ldi	r30, 0x00	; 0
    5d5a:	f0 e0       	ldi	r31, 0x00	; 0
    5d5c:	cf 01       	movw	r24, r30
    5d5e:	df 91       	pop	r29
    5d60:	cf 91       	pop	r28
    5d62:	08 95       	ret

00005d64 <free>:
    5d64:	0f 93       	push	r16
    5d66:	1f 93       	push	r17
    5d68:	cf 93       	push	r28
    5d6a:	df 93       	push	r29
    5d6c:	00 97       	sbiw	r24, 0x00	; 0
    5d6e:	09 f4       	brne	.+2      	; 0x5d72 <free+0xe>
    5d70:	8c c0       	rjmp	.+280    	; 0x5e8a <free+0x126>
    5d72:	fc 01       	movw	r30, r24
    5d74:	32 97       	sbiw	r30, 0x02	; 2
    5d76:	13 82       	std	Z+3, r1	; 0x03
    5d78:	12 82       	std	Z+2, r1	; 0x02
    5d7a:	00 91 c8 0c 	lds	r16, 0x0CC8	; 0x800cc8 <__flp>
    5d7e:	10 91 c9 0c 	lds	r17, 0x0CC9	; 0x800cc9 <__flp+0x1>
    5d82:	01 15       	cp	r16, r1
    5d84:	11 05       	cpc	r17, r1
    5d86:	81 f4       	brne	.+32     	; 0x5da8 <free+0x44>
    5d88:	20 81       	ld	r18, Z
    5d8a:	31 81       	ldd	r19, Z+1	; 0x01
    5d8c:	82 0f       	add	r24, r18
    5d8e:	93 1f       	adc	r25, r19
    5d90:	20 91 c6 0c 	lds	r18, 0x0CC6	; 0x800cc6 <__brkval>
    5d94:	30 91 c7 0c 	lds	r19, 0x0CC7	; 0x800cc7 <__brkval+0x1>
    5d98:	28 17       	cp	r18, r24
    5d9a:	39 07       	cpc	r19, r25
    5d9c:	79 f5       	brne	.+94     	; 0x5dfc <free+0x98>
    5d9e:	f0 93 c7 0c 	sts	0x0CC7, r31	; 0x800cc7 <__brkval+0x1>
    5da2:	e0 93 c6 0c 	sts	0x0CC6, r30	; 0x800cc6 <__brkval>
    5da6:	71 c0       	rjmp	.+226    	; 0x5e8a <free+0x126>
    5da8:	d8 01       	movw	r26, r16
    5daa:	40 e0       	ldi	r20, 0x00	; 0
    5dac:	50 e0       	ldi	r21, 0x00	; 0
    5dae:	ae 17       	cp	r26, r30
    5db0:	bf 07       	cpc	r27, r31
    5db2:	50 f4       	brcc	.+20     	; 0x5dc8 <free+0x64>
    5db4:	12 96       	adiw	r26, 0x02	; 2
    5db6:	2d 91       	ld	r18, X+
    5db8:	3c 91       	ld	r19, X
    5dba:	13 97       	sbiw	r26, 0x03	; 3
    5dbc:	ad 01       	movw	r20, r26
    5dbe:	21 15       	cp	r18, r1
    5dc0:	31 05       	cpc	r19, r1
    5dc2:	09 f1       	breq	.+66     	; 0x5e06 <free+0xa2>
    5dc4:	d9 01       	movw	r26, r18
    5dc6:	f3 cf       	rjmp	.-26     	; 0x5dae <free+0x4a>
    5dc8:	9d 01       	movw	r18, r26
    5dca:	da 01       	movw	r26, r20
    5dcc:	33 83       	std	Z+3, r19	; 0x03
    5dce:	22 83       	std	Z+2, r18	; 0x02
    5dd0:	60 81       	ld	r22, Z
    5dd2:	71 81       	ldd	r23, Z+1	; 0x01
    5dd4:	86 0f       	add	r24, r22
    5dd6:	97 1f       	adc	r25, r23
    5dd8:	82 17       	cp	r24, r18
    5dda:	93 07       	cpc	r25, r19
    5ddc:	69 f4       	brne	.+26     	; 0x5df8 <free+0x94>
    5dde:	ec 01       	movw	r28, r24
    5de0:	28 81       	ld	r18, Y
    5de2:	39 81       	ldd	r19, Y+1	; 0x01
    5de4:	26 0f       	add	r18, r22
    5de6:	37 1f       	adc	r19, r23
    5de8:	2e 5f       	subi	r18, 0xFE	; 254
    5dea:	3f 4f       	sbci	r19, 0xFF	; 255
    5dec:	31 83       	std	Z+1, r19	; 0x01
    5dee:	20 83       	st	Z, r18
    5df0:	8a 81       	ldd	r24, Y+2	; 0x02
    5df2:	9b 81       	ldd	r25, Y+3	; 0x03
    5df4:	93 83       	std	Z+3, r25	; 0x03
    5df6:	82 83       	std	Z+2, r24	; 0x02
    5df8:	45 2b       	or	r20, r21
    5dfa:	29 f4       	brne	.+10     	; 0x5e06 <free+0xa2>
    5dfc:	f0 93 c9 0c 	sts	0x0CC9, r31	; 0x800cc9 <__flp+0x1>
    5e00:	e0 93 c8 0c 	sts	0x0CC8, r30	; 0x800cc8 <__flp>
    5e04:	42 c0       	rjmp	.+132    	; 0x5e8a <free+0x126>
    5e06:	13 96       	adiw	r26, 0x03	; 3
    5e08:	fc 93       	st	X, r31
    5e0a:	ee 93       	st	-X, r30
    5e0c:	12 97       	sbiw	r26, 0x02	; 2
    5e0e:	ed 01       	movw	r28, r26
    5e10:	49 91       	ld	r20, Y+
    5e12:	59 91       	ld	r21, Y+
    5e14:	9e 01       	movw	r18, r28
    5e16:	24 0f       	add	r18, r20
    5e18:	35 1f       	adc	r19, r21
    5e1a:	e2 17       	cp	r30, r18
    5e1c:	f3 07       	cpc	r31, r19
    5e1e:	71 f4       	brne	.+28     	; 0x5e3c <free+0xd8>
    5e20:	80 81       	ld	r24, Z
    5e22:	91 81       	ldd	r25, Z+1	; 0x01
    5e24:	84 0f       	add	r24, r20
    5e26:	95 1f       	adc	r25, r21
    5e28:	02 96       	adiw	r24, 0x02	; 2
    5e2a:	11 96       	adiw	r26, 0x01	; 1
    5e2c:	9c 93       	st	X, r25
    5e2e:	8e 93       	st	-X, r24
    5e30:	82 81       	ldd	r24, Z+2	; 0x02
    5e32:	93 81       	ldd	r25, Z+3	; 0x03
    5e34:	13 96       	adiw	r26, 0x03	; 3
    5e36:	9c 93       	st	X, r25
    5e38:	8e 93       	st	-X, r24
    5e3a:	12 97       	sbiw	r26, 0x02	; 2
    5e3c:	e0 e0       	ldi	r30, 0x00	; 0
    5e3e:	f0 e0       	ldi	r31, 0x00	; 0
    5e40:	d8 01       	movw	r26, r16
    5e42:	12 96       	adiw	r26, 0x02	; 2
    5e44:	8d 91       	ld	r24, X+
    5e46:	9c 91       	ld	r25, X
    5e48:	13 97       	sbiw	r26, 0x03	; 3
    5e4a:	00 97       	sbiw	r24, 0x00	; 0
    5e4c:	19 f0       	breq	.+6      	; 0x5e54 <free+0xf0>
    5e4e:	f8 01       	movw	r30, r16
    5e50:	8c 01       	movw	r16, r24
    5e52:	f6 cf       	rjmp	.-20     	; 0x5e40 <free+0xdc>
    5e54:	8d 91       	ld	r24, X+
    5e56:	9c 91       	ld	r25, X
    5e58:	98 01       	movw	r18, r16
    5e5a:	2e 5f       	subi	r18, 0xFE	; 254
    5e5c:	3f 4f       	sbci	r19, 0xFF	; 255
    5e5e:	82 0f       	add	r24, r18
    5e60:	93 1f       	adc	r25, r19
    5e62:	20 91 c6 0c 	lds	r18, 0x0CC6	; 0x800cc6 <__brkval>
    5e66:	30 91 c7 0c 	lds	r19, 0x0CC7	; 0x800cc7 <__brkval+0x1>
    5e6a:	28 17       	cp	r18, r24
    5e6c:	39 07       	cpc	r19, r25
    5e6e:	69 f4       	brne	.+26     	; 0x5e8a <free+0x126>
    5e70:	30 97       	sbiw	r30, 0x00	; 0
    5e72:	29 f4       	brne	.+10     	; 0x5e7e <free+0x11a>
    5e74:	10 92 c9 0c 	sts	0x0CC9, r1	; 0x800cc9 <__flp+0x1>
    5e78:	10 92 c8 0c 	sts	0x0CC8, r1	; 0x800cc8 <__flp>
    5e7c:	02 c0       	rjmp	.+4      	; 0x5e82 <free+0x11e>
    5e7e:	13 82       	std	Z+3, r1	; 0x03
    5e80:	12 82       	std	Z+2, r1	; 0x02
    5e82:	10 93 c7 0c 	sts	0x0CC7, r17	; 0x800cc7 <__brkval+0x1>
    5e86:	00 93 c6 0c 	sts	0x0CC6, r16	; 0x800cc6 <__brkval>
    5e8a:	df 91       	pop	r29
    5e8c:	cf 91       	pop	r28
    5e8e:	1f 91       	pop	r17
    5e90:	0f 91       	pop	r16
    5e92:	08 95       	ret

00005e94 <do_rand>:
    5e94:	8f 92       	push	r8
    5e96:	9f 92       	push	r9
    5e98:	af 92       	push	r10
    5e9a:	bf 92       	push	r11
    5e9c:	cf 92       	push	r12
    5e9e:	df 92       	push	r13
    5ea0:	ef 92       	push	r14
    5ea2:	ff 92       	push	r15
    5ea4:	cf 93       	push	r28
    5ea6:	df 93       	push	r29
    5ea8:	ec 01       	movw	r28, r24
    5eaa:	68 81       	ld	r22, Y
    5eac:	79 81       	ldd	r23, Y+1	; 0x01
    5eae:	8a 81       	ldd	r24, Y+2	; 0x02
    5eb0:	9b 81       	ldd	r25, Y+3	; 0x03
    5eb2:	61 15       	cp	r22, r1
    5eb4:	71 05       	cpc	r23, r1
    5eb6:	81 05       	cpc	r24, r1
    5eb8:	91 05       	cpc	r25, r1
    5eba:	21 f4       	brne	.+8      	; 0x5ec4 <do_rand+0x30>
    5ebc:	64 e2       	ldi	r22, 0x24	; 36
    5ebe:	79 ed       	ldi	r23, 0xD9	; 217
    5ec0:	8b e5       	ldi	r24, 0x5B	; 91
    5ec2:	97 e0       	ldi	r25, 0x07	; 7
    5ec4:	2d e1       	ldi	r18, 0x1D	; 29
    5ec6:	33 ef       	ldi	r19, 0xF3	; 243
    5ec8:	41 e0       	ldi	r20, 0x01	; 1
    5eca:	50 e0       	ldi	r21, 0x00	; 0
    5ecc:	0e 94 4c 35 	call	0x6a98	; 0x6a98 <__divmodsi4>
    5ed0:	49 01       	movw	r8, r18
    5ed2:	5a 01       	movw	r10, r20
    5ed4:	9b 01       	movw	r18, r22
    5ed6:	ac 01       	movw	r20, r24
    5ed8:	a7 ea       	ldi	r26, 0xA7	; 167
    5eda:	b1 e4       	ldi	r27, 0x41	; 65
    5edc:	0e 94 6b 35 	call	0x6ad6	; 0x6ad6 <__muluhisi3>
    5ee0:	6b 01       	movw	r12, r22
    5ee2:	7c 01       	movw	r14, r24
    5ee4:	ac ee       	ldi	r26, 0xEC	; 236
    5ee6:	b4 ef       	ldi	r27, 0xF4	; 244
    5ee8:	a5 01       	movw	r20, r10
    5eea:	94 01       	movw	r18, r8
    5eec:	0e 94 79 35 	call	0x6af2	; 0x6af2 <__mulohisi3>
    5ef0:	dc 01       	movw	r26, r24
    5ef2:	cb 01       	movw	r24, r22
    5ef4:	8c 0d       	add	r24, r12
    5ef6:	9d 1d       	adc	r25, r13
    5ef8:	ae 1d       	adc	r26, r14
    5efa:	bf 1d       	adc	r27, r15
    5efc:	b7 ff       	sbrs	r27, 7
    5efe:	03 c0       	rjmp	.+6      	; 0x5f06 <do_rand+0x72>
    5f00:	01 97       	sbiw	r24, 0x01	; 1
    5f02:	a1 09       	sbc	r26, r1
    5f04:	b0 48       	sbci	r27, 0x80	; 128
    5f06:	88 83       	st	Y, r24
    5f08:	99 83       	std	Y+1, r25	; 0x01
    5f0a:	aa 83       	std	Y+2, r26	; 0x02
    5f0c:	bb 83       	std	Y+3, r27	; 0x03
    5f0e:	9f 77       	andi	r25, 0x7F	; 127
    5f10:	df 91       	pop	r29
    5f12:	cf 91       	pop	r28
    5f14:	ff 90       	pop	r15
    5f16:	ef 90       	pop	r14
    5f18:	df 90       	pop	r13
    5f1a:	cf 90       	pop	r12
    5f1c:	bf 90       	pop	r11
    5f1e:	af 90       	pop	r10
    5f20:	9f 90       	pop	r9
    5f22:	8f 90       	pop	r8
    5f24:	08 95       	ret

00005f26 <rand_r>:
    5f26:	0c 94 4a 2f 	jmp	0x5e94	; 0x5e94 <do_rand>

00005f2a <rand>:
    5f2a:	86 e0       	ldi	r24, 0x06	; 6
    5f2c:	92 e0       	ldi	r25, 0x02	; 2
    5f2e:	0c 94 4a 2f 	jmp	0x5e94	; 0x5e94 <do_rand>

00005f32 <srand>:
    5f32:	a0 e0       	ldi	r26, 0x00	; 0
    5f34:	b0 e0       	ldi	r27, 0x00	; 0
    5f36:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <next>
    5f3a:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <next+0x1>
    5f3e:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <next+0x2>
    5f42:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <next+0x3>
    5f46:	08 95       	ret

00005f48 <strtoul>:
    5f48:	2f 92       	push	r2
    5f4a:	3f 92       	push	r3
    5f4c:	4f 92       	push	r4
    5f4e:	5f 92       	push	r5
    5f50:	6f 92       	push	r6
    5f52:	7f 92       	push	r7
    5f54:	8f 92       	push	r8
    5f56:	9f 92       	push	r9
    5f58:	af 92       	push	r10
    5f5a:	bf 92       	push	r11
    5f5c:	cf 92       	push	r12
    5f5e:	df 92       	push	r13
    5f60:	ef 92       	push	r14
    5f62:	ff 92       	push	r15
    5f64:	0f 93       	push	r16
    5f66:	1f 93       	push	r17
    5f68:	cf 93       	push	r28
    5f6a:	df 93       	push	r29
    5f6c:	00 d0       	rcall	.+0      	; 0x5f6e <strtoul+0x26>
    5f6e:	00 d0       	rcall	.+0      	; 0x5f70 <strtoul+0x28>
    5f70:	00 d0       	rcall	.+0      	; 0x5f72 <strtoul+0x2a>
    5f72:	cd b7       	in	r28, 0x3d	; 61
    5f74:	de b7       	in	r29, 0x3e	; 62
    5f76:	5c 01       	movw	r10, r24
    5f78:	6b 01       	movw	r12, r22
    5f7a:	7a 01       	movw	r14, r20
    5f7c:	61 15       	cp	r22, r1
    5f7e:	71 05       	cpc	r23, r1
    5f80:	19 f0       	breq	.+6      	; 0x5f88 <strtoul+0x40>
    5f82:	db 01       	movw	r26, r22
    5f84:	8d 93       	st	X+, r24
    5f86:	9c 93       	st	X, r25
    5f88:	e1 14       	cp	r14, r1
    5f8a:	f1 04       	cpc	r15, r1
    5f8c:	29 f0       	breq	.+10     	; 0x5f98 <strtoul+0x50>
    5f8e:	c7 01       	movw	r24, r14
    5f90:	02 97       	sbiw	r24, 0x02	; 2
    5f92:	83 97       	sbiw	r24, 0x23	; 35
    5f94:	08 f0       	brcs	.+2      	; 0x5f98 <strtoul+0x50>
    5f96:	dc c0       	rjmp	.+440    	; 0x6150 <strtoul+0x208>
    5f98:	35 01       	movw	r6, r10
    5f9a:	bf ef       	ldi	r27, 0xFF	; 255
    5f9c:	6b 1a       	sub	r6, r27
    5f9e:	7b 0a       	sbc	r7, r27
    5fa0:	f5 01       	movw	r30, r10
    5fa2:	10 81       	ld	r17, Z
    5fa4:	81 2f       	mov	r24, r17
    5fa6:	90 e0       	ldi	r25, 0x00	; 0
    5fa8:	0e 94 d6 31 	call	0x63ac	; 0x63ac <isspace>
    5fac:	89 2b       	or	r24, r25
    5fae:	11 f0       	breq	.+4      	; 0x5fb4 <strtoul+0x6c>
    5fb0:	53 01       	movw	r10, r6
    5fb2:	f2 cf       	rjmp	.-28     	; 0x5f98 <strtoul+0x50>
    5fb4:	1d 32       	cpi	r17, 0x2D	; 45
    5fb6:	49 f4       	brne	.+18     	; 0x5fca <strtoul+0x82>
    5fb8:	35 01       	movw	r6, r10
    5fba:	f2 e0       	ldi	r31, 0x02	; 2
    5fbc:	6f 0e       	add	r6, r31
    5fbe:	71 1c       	adc	r7, r1
    5fc0:	d5 01       	movw	r26, r10
    5fc2:	11 96       	adiw	r26, 0x01	; 1
    5fc4:	1c 91       	ld	r17, X
    5fc6:	01 e0       	ldi	r16, 0x01	; 1
    5fc8:	09 c0       	rjmp	.+18     	; 0x5fdc <strtoul+0x94>
    5fca:	1b 32       	cpi	r17, 0x2B	; 43
    5fcc:	31 f4       	brne	.+12     	; 0x5fda <strtoul+0x92>
    5fce:	35 01       	movw	r6, r10
    5fd0:	b2 e0       	ldi	r27, 0x02	; 2
    5fd2:	6b 0e       	add	r6, r27
    5fd4:	71 1c       	adc	r7, r1
    5fd6:	f5 01       	movw	r30, r10
    5fd8:	11 81       	ldd	r17, Z+1	; 0x01
    5fda:	00 e0       	ldi	r16, 0x00	; 0
    5fdc:	e1 14       	cp	r14, r1
    5fde:	f1 04       	cpc	r15, r1
    5fe0:	09 f4       	brne	.+2      	; 0x5fe4 <strtoul+0x9c>
    5fe2:	c4 c0       	rjmp	.+392    	; 0x616c <strtoul+0x224>
    5fe4:	f0 e1       	ldi	r31, 0x10	; 16
    5fe6:	ef 16       	cp	r14, r31
    5fe8:	f1 04       	cpc	r15, r1
    5fea:	89 f4       	brne	.+34     	; 0x600e <strtoul+0xc6>
    5fec:	10 33       	cpi	r17, 0x30	; 48
    5fee:	99 f5       	brne	.+102    	; 0x6056 <strtoul+0x10e>
    5ff0:	d3 01       	movw	r26, r6
    5ff2:	8c 91       	ld	r24, X
    5ff4:	8f 7d       	andi	r24, 0xDF	; 223
    5ff6:	88 35       	cpi	r24, 0x58	; 88
    5ff8:	09 f0       	breq	.+2      	; 0x5ffc <strtoul+0xb4>
    5ffa:	b2 c0       	rjmp	.+356    	; 0x6160 <strtoul+0x218>
    5ffc:	11 96       	adiw	r26, 0x01	; 1
    5ffe:	1c 91       	ld	r17, X
    6000:	b2 e0       	ldi	r27, 0x02	; 2
    6002:	6b 0e       	add	r6, r27
    6004:	71 1c       	adc	r7, r1
    6006:	02 60       	ori	r16, 0x02	; 2
    6008:	50 e1       	ldi	r21, 0x10	; 16
    600a:	e5 2e       	mov	r14, r21
    600c:	f1 2c       	mov	r15, r1
    600e:	ea e0       	ldi	r30, 0x0A	; 10
    6010:	ee 16       	cp	r14, r30
    6012:	f1 04       	cpc	r15, r1
    6014:	09 f4       	brne	.+2      	; 0x6018 <strtoul+0xd0>
    6016:	b0 c0       	rjmp	.+352    	; 0x6178 <strtoul+0x230>
    6018:	f0 e1       	ldi	r31, 0x10	; 16
    601a:	ef 16       	cp	r14, r31
    601c:	f1 04       	cpc	r15, r1
    601e:	d9 f0       	breq	.+54     	; 0x6056 <strtoul+0x10e>
    6020:	28 e0       	ldi	r18, 0x08	; 8
    6022:	e2 16       	cp	r14, r18
    6024:	f1 04       	cpc	r15, r1
    6026:	51 f4       	brne	.+20     	; 0x603c <strtoul+0xf4>
    6028:	38 e0       	ldi	r19, 0x08	; 8
    602a:	e3 2e       	mov	r14, r19
    602c:	f1 2c       	mov	r15, r1
    602e:	88 24       	eor	r8, r8
    6030:	8a 94       	dec	r8
    6032:	98 2c       	mov	r9, r8
    6034:	a8 2c       	mov	r10, r8
    6036:	4f e1       	ldi	r20, 0x1F	; 31
    6038:	b4 2e       	mov	r11, r20
    603a:	13 c0       	rjmp	.+38     	; 0x6062 <strtoul+0x11a>
    603c:	6f ef       	ldi	r22, 0xFF	; 255
    603e:	7f ef       	ldi	r23, 0xFF	; 255
    6040:	cb 01       	movw	r24, r22
    6042:	97 01       	movw	r18, r14
    6044:	0f 2c       	mov	r0, r15
    6046:	00 0c       	add	r0, r0
    6048:	44 0b       	sbc	r20, r20
    604a:	55 0b       	sbc	r21, r21
    604c:	0e 94 d4 2d 	call	0x5ba8	; 0x5ba8 <__udivmodsi4>
    6050:	49 01       	movw	r8, r18
    6052:	5a 01       	movw	r10, r20
    6054:	06 c0       	rjmp	.+12     	; 0x6062 <strtoul+0x11a>
    6056:	88 24       	eor	r8, r8
    6058:	8a 94       	dec	r8
    605a:	98 2c       	mov	r9, r8
    605c:	a8 2c       	mov	r10, r8
    605e:	2f e0       	ldi	r18, 0x0F	; 15
    6060:	b2 2e       	mov	r11, r18
    6062:	7e 82       	std	Y+6, r7	; 0x06
    6064:	6d 82       	std	Y+5, r6	; 0x05
    6066:	60 e0       	ldi	r22, 0x00	; 0
    6068:	20 e0       	ldi	r18, 0x00	; 0
    606a:	30 e0       	ldi	r19, 0x00	; 0
    606c:	a9 01       	movw	r20, r18
    606e:	27 01       	movw	r4, r14
    6070:	0f 2c       	mov	r0, r15
    6072:	00 0c       	add	r0, r0
    6074:	66 08       	sbc	r6, r6
    6076:	77 08       	sbc	r7, r7
    6078:	2d 80       	ldd	r2, Y+5	; 0x05
    607a:	3e 80       	ldd	r3, Y+6	; 0x06
    607c:	e0 ed       	ldi	r30, 0xD0	; 208
    607e:	e1 0f       	add	r30, r17
    6080:	ea 30       	cpi	r30, 0x0A	; 10
    6082:	60 f0       	brcs	.+24     	; 0x609c <strtoul+0x154>
    6084:	8f eb       	ldi	r24, 0xBF	; 191
    6086:	81 0f       	add	r24, r17
    6088:	8a 31       	cpi	r24, 0x1A	; 26
    608a:	10 f4       	brcc	.+4      	; 0x6090 <strtoul+0x148>
    608c:	e9 ec       	ldi	r30, 0xC9	; 201
    608e:	05 c0       	rjmp	.+10     	; 0x609a <strtoul+0x152>
    6090:	8f e9       	ldi	r24, 0x9F	; 159
    6092:	81 0f       	add	r24, r17
    6094:	8a 31       	cpi	r24, 0x1A	; 26
    6096:	90 f5       	brcc	.+100    	; 0x60fc <strtoul+0x1b4>
    6098:	e9 ea       	ldi	r30, 0xA9	; 169
    609a:	e1 0f       	add	r30, r17
    609c:	8e 2f       	mov	r24, r30
    609e:	90 e0       	ldi	r25, 0x00	; 0
    60a0:	8e 15       	cp	r24, r14
    60a2:	9f 05       	cpc	r25, r15
    60a4:	5c f5       	brge	.+86     	; 0x60fc <strtoul+0x1b4>
    60a6:	6f 3f       	cpi	r22, 0xFF	; 255
    60a8:	09 f1       	breq	.+66     	; 0x60ec <strtoul+0x1a4>
    60aa:	82 16       	cp	r8, r18
    60ac:	93 06       	cpc	r9, r19
    60ae:	a4 06       	cpc	r10, r20
    60b0:	b5 06       	cpc	r11, r21
    60b2:	d8 f0       	brcs	.+54     	; 0x60ea <strtoul+0x1a2>
    60b4:	c3 01       	movw	r24, r6
    60b6:	b2 01       	movw	r22, r4
    60b8:	0e 94 3c 35 	call	0x6a78	; 0x6a78 <__mulsi3>
    60bc:	2e 2f       	mov	r18, r30
    60be:	30 e0       	ldi	r19, 0x00	; 0
    60c0:	40 e0       	ldi	r20, 0x00	; 0
    60c2:	50 e0       	ldi	r21, 0x00	; 0
    60c4:	29 83       	std	Y+1, r18	; 0x01
    60c6:	3a 83       	std	Y+2, r19	; 0x02
    60c8:	4b 83       	std	Y+3, r20	; 0x03
    60ca:	5c 83       	std	Y+4, r21	; 0x04
    60cc:	26 0f       	add	r18, r22
    60ce:	37 1f       	adc	r19, r23
    60d0:	48 1f       	adc	r20, r24
    60d2:	59 1f       	adc	r21, r25
    60d4:	89 81       	ldd	r24, Y+1	; 0x01
    60d6:	9a 81       	ldd	r25, Y+2	; 0x02
    60d8:	ab 81       	ldd	r26, Y+3	; 0x03
    60da:	bc 81       	ldd	r27, Y+4	; 0x04
    60dc:	28 17       	cp	r18, r24
    60de:	39 07       	cpc	r19, r25
    60e0:	4a 07       	cpc	r20, r26
    60e2:	5b 07       	cpc	r21, r27
    60e4:	10 f0       	brcs	.+4      	; 0x60ea <strtoul+0x1a2>
    60e6:	61 e0       	ldi	r22, 0x01	; 1
    60e8:	01 c0       	rjmp	.+2      	; 0x60ec <strtoul+0x1a4>
    60ea:	6f ef       	ldi	r22, 0xFF	; 255
    60ec:	ed 81       	ldd	r30, Y+5	; 0x05
    60ee:	fe 81       	ldd	r31, Y+6	; 0x06
    60f0:	31 96       	adiw	r30, 0x01	; 1
    60f2:	fe 83       	std	Y+6, r31	; 0x06
    60f4:	ed 83       	std	Y+5, r30	; 0x05
    60f6:	d1 01       	movw	r26, r2
    60f8:	1c 91       	ld	r17, X
    60fa:	be cf       	rjmp	.-132    	; 0x6078 <strtoul+0x130>
    60fc:	c1 14       	cp	r12, r1
    60fe:	d1 04       	cpc	r13, r1
    6100:	89 f0       	breq	.+34     	; 0x6124 <strtoul+0x1dc>
    6102:	66 23       	and	r22, r22
    6104:	39 f0       	breq	.+14     	; 0x6114 <strtoul+0x1cc>
    6106:	8d 81       	ldd	r24, Y+5	; 0x05
    6108:	9e 81       	ldd	r25, Y+6	; 0x06
    610a:	01 97       	sbiw	r24, 0x01	; 1
    610c:	f6 01       	movw	r30, r12
    610e:	91 83       	std	Z+1, r25	; 0x01
    6110:	80 83       	st	Z, r24
    6112:	08 c0       	rjmp	.+16     	; 0x6124 <strtoul+0x1dc>
    6114:	01 ff       	sbrs	r16, 1
    6116:	06 c0       	rjmp	.+12     	; 0x6124 <strtoul+0x1dc>
    6118:	8d 81       	ldd	r24, Y+5	; 0x05
    611a:	9e 81       	ldd	r25, Y+6	; 0x06
    611c:	02 97       	sbiw	r24, 0x02	; 2
    611e:	d6 01       	movw	r26, r12
    6120:	8d 93       	st	X+, r24
    6122:	9c 93       	st	X, r25
    6124:	00 ff       	sbrs	r16, 0
    6126:	07 c0       	rjmp	.+14     	; 0x6136 <strtoul+0x1ee>
    6128:	50 95       	com	r21
    612a:	40 95       	com	r20
    612c:	30 95       	com	r19
    612e:	21 95       	neg	r18
    6130:	3f 4f       	sbci	r19, 0xFF	; 255
    6132:	4f 4f       	sbci	r20, 0xFF	; 255
    6134:	5f 4f       	sbci	r21, 0xFF	; 255
    6136:	67 ff       	sbrs	r22, 7
    6138:	10 c0       	rjmp	.+32     	; 0x615a <strtoul+0x212>
    613a:	82 e2       	ldi	r24, 0x22	; 34
    613c:	90 e0       	ldi	r25, 0x00	; 0
    613e:	90 93 cb 0c 	sts	0x0CCB, r25	; 0x800ccb <errno+0x1>
    6142:	80 93 ca 0c 	sts	0x0CCA, r24	; 0x800cca <errno>
    6146:	6f ef       	ldi	r22, 0xFF	; 255
    6148:	7f ef       	ldi	r23, 0xFF	; 255
    614a:	8f ef       	ldi	r24, 0xFF	; 255
    614c:	9f ef       	ldi	r25, 0xFF	; 255
    614e:	1b c0       	rjmp	.+54     	; 0x6186 <strtoul+0x23e>
    6150:	60 e0       	ldi	r22, 0x00	; 0
    6152:	70 e0       	ldi	r23, 0x00	; 0
    6154:	80 e0       	ldi	r24, 0x00	; 0
    6156:	90 e0       	ldi	r25, 0x00	; 0
    6158:	16 c0       	rjmp	.+44     	; 0x6186 <strtoul+0x23e>
    615a:	b9 01       	movw	r22, r18
    615c:	ca 01       	movw	r24, r20
    615e:	13 c0       	rjmp	.+38     	; 0x6186 <strtoul+0x23e>
    6160:	10 e3       	ldi	r17, 0x30	; 48
    6162:	e1 14       	cp	r14, r1
    6164:	f1 04       	cpc	r15, r1
    6166:	09 f4       	brne	.+2      	; 0x616a <strtoul+0x222>
    6168:	5f cf       	rjmp	.-322    	; 0x6028 <strtoul+0xe0>
    616a:	51 cf       	rjmp	.-350    	; 0x600e <strtoul+0xc6>
    616c:	10 33       	cpi	r17, 0x30	; 48
    616e:	09 f4       	brne	.+2      	; 0x6172 <strtoul+0x22a>
    6170:	3f cf       	rjmp	.-386    	; 0x5ff0 <strtoul+0xa8>
    6172:	9a e0       	ldi	r25, 0x0A	; 10
    6174:	e9 2e       	mov	r14, r25
    6176:	f1 2c       	mov	r15, r1
    6178:	89 e9       	ldi	r24, 0x99	; 153
    617a:	88 2e       	mov	r8, r24
    617c:	98 2c       	mov	r9, r8
    617e:	a8 2c       	mov	r10, r8
    6180:	89 e1       	ldi	r24, 0x19	; 25
    6182:	b8 2e       	mov	r11, r24
    6184:	6e cf       	rjmp	.-292    	; 0x6062 <strtoul+0x11a>
    6186:	26 96       	adiw	r28, 0x06	; 6
    6188:	0f b6       	in	r0, 0x3f	; 63
    618a:	f8 94       	cli
    618c:	de bf       	out	0x3e, r29	; 62
    618e:	0f be       	out	0x3f, r0	; 63
    6190:	cd bf       	out	0x3d, r28	; 61
    6192:	df 91       	pop	r29
    6194:	cf 91       	pop	r28
    6196:	1f 91       	pop	r17
    6198:	0f 91       	pop	r16
    619a:	ff 90       	pop	r15
    619c:	ef 90       	pop	r14
    619e:	df 90       	pop	r13
    61a0:	cf 90       	pop	r12
    61a2:	bf 90       	pop	r11
    61a4:	af 90       	pop	r10
    61a6:	9f 90       	pop	r9
    61a8:	8f 90       	pop	r8
    61aa:	7f 90       	pop	r7
    61ac:	6f 90       	pop	r6
    61ae:	5f 90       	pop	r5
    61b0:	4f 90       	pop	r4
    61b2:	3f 90       	pop	r3
    61b4:	2f 90       	pop	r2
    61b6:	08 95       	ret

000061b8 <atof>:
    61b8:	66 27       	eor	r22, r22
    61ba:	77 27       	eor	r23, r23
    61bc:	0c 94 3f 33 	jmp	0x667e	; 0x667e <strtod>

000061c0 <atoi>:
    61c0:	fc 01       	movw	r30, r24
    61c2:	88 27       	eor	r24, r24
    61c4:	99 27       	eor	r25, r25
    61c6:	e8 94       	clt
    61c8:	21 91       	ld	r18, Z+
    61ca:	20 32       	cpi	r18, 0x20	; 32
    61cc:	e9 f3       	breq	.-6      	; 0x61c8 <atoi+0x8>
    61ce:	29 30       	cpi	r18, 0x09	; 9
    61d0:	10 f0       	brcs	.+4      	; 0x61d6 <atoi+0x16>
    61d2:	2e 30       	cpi	r18, 0x0E	; 14
    61d4:	c8 f3       	brcs	.-14     	; 0x61c8 <atoi+0x8>
    61d6:	2b 32       	cpi	r18, 0x2B	; 43
    61d8:	41 f0       	breq	.+16     	; 0x61ea <atoi+0x2a>
    61da:	2d 32       	cpi	r18, 0x2D	; 45
    61dc:	39 f4       	brne	.+14     	; 0x61ec <atoi+0x2c>
    61de:	68 94       	set
    61e0:	04 c0       	rjmp	.+8      	; 0x61ea <atoi+0x2a>
    61e2:	0e 94 4f 32 	call	0x649e	; 0x649e <__mulhi_const_10>
    61e6:	82 0f       	add	r24, r18
    61e8:	91 1d       	adc	r25, r1
    61ea:	21 91       	ld	r18, Z+
    61ec:	20 53       	subi	r18, 0x30	; 48
    61ee:	2a 30       	cpi	r18, 0x0A	; 10
    61f0:	c0 f3       	brcs	.-16     	; 0x61e2 <atoi+0x22>
    61f2:	1e f4       	brtc	.+6      	; 0x61fa <atoi+0x3a>
    61f4:	90 95       	com	r25
    61f6:	81 95       	neg	r24
    61f8:	9f 4f       	sbci	r25, 0xFF	; 255
    61fa:	08 95       	ret

000061fc <__ftoa_engine>:
    61fc:	28 30       	cpi	r18, 0x08	; 8
    61fe:	08 f0       	brcs	.+2      	; 0x6202 <__ftoa_engine+0x6>
    6200:	27 e0       	ldi	r18, 0x07	; 7
    6202:	33 27       	eor	r19, r19
    6204:	da 01       	movw	r26, r20
    6206:	99 0f       	add	r25, r25
    6208:	31 1d       	adc	r19, r1
    620a:	87 fd       	sbrc	r24, 7
    620c:	91 60       	ori	r25, 0x01	; 1
    620e:	00 96       	adiw	r24, 0x00	; 0
    6210:	61 05       	cpc	r22, r1
    6212:	71 05       	cpc	r23, r1
    6214:	39 f4       	brne	.+14     	; 0x6224 <__ftoa_engine+0x28>
    6216:	32 60       	ori	r19, 0x02	; 2
    6218:	2e 5f       	subi	r18, 0xFE	; 254
    621a:	3d 93       	st	X+, r19
    621c:	30 e3       	ldi	r19, 0x30	; 48
    621e:	2a 95       	dec	r18
    6220:	e1 f7       	brne	.-8      	; 0x621a <__ftoa_engine+0x1e>
    6222:	08 95       	ret
    6224:	9f 3f       	cpi	r25, 0xFF	; 255
    6226:	30 f0       	brcs	.+12     	; 0x6234 <__ftoa_engine+0x38>
    6228:	80 38       	cpi	r24, 0x80	; 128
    622a:	71 05       	cpc	r23, r1
    622c:	61 05       	cpc	r22, r1
    622e:	09 f0       	breq	.+2      	; 0x6232 <__ftoa_engine+0x36>
    6230:	3c 5f       	subi	r19, 0xFC	; 252
    6232:	3c 5f       	subi	r19, 0xFC	; 252
    6234:	3d 93       	st	X+, r19
    6236:	91 30       	cpi	r25, 0x01	; 1
    6238:	08 f0       	brcs	.+2      	; 0x623c <__ftoa_engine+0x40>
    623a:	80 68       	ori	r24, 0x80	; 128
    623c:	91 1d       	adc	r25, r1
    623e:	df 93       	push	r29
    6240:	cf 93       	push	r28
    6242:	1f 93       	push	r17
    6244:	0f 93       	push	r16
    6246:	ff 92       	push	r15
    6248:	ef 92       	push	r14
    624a:	19 2f       	mov	r17, r25
    624c:	98 7f       	andi	r25, 0xF8	; 248
    624e:	96 95       	lsr	r25
    6250:	e9 2f       	mov	r30, r25
    6252:	96 95       	lsr	r25
    6254:	96 95       	lsr	r25
    6256:	e9 0f       	add	r30, r25
    6258:	ff 27       	eor	r31, r31
    625a:	e4 5e       	subi	r30, 0xE4	; 228
    625c:	fd 4f       	sbci	r31, 0xFD	; 253
    625e:	99 27       	eor	r25, r25
    6260:	33 27       	eor	r19, r19
    6262:	ee 24       	eor	r14, r14
    6264:	ff 24       	eor	r15, r15
    6266:	a7 01       	movw	r20, r14
    6268:	e7 01       	movw	r28, r14
    626a:	05 90       	lpm	r0, Z+
    626c:	08 94       	sec
    626e:	07 94       	ror	r0
    6270:	28 f4       	brcc	.+10     	; 0x627c <__ftoa_engine+0x80>
    6272:	36 0f       	add	r19, r22
    6274:	e7 1e       	adc	r14, r23
    6276:	f8 1e       	adc	r15, r24
    6278:	49 1f       	adc	r20, r25
    627a:	51 1d       	adc	r21, r1
    627c:	66 0f       	add	r22, r22
    627e:	77 1f       	adc	r23, r23
    6280:	88 1f       	adc	r24, r24
    6282:	99 1f       	adc	r25, r25
    6284:	06 94       	lsr	r0
    6286:	a1 f7       	brne	.-24     	; 0x6270 <__ftoa_engine+0x74>
    6288:	05 90       	lpm	r0, Z+
    628a:	07 94       	ror	r0
    628c:	28 f4       	brcc	.+10     	; 0x6298 <__ftoa_engine+0x9c>
    628e:	e7 0e       	add	r14, r23
    6290:	f8 1e       	adc	r15, r24
    6292:	49 1f       	adc	r20, r25
    6294:	56 1f       	adc	r21, r22
    6296:	c1 1d       	adc	r28, r1
    6298:	77 0f       	add	r23, r23
    629a:	88 1f       	adc	r24, r24
    629c:	99 1f       	adc	r25, r25
    629e:	66 1f       	adc	r22, r22
    62a0:	06 94       	lsr	r0
    62a2:	a1 f7       	brne	.-24     	; 0x628c <__ftoa_engine+0x90>
    62a4:	05 90       	lpm	r0, Z+
    62a6:	07 94       	ror	r0
    62a8:	28 f4       	brcc	.+10     	; 0x62b4 <__ftoa_engine+0xb8>
    62aa:	f8 0e       	add	r15, r24
    62ac:	49 1f       	adc	r20, r25
    62ae:	56 1f       	adc	r21, r22
    62b0:	c7 1f       	adc	r28, r23
    62b2:	d1 1d       	adc	r29, r1
    62b4:	88 0f       	add	r24, r24
    62b6:	99 1f       	adc	r25, r25
    62b8:	66 1f       	adc	r22, r22
    62ba:	77 1f       	adc	r23, r23
    62bc:	06 94       	lsr	r0
    62be:	a1 f7       	brne	.-24     	; 0x62a8 <__ftoa_engine+0xac>
    62c0:	05 90       	lpm	r0, Z+
    62c2:	07 94       	ror	r0
    62c4:	20 f4       	brcc	.+8      	; 0x62ce <__ftoa_engine+0xd2>
    62c6:	49 0f       	add	r20, r25
    62c8:	56 1f       	adc	r21, r22
    62ca:	c7 1f       	adc	r28, r23
    62cc:	d8 1f       	adc	r29, r24
    62ce:	99 0f       	add	r25, r25
    62d0:	66 1f       	adc	r22, r22
    62d2:	77 1f       	adc	r23, r23
    62d4:	88 1f       	adc	r24, r24
    62d6:	06 94       	lsr	r0
    62d8:	a9 f7       	brne	.-22     	; 0x62c4 <__ftoa_engine+0xc8>
    62da:	84 91       	lpm	r24, Z
    62dc:	10 95       	com	r17
    62de:	17 70       	andi	r17, 0x07	; 7
    62e0:	41 f0       	breq	.+16     	; 0x62f2 <__ftoa_engine+0xf6>
    62e2:	d6 95       	lsr	r29
    62e4:	c7 95       	ror	r28
    62e6:	57 95       	ror	r21
    62e8:	47 95       	ror	r20
    62ea:	f7 94       	ror	r15
    62ec:	e7 94       	ror	r14
    62ee:	1a 95       	dec	r17
    62f0:	c1 f7       	brne	.-16     	; 0x62e2 <__ftoa_engine+0xe6>
    62f2:	e2 ec       	ldi	r30, 0xC2	; 194
    62f4:	f1 e0       	ldi	r31, 0x01	; 1
    62f6:	68 94       	set
    62f8:	15 90       	lpm	r1, Z+
    62fa:	15 91       	lpm	r17, Z+
    62fc:	35 91       	lpm	r19, Z+
    62fe:	65 91       	lpm	r22, Z+
    6300:	95 91       	lpm	r25, Z+
    6302:	05 90       	lpm	r0, Z+
    6304:	7f e2       	ldi	r23, 0x2F	; 47
    6306:	73 95       	inc	r23
    6308:	e1 18       	sub	r14, r1
    630a:	f1 0a       	sbc	r15, r17
    630c:	43 0b       	sbc	r20, r19
    630e:	56 0b       	sbc	r21, r22
    6310:	c9 0b       	sbc	r28, r25
    6312:	d0 09       	sbc	r29, r0
    6314:	c0 f7       	brcc	.-16     	; 0x6306 <__ftoa_engine+0x10a>
    6316:	e1 0c       	add	r14, r1
    6318:	f1 1e       	adc	r15, r17
    631a:	43 1f       	adc	r20, r19
    631c:	56 1f       	adc	r21, r22
    631e:	c9 1f       	adc	r28, r25
    6320:	d0 1d       	adc	r29, r0
    6322:	7e f4       	brtc	.+30     	; 0x6342 <__ftoa_engine+0x146>
    6324:	70 33       	cpi	r23, 0x30	; 48
    6326:	11 f4       	brne	.+4      	; 0x632c <__ftoa_engine+0x130>
    6328:	8a 95       	dec	r24
    632a:	e6 cf       	rjmp	.-52     	; 0x62f8 <__ftoa_engine+0xfc>
    632c:	e8 94       	clt
    632e:	01 50       	subi	r16, 0x01	; 1
    6330:	30 f0       	brcs	.+12     	; 0x633e <__ftoa_engine+0x142>
    6332:	08 0f       	add	r16, r24
    6334:	0a f4       	brpl	.+2      	; 0x6338 <__ftoa_engine+0x13c>
    6336:	00 27       	eor	r16, r16
    6338:	02 17       	cp	r16, r18
    633a:	08 f4       	brcc	.+2      	; 0x633e <__ftoa_engine+0x142>
    633c:	20 2f       	mov	r18, r16
    633e:	23 95       	inc	r18
    6340:	02 2f       	mov	r16, r18
    6342:	7a 33       	cpi	r23, 0x3A	; 58
    6344:	28 f0       	brcs	.+10     	; 0x6350 <__ftoa_engine+0x154>
    6346:	79 e3       	ldi	r23, 0x39	; 57
    6348:	7d 93       	st	X+, r23
    634a:	2a 95       	dec	r18
    634c:	e9 f7       	brne	.-6      	; 0x6348 <__ftoa_engine+0x14c>
    634e:	10 c0       	rjmp	.+32     	; 0x6370 <__ftoa_engine+0x174>
    6350:	7d 93       	st	X+, r23
    6352:	2a 95       	dec	r18
    6354:	89 f6       	brne	.-94     	; 0x62f8 <__ftoa_engine+0xfc>
    6356:	06 94       	lsr	r0
    6358:	97 95       	ror	r25
    635a:	67 95       	ror	r22
    635c:	37 95       	ror	r19
    635e:	17 95       	ror	r17
    6360:	17 94       	ror	r1
    6362:	e1 18       	sub	r14, r1
    6364:	f1 0a       	sbc	r15, r17
    6366:	43 0b       	sbc	r20, r19
    6368:	56 0b       	sbc	r21, r22
    636a:	c9 0b       	sbc	r28, r25
    636c:	d0 09       	sbc	r29, r0
    636e:	98 f0       	brcs	.+38     	; 0x6396 <__ftoa_engine+0x19a>
    6370:	23 95       	inc	r18
    6372:	7e 91       	ld	r23, -X
    6374:	73 95       	inc	r23
    6376:	7a 33       	cpi	r23, 0x3A	; 58
    6378:	08 f0       	brcs	.+2      	; 0x637c <__ftoa_engine+0x180>
    637a:	70 e3       	ldi	r23, 0x30	; 48
    637c:	7c 93       	st	X, r23
    637e:	20 13       	cpse	r18, r16
    6380:	b8 f7       	brcc	.-18     	; 0x6370 <__ftoa_engine+0x174>
    6382:	7e 91       	ld	r23, -X
    6384:	70 61       	ori	r23, 0x10	; 16
    6386:	7d 93       	st	X+, r23
    6388:	30 f0       	brcs	.+12     	; 0x6396 <__ftoa_engine+0x19a>
    638a:	83 95       	inc	r24
    638c:	71 e3       	ldi	r23, 0x31	; 49
    638e:	7d 93       	st	X+, r23
    6390:	70 e3       	ldi	r23, 0x30	; 48
    6392:	2a 95       	dec	r18
    6394:	e1 f7       	brne	.-8      	; 0x638e <__ftoa_engine+0x192>
    6396:	11 24       	eor	r1, r1
    6398:	ef 90       	pop	r14
    639a:	ff 90       	pop	r15
    639c:	0f 91       	pop	r16
    639e:	1f 91       	pop	r17
    63a0:	cf 91       	pop	r28
    63a2:	df 91       	pop	r29
    63a4:	99 27       	eor	r25, r25
    63a6:	87 fd       	sbrc	r24, 7
    63a8:	90 95       	com	r25
    63aa:	08 95       	ret

000063ac <isspace>:
    63ac:	91 11       	cpse	r25, r1
    63ae:	0c 94 ae 34 	jmp	0x695c	; 0x695c <__ctype_isfalse>
    63b2:	80 32       	cpi	r24, 0x20	; 32
    63b4:	19 f0       	breq	.+6      	; 0x63bc <isspace+0x10>
    63b6:	89 50       	subi	r24, 0x09	; 9
    63b8:	85 50       	subi	r24, 0x05	; 5
    63ba:	c8 f7       	brcc	.-14     	; 0x63ae <isspace+0x2>
    63bc:	08 95       	ret

000063be <strnlen_P>:
    63be:	fc 01       	movw	r30, r24
    63c0:	05 90       	lpm	r0, Z+
    63c2:	61 50       	subi	r22, 0x01	; 1
    63c4:	70 40       	sbci	r23, 0x00	; 0
    63c6:	01 10       	cpse	r0, r1
    63c8:	d8 f7       	brcc	.-10     	; 0x63c0 <strnlen_P+0x2>
    63ca:	80 95       	com	r24
    63cc:	90 95       	com	r25
    63ce:	8e 0f       	add	r24, r30
    63d0:	9f 1f       	adc	r25, r31
    63d2:	08 95       	ret

000063d4 <memcmp>:
    63d4:	fb 01       	movw	r30, r22
    63d6:	dc 01       	movw	r26, r24
    63d8:	04 c0       	rjmp	.+8      	; 0x63e2 <memcmp+0xe>
    63da:	8d 91       	ld	r24, X+
    63dc:	01 90       	ld	r0, Z+
    63de:	80 19       	sub	r24, r0
    63e0:	21 f4       	brne	.+8      	; 0x63ea <memcmp+0x16>
    63e2:	41 50       	subi	r20, 0x01	; 1
    63e4:	50 40       	sbci	r21, 0x00	; 0
    63e6:	c8 f7       	brcc	.-14     	; 0x63da <memcmp+0x6>
    63e8:	88 1b       	sub	r24, r24
    63ea:	99 0b       	sbc	r25, r25
    63ec:	08 95       	ret

000063ee <memcpy>:
    63ee:	fb 01       	movw	r30, r22
    63f0:	dc 01       	movw	r26, r24
    63f2:	02 c0       	rjmp	.+4      	; 0x63f8 <memcpy+0xa>
    63f4:	01 90       	ld	r0, Z+
    63f6:	0d 92       	st	X+, r0
    63f8:	41 50       	subi	r20, 0x01	; 1
    63fa:	50 40       	sbci	r21, 0x00	; 0
    63fc:	d8 f7       	brcc	.-10     	; 0x63f4 <memcpy+0x6>
    63fe:	08 95       	ret

00006400 <strchr>:
    6400:	fc 01       	movw	r30, r24
    6402:	81 91       	ld	r24, Z+
    6404:	86 17       	cp	r24, r22
    6406:	21 f0       	breq	.+8      	; 0x6410 <strchr+0x10>
    6408:	88 23       	and	r24, r24
    640a:	d9 f7       	brne	.-10     	; 0x6402 <strchr+0x2>
    640c:	99 27       	eor	r25, r25
    640e:	08 95       	ret
    6410:	31 97       	sbiw	r30, 0x01	; 1
    6412:	cf 01       	movw	r24, r30
    6414:	08 95       	ret

00006416 <strcmp>:
    6416:	fb 01       	movw	r30, r22
    6418:	dc 01       	movw	r26, r24
    641a:	8d 91       	ld	r24, X+
    641c:	01 90       	ld	r0, Z+
    641e:	80 19       	sub	r24, r0
    6420:	01 10       	cpse	r0, r1
    6422:	d9 f3       	breq	.-10     	; 0x641a <strcmp+0x4>
    6424:	99 0b       	sbc	r25, r25
    6426:	08 95       	ret

00006428 <strcpy>:
    6428:	fb 01       	movw	r30, r22
    642a:	dc 01       	movw	r26, r24
    642c:	01 90       	ld	r0, Z+
    642e:	0d 92       	st	X+, r0
    6430:	00 20       	and	r0, r0
    6432:	e1 f7       	brne	.-8      	; 0x642c <strcpy+0x4>
    6434:	08 95       	ret

00006436 <strncpy>:
    6436:	fb 01       	movw	r30, r22
    6438:	dc 01       	movw	r26, r24
    643a:	41 50       	subi	r20, 0x01	; 1
    643c:	50 40       	sbci	r21, 0x00	; 0
    643e:	48 f0       	brcs	.+18     	; 0x6452 <strncpy+0x1c>
    6440:	01 90       	ld	r0, Z+
    6442:	0d 92       	st	X+, r0
    6444:	00 20       	and	r0, r0
    6446:	c9 f7       	brne	.-14     	; 0x643a <strncpy+0x4>
    6448:	01 c0       	rjmp	.+2      	; 0x644c <strncpy+0x16>
    644a:	1d 92       	st	X+, r1
    644c:	41 50       	subi	r20, 0x01	; 1
    644e:	50 40       	sbci	r21, 0x00	; 0
    6450:	e0 f7       	brcc	.-8      	; 0x644a <strncpy+0x14>
    6452:	08 95       	ret

00006454 <strnlen>:
    6454:	fc 01       	movw	r30, r24
    6456:	61 50       	subi	r22, 0x01	; 1
    6458:	70 40       	sbci	r23, 0x00	; 0
    645a:	01 90       	ld	r0, Z+
    645c:	01 10       	cpse	r0, r1
    645e:	d8 f7       	brcc	.-10     	; 0x6456 <strnlen+0x2>
    6460:	80 95       	com	r24
    6462:	90 95       	com	r25
    6464:	8e 0f       	add	r24, r30
    6466:	9f 1f       	adc	r25, r31
    6468:	08 95       	ret

0000646a <strstr>:
    646a:	fb 01       	movw	r30, r22
    646c:	51 91       	ld	r21, Z+
    646e:	55 23       	and	r21, r21
    6470:	a9 f0       	breq	.+42     	; 0x649c <strstr+0x32>
    6472:	bf 01       	movw	r22, r30
    6474:	dc 01       	movw	r26, r24
    6476:	4d 91       	ld	r20, X+
    6478:	45 17       	cp	r20, r21
    647a:	41 11       	cpse	r20, r1
    647c:	e1 f7       	brne	.-8      	; 0x6476 <strstr+0xc>
    647e:	59 f4       	brne	.+22     	; 0x6496 <strstr+0x2c>
    6480:	cd 01       	movw	r24, r26
    6482:	01 90       	ld	r0, Z+
    6484:	00 20       	and	r0, r0
    6486:	49 f0       	breq	.+18     	; 0x649a <strstr+0x30>
    6488:	4d 91       	ld	r20, X+
    648a:	40 15       	cp	r20, r0
    648c:	41 11       	cpse	r20, r1
    648e:	c9 f3       	breq	.-14     	; 0x6482 <strstr+0x18>
    6490:	fb 01       	movw	r30, r22
    6492:	41 11       	cpse	r20, r1
    6494:	ef cf       	rjmp	.-34     	; 0x6474 <strstr+0xa>
    6496:	81 e0       	ldi	r24, 0x01	; 1
    6498:	90 e0       	ldi	r25, 0x00	; 0
    649a:	01 97       	sbiw	r24, 0x01	; 1
    649c:	08 95       	ret

0000649e <__mulhi_const_10>:
    649e:	7a e0       	ldi	r23, 0x0A	; 10
    64a0:	97 9f       	mul	r25, r23
    64a2:	90 2d       	mov	r25, r0
    64a4:	87 9f       	mul	r24, r23
    64a6:	80 2d       	mov	r24, r0
    64a8:	91 0d       	add	r25, r1
    64aa:	11 24       	eor	r1, r1
    64ac:	08 95       	ret

000064ae <__ultoa_ncheck>:
    64ae:	bb 27       	eor	r27, r27

000064b0 <__ultoa_common>:
    64b0:	fa 01       	movw	r30, r20
    64b2:	a6 2f       	mov	r26, r22
    64b4:	62 17       	cp	r22, r18
    64b6:	71 05       	cpc	r23, r1
    64b8:	81 05       	cpc	r24, r1
    64ba:	91 05       	cpc	r25, r1
    64bc:	33 0b       	sbc	r19, r19
    64be:	30 fb       	bst	r19, 0
    64c0:	66 f0       	brts	.+24     	; 0x64da <__ultoa_common+0x2a>
    64c2:	aa 27       	eor	r26, r26
    64c4:	66 0f       	add	r22, r22
    64c6:	77 1f       	adc	r23, r23
    64c8:	88 1f       	adc	r24, r24
    64ca:	99 1f       	adc	r25, r25
    64cc:	aa 1f       	adc	r26, r26
    64ce:	a2 17       	cp	r26, r18
    64d0:	10 f0       	brcs	.+4      	; 0x64d6 <__ultoa_common+0x26>
    64d2:	a2 1b       	sub	r26, r18
    64d4:	63 95       	inc	r22
    64d6:	38 50       	subi	r19, 0x08	; 8
    64d8:	a9 f7       	brne	.-22     	; 0x64c4 <__ultoa_common+0x14>
    64da:	a0 5d       	subi	r26, 0xD0	; 208
    64dc:	aa 33       	cpi	r26, 0x3A	; 58
    64de:	08 f0       	brcs	.+2      	; 0x64e2 <__ultoa_common+0x32>
    64e0:	a9 5d       	subi	r26, 0xD9	; 217
    64e2:	a1 93       	st	Z+, r26
    64e4:	36 f7       	brtc	.-52     	; 0x64b2 <__ultoa_common+0x2>
    64e6:	b1 11       	cpse	r27, r1
    64e8:	b1 93       	st	Z+, r27
    64ea:	10 82       	st	Z, r1
    64ec:	ca 01       	movw	r24, r20
    64ee:	0c 94 c9 34 	jmp	0x6992	; 0x6992 <strrev>

000064f2 <fputc>:
    64f2:	0f 93       	push	r16
    64f4:	1f 93       	push	r17
    64f6:	cf 93       	push	r28
    64f8:	df 93       	push	r29
    64fa:	fb 01       	movw	r30, r22
    64fc:	23 81       	ldd	r18, Z+3	; 0x03
    64fe:	21 fd       	sbrc	r18, 1
    6500:	03 c0       	rjmp	.+6      	; 0x6508 <fputc+0x16>
    6502:	8f ef       	ldi	r24, 0xFF	; 255
    6504:	9f ef       	ldi	r25, 0xFF	; 255
    6506:	28 c0       	rjmp	.+80     	; 0x6558 <fputc+0x66>
    6508:	22 ff       	sbrs	r18, 2
    650a:	16 c0       	rjmp	.+44     	; 0x6538 <fputc+0x46>
    650c:	46 81       	ldd	r20, Z+6	; 0x06
    650e:	57 81       	ldd	r21, Z+7	; 0x07
    6510:	24 81       	ldd	r18, Z+4	; 0x04
    6512:	35 81       	ldd	r19, Z+5	; 0x05
    6514:	42 17       	cp	r20, r18
    6516:	53 07       	cpc	r21, r19
    6518:	44 f4       	brge	.+16     	; 0x652a <fputc+0x38>
    651a:	a0 81       	ld	r26, Z
    651c:	b1 81       	ldd	r27, Z+1	; 0x01
    651e:	9d 01       	movw	r18, r26
    6520:	2f 5f       	subi	r18, 0xFF	; 255
    6522:	3f 4f       	sbci	r19, 0xFF	; 255
    6524:	31 83       	std	Z+1, r19	; 0x01
    6526:	20 83       	st	Z, r18
    6528:	8c 93       	st	X, r24
    652a:	26 81       	ldd	r18, Z+6	; 0x06
    652c:	37 81       	ldd	r19, Z+7	; 0x07
    652e:	2f 5f       	subi	r18, 0xFF	; 255
    6530:	3f 4f       	sbci	r19, 0xFF	; 255
    6532:	37 83       	std	Z+7, r19	; 0x07
    6534:	26 83       	std	Z+6, r18	; 0x06
    6536:	10 c0       	rjmp	.+32     	; 0x6558 <fputc+0x66>
    6538:	eb 01       	movw	r28, r22
    653a:	09 2f       	mov	r16, r25
    653c:	18 2f       	mov	r17, r24
    653e:	00 84       	ldd	r0, Z+8	; 0x08
    6540:	f1 85       	ldd	r31, Z+9	; 0x09
    6542:	e0 2d       	mov	r30, r0
    6544:	09 95       	icall
    6546:	89 2b       	or	r24, r25
    6548:	e1 f6       	brne	.-72     	; 0x6502 <fputc+0x10>
    654a:	8e 81       	ldd	r24, Y+6	; 0x06
    654c:	9f 81       	ldd	r25, Y+7	; 0x07
    654e:	01 96       	adiw	r24, 0x01	; 1
    6550:	9f 83       	std	Y+7, r25	; 0x07
    6552:	8e 83       	std	Y+6, r24	; 0x06
    6554:	81 2f       	mov	r24, r17
    6556:	90 2f       	mov	r25, r16
    6558:	df 91       	pop	r29
    655a:	cf 91       	pop	r28
    655c:	1f 91       	pop	r17
    655e:	0f 91       	pop	r16
    6560:	08 95       	ret

00006562 <sprintf>:
    6562:	0f 93       	push	r16
    6564:	1f 93       	push	r17
    6566:	cf 93       	push	r28
    6568:	df 93       	push	r29
    656a:	cd b7       	in	r28, 0x3d	; 61
    656c:	de b7       	in	r29, 0x3e	; 62
    656e:	2e 97       	sbiw	r28, 0x0e	; 14
    6570:	0f b6       	in	r0, 0x3f	; 63
    6572:	f8 94       	cli
    6574:	de bf       	out	0x3e, r29	; 62
    6576:	0f be       	out	0x3f, r0	; 63
    6578:	cd bf       	out	0x3d, r28	; 61
    657a:	0d 89       	ldd	r16, Y+21	; 0x15
    657c:	1e 89       	ldd	r17, Y+22	; 0x16
    657e:	86 e0       	ldi	r24, 0x06	; 6
    6580:	8c 83       	std	Y+4, r24	; 0x04
    6582:	1a 83       	std	Y+2, r17	; 0x02
    6584:	09 83       	std	Y+1, r16	; 0x01
    6586:	8f ef       	ldi	r24, 0xFF	; 255
    6588:	9f e7       	ldi	r25, 0x7F	; 127
    658a:	9e 83       	std	Y+6, r25	; 0x06
    658c:	8d 83       	std	Y+5, r24	; 0x05
    658e:	ae 01       	movw	r20, r28
    6590:	47 5e       	subi	r20, 0xE7	; 231
    6592:	5f 4f       	sbci	r21, 0xFF	; 255
    6594:	6f 89       	ldd	r22, Y+23	; 0x17
    6596:	78 8d       	ldd	r23, Y+24	; 0x18
    6598:	ce 01       	movw	r24, r28
    659a:	01 96       	adiw	r24, 0x01	; 1
    659c:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <vfprintf>
    65a0:	2f 81       	ldd	r18, Y+7	; 0x07
    65a2:	38 85       	ldd	r19, Y+8	; 0x08
    65a4:	f8 01       	movw	r30, r16
    65a6:	e2 0f       	add	r30, r18
    65a8:	f3 1f       	adc	r31, r19
    65aa:	10 82       	st	Z, r1
    65ac:	2e 96       	adiw	r28, 0x0e	; 14
    65ae:	0f b6       	in	r0, 0x3f	; 63
    65b0:	f8 94       	cli
    65b2:	de bf       	out	0x3e, r29	; 62
    65b4:	0f be       	out	0x3f, r0	; 63
    65b6:	cd bf       	out	0x3d, r28	; 61
    65b8:	df 91       	pop	r29
    65ba:	cf 91       	pop	r28
    65bc:	1f 91       	pop	r17
    65be:	0f 91       	pop	r16
    65c0:	08 95       	ret

000065c2 <__ultoa_invert>:
    65c2:	fa 01       	movw	r30, r20
    65c4:	aa 27       	eor	r26, r26
    65c6:	28 30       	cpi	r18, 0x08	; 8
    65c8:	51 f1       	breq	.+84     	; 0x661e <__ultoa_invert+0x5c>
    65ca:	20 31       	cpi	r18, 0x10	; 16
    65cc:	81 f1       	breq	.+96     	; 0x662e <__ultoa_invert+0x6c>
    65ce:	e8 94       	clt
    65d0:	6f 93       	push	r22
    65d2:	6e 7f       	andi	r22, 0xFE	; 254
    65d4:	6e 5f       	subi	r22, 0xFE	; 254
    65d6:	7f 4f       	sbci	r23, 0xFF	; 255
    65d8:	8f 4f       	sbci	r24, 0xFF	; 255
    65da:	9f 4f       	sbci	r25, 0xFF	; 255
    65dc:	af 4f       	sbci	r26, 0xFF	; 255
    65de:	b1 e0       	ldi	r27, 0x01	; 1
    65e0:	3e d0       	rcall	.+124    	; 0x665e <__ultoa_invert+0x9c>
    65e2:	b4 e0       	ldi	r27, 0x04	; 4
    65e4:	3c d0       	rcall	.+120    	; 0x665e <__ultoa_invert+0x9c>
    65e6:	67 0f       	add	r22, r23
    65e8:	78 1f       	adc	r23, r24
    65ea:	89 1f       	adc	r24, r25
    65ec:	9a 1f       	adc	r25, r26
    65ee:	a1 1d       	adc	r26, r1
    65f0:	68 0f       	add	r22, r24
    65f2:	79 1f       	adc	r23, r25
    65f4:	8a 1f       	adc	r24, r26
    65f6:	91 1d       	adc	r25, r1
    65f8:	a1 1d       	adc	r26, r1
    65fa:	6a 0f       	add	r22, r26
    65fc:	71 1d       	adc	r23, r1
    65fe:	81 1d       	adc	r24, r1
    6600:	91 1d       	adc	r25, r1
    6602:	a1 1d       	adc	r26, r1
    6604:	20 d0       	rcall	.+64     	; 0x6646 <__ultoa_invert+0x84>
    6606:	09 f4       	brne	.+2      	; 0x660a <__ultoa_invert+0x48>
    6608:	68 94       	set
    660a:	3f 91       	pop	r19
    660c:	2a e0       	ldi	r18, 0x0A	; 10
    660e:	26 9f       	mul	r18, r22
    6610:	11 24       	eor	r1, r1
    6612:	30 19       	sub	r19, r0
    6614:	30 5d       	subi	r19, 0xD0	; 208
    6616:	31 93       	st	Z+, r19
    6618:	de f6       	brtc	.-74     	; 0x65d0 <__ultoa_invert+0xe>
    661a:	cf 01       	movw	r24, r30
    661c:	08 95       	ret
    661e:	46 2f       	mov	r20, r22
    6620:	47 70       	andi	r20, 0x07	; 7
    6622:	40 5d       	subi	r20, 0xD0	; 208
    6624:	41 93       	st	Z+, r20
    6626:	b3 e0       	ldi	r27, 0x03	; 3
    6628:	0f d0       	rcall	.+30     	; 0x6648 <__ultoa_invert+0x86>
    662a:	c9 f7       	brne	.-14     	; 0x661e <__ultoa_invert+0x5c>
    662c:	f6 cf       	rjmp	.-20     	; 0x661a <__ultoa_invert+0x58>
    662e:	46 2f       	mov	r20, r22
    6630:	4f 70       	andi	r20, 0x0F	; 15
    6632:	40 5d       	subi	r20, 0xD0	; 208
    6634:	4a 33       	cpi	r20, 0x3A	; 58
    6636:	18 f0       	brcs	.+6      	; 0x663e <__ultoa_invert+0x7c>
    6638:	49 5d       	subi	r20, 0xD9	; 217
    663a:	31 fd       	sbrc	r19, 1
    663c:	40 52       	subi	r20, 0x20	; 32
    663e:	41 93       	st	Z+, r20
    6640:	02 d0       	rcall	.+4      	; 0x6646 <__ultoa_invert+0x84>
    6642:	a9 f7       	brne	.-22     	; 0x662e <__ultoa_invert+0x6c>
    6644:	ea cf       	rjmp	.-44     	; 0x661a <__ultoa_invert+0x58>
    6646:	b4 e0       	ldi	r27, 0x04	; 4
    6648:	a6 95       	lsr	r26
    664a:	97 95       	ror	r25
    664c:	87 95       	ror	r24
    664e:	77 95       	ror	r23
    6650:	67 95       	ror	r22
    6652:	ba 95       	dec	r27
    6654:	c9 f7       	brne	.-14     	; 0x6648 <__ultoa_invert+0x86>
    6656:	00 97       	sbiw	r24, 0x00	; 0
    6658:	61 05       	cpc	r22, r1
    665a:	71 05       	cpc	r23, r1
    665c:	08 95       	ret
    665e:	9b 01       	movw	r18, r22
    6660:	ac 01       	movw	r20, r24
    6662:	0a 2e       	mov	r0, r26
    6664:	06 94       	lsr	r0
    6666:	57 95       	ror	r21
    6668:	47 95       	ror	r20
    666a:	37 95       	ror	r19
    666c:	27 95       	ror	r18
    666e:	ba 95       	dec	r27
    6670:	c9 f7       	brne	.-14     	; 0x6664 <__ultoa_invert+0xa2>
    6672:	62 0f       	add	r22, r18
    6674:	73 1f       	adc	r23, r19
    6676:	84 1f       	adc	r24, r20
    6678:	95 1f       	adc	r25, r21
    667a:	a0 1d       	adc	r26, r0
    667c:	08 95       	ret

0000667e <strtod>:
    667e:	6f 92       	push	r6
    6680:	7f 92       	push	r7
    6682:	8f 92       	push	r8
    6684:	9f 92       	push	r9
    6686:	af 92       	push	r10
    6688:	bf 92       	push	r11
    668a:	cf 92       	push	r12
    668c:	df 92       	push	r13
    668e:	ef 92       	push	r14
    6690:	ff 92       	push	r15
    6692:	0f 93       	push	r16
    6694:	1f 93       	push	r17
    6696:	cf 93       	push	r28
    6698:	df 93       	push	r29
    669a:	ec 01       	movw	r28, r24
    669c:	7b 01       	movw	r14, r22
    669e:	61 15       	cp	r22, r1
    66a0:	71 05       	cpc	r23, r1
    66a2:	19 f0       	breq	.+6      	; 0x66aa <strtod+0x2c>
    66a4:	db 01       	movw	r26, r22
    66a6:	8d 93       	st	X+, r24
    66a8:	9c 93       	st	X, r25
    66aa:	8e 01       	movw	r16, r28
    66ac:	0f 5f       	subi	r16, 0xFF	; 255
    66ae:	1f 4f       	sbci	r17, 0xFF	; 255
    66b0:	78 80       	ld	r7, Y
    66b2:	87 2d       	mov	r24, r7
    66b4:	90 e0       	ldi	r25, 0x00	; 0
    66b6:	0e 94 d6 31 	call	0x63ac	; 0x63ac <isspace>
    66ba:	89 2b       	or	r24, r25
    66bc:	11 f0       	breq	.+4      	; 0x66c2 <strtod+0x44>
    66be:	e8 01       	movw	r28, r16
    66c0:	f4 cf       	rjmp	.-24     	; 0x66aa <strtod+0x2c>
    66c2:	bd e2       	ldi	r27, 0x2D	; 45
    66c4:	7b 12       	cpse	r7, r27
    66c6:	05 c0       	rjmp	.+10     	; 0x66d2 <strtod+0x54>
    66c8:	0f 5f       	subi	r16, 0xFF	; 255
    66ca:	1f 4f       	sbci	r17, 0xFF	; 255
    66cc:	79 80       	ldd	r7, Y+1	; 0x01
    66ce:	c1 e0       	ldi	r28, 0x01	; 1
    66d0:	08 c0       	rjmp	.+16     	; 0x66e2 <strtod+0x64>
    66d2:	eb e2       	ldi	r30, 0x2B	; 43
    66d4:	7e 12       	cpse	r7, r30
    66d6:	04 c0       	rjmp	.+8      	; 0x66e0 <strtod+0x62>
    66d8:	8e 01       	movw	r16, r28
    66da:	0e 5f       	subi	r16, 0xFE	; 254
    66dc:	1f 4f       	sbci	r17, 0xFF	; 255
    66de:	79 80       	ldd	r7, Y+1	; 0x01
    66e0:	c0 e0       	ldi	r28, 0x00	; 0
    66e2:	68 01       	movw	r12, r16
    66e4:	f1 e0       	ldi	r31, 0x01	; 1
    66e6:	cf 1a       	sub	r12, r31
    66e8:	d1 08       	sbc	r13, r1
    66ea:	43 e0       	ldi	r20, 0x03	; 3
    66ec:	50 e0       	ldi	r21, 0x00	; 0
    66ee:	64 ec       	ldi	r22, 0xC4	; 196
    66f0:	72 e0       	ldi	r23, 0x02	; 2
    66f2:	c6 01       	movw	r24, r12
    66f4:	0e 94 b1 34 	call	0x6962	; 0x6962 <strncasecmp_P>
    66f8:	89 2b       	or	r24, r25
    66fa:	f1 f4       	brne	.+60     	; 0x6738 <strtod+0xba>
    66fc:	68 01       	movw	r12, r16
    66fe:	22 e0       	ldi	r18, 0x02	; 2
    6700:	c2 0e       	add	r12, r18
    6702:	d1 1c       	adc	r13, r1
    6704:	45 e0       	ldi	r20, 0x05	; 5
    6706:	50 e0       	ldi	r21, 0x00	; 0
    6708:	6f eb       	ldi	r22, 0xBF	; 191
    670a:	72 e0       	ldi	r23, 0x02	; 2
    670c:	c6 01       	movw	r24, r12
    670e:	0e 94 b1 34 	call	0x6962	; 0x6962 <strncasecmp_P>
    6712:	89 2b       	or	r24, r25
    6714:	21 f4       	brne	.+8      	; 0x671e <strtod+0xa0>
    6716:	68 01       	movw	r12, r16
    6718:	87 e0       	ldi	r24, 0x07	; 7
    671a:	c8 0e       	add	r12, r24
    671c:	d1 1c       	adc	r13, r1
    671e:	e1 14       	cp	r14, r1
    6720:	f1 04       	cpc	r15, r1
    6722:	19 f0       	breq	.+6      	; 0x672a <strtod+0xac>
    6724:	d7 01       	movw	r26, r14
    6726:	cd 92       	st	X+, r12
    6728:	dc 92       	st	X, r13
    672a:	c1 11       	cpse	r28, r1
    672c:	ff c0       	rjmp	.+510    	; 0x692c <strtod+0x2ae>
    672e:	60 e0       	ldi	r22, 0x00	; 0
    6730:	70 e0       	ldi	r23, 0x00	; 0
    6732:	80 e8       	ldi	r24, 0x80	; 128
    6734:	9f e7       	ldi	r25, 0x7F	; 127
    6736:	03 c1       	rjmp	.+518    	; 0x693e <strtod+0x2c0>
    6738:	43 e0       	ldi	r20, 0x03	; 3
    673a:	50 e0       	ldi	r21, 0x00	; 0
    673c:	6c eb       	ldi	r22, 0xBC	; 188
    673e:	72 e0       	ldi	r23, 0x02	; 2
    6740:	c6 01       	movw	r24, r12
    6742:	0e 94 b1 34 	call	0x6962	; 0x6962 <strncasecmp_P>
    6746:	89 2b       	or	r24, r25
    6748:	51 f4       	brne	.+20     	; 0x675e <strtod+0xe0>
    674a:	e1 14       	cp	r14, r1
    674c:	f1 04       	cpc	r15, r1
    674e:	09 f4       	brne	.+2      	; 0x6752 <strtod+0xd4>
    6750:	f2 c0       	rjmp	.+484    	; 0x6936 <strtod+0x2b8>
    6752:	0e 5f       	subi	r16, 0xFE	; 254
    6754:	1f 4f       	sbci	r17, 0xFF	; 255
    6756:	f7 01       	movw	r30, r14
    6758:	11 83       	std	Z+1, r17	; 0x01
    675a:	00 83       	st	Z, r16
    675c:	ec c0       	rjmp	.+472    	; 0x6936 <strtod+0x2b8>
    675e:	68 01       	movw	r12, r16
    6760:	60 e0       	ldi	r22, 0x00	; 0
    6762:	70 e0       	ldi	r23, 0x00	; 0
    6764:	cb 01       	movw	r24, r22
    6766:	00 e0       	ldi	r16, 0x00	; 0
    6768:	10 e0       	ldi	r17, 0x00	; 0
    676a:	f6 01       	movw	r30, r12
    676c:	d0 ed       	ldi	r29, 0xD0	; 208
    676e:	d7 0d       	add	r29, r7
    6770:	da 30       	cpi	r29, 0x0A	; 10
    6772:	58 f5       	brcc	.+86     	; 0x67ca <strtod+0x14c>
    6774:	2c 2f       	mov	r18, r28
    6776:	22 60       	ori	r18, 0x02	; 2
    6778:	62 2e       	mov	r6, r18
    677a:	2c 2f       	mov	r18, r28
    677c:	28 70       	andi	r18, 0x08	; 8
    677e:	c2 ff       	sbrs	r28, 2
    6780:	05 c0       	rjmp	.+10     	; 0x678c <strtod+0x10e>
    6782:	21 11       	cpse	r18, r1
    6784:	28 c0       	rjmp	.+80     	; 0x67d6 <strtod+0x158>
    6786:	0f 5f       	subi	r16, 0xFF	; 255
    6788:	1f 4f       	sbci	r17, 0xFF	; 255
    678a:	25 c0       	rjmp	.+74     	; 0x67d6 <strtod+0x158>
    678c:	22 23       	and	r18, r18
    678e:	11 f0       	breq	.+4      	; 0x6794 <strtod+0x116>
    6790:	01 50       	subi	r16, 0x01	; 1
    6792:	11 09       	sbc	r17, r1
    6794:	a5 e0       	ldi	r26, 0x05	; 5
    6796:	b0 e0       	ldi	r27, 0x00	; 0
    6798:	9b 01       	movw	r18, r22
    679a:	ac 01       	movw	r20, r24
    679c:	0e 94 6b 35 	call	0x6ad6	; 0x6ad6 <__muluhisi3>
    67a0:	4b 01       	movw	r8, r22
    67a2:	5c 01       	movw	r10, r24
    67a4:	88 0c       	add	r8, r8
    67a6:	99 1c       	adc	r9, r9
    67a8:	aa 1c       	adc	r10, r10
    67aa:	bb 1c       	adc	r11, r11
    67ac:	c5 01       	movw	r24, r10
    67ae:	b4 01       	movw	r22, r8
    67b0:	6d 0f       	add	r22, r29
    67b2:	71 1d       	adc	r23, r1
    67b4:	81 1d       	adc	r24, r1
    67b6:	91 1d       	adc	r25, r1
    67b8:	68 39       	cpi	r22, 0x98	; 152
    67ba:	a9 e9       	ldi	r26, 0x99	; 153
    67bc:	7a 07       	cpc	r23, r26
    67be:	8a 07       	cpc	r24, r26
    67c0:	a9 e1       	ldi	r26, 0x19	; 25
    67c2:	9a 07       	cpc	r25, r26
    67c4:	40 f0       	brcs	.+16     	; 0x67d6 <strtod+0x158>
    67c6:	c6 60       	ori	r28, 0x06	; 6
    67c8:	05 c0       	rjmp	.+10     	; 0x67d4 <strtod+0x156>
    67ca:	de 3f       	cpi	r29, 0xFE	; 254
    67cc:	51 f4       	brne	.+20     	; 0x67e2 <strtod+0x164>
    67ce:	c3 fd       	sbrc	r28, 3
    67d0:	44 c0       	rjmp	.+136    	; 0x685a <strtod+0x1dc>
    67d2:	c8 60       	ori	r28, 0x08	; 8
    67d4:	6c 2e       	mov	r6, r28
    67d6:	bf ef       	ldi	r27, 0xFF	; 255
    67d8:	cb 1a       	sub	r12, r27
    67da:	db 0a       	sbc	r13, r27
    67dc:	70 80       	ld	r7, Z
    67de:	c6 2d       	mov	r28, r6
    67e0:	c4 cf       	rjmp	.-120    	; 0x676a <strtod+0xec>
    67e2:	2d 2f       	mov	r18, r29
    67e4:	2f 7d       	andi	r18, 0xDF	; 223
    67e6:	25 31       	cpi	r18, 0x15	; 21
    67e8:	c1 f5       	brne	.+112    	; 0x685a <strtod+0x1dc>
    67ea:	40 81       	ld	r20, Z
    67ec:	4d 32       	cpi	r20, 0x2D	; 45
    67ee:	11 f4       	brne	.+4      	; 0x67f4 <strtod+0x176>
    67f0:	c0 61       	ori	r28, 0x10	; 16
    67f2:	06 c0       	rjmp	.+12     	; 0x6800 <strtod+0x182>
    67f4:	4b 32       	cpi	r20, 0x2B	; 43
    67f6:	21 f0       	breq	.+8      	; 0x6800 <strtod+0x182>
    67f8:	31 96       	adiw	r30, 0x01	; 1
    67fa:	21 e0       	ldi	r18, 0x01	; 1
    67fc:	30 e0       	ldi	r19, 0x00	; 0
    67fe:	06 c0       	rjmp	.+12     	; 0x680c <strtod+0x18e>
    6800:	32 96       	adiw	r30, 0x02	; 2
    6802:	d6 01       	movw	r26, r12
    6804:	11 96       	adiw	r26, 0x01	; 1
    6806:	4c 91       	ld	r20, X
    6808:	22 e0       	ldi	r18, 0x02	; 2
    680a:	30 e0       	ldi	r19, 0x00	; 0
    680c:	a0 ed       	ldi	r26, 0xD0	; 208
    680e:	a4 0f       	add	r26, r20
    6810:	aa 30       	cpi	r26, 0x0A	; 10
    6812:	18 f0       	brcs	.+6      	; 0x681a <strtod+0x19c>
    6814:	e2 1b       	sub	r30, r18
    6816:	f3 0b       	sbc	r31, r19
    6818:	20 c0       	rjmp	.+64     	; 0x685a <strtod+0x1dc>
    681a:	40 e0       	ldi	r20, 0x00	; 0
    681c:	50 e0       	ldi	r21, 0x00	; 0
    681e:	40 38       	cpi	r20, 0x80	; 128
    6820:	bc e0       	ldi	r27, 0x0C	; 12
    6822:	5b 07       	cpc	r21, r27
    6824:	5c f4       	brge	.+22     	; 0x683c <strtod+0x1be>
    6826:	9a 01       	movw	r18, r20
    6828:	22 0f       	add	r18, r18
    682a:	33 1f       	adc	r19, r19
    682c:	22 0f       	add	r18, r18
    682e:	33 1f       	adc	r19, r19
    6830:	42 0f       	add	r20, r18
    6832:	53 1f       	adc	r21, r19
    6834:	44 0f       	add	r20, r20
    6836:	55 1f       	adc	r21, r21
    6838:	4a 0f       	add	r20, r26
    683a:	51 1d       	adc	r21, r1
    683c:	31 96       	adiw	r30, 0x01	; 1
    683e:	df 01       	movw	r26, r30
    6840:	11 97       	sbiw	r26, 0x01	; 1
    6842:	2c 91       	ld	r18, X
    6844:	a0 ed       	ldi	r26, 0xD0	; 208
    6846:	a2 0f       	add	r26, r18
    6848:	aa 30       	cpi	r26, 0x0A	; 10
    684a:	48 f3       	brcs	.-46     	; 0x681e <strtod+0x1a0>
    684c:	c4 ff       	sbrs	r28, 4
    684e:	03 c0       	rjmp	.+6      	; 0x6856 <strtod+0x1d8>
    6850:	51 95       	neg	r21
    6852:	41 95       	neg	r20
    6854:	51 09       	sbc	r21, r1
    6856:	04 0f       	add	r16, r20
    6858:	15 1f       	adc	r17, r21
    685a:	c1 ff       	sbrs	r28, 1
    685c:	07 c0       	rjmp	.+14     	; 0x686c <strtod+0x1ee>
    685e:	e1 14       	cp	r14, r1
    6860:	f1 04       	cpc	r15, r1
    6862:	21 f0       	breq	.+8      	; 0x686c <strtod+0x1ee>
    6864:	31 97       	sbiw	r30, 0x01	; 1
    6866:	d7 01       	movw	r26, r14
    6868:	ed 93       	st	X+, r30
    686a:	fc 93       	st	X, r31
    686c:	0e 94 b1 2c 	call	0x5962	; 0x5962 <__floatunsisf>
    6870:	c3 70       	andi	r28, 0x03	; 3
    6872:	c3 30       	cpi	r28, 0x03	; 3
    6874:	19 f0       	breq	.+6      	; 0x687c <strtod+0x1fe>
    6876:	6b 01       	movw	r12, r22
    6878:	7c 01       	movw	r14, r24
    687a:	06 c0       	rjmp	.+12     	; 0x6888 <strtod+0x20a>
    687c:	6b 01       	movw	r12, r22
    687e:	7c 01       	movw	r14, r24
    6880:	f7 fa       	bst	r15, 7
    6882:	f0 94       	com	r15
    6884:	f7 f8       	bld	r15, 7
    6886:	f0 94       	com	r15
    6888:	20 e0       	ldi	r18, 0x00	; 0
    688a:	30 e0       	ldi	r19, 0x00	; 0
    688c:	a9 01       	movw	r20, r18
    688e:	c7 01       	movw	r24, r14
    6890:	b6 01       	movw	r22, r12
    6892:	0e 94 d9 34 	call	0x69b2	; 0x69b2 <__cmpsf2>
    6896:	88 23       	and	r24, r24
    6898:	09 f4       	brne	.+2      	; 0x689c <strtod+0x21e>
    689a:	45 c0       	rjmp	.+138    	; 0x6926 <strtod+0x2a8>
    689c:	17 ff       	sbrs	r17, 7
    689e:	06 c0       	rjmp	.+12     	; 0x68ac <strtod+0x22e>
    68a0:	11 95       	neg	r17
    68a2:	01 95       	neg	r16
    68a4:	11 09       	sbc	r17, r1
    68a6:	cb ed       	ldi	r28, 0xDB	; 219
    68a8:	d2 e0       	ldi	r29, 0x02	; 2
    68aa:	02 c0       	rjmp	.+4      	; 0x68b0 <strtod+0x232>
    68ac:	c3 ef       	ldi	r28, 0xF3	; 243
    68ae:	d2 e0       	ldi	r29, 0x02	; 2
    68b0:	5e 01       	movw	r10, r28
    68b2:	b8 e1       	ldi	r27, 0x18	; 24
    68b4:	ab 1a       	sub	r10, r27
    68b6:	b1 08       	sbc	r11, r1
    68b8:	46 01       	movw	r8, r12
    68ba:	be 2d       	mov	r27, r14
    68bc:	af 2d       	mov	r26, r15
    68be:	90 e2       	ldi	r25, 0x20	; 32
    68c0:	e9 2e       	mov	r14, r25
    68c2:	f1 2c       	mov	r15, r1
    68c4:	0e 15       	cp	r16, r14
    68c6:	1f 05       	cpc	r17, r15
    68c8:	84 f0       	brlt	.+32     	; 0x68ea <strtod+0x26c>
    68ca:	fe 01       	movw	r30, r28
    68cc:	25 91       	lpm	r18, Z+
    68ce:	35 91       	lpm	r19, Z+
    68d0:	45 91       	lpm	r20, Z+
    68d2:	54 91       	lpm	r21, Z
    68d4:	b4 01       	movw	r22, r8
    68d6:	8b 2f       	mov	r24, r27
    68d8:	9a 2f       	mov	r25, r26
    68da:	0e 94 3f 2d 	call	0x5a7e	; 0x5a7e <__mulsf3>
    68de:	4b 01       	movw	r8, r22
    68e0:	b8 2f       	mov	r27, r24
    68e2:	a9 2f       	mov	r26, r25
    68e4:	0e 19       	sub	r16, r14
    68e6:	1f 09       	sbc	r17, r15
    68e8:	ed cf       	rjmp	.-38     	; 0x68c4 <strtod+0x246>
    68ea:	24 97       	sbiw	r28, 0x04	; 4
    68ec:	f5 94       	asr	r15
    68ee:	e7 94       	ror	r14
    68f0:	ca 15       	cp	r28, r10
    68f2:	db 05       	cpc	r29, r11
    68f4:	39 f7       	brne	.-50     	; 0x68c4 <strtod+0x246>
    68f6:	64 01       	movw	r12, r8
    68f8:	eb 2e       	mov	r14, r27
    68fa:	fa 2e       	mov	r15, r26
    68fc:	8e 2d       	mov	r24, r14
    68fe:	88 0f       	add	r24, r24
    6900:	8f 2d       	mov	r24, r15
    6902:	88 1f       	adc	r24, r24
    6904:	8f 3f       	cpi	r24, 0xFF	; 255
    6906:	49 f0       	breq	.+18     	; 0x691a <strtod+0x29c>
    6908:	20 e0       	ldi	r18, 0x00	; 0
    690a:	30 e0       	ldi	r19, 0x00	; 0
    690c:	a9 01       	movw	r20, r18
    690e:	c7 01       	movw	r24, r14
    6910:	b6 01       	movw	r22, r12
    6912:	0e 94 d9 34 	call	0x69b2	; 0x69b2 <__cmpsf2>
    6916:	81 11       	cpse	r24, r1
    6918:	06 c0       	rjmp	.+12     	; 0x6926 <strtod+0x2a8>
    691a:	82 e2       	ldi	r24, 0x22	; 34
    691c:	90 e0       	ldi	r25, 0x00	; 0
    691e:	90 93 cb 0c 	sts	0x0CCB, r25	; 0x800ccb <errno+0x1>
    6922:	80 93 ca 0c 	sts	0x0CCA, r24	; 0x800cca <errno>
    6926:	c7 01       	movw	r24, r14
    6928:	b6 01       	movw	r22, r12
    692a:	09 c0       	rjmp	.+18     	; 0x693e <strtod+0x2c0>
    692c:	60 e0       	ldi	r22, 0x00	; 0
    692e:	70 e0       	ldi	r23, 0x00	; 0
    6930:	80 e8       	ldi	r24, 0x80	; 128
    6932:	9f ef       	ldi	r25, 0xFF	; 255
    6934:	04 c0       	rjmp	.+8      	; 0x693e <strtod+0x2c0>
    6936:	60 e0       	ldi	r22, 0x00	; 0
    6938:	70 e0       	ldi	r23, 0x00	; 0
    693a:	80 ec       	ldi	r24, 0xC0	; 192
    693c:	9f e7       	ldi	r25, 0x7F	; 127
    693e:	df 91       	pop	r29
    6940:	cf 91       	pop	r28
    6942:	1f 91       	pop	r17
    6944:	0f 91       	pop	r16
    6946:	ff 90       	pop	r15
    6948:	ef 90       	pop	r14
    694a:	df 90       	pop	r13
    694c:	cf 90       	pop	r12
    694e:	bf 90       	pop	r11
    6950:	af 90       	pop	r10
    6952:	9f 90       	pop	r9
    6954:	8f 90       	pop	r8
    6956:	7f 90       	pop	r7
    6958:	6f 90       	pop	r6
    695a:	08 95       	ret

0000695c <__ctype_isfalse>:
    695c:	99 27       	eor	r25, r25
    695e:	88 27       	eor	r24, r24

00006960 <__ctype_istrue>:
    6960:	08 95       	ret

00006962 <strncasecmp_P>:
    6962:	fb 01       	movw	r30, r22
    6964:	dc 01       	movw	r26, r24
    6966:	41 50       	subi	r20, 0x01	; 1
    6968:	50 40       	sbci	r21, 0x00	; 0
    696a:	88 f0       	brcs	.+34     	; 0x698e <strncasecmp_P+0x2c>
    696c:	8d 91       	ld	r24, X+
    696e:	81 34       	cpi	r24, 0x41	; 65
    6970:	1c f0       	brlt	.+6      	; 0x6978 <strncasecmp_P+0x16>
    6972:	8b 35       	cpi	r24, 0x5B	; 91
    6974:	0c f4       	brge	.+2      	; 0x6978 <strncasecmp_P+0x16>
    6976:	80 5e       	subi	r24, 0xE0	; 224
    6978:	65 91       	lpm	r22, Z+
    697a:	61 34       	cpi	r22, 0x41	; 65
    697c:	1c f0       	brlt	.+6      	; 0x6984 <strncasecmp_P+0x22>
    697e:	6b 35       	cpi	r22, 0x5B	; 91
    6980:	0c f4       	brge	.+2      	; 0x6984 <strncasecmp_P+0x22>
    6982:	60 5e       	subi	r22, 0xE0	; 224
    6984:	86 1b       	sub	r24, r22
    6986:	61 11       	cpse	r22, r1
    6988:	71 f3       	breq	.-36     	; 0x6966 <strncasecmp_P+0x4>
    698a:	99 0b       	sbc	r25, r25
    698c:	08 95       	ret
    698e:	88 1b       	sub	r24, r24
    6990:	fc cf       	rjmp	.-8      	; 0x698a <strncasecmp_P+0x28>

00006992 <strrev>:
    6992:	dc 01       	movw	r26, r24
    6994:	fc 01       	movw	r30, r24
    6996:	67 2f       	mov	r22, r23
    6998:	71 91       	ld	r23, Z+
    699a:	77 23       	and	r23, r23
    699c:	e1 f7       	brne	.-8      	; 0x6996 <strrev+0x4>
    699e:	32 97       	sbiw	r30, 0x02	; 2
    69a0:	04 c0       	rjmp	.+8      	; 0x69aa <strrev+0x18>
    69a2:	7c 91       	ld	r23, X
    69a4:	6d 93       	st	X+, r22
    69a6:	70 83       	st	Z, r23
    69a8:	62 91       	ld	r22, -Z
    69aa:	ae 17       	cp	r26, r30
    69ac:	bf 07       	cpc	r27, r31
    69ae:	c8 f3       	brcs	.-14     	; 0x69a2 <strrev+0x10>
    69b0:	08 95       	ret

000069b2 <__cmpsf2>:
    69b2:	0e 94 de 34 	call	0x69bc	; 0x69bc <__fp_cmp>
    69b6:	08 f4       	brcc	.+2      	; 0x69ba <__cmpsf2+0x8>
    69b8:	81 e0       	ldi	r24, 0x01	; 1
    69ba:	08 95       	ret

000069bc <__fp_cmp>:
    69bc:	99 0f       	add	r25, r25
    69be:	00 08       	sbc	r0, r0
    69c0:	55 0f       	add	r21, r21
    69c2:	aa 0b       	sbc	r26, r26
    69c4:	e0 e8       	ldi	r30, 0x80	; 128
    69c6:	fe ef       	ldi	r31, 0xFE	; 254
    69c8:	16 16       	cp	r1, r22
    69ca:	17 06       	cpc	r1, r23
    69cc:	e8 07       	cpc	r30, r24
    69ce:	f9 07       	cpc	r31, r25
    69d0:	c0 f0       	brcs	.+48     	; 0x6a02 <__fp_cmp+0x46>
    69d2:	12 16       	cp	r1, r18
    69d4:	13 06       	cpc	r1, r19
    69d6:	e4 07       	cpc	r30, r20
    69d8:	f5 07       	cpc	r31, r21
    69da:	98 f0       	brcs	.+38     	; 0x6a02 <__fp_cmp+0x46>
    69dc:	62 1b       	sub	r22, r18
    69de:	73 0b       	sbc	r23, r19
    69e0:	84 0b       	sbc	r24, r20
    69e2:	95 0b       	sbc	r25, r21
    69e4:	39 f4       	brne	.+14     	; 0x69f4 <__fp_cmp+0x38>
    69e6:	0a 26       	eor	r0, r26
    69e8:	61 f0       	breq	.+24     	; 0x6a02 <__fp_cmp+0x46>
    69ea:	23 2b       	or	r18, r19
    69ec:	24 2b       	or	r18, r20
    69ee:	25 2b       	or	r18, r21
    69f0:	21 f4       	brne	.+8      	; 0x69fa <__fp_cmp+0x3e>
    69f2:	08 95       	ret
    69f4:	0a 26       	eor	r0, r26
    69f6:	09 f4       	brne	.+2      	; 0x69fa <__fp_cmp+0x3e>
    69f8:	a1 40       	sbci	r26, 0x01	; 1
    69fa:	a6 95       	lsr	r26
    69fc:	8f ef       	ldi	r24, 0xFF	; 255
    69fe:	81 1d       	adc	r24, r1
    6a00:	81 1d       	adc	r24, r1
    6a02:	08 95       	ret

00006a04 <eeprom_read_block>:
    6a04:	dc 01       	movw	r26, r24
    6a06:	cb 01       	movw	r24, r22

00006a08 <eeprom_read_blraw>:
    6a08:	fc 01       	movw	r30, r24
    6a0a:	f9 99       	sbic	0x1f, 1	; 31
    6a0c:	fe cf       	rjmp	.-4      	; 0x6a0a <eeprom_read_blraw+0x2>
    6a0e:	06 c0       	rjmp	.+12     	; 0x6a1c <eeprom_read_blraw+0x14>
    6a10:	f2 bd       	out	0x22, r31	; 34
    6a12:	e1 bd       	out	0x21, r30	; 33
    6a14:	f8 9a       	sbi	0x1f, 0	; 31
    6a16:	31 96       	adiw	r30, 0x01	; 1
    6a18:	00 b4       	in	r0, 0x20	; 32
    6a1a:	0d 92       	st	X+, r0
    6a1c:	41 50       	subi	r20, 0x01	; 1
    6a1e:	50 40       	sbci	r21, 0x00	; 0
    6a20:	b8 f7       	brcc	.-18     	; 0x6a10 <eeprom_read_blraw+0x8>
    6a22:	08 95       	ret

00006a24 <eeprom_update_byte>:
    6a24:	26 2f       	mov	r18, r22

00006a26 <eeprom_update_r18>:
    6a26:	f9 99       	sbic	0x1f, 1	; 31
    6a28:	fe cf       	rjmp	.-4      	; 0x6a26 <eeprom_update_r18>
    6a2a:	92 bd       	out	0x22, r25	; 34
    6a2c:	81 bd       	out	0x21, r24	; 33
    6a2e:	f8 9a       	sbi	0x1f, 0	; 31
    6a30:	01 97       	sbiw	r24, 0x01	; 1
    6a32:	00 b4       	in	r0, 0x20	; 32
    6a34:	02 16       	cp	r0, r18
    6a36:	39 f0       	breq	.+14     	; 0x6a46 <eeprom_update_r18+0x20>
    6a38:	1f ba       	out	0x1f, r1	; 31
    6a3a:	20 bd       	out	0x20, r18	; 32
    6a3c:	0f b6       	in	r0, 0x3f	; 63
    6a3e:	f8 94       	cli
    6a40:	fa 9a       	sbi	0x1f, 2	; 31
    6a42:	f9 9a       	sbi	0x1f, 1	; 31
    6a44:	0f be       	out	0x3f, r0	; 63
    6a46:	08 95       	ret

00006a48 <eeprom_write_block>:
    6a48:	dc 01       	movw	r26, r24
    6a4a:	cb 01       	movw	r24, r22
    6a4c:	03 c0       	rjmp	.+6      	; 0x6a54 <eeprom_write_block+0xc>
    6a4e:	2d 91       	ld	r18, X+
    6a50:	0e 94 2f 35 	call	0x6a5e	; 0x6a5e <eeprom_write_r18>
    6a54:	41 50       	subi	r20, 0x01	; 1
    6a56:	50 40       	sbci	r21, 0x00	; 0
    6a58:	d0 f7       	brcc	.-12     	; 0x6a4e <eeprom_write_block+0x6>
    6a5a:	08 95       	ret

00006a5c <eeprom_write_byte>:
    6a5c:	26 2f       	mov	r18, r22

00006a5e <eeprom_write_r18>:
    6a5e:	f9 99       	sbic	0x1f, 1	; 31
    6a60:	fe cf       	rjmp	.-4      	; 0x6a5e <eeprom_write_r18>
    6a62:	1f ba       	out	0x1f, r1	; 31
    6a64:	92 bd       	out	0x22, r25	; 34
    6a66:	81 bd       	out	0x21, r24	; 33
    6a68:	20 bd       	out	0x20, r18	; 32
    6a6a:	0f b6       	in	r0, 0x3f	; 63
    6a6c:	f8 94       	cli
    6a6e:	fa 9a       	sbi	0x1f, 2	; 31
    6a70:	f9 9a       	sbi	0x1f, 1	; 31
    6a72:	0f be       	out	0x3f, r0	; 63
    6a74:	01 96       	adiw	r24, 0x01	; 1
    6a76:	08 95       	ret

00006a78 <__mulsi3>:
    6a78:	db 01       	movw	r26, r22
    6a7a:	8f 93       	push	r24
    6a7c:	9f 93       	push	r25
    6a7e:	0e 94 6b 35 	call	0x6ad6	; 0x6ad6 <__muluhisi3>
    6a82:	bf 91       	pop	r27
    6a84:	af 91       	pop	r26
    6a86:	a2 9f       	mul	r26, r18
    6a88:	80 0d       	add	r24, r0
    6a8a:	91 1d       	adc	r25, r1
    6a8c:	a3 9f       	mul	r26, r19
    6a8e:	90 0d       	add	r25, r0
    6a90:	b2 9f       	mul	r27, r18
    6a92:	90 0d       	add	r25, r0
    6a94:	11 24       	eor	r1, r1
    6a96:	08 95       	ret

00006a98 <__divmodsi4>:
    6a98:	05 2e       	mov	r0, r21
    6a9a:	97 fb       	bst	r25, 7
    6a9c:	1e f4       	brtc	.+6      	; 0x6aa4 <__divmodsi4+0xc>
    6a9e:	00 94       	com	r0
    6aa0:	0e 94 63 35 	call	0x6ac6	; 0x6ac6 <__negsi2>
    6aa4:	57 fd       	sbrc	r21, 7
    6aa6:	07 d0       	rcall	.+14     	; 0x6ab6 <__divmodsi4_neg2>
    6aa8:	0e 94 d4 2d 	call	0x5ba8	; 0x5ba8 <__udivmodsi4>
    6aac:	07 fc       	sbrc	r0, 7
    6aae:	03 d0       	rcall	.+6      	; 0x6ab6 <__divmodsi4_neg2>
    6ab0:	4e f4       	brtc	.+18     	; 0x6ac4 <__divmodsi4_exit>
    6ab2:	0c 94 63 35 	jmp	0x6ac6	; 0x6ac6 <__negsi2>

00006ab6 <__divmodsi4_neg2>:
    6ab6:	50 95       	com	r21
    6ab8:	40 95       	com	r20
    6aba:	30 95       	com	r19
    6abc:	21 95       	neg	r18
    6abe:	3f 4f       	sbci	r19, 0xFF	; 255
    6ac0:	4f 4f       	sbci	r20, 0xFF	; 255
    6ac2:	5f 4f       	sbci	r21, 0xFF	; 255

00006ac4 <__divmodsi4_exit>:
    6ac4:	08 95       	ret

00006ac6 <__negsi2>:
    6ac6:	90 95       	com	r25
    6ac8:	80 95       	com	r24
    6aca:	70 95       	com	r23
    6acc:	61 95       	neg	r22
    6ace:	7f 4f       	sbci	r23, 0xFF	; 255
    6ad0:	8f 4f       	sbci	r24, 0xFF	; 255
    6ad2:	9f 4f       	sbci	r25, 0xFF	; 255
    6ad4:	08 95       	ret

00006ad6 <__muluhisi3>:
    6ad6:	0e 94 7e 35 	call	0x6afc	; 0x6afc <__umulhisi3>
    6ada:	a5 9f       	mul	r26, r21
    6adc:	90 0d       	add	r25, r0
    6ade:	b4 9f       	mul	r27, r20
    6ae0:	90 0d       	add	r25, r0
    6ae2:	a4 9f       	mul	r26, r20
    6ae4:	80 0d       	add	r24, r0
    6ae6:	91 1d       	adc	r25, r1
    6ae8:	11 24       	eor	r1, r1
    6aea:	08 95       	ret

00006aec <__mulshisi3>:
    6aec:	b7 ff       	sbrs	r27, 7
    6aee:	0c 94 6b 35 	jmp	0x6ad6	; 0x6ad6 <__muluhisi3>

00006af2 <__mulohisi3>:
    6af2:	0e 94 6b 35 	call	0x6ad6	; 0x6ad6 <__muluhisi3>
    6af6:	82 1b       	sub	r24, r18
    6af8:	93 0b       	sbc	r25, r19
    6afa:	08 95       	ret

00006afc <__umulhisi3>:
    6afc:	a2 9f       	mul	r26, r18
    6afe:	b0 01       	movw	r22, r0
    6b00:	b3 9f       	mul	r27, r19
    6b02:	c0 01       	movw	r24, r0
    6b04:	a3 9f       	mul	r26, r19
    6b06:	70 0d       	add	r23, r0
    6b08:	81 1d       	adc	r24, r1
    6b0a:	11 24       	eor	r1, r1
    6b0c:	91 1d       	adc	r25, r1
    6b0e:	b2 9f       	mul	r27, r18
    6b10:	70 0d       	add	r23, r0
    6b12:	81 1d       	adc	r24, r1
    6b14:	11 24       	eor	r1, r1
    6b16:	91 1d       	adc	r25, r1
    6b18:	08 95       	ret

00006b1a <_exit>:
    6b1a:	f8 94       	cli

00006b1c <__stop_program>:
    6b1c:	ff cf       	rjmp	.-2      	; 0x6b1c <__stop_program>
