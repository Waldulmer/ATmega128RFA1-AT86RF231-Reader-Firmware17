
RDR_MDC_20150129_V0.3.6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000032a  00800200  00006b20  00006bb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006b20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000007a2  0080052a  0080052a  00006ede  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006ede  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006f3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ad8  00000000  00000000  00006f80  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00011dfc  00000000  00000000  00007a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000487d  00000000  00000000  00019854  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000a845  00000000  00000000  0001e0d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001d80  00000000  00000000  00028918  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000219c9  00000000  00000000  0002a698  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006833  00000000  00000000  0004c061  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000958  00000000  00000000  00052894  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000bd24  00000000  00000000  000531ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__ctors_end>
       4:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
       8:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
       c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      10:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      14:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      18:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      1c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      20:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      24:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      28:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      2c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      30:	0c 94 b1 26 	jmp	0x4d62	; 0x4d62 <__vector_12>
      34:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      38:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      3c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      40:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      44:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      48:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      4c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      50:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      54:	0c 94 d5 26 	jmp	0x4daa	; 0x4daa <__vector_21>
      58:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      5c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      60:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      64:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      68:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      6c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      70:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      74:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      78:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      7c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      80:	0c 94 16 26 	jmp	0x4c2c	; 0x4c2c <__vector_32>
      84:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      88:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      8c:	0c 94 a2 26 	jmp	0x4d44	; 0x4d44 <__vector_35>
      90:	0c 94 62 27 	jmp	0x4ec4	; 0x4ec4 <__vector_36>
      94:	0c 94 a7 27 	jmp	0x4f4e	; 0x4f4e <__vector_37>
      98:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      9c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      a0:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      a4:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      a8:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      ac:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      b0:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      b4:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      b8:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      bc:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      c0:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      c4:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      c8:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      cc:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      d0:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      d4:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      d8:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      dc:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      e0:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      e4:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      e8:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      ec:	0c 94 9c 1d 	jmp	0x3b38	; 0x3b38 <__vector_59>
      f0:	0c 94 c4 1d 	jmp	0x3b88	; 0x3b88 <__vector_60>
      f4:	0c 94 19 1e 	jmp	0x3c32	; 0x3c32 <__vector_61>
      f8:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      fc:	0c 94 ec 1d 	jmp	0x3bd8	; 0x3bd8 <__vector_63>
     100:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
     104:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
     108:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
     10c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
     110:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
     114:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
     118:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
     11c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
     120:	fb 04       	cpc	r15, r11
     122:	02 05       	cpc	r16, r2
     124:	e6 07       	cpc	r30, r22
     126:	e6 07       	cpc	r30, r22
     128:	e6 07       	cpc	r30, r22
     12a:	e6 07       	cpc	r30, r22
     12c:	ee 05       	cpc	r30, r14
     12e:	d4 06       	cpc	r13, r20
     130:	e6 07       	cpc	r30, r22
     132:	5d 07       	cpc	r21, r29
     134:	e6 07       	cpc	r30, r22
     136:	4a 05       	cpc	r20, r10
     138:	d8 07       	cpc	r29, r24
     13a:	e6 07       	cpc	r30, r22
     13c:	e9 06       	cpc	r14, r25
     13e:	de 07       	cpc	r29, r30
     140:	e6 07       	cpc	r30, r22
     142:	e6 07       	cpc	r30, r22
     144:	cc 04       	cpc	r12, r12
     146:	6d 07       	cpc	r22, r29
     148:	e6 07       	cpc	r30, r22
     14a:	e6 07       	cpc	r30, r22
     14c:	e6 07       	cpc	r30, r22
     14e:	e6 07       	cpc	r30, r22
     150:	e6 07       	cpc	r30, r22
     152:	e0 07       	cpc	r30, r16
     154:	e6 07       	cpc	r30, r22
     156:	e6 07       	cpc	r30, r22
     158:	e6 07       	cpc	r30, r22
     15a:	e6 07       	cpc	r30, r22
     15c:	ee 05       	cpc	r30, r14
     15e:	e4 07       	cpc	r30, r20
     160:	e6 07       	cpc	r30, r22
     162:	e6 07       	cpc	r30, r22
     164:	e6 07       	cpc	r30, r22
     166:	e6 07       	cpc	r30, r22
     168:	e6 07       	cpc	r30, r22
     16a:	e6 07       	cpc	r30, r22
     16c:	de 07       	cpc	r29, r30
     16e:	e6 05       	cpc	r30, r6
     170:	34 0f       	add	r19, r20
     172:	2e 0f       	add	r18, r30
     174:	28 0f       	add	r18, r24
     176:	22 0f       	add	r18, r18
     178:	1c 0f       	add	r17, r28
     17a:	16 0f       	add	r17, r22
     17c:	10 0f       	add	r17, r16
     17e:	0a 0f       	add	r16, r26
     180:	04 0f       	add	r16, r20
     182:	81 0f       	add	r24, r17
     184:	7b 0f       	add	r23, r27
     186:	75 0f       	add	r23, r21
     188:	6f 0f       	add	r22, r31
     18a:	69 0f       	add	r22, r25
     18c:	63 0f       	add	r22, r19
     18e:	5d 0f       	add	r21, r29
     190:	57 0f       	add	r21, r23
     192:	51 0f       	add	r21, r17
     194:	cf 14       	cp	r12, r15
     196:	cc 14       	cp	r12, r12
     198:	c9 14       	cp	r12, r9
     19a:	c6 14       	cp	r12, r6
     19c:	c3 14       	cp	r12, r3
     19e:	b4 14       	cp	r11, r4
     1a0:	b1 14       	cp	r11, r1
     1a2:	ae 14       	cp	r10, r14
     1a4:	ab 14       	cp	r10, r11
     1a6:	f7 21       	and	r31, r7
     1a8:	58 22       	and	r5, r24
     1aa:	55 22       	and	r5, r21
     1ac:	52 22       	and	r5, r18
     1ae:	e9 21       	and	r30, r9
     1b0:	10 22       	and	r1, r16
     1b2:	f0 21       	and	r31, r0
     1b4:	1b 22       	and	r1, r27
     1b6:	23 22       	and	r2, r19
     1b8:	4a 22       	and	r4, r26

000001ba <__trampolines_end>:
     1ba:	6e 61       	ori	r22, 0x1E	; 30
     1bc:	6e 00       	.word	0x006e	; ????

000001be <__c.2240>:
     1be:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ce:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1de:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ee:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1fe:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     20e:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     21e:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     22e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     23e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     24e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     25e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     26e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     27e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     28e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     29e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2ae:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002bc <pstr_nan>:
     2bc:	4e 41 4e                                            NAN

000002bf <pstr_inity>:
     2bf:	49 4e 49 54 59                                      INITY

000002c4 <pstr_inf>:
     2c4:	49 4e 46                                            INF

000002c7 <pwr_m10>:
     2c7:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     2d7:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000002df <pwr_p10>:
     2df:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     2ef:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000002f8 <__ctors_end>:
     2f8:	11 24       	eor	r1, r1
     2fa:	1f be       	out	0x3f, r1	; 63
     2fc:	c0 e0       	ldi	r28, 0x00	; 0
     2fe:	d0 e4       	ldi	r29, 0x40	; 64
     300:	de bf       	out	0x3e, r29	; 62
     302:	cd bf       	out	0x3d, r28	; 61

00000304 <__do_copy_data>:
     304:	15 e0       	ldi	r17, 0x05	; 5
     306:	a0 e0       	ldi	r26, 0x00	; 0
     308:	b2 e0       	ldi	r27, 0x02	; 2
     30a:	e0 e2       	ldi	r30, 0x20	; 32
     30c:	fb e6       	ldi	r31, 0x6B	; 107
     30e:	00 e0       	ldi	r16, 0x00	; 0
     310:	0b bf       	out	0x3b, r16	; 59
     312:	02 c0       	rjmp	.+4      	; 0x318 <__do_copy_data+0x14>
     314:	07 90       	elpm	r0, Z+
     316:	0d 92       	st	X+, r0
     318:	aa 32       	cpi	r26, 0x2A	; 42
     31a:	b1 07       	cpc	r27, r17
     31c:	d9 f7       	brne	.-10     	; 0x314 <__do_copy_data+0x10>

0000031e <__do_clear_bss>:
     31e:	2c e0       	ldi	r18, 0x0C	; 12
     320:	aa e2       	ldi	r26, 0x2A	; 42
     322:	b5 e0       	ldi	r27, 0x05	; 5
     324:	01 c0       	rjmp	.+2      	; 0x328 <.do_clear_bss_start>

00000326 <.do_clear_bss_loop>:
     326:	1d 92       	st	X+, r1

00000328 <.do_clear_bss_start>:
     328:	ac 3c       	cpi	r26, 0xCC	; 204
     32a:	b2 07       	cpc	r27, r18
     32c:	e1 f7       	brne	.-8      	; 0x326 <.do_clear_bss_loop>
     32e:	0e 94 ed 1a 	call	0x35da	; 0x35da <main>
     332:	0c 94 8e 35 	jmp	0x6b1c	; 0x6b1c <_exit>

00000336 <__bad_interrupt>:
     336:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000033a <ledoff1>:
				Buzzer_off();
				_delay_us(200);
			}
			_delay_ms(25);
		}
	}
     33a:	a0 98       	cbi	0x14, 0	; 20
     33c:	08 95       	ret

0000033e <ledoff2>:
     33e:	a1 98       	cbi	0x14, 1	; 20
     340:	08 95       	ret

00000342 <ValidationTimeout>:
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <VALIDATION_TIMEOUT>
     348:	08 95       	ret

0000034a <CommTimeOut>:
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	80 93 2f 05 	sts	0x052F, r24	; 0x80052f <TOFlag>
     350:	e5 e3       	ldi	r30, 0x35	; 53
     352:	f9 e0       	ldi	r31, 0x09	; 9
     354:	80 81       	ld	r24, Z
     356:	8f 7b       	andi	r24, 0xBF	; 191
     358:	80 83       	st	Z, r24
     35a:	08 95       	ret

0000035c <KeypressTimeOut>:
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <KPTOFlag>
     362:	08 95       	ret

00000364 <SetupTimeout>:
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <SETUP_TIMEOUT>
     36a:	08 95       	ret

0000036c <SetDeviceState>:
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	80 93 b9 09 	sts	0x09B9, r24	; 0x8009b9 <ucDeviceStateFlag>
     372:	08 95       	ret

00000374 <appStartScan>:
     374:	8f ef       	ldi	r24, 0xFF	; 255
     376:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <macInit>
     37a:	0c 94 bd 24 	jmp	0x497a	; 0x497a <macScan>

0000037e <appAssociate>:
     37e:	e5 ea       	ldi	r30, 0xA5	; 165
     380:	fc e0       	ldi	r31, 0x0C	; 12
     382:	65 81       	ldd	r22, Z+5	; 0x05
     384:	83 81       	ldd	r24, Z+3	; 0x03
     386:	94 81       	ldd	r25, Z+4	; 0x04
     388:	0c 94 69 1f 	jmp	0x3ed2	; 0x3ed2 <macAssociate>

0000038c <appPingReq>:
     38c:	bc 01       	movw	r22, r24
     38e:	83 e0       	ldi	r24, 0x03	; 3
     390:	0c 94 65 21 	jmp	0x42ca	; 0x42ca <macPing>

00000394 <appPingRsp>:
     394:	0e 94 24 1b 	call	0x3648	; 0x3648 <radioGetSavedRssiValue>
     398:	88 23       	and	r24, r24
     39a:	19 f0       	breq	.+6      	; 0x3a2 <appPingRsp+0xe>
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	80 93 38 0c 	sts	0x0C38, r24	; 0x800c38 <macConfig+0x8>
     3a2:	08 95       	ret

000003a4 <appPacketSendSucceed>:
     3a4:	20 91 45 0c 	lds	r18, 0x0C45	; 0x800c45 <macConfig+0x15>
     3a8:	30 91 46 0c 	lds	r19, 0x0C46	; 0x800c46 <macConfig+0x16>
     3ac:	80 91 3f 0c 	lds	r24, 0x0C3F	; 0x800c3f <macConfig+0xf>
     3b0:	90 91 40 0c 	lds	r25, 0x0C40	; 0x800c40 <macConfig+0x10>
     3b4:	28 17       	cp	r18, r24
     3b6:	39 07       	cpc	r19, r25
     3b8:	11 f4       	brne	.+4      	; 0x3be <appPacketSendSucceed+0x1a>
     3ba:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <failCount>
     3be:	08 95       	ret

000003c0 <appPacketSendAccessFail>:
     3c0:	08 95       	ret

000003c2 <appPacketSendFailed>:
     3c2:	cf 93       	push	r28
     3c4:	0e 94 5a 24 	call	0x48b4	; 0x48b4 <macIsScanning>
     3c8:	81 11       	cpse	r24, r1
     3ca:	40 c0       	rjmp	.+128    	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     3cc:	20 91 3f 0c 	lds	r18, 0x0C3F	; 0x800c3f <macConfig+0xf>
     3d0:	30 91 40 0c 	lds	r19, 0x0C40	; 0x800c40 <macConfig+0x10>
     3d4:	c1 e0       	ldi	r28, 0x01	; 1
     3d6:	80 91 45 0c 	lds	r24, 0x0C45	; 0x800c45 <macConfig+0x15>
     3da:	90 91 46 0c 	lds	r25, 0x0C46	; 0x800c46 <macConfig+0x16>
     3de:	82 17       	cp	r24, r18
     3e0:	93 07       	cpc	r25, r19
     3e2:	11 f0       	breq	.+4      	; 0x3e8 <appPacketSendFailed+0x26>
     3e4:	c0 e0       	ldi	r28, 0x00	; 0
     3e6:	05 c0       	rjmp	.+10     	; 0x3f2 <appPacketSendFailed+0x30>
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	50 e0       	ldi	r21, 0x00	; 0
     3ec:	60 e0       	ldi	r22, 0x00	; 0
     3ee:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <macDataRequest>
     3f2:	80 91 2c 05 	lds	r24, 0x052C	; 0x80052c <failCount>
     3f6:	8f 5f       	subi	r24, 0xFF	; 255
     3f8:	80 93 2c 05 	sts	0x052C, r24	; 0x80052c <failCount>
     3fc:	83 30       	cpi	r24, 0x03	; 3
     3fe:	30 f1       	brcs	.+76     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     400:	cc 23       	and	r28, r28
     402:	a9 f0       	breq	.+42     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     404:	10 92 38 0c 	sts	0x0C38, r1	; 0x800c38 <macConfig+0x8>
     408:	88 e0       	ldi	r24, 0x08	; 8
     40a:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <radioRandom>
     40e:	28 2f       	mov	r18, r24
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	2e 5c       	subi	r18, 0xCE	; 206
     414:	3f 4f       	sbci	r19, 0xFF	; 255
     416:	4e e1       	ldi	r20, 0x1E	; 30
     418:	42 9f       	mul	r20, r18
     41a:	c0 01       	movw	r24, r0
     41c:	43 9f       	mul	r20, r19
     41e:	90 0d       	add	r25, r0
     420:	11 24       	eor	r1, r1
     422:	6a eb       	ldi	r22, 0xBA	; 186
     424:	71 e0       	ldi	r23, 0x01	; 1
     426:	88 51       	subi	r24, 0x18	; 24
     428:	9c 4f       	sbci	r25, 0xFC	; 252
     42a:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <macSetAlarm>
     42e:	80 91 45 0c 	lds	r24, 0x0C45	; 0x800c45 <macConfig+0x15>
     432:	90 91 46 0c 	lds	r25, 0x0C46	; 0x800c46 <macConfig+0x16>
     436:	0e 94 bb 1f 	call	0x3f76	; 0x3f76 <macIsChild>
     43a:	88 23       	and	r24, r24
     43c:	39 f0       	breq	.+14     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     43e:	80 91 45 0c 	lds	r24, 0x0C45	; 0x800c45 <macConfig+0x15>
     442:	90 91 46 0c 	lds	r25, 0x0C46	; 0x800c46 <macConfig+0x16>
     446:	cf 91       	pop	r28
     448:	0c 94 0e 20 	jmp	0x401c	; 0x401c <macRemoveChild>
     44c:	cf 91       	pop	r28
     44e:	08 95       	ret

00000450 <appDataIndication>:
     450:	80 91 2c 0b 	lds	r24, 0x0B2C	; 0x800b2c <mac_buffer_rx>
     454:	10 92 0e 0b 	sts	0x0B0E, r1	; 0x800b0e <ucSendDataSize>
     458:	88 23       	and	r24, r24
     45a:	11 f1       	breq	.+68     	; 0x4a0 <appDataIndication+0x50>
     45c:	80 91 3a 0b 	lds	r24, 0x0B3A	; 0x800b3a <mac_buffer_rx+0xe>
     460:	8f 77       	andi	r24, 0x7F	; 127
     462:	81 30       	cpi	r24, 0x01	; 1
     464:	e9 f4       	brne	.+58     	; 0x4a0 <appDataIndication+0x50>
     466:	80 91 3b 0b 	lds	r24, 0x0B3B	; 0x800b3b <mac_buffer_rx+0xf>
     46a:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <ucDataLength.4360>
     46e:	90 e8       	ldi	r25, 0x80	; 128
     470:	e7 e3       	ldi	r30, 0x37	; 55
     472:	f9 e0       	ldi	r31, 0x09	; 9
     474:	df 01       	movw	r26, r30
     476:	1d 92       	st	X+, r1
     478:	9a 95       	dec	r25
     47a:	e9 f7       	brne	.-6      	; 0x476 <appDataIndication+0x26>
     47c:	ac e3       	ldi	r26, 0x3C	; 60
     47e:	bb e0       	ldi	r27, 0x0B	; 11
     480:	9f 01       	movw	r18, r30
     482:	9e 2f       	mov	r25, r30
     484:	92 1b       	sub	r25, r18
     486:	98 17       	cp	r25, r24
     488:	18 f4       	brcc	.+6      	; 0x490 <appDataIndication+0x40>
     48a:	9d 91       	ld	r25, X+
     48c:	91 93       	st	Z+, r25
     48e:	f9 cf       	rjmp	.-14     	; 0x482 <appDataIndication+0x32>
     490:	87 e3       	ldi	r24, 0x37	; 55
     492:	99 e0       	ldi	r25, 0x09	; 9
     494:	0e 94 cd 09 	call	0x139a	; 0x139a <extractIncomingMessage>
     498:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
     49c:	10 92 34 09 	sts	0x0934, r1	; 0x800934 <ucNumberOfRetry>
     4a0:	08 95       	ret

000004a2 <appChildAssociated>:
     4a2:	a1 9a       	sbi	0x14, 1	; 20
     4a4:	6f e9       	ldi	r22, 0x9F	; 159
     4a6:	71 e0       	ldi	r23, 0x01	; 1
     4a8:	8a e0       	ldi	r24, 0x0A	; 10
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	0c 94 4f 25 	jmp	0x4a9e	; 0x4a9e <macSetAlarm>

000004b0 <appAssociateConfirm>:
     4b0:	81 11       	cpse	r24, r1
     4b2:	06 c0       	rjmp	.+12     	; 0x4c0 <appAssociateConfirm+0x10>
     4b4:	a1 9a       	sbi	0x14, 1	; 20
     4b6:	6f e9       	ldi	r22, 0x9F	; 159
     4b8:	71 e0       	ldi	r23, 0x01	; 1
     4ba:	8a e0       	ldi	r24, 0x0A	; 10
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	11 c0       	rjmp	.+34     	; 0x4e2 <appAssociateConfirm+0x32>
     4c0:	88 e0       	ldi	r24, 0x08	; 8
     4c2:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <radioRandom>
     4c6:	28 2f       	mov	r18, r24
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	2e 5c       	subi	r18, 0xCE	; 206
     4cc:	3f 4f       	sbci	r19, 0xFF	; 255
     4ce:	4e e1       	ldi	r20, 0x1E	; 30
     4d0:	42 9f       	mul	r20, r18
     4d2:	c0 01       	movw	r24, r0
     4d4:	43 9f       	mul	r20, r19
     4d6:	90 0d       	add	r25, r0
     4d8:	11 24       	eor	r1, r1
     4da:	6a eb       	ldi	r22, 0xBA	; 186
     4dc:	71 e0       	ldi	r23, 0x01	; 1
     4de:	88 51       	subi	r24, 0x18	; 24
     4e0:	9c 4f       	sbci	r25, 0xFC	; 252
     4e2:	0c 94 4f 25 	jmp	0x4a9e	; 0x4a9e <macSetAlarm>

000004e6 <appScanConfirm>:
     4e6:	88 23       	and	r24, r24
     4e8:	29 f0       	breq	.+10     	; 0x4f4 <appScanConfirm+0xe>
     4ea:	6f eb       	ldi	r22, 0xBF	; 191
     4ec:	71 e0       	ldi	r23, 0x01	; 1
     4ee:	8e e1       	ldi	r24, 0x1E	; 30
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	0e c0       	rjmp	.+28     	; 0x510 <appScanConfirm+0x2a>
     4f4:	88 e0       	ldi	r24, 0x08	; 8
     4f6:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <radioRandom>
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	05 96       	adiw	r24, 0x05	; 5
     4fe:	6a eb       	ldi	r22, 0xBA	; 186
     500:	71 e0       	ldi	r23, 0x01	; 1
     502:	2a e0       	ldi	r18, 0x0A	; 10
     504:	ac 01       	movw	r20, r24
     506:	24 9f       	mul	r18, r20
     508:	c0 01       	movw	r24, r0
     50a:	25 9f       	mul	r18, r21
     50c:	90 0d       	add	r25, r0
     50e:	11 24       	eor	r1, r1
     510:	0c 94 4f 25 	jmp	0x4a9e	; 0x4a9e <macSetAlarm>

00000514 <checkEeprom>:
     514:	8f 92       	push	r8
     516:	9f 92       	push	r9
     518:	af 92       	push	r10
     51a:	bf 92       	push	r11
     51c:	cf 92       	push	r12
     51e:	df 92       	push	r13
     520:	ef 92       	push	r14
     522:	ff 92       	push	r15
     524:	0f 93       	push	r16
     526:	1f 93       	push	r17
     528:	cf 93       	push	r28
     52a:	df 93       	push	r29
     52c:	cd b7       	in	r28, 0x3d	; 61
     52e:	de b7       	in	r29, 0x3e	; 62
     530:	62 97       	sbiw	r28, 0x12	; 18
     532:	0f b6       	in	r0, 0x3f	; 63
     534:	f8 94       	cli
     536:	de bf       	out	0x3e, r29	; 62
     538:	0f be       	out	0x3f, r0	; 63
     53a:	cd bf       	out	0x3d, r28	; 61
     53c:	87 e0       	ldi	r24, 0x07	; 7
     53e:	89 8b       	std	Y+17, r24	; 0x11
     540:	ae 01       	movw	r20, r28
     542:	47 5f       	subi	r20, 0xF7	; 247
     544:	5f 4f       	sbci	r21, 0xFF	; 255
     546:	68 e0       	ldi	r22, 0x08	; 8
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <halGetEeprom>
     550:	89 84       	ldd	r8, Y+9	; 0x09
     552:	9a 84       	ldd	r9, Y+10	; 0x0a
     554:	ab 84       	ldd	r10, Y+11	; 0x0b
     556:	bc 84       	ldd	r11, Y+12	; 0x0c
     558:	cd 84       	ldd	r12, Y+13	; 0x0d
     55a:	de 84       	ldd	r13, Y+14	; 0x0e
     55c:	ef 84       	ldd	r14, Y+15	; 0x0f
     55e:	f8 88       	ldd	r15, Y+16	; 0x10
     560:	5f ef       	ldi	r21, 0xFF	; 255
     562:	85 16       	cp	r8, r21
     564:	95 06       	cpc	r9, r21
     566:	a5 06       	cpc	r10, r21
     568:	b5 06       	cpc	r11, r21
     56a:	09 f0       	breq	.+2      	; 0x56e <checkEeprom+0x5a>
     56c:	70 c0       	rjmp	.+224    	; 0x64e <checkEeprom+0x13a>
     56e:	94 01       	movw	r18, r8
     570:	a5 01       	movw	r20, r10
     572:	b6 01       	movw	r22, r12
     574:	c7 01       	movw	r24, r14
     576:	00 e2       	ldi	r16, 0x20	; 32
     578:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <__lshrdi3>
     57c:	69 01       	movw	r12, r18
     57e:	7a 01       	movw	r14, r20
     580:	2f 3f       	cpi	r18, 0xFF	; 255
     582:	3f 4f       	sbci	r19, 0xFF	; 255
     584:	4f 4f       	sbci	r20, 0xFF	; 255
     586:	5f 4f       	sbci	r21, 0xFF	; 255
     588:	61 05       	cpc	r22, r1
     58a:	71 05       	cpc	r23, r1
     58c:	81 05       	cpc	r24, r1
     58e:	91 05       	cpc	r25, r1
     590:	09 f0       	breq	.+2      	; 0x594 <checkEeprom+0x80>
     592:	50 c0       	rjmp	.+160    	; 0x634 <checkEeprom+0x120>
     594:	8e 01       	movw	r16, r28
     596:	0f 5f       	subi	r16, 0xFF	; 255
     598:	1f 4f       	sbci	r17, 0xFF	; 255
     59a:	88 e0       	ldi	r24, 0x08	; 8
     59c:	f8 01       	movw	r30, r16
     59e:	11 92       	st	Z+, r1
     5a0:	8a 95       	dec	r24
     5a2:	e9 f7       	brne	.-6      	; 0x59e <checkEeprom+0x8a>
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	0e 94 a0 1b 	call	0x3740	; 0x3740 <radioInit>
     5aa:	86 e0       	ldi	r24, 0x06	; 6
     5ac:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <radioSetTrxState>
     5b0:	78 01       	movw	r14, r16
     5b2:	30 e0       	ldi	r19, 0x00	; 0
     5b4:	dd 24       	eor	r13, r13
     5b6:	da 94       	dec	r13
     5b8:	34 30       	cpi	r19, 0x04	; 4
     5ba:	18 f4       	brcc	.+6      	; 0x5c2 <checkEeprom+0xae>
     5bc:	f7 01       	movw	r30, r14
     5be:	d0 82       	st	Z, r13
     5c0:	1a c0       	rjmp	.+52     	; 0x5f6 <checkEeprom+0xe2>
     5c2:	3a 8b       	std	Y+18, r19	; 0x12
     5c4:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <radioGetTrxState>
     5c8:	8f 7e       	andi	r24, 0xEF	; 239
     5ca:	3a 89       	ldd	r19, Y+18	; 0x12
     5cc:	86 30       	cpi	r24, 0x06	; 6
     5ce:	99 f4       	brne	.+38     	; 0x5f6 <checkEeprom+0xe2>
     5d0:	44 e0       	ldi	r20, 0x04	; 4
     5d2:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <__TEXT_REGION_LENGTH__+0x7e0146>
     5d6:	f7 01       	movw	r30, r14
     5d8:	90 81       	ld	r25, Z
     5da:	f4 e0       	ldi	r31, 0x04	; 4
     5dc:	9f 9f       	mul	r25, r31
     5de:	c0 01       	movw	r24, r0
     5e0:	11 24       	eor	r1, r1
     5e2:	92 2f       	mov	r25, r18
     5e4:	90 76       	andi	r25, 0x60	; 96
     5e6:	92 95       	swap	r25
     5e8:	96 95       	lsr	r25
     5ea:	97 70       	andi	r25, 0x07	; 7
     5ec:	89 2b       	or	r24, r25
     5ee:	f7 01       	movw	r30, r14
     5f0:	80 83       	st	Z, r24
     5f2:	41 50       	subi	r20, 0x01	; 1
     5f4:	71 f7       	brne	.-36     	; 0x5d2 <checkEeprom+0xbe>
     5f6:	3f 5f       	subi	r19, 0xFF	; 255
     5f8:	ff ef       	ldi	r31, 0xFF	; 255
     5fa:	ef 1a       	sub	r14, r31
     5fc:	ff 0a       	sbc	r15, r31
     5fe:	38 30       	cpi	r19, 0x08	; 8
     600:	d9 f6       	brne	.-74     	; 0x5b8 <checkEeprom+0xa4>
     602:	a8 01       	movw	r20, r16
     604:	68 e0       	ldi	r22, 0x08	; 8
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <halPutEeprom>
     60e:	ae 01       	movw	r20, r28
     610:	4f 5e       	subi	r20, 0xEF	; 239
     612:	5f 4f       	sbci	r21, 0xFF	; 255
     614:	62 e0       	ldi	r22, 0x02	; 2
     616:	82 e2       	ldi	r24, 0x22	; 34
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <halPutEeprom>
     61e:	60 e0       	ldi	r22, 0x00	; 0
     620:	8c e6       	ldi	r24, 0x6C	; 108
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	0e 94 13 35 	call	0x6a26	; 0x6a26 <eeprom_update_byte>
     628:	60 e0       	ldi	r22, 0x00	; 0
     62a:	87 e7       	ldi	r24, 0x77	; 119
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	0e 94 13 35 	call	0x6a26	; 0x6a26 <eeprom_update_byte>
     632:	0d c0       	rjmp	.+26     	; 0x64e <checkEeprom+0x13a>
     634:	cd 28       	or	r12, r13
     636:	ce 28       	or	r12, r14
     638:	cf 28       	or	r12, r15
     63a:	49 f0       	breq	.+18     	; 0x64e <checkEeprom+0x13a>
     63c:	ae 01       	movw	r20, r28
     63e:	4f 5e       	subi	r20, 0xEF	; 239
     640:	5f 4f       	sbci	r21, 0xFF	; 255
     642:	62 e0       	ldi	r22, 0x02	; 2
     644:	82 e2       	ldi	r24, 0x22	; 34
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <halPutEeprom>
     64c:	00 00       	nop
     64e:	62 96       	adiw	r28, 0x12	; 18
     650:	0f b6       	in	r0, 0x3f	; 63
     652:	f8 94       	cli
     654:	de bf       	out	0x3e, r29	; 62
     656:	0f be       	out	0x3f, r0	; 63
     658:	cd bf       	out	0x3d, r28	; 61
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	1f 91       	pop	r17
     660:	0f 91       	pop	r16
     662:	ff 90       	pop	r15
     664:	ef 90       	pop	r14
     666:	df 90       	pop	r13
     668:	cf 90       	pop	r12
     66a:	bf 90       	pop	r11
     66c:	af 90       	pop	r10
     66e:	9f 90       	pop	r9
     670:	8f 90       	pop	r8
     672:	08 95       	ret

00000674 <appInit>:
     674:	0f 93       	push	r16
     676:	1f 93       	push	r17
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	1f 92       	push	r1
     67e:	cd b7       	in	r28, 0x3d	; 61
     680:	de b7       	in	r29, 0x3e	; 62
     682:	83 b3       	in	r24, 0x13	; 19
     684:	87 60       	ori	r24, 0x07	; 7
     686:	83 bb       	out	0x13, r24	; 19
     688:	84 b3       	in	r24, 0x14	; 20
     68a:	88 7f       	andi	r24, 0xF8	; 248
     68c:	84 bb       	out	0x14, r24	; 20
     68e:	84 b3       	in	r24, 0x14	; 20
     690:	87 60       	ori	r24, 0x07	; 7
     692:	84 bb       	out	0x14, r24	; 20
     694:	6b 9a       	sbi	0x0d, 3	; 13
     696:	73 98       	cbi	0x0e, 3	; 14
     698:	84 b3       	in	r24, 0x14	; 20
     69a:	88 7f       	andi	r24, 0xF8	; 248
     69c:	84 bb       	out	0x14, r24	; 20
     69e:	a0 9a       	sbi	0x14, 0	; 20
     6a0:	83 e1       	ldi	r24, 0x13	; 19
     6a2:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
     6a6:	6d e9       	ldi	r22, 0x9D	; 157
     6a8:	71 e0       	ldi	r23, 0x01	; 1
     6aa:	89 e1       	ldi	r24, 0x19	; 25
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <macSetAlarm>
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	80 93 b9 09 	sts	0x09B9, r24	; 0x8009b9 <ucDeviceStateFlag>
     6b8:	0e 94 8a 02 	call	0x514	; 0x514 <checkEeprom>
     6bc:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <initReader>
     6c0:	60 ec       	ldi	r22, 0xC0	; 192
     6c2:	76 e2       	ldi	r23, 0x26	; 38
     6c4:	88 e2       	ldi	r24, 0x28	; 40
     6c6:	93 e2       	ldi	r25, 0x23	; 35
     6c8:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <macSetAlarm>
     6cc:	08 2f       	mov	r16, r24
     6ce:	10 e0       	ldi	r17, 0x00	; 0
     6d0:	90 91 b8 09 	lds	r25, 0x09B8	; 0x8009b8 <ucMachineWait>
     6d4:	91 11       	cpse	r25, r1
     6d6:	1e c0       	rjmp	.+60     	; 0x714 <appInit+0xa0>
     6d8:	90 91 b9 09 	lds	r25, 0x09B9	; 0x8009b9 <ucDeviceStateFlag>
     6dc:	91 30       	cpi	r25, 0x01	; 1
     6de:	51 f4       	brne	.+20     	; 0x6f4 <appInit+0x80>
     6e0:	0e 94 4a 12 	call	0x2494	; 0x2494 <SQACAInitializationSequence>
     6e4:	66 eb       	ldi	r22, 0xB6	; 182
     6e6:	71 e0       	ldi	r23, 0x01	; 1
     6e8:	8c e2       	ldi	r24, 0x2C	; 44
     6ea:	91 e0       	ldi	r25, 0x01	; 1
     6ec:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <macSetAlarm>
     6f0:	18 2f       	mov	r17, r24
     6f2:	ee cf       	rjmp	.-36     	; 0x6d0 <appInit+0x5c>
     6f4:	92 30       	cpi	r25, 0x02	; 2
     6f6:	39 f4       	brne	.+14     	; 0x706 <appInit+0x92>
     6f8:	80 2f       	mov	r24, r16
     6fa:	0e 94 d5 25 	call	0x4baa	; 0x4baa <macTimerEnd>
     6fe:	81 2f       	mov	r24, r17
     700:	0e 94 d5 25 	call	0x4baa	; 0x4baa <macTimerEnd>
     704:	07 c0       	rjmp	.+14     	; 0x714 <appInit+0xa0>
     706:	0e 94 7f 21 	call	0x42fe	; 0x42fe <mac_event_pending>
     70a:	88 23       	and	r24, r24
     70c:	09 f3       	breq	.-62     	; 0x6d0 <appInit+0x5c>
     70e:	0e 94 d3 21 	call	0x43a6	; 0x43a6 <macTask>
     712:	de cf       	rjmp	.-68     	; 0x6d0 <appInit+0x5c>
     714:	66 eb       	ldi	r22, 0xB6	; 182
     716:	71 e0       	ldi	r23, 0x01	; 1
     718:	8c e2       	ldi	r24, 0x2C	; 44
     71a:	91 e0       	ldi	r25, 0x01	; 1
     71c:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <macSetAlarm>
     720:	ae 01       	movw	r20, r28
     722:	4f 5f       	subi	r20, 0xFF	; 255
     724:	5f 4f       	sbci	r21, 0xFF	; 255
     726:	61 e0       	ldi	r22, 0x01	; 1
     728:	8e e1       	ldi	r24, 0x1E	; 30
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <halGetEeprom>
     730:	89 81       	ldd	r24, Y+1	; 0x01
     732:	90 91 f4 0a 	lds	r25, 0x0AF4	; 0x800af4 <SQACAMachineStatus>
     736:	8f 3f       	cpi	r24, 0xFF	; 255
     738:	79 f4       	brne	.+30     	; 0x758 <appInit+0xe4>
     73a:	99 23       	and	r25, r25
     73c:	69 f0       	breq	.+26     	; 0x758 <appInit+0xe4>
     73e:	44 ef       	ldi	r20, 0xF4	; 244
     740:	5a e0       	ldi	r21, 0x0A	; 10
     742:	61 e0       	ldi	r22, 0x01	; 1
     744:	8e e1       	ldi	r24, 0x1E	; 30
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <halPutEeprom>
     74c:	45 ef       	ldi	r20, 0xF5	; 245
     74e:	5a e0       	ldi	r21, 0x0A	; 10
     750:	61 e0       	ldi	r22, 0x01	; 1
     752:	8f e1       	ldi	r24, 0x1F	; 31
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	1a c0       	rjmp	.+52     	; 0x78c <appInit+0x118>
     758:	98 17       	cp	r25, r24
     75a:	d1 f0       	breq	.+52     	; 0x790 <appInit+0x11c>
     75c:	44 ef       	ldi	r20, 0xF4	; 244
     75e:	5a e0       	ldi	r21, 0x0A	; 10
     760:	61 e0       	ldi	r22, 0x01	; 1
     762:	8e e1       	ldi	r24, 0x1E	; 30
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <halPutEeprom>
     76a:	45 ef       	ldi	r20, 0xF5	; 245
     76c:	5a e0       	ldi	r21, 0x0A	; 10
     76e:	61 e0       	ldi	r22, 0x01	; 1
     770:	8f e1       	ldi	r24, 0x1F	; 31
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <halPutEeprom>
     778:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
     77c:	82 60       	ori	r24, 0x02	; 2
     77e:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
     782:	45 e3       	ldi	r20, 0x35	; 53
     784:	59 e0       	ldi	r21, 0x09	; 9
     786:	61 e0       	ldi	r22, 0x01	; 1
     788:	82 e2       	ldi	r24, 0x22	; 34
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <halPutEeprom>
     790:	0e 94 ba 01 	call	0x374	; 0x374 <appStartScan>
     794:	80 91 b9 09 	lds	r24, 0x09B9	; 0x8009b9 <ucDeviceStateFlag>
     798:	82 30       	cpi	r24, 0x02	; 2
     79a:	71 f4       	brne	.+28     	; 0x7b8 <appInit+0x144>
     79c:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <displayVersion>
     7a0:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
     7a4:	81 fd       	sbrc	r24, 1
     7a6:	08 c0       	rjmp	.+16     	; 0x7b8 <appInit+0x144>
     7a8:	0e 94 62 12 	call	0x24c4	; 0x24c4 <getSQReaderMachineSetup>
     7ac:	10 92 2f 0a 	sts	0x0A2F, r1	; 0x800a2f <ucCardStatus>
     7b0:	82 e0       	ldi	r24, 0x02	; 2
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	0e 94 33 12 	call	0x2466	; 0x2466 <cardRemoved>
     7b8:	00 00       	nop
     7ba:	0f 90       	pop	r0
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	1f 91       	pop	r17
     7c2:	0f 91       	pop	r16
     7c4:	08 95       	ret

000007c6 <GetParam>:
     7c6:	ef 92       	push	r14
     7c8:	ff 92       	push	r15
     7ca:	0f 93       	push	r16
     7cc:	1f 93       	push	r17
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
     7d2:	7a 01       	movw	r14, r20
     7d4:	fb 01       	movw	r30, r22
     7d6:	01 90       	ld	r0, Z+
     7d8:	00 20       	and	r0, r0
     7da:	e9 f7       	brne	.-6      	; 0x7d6 <GetParam+0x10>
     7dc:	31 97       	sbiw	r30, 0x01	; 1
     7de:	ef 01       	movw	r28, r30
     7e0:	c6 1b       	sub	r28, r22
     7e2:	d7 0b       	sbc	r29, r23
     7e4:	0e 94 36 32 	call	0x646c	; 0x646c <strstr>
     7e8:	00 97       	sbiw	r24, 0x00	; 0
     7ea:	c1 f0       	breq	.+48     	; 0x81c <GetParam+0x56>
     7ec:	8c 01       	movw	r16, r24
     7ee:	0c 0f       	add	r16, r28
     7f0:	11 1d       	adc	r17, r1
     7f2:	b7 01       	movw	r22, r14
     7f4:	c8 01       	movw	r24, r16
     7f6:	0e 94 36 32 	call	0x646c	; 0x646c <strstr>
     7fa:	00 97       	sbiw	r24, 0x00	; 0
     7fc:	79 f0       	breq	.+30     	; 0x81c <GetParam+0x56>
     7fe:	ec 01       	movw	r28, r24
     800:	c0 1b       	sub	r28, r16
     802:	d1 0b       	sbc	r29, r17
     804:	ae 01       	movw	r20, r28
     806:	b8 01       	movw	r22, r16
     808:	8e e3       	ldi	r24, 0x3E	; 62
     80a:	98 e0       	ldi	r25, 0x08	; 8
     80c:	0e 94 f8 31 	call	0x63f0	; 0x63f0 <memcpy>
     810:	c2 5c       	subi	r28, 0xC2	; 194
     812:	d7 4f       	sbci	r29, 0xF7	; 247
     814:	18 82       	st	Y, r1
     816:	8e e3       	ldi	r24, 0x3E	; 62
     818:	98 e0       	ldi	r25, 0x08	; 8
     81a:	02 c0       	rjmp	.+4      	; 0x820 <GetParam+0x5a>
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	1f 91       	pop	r17
     826:	0f 91       	pop	r16
     828:	ff 90       	pop	r15
     82a:	ef 90       	pop	r14
     82c:	08 95       	ret

0000082e <DevicePoll>:

	void DevicePoll(void)
	{
		#if (DEVICE_CONNECTED == ACA_MACHINE )

		SQACAMachineStatusCommSequence();					//SQ Payment System Driven Vending
     82e:	0e 94 42 12 	call	0x2484	; 0x2484 <SQACAMachineStatusCommSequence>
		macSetAlarm(DEVICE_POLL_PERIOD,SetDeviceState);
     832:	66 eb       	ldi	r22, 0xB6	; 182
     834:	71 e0       	ldi	r23, 0x01	; 1
     836:	8c e2       	ldi	r24, 0x2C	; 44
     838:	91 e0       	ldi	r25, 0x01	; 1
     83a:	0c 94 4f 25 	jmp	0x4a9e	; 0x4a9e <macSetAlarm>

0000083e <padLeft>:
	\param paddedLength is the data size.
	\param pad is pointer to data to be converted.
	*/
	
	char * padLeft(char * string, u8 paddedLength, const char * pad)
	{
     83e:	7f 92       	push	r7
     840:	8f 92       	push	r8
     842:	9f 92       	push	r9
     844:	af 92       	push	r10
     846:	bf 92       	push	r11
     848:	cf 92       	push	r12
     84a:	df 92       	push	r13
     84c:	ef 92       	push	r14
     84e:	ff 92       	push	r15
     850:	0f 93       	push	r16
     852:	1f 93       	push	r17
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	7c 01       	movw	r14, r24
     85a:	76 2e       	mov	r7, r22
     85c:	4a 01       	movw	r8, r20
		size_t stringLength = strlen(string);
     85e:	ec 01       	movw	r28, r24
     860:	09 90       	ld	r0, Y+
     862:	00 20       	and	r0, r0
     864:	e9 f7       	brne	.-6      	; 0x860 <padLeft+0x22>
     866:	21 97       	sbiw	r28, 0x01	; 1
     868:	c8 1b       	sub	r28, r24
     86a:	d9 0b       	sbc	r29, r25
		size_t lenpad = strlen(pad);
     86c:	fa 01       	movw	r30, r20
     86e:	01 90       	ld	r0, Z+
     870:	00 20       	and	r0, r0
     872:	e9 f7       	brne	.-6      	; 0x86e <padLeft+0x30>
     874:	31 97       	sbiw	r30, 0x01	; 1
     876:	8f 01       	movw	r16, r30
     878:	04 1b       	sub	r16, r20
     87a:	15 0b       	sbc	r17, r21
		u8 i = paddedLength;
		
		if (stringLength >= paddedLength)
     87c:	c6 2e       	mov	r12, r22
     87e:	d1 2c       	mov	r13, r1
     880:	cc 15       	cp	r28, r12
     882:	dd 05       	cpc	r29, r13
     884:	20 f5       	brcc	.+72     	; 0x8ce <padLeft+0x90>
		{
			return NULL;//'\0';
		}

		char * padded = (char*)malloc(paddedLength + 1); // allocate memory for new string
     886:	c6 01       	movw	r24, r12
     888:	01 96       	adiw	r24, 0x01	; 1
     88a:	0e 94 1e 2e 	call	0x5c3c	; 0x5c3c <malloc>
     88e:	5c 01       	movw	r10, r24
		
		for(; paddedLength > stringLength; paddedLength--, padded += lenpad)
     890:	87 2d       	mov	r24, r7
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	c8 17       	cp	r28, r24
     896:	d9 07       	cpc	r29, r25
     898:	48 f4       	brcc	.+18     	; 0x8ac <padLeft+0x6e>
		{
			strncpy(padded, pad, lenpad);
     89a:	a8 01       	movw	r20, r16
     89c:	b4 01       	movw	r22, r8
     89e:	c5 01       	movw	r24, r10
     8a0:	0e 94 1c 32 	call	0x6438	; 0x6438 <strncpy>
			return NULL;//'\0';
		}

		char * padded = (char*)malloc(paddedLength + 1); // allocate memory for new string
		
		for(; paddedLength > stringLength; paddedLength--, padded += lenpad)
     8a4:	7a 94       	dec	r7
     8a6:	a0 0e       	add	r10, r16
     8a8:	b1 1e       	adc	r11, r17
     8aa:	f2 cf       	rjmp	.-28     	; 0x890 <padLeft+0x52>
		{
			strncpy(padded, pad, lenpad);
		}
		
		strncpy(padded, string, stringLength); /* copy without '\0' */
     8ac:	ae 01       	movw	r20, r28
     8ae:	b7 01       	movw	r22, r14
     8b0:	c5 01       	movw	r24, r10
     8b2:	0e 94 1c 32 	call	0x6438	; 0x6438 <strncpy>
		padded += stringLength; /* prepare for first append of pad */
     8b6:	ca 0d       	add	r28, r10
     8b8:	db 1d       	adc	r29, r11
		*padded = '\0';
     8ba:	18 82       	st	Y, r1

		padded = (padded - i);
     8bc:	cc 19       	sub	r28, r12
     8be:	dd 09       	sbc	r29, r13
		strncpy(string,padded,i);
     8c0:	a6 01       	movw	r20, r12
     8c2:	be 01       	movw	r22, r28
     8c4:	c7 01       	movw	r24, r14
     8c6:	0e 94 1c 32 	call	0x6438	; 0x6438 <strncpy>
		
		return padded;
     8ca:	ce 01       	movw	r24, r28
     8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <padLeft+0x94>
		size_t lenpad = strlen(pad);
		u8 i = paddedLength;
		
		if (stringLength >= paddedLength)
		{
			return NULL;//'\0';
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	90 e0       	ldi	r25, 0x00	; 0

		padded = (padded - i);
		strncpy(string,padded,i);
		
		return padded;
	}
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	1f 91       	pop	r17
     8d8:	0f 91       	pop	r16
     8da:	ff 90       	pop	r15
     8dc:	ef 90       	pop	r14
     8de:	df 90       	pop	r13
     8e0:	cf 90       	pop	r12
     8e2:	bf 90       	pop	r11
     8e4:	af 90       	pop	r10
     8e6:	9f 90       	pop	r9
     8e8:	8f 90       	pop	r8
     8ea:	7f 90       	pop	r7
     8ec:	08 95       	ret

000008ee <appTask>:
	SetupTimeout
	GetParam
	Ascii_to_nible
	*/
	void appTask(void)				//after appInit()
	{
     8ee:	bf 92       	push	r11
     8f0:	cf 92       	push	r12
     8f2:	df 92       	push	r13
     8f4:	ef 92       	push	r14
     8f6:	ff 92       	push	r15
     8f8:	0f 93       	push	r16
     8fa:	1f 93       	push	r17
     8fc:	cf 93       	push	r28
     8fe:	df 93       	push	r29
     900:	cd b7       	in	r28, 0x3d	; 61
     902:	de b7       	in	r29, 0x3e	; 62
     904:	ab 97       	sbiw	r28, 0x2b	; 43
     906:	0f b6       	in	r0, 0x3f	; 63
     908:	f8 94       	cli
     90a:	de bf       	out	0x3e, r29	; 62
     90c:	0f be       	out	0x3f, r0	; 63
     90e:	cd bf       	out	0x3d, r28	; 61
		//vars declaration
		ucSendDataSize = 0;
     910:	10 92 0e 0b 	sts	0x0B0E, r1	; 0x800b0e <ucSendDataSize>
		

		
		#ifdef MACHINE_CONNECTED
		#if (DEVICE_CONNECTED == ACA_MACHINE)
		if(ucDeviceStateFlag == DEVICE_STATUS_NEEDED)	//do machine status communication every 1/2 second
     914:	80 91 b9 09 	lds	r24, 0x09B9	; 0x8009b9 <ucDeviceStateFlag>
     918:	81 30       	cpi	r24, 0x01	; 1
     91a:	41 f5       	brne	.+80     	; 0x96c <appTask+0x7e>
		{
			DevicePoll();
     91c:	0e 94 17 04 	call	0x82e	; 0x82e <DevicePoll>
			
			
			
			if (ucDeviceStateFlag == MACHINE_STATUS_ON)			//machine status 33, 41 and online
     920:	80 91 b9 09 	lds	r24, 0x09B9	; 0x8009b9 <ucDeviceStateFlag>
     924:	82 30       	cpi	r24, 0x02	; 2
     926:	11 f5       	brne	.+68     	; 0x96c <appTask+0x7e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     928:	8f e1       	ldi	r24, 0x1F	; 31
     92a:	9e e4       	ldi	r25, 0x4E	; 78
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	f1 f7       	brne	.-4      	; 0x92c <appTask+0x3e>
     930:	00 c0       	rjmp	.+0      	; 0x932 <appTask+0x44>
     932:	00 00       	nop
			{
				_delay_ms(5);
				
				if (ReaderStateFlag.ReaderSetup == READER_SETUP_NEEDED)
     934:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
     938:	81 ff       	sbrs	r24, 1
     93a:	02 c0       	rjmp	.+4      	; 0x940 <appTask+0x52>
				{
					//Display "No Setup" message on machine
					displayMsg(SETUP_MSG);
     93c:	82 e0       	ldi	r24, 0x02	; 2
     93e:	14 c0       	rjmp	.+40     	; 0x968 <appTask+0x7a>
				}
				else if (((macConfig.associated == false) && (ReaderStateFlag.EnableOfflineTransaction == false)) || (ReaderStateFlag.MaxNumTransReached == true))
     940:	90 91 38 0c 	lds	r25, 0x0C38	; 0x800c38 <macConfig+0x8>
     944:	91 11       	cpse	r25, r1
     946:	02 c0       	rjmp	.+4      	; 0x94c <appTask+0x5e>
     948:	83 ff       	sbrs	r24, 3
     94a:	02 c0       	rjmp	.+4      	; 0x950 <appTask+0x62>
     94c:	84 ff       	sbrs	r24, 4
     94e:	02 c0       	rjmp	.+4      	; 0x954 <appTask+0x66>
				{
					//Display "Service message" message on machine
					displayMsg(SERVICE_MSG);
     950:	83 e0       	ldi	r24, 0x03	; 3
     952:	0a c0       	rjmp	.+20     	; 0x968 <appTask+0x7a>
				}
				else if (ReaderStateFlag.Busy == true)
     954:	86 ff       	sbrs	r24, 6
     956:	0a c0       	rjmp	.+20     	; 0x96c <appTask+0x7e>
				{
					#if (DEVICE_CONNECTED == ACA_MACHINE)
					//Display busy message
					if( OP != WAIT_FOR_SERVER ) // ****need to put op code in a queue****
     958:	80 91 b7 09 	lds	r24, 0x09B7	; 0x8009b7 <OP>
     95c:	87 30       	cpi	r24, 0x07	; 7
     95e:	19 f0       	breq	.+6      	; 0x966 <appTask+0x78>
					{
						OP = WAIT_FOR_SERVER;
     960:	87 e0       	ldi	r24, 0x07	; 7
     962:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
					}
					displayMsg(BUSY_MSG);
     966:	84 e0       	ldi	r24, 0x04	; 4
     968:	0e 94 9a 0c 	call	0x1934	; 0x1934 <displayMsg>
		}
		#endif // ACA_MACHINE
		
		#endif

		if(macConfig.associated == true/*/false*/ || ReaderStateFlag.EnableOfflineTransaction == true) //  Don't bother running the app until the reader has associated
     96c:	20 91 38 0c 	lds	r18, 0x0C38	; 0x800c38 <macConfig+0x8>
     970:	21 11       	cpse	r18, r1
     972:	04 c0       	rjmp	.+8      	; 0x97c <appTask+0x8e>
     974:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
     978:	83 ff       	sbrs	r24, 3
     97a:	28 c3       	rjmp	.+1616   	; 0xfcc <appTask+0x6de>
		{
			
			switch(OP){
     97c:	e0 91 b7 09 	lds	r30, 0x09B7	; 0x8009b7 <OP>
     980:	8e 2f       	mov	r24, r30
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	fc 01       	movw	r30, r24
     986:	31 97       	sbiw	r30, 0x01	; 1
     988:	e8 32       	cpi	r30, 0x28	; 40
     98a:	f1 05       	cpc	r31, r1
     98c:	08 f0       	brcs	.+2      	; 0x990 <appTask+0xa2>
     98e:	1e c3       	rjmp	.+1596   	; 0xfcc <appTask+0x6de>
     990:	e0 57       	subi	r30, 0x70	; 112
     992:	ff 4f       	sbci	r31, 0xFF	; 255
     994:	0c 94 f7 2d 	jmp	0x5bee	; 0x5bee <__tablejump2__>
				//case #1 called by appInit
				case VALIDATE_READER:
				//TODO: fix machine type switch
				//
				#if (DEVICE_CONNECTED == ACA_MACHINE)
				if((ReaderStateFlag.EnableOfflineTransaction == true) && (ReaderStateFlag.ReaderSetup == READER_SETUP_DONE))
     998:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
     99c:	83 ff       	sbrs	r24, 3
     99e:	04 c0       	rjmp	.+8      	; 0x9a8 <appTask+0xba>
     9a0:	81 fd       	sbrc	r24, 1
     9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <appTask+0xba>
				{
					OP = INIT_READER;
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	0d c3       	rjmp	.+1562   	; 0xfc2 <appTask+0x6d4>
				}
				else{
					#endif //ACA_MACHINE
					
					#if (DEVICE_CONNECTED == ACA_MACHINE)
					if( ((ReaderStateFlag.ReaderSetup == READER_SETUP_NEEDED) || ( ReaderStateFlag.FirstRun == VIRGIN_READER)) && (SQACAMachineStatus.MachineType[0] != INVALID_MACHINE) ){
     9a8:	81 fb       	bst	r24, 1
     9aa:	99 27       	eor	r25, r25
     9ac:	90 f9       	bld	r25, 0
     9ae:	81 fd       	sbrc	r24, 1
     9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <appTask+0xc8>
     9b2:	80 ff       	sbrs	r24, 0
     9b4:	0b c0       	rjmp	.+22     	; 0x9cc <appTask+0xde>
     9b6:	20 91 f4 0a 	lds	r18, 0x0AF4	; 0x800af4 <SQACAMachineStatus>
     9ba:	22 23       	and	r18, r18
     9bc:	29 f0       	breq	.+10     	; 0x9c8 <appTask+0xda>
						
						SETUP_TIMEOUT = true;
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <SETUP_TIMEOUT>
						OP = SETUP_REQUEST; //enable when setup supported by server
     9c4:	8a e0       	ldi	r24, 0x0A	; 10
     9c6:	fd c2       	rjmp	.+1530   	; 0xfc2 <appTask+0x6d4>
						
						
						#endif
						
					}
					else if( (ReaderStateFlag.ReaderSetup == READER_SETUP_DONE) && (ReaderStateFlag.ValidateSetup == VALIDATE_READER_SETUP) ){
     9c8:	91 11       	cpse	r25, r1
     9ca:	00 c3       	rjmp	.+1536   	; 0xfcc <appTask+0x6de>
     9cc:	82 ff       	sbrs	r24, 2
     9ce:	ea cf       	rjmp	.-44     	; 0x9a4 <appTask+0xb6>
						
						VALIDATION_TIMEOUT = false;
     9d0:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <VALIDATION_TIMEOUT>
						sendBOWValidationRequest();
     9d4:	0e 94 2f 09 	call	0x125e	; 0x125e <sendBOWValidationRequest>
						// Clear Rx Buffer
						memset(DataBuffer,0,sizeof(DataBuffer));
     9d8:	80 e8       	ldi	r24, 0x80	; 128
     9da:	e7 e3       	ldi	r30, 0x37	; 55
     9dc:	f9 e0       	ldi	r31, 0x09	; 9
     9de:	df 01       	movw	r26, r30
     9e0:	1d 92       	st	X+, r1
     9e2:	8a 95       	dec	r24
     9e4:	e9 f7       	brne	.-6      	; 0x9e0 <appTask+0xf2>
						
						macSetLongAlarm(SETUP_VALIDATION_TIMEOUT, ValidationTimeout); 		//check Every 15s
     9e6:	61 ea       	ldi	r22, 0xA1	; 161
     9e8:	71 e0       	ldi	r23, 0x01	; 1
     9ea:	8c e3       	ldi	r24, 0x3C	; 60
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	0e 94 98 25 	call	0x4b30	; 0x4b30 <macSetLongAlarm>

						// Wait for validation package to arrive
						OP = VALIDATE_SETUP;
     9f2:	84 e1       	ldi	r24, 0x14	; 20
     9f4:	e6 c2       	rjmp	.+1484   	; 0xfc2 <appTask+0x6d4>
				break;
				//case #2
				case INIT_READER:
				#if (DEVICE_CONNECTED == ACA_MACHINE)
				
				if( isMachineCycleRunning() )
     9f6:	0e 94 3e 12 	call	0x247c	; 0x247c <isMachineCycleRunning>
     9fa:	88 23       	and	r24, r24
     9fc:	09 f4       	brne	.+2      	; 0xa00 <appTask+0x112>
     9fe:	de c2       	rjmp	.+1468   	; 0xfbc <appTask+0x6ce>
				{
					OP = CYCLE_STARTED;
     a00:	80 e1       	ldi	r24, 0x10	; 16
     a02:	df c2       	rjmp	.+1470   	; 0xfc2 <appTask+0x6d4>
				break;
				//case #3
				case SCANNING: //scan for card swipe

				// Enable Heart beat routine
				if (uiFunctionEntered < (20 * (F_CPU/4000000)))
     a04:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <uiFunctionEntered>
     a08:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <uiFunctionEntered+0x1>
     a0c:	80 35       	cpi	r24, 0x50	; 80
     a0e:	91 05       	cpc	r25, r1
     a10:	30 f4       	brcc	.+12     	; 0xa1e <appTask+0x130>
				{
					uiFunctionEntered++;
     a12:	01 96       	adiw	r24, 0x01	; 1
     a14:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <uiFunctionEntered+0x1>
     a18:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <uiFunctionEntered>
     a1c:	05 c0       	rjmp	.+10     	; 0xa28 <appTask+0x13a>
				}
				else
				{
					
					Led1_toggle();
     a1e:	90 9a       	sbi	0x12, 0	; 18
					
					uiFunctionEntered = 0;
     a20:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <uiFunctionEntered+0x1>
     a24:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <uiFunctionEntered>
				}

				
				if(!Request(ISO14443_3_REQALL, tmp))
     a28:	be 01       	movw	r22, r28
     a2a:	6f 5f       	subi	r22, 0xFF	; 255
     a2c:	7f 4f       	sbci	r23, 0xFF	; 255
     a2e:	82 e5       	ldi	r24, 0x52	; 82
     a30:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <Request>
     a34:	89 2b       	or	r24, r25
     a36:	09 f0       	breq	.+2      	; 0xa3a <appTask+0x14c>
     a38:	c9 c2       	rjmp	.+1426   	; 0xfcc <appTask+0x6de>
				{
					u8 cardType;
					u8 cardKey[6] = {0xff,0xff,0xff,0xff,0xff,0xff};
     a3a:	86 e0       	ldi	r24, 0x06	; 6
     a3c:	e1 e2       	ldi	r30, 0x21	; 33
     a3e:	f2 e0       	ldi	r31, 0x02	; 2
     a40:	de 01       	movw	r26, r28
     a42:	5f 96       	adiw	r26, 0x1f	; 31
     a44:	01 90       	ld	r0, Z+
     a46:	0d 92       	st	X+, r0
     a48:	8a 95       	dec	r24
     a4a:	e1 f7       	brne	.-8      	; 0xa44 <appTask+0x156>
					
					/*anti-collision and select the card*/
					if(!AnticollSelect(0, tmp, &cardType))
     a4c:	ae 01       	movw	r20, r28
     a4e:	49 5d       	subi	r20, 0xD9	; 217
     a50:	5f 4f       	sbci	r21, 0xFF	; 255
     a52:	be 01       	movw	r22, r28
     a54:	6f 5f       	subi	r22, 0xFF	; 255
     a56:	7f 4f       	sbci	r23, 0xFF	; 255
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	0e 94 36 19 	call	0x326c	; 0x326c <AnticollSelect>
     a5e:	89 2b       	or	r24, r25
     a60:	09 f0       	breq	.+2      	; 0xa64 <appTask+0x176>
     a62:	b4 c2       	rjmp	.+1384   	; 0xfcc <appTask+0x6de>
					{
						if(cardType == MIFARE_1K)
     a64:	8f a1       	ldd	r24, Y+39	; 0x27
     a66:	88 30       	cpi	r24, 0x08	; 8
     a68:	69 f4       	brne	.+26     	; 0xa84 <appTask+0x196>
						{
							CurrentAccount.Type = MIFARE_1K;
     a6a:	80 93 2a 09 	sts	0x092A, r24	; 0x80092a <CurrentAccount>
							
							Authentication(MIFARE_AUTHENT_A,cardKey,tmp,0);
     a6e:	20 e0       	ldi	r18, 0x00	; 0
     a70:	ae 01       	movw	r20, r28
     a72:	4f 5f       	subi	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	be 01       	movw	r22, r28
     a78:	61 5e       	subi	r22, 0xE1	; 225
     a7a:	7f 4f       	sbci	r23, 0xFF	; 255
     a7c:	80 e6       	ldi	r24, 0x60	; 96
     a7e:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <Authentication>
     a82:	02 c0       	rjmp	.+4      	; 0xa88 <appTask+0x19a>
						}
						else
						{
							CurrentAccount.Type = 0;
     a84:	10 92 2a 09 	sts	0x092A, r1	; 0x80092a <CurrentAccount>
						}
						OP = CARD_DETECTED;
     a88:	8c e0       	ldi	r24, 0x0C	; 12
     a8a:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
						ledoff1();
     a8e:	0e 94 9d 01 	call	0x33a	; 0x33a <ledoff1>
     a92:	9c c2       	rjmp	.+1336   	; 0xfcc <appTask+0x6de>

				
				//case #4
				case CARD_DETECTED:
				{
					u8 cardNum[10] = {0};
     a94:	8e 01       	movw	r16, r28
     a96:	0f 5f       	subi	r16, 0xFF	; 255
     a98:	1f 4f       	sbci	r17, 0xFF	; 255
     a9a:	8a e0       	ldi	r24, 0x0A	; 10
     a9c:	f8 01       	movw	r30, r16
     a9e:	11 92       	st	Z+, r1
     aa0:	8a 95       	dec	r24
     aa2:	e9 f7       	brne	.-6      	; 0xa9e <appTask+0x1b0>
					//memset(DataBuffer,0,sizeof(DataBuffer));	// Clear Buffer
					
					//Read CardID from User Zone
					if(!readCardID(CurrentAccount.Type, &cardNum[0]))
     aa4:	b8 01       	movw	r22, r16
     aa6:	80 91 2a 09 	lds	r24, 0x092A	; 0x80092a <CurrentAccount>
     aaa:	0e 94 83 1a 	call	0x3506	; 0x3506 <readCardID>
     aae:	89 2b       	or	r24, r25
     ab0:	09 f0       	breq	.+2      	; 0xab4 <appTask+0x1c6>
     ab2:	8a c0       	rjmp	.+276    	; 0xbc8 <appTask+0x2da>
					{
						padLeft((char*)&cardNum[0],9,"200");
     ab4:	4e e3       	ldi	r20, 0x3E	; 62
     ab6:	52 e0       	ldi	r21, 0x02	; 2
     ab8:	69 e0       	ldi	r22, 0x09	; 9
     aba:	c8 01       	movw	r24, r16
     abc:	0e 94 1f 04 	call	0x83e	; 0x83e <padLeft>
						
						CurrentAccount.ID = strtoul((const char*)cardNum,NULL,10);	//save active card's id
     ac0:	4a e0       	ldi	r20, 0x0A	; 10
     ac2:	50 e0       	ldi	r21, 0x00	; 0
     ac4:	60 e0       	ldi	r22, 0x00	; 0
     ac6:	70 e0       	ldi	r23, 0x00	; 0
     ac8:	c8 01       	movw	r24, r16
     aca:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <strtoul>
     ace:	60 93 2b 09 	sts	0x092B, r22	; 0x80092b <CurrentAccount+0x1>
     ad2:	70 93 2c 09 	sts	0x092C, r23	; 0x80092c <CurrentAccount+0x2>
     ad6:	80 93 2d 09 	sts	0x092D, r24	; 0x80092d <CurrentAccount+0x3>
     ada:	90 93 2e 09 	sts	0x092E, r25	; 0x80092e <CurrentAccount+0x4>
						//associated?
						if(macConfig.associated == true)
     ade:	80 91 38 0c 	lds	r24, 0x0C38	; 0x800c38 <macConfig+0x8>
     ae2:	88 23       	and	r24, r24
     ae4:	a1 f1       	breq	.+104    	; 0xb4e <appTask+0x260>
						{
							// Send Data Package via Radio
							sprintf((char*)ucSendDataBuffer+1, "<sN>%s</sN>",cardNum);
     ae6:	1f 93       	push	r17
     ae8:	0f 93       	push	r16
     aea:	82 e4       	ldi	r24, 0x42	; 66
     aec:	92 e0       	ldi	r25, 0x02	; 2
     aee:	9f 93       	push	r25
     af0:	8f 93       	push	r24
     af2:	01 e3       	ldi	r16, 0x31	; 49
     af4:	1a e0       	ldi	r17, 0x0A	; 10
     af6:	1f 93       	push	r17
     af8:	0f 93       	push	r16
     afa:	0e 94 b2 32 	call	0x6564	; 0x6564 <sprintf>

							ucSendDataSize = strlen((char*)ucSendDataBuffer+1);
     afe:	f8 01       	movw	r30, r16
     b00:	01 90       	ld	r0, Z+
     b02:	00 20       	and	r0, r0
     b04:	e9 f7       	brne	.-6      	; 0xb00 <appTask+0x212>
     b06:	bf 01       	movw	r22, r30
     b08:	62 53       	subi	r22, 0x32	; 50
     b0a:	7a 40       	sbci	r23, 0x0A	; 10
							ucSendDataBuffer[0] = ucSendDataSize;   // Length
     b0c:	60 93 30 0a 	sts	0x0A30, r22	; 0x800a30 <ucSendDataBuffer>
							ucSendDataSize = ucSendDataSize + 1;    // data size = data byte + size byte
     b10:	6f 5f       	subi	r22, 0xFF	; 255
     b12:	60 93 0e 0b 	sts	0x0B0E, r22	; 0x800b0e <ucSendDataSize>
							macDataRequest(DEFAULT_COORD_ADDR, ucSendDataSize, ucSendDataBuffer);
     b16:	40 e3       	ldi	r20, 0x30	; 48
     b18:	5a e0       	ldi	r21, 0x0A	; 10
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <macDataRequest>
							
							// Clear Rx Buffer
							memset(DataBuffer,0,sizeof(DataBuffer));
     b22:	80 e8       	ldi	r24, 0x80	; 128
     b24:	e7 e3       	ldi	r30, 0x37	; 55
     b26:	f9 e0       	ldi	r31, 0x09	; 9
     b28:	df 01       	movw	r26, r30
     b2a:	1d 92       	st	X+, r1
     b2c:	8a 95       	dec	r24
     b2e:	e9 f7       	brne	.-6      	; 0xb2a <appTask+0x23c>
							
							OP = WAIT_FOR_SERVER;
     b30:	87 e0       	ldi	r24, 0x07	; 7
     b32:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
							ReaderStateFlag.Busy = true;
     b36:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
     b3a:	80 64       	ori	r24, 0x40	; 64
     b3c:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
     b40:	0f 90       	pop	r0
     b42:	0f 90       	pop	r0
     b44:	0f 90       	pop	r0
     b46:	0f 90       	pop	r0
     b48:	0f 90       	pop	r0
     b4a:	0f 90       	pop	r0
     b4c:	38 c0       	rjmp	.+112    	; 0xbbe <appTask+0x2d0>
							
						}
						#if (DEVICE_CONNECTED == ACA_MACHINE)

						else if((macConfig.associated == false) && (ReaderStateFlag.EnableOfflineTransaction == true) && (ReaderStateFlag.MaxNumTransReached == false))
     b4e:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
     b52:	83 ff       	sbrs	r24, 3
     b54:	31 c0       	rjmp	.+98     	; 0xbb8 <appTask+0x2ca>
     b56:	84 fd       	sbrc	r24, 4
     b58:	2f c0       	rjmp	.+94     	; 0xbb8 <appTask+0x2ca>
						{
							//allow cycle to start when BOW is down
							CurrentAccount.Value = vendPrice * 100;
     b5a:	20 e0       	ldi	r18, 0x00	; 0
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	48 ec       	ldi	r20, 0xC8	; 200
     b60:	52 e4       	ldi	r21, 0x42	; 66
     b62:	60 91 c0 0c 	lds	r22, 0x0CC0	; 0x800cc0 <vendPrice>
     b66:	70 91 c1 0c 	lds	r23, 0x0CC1	; 0x800cc1 <vendPrice+0x1>
     b6a:	80 91 c2 0c 	lds	r24, 0x0CC2	; 0x800cc2 <vendPrice+0x2>
     b6e:	90 91 c3 0c 	lds	r25, 0x0CC3	; 0x800cc3 <vendPrice+0x3>
     b72:	0e 94 34 2d 	call	0x5a68	; 0x5a68 <__mulsf3>
     b76:	0e 94 77 2c 	call	0x58ee	; 0x58ee <__fixunssfsi>
     b7a:	70 93 32 09 	sts	0x0932, r23	; 0x800932 <CurrentAccount+0x8>
     b7e:	60 93 31 09 	sts	0x0931, r22	; 0x800931 <CurrentAccount+0x7>
							
							if( SQACAMimicQuantumSequence(REGULAR_VEND)  )
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	0e 94 7f 11 	call	0x22fe	; 0x22fe <SQACAMimicQuantumSequence>
     b8a:	89 2b       	or	r24, r25
     b8c:	c1 f0       	breq	.+48     	; 0xbbe <appTask+0x2d0>
							{
								OP = WAIT_FOR_SELECTION;
     b8e:	88 e0       	ldi	r24, 0x08	; 8
     b90:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
								
								KPTOFlag = 0;
     b94:	10 92 2e 05 	sts	0x052E, r1	; 0x80052e <KPTOFlag>
								
								if( waitForMachineStartKey() )
     b98:	0e 94 40 12 	call	0x2480	; 0x2480 <waitForMachineStartKey>
								{
									macSetLongAlarm(MACHINE_KEYPRESS_WAITTIME,KeypressTimeOut);		//KeyPressWaitTime
     b9c:	6e ea       	ldi	r22, 0xAE	; 174
     b9e:	71 e0       	ldi	r23, 0x01	; 1
							{
								OP = WAIT_FOR_SELECTION;
								
								KPTOFlag = 0;
								
								if( waitForMachineStartKey() )
     ba0:	88 23       	and	r24, r24
     ba2:	29 f0       	breq	.+10     	; 0xbae <appTask+0x2c0>
								{
									macSetLongAlarm(MACHINE_KEYPRESS_WAITTIME,KeypressTimeOut);		//KeyPressWaitTime
     ba4:	8e e1       	ldi	r24, 0x1E	; 30
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e 94 98 25 	call	0x4b30	; 0x4b30 <macSetLongAlarm>
     bac:	08 c0       	rjmp	.+16     	; 0xbbe <appTask+0x2d0>
								}
								else
								macSetAlarm(500, KeypressTimeOut); // if connected to a washer while cycle is running and a card is swiped, just display the balance and continue scanning.
     bae:	84 ef       	ldi	r24, 0xF4	; 244
     bb0:	91 e0       	ldi	r25, 0x01	; 1
     bb2:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <macSetAlarm>
     bb6:	03 c0       	rjmp	.+6      	; 0xbbe <appTask+0x2d0>
								
							}
						}
						else{
							OP = SCANNING;
     bb8:	82 e0       	ldi	r24, 0x02	; 2
     bba:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
						#if (DEBUG)
						Beeps(1);
						#endif

						//Set Timeout timer
						TOFlag = 0;
     bbe:	10 92 2f 05 	sts	0x052F, r1	; 0x80052f <TOFlag>
						ucTimerID = macSetLongAlarm(SERVER_RESPONSE_TIMEOUT,CommTimeOut);
     bc2:	65 ea       	ldi	r22, 0xA5	; 165
     bc4:	71 e0       	ldi	r23, 0x01	; 1
     bc6:	ef c1       	rjmp	.+990    	; 0xfa6 <appTask+0x6b8>
					else
					{
						#if (DEBUG)
						debugMsgStr("\r\nInvalid CardID\r\n");
						#endif
						OP = SCARD_REMOVED;						
     bc8:	8d e0       	ldi	r24, 0x0D	; 13
     bca:	fb c1       	rjmp	.+1014   	; 0xfc2 <appTask+0x6d4>
				}
				break;
				//case #5
				case SEND_OFFLINE_TRANSACTIONS:
				
				if (timeout.sendingOfflineTransactions)
     bcc:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <timeout>
     bd0:	80 ff       	sbrs	r24, 0
     bd2:	fc c1       	rjmp	.+1016   	; 0xfcc <appTask+0x6de>
				{
					timeout.sendingOfflineTransactions = false;
     bd4:	8e 7f       	andi	r24, 0xFE	; 254
     bd6:	80 93 02 0a 	sts	0x0A02, r24	; 0x800a02 <timeout>
     bda:	f2 c1       	rjmp	.+996    	; 0xfc0 <appTask+0x6d2>
				
				case SHOW_BALANCE_REQUEST:
				//case #6
				case WAIT_FOR_SERVER: //wait for response from server

				if(DataBuffer[0] != '\0')
     bdc:	80 91 37 09 	lds	r24, 0x0937	; 0x800937 <DataBuffer>
     be0:	88 23       	and	r24, r24
     be2:	09 f4       	brne	.+2      	; 0xbe6 <appTask+0x2f8>
     be4:	cb c0       	rjmp	.+406    	; 0xd7c <appTask+0x48e>
				{
					// Print response
					ReaderStateFlag.Busy = false;
     be6:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
     bea:	8f 7b       	andi	r24, 0xBF	; 191
     bec:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
					debugMsgStr("\r\n");
					debugMsgStr(DataBuffer);
					debugMsgStr("\r\n");
					#endif

					OP = SCARD_REMOVED;	
     bf0:	8d e0       	ldi	r24, 0x0D	; 13
     bf2:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>

					#if (DEVICE_CONNECTED == ACA_MACHINE )
					
					
					//Extract the Card Id
					if( (uctempBuf = strstr((char *)DataBuffer,"sN: ")) )
     bf6:	6e e4       	ldi	r22, 0x4E	; 78
     bf8:	72 e0       	ldi	r23, 0x02	; 2
     bfa:	87 e3       	ldi	r24, 0x37	; 55
     bfc:	99 e0       	ldi	r25, 0x09	; 9
     bfe:	0e 94 36 32 	call	0x646c	; 0x646c <strstr>
     c02:	00 97       	sbiw	r24, 0x00	; 0
     c04:	09 f4       	brne	.+2      	; 0xc08 <appTask+0x31a>
     c06:	b7 c0       	rjmp	.+366    	; 0xd76 <appTask+0x488>
					{
						CurrentAccount.ID = strtoul((const char*)(uctempBuf+4),NULL,10);	//save active card's id
     c08:	4a e0       	ldi	r20, 0x0A	; 10
     c0a:	50 e0       	ldi	r21, 0x00	; 0
     c0c:	60 e0       	ldi	r22, 0x00	; 0
     c0e:	70 e0       	ldi	r23, 0x00	; 0
     c10:	04 96       	adiw	r24, 0x04	; 4
     c12:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <strtoul>
     c16:	60 93 2b 09 	sts	0x092B, r22	; 0x80092b <CurrentAccount+0x1>
     c1a:	70 93 2c 09 	sts	0x092C, r23	; 0x80092c <CurrentAccount+0x2>
     c1e:	80 93 2d 09 	sts	0x092D, r24	; 0x80092d <CurrentAccount+0x3>
     c22:	90 93 2e 09 	sts	0x092E, r25	; 0x80092e <CurrentAccount+0x4>
						
						//Display card balance on machine
						double fBalance = 0.0;
						uctempBuf = strstr((char *)DataBuffer,"Balance: ");
     c26:	63 e5       	ldi	r22, 0x53	; 83
     c28:	72 e0       	ldi	r23, 0x02	; 2
     c2a:	87 e3       	ldi	r24, 0x37	; 55
     c2c:	99 e0       	ldi	r25, 0x09	; 9
     c2e:	0e 94 36 32 	call	0x646c	; 0x646c <strstr>
     c32:	7c 01       	movw	r14, r24
						
						uctempBuf += 9;
     c34:	8c 01       	movw	r16, r24
     c36:	07 5f       	subi	r16, 0xF7	; 247
     c38:	1f 4f       	sbci	r17, 0xFF	; 255
						ptr = strchr(uctempBuf,'.');
     c3a:	6e e2       	ldi	r22, 0x2E	; 46
     c3c:	70 e0       	ldi	r23, 0x00	; 0
     c3e:	c8 01       	movw	r24, r16
     c40:	0e 94 01 32 	call	0x6402	; 0x6402 <strchr>
						k = ptr - uctempBuf;
     c44:	28 2f       	mov	r18, r24
     c46:	20 1b       	sub	r18, r16
						fBalance = atof(uctempBuf);
     c48:	c8 01       	movw	r24, r16
     c4a:	2b a7       	std	Y+43, r18	; 0x2b
     c4c:	0e 94 dd 30 	call	0x61ba	; 0x61ba <atof>
						
						// Format the Balance to XX.XX
						if (k <2)
     c50:	2b a5       	ldd	r18, Y+43	; 0x2b
     c52:	22 30       	cpi	r18, 0x02	; 2
     c54:	38 f4       	brcc	.+14     	; 0xc64 <appTask+0x376>
						sprintf(uctempBuf,"0%.2f",fBalance);
     c56:	9f 93       	push	r25
     c58:	8f 93       	push	r24
     c5a:	7f 93       	push	r23
     c5c:	6f 93       	push	r22
     c5e:	8d e5       	ldi	r24, 0x5D	; 93
     c60:	92 e0       	ldi	r25, 0x02	; 2
     c62:	08 c0       	rjmp	.+16     	; 0xc74 <appTask+0x386>
						else if(k == 2)
     c64:	22 30       	cpi	r18, 0x02	; 2
     c66:	91 f4       	brne	.+36     	; 0xc8c <appTask+0x39e>
						sprintf(uctempBuf,"%.2f",fBalance);
     c68:	9f 93       	push	r25
     c6a:	8f 93       	push	r24
     c6c:	7f 93       	push	r23
     c6e:	6f 93       	push	r22
     c70:	8e e5       	ldi	r24, 0x5E	; 94
     c72:	92 e0       	ldi	r25, 0x02	; 2
     c74:	9f 93       	push	r25
     c76:	8f 93       	push	r24
     c78:	1f 93       	push	r17
     c7a:	0f 93       	push	r16
     c7c:	0e 94 b2 32 	call	0x6564	; 0x6564 <sprintf>
     c80:	0f b6       	in	r0, 0x3f	; 63
     c82:	f8 94       	cli
     c84:	de bf       	out	0x3e, r29	; 62
     c86:	0f be       	out	0x3f, r0	; 63
     c88:	cd bf       	out	0x3d, r28	; 61
     c8a:	05 c0       	rjmp	.+10     	; 0xc96 <appTask+0x3a8>
						else
						strcpy(uctempBuf,"99.99");
     c8c:	63 e6       	ldi	r22, 0x63	; 99
     c8e:	72 e0       	ldi	r23, 0x02	; 2
     c90:	c8 01       	movw	r24, r16
     c92:	0e 94 15 32 	call	0x642a	; 0x642a <strcpy>
						/*Format the Display Balance
						"1" is just a character as far as the LCD is concerned. It's not a number. The LCD wants you to send the "code" for each character you want to display.
						The codes for characters "0" through "9" are 48 through 57. So just adding 48 to any single-digit number will give you the code for the character that 
						corresponds to that digit, f.e. uctempBuf[0]=49. digit 1=uctempBuf[0]-0x30 .
*/
						CurrentAccount.Value = (uctempBuf[0]-0x30) * 1000 + (uctempBuf[1]-0x30) * 100 + (uctempBuf[3]-0x30) * 10 + uctempBuf[4]-0x30;
     c96:	d7 01       	movw	r26, r14
     c98:	19 96       	adiw	r26, 0x09	; 9
     c9a:	2c 91       	ld	r18, X
     c9c:	19 97       	sbiw	r26, 0x09	; 9
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	20 53       	subi	r18, 0x30	; 48
     ca2:	31 09       	sbc	r19, r1
     ca4:	1a 96       	adiw	r26, 0x0a	; 10
     ca6:	ec 91       	ld	r30, X
     ca8:	1a 97       	sbiw	r26, 0x0a	; 10
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	f0 97       	sbiw	r30, 0x30	; 48
     cae:	1c 96       	adiw	r26, 0x0c	; 12
     cb0:	4c 91       	ld	r20, X
     cb2:	1c 97       	sbiw	r26, 0x0c	; 12
     cb4:	50 e0       	ldi	r21, 0x00	; 0
     cb6:	40 53       	subi	r20, 0x30	; 48
     cb8:	51 09       	sbc	r21, r1
     cba:	1d 96       	adiw	r26, 0x0d	; 13
     cbc:	0c 91       	ld	r16, X
     cbe:	10 e0       	ldi	r17, 0x00	; 0
     cc0:	88 ee       	ldi	r24, 0xE8	; 232
     cc2:	93 e0       	ldi	r25, 0x03	; 3
     cc4:	28 9f       	mul	r18, r24
     cc6:	b0 01       	movw	r22, r0
     cc8:	29 9f       	mul	r18, r25
     cca:	70 0d       	add	r23, r0
     ccc:	38 9f       	mul	r19, r24
     cce:	70 0d       	add	r23, r0
     cd0:	11 24       	eor	r1, r1
     cd2:	a4 e6       	ldi	r26, 0x64	; 100
     cd4:	ae 9f       	mul	r26, r30
     cd6:	c0 01       	movw	r24, r0
     cd8:	af 9f       	mul	r26, r31
     cda:	90 0d       	add	r25, r0
     cdc:	11 24       	eor	r1, r1
     cde:	86 0f       	add	r24, r22
     ce0:	97 1f       	adc	r25, r23
     ce2:	6a e0       	ldi	r22, 0x0A	; 10
     ce4:	64 9f       	mul	r22, r20
     ce6:	d0 01       	movw	r26, r0
     ce8:	65 9f       	mul	r22, r21
     cea:	b0 0d       	add	r27, r0
     cec:	11 24       	eor	r1, r1
     cee:	8a 0f       	add	r24, r26
     cf0:	9b 1f       	adc	r25, r27
     cf2:	80 0f       	add	r24, r16
     cf4:	91 1f       	adc	r25, r17
     cf6:	c0 97       	sbiw	r24, 0x30	; 48
     cf8:	90 93 32 09 	sts	0x0932, r25	; 0x800932 <CurrentAccount+0x8>
     cfc:	80 93 31 09 	sts	0x0931, r24	; 0x800931 <CurrentAccount+0x7>
						// give display control back to front end controller. Important! Don't forget!!!!
						//displayMsg(BLANK_MSG);
						//_delay_ms(100);
						//sendSQDisplayCommand(0x06,0x5B,0x7D,msgNumber[uctempBuf[0]-0x30],msgNumber[uctempBuf[1]-0x30],msgNumber[uctempBuf[3]-0x30],10);
						//_delay_ms(1000);
						sendSQDisplayCommand(msgNumber[uctempBuf[0]-0x30],msgNumber[uctempBuf[1]-0x30] /10,msgNumber[uctempBuf[3]-0x30],msgNumber[uctempBuf[4]-0x30],LED_BLANK,LED_BLANK,10);
     d00:	d8 01       	movw	r26, r16
     d02:	a3 52       	subi	r26, 0x23	; 35
     d04:	be 4f       	sbci	r27, 0xFE	; 254
     d06:	43 5f       	subi	r20, 0xF3	; 243
     d08:	5d 4f       	sbci	r21, 0xFD	; 253
     d0a:	e3 5f       	subi	r30, 0xF3	; 243
     d0c:	fd 4f       	sbci	r31, 0xFD	; 253
     d0e:	80 81       	ld	r24, Z
     d10:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <__udivmodqi4>
     d14:	f9 01       	movw	r30, r18
     d16:	e3 5f       	subi	r30, 0xF3	; 243
     d18:	fd 4f       	sbci	r31, 0xFD	; 253
     d1a:	9a e0       	ldi	r25, 0x0A	; 10
     d1c:	c9 2e       	mov	r12, r25
     d1e:	e1 2c       	mov	r14, r1
     d20:	00 e0       	ldi	r16, 0x00	; 0
     d22:	2c 91       	ld	r18, X
     d24:	da 01       	movw	r26, r20
     d26:	4c 91       	ld	r20, X
     d28:	68 2f       	mov	r22, r24
     d2a:	80 81       	ld	r24, Z
     d2c:	0e 94 b3 11 	call	0x2366	; 0x2366 <sendSQDisplayCommand>
     d30:	bf ef       	ldi	r27, 0xFF	; 255
     d32:	e3 ed       	ldi	r30, 0xD3	; 211
     d34:	f0 e3       	ldi	r31, 0x30	; 48
     d36:	b1 50       	subi	r27, 0x01	; 1
     d38:	e0 40       	sbci	r30, 0x00	; 0
     d3a:	f0 40       	sbci	r31, 0x00	; 0
     d3c:	e1 f7       	brne	.-8      	; 0xd36 <appTask+0x448>
     d3e:	00 c0       	rjmp	.+0      	; 0xd40 <appTask+0x452>
     d40:	00 00       	nop
						_delay_ms(1000);
						
						if( SQACAMimicQuantumSequence(REGULAR_VEND) )
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	0e 94 7f 11 	call	0x22fe	; 0x22fe <SQACAMimicQuantumSequence>
     d4a:	89 2b       	or	r24, r25
     d4c:	09 f4       	brne	.+2      	; 0xd50 <appTask+0x462>
     d4e:	3e c1       	rjmp	.+636    	; 0xfcc <appTask+0x6de>
						{
							#if(DEBUG_BOW)
							debugMsgStr("\r\nSQACAMimicQuantumSequence(REGULAR_VEND)\r\n");
							#endif
							
							OP = WAIT_FOR_SELECTION;
     d50:	88 e0       	ldi	r24, 0x08	; 8
     d52:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
							//Sound Buzzer
							#if (DEBUG)
							Beeps(2);
							#endif

							KPTOFlag = 0;
     d56:	10 92 2e 05 	sts	0x052E, r1	; 0x80052e <KPTOFlag>
							
							if( waitForMachineStartKey() )
     d5a:	0e 94 40 12 	call	0x2480	; 0x2480 <waitForMachineStartKey>
							{
								macSetLongAlarm(MACHINE_KEYPRESS_WAITTIME,KeypressTimeOut);
     d5e:	6e ea       	ldi	r22, 0xAE	; 174
     d60:	71 e0       	ldi	r23, 0x01	; 1
							Beeps(2);
							#endif

							KPTOFlag = 0;
							
							if( waitForMachineStartKey() )
     d62:	88 23       	and	r24, r24
     d64:	19 f0       	breq	.+6      	; 0xd6c <appTask+0x47e>
							{
								macSetLongAlarm(MACHINE_KEYPRESS_WAITTIME,KeypressTimeOut);
     d66:	8e e1       	ldi	r24, 0x1E	; 30
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	1f c1       	rjmp	.+574    	; 0xfaa <appTask+0x6bc>
							}
							else
							macSetAlarm(500, KeypressTimeOut); // if connected to a washer while cycle is running and a card is swiped, just display the balance and continue scanning.
     d6c:	84 ef       	ldi	r24, 0xF4	; 244
     d6e:	91 e0       	ldi	r25, 0x01	; 1
     d70:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <macSetAlarm>
     d74:	2b c1       	rjmp	.+598    	; 0xfcc <appTask+0x6de>
						}
						#endif	//ACA_MACHINE
					}	//serial number found in server database
					else //serial number error from server database
					{
						CommTimeOut();//TOFlag = 1;	//force timeout condition
     d76:	0e 94 a5 01 	call	0x34a	; 0x34a <CommTimeOut>
     d7a:	28 c1       	rjmp	.+592    	; 0xfcc <appTask+0x6de>
					}
					#endif//ACA_MACHINE

				}

				else if(TOFlag == 1 || macConfig.associated == false) // server fails to respond in time
     d7c:	80 91 2f 05 	lds	r24, 0x052F	; 0x80052f <TOFlag>
     d80:	81 30       	cpi	r24, 0x01	; 1
     d82:	11 f0       	breq	.+4      	; 0xd88 <appTask+0x49a>
     d84:	21 11       	cpse	r18, r1
     d86:	22 c1       	rjmp	.+580    	; 0xfcc <appTask+0x6de>

					// Error Occured
					// Re-enter SCANNING mode

					#if(DEVICE_CONNECTED == ACA_MACHINE)
					if ( cardRemoved(REMOVE_CARD) )
     d88:	82 e0       	ldi	r24, 0x02	; 2
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	0e 94 33 12 	call	0x2466	; 0x2466 <cardRemoved>
     d90:	89 2b       	or	r24, r25
     d92:	09 f4       	brne	.+2      	; 0xd96 <appTask+0x4a8>
     d94:	1b c1       	rjmp	.+566    	; 0xfcc <appTask+0x6de>
					{
						//TOFlag = 1;
						ReaderStateFlag.Busy = false;
     d96:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
     d9a:	8f 7b       	andi	r24, 0xBF	; 191
     d9c:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
						//send error message to machine display
						displayMsg(CARD_ERR_MSG);
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	0e 94 9a 0c 	call	0x1934	; 0x1934 <displayMsg>
     da6:	0c c1       	rjmp	.+536    	; 0xfc0 <appTask+0x6d2>
				break;
				//case #7
				case WAIT_FOR_SELECTION: //wait to see if cycle start has been requested by user

				#if(DEVICE_CONNECTED == ACA_MACHINE)
				if( (SQACAMachineStatus.CmdToReader == DEDUCT_VEND_COMMAND || SQACAMachineStatus.CmdToReader == DEDUCT_TOPOFF_COMMAND) )
     da8:	80 91 f8 0a 	lds	r24, 0x0AF8	; 0x800af8 <SQACAMachineStatus+0x4>
     dac:	81 30       	cpi	r24, 0x01	; 1
     dae:	11 f0       	breq	.+4      	; 0xdb4 <appTask+0x4c6>
     db0:	87 34       	cpi	r24, 0x47	; 71
     db2:	11 f4       	brne	.+4      	; 0xdb8 <appTask+0x4ca>
				{
					OP = START_CYCLE; // set only if vend price deduction successful.
     db4:	8f e0       	ldi	r24, 0x0F	; 15
     db6:	05 c1       	rjmp	.+522    	; 0xfc2 <appTask+0x6d4>

				}
				else if(KPTOFlag == 1)
     db8:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <KPTOFlag>
     dbc:	81 30       	cpi	r24, 0x01	; 1
     dbe:	09 f0       	breq	.+2      	; 0xdc2 <appTask+0x4d4>
     dc0:	05 c1       	rjmp	.+522    	; 0xfcc <appTask+0x6de>
				{
					if ( cardRemoved(CASH_CARD) )
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 94 33 12 	call	0x2466	; 0x2466 <cardRemoved>
     dca:	89 2b       	or	r24, r25
     dcc:	09 f0       	breq	.+2      	; 0xdd0 <appTask+0x4e2>
     dce:	f6 c0       	rjmp	.+492    	; 0xfbc <appTask+0x6ce>
     dd0:	fd c0       	rjmp	.+506    	; 0xfcc <appTask+0x6de>
				//case #8
				case START_CYCLE:	// send start cycle command to machine

				#if(DEVICE_CONNECTED == ACA_MACHINE)

				if( sendSQACAVendingTransactions()  )
     dd2:	0e 94 8b 11 	call	0x2316	; 0x2316 <sendSQACAVendingTransactions>
     dd6:	88 23       	and	r24, r24
     dd8:	09 f4       	brne	.+2      	; 0xddc <appTask+0x4ee>
     dda:	6a c0       	rjmp	.+212    	; 0xeb0 <appTask+0x5c2>
				{
					structTransaction vend;					
					
					vend.CardId			= CurrentAccount.ID;
     ddc:	c0 90 2b 09 	lds	r12, 0x092B	; 0x80092b <CurrentAccount+0x1>
     de0:	d0 90 2c 09 	lds	r13, 0x092C	; 0x80092c <CurrentAccount+0x2>
     de4:	e0 90 2d 09 	lds	r14, 0x092D	; 0x80092d <CurrentAccount+0x3>
     de8:	f0 90 2e 09 	lds	r15, 0x092E	; 0x80092e <CurrentAccount+0x4>
     dec:	ca 86       	std	Y+10, r12	; 0x0a
     dee:	db 86       	std	Y+11, r13	; 0x0b
     df0:	ec 86       	std	Y+12, r14	; 0x0c
     df2:	fd 86       	std	Y+13, r15	; 0x0d
					vend.vendPrice		= vendPrice * 100;
     df4:	20 e0       	ldi	r18, 0x00	; 0
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	48 ec       	ldi	r20, 0xC8	; 200
     dfa:	52 e4       	ldi	r21, 0x42	; 66
     dfc:	60 91 c0 0c 	lds	r22, 0x0CC0	; 0x800cc0 <vendPrice>
     e00:	70 91 c1 0c 	lds	r23, 0x0CC1	; 0x800cc1 <vendPrice+0x1>
     e04:	80 91 c2 0c 	lds	r24, 0x0CC2	; 0x800cc2 <vendPrice+0x2>
     e08:	90 91 c3 0c 	lds	r25, 0x0CC3	; 0x800cc3 <vendPrice+0x3>
     e0c:	0e 94 34 2d 	call	0x5a68	; 0x5a68 <__mulsf3>
     e10:	9b 01       	movw	r18, r22
     e12:	ac 01       	movw	r20, r24
     e14:	2b a7       	std	Y+43, r18	; 0x2b
     e16:	38 a7       	std	Y+40, r19	; 0x28
     e18:	49 a7       	std	Y+41, r20	; 0x29
     e1a:	5a a7       	std	Y+42, r21	; 0x2a
     e1c:	0e 94 77 2c 	call	0x58ee	; 0x58ee <__fixunssfsi>
     e20:	79 87       	std	Y+9, r23	; 0x09
     e22:	68 87       	std	Y+8, r22	; 0x08
					vend.LocationId		= ReaderSetup.locationId;
     e24:	80 91 c0 09 	lds	r24, 0x09C0	; 0x8009c0 <ReaderSetup+0x6>
     e28:	90 91 c1 09 	lds	r25, 0x09C1	; 0x8009c1 <ReaderSetup+0x7>
     e2c:	9a 83       	std	Y+2, r25	; 0x02
     e2e:	89 83       	std	Y+1, r24	; 0x01
					vend.ManufactureId	= ReaderSetup.manufacturerId;
     e30:	80 91 be 09 	lds	r24, 0x09BE	; 0x8009be <ReaderSetup+0x4>
     e34:	90 91 bf 09 	lds	r25, 0x09BF	; 0x8009bf <ReaderSetup+0x5>
     e38:	9e 83       	std	Y+6, r25	; 0x06
     e3a:	8d 83       	std	Y+5, r24	; 0x05
					vend.MachineId[0]	= deviceStatus.deviceType[0];
     e3c:	80 91 f0 0a 	lds	r24, 0x0AF0	; 0x800af0 <deviceStatus>
     e40:	8b 83       	std	Y+3, r24	; 0x03
					vend.MachineId[1]	= deviceStatus.deviceType[1];
     e42:	80 91 f1 0a 	lds	r24, 0x0AF1	; 0x800af1 <deviceStatus+0x1>
     e46:	8c 83       	std	Y+4, r24	; 0x04
					
					
					
					if((macConfig.associated == false) && (ReaderStateFlag.EnableOfflineTransaction == true))
     e48:	80 91 38 0c 	lds	r24, 0x0C38	; 0x800c38 <macConfig+0x8>
     e4c:	2b a5       	ldd	r18, Y+43	; 0x2b
     e4e:	38 a5       	ldd	r19, Y+40	; 0x28
     e50:	49 a5       	ldd	r20, Y+41	; 0x29
     e52:	5a a5       	ldd	r21, Y+42	; 0x2a
     e54:	81 11       	cpse	r24, r1
     e56:	0b c0       	rjmp	.+22     	; 0xe6e <appTask+0x580>
     e58:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
     e5c:	83 ff       	sbrs	r24, 3
     e5e:	07 c0       	rjmp	.+14     	; 0xe6e <appTask+0x580>
					{//must be offline transaction, store a record.
						vend.isOffline = true;
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8d 8b       	std	Y+21, r24	; 0x15
						storeOfflineTransaction(CurrentAccount.ID);
     e64:	c7 01       	movw	r24, r14
     e66:	b6 01       	movw	r22, r12
     e68:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <storeOfflineTransaction>
     e6c:	1e c0       	rjmp	.+60     	; 0xeaa <appTask+0x5bc>
					}
					else{
						vend.isOffline = false;
     e6e:	1d 8a       	std	Y+21, r1	; 0x15
						CurrentAccount.Value -= (vendPrice*100);
     e70:	80 91 31 09 	lds	r24, 0x0931	; 0x800931 <CurrentAccount+0x7>
     e74:	90 91 32 09 	lds	r25, 0x0932	; 0x800932 <CurrentAccount+0x8>
     e78:	bc 01       	movw	r22, r24
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	2b a7       	std	Y+43, r18	; 0x2b
     e80:	38 a7       	std	Y+40, r19	; 0x28
     e82:	49 a7       	std	Y+41, r20	; 0x29
     e84:	5a a7       	std	Y+42, r21	; 0x2a
     e86:	0e 94 a6 2c 	call	0x594c	; 0x594c <__floatunsisf>
     e8a:	2b a5       	ldd	r18, Y+43	; 0x2b
     e8c:	38 a5       	ldd	r19, Y+40	; 0x28
     e8e:	49 a5       	ldd	r20, Y+41	; 0x29
     e90:	5a a5       	ldd	r21, Y+42	; 0x2a
     e92:	0e 94 98 2b 	call	0x5730	; 0x5730 <__subsf3>
     e96:	0e 94 77 2c 	call	0x58ee	; 0x58ee <__fixunssfsi>
     e9a:	70 93 32 09 	sts	0x0932, r23	; 0x800932 <CurrentAccount+0x8>
     e9e:	60 93 31 09 	sts	0x0931, r22	; 0x800931 <CurrentAccount+0x7>
						sendBOWCCTransaction(&vend);
     ea2:	ce 01       	movw	r24, r28
     ea4:	01 96       	adiw	r24, 0x01	; 1
     ea6:	0e 94 10 0c 	call	0x1820	; 0x1820 <sendBOWCCTransaction>
					}
					OP = CYCLE_STARTED;
     eaa:	80 e1       	ldi	r24, 0x10	; 16
     eac:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
					
					//let server know machine is in use.

				}
				
				cardRemoved(CASH_CARD);
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	0e 94 33 12 	call	0x2466	; 0x2466 <cardRemoved>
				
				#endif
				break;
     eb8:	89 c0       	rjmp	.+274    	; 0xfcc <appTask+0x6de>
				break;

				//case #11
				case SETUP_REQUEST:
				
				if( SETUP_TIMEOUT == true)
     eba:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <SETUP_TIMEOUT>
     ebe:	88 23       	and	r24, r24
     ec0:	09 f4       	brne	.+2      	; 0xec4 <appTask+0x5d6>
     ec2:	84 c0       	rjmp	.+264    	; 0xfcc <appTask+0x6de>
				{
					#if(DEVICE_CONNECTED == ACA_MACHINE)
					
					#ifdef MACHINE_CONNECTED
					DevicePoll();
     ec4:	0e 94 17 04 	call	0x82e	; 0x82e <DevicePoll>
					#else
					deviceStatus.deviceType[0] = 33;
					deviceStatus.deviceType[1] = 1;
					#endif
					#endif //DEVICE_CONNECTED
					sendBOWSetupRequest();
     ec8:	0e 94 06 09 	call	0x120c	; 0x120c <sendBOWSetupRequest>
					
					SETUP_TIMEOUT = false;
     ecc:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <SETUP_TIMEOUT>
					macSetLongAlarm(SETUP_REQUEST_TIMEOUT, SetupTimeout);
     ed0:	62 eb       	ldi	r22, 0xB2	; 178
     ed2:	71 e0       	ldi	r23, 0x01	; 1
     ed4:	88 e7       	ldi	r24, 0x78	; 120
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	68 c0       	rjmp	.+208    	; 0xfaa <appTask+0x6bc>
				
				
				//case #12
				case VALIDATE_SETUP:

				if((ptr = GetParam((char *)DataBuffer,"<ValidationResponse>","<")) != NULL)
     eda:	49 e6       	ldi	r20, 0x69	; 105
     edc:	52 e0       	ldi	r21, 0x02	; 2
     ede:	6b e6       	ldi	r22, 0x6B	; 107
     ee0:	72 e0       	ldi	r23, 0x02	; 2
     ee2:	87 e3       	ldi	r24, 0x37	; 55
     ee4:	99 e0       	ldi	r25, 0x09	; 9
     ee6:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <GetParam>
     eea:	7c 01       	movw	r14, r24
     eec:	00 97       	sbiw	r24, 0x00	; 0
     eee:	09 f4       	brne	.+2      	; 0xef2 <appTask+0x604>
     ef0:	50 c0       	rjmp	.+160    	; 0xf92 <appTask+0x6a4>
				{

					u8 addr[8];
					static u8 Len =0;
					n = strlen(ptr);
     ef2:	fc 01       	movw	r30, r24
     ef4:	01 90       	ld	r0, Z+
     ef6:	00 20       	and	r0, r0
     ef8:	e9 f7       	brne	.-6      	; 0xef4 <appTask+0x606>
     efa:	31 97       	sbiw	r30, 0x01	; 1
     efc:	1e 2f       	mov	r17, r30
     efe:	18 1b       	sub	r17, r24
					k = 0;
					l = 0;
					
					// Get length of Validation code
					halGetEeprom(VALIDATION_CODE_ADDR,1,&Len);
     f00:	4a e2       	ldi	r20, 0x2A	; 42
     f02:	55 e0       	ldi	r21, 0x05	; 5
     f04:	61 e0       	ldi	r22, 0x01	; 1
     f06:	81 e6       	ldi	r24, 0x61	; 97
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <halGetEeprom>
					
					// 	Get Validation Code from EEPROM
					halGetEeprom(((u8*)VALIDATION_CODE_ADDR+1),Len,addr);
     f0e:	ae 01       	movw	r20, r28
     f10:	41 5e       	subi	r20, 0xE1	; 225
     f12:	5f 4f       	sbci	r21, 0xFF	; 255
     f14:	60 91 2a 05 	lds	r22, 0x052A	; 0x80052a <__data_end>
     f18:	82 e6       	ldi	r24, 0x62	; 98
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <halGetEeprom>

					u8 addr[8];
					static u8 Len =0;
					n = strlen(ptr);
					k = 0;
					l = 0;
     f20:	00 e0       	ldi	r16, 0x00	; 0
     f22:	80 2f       	mov	r24, r16
     f24:	88 0f       	add	r24, r24
					halGetEeprom(VALIDATION_CODE_ADDR,1,&Len);
					
					// 	Get Validation Code from EEPROM
					halGetEeprom(((u8*)VALIDATION_CODE_ADDR+1),Len,addr);
					
					while (k < n)
     f26:	81 17       	cp	r24, r17
     f28:	c8 f4       	brcc	.+50     	; 0xf5c <appTask+0x66e>
					{
						Setup[l] = (Ascii_to_nible ( *(ptr+k) ) * 16)
     f2a:	67 01       	movw	r12, r14
     f2c:	c8 0e       	add	r12, r24
     f2e:	d1 1c       	adc	r13, r1
     f30:	d6 01       	movw	r26, r12
     f32:	8c 91       	ld	r24, X
     f34:	0e 94 df 27 	call	0x4fbe	; 0x4fbe <Ascii_to_nible>
     f38:	b8 2e       	mov	r11, r24
						+  Ascii_to_nible ( *(ptr+k+1));
     f3a:	f6 01       	movw	r30, r12
     f3c:	81 81       	ldd	r24, Z+1	; 0x01
     f3e:	0e 94 df 27 	call	0x4fbe	; 0x4fbe <Ascii_to_nible>
					// 	Get Validation Code from EEPROM
					halGetEeprom(((u8*)VALIDATION_CODE_ADDR+1),Len,addr);
					
					while (k < n)
					{
						Setup[l] = (Ascii_to_nible ( *(ptr+k) ) * 16)
     f42:	e1 e0       	ldi	r30, 0x01	; 1
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	ec 0f       	add	r30, r28
     f48:	fd 1f       	adc	r31, r29
     f4a:	e0 0f       	add	r30, r16
     f4c:	f1 1d       	adc	r31, r1
     f4e:	20 e1       	ldi	r18, 0x10	; 16
     f50:	b2 9e       	mul	r11, r18
     f52:	80 0d       	add	r24, r0
     f54:	11 24       	eor	r1, r1
     f56:	80 83       	st	Z, r24
						+  Ascii_to_nible ( *(ptr+k+1));
						k += 2;
						l++;
     f58:	0f 5f       	subi	r16, 0xFF	; 255
     f5a:	e3 cf       	rjmp	.-58     	; 0xf22 <appTask+0x634>
					}

					if(memcmp(addr,Setup,Len) == 0)
     f5c:	40 91 2a 05 	lds	r20, 0x052A	; 0x80052a <__data_end>
     f60:	50 e0       	ldi	r21, 0x00	; 0
     f62:	be 01       	movw	r22, r28
     f64:	6f 5f       	subi	r22, 0xFF	; 255
     f66:	7f 4f       	sbci	r23, 0xFF	; 255
     f68:	ce 01       	movw	r24, r28
     f6a:	4f 96       	adiw	r24, 0x1f	; 31
     f6c:	0e 94 eb 31 	call	0x63d6	; 0x63d6 <memcmp>
     f70:	89 2b       	or	r24, r25
     f72:	49 f4       	brne	.+18     	; 0xf86 <appTask+0x698>
					{
						ReaderStateFlag.ValidateSetup = VALID_READER_SETUP; //Don't store this bit in eeprom it allows for validation check on every power cycle.
     f74:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
     f78:	8b 7f       	andi	r24, 0xFB	; 251
     f7a:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
						OP = VALIDATE_READER;
     f7e:	83 e1       	ldi	r24, 0x13	; 19
     f80:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
     f84:	06 c0       	rjmp	.+12     	; 0xf92 <appTask+0x6a4>
					}
					else
					{
					
						OP = SETUP_REQUEST; // validation failed, request new setup info
     f86:	8a e0       	ldi	r24, 0x0A	; 10
     f88:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
						SETUP_TIMEOUT = true;
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <SETUP_TIMEOUT>
						
					}
				}

				// Response TIMEOUT
				if(VALIDATION_TIMEOUT)
     f92:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <VALIDATION_TIMEOUT>
     f96:	88 23       	and	r24, r24
     f98:	c9 f0       	breq	.+50     	; 0xfcc <appTask+0x6de>
				{
					VALIDATION_TIMEOUT = false;
     f9a:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <VALIDATION_TIMEOUT>
					sendBOWValidationRequest();// Re-send Validation Request
     f9e:	0e 94 2f 09 	call	0x125e	; 0x125e <sendBOWValidationRequest>
					
					macSetLongAlarm(SETUP_VALIDATION_TIMEOUT, ValidationTimeout); 		//check Every 5s
     fa2:	61 ea       	ldi	r22, 0xA1	; 161
     fa4:	71 e0       	ldi	r23, 0x01	; 1
     fa6:	8c e3       	ldi	r24, 0x3C	; 60
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	0e 94 98 25 	call	0x4b30	; 0x4b30 <macSetLongAlarm>
     fae:	0e c0       	rjmp	.+28     	; 0xfcc <appTask+0x6de>
				break;
				//case #15
				case SCARD_REMOVED:

				//#if(DEVICE_CONNECTED == ACA_MACHINE)
				ucCardStatus = CARD_OUT;
     fb0:	10 92 2f 0a 	sts	0x0A2F, r1	; 0x800a2f <ucCardStatus>
				cardRemoved(REMOVE_CARD);
     fb4:	82 e0       	ldi	r24, 0x02	; 2
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	0e 94 33 12 	call	0x2466	; 0x2466 <cardRemoved>
				
				//#endif
				
				OP = SCANNING;
     fbc:	82 e0       	ldi	r24, 0x02	; 2
     fbe:	01 c0       	rjmp	.+2      	; 0xfc2 <appTask+0x6d4>
				
				break;
				//case #16
				case BOW_ERROR:
				OP = IDLE;
     fc0:	87 e2       	ldi	r24, 0x27	; 39
     fc2:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
				break;
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <appTask+0x6de>
				//case #17
				case APP_INIT:
				appInit();
     fc8:	0e 94 3a 03 	call	0x674	; 0x674 <appInit>
			} //switch OP


		}// macConfig.associated

	}//appTask
     fcc:	ab 96       	adiw	r28, 0x2b	; 43
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	f8 94       	cli
     fd2:	de bf       	out	0x3e, r29	; 62
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	cd bf       	out	0x3d, r28	; 61
     fd8:	df 91       	pop	r29
     fda:	cf 91       	pop	r28
     fdc:	1f 91       	pop	r17
     fde:	0f 91       	pop	r16
     fe0:	ff 90       	pop	r15
     fe2:	ef 90       	pop	r14
     fe4:	df 90       	pop	r13
     fe6:	cf 90       	pop	r12
     fe8:	bf 90       	pop	r11
     fea:	08 95       	ret

00000fec <timeoutWaitingForOLTReponse>:
bool sendBOWCCTransaction(structTransaction *transRecord);

static inline void timeoutWaitingForOLTReponse(void)
{
	
	timeout.sendingOfflineTransactions = true;
     fec:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <timeout>
     ff0:	81 60       	ori	r24, 0x01	; 1
     ff2:	80 93 02 0a 	sts	0x0A02, r24	; 0x800a02 <timeout>
     ff6:	08 95       	ret

00000ff8 <asciiStringToNibble>:
	return true;	
}

//returns number of characters received.
u8 asciiStringToNibble( char *inStr, char *outStr)
{
     ff8:	9f 92       	push	r9
     ffa:	af 92       	push	r10
     ffc:	bf 92       	push	r11
     ffe:	cf 92       	push	r12
    1000:	df 92       	push	r13
    1002:	ef 92       	push	r14
    1004:	ff 92       	push	r15
    1006:	0f 93       	push	r16
    1008:	1f 93       	push	r17
    100a:	cf 93       	push	r28
    100c:	df 93       	push	r29
    100e:	7c 01       	movw	r14, r24
    1010:	6b 01       	movw	r12, r22
	u8 n, k;
	
	n = strlen(inStr);
    1012:	fc 01       	movw	r30, r24
    1014:	01 90       	ld	r0, Z+
    1016:	00 20       	and	r0, r0
    1018:	e9 f7       	brne	.-6      	; 0x1014 <asciiStringToNibble+0x1c>
    101a:	31 97       	sbiw	r30, 0x01	; 1
    101c:	ef 01       	movw	r28, r30
    101e:	c8 1b       	sub	r28, r24
    1020:	d9 0b       	sbc	r29, r25
    1022:	0c 2f       	mov	r16, r28
	k = 0;
    1024:	10 e0       	ldi	r17, 0x00	; 0


	while (k < n)
    1026:	10 17       	cp	r17, r16
    1028:	a8 f4       	brcc	.+42     	; 0x1054 <asciiStringToNibble+0x5c>
	{
		*outStr = (Ascii_to_nible ( *(inStr+k) ) * 16)
    102a:	57 01       	movw	r10, r14
    102c:	a1 0e       	add	r10, r17
    102e:	b1 1c       	adc	r11, r1
    1030:	f5 01       	movw	r30, r10
    1032:	80 81       	ld	r24, Z
    1034:	0e 94 df 27 	call	0x4fbe	; 0x4fbe <Ascii_to_nible>
    1038:	98 2e       	mov	r9, r24
		+  Ascii_to_nible ( *(inStr+k+1));
    103a:	f5 01       	movw	r30, r10
    103c:	81 81       	ldd	r24, Z+1	; 0x01
    103e:	0e 94 df 27 	call	0x4fbe	; 0x4fbe <Ascii_to_nible>
	k = 0;


	while (k < n)
	{
		*outStr = (Ascii_to_nible ( *(inStr+k) ) * 16)
    1042:	f0 e1       	ldi	r31, 0x10	; 16
    1044:	9f 9e       	mul	r9, r31
    1046:	80 0d       	add	r24, r0
    1048:	11 24       	eor	r1, r1
    104a:	f6 01       	movw	r30, r12
    104c:	81 93       	st	Z+, r24
    104e:	6f 01       	movw	r12, r30
		+  Ascii_to_nible ( *(inStr+k+1));
		k += 2;
    1050:	1e 5f       	subi	r17, 0xFE	; 254
    1052:	e9 cf       	rjmp	.-46     	; 0x1026 <asciiStringToNibble+0x2e>
		
		outStr++;
	}
	return n/2;
}
    1054:	8c 2f       	mov	r24, r28
    1056:	86 95       	lsr	r24
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
    105c:	1f 91       	pop	r17
    105e:	0f 91       	pop	r16
    1060:	ff 90       	pop	r15
    1062:	ef 90       	pop	r14
    1064:	df 90       	pop	r13
    1066:	cf 90       	pop	r12
    1068:	bf 90       	pop	r11
    106a:	af 90       	pop	r10
    106c:	9f 90       	pop	r9
    106e:	08 95       	ret

00001070 <constructOutgoingString>:
bool constructOutgoingString(u8 strType, char *tempStr)
{
    1070:	0f 93       	push	r16
    1072:	1f 93       	push	r17
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	8b 01       	movw	r16, r22
    107a:	eb 01       	movw	r28, r22
    107c:	21 96       	adiw	r28, 0x01	; 1
	switch(strType)
    107e:	83 30       	cpi	r24, 0x03	; 3
    1080:	09 f4       	brne	.+2      	; 0x1084 <constructOutgoingString+0x14>
    1082:	4e c0       	rjmp	.+156    	; 0x1120 <constructOutgoingString+0xb0>
    1084:	50 f5       	brcc	.+84     	; 0x10da <constructOutgoingString+0x6a>
    1086:	81 30       	cpi	r24, 0x01	; 1
    1088:	71 f1       	breq	.+92     	; 0x10e6 <constructOutgoingString+0x76>
    108a:	82 30       	cpi	r24, 0x02	; 2
    108c:	09 f0       	breq	.+2      	; 0x1090 <constructOutgoingString+0x20>
    108e:	7f c0       	rjmp	.+254    	; 0x118e <constructOutgoingString+0x11e>
		
			break;
			
		case REQUEST_SETUP:		  	
    			// Build setup request string
    		sprintf(tempStr+1, "<ReaderSetupInfo>"
    1090:	80 91 f1 0a 	lds	r24, 0x0AF1	; 0x800af1 <deviceStatus+0x1>
    1094:	1f 92       	push	r1
    1096:	8f 93       	push	r24
    1098:	80 91 f0 0a 	lds	r24, 0x0AF0	; 0x800af0 <deviceStatus>
    109c:	1f 92       	push	r1
    109e:	8f 93       	push	r24
    10a0:	80 91 bf 09 	lds	r24, 0x09BF	; 0x8009bf <ReaderSetup+0x5>
    10a4:	8f 93       	push	r24
    10a6:	80 91 be 09 	lds	r24, 0x09BE	; 0x8009be <ReaderSetup+0x4>
    10aa:	8f 93       	push	r24
    10ac:	80 91 c1 09 	lds	r24, 0x09C1	; 0x8009c1 <ReaderSetup+0x7>
    10b0:	8f 93       	push	r24
    10b2:	80 91 c0 09 	lds	r24, 0x09C0	; 0x8009c0 <ReaderSetup+0x6>
    10b6:	8f 93       	push	r24
    10b8:	83 ec       	ldi	r24, 0xC3	; 195
    10ba:	92 e0       	ldi	r25, 0x02	; 2
    10bc:	9f 93       	push	r25
    10be:	8f 93       	push	r24
    10c0:	df 93       	push	r29
    10c2:	cf 93       	push	r28
    10c4:	0e 94 b2 32 	call	0x6564	; 0x6564 <sprintf>
            "<laundryRoomId>%d</laundryRoomId>"
			"<manufacturerId>%d</manufacturerId>"
            "<code>%d%d</code>",ReaderSetup.locationId, ReaderSetup.manufacturerId, deviceStatus.deviceType[0],deviceStatus.deviceType[1]);
			
			break;
    10c8:	ad b7       	in	r26, 0x3d	; 61
    10ca:	be b7       	in	r27, 0x3e	; 62
    10cc:	1c 96       	adiw	r26, 0x0c	; 12
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	be bf       	out	0x3e, r27	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	ad bf       	out	0x3d, r26	; 61
    10d8:	5a c0       	rjmp	.+180    	; 0x118e <constructOutgoingString+0x11e>
	}
	return n/2;
}
bool constructOutgoingString(u8 strType, char *tempStr)
{
	switch(strType)
    10da:	85 30       	cpi	r24, 0x05	; 5
    10dc:	71 f1       	breq	.+92     	; 0x113a <constructOutgoingString+0xca>
    10de:	30 f1       	brcs	.+76     	; 0x112c <constructOutgoingString+0xbc>
    10e0:	86 30       	cpi	r24, 0x06	; 6
    10e2:	b1 f1       	breq	.+108    	; 0x1150 <constructOutgoingString+0xe0>
    10e4:	54 c0       	rjmp	.+168    	; 0x118e <constructOutgoingString+0x11e>
	{
		case FIRMWARE_VERSION:
			//build firmware version string
			sprintf(tempStr+1, "<FirmwareVersion>"
    10e6:	80 91 f1 0a 	lds	r24, 0x0AF1	; 0x800af1 <deviceStatus+0x1>
    10ea:	1f 92       	push	r1
    10ec:	8f 93       	push	r24
    10ee:	80 91 f0 0a 	lds	r24, 0x0AF0	; 0x800af0 <deviceStatus>
    10f2:	1f 92       	push	r1
    10f4:	8f 93       	push	r24
    10f6:	80 e8       	ldi	r24, 0x80	; 128
    10f8:	92 e0       	ldi	r25, 0x02	; 2
    10fa:	9f 93       	push	r25
    10fc:	8f 93       	push	r24
    10fe:	8a e8       	ldi	r24, 0x8A	; 138
    1100:	92 e0       	ldi	r25, 0x02	; 2
    1102:	9f 93       	push	r25
    1104:	8f 93       	push	r24
    1106:	df 93       	push	r29
    1108:	cf 93       	push	r28
    110a:	0e 94 b2 32 	call	0x6564	; 0x6564 <sprintf>
			"<fw>%s</fw>"
			"<DeviceType>%d%d<Devicetype>"
			,__APP_VERSION_STRING__,deviceStatus.deviceType[0],deviceStatus.deviceType[1]);
		
			break;
    110e:	ad b7       	in	r26, 0x3d	; 61
    1110:	be b7       	in	r27, 0x3e	; 62
    1112:	1a 96       	adiw	r26, 0x0a	; 10
    1114:	0f b6       	in	r0, 0x3f	; 63
    1116:	f8 94       	cli
    1118:	be bf       	out	0x3e, r27	; 62
    111a:	0f be       	out	0x3f, r0	; 63
    111c:	ad bf       	out	0x3d, r26	; 61
    111e:	37 c0       	rjmp	.+110    	; 0x118e <constructOutgoingString+0x11e>
			
			break;
			
		case REQUEST_VALIDATION:
			//build validation request string
			sprintf(tempStr+1, "<ValidationRequest>");
    1120:	6a e2       	ldi	r22, 0x2A	; 42
    1122:	73 e0       	ldi	r23, 0x03	; 3
    1124:	ce 01       	movw	r24, r28
    1126:	0e 94 15 32 	call	0x642a	; 0x642a <strcpy>
			
			break;
    112a:	31 c0       	rjmp	.+98     	; 0x118e <constructOutgoingString+0x11e>
			
		case REQUEST_MACHINE_LABEL:
			//build machine label response string
							
			sprintf(tempStr+1, "<MachineLabel>"
    112c:	87 ef       	ldi	r24, 0xF7	; 247
    112e:	99 e0       	ldi	r25, 0x09	; 9
    1130:	9f 93       	push	r25
    1132:	8f 93       	push	r24
    1134:	8e e3       	ldi	r24, 0x3E	; 62
    1136:	93 e0       	ldi	r25, 0x03	; 3
    1138:	1e c0       	rjmp	.+60     	; 0x1176 <constructOutgoingString+0x106>
			break;
			
		case REQUEST_MACHINE_DESCRIPTION:
		
			//build machine description response string
			sprintf(tempStr+1, "<MachineDescription>"
    113a:	84 ec       	ldi	r24, 0xC4	; 196
    113c:	99 e0       	ldi	r25, 0x09	; 9
    113e:	9f 93       	push	r25
    1140:	8f 93       	push	r24
    1142:	88 e5       	ldi	r24, 0x58	; 88
    1144:	93 e0       	ldi	r25, 0x03	; 3
    1146:	9f 93       	push	r25
    1148:	8f 93       	push	r24
    114a:	df 93       	push	r29
    114c:	cf 93       	push	r28
    114e:	17 c0       	rjmp	.+46     	; 0x117e <constructOutgoingString+0x10e>
			,ReaderSetup.machineDescription);
		
			break;
		case REQUEST_NUMBER_OF_OLT:
		
			halGetEeprom(OFFLINE_TRANSACTION_RECORD_ADDR, 1, &ReaderSetup.numOfSavedTransactions);
    1150:	43 ec       	ldi	r20, 0xC3	; 195
    1152:	59 e0       	ldi	r21, 0x09	; 9
    1154:	61 e0       	ldi	r22, 0x01	; 1
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	91 e0       	ldi	r25, 0x01	; 1
    115a:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <halGetEeprom>
			if (ReaderSetup.numOfSavedTransactions == 0xff)
    115e:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    1162:	8f 3f       	cpi	r24, 0xFF	; 255
    1164:	11 f4       	brne	.+4      	; 0x116a <constructOutgoingString+0xfa>
			{
				ReaderSetup.numOfSavedTransactions = 0;
    1166:	10 92 c3 09 	sts	0x09C3, r1	; 0x8009c3 <ReaderSetup+0x9>
			}
			//build number of offline transactions string
			sprintf(tempStr+1, //"<OLT>"
    116a:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    116e:	1f 92       	push	r1
    1170:	8f 93       	push	r24
    1172:	88 e7       	ldi	r24, 0x78	; 120
    1174:	93 e0       	ldi	r25, 0x03	; 3
    1176:	9f 93       	push	r25
    1178:	8f 93       	push	r24
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	0e 94 b2 32 	call	0x6564	; 0x6564 <sprintf>
			"<OLT>%d</OLT>"
			,ReaderSetup.numOfSavedTransactions);
			
			break;
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
		default:
		
			break;
	}
	
	tempStr[0] = strlen(tempStr+1); //get string length then assign to first element
    118e:	fe 01       	movw	r30, r28
    1190:	01 90       	ld	r0, Z+
    1192:	00 20       	and	r0, r0
    1194:	e9 f7       	brne	.-6      	; 0x1190 <constructOutgoingString+0x120>
	tempStr[0] = tempStr[0] + 1;    // data size = data byte + size byte
    1196:	ec 1b       	sub	r30, r28
    1198:	d8 01       	movw	r26, r16
    119a:	ec 93       	st	X, r30
				
	if (tempStr[0] > 127)
    119c:	8e 2f       	mov	r24, r30
    119e:	80 95       	com	r24
		//#error "Outgoing string to large"
		return false;
	}

	return true;
}
    11a0:	88 1f       	adc	r24, r24
    11a2:	88 27       	eor	r24, r24
    11a4:	88 1f       	adc	r24, r24
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	1f 91       	pop	r17
    11ac:	0f 91       	pop	r16
    11ae:	08 95       	ret

000011b0 <sendBOWReaderFirmwareVersion>:
*/
#define lowNibble 0
#define highNibble 1

bool sendBOWReaderFirmwareVersion()
{
    11b0:	1f 93       	push	r17
    11b2:	cf 93       	push	r28
    11b4:	df 93       	push	r29
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	c0 58       	subi	r28, 0x80	; 128
    11bc:	d1 09       	sbc	r29, r1
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	f8 94       	cli
    11c2:	de bf       	out	0x3e, r29	; 62
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	cd bf       	out	0x3d, r28	; 61
	char tmp[128]={0};
    11c8:	be 01       	movw	r22, r28
    11ca:	6f 5f       	subi	r22, 0xFF	; 255
    11cc:	7f 4f       	sbci	r23, 0xFF	; 255
    11ce:	80 e8       	ldi	r24, 0x80	; 128
    11d0:	fb 01       	movw	r30, r22
    11d2:	11 92       	st	Z+, r1
    11d4:	8a 95       	dec	r24
    11d6:	e9 f7       	brne	.-6      	; 0x11d2 <sendBOWReaderFirmwareVersion+0x22>

	if ( constructOutgoingString(FIRMWARE_VERSION, tmp) )
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	0e 94 38 08 	call	0x1070	; 0x1070 <constructOutgoingString>
    11de:	18 2f       	mov	r17, r24
    11e0:	88 23       	and	r24, r24
    11e2:	41 f0       	breq	.+16     	; 0x11f4 <sendBOWReaderFirmwareVersion+0x44>
	{
		macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);	
    11e4:	ae 01       	movw	r20, r28
    11e6:	4e 5f       	subi	r20, 0xFE	; 254
    11e8:	5f 4f       	sbci	r21, 0xFF	; 255
    11ea:	69 81       	ldd	r22, Y+1	; 0x01
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <macDataRequest>
		return true;
	}
	return false;
}
    11f4:	81 2f       	mov	r24, r17
    11f6:	c0 58       	subi	r28, 0x80	; 128
    11f8:	df 4f       	sbci	r29, 0xFF	; 255
    11fa:	0f b6       	in	r0, 0x3f	; 63
    11fc:	f8 94       	cli
    11fe:	de bf       	out	0x3e, r29	; 62
    1200:	0f be       	out	0x3f, r0	; 63
    1202:	cd bf       	out	0x3d, r28	; 61
    1204:	df 91       	pop	r29
    1206:	cf 91       	pop	r28
    1208:	1f 91       	pop	r17
    120a:	08 95       	ret

0000120c <sendBOWSetupRequest>:

bool sendBOWSetupRequest()							//virgin
{
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	c0 58       	subi	r28, 0x80	; 128
    1216:	d1 09       	sbc	r29, r1
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	de bf       	out	0x3e, r29	; 62
    121e:	0f be       	out	0x3f, r0	; 63
    1220:	cd bf       	out	0x3d, r28	; 61
	char tmp[128] = {0};
    1222:	be 01       	movw	r22, r28
    1224:	6f 5f       	subi	r22, 0xFF	; 255
    1226:	7f 4f       	sbci	r23, 0xFF	; 255
    1228:	80 e8       	ldi	r24, 0x80	; 128
    122a:	fb 01       	movw	r30, r22
    122c:	11 92       	st	Z+, r1
    122e:	8a 95       	dec	r24
    1230:	e9 f7       	brne	.-6      	; 0x122c <sendBOWSetupRequest+0x20>
		
	constructOutgoingString(REQUEST_SETUP, tmp);
    1232:	82 e0       	ldi	r24, 0x02	; 2
    1234:	0e 94 38 08 	call	0x1070	; 0x1070 <constructOutgoingString>
	macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);
    1238:	ae 01       	movw	r20, r28
    123a:	4e 5f       	subi	r20, 0xFE	; 254
    123c:	5f 4f       	sbci	r21, 0xFF	; 255
    123e:	69 81       	ldd	r22, Y+1	; 0x01
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <macDataRequest>
	
	return true;
}
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	c0 58       	subi	r28, 0x80	; 128
    124c:	df 4f       	sbci	r29, 0xFF	; 255
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	08 95       	ret

0000125e <sendBOWValidationRequest>:
bool sendBOWValidationRequest()
{
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
    1262:	cd b7       	in	r28, 0x3d	; 61
    1264:	de b7       	in	r29, 0x3e	; 62
    1266:	69 97       	sbiw	r28, 0x19	; 25
    1268:	0f b6       	in	r0, 0x3f	; 63
    126a:	f8 94       	cli
    126c:	de bf       	out	0x3e, r29	; 62
    126e:	0f be       	out	0x3f, r0	; 63
    1270:	cd bf       	out	0x3d, r28	; 61
	char tmp[25] = {0};
    1272:	be 01       	movw	r22, r28
    1274:	6f 5f       	subi	r22, 0xFF	; 255
    1276:	7f 4f       	sbci	r23, 0xFF	; 255
    1278:	89 e1       	ldi	r24, 0x19	; 25
    127a:	fb 01       	movw	r30, r22
    127c:	11 92       	st	Z+, r1
    127e:	8a 95       	dec	r24
    1280:	e9 f7       	brne	.-6      	; 0x127c <sendBOWValidationRequest+0x1e>
		
	constructOutgoingString(REQUEST_VALIDATION, tmp);
    1282:	83 e0       	ldi	r24, 0x03	; 3
    1284:	0e 94 38 08 	call	0x1070	; 0x1070 <constructOutgoingString>
	macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);
    1288:	ae 01       	movw	r20, r28
    128a:	4e 5f       	subi	r20, 0xFE	; 254
    128c:	5f 4f       	sbci	r21, 0xFF	; 255
    128e:	69 81       	ldd	r22, Y+1	; 0x01
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <macDataRequest>
	
	return true;
}
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	69 96       	adiw	r28, 0x19	; 25
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	f8 94       	cli
    12a0:	de bf       	out	0x3e, r29	; 62
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	cd bf       	out	0x3d, r28	; 61
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	08 95       	ret

000012ac <sendBOWMachineLabel>:
bool sendBOWMachineLabel()
{
    12ac:	cf 93       	push	r28
    12ae:	df 93       	push	r29
    12b0:	cd b7       	in	r28, 0x3d	; 61
    12b2:	de b7       	in	r29, 0x3e	; 62
    12b4:	a3 97       	sbiw	r28, 0x23	; 35
    12b6:	0f b6       	in	r0, 0x3f	; 63
    12b8:	f8 94       	cli
    12ba:	de bf       	out	0x3e, r29	; 62
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	cd bf       	out	0x3d, r28	; 61
	char tmp[35] = {0};
    12c0:	be 01       	movw	r22, r28
    12c2:	6f 5f       	subi	r22, 0xFF	; 255
    12c4:	7f 4f       	sbci	r23, 0xFF	; 255
    12c6:	83 e2       	ldi	r24, 0x23	; 35
    12c8:	fb 01       	movw	r30, r22
    12ca:	11 92       	st	Z+, r1
    12cc:	8a 95       	dec	r24
    12ce:	e9 f7       	brne	.-6      	; 0x12ca <sendBOWMachineLabel+0x1e>
	
	constructOutgoingString(REQUEST_MACHINE_LABEL, tmp);
    12d0:	84 e0       	ldi	r24, 0x04	; 4
    12d2:	0e 94 38 08 	call	0x1070	; 0x1070 <constructOutgoingString>
	macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);
    12d6:	ae 01       	movw	r20, r28
    12d8:	4e 5f       	subi	r20, 0xFE	; 254
    12da:	5f 4f       	sbci	r21, 0xFF	; 255
    12dc:	69 81       	ldd	r22, Y+1	; 0x01
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <macDataRequest>
	
	return true;
}
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	a3 96       	adiw	r28, 0x23	; 35
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	cd bf       	out	0x3d, r28	; 61
    12f4:	df 91       	pop	r29
    12f6:	cf 91       	pop	r28
    12f8:	08 95       	ret

000012fa <sendBOWMachineDescription>:
bool sendBOWMachineDescription()
{
    12fa:	cf 93       	push	r28
    12fc:	df 93       	push	r29
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62
    1302:	c5 55       	subi	r28, 0x55	; 85
    1304:	d1 09       	sbc	r29, r1
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	f8 94       	cli
    130a:	de bf       	out	0x3e, r29	; 62
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	cd bf       	out	0x3d, r28	; 61
	char tmp[85] = {0};
    1310:	be 01       	movw	r22, r28
    1312:	6f 5f       	subi	r22, 0xFF	; 255
    1314:	7f 4f       	sbci	r23, 0xFF	; 255
    1316:	85 e5       	ldi	r24, 0x55	; 85
    1318:	fb 01       	movw	r30, r22
    131a:	11 92       	st	Z+, r1
    131c:	8a 95       	dec	r24
    131e:	e9 f7       	brne	.-6      	; 0x131a <sendBOWMachineDescription+0x20>
			
	constructOutgoingString(REQUEST_MACHINE_DESCRIPTION, tmp);
    1320:	85 e0       	ldi	r24, 0x05	; 5
    1322:	0e 94 38 08 	call	0x1070	; 0x1070 <constructOutgoingString>
	macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);
    1326:	ae 01       	movw	r20, r28
    1328:	4e 5f       	subi	r20, 0xFE	; 254
    132a:	5f 4f       	sbci	r21, 0xFF	; 255
    132c:	69 81       	ldd	r22, Y+1	; 0x01
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <macDataRequest>
	
	return true;
}
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	cb 5a       	subi	r28, 0xAB	; 171
    133a:	df 4f       	sbci	r29, 0xFF	; 255
    133c:	0f b6       	in	r0, 0x3f	; 63
    133e:	f8 94       	cli
    1340:	de bf       	out	0x3e, r29	; 62
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	cd bf       	out	0x3d, r28	; 61
    1346:	df 91       	pop	r29
    1348:	cf 91       	pop	r28
    134a:	08 95       	ret

0000134c <sendNumberOfOLT>:
bool sendNumberOfOLT()
{
    134c:	cf 93       	push	r28
    134e:	df 93       	push	r29
    1350:	cd b7       	in	r28, 0x3d	; 61
    1352:	de b7       	in	r29, 0x3e	; 62
    1354:	a3 97       	sbiw	r28, 0x23	; 35
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	f8 94       	cli
    135a:	de bf       	out	0x3e, r29	; 62
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	cd bf       	out	0x3d, r28	; 61
	char tmp[35] = {0};
    1360:	be 01       	movw	r22, r28
    1362:	6f 5f       	subi	r22, 0xFF	; 255
    1364:	7f 4f       	sbci	r23, 0xFF	; 255
    1366:	83 e2       	ldi	r24, 0x23	; 35
    1368:	fb 01       	movw	r30, r22
    136a:	11 92       	st	Z+, r1
    136c:	8a 95       	dec	r24
    136e:	e9 f7       	brne	.-6      	; 0x136a <sendNumberOfOLT+0x1e>
	
	constructOutgoingString(REQUEST_NUMBER_OF_OLT, tmp);
    1370:	86 e0       	ldi	r24, 0x06	; 6
    1372:	0e 94 38 08 	call	0x1070	; 0x1070 <constructOutgoingString>
	macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);
    1376:	ae 01       	movw	r20, r28
    1378:	4e 5f       	subi	r20, 0xFE	; 254
    137a:	5f 4f       	sbci	r21, 0xFF	; 255
    137c:	69 81       	ldd	r22, Y+1	; 0x01
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <macDataRequest>
		
	return true;	
}
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	a3 96       	adiw	r28, 0x23	; 35
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	f8 94       	cli
    138e:	de bf       	out	0x3e, r29	; 62
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	cd bf       	out	0x3d, r28	; 61
    1394:	df 91       	pop	r29
    1396:	cf 91       	pop	r28
    1398:	08 95       	ret

0000139a <extractIncomingMessage>:
The extractIncomingMessage(const char *dataBuffer) function returns a pointer to the beginning of the substring.

\returns a pointer to the beginning of
the substring, or \c NULL if the substring is not found.  */
u8 extractIncomingMessage(char *dataBuffer)
{
    139a:	8f 92       	push	r8
    139c:	9f 92       	push	r9
    139e:	af 92       	push	r10
    13a0:	bf 92       	push	r11
    13a2:	cf 92       	push	r12
    13a4:	df 92       	push	r13
    13a6:	ff 92       	push	r15
    13a8:	0f 93       	push	r16
    13aa:	1f 93       	push	r17
    13ac:	cf 93       	push	r28
    13ae:	df 93       	push	r29
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
    13b4:	cd 54       	subi	r28, 0x4D	; 77
    13b6:	d1 09       	sbc	r29, r1
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	f8 94       	cli
    13bc:	de bf       	out	0x3e, r29	; 62
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	cd bf       	out	0x3d, r28	; 61
    13c2:	2e 96       	adiw	r28, 0x0e	; 14
    13c4:	9f af       	std	Y+63, r25	; 0x3f
    13c6:	8e af       	std	Y+62, r24	; 0x3e
    13c8:	2e 97       	sbiw	r28, 0x0e	; 14
	u8 TemplongAddr[8] = {0};
    13ca:	6e 01       	movw	r12, r28
    13cc:	83 e4       	ldi	r24, 0x43	; 67
    13ce:	c8 0e       	add	r12, r24
    13d0:	d1 1c       	adc	r13, r1
    13d2:	88 e0       	ldi	r24, 0x08	; 8
    13d4:	f6 01       	movw	r30, r12
    13d6:	98 2f       	mov	r25, r24
    13d8:	11 92       	st	Z+, r1
    13da:	9a 95       	dec	r25
    13dc:	e9 f7       	brne	.-6      	; 0x13d8 <extractIncomingMessage+0x3e>
	u8 MaclongAddr[8]  = {0};
    13de:	5e 01       	movw	r10, r28
    13e0:	eb e3       	ldi	r30, 0x3B	; 59
    13e2:	ae 0e       	add	r10, r30
    13e4:	b1 1c       	adc	r11, r1
    13e6:	f5 01       	movw	r30, r10
    13e8:	11 92       	st	Z+, r1
    13ea:	8a 95       	dec	r24
    13ec:	e9 f7       	brne	.-6      	; 0x13e8 <extractIncomingMessage+0x4e>
	u16 tmp;
	char *ptr;
	u8 n;
	char nibbleStr[50] = {0};
    13ee:	ce 01       	movw	r24, r28
    13f0:	01 96       	adiw	r24, 0x01	; 1
    13f2:	4c 01       	movw	r8, r24
    13f4:	82 e3       	ldi	r24, 0x32	; 50
    13f6:	f4 01       	movw	r30, r8
    13f8:	11 92       	st	Z+, r1
    13fa:	8a 95       	dec	r24
    13fc:	e9 f7       	brne	.-6      	; 0x13f8 <extractIncomingMessage+0x5e>
	u8 i = 0;
    13fe:	2c 96       	adiw	r28, 0x0c	; 12
    1400:	1f ae       	std	Y+63, r1	; 0x3f
    1402:	2c 97       	sbiw	r28, 0x0c	; 12
	u8 Nibble = 0;	
	u8 returnCode = OP;
    1404:	f0 90 b7 09 	lds	r15, 0x09B7	; 0x8009b7 <OP>
	/*
	*******************************************************************
	*************  Extract SetupString from INcomming String **********
	******************************************************************* */          
			
	if(strstr(dataBuffer, "SetupPackage") != NULL)
    1408:	2e 96       	adiw	r28, 0x0e	; 14
    140a:	0e ad       	ldd	r16, Y+62	; 0x3e
    140c:	1f ad       	ldd	r17, Y+63	; 0x3f
    140e:	2e 97       	sbiw	r28, 0x0e	; 14
    1410:	66 e8       	ldi	r22, 0x86	; 134
    1412:	73 e0       	ldi	r23, 0x03	; 3
    1414:	c8 01       	movw	r24, r16
    1416:	0e 94 36 32 	call	0x646c	; 0x646c <strstr>
    141a:	89 2b       	or	r24, r25
    141c:	09 f4       	brne	.+2      	; 0x1420 <extractIncomingMessage+0x86>
    141e:	99 c0       	rjmp	.+306    	; 0x1552 <extractIncomingMessage+0x1b8>
	{
		//if((ptr = GetParam(dataBuffer,"<SetupString>","<")) != NULL)			PPOS170601
		if((ptr = GetParam(dataBuffer,"<SS>","<")) != NULL)
    1420:	49 e6       	ldi	r20, 0x69	; 105
    1422:	52 e0       	ldi	r21, 0x02	; 2
    1424:	63 e9       	ldi	r22, 0x93	; 147
    1426:	73 e0       	ldi	r23, 0x03	; 3
    1428:	c8 01       	movw	r24, r16
    142a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <GetParam>
    142e:	00 97       	sbiw	r24, 0x00	; 0
    1430:	21 f1       	breq	.+72     	; 0x147a <extractIncomingMessage+0xe0>
		{ 
			n = asciiStringToNibble(ptr, nibbleStr);
    1432:	b4 01       	movw	r22, r8
    1434:	0e 94 fc 07 	call	0xff8	; 0xff8 <asciiStringToNibble>
    1438:	8b ab       	std	Y+51, r24	; 0x33
			// copy setup data

			halPutEeprom(MACHINE_SETUP_ADDR, n, (u8*)nibbleStr); //write machine setup string to eeprom 
    143a:	a4 01       	movw	r20, r8
    143c:	68 2f       	mov	r22, r24
    143e:	84 e2       	ldi	r24, 0x24	; 36
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <halPutEeprom>
            
			ReaderSetup.maxOfflineTransaction = nibbleStr[n-1];
    1446:	8b a9       	ldd	r24, Y+51	; 0x33
    1448:	fe 01       	movw	r30, r28
    144a:	e8 0f       	add	r30, r24
    144c:	f1 1d       	adc	r31, r1
    144e:	80 81       	ld	r24, Z
    1450:	80 93 c2 09 	sts	0x09C2, r24	; 0x8009c2 <ReaderSetup+0x8>
			halPutEeprom(READER_SETUP_ADDR, 1, (u8*)&ReaderSetup.maxOfflineTransaction); //write machine setup string to eeprom minus "number of offline transactions"            
    1454:	42 ec       	ldi	r20, 0xC2	; 194
    1456:	59 e0       	ldi	r21, 0x09	; 9
    1458:	61 e0       	ldi	r22, 0x01	; 1
    145a:	81 e6       	ldi	r24, 0x61	; 97
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <halPutEeprom>
			
			ReaderStateFlag.ReaderSetup = READER_SETUP_DONE;
    1462:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
    1466:	8d 7f       	andi	r24, 0xFD	; 253
    1468:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
			halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
    146c:	45 e3       	ldi	r20, 0x35	; 53
    146e:	59 e0       	ldi	r21, 0x09	; 9
    1470:	61 e0       	ldi	r22, 0x01	; 1
    1472:	82 e2       	ldi	r24, 0x22	; 34
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <halPutEeprom>
	/*
	*******************************************************************
	*************  Extract ValidationCode from INcomming String ********
	******************************************************************* */
            
		if((ptr = GetParam((char *)dataBuffer,"<ValidationCode>","<")) != NULL)
    147a:	49 e6       	ldi	r20, 0x69	; 105
    147c:	52 e0       	ldi	r21, 0x02	; 2
    147e:	68 e9       	ldi	r22, 0x98	; 152
    1480:	73 e0       	ldi	r23, 0x03	; 3
    1482:	2e 96       	adiw	r28, 0x0e	; 14
    1484:	8e ad       	ldd	r24, Y+62	; 0x3e
    1486:	9f ad       	ldd	r25, Y+63	; 0x3f
    1488:	2e 97       	sbiw	r28, 0x0e	; 14
    148a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <GetParam>
    148e:	00 97       	sbiw	r24, 0x00	; 0
    1490:	91 f0       	breq	.+36     	; 0x14b6 <extractIncomingMessage+0x11c>
		{      
	
			n = asciiStringToNibble(ptr, nibbleStr);	
    1492:	b4 01       	movw	r22, r8
    1494:	0e 94 fc 07 	call	0xff8	; 0xff8 <asciiStringToNibble>
    1498:	8b ab       	std	Y+51, r24	; 0x33
			// save validation code
			halPutEeprom(VALIDATION_CODE_ADDR, 1, (u8*)&n);
    149a:	ae 01       	movw	r20, r28
    149c:	4d 5c       	subi	r20, 0xCD	; 205
    149e:	5f 4f       	sbci	r21, 0xFF	; 255
    14a0:	61 e0       	ldi	r22, 0x01	; 1
    14a2:	81 e6       	ldi	r24, 0x61	; 97
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <halPutEeprom>
			halPutEeprom(VALIDATION_CODE_ADDR+1, n, (u8*)nibbleStr);
    14aa:	a4 01       	movw	r20, r8
    14ac:	6b a9       	ldd	r22, Y+51	; 0x33
    14ae:	82 e6       	ldi	r24, 0x62	; 98
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <halPutEeprom>
	/*
	*******************************************************************
	*************  Extract ReaderID from INcomming String *************
	******************************************************************* */
           
	if((ptr = GetParam((char *)dataBuffer,"<ReaderId>","<")) != NULL)
    14b6:	49 e6       	ldi	r20, 0x69	; 105
    14b8:	52 e0       	ldi	r21, 0x02	; 2
    14ba:	69 ea       	ldi	r22, 0xA9	; 169
    14bc:	73 e0       	ldi	r23, 0x03	; 3
    14be:	2e 96       	adiw	r28, 0x0e	; 14
    14c0:	8e ad       	ldd	r24, Y+62	; 0x3e
    14c2:	9f ad       	ldd	r25, Y+63	; 0x3f
    14c4:	2e 97       	sbiw	r28, 0x0e	; 14
    14c6:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <GetParam>
    14ca:	00 97       	sbiw	r24, 0x00	; 0
    14cc:	81 f1       	breq	.+96     	; 0x152e <extractIncomingMessage+0x194>
	{ //1

					tmp = atoi(ptr);         
    14ce:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <atoi>
    14d2:	2c 96       	adiw	r28, 0x0c	; 12
    14d4:	3f ad       	ldd	r19, Y+63	; 0x3f
    14d6:	2c 97       	sbiw	r28, 0x0c	; 12
	u16 tmp;
	char *ptr;
	u8 n;
	char nibbleStr[50] = {0};
	u8 i = 0;
	u8 Nibble = 0;	
    14d8:	20 e0       	ldi	r18, 0x00	; 0
	if((ptr = GetParam((char *)dataBuffer,"<ReaderId>","<")) != NULL)
	{ //1

					tmp = atoi(ptr);         
	
				while (tmp> 0)
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	c9 f0       	breq	.+50     	; 0x1510 <extractIncomingMessage+0x176>
    14de:	e3 2f       	mov	r30, r19
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
							Nibble = highNibble;
						break;

						case highNibble:

							TemplongAddr[i] =  ((tmp % 16)<<4)| TemplongAddr[i]; 
    14e2:	ec 0d       	add	r30, r12
    14e4:	fd 1d       	adc	r31, r13
					tmp = atoi(ptr);         
	
				while (tmp> 0)
				{

					switch(Nibble)
    14e6:	21 30       	cpi	r18, 0x01	; 1
    14e8:	29 f0       	breq	.+10     	; 0x14f4 <extractIncomingMessage+0x15a>
					{
			
						case lowNibble:

							TemplongAddr[i] = (tmp % 16); 
    14ea:	28 2f       	mov	r18, r24
    14ec:	2f 70       	andi	r18, 0x0F	; 15
    14ee:	20 83       	st	Z, r18
							Nibble = highNibble;
    14f0:	21 e0       	ldi	r18, 0x01	; 1
						break;
    14f2:	08 c0       	rjmp	.+16     	; 0x1504 <extractIncomingMessage+0x16a>

						case highNibble:

							TemplongAddr[i] =  ((tmp % 16)<<4)| TemplongAddr[i]; 
    14f4:	40 81       	ld	r20, Z
    14f6:	28 2f       	mov	r18, r24
    14f8:	22 95       	swap	r18
    14fa:	20 7f       	andi	r18, 0xF0	; 240
    14fc:	24 2b       	or	r18, r20
    14fe:	20 83       	st	Z, r18
							i++;
    1500:	3f 5f       	subi	r19, 0xFF	; 255
							Nibble = lowNibble;
    1502:	20 e0       	ldi	r18, 0x00	; 0
						break;

					}
			
						tmp = tmp / 16;
    1504:	74 e0       	ldi	r23, 0x04	; 4
    1506:	96 95       	lsr	r25
    1508:	87 95       	ror	r24
    150a:	7a 95       	dec	r23
    150c:	e1 f7       	brne	.-8      	; 0x1506 <extractIncomingMessage+0x16c>
    150e:	e5 cf       	rjmp	.-54     	; 0x14da <extractIncomingMessage+0x140>
    1510:	2c 96       	adiw	r28, 0x0c	; 12
    1512:	3f af       	std	Y+63, r19	; 0x3f
    1514:	2c 97       	sbiw	r28, 0x0c	; 12
				}

					//Update Reader to eeprom in Hex format
					halPutMacAddr(TemplongAddr);
    1516:	a6 01       	movw	r20, r12
    1518:	68 e0       	ldi	r22, 0x08	; 8
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <halPutEeprom>

					// Verifry write opertaion
					halGetMacAddr(MaclongAddr);
    1522:	a5 01       	movw	r20, r10
    1524:	68 e0       	ldi	r22, 0x08	; 8
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <halGetEeprom>




		// Re-associate with COORD using new ReaderID
		if(strcmp((char*)TemplongAddr,(char*)MaclongAddr) == 0 )
    152e:	b5 01       	movw	r22, r10
    1530:	c6 01       	movw	r24, r12
    1532:	0e 94 0c 32 	call	0x6418	; 0x6418 <strcmp>
    1536:	89 2b       	or	r24, r25
    1538:	09 f0       	breq	.+2      	; 0x153c <extractIncomingMessage+0x1a2>
    153a:	5e c1       	rjmp	.+700    	; 0x17f8 <extractIncomingMessage+0x45e>
				#if (DEBUG)
					Beeps(5);// Beeps 5x
				#endif
		                    

			ReaderStateFlag.FirstRun = NON_VIRGIN_READER;                                        
    153c:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
    1540:	8e 7f       	andi	r24, 0xFE	; 254
    1542:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
			halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
    1546:	45 e3       	ldi	r20, 0x35	; 53
    1548:	59 e0       	ldi	r21, 0x09	; 9
    154a:	61 e0       	ldi	r22, 0x01	; 1
    154c:	82 e2       	ldi	r24, 0x22	; 34
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	30 c0       	rjmp	.+96     	; 0x15b2 <extractIncomingMessage+0x218>
				returnCode = APP_INIT;	
		}

	}
	
	else if(strstr(dataBuffer, "SetupRequest") != NULL)
    1552:	64 eb       	ldi	r22, 0xB4	; 180
    1554:	73 e0       	ldi	r23, 0x03	; 3
    1556:	c8 01       	movw	r24, r16
    1558:	0e 94 36 32 	call	0x646c	; 0x646c <strstr>
    155c:	89 2b       	or	r24, r25
    155e:	09 f0       	breq	.+2      	; 0x1562 <extractIncomingMessage+0x1c8>
    1560:	43 c1       	rjmp	.+646    	; 0x17e8 <extractIncomingMessage+0x44e>
	{		
		returnCode = SETUP_REQUEST;
	}
	
	else if(strstr(dataBuffer, "ValidationResponse") != NULL)
    1562:	61 ec       	ldi	r22, 0xC1	; 193
    1564:	73 e0       	ldi	r23, 0x03	; 3
    1566:	c8 01       	movw	r24, r16
    1568:	0e 94 36 32 	call	0x646c	; 0x646c <strstr>
    156c:	89 2b       	or	r24, r25
    156e:	09 f0       	breq	.+2      	; 0x1572 <extractIncomingMessage+0x1d8>
    1570:	3e c1       	rjmp	.+636    	; 0x17ee <extractIncomingMessage+0x454>
	{
		returnCode = VALIDATE_SETUP;
	}
	else if(strstr(dataBuffer, "GetFirmwareVersion") != NULL)
    1572:	64 ed       	ldi	r22, 0xD4	; 212
    1574:	73 e0       	ldi	r23, 0x03	; 3
    1576:	c8 01       	movw	r24, r16
    1578:	0e 94 36 32 	call	0x646c	; 0x646c <strstr>
    157c:	89 2b       	or	r24, r25
    157e:	19 f0       	breq	.+6      	; 0x1586 <extractIncomingMessage+0x1ec>
	{
		sendBOWReaderFirmwareVersion();
    1580:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <sendBOWReaderFirmwareVersion>
    1584:	39 c1       	rjmp	.+626    	; 0x17f8 <extractIncomingMessage+0x45e>
				
	}	
	else if(strstr(dataBuffer, "ResetEEPROM") != NULL)
    1586:	67 ee       	ldi	r22, 0xE7	; 231
    1588:	73 e0       	ldi	r23, 0x03	; 3
    158a:	c8 01       	movw	r24, r16
    158c:	0e 94 36 32 	call	0x646c	; 0x646c <strstr>
    1590:	89 2b       	or	r24, r25
    1592:	a1 f0       	breq	.+40     	; 0x15bc <extractIncomingMessage+0x222>
	{
		 unsigned char reset_eeprom[8] = {255,255,255,255,255,255,255,255};
    1594:	88 e0       	ldi	r24, 0x08	; 8
    1596:	e7 e2       	ldi	r30, 0x27	; 39
    1598:	f2 e0       	ldi	r31, 0x02	; 2
    159a:	de 01       	movw	r26, r28
    159c:	d3 96       	adiw	r26, 0x33	; 51
    159e:	01 90       	ld	r0, Z+
    15a0:	0d 92       	st	X+, r0
    15a2:	8a 95       	dec	r24
    15a4:	e1 f7       	brne	.-8      	; 0x159e <extractIncomingMessage+0x204>
		 halPutEeprom(0,8,(u8*)reset_eeprom);
    15a6:	ae 01       	movw	r20, r28
    15a8:	4d 5c       	subi	r20, 0xCD	; 205
    15aa:	5f 4f       	sbci	r21, 0xFF	; 255
    15ac:	68 e0       	ldi	r22, 0x08	; 8
    15ae:	80 e0       	ldi	r24, 0x00	; 0
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <halPutEeprom>
		 
		 
		 // re-associate
		 //appInit();
		 returnCode = APP_INIT;		
    15b6:	60 e2       	ldi	r22, 0x20	; 32
    15b8:	f6 2e       	mov	r15, r22
    15ba:	1e c1       	rjmp	.+572    	; 0x17f8 <extractIncomingMessage+0x45e>
	}
	else if(strstr(dataBuffer, "EnterBootloader") != NULL)
    15bc:	63 ef       	ldi	r22, 0xF3	; 243
    15be:	73 e0       	ldi	r23, 0x03	; 3
    15c0:	c8 01       	movw	r24, r16
    15c2:	0e 94 36 32 	call	0x646c	; 0x646c <strstr>
    15c6:	89 2b       	or	r24, r25
    15c8:	09 f4       	brne	.+2      	; 0x15cc <extractIncomingMessage+0x232>
    15ca:	3b c0       	rjmp	.+118    	; 0x1642 <extractIncomingMessage+0x2a8>
	{


		// Store Active CHANNEL to EEPROM Address 0xFF2
		// eeprom_write(CHANNEL_ADDR, macConfig.currentChannel[0]);
		halPutEeprom((u16*)CHANNEL_ADDR, 1, &macConfig.currentChannel);
    15cc:	44 e4       	ldi	r20, 0x44	; 68
    15ce:	5c e0       	ldi	r21, 0x0C	; 12
    15d0:	61 e0       	ldi	r22, 0x01	; 1
    15d2:	82 ef       	ldi	r24, 0xF2	; 242
    15d4:	9f e0       	ldi	r25, 0x0F	; 15
    15d6:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <halPutEeprom>

		// Store Active PAN_ID to EEPROM Address 0xFF4
		halPutEeprom((u16*)PANID_ADDR, 2, (u8*)&macConfig.panId);
    15da:	4b e3       	ldi	r20, 0x3B	; 59
    15dc:	5c e0       	ldi	r21, 0x0C	; 12
    15de:	62 e0       	ldi	r22, 0x02	; 2
    15e0:	84 ef       	ldi	r24, 0xF4	; 244
    15e2:	9f e0       	ldi	r25, 0x0F	; 15
    15e4:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <halPutEeprom>

		// Store Active SHORT SOURCE ADDR to EEPROM Address 0xFF6
		halPutEeprom((u16*)SRCADDR_ADDR,2, (u8*)&macConfig.shortAddress);
    15e8:	4d e3       	ldi	r20, 0x3D	; 61
    15ea:	5c e0       	ldi	r21, 0x0C	; 12
    15ec:	62 e0       	ldi	r22, 0x02	; 2
    15ee:	86 ef       	ldi	r24, 0xF6	; 246
    15f0:	9f e0       	ldi	r25, 0x0F	; 15
    15f2:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <halPutEeprom>

		// Store Active DESTINATION ADDR to EEPROM Address 0xFF8
		// halPutEeprom(DESTADDR_ADDR, 2, &MdcStatus.MachineType);

		i = 0x01;
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	2c 96       	adiw	r28, 0x0c	; 12
    15fa:	8f af       	std	Y+63, r24	; 0x3f
    15fc:	2c 97       	sbiw	r28, 0x0c	; 12
		halPutEeprom((u16*)BOOT_INIT_ADDR,1,(u8*)&i);
    15fe:	ae 01       	movw	r20, r28
    1600:	45 5b       	subi	r20, 0xB5	; 181
    1602:	5f 4f       	sbci	r21, 0xFF	; 255
    1604:	61 e0       	ldi	r22, 0x01	; 1
    1606:	80 ef       	ldi	r24, 0xF0	; 240
    1608:	9f e0       	ldi	r25, 0x0F	; 15
    160a:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <halPutEeprom>
				
		// zero out CRC and Application size memory location
		memset(dataBuffer,0,sizeof((char*)dataBuffer));
    160e:	2e 96       	adiw	r28, 0x0e	; 14
    1610:	ee ad       	ldd	r30, Y+62	; 0x3e
    1612:	ff ad       	ldd	r31, Y+63	; 0x3f
    1614:	2e 97       	sbiw	r28, 0x0e	; 14
    1616:	11 82       	std	Z+1, r1	; 0x01
    1618:	10 82       	st	Z, r1
		halPutEeprom((u16*)APP_CRC,6,(u8*)&dataBuffer);
    161a:	ae 01       	movw	r20, r28
    161c:	44 5b       	subi	r20, 0xB4	; 180
    161e:	5f 4f       	sbci	r21, 0xFF	; 255
    1620:	66 e0       	ldi	r22, 0x06	; 6
    1622:	8a ef       	ldi	r24, 0xFA	; 250
    1624:	9f e0       	ldi	r25, 0x0F	; 15
    1626:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <halPutEeprom>

				
		// Initiate watchdog timer
		cli();
    162a:	f8 94       	cli
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    162c:	9f e0       	ldi	r25, 0x0F	; 15
    162e:	88 e1       	ldi	r24, 0x18	; 24
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	a8 95       	wdr
    1636:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		wdt_enable(WDTO_2S);
		while(1);
    1640:	ff cf       	rjmp	.-2      	; 0x1640 <extractIncomingMessage+0x2a6>

	}
	else if(strstr(dataBuffer, "SetD") != NULL)
    1642:	63 e0       	ldi	r22, 0x03	; 3
    1644:	74 e0       	ldi	r23, 0x04	; 4
    1646:	c8 01       	movw	r24, r16
    1648:	0e 94 36 32 	call	0x646c	; 0x646c <strstr>
    164c:	89 2b       	or	r24, r25
    164e:	51 f1       	breq	.+84     	; 0x16a4 <extractIncomingMessage+0x30a>
	{
		if((ptr = GetParam((char *)dataBuffer,"<SetD>","<")) != NULL)
    1650:	49 e6       	ldi	r20, 0x69	; 105
    1652:	52 e0       	ldi	r21, 0x02	; 2
    1654:	68 e0       	ldi	r22, 0x08	; 8
    1656:	74 e0       	ldi	r23, 0x04	; 4
    1658:	c8 01       	movw	r24, r16
    165a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <GetParam>
    165e:	00 97       	sbiw	r24, 0x00	; 0
    1660:	09 f4       	brne	.+2      	; 0x1664 <extractIncomingMessage+0x2ca>
    1662:	ca c0       	rjmp	.+404    	; 0x17f8 <extractIncomingMessage+0x45e>
		{				
			if((n=strlen(ptr)) <= MACHINE_NAME_SIZE)
    1664:	fc 01       	movw	r30, r24
    1666:	01 90       	ld	r0, Z+
    1668:	00 20       	and	r0, r0
    166a:	e9 f7       	brne	.-6      	; 0x1666 <extractIncomingMessage+0x2cc>
    166c:	31 97       	sbiw	r30, 0x01	; 1
    166e:	8f 01       	movw	r16, r30
    1670:	08 1b       	sub	r16, r24
    1672:	19 0b       	sbc	r17, r25
    1674:	0b ab       	std	Y+51, r16	; 0x33
    1676:	03 33       	cpi	r16, 0x33	; 51
    1678:	08 f0       	brcs	.+2      	; 0x167c <extractIncomingMessage+0x2e2>
    167a:	be c0       	rjmp	.+380    	; 0x17f8 <extractIncomingMessage+0x45e>
			{
				strcpy((char*)ReaderSetup.machineDescription, ptr);				
    167c:	bc 01       	movw	r22, r24
    167e:	84 ec       	ldi	r24, 0xC4	; 196
    1680:	99 e0       	ldi	r25, 0x09	; 9
    1682:	0e 94 15 32 	call	0x642a	; 0x642a <strcpy>
				n++;//add null terminator to string
    1686:	61 e0       	ldi	r22, 0x01	; 1
    1688:	60 0f       	add	r22, r16
    168a:	6b ab       	std	Y+51, r22	; 0x33
				halPutEeprom(MACHINE_DESCRIPTION_ADDR, n, (u8*)&ReaderSetup.machineDescription);
    168c:	44 ec       	ldi	r20, 0xC4	; 196
    168e:	59 e0       	ldi	r21, 0x09	; 9
    1690:	87 e7       	ldi	r24, 0x77	; 119
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <halPutEeprom>
		
				ReaderStateFlag.ReaderNameSetup = SET_READER_FLAG;
    1698:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
    169c:	8f 77       	andi	r24, 0x7F	; 127
    169e:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
    16a2:	3a c0       	rjmp	.+116    	; 0x1718 <extractIncomingMessage+0x37e>
				halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
			}		
		}
	}	
	else if(strstr(dataBuffer, "GetD") != NULL)
    16a4:	6f e0       	ldi	r22, 0x0F	; 15
    16a6:	74 e0       	ldi	r23, 0x04	; 4
    16a8:	c8 01       	movw	r24, r16
    16aa:	0e 94 36 32 	call	0x646c	; 0x646c <strstr>
    16ae:	89 2b       	or	r24, r25
    16b0:	19 f0       	breq	.+6      	; 0x16b8 <extractIncomingMessage+0x31e>
	{
		sendBOWMachineDescription();
    16b2:	0e 94 7d 09 	call	0x12fa	; 0x12fa <sendBOWMachineDescription>
    16b6:	a0 c0       	rjmp	.+320    	; 0x17f8 <extractIncomingMessage+0x45e>
		
	}	
	else if(strstr(dataBuffer, "SetMachineLabel") != NULL)
    16b8:	64 e1       	ldi	r22, 0x14	; 20
    16ba:	74 e0       	ldi	r23, 0x04	; 4
    16bc:	c8 01       	movw	r24, r16
    16be:	0e 94 36 32 	call	0x646c	; 0x646c <strstr>
    16c2:	89 2b       	or	r24, r25
    16c4:	89 f1       	breq	.+98     	; 0x1728 <extractIncomingMessage+0x38e>
	{
		if((ptr = GetParam((char *)dataBuffer,"<SetMachineLabel>","<")) != NULL)
    16c6:	49 e6       	ldi	r20, 0x69	; 105
    16c8:	52 e0       	ldi	r21, 0x02	; 2
    16ca:	64 e2       	ldi	r22, 0x24	; 36
    16cc:	74 e0       	ldi	r23, 0x04	; 4
    16ce:	c8 01       	movw	r24, r16
    16d0:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <GetParam>
    16d4:	00 97       	sbiw	r24, 0x00	; 0
    16d6:	09 f4       	brne	.+2      	; 0x16da <extractIncomingMessage+0x340>
    16d8:	8f c0       	rjmp	.+286    	; 0x17f8 <extractIncomingMessage+0x45e>
		{
			if((n=strlen(ptr)) <= MACHINE_LABEL_SIZE)
    16da:	fc 01       	movw	r30, r24
    16dc:	01 90       	ld	r0, Z+
    16de:	00 20       	and	r0, r0
    16e0:	e9 f7       	brne	.-6      	; 0x16dc <extractIncomingMessage+0x342>
    16e2:	31 97       	sbiw	r30, 0x01	; 1
    16e4:	8f 01       	movw	r16, r30
    16e6:	08 1b       	sub	r16, r24
    16e8:	19 0b       	sbc	r17, r25
    16ea:	0b ab       	std	Y+51, r16	; 0x33
    16ec:	0b 30       	cpi	r16, 0x0B	; 11
    16ee:	08 f0       	brcs	.+2      	; 0x16f2 <extractIncomingMessage+0x358>
    16f0:	83 c0       	rjmp	.+262    	; 0x17f8 <extractIncomingMessage+0x45e>
			{
				strcpy((char*)ReaderSetup.machineLabel, ptr);
    16f2:	bc 01       	movw	r22, r24
    16f4:	87 ef       	ldi	r24, 0xF7	; 247
    16f6:	99 e0       	ldi	r25, 0x09	; 9
    16f8:	0e 94 15 32 	call	0x642a	; 0x642a <strcpy>
				n++;//add null terminator to string
    16fc:	61 e0       	ldi	r22, 0x01	; 1
    16fe:	60 0f       	add	r22, r16
    1700:	6b ab       	std	Y+51, r22	; 0x33
				halPutEeprom(MACHINE_LABEL_ADDR, n, (u8*)&ReaderSetup.machineLabel);
    1702:	47 ef       	ldi	r20, 0xF7	; 247
    1704:	59 e0       	ldi	r21, 0x09	; 9
    1706:	8c e6       	ldi	r24, 0x6C	; 108
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <halPutEeprom>
		
				ReaderStateFlag.ReaderLabelSetup = SET_READER_FLAG;
    170e:	80 91 36 09 	lds	r24, 0x0936	; 0x800936 <ReaderStateFlag+0x1>
    1712:	8e 7f       	andi	r24, 0xFE	; 254
    1714:	80 93 36 09 	sts	0x0936, r24	; 0x800936 <ReaderStateFlag+0x1>
				halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
    1718:	45 e3       	ldi	r20, 0x35	; 53
    171a:	59 e0       	ldi	r21, 0x09	; 9
    171c:	61 e0       	ldi	r22, 0x01	; 1
    171e:	82 e2       	ldi	r24, 0x22	; 34
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <halPutEeprom>
    1726:	68 c0       	rjmp	.+208    	; 0x17f8 <extractIncomingMessage+0x45e>
			}
			
		}
	}
	else if(strstr(dataBuffer, "GetMachineLabel") != NULL)
    1728:	66 e3       	ldi	r22, 0x36	; 54
    172a:	74 e0       	ldi	r23, 0x04	; 4
    172c:	c8 01       	movw	r24, r16
    172e:	0e 94 36 32 	call	0x646c	; 0x646c <strstr>
    1732:	89 2b       	or	r24, r25
    1734:	19 f0       	breq	.+6      	; 0x173c <extractIncomingMessage+0x3a2>
	{
		sendBOWMachineLabel();			
    1736:	0e 94 56 09 	call	0x12ac	; 0x12ac <sendBOWMachineLabel>
    173a:	5e c0       	rjmp	.+188    	; 0x17f8 <extractIncomingMessage+0x45e>
	}
	else if (strstr(dataBuffer, "GetOLT") != NULL)
    173c:	66 e4       	ldi	r22, 0x46	; 70
    173e:	74 e0       	ldi	r23, 0x04	; 4
    1740:	c8 01       	movw	r24, r16
    1742:	0e 94 36 32 	call	0x646c	; 0x646c <strstr>
    1746:	89 2b       	or	r24, r25
    1748:	69 f0       	breq	.+26     	; 0x1764 <extractIncomingMessage+0x3ca>
	{
		sendNumberOfOLT();
    174a:	0e 94 a6 09 	call	0x134c	; 0x134c <sendNumberOfOLT>
		
		oLTTimerId = macSetLongAlarm(SERVER_RESPONSE_TIMEOUT,timeoutWaitingForOLTReponse);
    174e:	66 ef       	ldi	r22, 0xF6	; 246
    1750:	77 e0       	ldi	r23, 0x07	; 7
    1752:	8c e3       	ldi	r24, 0x3C	; 60
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	0e 94 98 25 	call	0x4b30	; 0x4b30 <macSetLongAlarm>
    175a:	80 93 30 05 	sts	0x0530, r24	; 0x800530 <oLTTimerId.3842>
		returnCode = SEND_OFFLINE_TRANSACTIONS;
    175e:	58 e2       	ldi	r21, 0x28	; 40
    1760:	f5 2e       	mov	r15, r21
    1762:	4a c0       	rjmp	.+148    	; 0x17f8 <extractIncomingMessage+0x45e>
	}
		
	else if(strstr(dataBuffer, "ShowBalance") != NULL)
    1764:	6d e4       	ldi	r22, 0x4D	; 77
    1766:	74 e0       	ldi	r23, 0x04	; 4
    1768:	c8 01       	movw	r24, r16
    176a:	0e 94 36 32 	call	0x646c	; 0x646c <strstr>
    176e:	89 2b       	or	r24, r25
    1770:	09 f0       	breq	.+2      	; 0x1774 <extractIncomingMessage+0x3da>
    1772:	40 c0       	rjmp	.+128    	; 0x17f4 <extractIncomingMessage+0x45a>
	{
		returnCode = SHOW_BALANCE_REQUEST;		
	}
	else if (strstr(dataBuffer, "faultcode") != NULL)
    1774:	69 e5       	ldi	r22, 0x59	; 89
    1776:	74 e0       	ldi	r23, 0x04	; 4
    1778:	c8 01       	movw	r24, r16
    177a:	0e 94 36 32 	call	0x646c	; 0x646c <strstr>
    177e:	89 2b       	or	r24, r25
    1780:	49 f1       	breq	.+82     	; 0x17d4 <extractIncomingMessage+0x43a>
	{
		char errCode = 0;
    1782:	1b aa       	std	Y+51, r1	; 0x33
		if((ptr = GetParam((char *)dataBuffer,"<faultcode>","<")) != NULL)
    1784:	49 e6       	ldi	r20, 0x69	; 105
    1786:	52 e0       	ldi	r21, 0x02	; 2
    1788:	63 e6       	ldi	r22, 0x63	; 99
    178a:	74 e0       	ldi	r23, 0x04	; 4
    178c:	c8 01       	movw	r24, r16
    178e:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <GetParam>
    1792:	00 97       	sbiw	r24, 0x00	; 0
    1794:	89 f1       	breq	.+98     	; 0x17f8 <extractIncomingMessage+0x45e>
		{
			asciiStringToNibble(ptr, &errCode);
    1796:	be 01       	movw	r22, r28
    1798:	6d 5c       	subi	r22, 0xCD	; 205
    179a:	7f 4f       	sbci	r23, 0xFF	; 255
    179c:	0e 94 fc 07 	call	0xff8	; 0xff8 <asciiStringToNibble>
			
			switch(errCode)
    17a0:	8b a9       	ldd	r24, Y+51	; 0x33
    17a2:	86 30       	cpi	r24, 0x06	; 6
    17a4:	49 f5       	brne	.+82     	; 0x17f8 <extractIncomingMessage+0x45e>
			{
				case TRANSACTION_SUCCESSFUL:
					if (returnCode == SEND_OFFLINE_TRANSACTIONS)
    17a6:	f8 e2       	ldi	r31, 0x28	; 40
    17a8:	ff 12       	cpse	r15, r31
    17aa:	26 c0       	rjmp	.+76     	; 0x17f8 <extractIncomingMessage+0x45e>
					{
						macTimerEnd(oLTTimerId);
    17ac:	80 91 30 05 	lds	r24, 0x0530	; 0x800530 <oLTTimerId.3842>
    17b0:	0e 94 d5 25 	call	0x4baa	; 0x4baa <macTimerEnd>
						if( !sendStoredTransaction() )
    17b4:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <sendStoredTransaction>
    17b8:	88 23       	and	r24, r24
    17ba:	49 f0       	breq	.+18     	; 0x17ce <extractIncomingMessage+0x434>
						{ //All stored transactions have been sent
							returnCode = IDLE;
						}
						else
						{	//set new timer while waiting for next response
							oLTTimerId = macSetLongAlarm(SERVER_RESPONSE_TIMEOUT,timeoutWaitingForOLTReponse);
    17bc:	66 ef       	ldi	r22, 0xF6	; 246
    17be:	77 e0       	ldi	r23, 0x07	; 7
    17c0:	8c e3       	ldi	r24, 0x3C	; 60
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	0e 94 98 25 	call	0x4b30	; 0x4b30 <macSetLongAlarm>
    17c8:	80 93 30 05 	sts	0x0530, r24	; 0x800530 <oLTTimerId.3842>
    17cc:	15 c0       	rjmp	.+42     	; 0x17f8 <extractIncomingMessage+0x45e>
					if (returnCode == SEND_OFFLINE_TRANSACTIONS)
					{
						macTimerEnd(oLTTimerId);
						if( !sendStoredTransaction() )
						{ //All stored transactions have been sent
							returnCode = IDLE;
    17ce:	47 e2       	ldi	r20, 0x27	; 39
    17d0:	f4 2e       	mov	r15, r20
    17d2:	12 c0       	rjmp	.+36     	; 0x17f8 <extractIncomingMessage+0x45e>
					break;	  
			}
		}
			
	}
	else if(strstr(dataBuffer, "AuditRq") != NULL)     //new: Audit Data ACA
    17d4:	6f e6       	ldi	r22, 0x6F	; 111
    17d6:	74 e0       	ldi	r23, 0x04	; 4
    17d8:	c8 01       	movw	r24, r16
    17da:	0e 94 36 32 	call	0x646c	; 0x646c <strstr>
    17de:	89 2b       	or	r24, r25
    17e0:	59 f0       	breq	.+22     	; 0x17f8 <extractIncomingMessage+0x45e>
	{
		returnCode = REQUEST_AUDITDATA;
    17e2:	38 e0       	ldi	r19, 0x08	; 8
    17e4:	f3 2e       	mov	r15, r19
    17e6:	08 c0       	rjmp	.+16     	; 0x17f8 <extractIncomingMessage+0x45e>

	}
	
	else if(strstr(dataBuffer, "SetupRequest") != NULL)
	{		
		returnCode = SETUP_REQUEST;
    17e8:	2a e0       	ldi	r18, 0x0A	; 10
    17ea:	f2 2e       	mov	r15, r18
    17ec:	05 c0       	rjmp	.+10     	; 0x17f8 <extractIncomingMessage+0x45e>
	}
	
	else if(strstr(dataBuffer, "ValidationResponse") != NULL)
	{
		returnCode = VALIDATE_SETUP;
    17ee:	94 e1       	ldi	r25, 0x14	; 20
    17f0:	f9 2e       	mov	r15, r25
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <extractIncomingMessage+0x45e>
		returnCode = SEND_OFFLINE_TRANSACTIONS;
	}
		
	else if(strstr(dataBuffer, "ShowBalance") != NULL)
	{
		returnCode = SHOW_BALANCE_REQUEST;		
    17f4:	8f e1       	ldi	r24, 0x1F	; 31
    17f6:	f8 2e       	mov	r15, r24
	}
	


	return returnCode;
}
    17f8:	8f 2d       	mov	r24, r15
    17fa:	c3 5b       	subi	r28, 0xB3	; 179
    17fc:	df 4f       	sbci	r29, 0xFF	; 255
    17fe:	0f b6       	in	r0, 0x3f	; 63
    1800:	f8 94       	cli
    1802:	de bf       	out	0x3e, r29	; 62
    1804:	0f be       	out	0x3f, r0	; 63
    1806:	cd bf       	out	0x3d, r28	; 61
    1808:	df 91       	pop	r29
    180a:	cf 91       	pop	r28
    180c:	1f 91       	pop	r17
    180e:	0f 91       	pop	r16
    1810:	ff 90       	pop	r15
    1812:	df 90       	pop	r13
    1814:	cf 90       	pop	r12
    1816:	bf 90       	pop	r11
    1818:	af 90       	pop	r10
    181a:	9f 90       	pop	r9
    181c:	8f 90       	pop	r8
    181e:	08 95       	ret

00001820 <sendBOWCCTransaction>:

bool sendBOWCCTransaction(structTransaction *transRecord)
{
    1820:	ef 92       	push	r14
    1822:	ff 92       	push	r15
    1824:	0f 93       	push	r16
    1826:	1f 93       	push	r17
    1828:	cf 93       	push	r28
    182a:	df 93       	push	r29
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
    1830:	ca 58       	subi	r28, 0x8A	; 138
    1832:	d1 09       	sbc	r29, r1
    1834:	0f b6       	in	r0, 0x3f	; 63
    1836:	f8 94       	cli
    1838:	de bf       	out	0x3e, r29	; 62
    183a:	0f be       	out	0x3f, r0	; 63
    183c:	cd bf       	out	0x3d, r28	; 61
    183e:	8c 01       	movw	r16, r24
	char tmpCardIdString[10] = {0};
    1840:	7e 01       	movw	r14, r28
    1842:	81 e8       	ldi	r24, 0x81	; 129
    1844:	e8 0e       	add	r14, r24
    1846:	f1 1c       	adc	r15, r1
    1848:	8a e0       	ldi	r24, 0x0A	; 10
    184a:	d7 01       	movw	r26, r14
    184c:	1d 92       	st	X+, r1
    184e:	8a 95       	dec	r24
    1850:	e9 f7       	brne	.-6      	; 0x184c <sendBOWCCTransaction+0x2c>
	char tempStr[128] = {0};
    1852:	fe 01       	movw	r30, r28
    1854:	31 96       	adiw	r30, 0x01	; 1
    1856:	80 e8       	ldi	r24, 0x80	; 128
    1858:	df 01       	movw	r26, r30
    185a:	1d 92       	st	X+, r1
    185c:	8a 95       	dec	r24
    185e:	e9 f7       	brne	.-6      	; 0x185a <sendBOWCCTransaction+0x3a>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ultoa_ncheck (unsigned long, char *, unsigned char);
	return __ultoa_ncheck (__val, __s, __radix);
    1860:	f8 01       	movw	r30, r16
    1862:	61 85       	ldd	r22, Z+9	; 0x09
    1864:	72 85       	ldd	r23, Z+10	; 0x0a
    1866:	83 85       	ldd	r24, Z+11	; 0x0b
    1868:	94 85       	ldd	r25, Z+12	; 0x0c
    186a:	2a e0       	ldi	r18, 0x0A	; 10
    186c:	a7 01       	movw	r20, r14
    186e:	0e 94 58 32 	call	0x64b0	; 0x64b0 <__ultoa_ncheck>
	
	//send data to BOW
	ultoa(transRecord->CardId,tmpCardIdString,10);
	sprintf((char *)tempStr+1, "<CC>"
    1872:	d8 01       	movw	r26, r16
    1874:	54 96       	adiw	r26, 0x14	; 20
    1876:	8c 91       	ld	r24, X
    1878:	54 97       	sbiw	r26, 0x14	; 20
    187a:	1f 92       	push	r1
    187c:	8f 93       	push	r24
    187e:	13 96       	adiw	r26, 0x03	; 3
    1880:	8c 91       	ld	r24, X
    1882:	13 97       	sbiw	r26, 0x03	; 3
    1884:	1f 92       	push	r1
    1886:	8f 93       	push	r24
    1888:	12 96       	adiw	r26, 0x02	; 2
    188a:	8c 91       	ld	r24, X
    188c:	12 97       	sbiw	r26, 0x02	; 2
    188e:	1f 92       	push	r1
    1890:	8f 93       	push	r24
    1892:	15 96       	adiw	r26, 0x05	; 5
    1894:	8c 91       	ld	r24, X
    1896:	15 97       	sbiw	r26, 0x05	; 5
    1898:	8f 93       	push	r24
    189a:	14 96       	adiw	r26, 0x04	; 4
    189c:	8c 91       	ld	r24, X
    189e:	14 97       	sbiw	r26, 0x04	; 4
    18a0:	8f 93       	push	r24
    18a2:	11 96       	adiw	r26, 0x01	; 1
    18a4:	8c 91       	ld	r24, X
    18a6:	11 97       	sbiw	r26, 0x01	; 1
    18a8:	8f 93       	push	r24
    18aa:	8c 91       	ld	r24, X
    18ac:	8f 93       	push	r24
    18ae:	17 96       	adiw	r26, 0x07	; 7
    18b0:	6d 91       	ld	r22, X+
    18b2:	7c 91       	ld	r23, X
    18b4:	18 97       	sbiw	r26, 0x08	; 8
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	0e 94 a6 2c 	call	0x594c	; 0x594c <__floatunsisf>
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	48 ec       	ldi	r20, 0xC8	; 200
    18c4:	52 e4       	ldi	r21, 0x42	; 66
    18c6:	0e 94 05 2c 	call	0x580a	; 0x580a <__divsf3>
    18ca:	9f 93       	push	r25
    18cc:	8f 93       	push	r24
    18ce:	7f 93       	push	r23
    18d0:	6f 93       	push	r22
    18d2:	ff 92       	push	r15
    18d4:	ef 92       	push	r14
    18d6:	87 e7       	ldi	r24, 0x77	; 119
    18d8:	94 e0       	ldi	r25, 0x04	; 4
    18da:	9f 93       	push	r25
    18dc:	8f 93       	push	r24
    18de:	8e 01       	movw	r16, r28
    18e0:	0e 5f       	subi	r16, 0xFE	; 254
    18e2:	1f 4f       	sbci	r17, 0xFF	; 255
    18e4:	1f 93       	push	r17
    18e6:	0f 93       	push	r16
    18e8:	0e 94 b2 32 	call	0x6564	; 0x6564 <sprintf>
	"<code>%d%d</code>"
	"<isOL>%d</isOL>"
	,tmpCardIdString, (double)(transRecord->vendPrice / 100.0), transRecord->LocationId, transRecord->ManufactureId
	, transRecord->MachineId[0] , transRecord->MachineId[1], transRecord->isOffline);
	
	tempStr[0] = strlen(tempStr+1); //get string length then assign to first element
    18ec:	f8 01       	movw	r30, r16
    18ee:	01 90       	ld	r0, Z+
    18f0:	00 20       	and	r0, r0
    18f2:	e9 f7       	brne	.-6      	; 0x18ee <sendBOWCCTransaction+0xce>
	tempStr[0] = tempStr[0] + 1;    // data size = data byte + size byte
    18f4:	6e 2f       	mov	r22, r30
    18f6:	60 1b       	sub	r22, r16
    18f8:	69 83       	std	Y+1, r22	; 0x01
	
	if (tempStr[0] > 127)
    18fa:	0f b6       	in	r0, 0x3f	; 63
    18fc:	f8 94       	cli
    18fe:	de bf       	out	0x3e, r29	; 62
    1900:	0f be       	out	0x3f, r0	; 63
    1902:	cd bf       	out	0x3d, r28	; 61
    1904:	67 fd       	sbrc	r22, 7
    1906:	07 c0       	rjmp	.+14     	; 0x1916 <sendBOWCCTransaction+0xf6>
	{
		//#error "Outgoing string to large"
		return false;
	}
	
	macDataRequest(DEFAULT_COORD_ADDR,(u8)tempStr[0],(u8*)tempStr+1); //send record via radio
    1908:	a8 01       	movw	r20, r16
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <macDataRequest>
	
	return true;
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	01 c0       	rjmp	.+2      	; 0x1918 <sendBOWCCTransaction+0xf8>
	tempStr[0] = tempStr[0] + 1;    // data size = data byte + size byte
	
	if (tempStr[0] > 127)
	{
		//#error "Outgoing string to large"
		return false;
    1916:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	macDataRequest(DEFAULT_COORD_ADDR,(u8)tempStr[0],(u8*)tempStr+1); //send record via radio
	
	return true;
}
    1918:	c6 57       	subi	r28, 0x76	; 118
    191a:	df 4f       	sbci	r29, 0xFF	; 255
    191c:	0f b6       	in	r0, 0x3f	; 63
    191e:	f8 94       	cli
    1920:	de bf       	out	0x3e, r29	; 62
    1922:	0f be       	out	0x3f, r0	; 63
    1924:	cd bf       	out	0x3d, r28	; 61
    1926:	df 91       	pop	r29
    1928:	cf 91       	pop	r28
    192a:	1f 91       	pop	r17
    192c:	0f 91       	pop	r16
    192e:	ff 90       	pop	r15
    1930:	ef 90       	pop	r14
    1932:	08 95       	ret

00001934 <displayMsg>:
Led1 to led6 are limited to values defined in "display.h"
***********************************************************************************************
*/

void displayMsg(u8 msg) 
{
    1934:	cf 92       	push	r12
    1936:	ef 92       	push	r14
    1938:	0f 93       	push	r16
	if (msg == CARD_ERR_MSG)
    193a:	81 30       	cpi	r24, 0x01	; 1
    193c:	29 f4       	brne	.+10     	; 0x1948 <displayMsg+0x14>
	else if (msg == BLANK_MSG)
	{
		sendSQDisplayCommand(LED_BLANK,LED_BLANK,LED_BLANK,LED_BLANK,LED_BLANK,LED_BLANK,0);
	}

}
    193e:	0f 91       	pop	r16
    1940:	ef 90       	pop	r14
    1942:	cf 90       	pop	r12

void displayMsg(u8 msg) 
{
	if (msg == CARD_ERR_MSG)
	{
		displaySQCardError();
    1944:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <displaySQCardError>
	}
	else if (msg == SETUP_MSG)		//no communication with the BOW
    1948:	82 30       	cpi	r24, 0x02	; 2
    194a:	49 f4       	brne	.+18     	; 0x195e <displayMsg+0x2a>
	{
		sendSQDisplayCommand(LED_n,LED_o,LED_S,LED_U,LED_BLANK,LED_BLANK,5);
    194c:	25 e0       	ldi	r18, 0x05	; 5
    194e:	c2 2e       	mov	r12, r18
    1950:	e1 2c       	mov	r14, r1
    1952:	00 e0       	ldi	r16, 0x00	; 0
    1954:	2e e3       	ldi	r18, 0x3E	; 62
    1956:	4d e6       	ldi	r20, 0x6D	; 109
    1958:	6c e5       	ldi	r22, 0x5C	; 92
    195a:	84 e5       	ldi	r24, 0x54	; 84
    195c:	1f c0       	rjmp	.+62     	; 0x199c <displayMsg+0x68>
	}
	else if (msg == BUSY_MSG)
    195e:	84 30       	cpi	r24, 0x04	; 4
    1960:	49 f4       	brne	.+18     	; 0x1974 <displayMsg+0x40>
	{
		sendSQDisplayCommand(LED_b,LED_U,LED_S,LED_Y,LED_BLANK,LED_BLANK,5);
    1962:	95 e0       	ldi	r25, 0x05	; 5
    1964:	c9 2e       	mov	r12, r25
    1966:	e1 2c       	mov	r14, r1
    1968:	00 e0       	ldi	r16, 0x00	; 0
    196a:	2e e6       	ldi	r18, 0x6E	; 110
    196c:	4d e6       	ldi	r20, 0x6D	; 109
    196e:	6e e3       	ldi	r22, 0x3E	; 62
    1970:	8c e7       	ldi	r24, 0x7C	; 124
    1972:	14 c0       	rjmp	.+40     	; 0x199c <displayMsg+0x68>
	}
	else if (msg == SERVICE_MSG)
    1974:	83 30       	cpi	r24, 0x03	; 3
    1976:	49 f4       	brne	.+18     	; 0x198a <displayMsg+0x56>
	{
		sendSQDisplayCommand(LED_S,LED_E,LED_r,LED_BLANK,LED_BLANK,LED_BLANK,5);
    1978:	85 e0       	ldi	r24, 0x05	; 5
    197a:	c8 2e       	mov	r12, r24
    197c:	e1 2c       	mov	r14, r1
    197e:	00 e0       	ldi	r16, 0x00	; 0
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	40 e5       	ldi	r20, 0x50	; 80
    1984:	69 e7       	ldi	r22, 0x79	; 121
    1986:	8d e6       	ldi	r24, 0x6D	; 109
    1988:	09 c0       	rjmp	.+18     	; 0x199c <displayMsg+0x68>
	}
	else if (msg == BLANK_MSG)
    198a:	85 30       	cpi	r24, 0x05	; 5
    198c:	49 f4       	brne	.+18     	; 0x19a0 <displayMsg+0x6c>
	{
		sendSQDisplayCommand(LED_BLANK,LED_BLANK,LED_BLANK,LED_BLANK,LED_BLANK,LED_BLANK,0);
    198e:	c1 2c       	mov	r12, r1
    1990:	e1 2c       	mov	r14, r1
    1992:	00 e0       	ldi	r16, 0x00	; 0
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	40 e0       	ldi	r20, 0x00	; 0
    1998:	60 e0       	ldi	r22, 0x00	; 0
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	0e 94 b3 11 	call	0x2366	; 0x2366 <sendSQDisplayCommand>
	}

}
    19a0:	0f 91       	pop	r16
    19a2:	ef 90       	pop	r14
    19a4:	cf 90       	pop	r12
    19a6:	08 95       	ret

000019a8 <displayVersion>:

*/

void displayVersion(void)
{	
	displaySQReaderVersion();
    19a8:	0c 94 e1 11 	jmp	0x23c2	; 0x23c2 <displaySQReaderVersion>

000019ac <getSQSetupData>:
	if( (cardType == REGULAR_VEND) && sendSQCashCardInserted() )
	{
		CurrentAccount.CardState = CARD_IN;
		return true;
	}
	else if ( (cardType == TOPOFF_VEND) && sendSQCashCardInsetedForTopoff() )
    19ac:	1f 93       	push	r17
    19ae:	cf 93       	push	r28
    19b0:	df 93       	push	r29
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62
    19b6:	ec 97       	sbiw	r28, 0x3c	; 60
    19b8:	0f b6       	in	r0, 0x3f	; 63
    19ba:	f8 94       	cli
    19bc:	de bf       	out	0x3e, r29	; 62
    19be:	0f be       	out	0x3f, r0	; 63
    19c0:	cd bf       	out	0x3d, r28	; 61
    19c2:	ae 01       	movw	r20, r28
    19c4:	4f 5f       	subi	r20, 0xFF	; 255
    19c6:	5f 4f       	sbci	r21, 0xFF	; 255
    19c8:	8c e3       	ldi	r24, 0x3C	; 60
    19ca:	fa 01       	movw	r30, r20
    19cc:	11 92       	st	Z+, r1
    19ce:	8a 95       	dec	r24
    19d0:	e9 f7       	brne	.-6      	; 0x19cc <getSQSetupData+0x20>
    19d2:	80 91 f0 0a 	lds	r24, 0x0AF0	; 0x800af0 <deviceStatus>
    19d6:	82 32       	cpi	r24, 0x22	; 34
    19d8:	09 f4       	brne	.+2      	; 0x19dc <getSQSetupData+0x30>
    19da:	91 c0       	rjmp	.+290    	; 0x1afe <getSQSetupData+0x152>
    19dc:	89 32       	cpi	r24, 0x29	; 41
    19de:	09 f4       	brne	.+2      	; 0x19e2 <getSQSetupData+0x36>
    19e0:	fb c0       	rjmp	.+502    	; 0x1bd8 <getSQSetupData+0x22c>
    19e2:	81 32       	cpi	r24, 0x21	; 33
    19e4:	09 f0       	breq	.+2      	; 0x19e8 <getSQSetupData+0x3c>
    19e6:	73 c1       	rjmp	.+742    	; 0x1cce <getSQSetupData+0x322>
    19e8:	65 e1       	ldi	r22, 0x15	; 21
    19ea:	84 e2       	ldi	r24, 0x24	; 36
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <halGetEeprom>
    19f2:	1a 85       	ldd	r17, Y+10	; 0x0a
    19f4:	61 2f       	mov	r22, r17
    19f6:	70 e0       	ldi	r23, 0x00	; 0
    19f8:	76 2f       	mov	r23, r22
    19fa:	66 27       	eor	r22, r22
    19fc:	8b 85       	ldd	r24, Y+11	; 0x0b
    19fe:	68 0f       	add	r22, r24
    1a00:	71 1d       	adc	r23, r1
    1a02:	07 2e       	mov	r0, r23
    1a04:	00 0c       	add	r0, r0
    1a06:	88 0b       	sbc	r24, r24
    1a08:	99 0b       	sbc	r25, r25
    1a0a:	0e 94 a8 2c 	call	0x5950	; 0x5950 <__floatsisf>
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	48 ec       	ldi	r20, 0xC8	; 200
    1a14:	52 e4       	ldi	r21, 0x42	; 66
    1a16:	0e 94 05 2c 	call	0x580a	; 0x580a <__divsf3>
    1a1a:	60 93 c0 0c 	sts	0x0CC0, r22	; 0x800cc0 <vendPrice>
    1a1e:	70 93 c1 0c 	sts	0x0CC1, r23	; 0x800cc1 <vendPrice+0x1>
    1a22:	80 93 c2 0c 	sts	0x0CC2, r24	; 0x800cc2 <vendPrice+0x2>
    1a26:	90 93 c3 0c 	sts	0x0CC3, r25	; 0x800cc3 <vendPrice+0x3>
    1a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2c:	80 93 ce 08 	sts	0x08CE, r24	; 0x8008ce <SQACAToploadProgramming+0x5>
    1a30:	10 92 cf 08 	sts	0x08CF, r1	; 0x8008cf <SQACAToploadProgramming+0x6>
    1a34:	8c 81       	ldd	r24, Y+4	; 0x04
    1a36:	80 93 d0 08 	sts	0x08D0, r24	; 0x8008d0 <SQACAToploadProgramming+0x7>
    1a3a:	10 92 d1 08 	sts	0x08D1, r1	; 0x8008d1 <SQACAToploadProgramming+0x8>
    1a3e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a40:	80 93 d2 08 	sts	0x08D2, r24	; 0x8008d2 <SQACAToploadProgramming+0x9>
    1a44:	10 92 d3 08 	sts	0x08D3, r1	; 0x8008d3 <SQACAToploadProgramming+0xa>
    1a48:	88 85       	ldd	r24, Y+8	; 0x08
    1a4a:	80 93 d4 08 	sts	0x08D4, r24	; 0x8008d4 <SQACAToploadProgramming+0xb>
    1a4e:	10 92 d5 08 	sts	0x08D5, r1	; 0x8008d5 <SQACAToploadProgramming+0xc>
    1a52:	10 93 d6 08 	sts	0x08D6, r17	; 0x8008d6 <SQACAToploadProgramming+0xd>
    1a56:	10 92 d7 08 	sts	0x08D7, r1	; 0x8008d7 <SQACAToploadProgramming+0xe>
    1a5a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a5c:	80 93 d8 08 	sts	0x08D8, r24	; 0x8008d8 <SQACAToploadProgramming+0xf>
    1a60:	10 92 d9 08 	sts	0x08D9, r1	; 0x8008d9 <SQACAToploadProgramming+0x10>
    1a64:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a66:	80 93 da 08 	sts	0x08DA, r24	; 0x8008da <SQACAToploadProgramming+0x11>
    1a6a:	10 92 db 08 	sts	0x08DB, r1	; 0x8008db <SQACAToploadProgramming+0x12>
    1a6e:	88 89       	ldd	r24, Y+16	; 0x10
    1a70:	80 93 dc 08 	sts	0x08DC, r24	; 0x8008dc <SQACAToploadProgramming+0x13>
    1a74:	10 92 dd 08 	sts	0x08DD, r1	; 0x8008dd <SQACAToploadProgramming+0x14>
    1a78:	8a 89       	ldd	r24, Y+18	; 0x12
    1a7a:	80 93 de 08 	sts	0x08DE, r24	; 0x8008de <SQACAToploadProgramming+0x15>
    1a7e:	10 92 df 08 	sts	0x08DF, r1	; 0x8008df <SQACAToploadProgramming+0x16>
    1a82:	8c 89       	ldd	r24, Y+20	; 0x14
    1a84:	80 93 e0 08 	sts	0x08E0, r24	; 0x8008e0 <SQACAToploadProgramming+0x17>
    1a88:	10 92 e1 08 	sts	0x08E1, r1	; 0x8008e1 <SQACAToploadProgramming+0x18>
    1a8c:	82 e3       	ldi	r24, 0x32	; 50
    1a8e:	80 93 e2 08 	sts	0x08E2, r24	; 0x8008e2 <SQACAToploadProgramming+0x19>
    1a92:	10 92 e3 08 	sts	0x08E3, r1	; 0x8008e3 <SQACAToploadProgramming+0x1a>
    1a96:	10 92 e4 08 	sts	0x08E4, r1	; 0x8008e4 <SQACAToploadProgramming+0x1b>
    1a9a:	10 92 e5 08 	sts	0x08E5, r1	; 0x8008e5 <SQACAToploadProgramming+0x1c>
    1a9e:	10 92 e6 08 	sts	0x08E6, r1	; 0x8008e6 <SQACAToploadProgramming+0x1d>
    1aa2:	10 92 e7 08 	sts	0x08E7, r1	; 0x8008e7 <SQACAToploadProgramming+0x1e>
    1aa6:	10 92 e8 08 	sts	0x08E8, r1	; 0x8008e8 <SQACAToploadProgramming+0x1f>
    1aaa:	10 92 e9 08 	sts	0x08E9, r1	; 0x8008e9 <SQACAToploadProgramming+0x20>
    1aae:	9a e0       	ldi	r25, 0x0A	; 10
    1ab0:	90 93 ea 08 	sts	0x08EA, r25	; 0x8008ea <SQACAToploadProgramming+0x21>
    1ab4:	84 e0       	ldi	r24, 0x04	; 4
    1ab6:	80 93 eb 08 	sts	0x08EB, r24	; 0x8008eb <SQACAToploadProgramming+0x22>
    1aba:	10 92 ec 08 	sts	0x08EC, r1	; 0x8008ec <SQACAToploadProgramming+0x23>
    1abe:	27 e0       	ldi	r18, 0x07	; 7
    1ac0:	20 93 ed 08 	sts	0x08ED, r18	; 0x8008ed <SQACAToploadProgramming+0x24>
    1ac4:	90 93 ee 08 	sts	0x08EE, r25	; 0x8008ee <SQACAToploadProgramming+0x25>
    1ac8:	80 93 f0 08 	sts	0x08F0, r24	; 0x8008f0 <SQACAToploadProgramming+0x27>
    1acc:	10 92 ef 08 	sts	0x08EF, r1	; 0x8008ef <SQACAToploadProgramming+0x26>
    1ad0:	26 e0       	ldi	r18, 0x06	; 6
    1ad2:	20 93 f1 08 	sts	0x08F1, r18	; 0x8008f1 <SQACAToploadProgramming+0x28>
    1ad6:	90 93 f2 08 	sts	0x08F2, r25	; 0x8008f2 <SQACAToploadProgramming+0x29>
    1ada:	80 93 f3 08 	sts	0x08F3, r24	; 0x8008f3 <SQACAToploadProgramming+0x2a>
    1ade:	10 92 f4 08 	sts	0x08F4, r1	; 0x8008f4 <SQACAToploadProgramming+0x2b>
    1ae2:	85 e0       	ldi	r24, 0x05	; 5
    1ae4:	80 93 f5 08 	sts	0x08F5, r24	; 0x8008f5 <SQACAToploadProgramming+0x2c>
    1ae8:	80 93 f6 08 	sts	0x08F6, r24	; 0x8008f6 <SQACAToploadProgramming+0x2d>
    1aec:	10 92 f7 08 	sts	0x08F7, r1	; 0x8008f7 <SQACAToploadProgramming+0x2e>
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	80 93 f8 08 	sts	0x08F8, r24	; 0x8008f8 <SQACAToploadProgramming+0x2f>
    1af6:	8d e1       	ldi	r24, 0x1D	; 29
    1af8:	80 93 f9 08 	sts	0x08F9, r24	; 0x8008f9 <SQACAToploadProgramming+0x30>
    1afc:	e8 c0       	rjmp	.+464    	; 0x1cce <getSQSetupData+0x322>
    1afe:	60 e1       	ldi	r22, 0x10	; 16
    1b00:	84 e2       	ldi	r24, 0x24	; 36
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <halGetEeprom>
    1b08:	1a 85       	ldd	r17, Y+10	; 0x0a
    1b0a:	61 2f       	mov	r22, r17
    1b0c:	70 e0       	ldi	r23, 0x00	; 0
    1b0e:	76 2f       	mov	r23, r22
    1b10:	66 27       	eor	r22, r22
    1b12:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b14:	68 0f       	add	r22, r24
    1b16:	71 1d       	adc	r23, r1
    1b18:	07 2e       	mov	r0, r23
    1b1a:	00 0c       	add	r0, r0
    1b1c:	88 0b       	sbc	r24, r24
    1b1e:	99 0b       	sbc	r25, r25
    1b20:	0e 94 a8 2c 	call	0x5950	; 0x5950 <__floatsisf>
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	48 ec       	ldi	r20, 0xC8	; 200
    1b2a:	52 e4       	ldi	r21, 0x42	; 66
    1b2c:	0e 94 05 2c 	call	0x580a	; 0x580a <__divsf3>
    1b30:	60 93 c0 0c 	sts	0x0CC0, r22	; 0x800cc0 <vendPrice>
    1b34:	70 93 c1 0c 	sts	0x0CC1, r23	; 0x800cc1 <vendPrice+0x1>
    1b38:	80 93 c2 0c 	sts	0x0CC2, r24	; 0x800cc2 <vendPrice+0x2>
    1b3c:	90 93 c3 0c 	sts	0x0CC3, r25	; 0x800cc3 <vendPrice+0x3>
    1b40:	8a 81       	ldd	r24, Y+2	; 0x02
    1b42:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <SQACAFrontloadProgramming+0x5>
    1b46:	10 92 a8 08 	sts	0x08A8, r1	; 0x8008a8 <SQACAFrontloadProgramming+0x6>
    1b4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4c:	80 93 a9 08 	sts	0x08A9, r24	; 0x8008a9 <SQACAFrontloadProgramming+0x7>
    1b50:	10 92 aa 08 	sts	0x08AA, r1	; 0x8008aa <SQACAFrontloadProgramming+0x8>
    1b54:	8e 81       	ldd	r24, Y+6	; 0x06
    1b56:	80 93 ab 08 	sts	0x08AB, r24	; 0x8008ab <SQACAFrontloadProgramming+0x9>
    1b5a:	10 92 ac 08 	sts	0x08AC, r1	; 0x8008ac <SQACAFrontloadProgramming+0xa>
    1b5e:	88 85       	ldd	r24, Y+8	; 0x08
    1b60:	80 93 ad 08 	sts	0x08AD, r24	; 0x8008ad <SQACAFrontloadProgramming+0xb>
    1b64:	10 92 ae 08 	sts	0x08AE, r1	; 0x8008ae <SQACAFrontloadProgramming+0xc>
    1b68:	10 93 af 08 	sts	0x08AF, r17	; 0x8008af <SQACAFrontloadProgramming+0xd>
    1b6c:	10 92 b0 08 	sts	0x08B0, r1	; 0x8008b0 <SQACAFrontloadProgramming+0xe>
    1b70:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b72:	80 93 b1 08 	sts	0x08B1, r24	; 0x8008b1 <SQACAFrontloadProgramming+0xf>
    1b76:	10 92 b2 08 	sts	0x08B2, r1	; 0x8008b2 <SQACAFrontloadProgramming+0x10>
    1b7a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b7c:	80 93 b3 08 	sts	0x08B3, r24	; 0x8008b3 <SQACAFrontloadProgramming+0x11>
    1b80:	10 92 b4 08 	sts	0x08B4, r1	; 0x8008b4 <SQACAFrontloadProgramming+0x12>
    1b84:	88 89       	ldd	r24, Y+16	; 0x10
    1b86:	80 93 b5 08 	sts	0x08B5, r24	; 0x8008b5 <SQACAFrontloadProgramming+0x13>
    1b8a:	10 92 b6 08 	sts	0x08B6, r1	; 0x8008b6 <SQACAFrontloadProgramming+0x14>
    1b8e:	8a 89       	ldd	r24, Y+18	; 0x12
    1b90:	80 93 b7 08 	sts	0x08B7, r24	; 0x8008b7 <SQACAFrontloadProgramming+0x15>
    1b94:	10 92 b8 08 	sts	0x08B8, r1	; 0x8008b8 <SQACAFrontloadProgramming+0x16>
    1b98:	8c 89       	ldd	r24, Y+20	; 0x14
    1b9a:	80 93 b9 08 	sts	0x08B9, r24	; 0x8008b9 <SQACAFrontloadProgramming+0x17>
    1b9e:	10 92 ba 08 	sts	0x08BA, r1	; 0x8008ba <SQACAFrontloadProgramming+0x18>
    1ba2:	82 e3       	ldi	r24, 0x32	; 50
    1ba4:	80 93 bb 08 	sts	0x08BB, r24	; 0x8008bb <SQACAFrontloadProgramming+0x19>
    1ba8:	10 92 bc 08 	sts	0x08BC, r1	; 0x8008bc <SQACAFrontloadProgramming+0x1a>
    1bac:	82 e0       	ldi	r24, 0x02	; 2
    1bae:	80 93 bd 08 	sts	0x08BD, r24	; 0x8008bd <SQACAFrontloadProgramming+0x1b>
    1bb2:	93 e0       	ldi	r25, 0x03	; 3
    1bb4:	90 93 be 08 	sts	0x08BE, r25	; 0x8008be <SQACAFrontloadProgramming+0x1c>
    1bb8:	80 93 bf 08 	sts	0x08BF, r24	; 0x8008bf <SQACAFrontloadProgramming+0x1d>
    1bbc:	91 e0       	ldi	r25, 0x01	; 1
    1bbe:	90 93 c0 08 	sts	0x08C0, r25	; 0x8008c0 <SQACAFrontloadProgramming+0x1e>
    1bc2:	94 e0       	ldi	r25, 0x04	; 4
    1bc4:	90 93 c1 08 	sts	0x08C1, r25	; 0x8008c1 <SQACAFrontloadProgramming+0x1f>
    1bc8:	80 93 c2 08 	sts	0x08C2, r24	; 0x8008c2 <SQACAFrontloadProgramming+0x20>
    1bcc:	10 92 c4 08 	sts	0x08C4, r1	; 0x8008c4 <SQACAFrontloadProgramming+0x22>
    1bd0:	8d e1       	ldi	r24, 0x1D	; 29
    1bd2:	80 93 c5 08 	sts	0x08C5, r24	; 0x8008c5 <SQACAFrontloadProgramming+0x23>
    1bd6:	7b c0       	rjmp	.+246    	; 0x1cce <getSQSetupData+0x322>
    1bd8:	6e e0       	ldi	r22, 0x0E	; 14
    1bda:	84 e2       	ldi	r24, 0x24	; 36
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <halGetEeprom>
    1be2:	1a 81       	ldd	r17, Y+2	; 0x02
    1be4:	61 2f       	mov	r22, r17
    1be6:	70 e0       	ldi	r23, 0x00	; 0
    1be8:	76 2f       	mov	r23, r22
    1bea:	66 27       	eor	r22, r22
    1bec:	8b 81       	ldd	r24, Y+3	; 0x03
    1bee:	68 0f       	add	r22, r24
    1bf0:	71 1d       	adc	r23, r1
    1bf2:	07 2e       	mov	r0, r23
    1bf4:	00 0c       	add	r0, r0
    1bf6:	88 0b       	sbc	r24, r24
    1bf8:	99 0b       	sbc	r25, r25
    1bfa:	0e 94 a8 2c 	call	0x5950	; 0x5950 <__floatsisf>
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	48 ec       	ldi	r20, 0xC8	; 200
    1c04:	52 e4       	ldi	r21, 0x42	; 66
    1c06:	0e 94 05 2c 	call	0x580a	; 0x580a <__divsf3>
    1c0a:	60 93 c0 0c 	sts	0x0CC0, r22	; 0x800cc0 <vendPrice>
    1c0e:	70 93 c1 0c 	sts	0x0CC1, r23	; 0x800cc1 <vendPrice+0x1>
    1c12:	80 93 c2 0c 	sts	0x0CC2, r24	; 0x800cc2 <vendPrice+0x2>
    1c16:	90 93 c3 0c 	sts	0x0CC3, r25	; 0x800cc3 <vendPrice+0x3>
    1c1a:	10 93 08 0a 	sts	0x0A08, r17	; 0x800a08 <SQACADryerProgramming+0x5>
    1c1e:	10 92 09 0a 	sts	0x0A09, r1	; 0x800a09 <SQACADryerProgramming+0x6>
    1c22:	8c 81       	ldd	r24, Y+4	; 0x04
    1c24:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <SQACADryerProgramming+0x7>
    1c28:	10 92 0b 0a 	sts	0x0A0B, r1	; 0x800a0b <SQACADryerProgramming+0x8>
    1c2c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c2e:	80 93 0c 0a 	sts	0x0A0C, r24	; 0x800a0c <SQACADryerProgramming+0x9>
    1c32:	10 92 0d 0a 	sts	0x0A0D, r1	; 0x800a0d <SQACADryerProgramming+0xa>
    1c36:	88 85       	ldd	r24, Y+8	; 0x08
    1c38:	80 93 0e 0a 	sts	0x0A0E, r24	; 0x800a0e <SQACADryerProgramming+0xb>
    1c3c:	10 92 0f 0a 	sts	0x0A0F, r1	; 0x800a0f <SQACADryerProgramming+0xc>
    1c40:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c42:	80 93 10 0a 	sts	0x0A10, r24	; 0x800a10 <SQACADryerProgramming+0xd>
    1c46:	10 92 11 0a 	sts	0x0A11, r1	; 0x800a11 <SQACADryerProgramming+0xe>
    1c4a:	91 e0       	ldi	r25, 0x01	; 1
    1c4c:	90 93 12 0a 	sts	0x0A12, r25	; 0x800a12 <SQACADryerProgramming+0xf>
    1c50:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c52:	80 93 13 0a 	sts	0x0A13, r24	; 0x800a13 <SQACADryerProgramming+0x10>
    1c56:	10 92 14 0a 	sts	0x0A14, r1	; 0x800a14 <SQACADryerProgramming+0x11>
    1c5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c5c:	80 93 15 0a 	sts	0x0A15, r24	; 0x800a15 <SQACADryerProgramming+0x12>
    1c60:	86 e2       	ldi	r24, 0x26	; 38
    1c62:	80 93 16 0a 	sts	0x0A16, r24	; 0x800a16 <SQACADryerProgramming+0x13>
    1c66:	25 e0       	ldi	r18, 0x05	; 5
    1c68:	20 93 17 0a 	sts	0x0A17, r18	; 0x800a17 <SQACADryerProgramming+0x14>
    1c6c:	80 93 18 0a 	sts	0x0A18, r24	; 0x800a18 <SQACADryerProgramming+0x15>
    1c70:	86 e1       	ldi	r24, 0x16	; 22
    1c72:	80 93 19 0a 	sts	0x0A19, r24	; 0x800a19 <SQACADryerProgramming+0x16>
    1c76:	8e e1       	ldi	r24, 0x1E	; 30
    1c78:	80 93 1a 0a 	sts	0x0A1A, r24	; 0x800a1a <SQACADryerProgramming+0x17>
    1c7c:	8d e2       	ldi	r24, 0x2D	; 45
    1c7e:	80 93 1b 0a 	sts	0x0A1B, r24	; 0x800a1b <SQACADryerProgramming+0x18>
    1c82:	10 92 1c 0a 	sts	0x0A1C, r1	; 0x800a1c <SQACADryerProgramming+0x19>
    1c86:	80 93 1d 0a 	sts	0x0A1D, r24	; 0x800a1d <SQACADryerProgramming+0x1a>
    1c8a:	10 92 1e 0a 	sts	0x0A1E, r1	; 0x800a1e <SQACADryerProgramming+0x1b>
    1c8e:	83 e0       	ldi	r24, 0x03	; 3
    1c90:	80 93 1f 0a 	sts	0x0A1F, r24	; 0x800a1f <SQACADryerProgramming+0x1c>
    1c94:	80 93 20 0a 	sts	0x0A20, r24	; 0x800a20 <SQACADryerProgramming+0x1d>
    1c98:	80 93 21 0a 	sts	0x0A21, r24	; 0x800a21 <SQACADryerProgramming+0x1e>
    1c9c:	80 93 22 0a 	sts	0x0A22, r24	; 0x800a22 <SQACADryerProgramming+0x1f>
    1ca0:	80 ea       	ldi	r24, 0xA0	; 160
    1ca2:	80 93 23 0a 	sts	0x0A23, r24	; 0x800a23 <SQACADryerProgramming+0x20>
    1ca6:	8b e9       	ldi	r24, 0x9B	; 155
    1ca8:	80 93 24 0a 	sts	0x0A24, r24	; 0x800a24 <SQACADryerProgramming+0x21>
    1cac:	83 e7       	ldi	r24, 0x73	; 115
    1cae:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <SQACADryerProgramming+0x23>
    1cb2:	84 e0       	ldi	r24, 0x04	; 4
    1cb4:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <SQACADryerProgramming+0x24>
    1cb8:	8d e1       	ldi	r24, 0x1D	; 29
    1cba:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <SQACADryerProgramming+0x25>
    1cbe:	10 92 29 0a 	sts	0x0A29, r1	; 0x800a29 <SQACADryerProgramming+0x26>
    1cc2:	10 92 2a 0a 	sts	0x0A2A, r1	; 0x800a2a <SQACADryerProgramming+0x27>
    1cc6:	10 92 2b 0a 	sts	0x0A2B, r1	; 0x800a2b <SQACADryerProgramming+0x28>
    1cca:	90 93 2c 0a 	sts	0x0A2C, r25	; 0x800a2c <SQACADryerProgramming+0x29>
    1cce:	ec 96       	adiw	r28, 0x3c	; 60
    1cd0:	0f b6       	in	r0, 0x3f	; 63
    1cd2:	f8 94       	cli
    1cd4:	de bf       	out	0x3e, r29	; 62
    1cd6:	0f be       	out	0x3f, r0	; 63
    1cd8:	cd bf       	out	0x3d, r28	; 61
    1cda:	df 91       	pop	r29
    1cdc:	cf 91       	pop	r28
    1cde:	1f 91       	pop	r17
    1ce0:	08 95       	ret

00001ce2 <sendSQDataPacket>:
    1ce2:	af 92       	push	r10
    1ce4:	bf 92       	push	r11
    1ce6:	cf 92       	push	r12
    1ce8:	df 92       	push	r13
    1cea:	ef 92       	push	r14
    1cec:	ff 92       	push	r15
    1cee:	0f 93       	push	r16
    1cf0:	1f 93       	push	r17
    1cf2:	cf 93       	push	r28
    1cf4:	df 93       	push	r29
    1cf6:	8c 01       	movw	r16, r24
    1cf8:	98 e0       	ldi	r25, 0x08	; 8
    1cfa:	f9 2e       	mov	r15, r25
    1cfc:	c0 2e       	mov	r12, r16
    1cfe:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <init_rx_buf>
    1d02:	f8 01       	movw	r30, r16
    1d04:	d0 80       	ld	r13, Z
    1d06:	d3 94       	inc	r13
    1d08:	82 e0       	ldi	r24, 0x02	; 2
    1d0a:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <serial_putchar>
    1d0e:	c0 2f       	mov	r28, r16
    1d10:	d1 2f       	mov	r29, r17
    1d12:	82 e0       	ldi	r24, 0x02	; 2
    1d14:	e8 2e       	mov	r14, r24
    1d16:	8c 2f       	mov	r24, r28
    1d18:	8c 19       	sub	r24, r12
    1d1a:	8d 15       	cp	r24, r13
    1d1c:	40 f4       	brcc	.+16     	; 0x1d2e <sendSQDataPacket+0x4c>
    1d1e:	5e 01       	movw	r10, r28
    1d20:	89 91       	ld	r24, Y+
    1d22:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <serial_putchar>
    1d26:	f5 01       	movw	r30, r10
    1d28:	80 81       	ld	r24, Z
    1d2a:	e8 26       	eor	r14, r24
    1d2c:	f4 cf       	rjmp	.-24     	; 0x1d16 <sendSQDataPacket+0x34>
    1d2e:	8e 2d       	mov	r24, r14
    1d30:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <serial_putchar>
    1d34:	10 92 bf 0c 	sts	0x0CBF, r1	; 0x800cbf <ucTimerCount>
    1d38:	78 94       	sei
    1d3a:	0e 94 ce 26 	call	0x4d9c	; 0x4d9c <StartTimerZero>
    1d3e:	80 91 bf 0c 	lds	r24, 0x0CBF	; 0x800cbf <ucTimerCount>
    1d42:	86 34       	cpi	r24, 0x46	; 70
    1d44:	20 f4       	brcc	.+8      	; 0x1d4e <sendSQDataPacket+0x6c>
    1d46:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <rx_buf_count>
    1d4a:	88 23       	and	r24, r24
    1d4c:	39 f0       	breq	.+14     	; 0x1d5c <sendSQDataPacket+0x7a>
    1d4e:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <StopTimerZero>
    1d52:	80 91 bf 0c 	lds	r24, 0x0CBF	; 0x800cbf <ucTimerCount>
    1d56:	86 34       	cpi	r24, 0x46	; 70
    1d58:	40 f0       	brcs	.+16     	; 0x1d6a <sendSQDataPacket+0x88>
    1d5a:	0d c0       	rjmp	.+26     	; 0x1d76 <sendSQDataPacket+0x94>
    1d5c:	0e 94 7f 21 	call	0x42fe	; 0x42fe <mac_event_pending>
    1d60:	88 23       	and	r24, r24
    1d62:	69 f3       	breq	.-38     	; 0x1d3e <sendSQDataPacket+0x5c>
    1d64:	0e 94 d3 21 	call	0x43a6	; 0x43a6 <macTask>
    1d68:	ea cf       	rjmp	.-44     	; 0x1d3e <sendSQDataPacket+0x5c>
    1d6a:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <serial_getchar>
    1d6e:	86 30       	cpi	r24, 0x06	; 6
    1d70:	69 f0       	breq	.+26     	; 0x1d8c <sendSQDataPacket+0xaa>
    1d72:	89 30       	cpi	r24, 0x09	; 9
    1d74:	49 f0       	breq	.+18     	; 0x1d88 <sendSQDataPacket+0xa6>
    1d76:	8f ed       	ldi	r24, 0xDF	; 223
    1d78:	9e e2       	ldi	r25, 0x2E	; 46
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	f1 f7       	brne	.-4      	; 0x1d7a <sendSQDataPacket+0x98>
    1d7e:	00 c0       	rjmp	.+0      	; 0x1d80 <sendSQDataPacket+0x9e>
    1d80:	00 00       	nop
    1d82:	fa 94       	dec	r15
    1d84:	f1 10       	cpse	r15, r1
    1d86:	bb cf       	rjmp	.-138    	; 0x1cfe <sendSQDataPacket+0x1c>
    1d88:	80 e0       	ldi	r24, 0x00	; 0
    1d8a:	01 c0       	rjmp	.+2      	; 0x1d8e <sendSQDataPacket+0xac>
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	df 91       	pop	r29
    1d90:	cf 91       	pop	r28
    1d92:	1f 91       	pop	r17
    1d94:	0f 91       	pop	r16
    1d96:	ff 90       	pop	r15
    1d98:	ef 90       	pop	r14
    1d9a:	df 90       	pop	r13
    1d9c:	cf 90       	pop	r12
    1d9e:	bf 90       	pop	r11
    1da0:	af 90       	pop	r10
    1da2:	08 95       	ret

00001da4 <sendSQACAVendPrice>:
    1da4:	cf 93       	push	r28
    1da6:	df 93       	push	r29
    1da8:	cd b7       	in	r28, 0x3d	; 61
    1daa:	de b7       	in	r29, 0x3e	; 62
    1dac:	2b 97       	sbiw	r28, 0x0b	; 11
    1dae:	0f b6       	in	r0, 0x3f	; 63
    1db0:	f8 94       	cli
    1db2:	de bf       	out	0x3e, r29	; 62
    1db4:	0f be       	out	0x3f, r0	; 63
    1db6:	cd bf       	out	0x3d, r28	; 61
    1db8:	ce 01       	movw	r24, r28
    1dba:	01 96       	adiw	r24, 0x01	; 1
    1dbc:	2b e0       	ldi	r18, 0x0B	; 11
    1dbe:	fc 01       	movw	r30, r24
    1dc0:	11 92       	st	Z+, r1
    1dc2:	2a 95       	dec	r18
    1dc4:	e9 f7       	brne	.-6      	; 0x1dc0 <sendSQACAVendPrice+0x1c>
    1dc6:	20 91 f5 0a 	lds	r18, 0x0AF5	; 0x800af5 <SQACAMachineStatus+0x1>
    1dca:	23 30       	cpi	r18, 0x03	; 3
    1dcc:	09 f0       	breq	.+2      	; 0x1dd0 <sendSQACAVendPrice+0x2c>
    1dce:	d7 c0       	rjmp	.+430    	; 0x1f7e <sendSQACAVendPrice+0x1da>
    1dd0:	20 91 f0 0a 	lds	r18, 0x0AF0	; 0x800af0 <deviceStatus>
    1dd4:	22 32       	cpi	r18, 0x22	; 34
    1dd6:	09 f4       	brne	.+2      	; 0x1dda <sendSQACAVendPrice+0x36>
    1dd8:	53 c0       	rjmp	.+166    	; 0x1e80 <sendSQACAVendPrice+0xdc>
    1dda:	29 32       	cpi	r18, 0x29	; 41
    1ddc:	09 f4       	brne	.+2      	; 0x1de0 <sendSQACAVendPrice+0x3c>
    1dde:	9e c0       	rjmp	.+316    	; 0x1f1c <sendSQACAVendPrice+0x178>
    1de0:	21 32       	cpi	r18, 0x21	; 33
    1de2:	09 f0       	breq	.+2      	; 0x1de6 <sendSQACAVendPrice+0x42>
    1de4:	cc c0       	rjmp	.+408    	; 0x1f7e <sendSQACAVendPrice+0x1da>
    1de6:	2a e0       	ldi	r18, 0x0A	; 10
    1de8:	29 83       	std	Y+1, r18	; 0x01
    1dea:	22 e7       	ldi	r18, 0x72	; 114
    1dec:	2a 83       	std	Y+2, r18	; 0x02
    1dee:	e0 91 f6 0a 	lds	r30, 0x0AF6	; 0x800af6 <SQACAMachineStatus+0x2>
    1df2:	4e 2f       	mov	r20, r30
    1df4:	50 e0       	ldi	r21, 0x00	; 0
    1df6:	fa 01       	movw	r30, r20
    1df8:	31 97       	sbiw	r30, 0x01	; 1
    1dfa:	e9 30       	cpi	r30, 0x09	; 9
    1dfc:	f1 05       	cpc	r31, r1
    1dfe:	d0 f5       	brcc	.+116    	; 0x1e74 <sendSQACAVendPrice+0xd0>
    1e00:	e8 54       	subi	r30, 0x48	; 72
    1e02:	ff 4f       	sbci	r31, 0xFF	; 255
    1e04:	0c 94 f7 2d 	jmp	0x5bee	; 0x5bee <__tablejump2__>
    1e08:	20 91 de 08 	lds	r18, 0x08DE	; 0x8008de <SQACAToploadProgramming+0x15>
    1e0c:	2b 83       	std	Y+3, r18	; 0x03
    1e0e:	20 91 df 08 	lds	r18, 0x08DF	; 0x8008df <SQACAToploadProgramming+0x16>
    1e12:	2f c0       	rjmp	.+94     	; 0x1e72 <sendSQACAVendPrice+0xce>
    1e14:	20 91 dc 08 	lds	r18, 0x08DC	; 0x8008dc <SQACAToploadProgramming+0x13>
    1e18:	2b 83       	std	Y+3, r18	; 0x03
    1e1a:	20 91 dd 08 	lds	r18, 0x08DD	; 0x8008dd <SQACAToploadProgramming+0x14>
    1e1e:	29 c0       	rjmp	.+82     	; 0x1e72 <sendSQACAVendPrice+0xce>
    1e20:	20 91 da 08 	lds	r18, 0x08DA	; 0x8008da <SQACAToploadProgramming+0x11>
    1e24:	2b 83       	std	Y+3, r18	; 0x03
    1e26:	20 91 db 08 	lds	r18, 0x08DB	; 0x8008db <SQACAToploadProgramming+0x12>
    1e2a:	23 c0       	rjmp	.+70     	; 0x1e72 <sendSQACAVendPrice+0xce>
    1e2c:	20 91 d8 08 	lds	r18, 0x08D8	; 0x8008d8 <SQACAToploadProgramming+0xf>
    1e30:	2b 83       	std	Y+3, r18	; 0x03
    1e32:	20 91 d9 08 	lds	r18, 0x08D9	; 0x8008d9 <SQACAToploadProgramming+0x10>
    1e36:	1d c0       	rjmp	.+58     	; 0x1e72 <sendSQACAVendPrice+0xce>
    1e38:	20 91 d6 08 	lds	r18, 0x08D6	; 0x8008d6 <SQACAToploadProgramming+0xd>
    1e3c:	2b 83       	std	Y+3, r18	; 0x03
    1e3e:	20 91 d7 08 	lds	r18, 0x08D7	; 0x8008d7 <SQACAToploadProgramming+0xe>
    1e42:	17 c0       	rjmp	.+46     	; 0x1e72 <sendSQACAVendPrice+0xce>
    1e44:	20 91 d4 08 	lds	r18, 0x08D4	; 0x8008d4 <SQACAToploadProgramming+0xb>
    1e48:	2b 83       	std	Y+3, r18	; 0x03
    1e4a:	20 91 d5 08 	lds	r18, 0x08D5	; 0x8008d5 <SQACAToploadProgramming+0xc>
    1e4e:	11 c0       	rjmp	.+34     	; 0x1e72 <sendSQACAVendPrice+0xce>
    1e50:	20 91 d2 08 	lds	r18, 0x08D2	; 0x8008d2 <SQACAToploadProgramming+0x9>
    1e54:	2b 83       	std	Y+3, r18	; 0x03
    1e56:	20 91 d3 08 	lds	r18, 0x08D3	; 0x8008d3 <SQACAToploadProgramming+0xa>
    1e5a:	0b c0       	rjmp	.+22     	; 0x1e72 <sendSQACAVendPrice+0xce>
    1e5c:	20 91 d0 08 	lds	r18, 0x08D0	; 0x8008d0 <SQACAToploadProgramming+0x7>
    1e60:	2b 83       	std	Y+3, r18	; 0x03
    1e62:	20 91 d1 08 	lds	r18, 0x08D1	; 0x8008d1 <SQACAToploadProgramming+0x8>
    1e66:	05 c0       	rjmp	.+10     	; 0x1e72 <sendSQACAVendPrice+0xce>
    1e68:	20 91 ce 08 	lds	r18, 0x08CE	; 0x8008ce <SQACAToploadProgramming+0x5>
    1e6c:	2b 83       	std	Y+3, r18	; 0x03
    1e6e:	20 91 cf 08 	lds	r18, 0x08CF	; 0x8008cf <SQACAToploadProgramming+0x6>
    1e72:	2c 83       	std	Y+4, r18	; 0x04
    1e74:	20 91 e0 08 	lds	r18, 0x08E0	; 0x8008e0 <SQACAToploadProgramming+0x17>
    1e78:	2d 83       	std	Y+5, r18	; 0x05
    1e7a:	20 91 e1 08 	lds	r18, 0x08E1	; 0x8008e1 <SQACAToploadProgramming+0x18>
    1e7e:	4c c0       	rjmp	.+152    	; 0x1f18 <sendSQACAVendPrice+0x174>
    1e80:	2a e0       	ldi	r18, 0x0A	; 10
    1e82:	29 83       	std	Y+1, r18	; 0x01
    1e84:	22 e7       	ldi	r18, 0x72	; 114
    1e86:	2a 83       	std	Y+2, r18	; 0x02
    1e88:	e0 91 f6 0a 	lds	r30, 0x0AF6	; 0x800af6 <SQACAMachineStatus+0x2>
    1e8c:	4e 2f       	mov	r20, r30
    1e8e:	50 e0       	ldi	r21, 0x00	; 0
    1e90:	fa 01       	movw	r30, r20
    1e92:	31 97       	sbiw	r30, 0x01	; 1
    1e94:	e9 30       	cpi	r30, 0x09	; 9
    1e96:	f1 05       	cpc	r31, r1
    1e98:	d0 f5       	brcc	.+116    	; 0x1f0e <sendSQACAVendPrice+0x16a>
    1e9a:	ef 53       	subi	r30, 0x3F	; 63
    1e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9e:	0c 94 f7 2d 	jmp	0x5bee	; 0x5bee <__tablejump2__>
    1ea2:	20 91 b7 08 	lds	r18, 0x08B7	; 0x8008b7 <SQACAFrontloadProgramming+0x15>
    1ea6:	2b 83       	std	Y+3, r18	; 0x03
    1ea8:	20 91 b8 08 	lds	r18, 0x08B8	; 0x8008b8 <SQACAFrontloadProgramming+0x16>
    1eac:	2f c0       	rjmp	.+94     	; 0x1f0c <sendSQACAVendPrice+0x168>
    1eae:	20 91 b5 08 	lds	r18, 0x08B5	; 0x8008b5 <SQACAFrontloadProgramming+0x13>
    1eb2:	2b 83       	std	Y+3, r18	; 0x03
    1eb4:	20 91 b6 08 	lds	r18, 0x08B6	; 0x8008b6 <SQACAFrontloadProgramming+0x14>
    1eb8:	29 c0       	rjmp	.+82     	; 0x1f0c <sendSQACAVendPrice+0x168>
    1eba:	20 91 b3 08 	lds	r18, 0x08B3	; 0x8008b3 <SQACAFrontloadProgramming+0x11>
    1ebe:	2b 83       	std	Y+3, r18	; 0x03
    1ec0:	20 91 b4 08 	lds	r18, 0x08B4	; 0x8008b4 <SQACAFrontloadProgramming+0x12>
    1ec4:	23 c0       	rjmp	.+70     	; 0x1f0c <sendSQACAVendPrice+0x168>
    1ec6:	20 91 b1 08 	lds	r18, 0x08B1	; 0x8008b1 <SQACAFrontloadProgramming+0xf>
    1eca:	2b 83       	std	Y+3, r18	; 0x03
    1ecc:	20 91 b2 08 	lds	r18, 0x08B2	; 0x8008b2 <SQACAFrontloadProgramming+0x10>
    1ed0:	1d c0       	rjmp	.+58     	; 0x1f0c <sendSQACAVendPrice+0x168>
    1ed2:	20 91 af 08 	lds	r18, 0x08AF	; 0x8008af <SQACAFrontloadProgramming+0xd>
    1ed6:	2b 83       	std	Y+3, r18	; 0x03
    1ed8:	20 91 b0 08 	lds	r18, 0x08B0	; 0x8008b0 <SQACAFrontloadProgramming+0xe>
    1edc:	17 c0       	rjmp	.+46     	; 0x1f0c <sendSQACAVendPrice+0x168>
    1ede:	20 91 ad 08 	lds	r18, 0x08AD	; 0x8008ad <SQACAFrontloadProgramming+0xb>
    1ee2:	2b 83       	std	Y+3, r18	; 0x03
    1ee4:	20 91 ae 08 	lds	r18, 0x08AE	; 0x8008ae <SQACAFrontloadProgramming+0xc>
    1ee8:	11 c0       	rjmp	.+34     	; 0x1f0c <sendSQACAVendPrice+0x168>
    1eea:	20 91 ab 08 	lds	r18, 0x08AB	; 0x8008ab <SQACAFrontloadProgramming+0x9>
    1eee:	2b 83       	std	Y+3, r18	; 0x03
    1ef0:	20 91 ac 08 	lds	r18, 0x08AC	; 0x8008ac <SQACAFrontloadProgramming+0xa>
    1ef4:	0b c0       	rjmp	.+22     	; 0x1f0c <sendSQACAVendPrice+0x168>
    1ef6:	20 91 a9 08 	lds	r18, 0x08A9	; 0x8008a9 <SQACAFrontloadProgramming+0x7>
    1efa:	2b 83       	std	Y+3, r18	; 0x03
    1efc:	20 91 aa 08 	lds	r18, 0x08AA	; 0x8008aa <SQACAFrontloadProgramming+0x8>
    1f00:	05 c0       	rjmp	.+10     	; 0x1f0c <sendSQACAVendPrice+0x168>
    1f02:	20 91 a7 08 	lds	r18, 0x08A7	; 0x8008a7 <SQACAFrontloadProgramming+0x5>
    1f06:	2b 83       	std	Y+3, r18	; 0x03
    1f08:	20 91 a8 08 	lds	r18, 0x08A8	; 0x8008a8 <SQACAFrontloadProgramming+0x6>
    1f0c:	2c 83       	std	Y+4, r18	; 0x04
    1f0e:	20 91 bb 08 	lds	r18, 0x08BB	; 0x8008bb <SQACAFrontloadProgramming+0x19>
    1f12:	2d 83       	std	Y+5, r18	; 0x05
    1f14:	20 91 bc 08 	lds	r18, 0x08BC	; 0x8008bc <SQACAFrontloadProgramming+0x1a>
    1f18:	2e 83       	std	Y+6, r18	; 0x06
    1f1a:	31 c0       	rjmp	.+98     	; 0x1f7e <sendSQACAVendPrice+0x1da>
    1f1c:	2a e0       	ldi	r18, 0x0A	; 10
    1f1e:	29 83       	std	Y+1, r18	; 0x01
    1f20:	22 e7       	ldi	r18, 0x72	; 114
    1f22:	2a 83       	std	Y+2, r18	; 0x02
    1f24:	20 91 f6 0a 	lds	r18, 0x0AF6	; 0x800af6 <SQACAMachineStatus+0x2>
    1f28:	24 30       	cpi	r18, 0x04	; 4
    1f2a:	50 f4       	brcc	.+20     	; 0x1f40 <sendSQACAVendPrice+0x19c>
    1f2c:	22 30       	cpi	r18, 0x02	; 2
    1f2e:	c0 f4       	brcc	.+48     	; 0x1f60 <sendSQACAVendPrice+0x1bc>
    1f30:	21 30       	cpi	r18, 0x01	; 1
    1f32:	e1 f4       	brne	.+56     	; 0x1f6c <sendSQACAVendPrice+0x1c8>
    1f34:	20 91 0a 0a 	lds	r18, 0x0A0A	; 0x800a0a <SQACADryerProgramming+0x7>
    1f38:	2b 83       	std	Y+3, r18	; 0x03
    1f3a:	20 91 0b 0a 	lds	r18, 0x0A0B	; 0x800a0b <SQACADryerProgramming+0x8>
    1f3e:	15 c0       	rjmp	.+42     	; 0x1f6a <sendSQACAVendPrice+0x1c6>
    1f40:	24 30       	cpi	r18, 0x04	; 4
    1f42:	41 f0       	breq	.+16     	; 0x1f54 <sendSQACAVendPrice+0x1b0>
    1f44:	25 30       	cpi	r18, 0x05	; 5
    1f46:	91 f4       	brne	.+36     	; 0x1f6c <sendSQACAVendPrice+0x1c8>
    1f48:	20 91 0e 0a 	lds	r18, 0x0A0E	; 0x800a0e <SQACADryerProgramming+0xb>
    1f4c:	2b 83       	std	Y+3, r18	; 0x03
    1f4e:	20 91 0f 0a 	lds	r18, 0x0A0F	; 0x800a0f <SQACADryerProgramming+0xc>
    1f52:	0b c0       	rjmp	.+22     	; 0x1f6a <sendSQACAVendPrice+0x1c6>
    1f54:	20 91 08 0a 	lds	r18, 0x0A08	; 0x800a08 <SQACADryerProgramming+0x5>
    1f58:	2b 83       	std	Y+3, r18	; 0x03
    1f5a:	20 91 09 0a 	lds	r18, 0x0A09	; 0x800a09 <SQACADryerProgramming+0x6>
    1f5e:	05 c0       	rjmp	.+10     	; 0x1f6a <sendSQACAVendPrice+0x1c6>
    1f60:	20 91 0c 0a 	lds	r18, 0x0A0C	; 0x800a0c <SQACADryerProgramming+0x9>
    1f64:	2b 83       	std	Y+3, r18	; 0x03
    1f66:	20 91 0d 0a 	lds	r18, 0x0A0D	; 0x800a0d <SQACADryerProgramming+0xa>
    1f6a:	2c 83       	std	Y+4, r18	; 0x04
    1f6c:	20 91 13 0a 	lds	r18, 0x0A13	; 0x800a13 <SQACADryerProgramming+0x10>
    1f70:	2f 83       	std	Y+7, r18	; 0x07
    1f72:	20 91 14 0a 	lds	r18, 0x0A14	; 0x800a14 <SQACADryerProgramming+0x11>
    1f76:	28 87       	std	Y+8, r18	; 0x08
    1f78:	20 91 15 0a 	lds	r18, 0x0A15	; 0x800a15 <SQACADryerProgramming+0x12>
    1f7c:	29 87       	std	Y+9, r18	; 0x09
    1f7e:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <sendSQDataPacket>
    1f82:	2b 96       	adiw	r28, 0x0b	; 11
    1f84:	0f b6       	in	r0, 0x3f	; 63
    1f86:	f8 94       	cli
    1f88:	de bf       	out	0x3e, r29	; 62
    1f8a:	0f be       	out	0x3f, r0	; 63
    1f8c:	cd bf       	out	0x3d, r28	; 61
    1f8e:	df 91       	pop	r29
    1f90:	cf 91       	pop	r28
    1f92:	08 95       	ret

00001f94 <getSQDataPacket>:
    1f94:	df 92       	push	r13
    1f96:	ef 92       	push	r14
    1f98:	ff 92       	push	r15
    1f9a:	0f 93       	push	r16
    1f9c:	1f 93       	push	r17
    1f9e:	cf 93       	push	r28
    1fa0:	df 93       	push	r29
    1fa2:	7c 01       	movw	r14, r24
    1fa4:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <serial_getchar>
    1fa8:	c8 2f       	mov	r28, r24
    1faa:	82 30       	cpi	r24, 0x02	; 2
    1fac:	09 f5       	brne	.+66     	; 0x1ff0 <getSQDataPacket+0x5c>
    1fae:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <serial_getchar>
    1fb2:	d8 2f       	mov	r29, r24
    1fb4:	f7 01       	movw	r30, r14
    1fb6:	80 81       	ld	r24, Z
    1fb8:	8d 17       	cp	r24, r29
    1fba:	d0 f0       	brcs	.+52     	; 0x1ff0 <getSQDataPacket+0x5c>
    1fbc:	cd 27       	eor	r28, r29
    1fbe:	de 2c       	mov	r13, r14
    1fc0:	87 01       	movw	r16, r14
    1fc2:	80 2f       	mov	r24, r16
    1fc4:	8d 19       	sub	r24, r13
    1fc6:	8d 17       	cp	r24, r29
    1fc8:	38 f4       	brcc	.+14     	; 0x1fd8 <getSQDataPacket+0x44>
    1fca:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <serial_getchar>
    1fce:	f8 01       	movw	r30, r16
    1fd0:	81 93       	st	Z+, r24
    1fd2:	8f 01       	movw	r16, r30
    1fd4:	c8 27       	eor	r28, r24
    1fd6:	f5 cf       	rjmp	.-22     	; 0x1fc2 <getSQDataPacket+0x2e>
    1fd8:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <serial_getchar>
    1fdc:	c8 13       	cpse	r28, r24
    1fde:	05 c0       	rjmp	.+10     	; 0x1fea <getSQDataPacket+0x56>
    1fe0:	86 e0       	ldi	r24, 0x06	; 6
    1fe2:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <serial_putchar>
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	04 c0       	rjmp	.+8      	; 0x1ff2 <getSQDataPacket+0x5e>
    1fea:	85 e1       	ldi	r24, 0x15	; 21
    1fec:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <serial_putchar>
    1ff0:	80 e0       	ldi	r24, 0x00	; 0
    1ff2:	df 91       	pop	r29
    1ff4:	cf 91       	pop	r28
    1ff6:	1f 91       	pop	r17
    1ff8:	0f 91       	pop	r16
    1ffa:	ff 90       	pop	r15
    1ffc:	ef 90       	pop	r14
    1ffe:	df 90       	pop	r13
    2000:	08 95       	ret

00002002 <getSQACAStatusData>:
    2002:	cf 93       	push	r28
    2004:	df 93       	push	r29
    2006:	cd b7       	in	r28, 0x3d	; 61
    2008:	de b7       	in	r29, 0x3e	; 62
    200a:	6a 97       	sbiw	r28, 0x1a	; 26
    200c:	0f b6       	in	r0, 0x3f	; 63
    200e:	f8 94       	cli
    2010:	de bf       	out	0x3e, r29	; 62
    2012:	0f be       	out	0x3f, r0	; 63
    2014:	cd bf       	out	0x3d, r28	; 61
    2016:	80 91 f5 0a 	lds	r24, 0x0AF5	; 0x800af5 <SQACAMachineStatus+0x1>
    201a:	83 30       	cpi	r24, 0x03	; 3
    201c:	09 f0       	breq	.+2      	; 0x2020 <getSQACAStatusData+0x1e>
    201e:	5f c0       	rjmp	.+190    	; 0x20de <getSQACAStatusData+0xdc>
    2020:	2a e1       	ldi	r18, 0x1A	; 26
    2022:	ce 01       	movw	r24, r28
    2024:	01 96       	adiw	r24, 0x01	; 1
    2026:	fc 01       	movw	r30, r24
    2028:	32 2f       	mov	r19, r18
    202a:	11 92       	st	Z+, r1
    202c:	3a 95       	dec	r19
    202e:	e9 f7       	brne	.-6      	; 0x202a <getSQACAStatusData+0x28>
    2030:	29 83       	std	Y+1, r18	; 0x01
    2032:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <getSQDataPacket>
    2036:	88 23       	and	r24, r24
    2038:	09 f4       	brne	.+2      	; 0x203c <getSQACAStatusData+0x3a>
    203a:	51 c0       	rjmp	.+162    	; 0x20de <getSQACAStatusData+0xdc>
    203c:	99 81       	ldd	r25, Y+1	; 0x01
    203e:	91 37       	cpi	r25, 0x71	; 113
    2040:	09 f0       	breq	.+2      	; 0x2044 <getSQACAStatusData+0x42>
    2042:	4d c0       	rjmp	.+154    	; 0x20de <getSQACAStatusData+0xdc>
    2044:	9a 81       	ldd	r25, Y+2	; 0x02
    2046:	90 5e       	subi	r25, 0xE0	; 224
    2048:	90 93 f4 0a 	sts	0x0AF4, r25	; 0x800af4 <SQACAMachineStatus>
    204c:	9b 81       	ldd	r25, Y+3	; 0x03
    204e:	90 93 f6 0a 	sts	0x0AF6, r25	; 0x800af6 <SQACAMachineStatus+0x2>
    2052:	9c 81       	ldd	r25, Y+4	; 0x04
    2054:	90 93 f7 0a 	sts	0x0AF7, r25	; 0x800af7 <SQACAMachineStatus+0x3>
    2058:	9d 81       	ldd	r25, Y+5	; 0x05
    205a:	90 93 f8 0a 	sts	0x0AF8, r25	; 0x800af8 <SQACAMachineStatus+0x4>
    205e:	9e 81       	ldd	r25, Y+6	; 0x06
    2060:	90 93 f9 0a 	sts	0x0AF9, r25	; 0x800af9 <SQACAMachineStatus+0x5>
    2064:	9f 81       	ldd	r25, Y+7	; 0x07
    2066:	90 93 fa 0a 	sts	0x0AFA, r25	; 0x800afa <SQACAMachineStatus+0x6>
    206a:	98 85       	ldd	r25, Y+8	; 0x08
    206c:	90 93 fb 0a 	sts	0x0AFB, r25	; 0x800afb <SQACAMachineStatus+0x7>
    2070:	99 85       	ldd	r25, Y+9	; 0x09
    2072:	90 93 fc 0a 	sts	0x0AFC, r25	; 0x800afc <SQACAMachineStatus+0x8>
    2076:	9a 85       	ldd	r25, Y+10	; 0x0a
    2078:	90 93 fd 0a 	sts	0x0AFD, r25	; 0x800afd <SQACAMachineStatus+0x9>
    207c:	9b 85       	ldd	r25, Y+11	; 0x0b
    207e:	90 93 fe 0a 	sts	0x0AFE, r25	; 0x800afe <SQACAMachineStatus+0xa>
    2082:	9c 85       	ldd	r25, Y+12	; 0x0c
    2084:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <SQACAMachineStatus+0xb>
    2088:	9d 85       	ldd	r25, Y+13	; 0x0d
    208a:	90 93 00 0b 	sts	0x0B00, r25	; 0x800b00 <SQACAMachineStatus+0xc>
    208e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2090:	90 93 01 0b 	sts	0x0B01, r25	; 0x800b01 <SQACAMachineStatus+0xd>
    2094:	9f 85       	ldd	r25, Y+15	; 0x0f
    2096:	90 93 02 0b 	sts	0x0B02, r25	; 0x800b02 <SQACAMachineStatus+0xe>
    209a:	98 89       	ldd	r25, Y+16	; 0x10
    209c:	90 93 03 0b 	sts	0x0B03, r25	; 0x800b03 <SQACAMachineStatus+0xf>
    20a0:	99 89       	ldd	r25, Y+17	; 0x11
    20a2:	90 93 04 0b 	sts	0x0B04, r25	; 0x800b04 <SQACAMachineStatus+0x10>
    20a6:	9a 89       	ldd	r25, Y+18	; 0x12
    20a8:	90 93 05 0b 	sts	0x0B05, r25	; 0x800b05 <SQACAMachineStatus+0x11>
    20ac:	9b 89       	ldd	r25, Y+19	; 0x13
    20ae:	90 93 06 0b 	sts	0x0B06, r25	; 0x800b06 <SQACAMachineStatus+0x12>
    20b2:	9c 89       	ldd	r25, Y+20	; 0x14
    20b4:	90 93 07 0b 	sts	0x0B07, r25	; 0x800b07 <SQACAMachineStatus+0x13>
    20b8:	9d 89       	ldd	r25, Y+21	; 0x15
    20ba:	90 93 08 0b 	sts	0x0B08, r25	; 0x800b08 <SQACAMachineStatus+0x14>
    20be:	9e 89       	ldd	r25, Y+22	; 0x16
    20c0:	90 93 09 0b 	sts	0x0B09, r25	; 0x800b09 <SQACAMachineStatus+0x15>
    20c4:	9f 89       	ldd	r25, Y+23	; 0x17
    20c6:	90 93 0a 0b 	sts	0x0B0A, r25	; 0x800b0a <SQACAMachineStatus+0x16>
    20ca:	98 8d       	ldd	r25, Y+24	; 0x18
    20cc:	90 93 0b 0b 	sts	0x0B0B, r25	; 0x800b0b <SQACAMachineStatus+0x17>
    20d0:	99 8d       	ldd	r25, Y+25	; 0x19
    20d2:	90 93 0c 0b 	sts	0x0B0C, r25	; 0x800b0c <SQACAMachineStatus+0x18>
    20d6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    20d8:	90 93 0d 0b 	sts	0x0B0D, r25	; 0x800b0d <SQACAMachineStatus+0x19>
    20dc:	01 c0       	rjmp	.+2      	; 0x20e0 <getSQACAStatusData+0xde>
    20de:	80 e0       	ldi	r24, 0x00	; 0
    20e0:	6a 96       	adiw	r28, 0x1a	; 26
    20e2:	0f b6       	in	r0, 0x3f	; 63
    20e4:	f8 94       	cli
    20e6:	de bf       	out	0x3e, r29	; 62
    20e8:	0f be       	out	0x3f, r0	; 63
    20ea:	cd bf       	out	0x3d, r28	; 61
    20ec:	df 91       	pop	r29
    20ee:	cf 91       	pop	r28
    20f0:	08 95       	ret

000020f2 <SQACAMachineStatusSequence>:
    20f2:	1f 93       	push	r17
    20f4:	cf 93       	push	r28
    20f6:	df 93       	push	r29
    20f8:	00 d0       	rcall	.+0      	; 0x20fa <SQACAMachineStatusSequence+0x8>
    20fa:	cd b7       	in	r28, 0x3d	; 61
    20fc:	de b7       	in	r29, 0x3e	; 62
    20fe:	1a 82       	std	Y+2, r1	; 0x02
    2100:	19 82       	std	Y+1, r1	; 0x01
    2102:	80 91 f5 0a 	lds	r24, 0x0AF5	; 0x800af5 <SQACAMachineStatus+0x1>
    2106:	83 30       	cpi	r24, 0x03	; 3
    2108:	21 f4       	brne	.+8      	; 0x2112 <SQACAMachineStatusSequence+0x20>
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	89 83       	std	Y+1, r24	; 0x01
    210e:	80 e7       	ldi	r24, 0x70	; 112
    2110:	8a 83       	std	Y+2, r24	; 0x02
    2112:	ce 01       	movw	r24, r28
    2114:	01 96       	adiw	r24, 0x01	; 1
    2116:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <sendSQDataPacket>
    211a:	81 11       	cpse	r24, r1
    211c:	02 c0       	rjmp	.+4      	; 0x2122 <SQACAMachineStatusSequence+0x30>
    211e:	80 e0       	ldi	r24, 0x00	; 0
    2120:	15 c0       	rjmp	.+42     	; 0x214c <SQACAMachineStatusSequence+0x5a>
    2122:	0e 94 01 10 	call	0x2002	; 0x2002 <getSQACAStatusData>
    2126:	18 2f       	mov	r17, r24
    2128:	88 23       	and	r24, r24
    212a:	c9 f3       	breq	.-14     	; 0x211e <SQACAMachineStatusSequence+0x2c>
    212c:	90 91 35 09 	lds	r25, 0x0935	; 0x800935 <ReaderStateFlag>
    2130:	91 fb       	bst	r25, 1
    2132:	88 27       	eor	r24, r24
    2134:	80 f9       	bld	r24, 0
    2136:	91 fd       	sbrc	r25, 1
    2138:	09 c0       	rjmp	.+18     	; 0x214c <SQACAMachineStatusSequence+0x5a>
    213a:	8f ed       	ldi	r24, 0xDF	; 223
    213c:	9e e2       	ldi	r25, 0x2E	; 46
    213e:	01 97       	sbiw	r24, 0x01	; 1
    2140:	f1 f7       	brne	.-4      	; 0x213e <SQACAMachineStatusSequence+0x4c>
    2142:	00 c0       	rjmp	.+0      	; 0x2144 <SQACAMachineStatusSequence+0x52>
    2144:	00 00       	nop
    2146:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <sendSQACAVendPrice>
    214a:	81 2f       	mov	r24, r17
    214c:	0f 90       	pop	r0
    214e:	0f 90       	pop	r0
    2150:	df 91       	pop	r29
    2152:	cf 91       	pop	r28
    2154:	1f 91       	pop	r17
    2156:	08 95       	ret

00002158 <getSQACAInitData>:
    2158:	cf 93       	push	r28
    215a:	df 93       	push	r29
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
    2160:	6f 97       	sbiw	r28, 0x1f	; 31
    2162:	0f b6       	in	r0, 0x3f	; 63
    2164:	f8 94       	cli
    2166:	de bf       	out	0x3e, r29	; 62
    2168:	0f be       	out	0x3f, r0	; 63
    216a:	cd bf       	out	0x3d, r28	; 61
    216c:	2f e1       	ldi	r18, 0x1F	; 31
    216e:	ce 01       	movw	r24, r28
    2170:	01 96       	adiw	r24, 0x01	; 1
    2172:	fc 01       	movw	r30, r24
    2174:	32 2f       	mov	r19, r18
    2176:	11 92       	st	Z+, r1
    2178:	3a 95       	dec	r19
    217a:	e9 f7       	brne	.-6      	; 0x2176 <getSQACAInitData+0x1e>
    217c:	29 83       	std	Y+1, r18	; 0x01
    217e:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <getSQDataPacket>
    2182:	88 23       	and	r24, r24
    2184:	79 f0       	breq	.+30     	; 0x21a4 <getSQACAInitData+0x4c>
    2186:	9a 81       	ldd	r25, Y+2	; 0x02
    2188:	90 93 c9 08 	sts	0x08C9, r25	; 0x8008c9 <SQACAToploadProgramming>
    218c:	9b 81       	ldd	r25, Y+3	; 0x03
    218e:	90 93 ca 08 	sts	0x08CA, r25	; 0x8008ca <SQACAToploadProgramming+0x1>
    2192:	9c 81       	ldd	r25, Y+4	; 0x04
    2194:	90 93 cb 08 	sts	0x08CB, r25	; 0x8008cb <SQACAToploadProgramming+0x2>
    2198:	9f 81       	ldd	r25, Y+7	; 0x07
    219a:	90 93 fa 08 	sts	0x08FA, r25	; 0x8008fa <SQACAToploadProgramming+0x31>
    219e:	99 89       	ldd	r25, Y+17	; 0x11
    21a0:	90 93 fb 08 	sts	0x08FB, r25	; 0x8008fb <SQACAToploadProgramming+0x32>
    21a4:	6f 96       	adiw	r28, 0x1f	; 31
    21a6:	0f b6       	in	r0, 0x3f	; 63
    21a8:	f8 94       	cli
    21aa:	de bf       	out	0x3e, r29	; 62
    21ac:	0f be       	out	0x3f, r0	; 63
    21ae:	cd bf       	out	0x3d, r28	; 61
    21b0:	df 91       	pop	r29
    21b2:	cf 91       	pop	r28
    21b4:	08 95       	ret

000021b6 <IsACA>:
    21b6:	cf 93       	push	r28
    21b8:	df 93       	push	r29
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
    21be:	2a 97       	sbiw	r28, 0x0a	; 10
    21c0:	0f b6       	in	r0, 0x3f	; 63
    21c2:	f8 94       	cli
    21c4:	de bf       	out	0x3e, r29	; 62
    21c6:	0f be       	out	0x3f, r0	; 63
    21c8:	cd bf       	out	0x3d, r28	; 61
    21ca:	8a e0       	ldi	r24, 0x0A	; 10
    21cc:	ef e2       	ldi	r30, 0x2F	; 47
    21ce:	f2 e0       	ldi	r31, 0x02	; 2
    21d0:	de 01       	movw	r26, r28
    21d2:	11 96       	adiw	r26, 0x01	; 1
    21d4:	01 90       	ld	r0, Z+
    21d6:	0d 92       	st	X+, r0
    21d8:	8a 95       	dec	r24
    21da:	e1 f7       	brne	.-8      	; 0x21d4 <IsACA+0x1e>
    21dc:	89 e0       	ldi	r24, 0x09	; 9
    21de:	89 83       	std	Y+1, r24	; 0x01
    21e0:	83 e7       	ldi	r24, 0x73	; 115
    21e2:	8a 83       	std	Y+2, r24	; 0x02
    21e4:	1e 82       	std	Y+6, r1	; 0x06
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	8f 83       	std	Y+7, r24	; 0x07
    21ea:	80 e1       	ldi	r24, 0x10	; 16
    21ec:	88 87       	std	Y+8, r24	; 0x08
    21ee:	19 86       	std	Y+9, r1	; 0x09
    21f0:	82 e0       	ldi	r24, 0x02	; 2
    21f2:	8a 87       	std	Y+10, r24	; 0x0a
    21f4:	ce 01       	movw	r24, r28
    21f6:	01 96       	adiw	r24, 0x01	; 1
    21f8:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <sendSQDataPacket>
    21fc:	81 11       	cpse	r24, r1
    21fe:	0e 94 ac 10 	call	0x2158	; 0x2158 <getSQACAInitData>
    2202:	2a 96       	adiw	r28, 0x0a	; 10
    2204:	0f b6       	in	r0, 0x3f	; 63
    2206:	f8 94       	cli
    2208:	de bf       	out	0x3e, r29	; 62
    220a:	0f be       	out	0x3f, r0	; 63
    220c:	cd bf       	out	0x3d, r28	; 61
    220e:	df 91       	pop	r29
    2210:	cf 91       	pop	r28
    2212:	08 95       	ret

00002214 <waitSQStartKey>:
    2214:	80 91 f5 0a 	lds	r24, 0x0AF5	; 0x800af5 <SQACAMachineStatus+0x1>
    2218:	83 30       	cpi	r24, 0x03	; 3
    221a:	59 f4       	brne	.+22     	; 0x2232 <waitSQStartKey+0x1e>
    221c:	80 91 f9 0a 	lds	r24, 0x0AF9	; 0x800af9 <SQACAMachineStatus+0x5>
    2220:	80 fd       	sbrc	r24, 0
    2222:	02 c0       	rjmp	.+4      	; 0x2228 <waitSQStartKey+0x14>
    2224:	88 30       	cpi	r24, 0x08	; 8
    2226:	29 f4       	brne	.+10     	; 0x2232 <waitSQStartKey+0x1e>
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	90 91 fa 0a 	lds	r25, 0x0AFA	; 0x800afa <SQACAMachineStatus+0x6>
    222e:	90 32       	cpi	r25, 0x20	; 32
    2230:	09 f0       	breq	.+2      	; 0x2234 <waitSQStartKey+0x20>
    2232:	80 e0       	ldi	r24, 0x00	; 0
    2234:	08 95       	ret

00002236 <isSQCycleRunning>:
    2236:	80 91 f9 0a 	lds	r24, 0x0AF9	; 0x800af9 <SQACAMachineStatus+0x5>
    223a:	88 30       	cpi	r24, 0x08	; 8
    223c:	39 f0       	breq	.+14     	; 0x224c <isSQCycleRunning+0x16>
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	90 91 fa 0a 	lds	r25, 0x0AFA	; 0x800afa <SQACAMachineStatus+0x6>
    2244:	98 30       	cpi	r25, 0x08	; 8
    2246:	19 f0       	breq	.+6      	; 0x224e <isSQCycleRunning+0x18>
    2248:	80 e0       	ldi	r24, 0x00	; 0
    224a:	01 c0       	rjmp	.+2      	; 0x224e <isSQCycleRunning+0x18>
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	81 70       	andi	r24, 0x01	; 1
    2250:	08 95       	ret

00002252 <sendSQCashCardRemoved>:
    2252:	cf 93       	push	r28
    2254:	df 93       	push	r29
    2256:	cd b7       	in	r28, 0x3d	; 61
    2258:	de b7       	in	r29, 0x3e	; 62
    225a:	27 97       	sbiw	r28, 0x07	; 7
    225c:	0f b6       	in	r0, 0x3f	; 63
    225e:	f8 94       	cli
    2260:	de bf       	out	0x3e, r29	; 62
    2262:	0f be       	out	0x3f, r0	; 63
    2264:	cd bf       	out	0x3d, r28	; 61
    2266:	ce 01       	movw	r24, r28
    2268:	01 96       	adiw	r24, 0x01	; 1
    226a:	27 e0       	ldi	r18, 0x07	; 7
    226c:	fc 01       	movw	r30, r24
    226e:	11 92       	st	Z+, r1
    2270:	2a 95       	dec	r18
    2272:	e9 f7       	brne	.-6      	; 0x226e <sendSQCashCardRemoved+0x1c>
    2274:	40 91 f5 0a 	lds	r20, 0x0AF5	; 0x800af5 <SQACAMachineStatus+0x1>
    2278:	20 91 31 09 	lds	r18, 0x0931	; 0x800931 <CurrentAccount+0x7>
    227c:	30 91 32 09 	lds	r19, 0x0932	; 0x800932 <CurrentAccount+0x8>
    2280:	43 30       	cpi	r20, 0x03	; 3
    2282:	31 f4       	brne	.+12     	; 0x2290 <sendSQCashCardRemoved+0x3e>
    2284:	49 83       	std	Y+1, r20	; 0x01
    2286:	41 e4       	ldi	r20, 0x41	; 65
    2288:	4a 83       	std	Y+2, r20	; 0x02
    228a:	3b 83       	std	Y+3, r19	; 0x03
    228c:	2c 83       	std	Y+4, r18	; 0x04
    228e:	0c c0       	rjmp	.+24     	; 0x22a8 <sendSQCashCardRemoved+0x56>
    2290:	45 e0       	ldi	r20, 0x05	; 5
    2292:	49 83       	std	Y+1, r20	; 0x01
    2294:	41 e4       	ldi	r20, 0x41	; 65
    2296:	4a 83       	std	Y+2, r20	; 0x02
    2298:	3b 83       	std	Y+3, r19	; 0x03
    229a:	2c 83       	std	Y+4, r18	; 0x04
    229c:	20 91 ce 08 	lds	r18, 0x08CE	; 0x8008ce <SQACAToploadProgramming+0x5>
    22a0:	2d 83       	std	Y+5, r18	; 0x05
    22a2:	20 91 cf 08 	lds	r18, 0x08CF	; 0x8008cf <SQACAToploadProgramming+0x6>
    22a6:	2e 83       	std	Y+6, r18	; 0x06
    22a8:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <sendSQDataPacket>
    22ac:	27 96       	adiw	r28, 0x07	; 7
    22ae:	0f b6       	in	r0, 0x3f	; 63
    22b0:	f8 94       	cli
    22b2:	de bf       	out	0x3e, r29	; 62
    22b4:	0f be       	out	0x3f, r0	; 63
    22b6:	cd bf       	out	0x3d, r28	; 61
    22b8:	df 91       	pop	r29
    22ba:	cf 91       	pop	r28
    22bc:	08 95       	ret

000022be <sendSQACAMimicQuantumVending>:
    22be:	cf 93       	push	r28
    22c0:	df 93       	push	r29
    22c2:	00 d0       	rcall	.+0      	; 0x22c4 <sendSQACAMimicQuantumVending+0x6>
    22c4:	00 d0       	rcall	.+0      	; 0x22c6 <sendSQACAMimicQuantumVending+0x8>
    22c6:	cd b7       	in	r28, 0x3d	; 61
    22c8:	de b7       	in	r29, 0x3e	; 62
    22ca:	19 82       	std	Y+1, r1	; 0x01
    22cc:	1a 82       	std	Y+2, r1	; 0x02
    22ce:	1b 82       	std	Y+3, r1	; 0x03
    22d0:	1c 82       	std	Y+4, r1	; 0x04
    22d2:	80 91 f5 0a 	lds	r24, 0x0AF5	; 0x800af5 <SQACAMachineStatus+0x1>
    22d6:	83 30       	cpi	r24, 0x03	; 3
    22d8:	39 f4       	brne	.+14     	; 0x22e8 <sendSQACAMimicQuantumVending+0x2a>
    22da:	89 83       	std	Y+1, r24	; 0x01
    22dc:	84 e6       	ldi	r24, 0x64	; 100
    22de:	8a 83       	std	Y+2, r24	; 0x02
    22e0:	8e e1       	ldi	r24, 0x1E	; 30
    22e2:	8b 83       	std	Y+3, r24	; 0x03
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	8c 83       	std	Y+4, r24	; 0x04
    22e8:	ce 01       	movw	r24, r28
    22ea:	01 96       	adiw	r24, 0x01	; 1
    22ec:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <sendSQDataPacket>
    22f0:	0f 90       	pop	r0
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	0f 90       	pop	r0
    22f8:	df 91       	pop	r29
    22fa:	cf 91       	pop	r28
    22fc:	08 95       	ret

000022fe <SQACAMimicQuantumSequence>:
    22fe:	81 30       	cpi	r24, 0x01	; 1
    2300:	11 f0       	breq	.+4      	; 0x2306 <SQACAMimicQuantumSequence+0x8>
    2302:	80 e0       	ldi	r24, 0x00	; 0
    2304:	08 95       	ret
    2306:	0e 94 5f 11 	call	0x22be	; 0x22be <sendSQACAMimicQuantumVending>
    230a:	88 23       	and	r24, r24
    230c:	d1 f3       	breq	.-12     	; 0x2302 <SQACAMimicQuantumSequence+0x4>
    230e:	90 e8       	ldi	r25, 0x80	; 128
    2310:	90 93 33 09 	sts	0x0933, r25	; 0x800933 <CurrentAccount+0x9>
    2314:	08 95       	ret

00002316 <sendSQACAVendingTransactions>:
    2316:	cf 93       	push	r28
    2318:	df 93       	push	r29
    231a:	cd b7       	in	r28, 0x3d	; 61
    231c:	de b7       	in	r29, 0x3e	; 62
    231e:	27 97       	sbiw	r28, 0x07	; 7
    2320:	0f b6       	in	r0, 0x3f	; 63
    2322:	f8 94       	cli
    2324:	de bf       	out	0x3e, r29	; 62
    2326:	0f be       	out	0x3f, r0	; 63
    2328:	cd bf       	out	0x3d, r28	; 61
    232a:	ce 01       	movw	r24, r28
    232c:	01 96       	adiw	r24, 0x01	; 1
    232e:	27 e0       	ldi	r18, 0x07	; 7
    2330:	fc 01       	movw	r30, r24
    2332:	11 92       	st	Z+, r1
    2334:	2a 95       	dec	r18
    2336:	e9 f7       	brne	.-6      	; 0x2332 <sendSQACAVendingTransactions+0x1c>
    2338:	26 e0       	ldi	r18, 0x06	; 6
    233a:	29 83       	std	Y+1, r18	; 0x01
    233c:	2a e6       	ldi	r18, 0x6A	; 106
    233e:	2a 83       	std	Y+2, r18	; 0x02
    2340:	e4 ef       	ldi	r30, 0xF4	; 244
    2342:	fa e0       	ldi	r31, 0x0A	; 10
    2344:	33 85       	ldd	r19, Z+11	; 0x0b
    2346:	3b 83       	std	Y+3, r19	; 0x03
    2348:	24 85       	ldd	r18, Z+12	; 0x0c
    234a:	2c 83       	std	Y+4, r18	; 0x04
    234c:	3d 83       	std	Y+5, r19	; 0x05
    234e:	2e 83       	std	Y+6, r18	; 0x06
    2350:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <sendSQDataPacket>
    2354:	27 96       	adiw	r28, 0x07	; 7
    2356:	0f b6       	in	r0, 0x3f	; 63
    2358:	f8 94       	cli
    235a:	de bf       	out	0x3e, r29	; 62
    235c:	0f be       	out	0x3f, r0	; 63
    235e:	cd bf       	out	0x3d, r28	; 61
    2360:	df 91       	pop	r29
    2362:	cf 91       	pop	r28
    2364:	08 95       	ret

00002366 <sendSQDisplayCommand>:
    2366:	cf 92       	push	r12
    2368:	ef 92       	push	r14
    236a:	0f 93       	push	r16
    236c:	cf 93       	push	r28
    236e:	df 93       	push	r29
    2370:	cd b7       	in	r28, 0x3d	; 61
    2372:	de b7       	in	r29, 0x3e	; 62
    2374:	29 97       	sbiw	r28, 0x09	; 9
    2376:	0f b6       	in	r0, 0x3f	; 63
    2378:	f8 94       	cli
    237a:	de bf       	out	0x3e, r29	; 62
    237c:	0f be       	out	0x3f, r0	; 63
    237e:	cd bf       	out	0x3d, r28	; 61
    2380:	fe 01       	movw	r30, r28
    2382:	31 96       	adiw	r30, 0x01	; 1
    2384:	99 e0       	ldi	r25, 0x09	; 9
    2386:	df 01       	movw	r26, r30
    2388:	1d 92       	st	X+, r1
    238a:	9a 95       	dec	r25
    238c:	e9 f7       	brne	.-6      	; 0x2388 <sendSQDisplayCommand+0x22>
    238e:	98 e0       	ldi	r25, 0x08	; 8
    2390:	99 83       	std	Y+1, r25	; 0x01
    2392:	90 e6       	ldi	r25, 0x60	; 96
    2394:	9a 83       	std	Y+2, r25	; 0x02
    2396:	8b 83       	std	Y+3, r24	; 0x03
    2398:	6c 83       	std	Y+4, r22	; 0x04
    239a:	4d 83       	std	Y+5, r20	; 0x05
    239c:	2e 83       	std	Y+6, r18	; 0x06
    239e:	0f 83       	std	Y+7, r16	; 0x07
    23a0:	e8 86       	std	Y+8, r14	; 0x08
    23a2:	c9 86       	std	Y+9, r12	; 0x09
    23a4:	cf 01       	movw	r24, r30
    23a6:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <sendSQDataPacket>
    23aa:	29 96       	adiw	r28, 0x09	; 9
    23ac:	0f b6       	in	r0, 0x3f	; 63
    23ae:	f8 94       	cli
    23b0:	de bf       	out	0x3e, r29	; 62
    23b2:	0f be       	out	0x3f, r0	; 63
    23b4:	cd bf       	out	0x3d, r28	; 61
    23b6:	df 91       	pop	r29
    23b8:	cf 91       	pop	r28
    23ba:	0f 91       	pop	r16
    23bc:	ef 90       	pop	r14
    23be:	cf 90       	pop	r12
    23c0:	08 95       	ret

000023c2 <displaySQReaderVersion>:
    23c2:	cf 92       	push	r12
    23c4:	ef 92       	push	r14
    23c6:	0f 93       	push	r16
    23c8:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <msgNumber+0x1>
    23cc:	85 e0       	ldi	r24, 0x05	; 5
    23ce:	c8 2e       	mov	r12, r24
    23d0:	e1 2c       	mov	r14, r1
    23d2:	00 e0       	ldi	r16, 0x00	; 0
    23d4:	20 91 0d 02 	lds	r18, 0x020D	; 0x80020d <msgNumber>
    23d8:	46 2f       	mov	r20, r22
    23da:	80 e5       	ldi	r24, 0x50	; 80
    23dc:	0e 94 b3 11 	call	0x2366	; 0x2366 <sendSQDisplayCommand>
    23e0:	88 23       	and	r24, r24
    23e2:	49 f0       	breq	.+18     	; 0x23f6 <displaySQReaderVersion+0x34>
    23e4:	2f ef       	ldi	r18, 0xFF	; 255
    23e6:	37 ea       	ldi	r19, 0xA7	; 167
    23e8:	91 e6       	ldi	r25, 0x61	; 97
    23ea:	21 50       	subi	r18, 0x01	; 1
    23ec:	30 40       	sbci	r19, 0x00	; 0
    23ee:	90 40       	sbci	r25, 0x00	; 0
    23f0:	e1 f7       	brne	.-8      	; 0x23ea <displaySQReaderVersion+0x28>
    23f2:	00 c0       	rjmp	.+0      	; 0x23f4 <displaySQReaderVersion+0x32>
    23f4:	00 00       	nop
    23f6:	0f 91       	pop	r16
    23f8:	ef 90       	pop	r14
    23fa:	cf 90       	pop	r12
    23fc:	08 95       	ret

000023fe <displaySQCardError>:
    23fe:	cf 92       	push	r12
    2400:	ef 92       	push	r14
    2402:	0f 93       	push	r16
    2404:	cf 93       	push	r28
    2406:	94 e0       	ldi	r25, 0x04	; 4
    2408:	c9 2e       	mov	r12, r25
    240a:	e1 2c       	mov	r14, r1
    240c:	00 e0       	ldi	r16, 0x00	; 0
    240e:	2e e5       	ldi	r18, 0x5E	; 94
    2410:	40 e5       	ldi	r20, 0x50	; 80
    2412:	67 e7       	ldi	r22, 0x77	; 119
    2414:	89 e3       	ldi	r24, 0x39	; 57
    2416:	0e 94 b3 11 	call	0x2366	; 0x2366 <sendSQDisplayCommand>
    241a:	c8 2f       	mov	r28, r24
    241c:	88 23       	and	r24, r24
    241e:	e9 f0       	breq	.+58     	; 0x245a <displaySQCardError+0x5c>
    2420:	2f ef       	ldi	r18, 0xFF	; 255
    2422:	37 ea       	ldi	r19, 0xA7	; 167
    2424:	81 e6       	ldi	r24, 0x61	; 97
    2426:	21 50       	subi	r18, 0x01	; 1
    2428:	30 40       	sbci	r19, 0x00	; 0
    242a:	80 40       	sbci	r24, 0x00	; 0
    242c:	e1 f7       	brne	.-8      	; 0x2426 <displaySQCardError+0x28>
    242e:	00 c0       	rjmp	.+0      	; 0x2430 <displaySQCardError+0x32>
    2430:	00 00       	nop
    2432:	83 e0       	ldi	r24, 0x03	; 3
    2434:	c8 2e       	mov	r12, r24
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	40 e5       	ldi	r20, 0x50	; 80
    243a:	60 e5       	ldi	r22, 0x50	; 80
    243c:	89 e7       	ldi	r24, 0x79	; 121
    243e:	0e 94 b3 11 	call	0x2366	; 0x2366 <sendSQDisplayCommand>
    2442:	88 23       	and	r24, r24
    2444:	51 f0       	breq	.+20     	; 0x245a <displaySQCardError+0x5c>
    2446:	9f ef       	ldi	r25, 0xFF	; 255
    2448:	27 ea       	ldi	r18, 0xA7	; 167
    244a:	31 e6       	ldi	r19, 0x61	; 97
    244c:	91 50       	subi	r25, 0x01	; 1
    244e:	20 40       	sbci	r18, 0x00	; 0
    2450:	30 40       	sbci	r19, 0x00	; 0
    2452:	e1 f7       	brne	.-8      	; 0x244c <displaySQCardError+0x4e>
    2454:	00 c0       	rjmp	.+0      	; 0x2456 <displaySQCardError+0x58>
    2456:	00 00       	nop
    2458:	c8 2f       	mov	r28, r24
    245a:	8c 2f       	mov	r24, r28
    245c:	cf 91       	pop	r28
    245e:	0f 91       	pop	r16
    2460:	ef 90       	pop	r14
    2462:	cf 90       	pop	r12
    2464:	08 95       	ret

00002466 <cardRemoved>:
    2466:	81 30       	cpi	r24, 0x01	; 1
    2468:	11 f0       	breq	.+4      	; 0x246e <cardRemoved+0x8>
    246a:	80 e0       	ldi	r24, 0x00	; 0
    246c:	08 95       	ret
    246e:	0e 94 29 11 	call	0x2252	; 0x2252 <sendSQCashCardRemoved>
    2472:	88 23       	and	r24, r24
    2474:	d1 f3       	breq	.-12     	; 0x246a <cardRemoved+0x4>
    2476:	10 92 33 09 	sts	0x0933, r1	; 0x800933 <CurrentAccount+0x9>
    247a:	08 95       	ret

0000247c <isMachineCycleRunning>:
	deviceStatus.deviceType[1] = SQACAMachineStatus.MachineType[1];
}

bool isMachineCycleRunning()
{
	return (isSQCycleRunning() );
    247c:	0c 94 1b 11 	jmp	0x2236	; 0x2236 <isSQCycleRunning>

00002480 <waitForMachineStartKey>:
}
bool waitForMachineStartKey()
{

	return waitSQStartKey();
    2480:	0c 94 0a 11 	jmp	0x2214	; 0x2214 <waitSQStartKey>

00002484 <SQACAMachineStatusCommSequence>:
price to be written to the display and used in a vending transaction. The ucDeviceStateFlag is set to be online.
*/
void SQACAMachineStatusCommSequence(void)
{
	
	if( SQACAMachineStatusSequence() )
    2484:	0e 94 79 10 	call	0x20f2	; 0x20f2 <SQACAMachineStatusSequence>
    2488:	88 23       	and	r24, r24
    248a:	19 f0       	breq	.+6      	; 0x2492 <SQACAMachineStatusCommSequence+0xe>
	{
		//set machine status ok flag;
		ucDeviceStateFlag = MACHINE_STATUS_ON; //machine status has been done
    248c:	82 e0       	ldi	r24, 0x02	; 2
    248e:	80 93 b9 09 	sts	0x09B9, r24	; 0x8009b9 <ucDeviceStateFlag>
    2492:	08 95       	ret

00002494 <SQACAInitializationSequence>:

@ingroup pposreader
*/
void SQACAInitializationSequence(void)
{
	if( IsACA() )
    2494:	0e 94 db 10 	call	0x21b6	; 0x21b6 <IsACA>
    2498:	88 23       	and	r24, r24
    249a:	19 f0       	breq	.+6      	; 0x24a2 <SQACAInitializationSequence+0xe>
	{
		//set q flag
		SQACAMachineStatus.MachineType[1] = ACA_SERIES;
    249c:	83 e0       	ldi	r24, 0x03	; 3
    249e:	80 93 f5 0a 	sts	0x0AF5, r24	; 0x800af5 <SQACAMachineStatus+0x1>
    24a2:	8f e3       	ldi	r24, 0x3F	; 63
    24a4:	9f e1       	ldi	r25, 0x1F	; 31
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	f1 f7       	brne	.-4      	; 0x24a6 <SQACAInitializationSequence+0x12>
    24aa:	00 c0       	rjmp	.+0      	; 0x24ac <SQACAInitializationSequence+0x18>
    24ac:	00 00       	nop

	}
	

	_delay_ms(2);
	SQACAMachineStatusCommSequence();
    24ae:	0e 94 42 12 	call	0x2484	; 0x2484 <SQACAMachineStatusCommSequence>
	deviceStatus.deviceType[0] = SQACAMachineStatus.MachineType[0];
    24b2:	80 91 f4 0a 	lds	r24, 0x0AF4	; 0x800af4 <SQACAMachineStatus>
    24b6:	80 93 f0 0a 	sts	0x0AF0, r24	; 0x800af0 <deviceStatus>
	deviceStatus.deviceType[1] = SQACAMachineStatus.MachineType[1];
    24ba:	80 91 f5 0a 	lds	r24, 0x0AF5	; 0x800af5 <SQACAMachineStatus+0x1>
    24be:	80 93 f1 0a 	sts	0x0AF1, r24	; 0x800af1 <deviceStatus+0x1>
    24c2:	08 95       	ret

000024c4 <getSQReaderMachineSetup>:
	}
	
}

bool getSQReaderMachineSetup(void)
{
    24c4:	cf 93       	push	r28
    24c6:	df 93       	push	r29
    24c8:	cd b7       	in	r28, 0x3d	; 61
    24ca:	de b7       	in	r29, 0x3e	; 62
    24cc:	ec 97       	sbiw	r28, 0x3c	; 60
    24ce:	0f b6       	in	r0, 0x3f	; 63
    24d0:	f8 94       	cli
    24d2:	de bf       	out	0x3e, r29	; 62
    24d4:	0f be       	out	0x3f, r0	; 63
    24d6:	cd bf       	out	0x3d, r28	; 61
	u8 temp[ACA_MAX_PACKET_SIZE] = {0};	
    24d8:	fe 01       	movw	r30, r28
    24da:	31 96       	adiw	r30, 0x01	; 1
    24dc:	8c e3       	ldi	r24, 0x3C	; 60
    24de:	df 01       	movw	r26, r30
    24e0:	1d 92       	st	X+, r1
    24e2:	8a 95       	dec	r24
    24e4:	e9 f7       	brne	.-6      	; 0x24e0 <getSQReaderMachineSetup+0x1c>
	
switch( deviceStatus.deviceType[0] )
    24e6:	90 91 f0 0a 	lds	r25, 0x0AF0	; 0x800af0 <deviceStatus>
    24ea:	92 32       	cpi	r25, 0x22	; 34
    24ec:	09 f4       	brne	.+2      	; 0x24f0 <getSQReaderMachineSetup+0x2c>
    24ee:	98 c0       	rjmp	.+304    	; 0x2620 <getSQReaderMachineSetup+0x15c>
    24f0:	99 32       	cpi	r25, 0x29	; 41
    24f2:	09 f4       	brne	.+2      	; 0x24f6 <getSQReaderMachineSetup+0x32>
    24f4:	04 c1       	rjmp	.+520    	; 0x26fe <getSQReaderMachineSetup+0x23a>
    24f6:	91 32       	cpi	r25, 0x21	; 33
    24f8:	09 f0       	breq	.+2      	; 0x24fc <getSQReaderMachineSetup+0x38>
    24fa:	70 c1       	rjmp	.+736    	; 0x27dc <getSQReaderMachineSetup+0x318>
	{
		case PROGRAMMING_DATA_TOPLOAD:

			temp[0] = QTL_PROGRAMMING_DATA_SIZE;					//50 bytes
    24fc:	82 e3       	ldi	r24, 0x32	; 50
    24fe:	89 83       	std	Y+1, r24	; 0x01
			temp[1] = deviceStatus.deviceType[0];					//0x21 (TLW Prog)
    2500:	9a 83       	std	Y+2, r25	; 0x02
			temp[2] = SQACAToploadProgramming.ProductByte[0];
    2502:	80 91 c9 08 	lds	r24, 0x08C9	; 0x8008c9 <SQACAToploadProgramming>
    2506:	8b 83       	std	Y+3, r24	; 0x03
			temp[3] = SQACAToploadProgramming.ProductByte[1];
    2508:	80 91 ca 08 	lds	r24, 0x08CA	; 0x8008ca <SQACAToploadProgramming+0x1>
    250c:	8c 83       	std	Y+4, r24	; 0x04
			temp[4] = SQACAToploadProgramming.ProductByte[2];
    250e:	80 91 cb 08 	lds	r24, 0x08CB	; 0x8008cb <SQACAToploadProgramming+0x2>
    2512:	8d 83       	std	Y+5, r24	; 0x05
			temp[5] = SQACAToploadProgramming.ProductByte[3];
    2514:	80 91 cc 08 	lds	r24, 0x08CC	; 0x8008cc <SQACAToploadProgramming+0x3>
    2518:	8e 83       	std	Y+6, r24	; 0x06
			temp[6] = SQACAToploadProgramming.ProductByte[4];
    251a:	80 91 cd 08 	lds	r24, 0x08CD	; 0x8008cd <SQACAToploadProgramming+0x4>
    251e:	8f 83       	std	Y+7, r24	; 0x07
			temp[7] = SQACAToploadProgramming.VendPrice1[0];
    2520:	80 91 ce 08 	lds	r24, 0x08CE	; 0x8008ce <SQACAToploadProgramming+0x5>
    2524:	88 87       	std	Y+8, r24	; 0x08
			temp[8] = SQACAToploadProgramming.VendPrice1[1];
    2526:	80 91 cf 08 	lds	r24, 0x08CF	; 0x8008cf <SQACAToploadProgramming+0x6>
    252a:	89 87       	std	Y+9, r24	; 0x09
			temp[9] = SQACAToploadProgramming.VendPrice2[0];
    252c:	80 91 d0 08 	lds	r24, 0x08D0	; 0x8008d0 <SQACAToploadProgramming+0x7>
    2530:	8a 87       	std	Y+10, r24	; 0x0a
			temp[10] = SQACAToploadProgramming.VendPrice2[1];
    2532:	80 91 d1 08 	lds	r24, 0x08D1	; 0x8008d1 <SQACAToploadProgramming+0x8>
    2536:	8b 87       	std	Y+11, r24	; 0x0b
			temp[11] = SQACAToploadProgramming.VendPrice3[0];
    2538:	80 91 d2 08 	lds	r24, 0x08D2	; 0x8008d2 <SQACAToploadProgramming+0x9>
    253c:	8c 87       	std	Y+12, r24	; 0x0c
			temp[12] = SQACAToploadProgramming.VendPrice3[1];
    253e:	80 91 d3 08 	lds	r24, 0x08D3	; 0x8008d3 <SQACAToploadProgramming+0xa>
    2542:	8d 87       	std	Y+13, r24	; 0x0d
			temp[13] = SQACAToploadProgramming.VendPrice4[0];
    2544:	80 91 d4 08 	lds	r24, 0x08D4	; 0x8008d4 <SQACAToploadProgramming+0xb>
    2548:	8e 87       	std	Y+14, r24	; 0x0e
			temp[14] = SQACAToploadProgramming.VendPrice4[1];
    254a:	80 91 d5 08 	lds	r24, 0x08D5	; 0x8008d5 <SQACAToploadProgramming+0xc>
    254e:	8f 87       	std	Y+15, r24	; 0x0f
			temp[15] = SQACAToploadProgramming.VendPrice5[0];
    2550:	80 91 d6 08 	lds	r24, 0x08D6	; 0x8008d6 <SQACAToploadProgramming+0xd>
    2554:	88 8b       	std	Y+16, r24	; 0x10
			temp[16] = SQACAToploadProgramming.VendPrice5[1];
    2556:	80 91 d7 08 	lds	r24, 0x08D7	; 0x8008d7 <SQACAToploadProgramming+0xe>
    255a:	89 8b       	std	Y+17, r24	; 0x11
			temp[17] = SQACAToploadProgramming.VendPrice6[0];
    255c:	80 91 d8 08 	lds	r24, 0x08D8	; 0x8008d8 <SQACAToploadProgramming+0xf>
    2560:	8a 8b       	std	Y+18, r24	; 0x12
			temp[18] = SQACAToploadProgramming.VendPrice6[1];
    2562:	80 91 d9 08 	lds	r24, 0x08D9	; 0x8008d9 <SQACAToploadProgramming+0x10>
    2566:	8b 8b       	std	Y+19, r24	; 0x13
			temp[19] = SQACAToploadProgramming.VendPrice7[0];
    2568:	80 91 da 08 	lds	r24, 0x08DA	; 0x8008da <SQACAToploadProgramming+0x11>
    256c:	8c 8b       	std	Y+20, r24	; 0x14
			temp[20] = SQACAToploadProgramming.VendPrice7[1];
    256e:	80 91 db 08 	lds	r24, 0x08DB	; 0x8008db <SQACAToploadProgramming+0x12>
    2572:	8d 8b       	std	Y+21, r24	; 0x15
			temp[21] = SQACAToploadProgramming.VendPrice8[0];
    2574:	80 91 dc 08 	lds	r24, 0x08DC	; 0x8008dc <SQACAToploadProgramming+0x13>
    2578:	8e 8b       	std	Y+22, r24	; 0x16
			temp[22] = SQACAToploadProgramming.VendPrice8[1];
    257a:	80 91 dd 08 	lds	r24, 0x08DD	; 0x8008dd <SQACAToploadProgramming+0x14>
    257e:	8f 8b       	std	Y+23, r24	; 0x17
			temp[23] = SQACAToploadProgramming.VendPrice9[0];
    2580:	80 91 de 08 	lds	r24, 0x08DE	; 0x8008de <SQACAToploadProgramming+0x15>
    2584:	88 8f       	std	Y+24, r24	; 0x18
			temp[24] = SQACAToploadProgramming.VendPrice9[1];
    2586:	80 91 df 08 	lds	r24, 0x08DF	; 0x8008df <SQACAToploadProgramming+0x16>
    258a:	89 8f       	std	Y+25, r24	; 0x19
			temp[25] = SQACAToploadProgramming.MediumCycle_VendPrice[0];
    258c:	80 91 e0 08 	lds	r24, 0x08E0	; 0x8008e0 <SQACAToploadProgramming+0x17>
    2590:	8a 8f       	std	Y+26, r24	; 0x1a
			temp[26] = SQACAToploadProgramming.MediumCycle_VendPrice[1];
    2592:	80 91 e1 08 	lds	r24, 0x08E1	; 0x8008e1 <SQACAToploadProgramming+0x18>
    2596:	8b 8f       	std	Y+27, r24	; 0x1b
			temp[27] = SQACAToploadProgramming.HeavyCycle_VendPrice[0];
    2598:	80 91 e2 08 	lds	r24, 0x08E2	; 0x8008e2 <SQACAToploadProgramming+0x19>
    259c:	8c 8f       	std	Y+28, r24	; 0x1c
			temp[28] = SQACAToploadProgramming.HeavyCycle_VendPrice[1];
    259e:	80 91 e3 08 	lds	r24, 0x08E3	; 0x8008e3 <SQACAToploadProgramming+0x1a>
    25a2:	8d 8f       	std	Y+29, r24	; 0x1d
			temp[29] = SQACAToploadProgramming.HeavyCycle_option;
    25a4:	80 91 e5 08 	lds	r24, 0x08E5	; 0x8008e5 <SQACAToploadProgramming+0x1c>
    25a8:	8e 8f       	std	Y+30, r24	; 0x1e
			temp[30] = SQACAToploadProgramming.MediumCycle_option;
    25aa:	80 91 e4 08 	lds	r24, 0x08E4	; 0x8008e4 <SQACAToploadProgramming+0x1b>
    25ae:	8f 8f       	std	Y+31, r24	; 0x1f
			temp[31] = SQACAToploadProgramming.MediumCycle_extraWashTime;
    25b0:	80 91 e6 08 	lds	r24, 0x08E6	; 0x8008e6 <SQACAToploadProgramming+0x1d>
    25b4:	88 a3       	std	Y+32, r24	; 0x20
			temp[32] = SQACAToploadProgramming.MediumCycle_extraRinseTime;
    25b6:	80 91 e7 08 	lds	r24, 0x08E7	; 0x8008e7 <SQACAToploadProgramming+0x1e>
    25ba:	89 a3       	std	Y+33, r24	; 0x21
			temp[33] = SQACAToploadProgramming.HeavyCycle_extraWashTime;
    25bc:	80 91 e8 08 	lds	r24, 0x08E8	; 0x8008e8 <SQACAToploadProgramming+0x1f>
    25c0:	8a a3       	std	Y+34, r24	; 0x22
			temp[34] = SQACAToploadProgramming.HeavyCycle_extraRinseTime;
    25c2:	80 91 e9 08 	lds	r24, 0x08E9	; 0x8008e9 <SQACAToploadProgramming+0x20>
    25c6:	8b a3       	std	Y+35, r24	; 0x23
			temp[35] = SQACAToploadProgramming.NormalCycle_washAgitateTime;
    25c8:	80 91 ea 08 	lds	r24, 0x08EA	; 0x8008ea <SQACAToploadProgramming+0x21>
    25cc:	8c a3       	std	Y+36, r24	; 0x24
			temp[36] = SQACAToploadProgramming.NormalCycle_rinseAgitateTime;
    25ce:	80 91 eb 08 	lds	r24, 0x08EB	; 0x8008eb <SQACAToploadProgramming+0x22>
    25d2:	8d a3       	std	Y+37, r24	; 0x25
			temp[37] = SQACAToploadProgramming.NormalCycle_rinseAgitateTime;
    25d4:	8e a3       	std	Y+38, r24	; 0x26
			temp[38] = SQACAToploadProgramming.NormalCycle_finalSpinTime;
    25d6:	80 91 ed 08 	lds	r24, 0x08ED	; 0x8008ed <SQACAToploadProgramming+0x24>
    25da:	8f a3       	std	Y+39, r24	; 0x27
			temp[39] = SQACAToploadProgramming.PermPressCycle_washAgitateTime;
    25dc:	80 91 ee 08 	lds	r24, 0x08EE	; 0x8008ee <SQACAToploadProgramming+0x25>
    25e0:	88 a7       	std	Y+40, r24	; 0x28
			temp[40] = SQACAToploadProgramming.PermPressCycle_extraRinseAgitateTime;
    25e2:	80 91 f0 08 	lds	r24, 0x08F0	; 0x8008f0 <SQACAToploadProgramming+0x27>
    25e6:	89 a7       	std	Y+41, r24	; 0x29
			temp[41] = SQACAToploadProgramming.PermPressCycle_rinseAgitateTime;
			temp[42] = SQACAToploadProgramming.PermPressCycle_finalSpinTime;
    25e8:	80 91 f1 08 	lds	r24, 0x08F1	; 0x8008f1 <SQACAToploadProgramming+0x28>
    25ec:	8b a7       	std	Y+43, r24	; 0x2b
			temp[43] = SQACAToploadProgramming.DelicateCycle_washAgitateTime;
    25ee:	80 91 f2 08 	lds	r24, 0x08F2	; 0x8008f2 <SQACAToploadProgramming+0x29>
    25f2:	8c a7       	std	Y+44, r24	; 0x2c
			temp[44] = SQACAToploadProgramming.DelicateCycle_extraRinseAgitateTime;
    25f4:	80 91 f4 08 	lds	r24, 0x08F4	; 0x8008f4 <SQACAToploadProgramming+0x2b>
    25f8:	8d a7       	std	Y+45, r24	; 0x2d
			temp[41] = SQACAToploadProgramming.DelicateCycle_rinseAgitateTime;
    25fa:	80 91 f3 08 	lds	r24, 0x08F3	; 0x8008f3 <SQACAToploadProgramming+0x2a>
    25fe:	8a a7       	std	Y+42, r24	; 0x2a
			temp[46] = SQACAToploadProgramming.DelicateCycle_finalSpinTime;
    2600:	80 91 f5 08 	lds	r24, 0x08F5	; 0x8008f5 <SQACAToploadProgramming+0x2c>
    2604:	8f a7       	std	Y+47, r24	; 0x2f
			temp[47] = SQACAToploadProgramming.DefaultCycle;
    2606:	80 91 f6 08 	lds	r24, 0x08F6	; 0x8008f6 <SQACAToploadProgramming+0x2d>
    260a:	88 ab       	std	Y+48, r24	; 0x30
			temp[48] = SQACAToploadProgramming.DefaultCycleModifier;
    260c:	80 91 f7 08 	lds	r24, 0x08F7	; 0x8008f7 <SQACAToploadProgramming+0x2e>
    2610:	89 ab       	std	Y+49, r24	; 0x31
			temp[49] = SQACAToploadProgramming.WarmRinse;
    2612:	80 91 f8 08 	lds	r24, 0x08F8	; 0x8008f8 <SQACAToploadProgramming+0x2f>
    2616:	8a ab       	std	Y+50, r24	; 0x32
			temp[50] = SQACAToploadProgramming.AudioSetting;
    2618:	80 91 f9 08 	lds	r24, 0x08F9	; 0x8008f9 <SQACAToploadProgramming+0x30>
    261c:	8b ab       	std	Y+51, r24	; 0x33
			break;
    261e:	de c0       	rjmp	.+444    	; 0x27dc <getSQReaderMachineSetup+0x318>
			case PROGRAMMING_DATA_FRONTLOAD:
			temp[0] = QTL_PROGRAMMING_DATA_SIZE;					//37 bytes
    2620:	82 e3       	ldi	r24, 0x32	; 50
    2622:	89 83       	std	Y+1, r24	; 0x01
			temp[1] = deviceStatus.deviceType[0];					//0x22 (FLW Prog)
    2624:	9a 83       	std	Y+2, r25	; 0x02
			temp[2] = SQACAFrontloadProgramming.ProductByte[0];
    2626:	80 91 a2 08 	lds	r24, 0x08A2	; 0x8008a2 <SQACAFrontloadProgramming>
    262a:	8b 83       	std	Y+3, r24	; 0x03
			temp[3] = SQACAFrontloadProgramming.ProductByte[1];
    262c:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <SQACAFrontloadProgramming+0x1>
    2630:	8c 83       	std	Y+4, r24	; 0x04
			temp[4] = SQACAFrontloadProgramming.ProductByte[2];
    2632:	80 91 a4 08 	lds	r24, 0x08A4	; 0x8008a4 <SQACAFrontloadProgramming+0x2>
    2636:	8d 83       	std	Y+5, r24	; 0x05
			temp[5] = SQACAFrontloadProgramming.ProductByte[3];
    2638:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <SQACAFrontloadProgramming+0x3>
    263c:	8e 83       	std	Y+6, r24	; 0x06
			temp[6] = SQACAFrontloadProgramming.ProductByte[4];
    263e:	80 91 a6 08 	lds	r24, 0x08A6	; 0x8008a6 <SQACAFrontloadProgramming+0x4>
    2642:	8f 83       	std	Y+7, r24	; 0x07
			temp[7] = SQACAFrontloadProgramming.VendPrice1[0];
    2644:	80 91 a7 08 	lds	r24, 0x08A7	; 0x8008a7 <SQACAFrontloadProgramming+0x5>
    2648:	88 87       	std	Y+8, r24	; 0x08
			temp[8] = SQACAFrontloadProgramming.VendPrice1[1];
    264a:	80 91 a8 08 	lds	r24, 0x08A8	; 0x8008a8 <SQACAFrontloadProgramming+0x6>
    264e:	89 87       	std	Y+9, r24	; 0x09
			temp[9] = SQACAFrontloadProgramming.VendPrice2[0];
    2650:	80 91 a9 08 	lds	r24, 0x08A9	; 0x8008a9 <SQACAFrontloadProgramming+0x7>
    2654:	8a 87       	std	Y+10, r24	; 0x0a
			temp[10] = SQACAFrontloadProgramming.VendPrice2[1];
    2656:	80 91 aa 08 	lds	r24, 0x08AA	; 0x8008aa <SQACAFrontloadProgramming+0x8>
    265a:	8b 87       	std	Y+11, r24	; 0x0b
			temp[11] = SQACAFrontloadProgramming.VendPrice3[0];
    265c:	80 91 ab 08 	lds	r24, 0x08AB	; 0x8008ab <SQACAFrontloadProgramming+0x9>
    2660:	8c 87       	std	Y+12, r24	; 0x0c
			temp[12] = SQACAFrontloadProgramming.VendPrice3[1];
    2662:	80 91 ac 08 	lds	r24, 0x08AC	; 0x8008ac <SQACAFrontloadProgramming+0xa>
    2666:	8d 87       	std	Y+13, r24	; 0x0d
			temp[13] = SQACAFrontloadProgramming.VendPrice4[0];
    2668:	80 91 ad 08 	lds	r24, 0x08AD	; 0x8008ad <SQACAFrontloadProgramming+0xb>
    266c:	8e 87       	std	Y+14, r24	; 0x0e
			temp[14] = SQACAFrontloadProgramming.VendPrice4[1];
    266e:	80 91 ae 08 	lds	r24, 0x08AE	; 0x8008ae <SQACAFrontloadProgramming+0xc>
    2672:	8f 87       	std	Y+15, r24	; 0x0f
			temp[15] = SQACAFrontloadProgramming.VendPrice5[0];
    2674:	80 91 af 08 	lds	r24, 0x08AF	; 0x8008af <SQACAFrontloadProgramming+0xd>
    2678:	88 8b       	std	Y+16, r24	; 0x10
			temp[16] = SQACAFrontloadProgramming.VendPrice5[1];
    267a:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <SQACAFrontloadProgramming+0xe>
    267e:	89 8b       	std	Y+17, r24	; 0x11
			temp[17] = SQACAFrontloadProgramming.VendPrice6[0];
    2680:	80 91 b1 08 	lds	r24, 0x08B1	; 0x8008b1 <SQACAFrontloadProgramming+0xf>
    2684:	8a 8b       	std	Y+18, r24	; 0x12
			temp[18] = SQACAFrontloadProgramming.VendPrice6[1];
    2686:	80 91 b2 08 	lds	r24, 0x08B2	; 0x8008b2 <SQACAFrontloadProgramming+0x10>
    268a:	8b 8b       	std	Y+19, r24	; 0x13
			temp[19] = SQACAFrontloadProgramming.VendPrice7[0];
    268c:	80 91 b3 08 	lds	r24, 0x08B3	; 0x8008b3 <SQACAFrontloadProgramming+0x11>
    2690:	8c 8b       	std	Y+20, r24	; 0x14
			temp[20] = SQACAFrontloadProgramming.VendPrice7[1];
    2692:	80 91 b4 08 	lds	r24, 0x08B4	; 0x8008b4 <SQACAFrontloadProgramming+0x12>
    2696:	8d 8b       	std	Y+21, r24	; 0x15
			temp[21] = SQACAFrontloadProgramming.VendPrice8[0];
    2698:	80 91 b5 08 	lds	r24, 0x08B5	; 0x8008b5 <SQACAFrontloadProgramming+0x13>
    269c:	8e 8b       	std	Y+22, r24	; 0x16
			temp[22] = SQACAFrontloadProgramming.VendPrice8[1];
    269e:	80 91 b6 08 	lds	r24, 0x08B6	; 0x8008b6 <SQACAFrontloadProgramming+0x14>
    26a2:	8f 8b       	std	Y+23, r24	; 0x17
			temp[23] = SQACAFrontloadProgramming.VendPrice9[0];
    26a4:	80 91 b7 08 	lds	r24, 0x08B7	; 0x8008b7 <SQACAFrontloadProgramming+0x15>
    26a8:	88 8f       	std	Y+24, r24	; 0x18
			temp[24] = SQACAFrontloadProgramming.VendPrice9[1];
    26aa:	80 91 b8 08 	lds	r24, 0x08B8	; 0x8008b8 <SQACAFrontloadProgramming+0x16>
    26ae:	89 8f       	std	Y+25, r24	; 0x19
			temp[25] = SQACAFrontloadProgramming.MediumCycle_VendPrice[0];
    26b0:	80 91 b9 08 	lds	r24, 0x08B9	; 0x8008b9 <SQACAFrontloadProgramming+0x17>
    26b4:	8a 8f       	std	Y+26, r24	; 0x1a
			temp[26] = SQACAFrontloadProgramming.MediumCycle_VendPrice[1];
    26b6:	80 91 ba 08 	lds	r24, 0x08BA	; 0x8008ba <SQACAFrontloadProgramming+0x18>
    26ba:	8b 8f       	std	Y+27, r24	; 0x1b
			temp[27] = SQACAFrontloadProgramming.HeavyCycle_VendPrice[0];
    26bc:	80 91 bb 08 	lds	r24, 0x08BB	; 0x8008bb <SQACAFrontloadProgramming+0x19>
    26c0:	8c 8f       	std	Y+28, r24	; 0x1c
			temp[28] = SQACAFrontloadProgramming.HeavyCycle_VendPrice[1];
    26c2:	80 91 bc 08 	lds	r24, 0x08BC	; 0x8008bc <SQACAFrontloadProgramming+0x1a>
    26c6:	8d 8f       	std	Y+29, r24	; 0x1d
			temp[29] = SQACAFrontloadProgramming.HeavyCycle_option;
    26c8:	80 91 be 08 	lds	r24, 0x08BE	; 0x8008be <SQACAFrontloadProgramming+0x1c>
    26cc:	8e 8f       	std	Y+30, r24	; 0x1e
			temp[30] = SQACAFrontloadProgramming.MediumCycle_option;
    26ce:	80 91 bd 08 	lds	r24, 0x08BD	; 0x8008bd <SQACAFrontloadProgramming+0x1b>
    26d2:	8f 8f       	std	Y+31, r24	; 0x1f
			temp[31] = SQACAFrontloadProgramming.MediumCycle_extraWashTime;
    26d4:	80 91 bf 08 	lds	r24, 0x08BF	; 0x8008bf <SQACAFrontloadProgramming+0x1d>
    26d8:	88 a3       	std	Y+32, r24	; 0x20
			temp[32] = SQACAFrontloadProgramming.MediumCycle_extraRinseTime;
    26da:	80 91 c0 08 	lds	r24, 0x08C0	; 0x8008c0 <SQACAFrontloadProgramming+0x1e>
    26de:	89 a3       	std	Y+33, r24	; 0x21
			temp[33] = SQACAFrontloadProgramming.HeavyCycle_extraWashTime;
    26e0:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <SQACAFrontloadProgramming+0x1f>
    26e4:	8a a3       	std	Y+34, r24	; 0x22
			temp[34] = SQACAFrontloadProgramming.HeavyCycle_extraRinseTime;
    26e6:	80 91 c2 08 	lds	r24, 0x08C2	; 0x8008c2 <SQACAFrontloadProgramming+0x20>
    26ea:	8b a3       	std	Y+35, r24	; 0x23
			temp[35] = SQACAFrontloadProgramming.DefaultCycle;
    26ec:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <SQACAFrontloadProgramming+0x21>
    26f0:	8c a3       	std	Y+36, r24	; 0x24
			temp[36] = SQACAFrontloadProgramming.DefaultCycleModifier;
    26f2:	80 91 c4 08 	lds	r24, 0x08C4	; 0x8008c4 <SQACAFrontloadProgramming+0x22>
    26f6:	8d a3       	std	Y+37, r24	; 0x25
			temp[37] = SQACAFrontloadProgramming.AudioSetting;
    26f8:	80 91 c5 08 	lds	r24, 0x08C5	; 0x8008c5 <SQACAFrontloadProgramming+0x23>
    26fc:	6e c0       	rjmp	.+220    	; 0x27da <getSQReaderMachineSetup+0x316>
			break;
			case PROGRAMMING_DATA_DRYER:
			temp[0] = QDT_PROGRAMMING_DATA_SIZE;					//37 bytes
    26fe:	85 e2       	ldi	r24, 0x25	; 37
    2700:	89 83       	std	Y+1, r24	; 0x01
			temp[1] = deviceStatus.deviceType[0];					//0x29 for Dryer Prog
    2702:	9a 83       	std	Y+2, r25	; 0x02
			temp[2] = SQACADryerProgramming.ProductByte[0];
    2704:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <SQACADryerProgramming>
    2708:	8b 83       	std	Y+3, r24	; 0x03
			temp[3] = SQACADryerProgramming.ProductByte[1];
    270a:	80 91 04 0a 	lds	r24, 0x0A04	; 0x800a04 <SQACADryerProgramming+0x1>
    270e:	8c 83       	std	Y+4, r24	; 0x04
			temp[4] = SQACADryerProgramming.ProductByte[2];
    2710:	80 91 05 0a 	lds	r24, 0x0A05	; 0x800a05 <SQACADryerProgramming+0x2>
    2714:	8d 83       	std	Y+5, r24	; 0x05
			temp[5] = SQACADryerProgramming.ProductByte[3];
    2716:	80 91 06 0a 	lds	r24, 0x0A06	; 0x800a06 <SQACADryerProgramming+0x3>
    271a:	8e 83       	std	Y+6, r24	; 0x06
			temp[6] = SQACADryerProgramming.ProductByte[4];
    271c:	80 91 07 0a 	lds	r24, 0x0A07	; 0x800a07 <SQACADryerProgramming+0x4>
    2720:	8f 83       	std	Y+7, r24	; 0x07
			temp[7] = SQACADryerProgramming.HeatVendPrice1[0];
    2722:	80 91 08 0a 	lds	r24, 0x0A08	; 0x800a08 <SQACADryerProgramming+0x5>
    2726:	88 87       	std	Y+8, r24	; 0x08
			temp[8] = SQACADryerProgramming.HeatVendPrice1[1];
    2728:	80 91 09 0a 	lds	r24, 0x0A09	; 0x800a09 <SQACADryerProgramming+0x6>
    272c:	89 87       	std	Y+9, r24	; 0x09
			temp[9] = SQACADryerProgramming.NoHeatVendPrice[0];
    272e:	80 91 10 0a 	lds	r24, 0x0A10	; 0x800a10 <SQACADryerProgramming+0xd>
    2732:	8a 87       	std	Y+10, r24	; 0x0a
			temp[10] = SQACADryerProgramming.NoHeatVendPrice[1];
    2734:	80 91 11 0a 	lds	r24, 0x0A11	; 0x800a11 <SQACADryerProgramming+0xe>
    2738:	8b 87       	std	Y+11, r24	; 0x0b
			temp[11] = SQACADryerProgramming.PaymSTopoffOn;
    273a:	80 91 12 0a 	lds	r24, 0x0A12	; 0x800a12 <SQACADryerProgramming+0xf>
    273e:	8c 87       	std	Y+12, r24	; 0x0c
			temp[12] = SQACADryerProgramming.PaymSTopoffPrice[0];
    2740:	80 91 13 0a 	lds	r24, 0x0A13	; 0x800a13 <SQACADryerProgramming+0x10>
    2744:	8d 87       	std	Y+13, r24	; 0x0d
			temp[13] = SQACADryerProgramming.PaymSTopoffPrice[1];
    2746:	80 91 14 0a 	lds	r24, 0x0A14	; 0x800a14 <SQACADryerProgramming+0x11>
    274a:	8e 87       	std	Y+14, r24	; 0x0e
			temp[14] = SQACADryerProgramming.PaymSTopoffMinutes;
    274c:	80 91 15 0a 	lds	r24, 0x0A15	; 0x800a15 <SQACADryerProgramming+0x12>
    2750:	8f 87       	std	Y+15, r24	; 0x0f
			temp[15] = SQACADryerProgramming.PaymSTopoffSeconds;
    2752:	80 91 16 0a 	lds	r24, 0x0A16	; 0x800a16 <SQACADryerProgramming+0x13>
    2756:	88 8b       	std	Y+16, r24	; 0x10
			temp[16] = SQACADryerProgramming.Coin1TopoffMinutes;
    2758:	80 91 17 0a 	lds	r24, 0x0A17	; 0x800a17 <SQACADryerProgramming+0x14>
    275c:	89 8b       	std	Y+17, r24	; 0x11
			temp[17] = SQACADryerProgramming.Coin1TopoffSeconds;
    275e:	80 91 18 0a 	lds	r24, 0x0A18	; 0x800a18 <SQACADryerProgramming+0x15>
    2762:	8a 8b       	std	Y+18, r24	; 0x12
			temp[18] = SQACADryerProgramming.Coin2TopoffMinutes;
    2764:	80 91 19 0a 	lds	r24, 0x0A19	; 0x800a19 <SQACADryerProgramming+0x16>
    2768:	8b 8b       	std	Y+19, r24	; 0x13
			temp[19] = SQACADryerProgramming.Coin2TopoffSeconds;
    276a:	80 91 1a 0a 	lds	r24, 0x0A1A	; 0x800a1a <SQACADryerProgramming+0x17>
    276e:	8c 8b       	std	Y+20, r24	; 0x14
			temp[20] = SQACADryerProgramming.HeatCycleMinutes;
    2770:	80 91 1b 0a 	lds	r24, 0x0A1B	; 0x800a1b <SQACADryerProgramming+0x18>
    2774:	8d 8b       	std	Y+21, r24	; 0x15
			temp[21] = SQACADryerProgramming.HeatCycleSeconds;
    2776:	80 91 1c 0a 	lds	r24, 0x0A1C	; 0x800a1c <SQACADryerProgramming+0x19>
    277a:	8e 8b       	std	Y+22, r24	; 0x16
			temp[22] = SQACADryerProgramming.NoHeatCycleMinutes;
    277c:	80 91 1d 0a 	lds	r24, 0x0A1D	; 0x800a1d <SQACADryerProgramming+0x1a>
    2780:	8f 8b       	std	Y+23, r24	; 0x17
			temp[23] = SQACADryerProgramming.NoHeatCycleSeconds;
    2782:	80 91 1e 0a 	lds	r24, 0x0A1E	; 0x800a1e <SQACADryerProgramming+0x1b>
    2786:	88 8f       	std	Y+24, r24	; 0x18
			temp[24] = SQACADryerProgramming.HighCoolDownTime;
    2788:	80 91 1f 0a 	lds	r24, 0x0A1F	; 0x800a1f <SQACADryerProgramming+0x1c>
    278c:	89 8f       	std	Y+25, r24	; 0x19
			temp[25] = SQACADryerProgramming.MediumCoolDownTime;
    278e:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <SQACADryerProgramming+0x1d>
    2792:	8a 8f       	std	Y+26, r24	; 0x1a
			temp[26] = SQACADryerProgramming.LowCoolDownTime;
    2794:	80 91 21 0a 	lds	r24, 0x0A21	; 0x800a21 <SQACADryerProgramming+0x1e>
    2798:	8b 8f       	std	Y+27, r24	; 0x1b
			temp[27] = SQACADryerProgramming.DelicateCoolDownTime;
    279a:	80 91 22 0a 	lds	r24, 0x0A22	; 0x800a22 <SQACADryerProgramming+0x1f>
    279e:	8c 8f       	std	Y+28, r24	; 0x1c
			temp[28] = SQACADryerProgramming.HighTempSetting;
    27a0:	80 91 23 0a 	lds	r24, 0x0A23	; 0x800a23 <SQACADryerProgramming+0x20>
    27a4:	8d 8f       	std	Y+29, r24	; 0x1d
			temp[29] = SQACADryerProgramming.MediumTempSetting;
    27a6:	80 91 24 0a 	lds	r24, 0x0A24	; 0x800a24 <SQACADryerProgramming+0x21>
    27aa:	8e 8f       	std	Y+30, r24	; 0x1e
			temp[30] = SQACADryerProgramming.LowTempSetting;
    27ac:	80 91 25 0a 	lds	r24, 0x0A25	; 0x800a25 <SQACADryerProgramming+0x22>
    27b0:	8f 8f       	std	Y+31, r24	; 0x1f
			temp[31] = SQACADryerProgramming.DelicateTempSetting;
    27b2:	80 91 26 0a 	lds	r24, 0x0A26	; 0x800a26 <SQACADryerProgramming+0x23>
    27b6:	88 a3       	std	Y+32, r24	; 0x20
			temp[32] = SQACADryerProgramming.DefaultCycle;
    27b8:	80 91 27 0a 	lds	r24, 0x0A27	; 0x800a27 <SQACADryerProgramming+0x24>
    27bc:	89 a3       	std	Y+33, r24	; 0x21
			temp[33] = SQACADryerProgramming.AudioSetting;
    27be:	80 91 28 0a 	lds	r24, 0x0A28	; 0x800a28 <SQACADryerProgramming+0x25>
    27c2:	8a a3       	std	Y+34, r24	; 0x22
			temp[34] = SQACADryerProgramming.AudioEnable1;
    27c4:	80 91 29 0a 	lds	r24, 0x0A29	; 0x800a29 <SQACADryerProgramming+0x26>
    27c8:	8b a3       	std	Y+35, r24	; 0x23
			temp[35] = SQACADryerProgramming.AudioEnable2;
    27ca:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <SQACADryerProgramming+0x27>
    27ce:	8c a3       	std	Y+36, r24	; 0x24
			temp[36] = SQACADryerProgramming.DisplaySetting1;
    27d0:	80 91 2b 0a 	lds	r24, 0x0A2B	; 0x800a2b <SQACADryerProgramming+0x28>
    27d4:	8d a3       	std	Y+37, r24	; 0x25
			temp[37] = SQACADryerProgramming.DisplaySetting2;
    27d6:	80 91 2c 0a 	lds	r24, 0x0A2C	; 0x800a2c <SQACADryerProgramming+0x29>
    27da:	8e a3       	std	Y+38, r24	; 0x26
			
			break;
		}
	return (sendSQDataPacket(temp) );
    27dc:	cf 01       	movw	r24, r30
    27de:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <sendSQDataPacket>
}
    27e2:	ec 96       	adiw	r28, 0x3c	; 60
    27e4:	0f b6       	in	r0, 0x3f	; 63
    27e6:	f8 94       	cli
    27e8:	de bf       	out	0x3e, r29	; 62
    27ea:	0f be       	out	0x3f, r0	; 63
    27ec:	cd bf       	out	0x3d, r28	; 61
    27ee:	df 91       	pop	r29
    27f0:	cf 91       	pop	r28
    27f2:	08 95       	ret

000027f4 <initReader>:
*
*/
void initReader(void)
{

halGetEeprom(READER_STATE_ADDR, READER_STATE_FLAG_SIZE, (u8*)&ReaderStateFlag); 
    27f4:	45 e3       	ldi	r20, 0x35	; 53
    27f6:	59 e0       	ldi	r21, 0x09	; 9
    27f8:	62 e0       	ldi	r22, 0x02	; 2
    27fa:	82 e2       	ldi	r24, 0x22	; 34
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <halGetEeprom>
halGetEeprom(MACHINE_TYPE_ADDR, MACHINE_TYPE_SIZE, (u8*)&deviceStatus.deviceType);
    2802:	40 ef       	ldi	r20, 0xF0	; 240
    2804:	5a e0       	ldi	r21, 0x0A	; 10
    2806:	62 e0       	ldi	r22, 0x02	; 2
    2808:	8e e1       	ldi	r24, 0x1E	; 30
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <halGetEeprom>
	
ReaderSetup.customerId = 0;
    2810:	10 92 ba 09 	sts	0x09BA, r1	; 0x8009ba <ReaderSetup>
    2814:	10 92 bb 09 	sts	0x09BB, r1	; 0x8009bb <ReaderSetup+0x1>
    2818:	10 92 bc 09 	sts	0x09BC, r1	; 0x8009bc <ReaderSetup+0x2>
    281c:	10 92 bd 09 	sts	0x09BD, r1	; 0x8009bd <ReaderSetup+0x3>
ReaderSetup.manufacturerId = 1;
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	90 93 bf 09 	sts	0x09BF, r25	; 0x8009bf <ReaderSetup+0x5>
    2828:	80 93 be 09 	sts	0x09BE, r24	; 0x8009be <ReaderSetup+0x4>
ReaderSetup.locationId = 1;
    282c:	90 93 c1 09 	sts	0x09C1, r25	; 0x8009c1 <ReaderSetup+0x7>
    2830:	80 93 c0 09 	sts	0x09C0, r24	; 0x8009c0 <ReaderSetup+0x6>
//ReaderSetup.MaxOfflineTransaction = MAX_NUM_OFFLINE_TRANS; // to become variable once setup is done.
ReaderStateFlag.Busy = false;
    2834:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
    2838:	8f 7b       	andi	r24, 0xBF	; 191
    283a:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
//check setup status then set reader state flag
	
#if (DEVICE_CONNECTED == ACA_MACHINE)
	//Init machine variables

	if (ReaderStateFlag.ReaderSetup == READER_SETUP_DONE)
    283e:	81 fd       	sbrc	r24, 1
    2840:	47 c0       	rjmp	.+142    	; 0x28d0 <initReader+0xdc>
	{
        //a valid reader ID has been detected. check for valid setup
        getSQSetupData();  
    2842:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <getSQSetupData>
		ReaderStateFlag.ValidateSetup = VALIDATE_READER_SETUP;
    2846:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
    284a:	84 60       	ori	r24, 0x04	; 4
    284c:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
		halGetEeprom(READER_SETUP_ADDR, 1, (u8*)&ReaderSetup.maxOfflineTransaction);
    2850:	42 ec       	ldi	r20, 0xC2	; 194
    2852:	59 e0       	ldi	r21, 0x09	; 9
    2854:	61 e0       	ldi	r22, 0x01	; 1
    2856:	81 e6       	ldi	r24, 0x61	; 97
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <halGetEeprom>
		if (ReaderSetup.maxOfflineTransaction)
    285e:	80 91 c2 09 	lds	r24, 0x09C2	; 0x8009c2 <ReaderSetup+0x8>
    2862:	88 23       	and	r24, r24
    2864:	c9 f0       	breq	.+50     	; 0x2898 <initReader+0xa4>
		{
			ReaderStateFlag.EnableOfflineTransaction = true;
    2866:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
    286a:	88 60       	ori	r24, 0x08	; 8
    286c:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
			halGetEeprom(OFFLINE_TRANSACTION_RECORD_ADDR, 1, &ReaderSetup.numOfSavedTransactions);
    2870:	43 ec       	ldi	r20, 0xC3	; 195
    2872:	59 e0       	ldi	r21, 0x09	; 9
    2874:	61 e0       	ldi	r22, 0x01	; 1
    2876:	80 e0       	ldi	r24, 0x00	; 0
    2878:	91 e0       	ldi	r25, 0x01	; 1
    287a:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <halGetEeprom>
			if (ReaderSetup.numOfSavedTransactions == 0xff)
    287e:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    2882:	8f 3f       	cpi	r24, 0xFF	; 255
    2884:	49 f4       	brne	.+18     	; 0x2898 <initReader+0xa4>
			{
				ReaderSetup.numOfSavedTransactions = 0;
    2886:	10 92 c3 09 	sts	0x09C3, r1	; 0x8009c3 <ReaderSetup+0x9>
				halPutEeprom(OFFLINE_TRANSACTION_RECORD_ADDR, 1, &ReaderSetup.numOfSavedTransactions);
    288a:	43 ec       	ldi	r20, 0xC3	; 195
    288c:	59 e0       	ldi	r21, 0x09	; 9
    288e:	61 e0       	ldi	r22, 0x01	; 1
    2890:	80 e0       	ldi	r24, 0x00	; 0
    2892:	91 e0       	ldi	r25, 0x01	; 1
    2894:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <halPutEeprom>
			}
			 
		}
		//clear buffers
		memset(ReaderSetup.machineLabel,0,MACHINE_LABEL_SIZE+1);
    2898:	8b e0       	ldi	r24, 0x0B	; 11
    289a:	e7 ef       	ldi	r30, 0xF7	; 247
    289c:	f9 e0       	ldi	r31, 0x09	; 9
    289e:	df 01       	movw	r26, r30
    28a0:	1d 92       	st	X+, r1
    28a2:	8a 95       	dec	r24
    28a4:	e9 f7       	brne	.-6      	; 0x28a0 <initReader+0xac>
		memset(ReaderSetup.machineDescription,0,MACHINE_NAME_SIZE+1);
    28a6:	83 e3       	ldi	r24, 0x33	; 51
    28a8:	e4 ec       	ldi	r30, 0xC4	; 196
    28aa:	f9 e0       	ldi	r31, 0x09	; 9
    28ac:	df 01       	movw	r26, r30
    28ae:	1d 92       	st	X+, r1
    28b0:	8a 95       	dec	r24
    28b2:	e9 f7       	brne	.-6      	; 0x28ae <initReader+0xba>
		halGetEeprom(MACHINE_LABEL_ADDR, MACHINE_LABEL_SIZE, (u8*)&ReaderSetup.machineLabel);
    28b4:	47 ef       	ldi	r20, 0xF7	; 247
    28b6:	59 e0       	ldi	r21, 0x09	; 9
    28b8:	6a e0       	ldi	r22, 0x0A	; 10
    28ba:	8c e6       	ldi	r24, 0x6C	; 108
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <halGetEeprom>
		halGetEeprom(MACHINE_DESCRIPTION_ADDR, MACHINE_NAME_SIZE, (u8*)&ReaderSetup.machineDescription);
    28c2:	44 ec       	ldi	r20, 0xC4	; 196
    28c4:	59 e0       	ldi	r21, 0x09	; 9
    28c6:	62 e3       	ldi	r22, 0x32	; 50
    28c8:	87 e7       	ldi	r24, 0x77	; 119
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	0c 94 b6 1e 	jmp	0x3d6c	; 0x3d6c <halGetEeprom>
	}
	else{
		SetDefaultMachineSetup();
    28d0:	0c 94 e6 26 	jmp	0x4dcc	; 0x4dcc <SetDefaultMachineSetup>

000028d4 <storeOfflineTransaction>:
Store transactions,that occur when server is off line, in EEPROM.
*/

#if(DEVICE_CONNECTED == ACA_MACHINE)
u8 storeOfflineTransaction(u32 cardNum)
{
    28d4:	cf 93       	push	r28
    28d6:	df 93       	push	r29
    28d8:	cd b7       	in	r28, 0x3d	; 61
    28da:	de b7       	in	r29, 0x3e	; 62
    28dc:	67 97       	sbiw	r28, 0x17	; 23
    28de:	0f b6       	in	r0, 0x3f	; 63
    28e0:	f8 94       	cli
    28e2:	de bf       	out	0x3e, r29	; 62
    28e4:	0f be       	out	0x3f, r0	; 63
    28e6:	cd bf       	out	0x3d, r28	; 61
	u8 addr[2];
	u16 temp;
	structTransaction OfflineTransaction;
	
	temp  = (u16)OFFLINE_TRANSACTION_ADDR_START;
	addr[1] = temp >> 8;
    28e8:	21 e0       	ldi	r18, 0x01	; 1
    28ea:	2f 8b       	std	Y+23, r18	; 0x17
	addr[0] = temp;
    28ec:	28 e1       	ldi	r18, 0x18	; 24
    28ee:	2e 8b       	std	Y+22, r18	; 0x16
	
	OfflineTransaction.CardId		= cardNum;	
    28f0:	6a 87       	std	Y+10, r22	; 0x0a
    28f2:	7b 87       	std	Y+11, r23	; 0x0b
    28f4:	8c 87       	std	Y+12, r24	; 0x0c
    28f6:	9d 87       	std	Y+13, r25	; 0x0d
	OfflineTransaction.LocationId	= ReaderSetup.locationId;	
    28f8:	80 91 c0 09 	lds	r24, 0x09C0	; 0x8009c0 <ReaderSetup+0x6>
    28fc:	90 91 c1 09 	lds	r25, 0x09C1	; 0x8009c1 <ReaderSetup+0x7>
    2900:	9a 83       	std	Y+2, r25	; 0x02
    2902:	89 83       	std	Y+1, r24	; 0x01
	OfflineTransaction.MachineId[0] = SQACAMachineStatus.MachineType[0];
    2904:	80 91 f4 0a 	lds	r24, 0x0AF4	; 0x800af4 <SQACAMachineStatus>
    2908:	8b 83       	std	Y+3, r24	; 0x03
	OfflineTransaction.MachineId[1] = SQACAMachineStatus.MachineType[1];
    290a:	80 91 f5 0a 	lds	r24, 0x0AF5	; 0x800af5 <SQACAMachineStatus+0x1>
    290e:	8c 83       	std	Y+4, r24	; 0x04
	OfflineTransaction.CycleType	= SQACAMachineStatus.CycleType;
    2910:	80 91 f6 0a 	lds	r24, 0x0AF6	; 0x800af6 <SQACAMachineStatus+0x2>
    2914:	8f 83       	std	Y+7, r24	; 0x07
	
	OfflineTransaction.ManufactureId = ReaderSetup.manufacturerId;
    2916:	20 91 be 09 	lds	r18, 0x09BE	; 0x8009be <ReaderSetup+0x4>
    291a:	30 91 bf 09 	lds	r19, 0x09BF	; 0x8009bf <ReaderSetup+0x5>
    291e:	3e 83       	std	Y+6, r19	; 0x06
    2920:	2d 83       	std	Y+5, r18	; 0x05
	switch( deviceStatus.deviceType[0] )
    2922:	90 91 f0 0a 	lds	r25, 0x0AF0	; 0x800af0 <deviceStatus>
    2926:	92 32       	cpi	r25, 0x22	; 34
    2928:	59 f0       	breq	.+22     	; 0x2940 <storeOfflineTransaction+0x6c>
    292a:	99 32       	cpi	r25, 0x29	; 41
    292c:	01 f1       	breq	.+64     	; 0x296e <storeOfflineTransaction+0x9a>
    292e:	91 32       	cpi	r25, 0x21	; 33
    2930:	d9 f5       	brne	.+118    	; 0x29a8 <storeOfflineTransaction+0xd4>
	{
		case PROGRAMMING_DATA_TOPLOAD:
		
		switch( SQACAMachineStatus.CycleType )								//user selected Cycle Value 1-9
    2932:	48 2f       	mov	r20, r24
    2934:	50 e0       	ldi	r21, 0x00	; 0
    2936:	fa 01       	movw	r30, r20
    2938:	31 97       	sbiw	r30, 0x01	; 1
    293a:	e9 30       	cpi	r30, 0x09	; 9
    293c:	f1 05       	cpc	r31, r1
    293e:	38 f0       	brcs	.+14     	; 0x294e <storeOfflineTransaction+0x7a>
			OfflineTransaction.vendPrice = (OfflineTransaction.vendPrice >> 8 ) |SQACAToploadProgramming.VendPrice1[1];
			break;
		}
		case PROGRAMMING_DATA_FRONTLOAD:
		
		switch( SQACAMachineStatus.CycleType )								//user selected Cycle Value 1-9
    2940:	48 2f       	mov	r20, r24
    2942:	50 e0       	ldi	r21, 0x00	; 0
    2944:	fa 01       	movw	r30, r20
    2946:	31 97       	sbiw	r30, 0x01	; 1
    2948:	e9 30       	cpi	r30, 0x09	; 9
    294a:	f1 05       	cpc	r31, r1
    294c:	80 f4       	brcc	.+32     	; 0x296e <storeOfflineTransaction+0x9a>
    294e:	e6 53       	subi	r30, 0x36	; 54
    2950:	ff 4f       	sbci	r31, 0xFF	; 255
    2952:	0c 94 f7 2d 	jmp	0x5bee	; 0x5bee <__tablejump2__>
		{
			case 9:
			OfflineTransaction.vendPrice = SQACAFrontloadProgramming.VendPrice9[0];
			OfflineTransaction.vendPrice = (OfflineTransaction.vendPrice >> 8 ) |SQACAFrontloadProgramming.VendPrice9[1];
    2956:	80 91 b8 08 	lds	r24, 0x08B8	; 0x8008b8 <SQACAFrontloadProgramming+0x16>
    295a:	23 c0       	rjmp	.+70     	; 0x29a2 <storeOfflineTransaction+0xce>
			break;
			case 8:
			OfflineTransaction.vendPrice = SQACAFrontloadProgramming.VendPrice8[0];
			OfflineTransaction.vendPrice = (OfflineTransaction.vendPrice >> 8 ) |SQACAFrontloadProgramming.VendPrice8[1];
    295c:	80 91 b6 08 	lds	r24, 0x08B6	; 0x8008b6 <SQACAFrontloadProgramming+0x14>
    2960:	20 c0       	rjmp	.+64     	; 0x29a2 <storeOfflineTransaction+0xce>
			break;
			case 7:
			OfflineTransaction.vendPrice = SQACAFrontloadProgramming.VendPrice7[0];
			OfflineTransaction.vendPrice = (OfflineTransaction.vendPrice >> 8 ) |SQACAFrontloadProgramming.VendPrice7[1];
    2962:	80 91 b4 08 	lds	r24, 0x08B4	; 0x8008b4 <SQACAFrontloadProgramming+0x12>
    2966:	1d c0       	rjmp	.+58     	; 0x29a2 <storeOfflineTransaction+0xce>
			break;
			case 6:
			OfflineTransaction.vendPrice = SQACAFrontloadProgramming.VendPrice6[0];
			OfflineTransaction.vendPrice = (OfflineTransaction.vendPrice >> 8 ) |SQACAFrontloadProgramming.VendPrice6[1];
    2968:	80 91 b2 08 	lds	r24, 0x08B2	; 0x8008b2 <SQACAFrontloadProgramming+0x10>
    296c:	1a c0       	rjmp	.+52     	; 0x29a2 <storeOfflineTransaction+0xce>
			OfflineTransaction.vendPrice = (OfflineTransaction.vendPrice >> 8 ) |SQACAFrontloadProgramming.VendPrice1[1];
			break;
		}
		case PROGRAMMING_DATA_DRYER:
		
		switch( SQACAMachineStatus.CycleType )								//user selected Cycle Value 1-9
    296e:	83 30       	cpi	r24, 0x03	; 3
    2970:	81 f0       	breq	.+32     	; 0x2992 <storeOfflineTransaction+0xbe>
    2972:	28 f4       	brcc	.+10     	; 0x297e <storeOfflineTransaction+0xaa>
    2974:	81 30       	cpi	r24, 0x01	; 1
    2976:	99 f0       	breq	.+38     	; 0x299e <storeOfflineTransaction+0xca>
    2978:	82 30       	cpi	r24, 0x02	; 2
    297a:	71 f0       	breq	.+28     	; 0x2998 <storeOfflineTransaction+0xc4>
    297c:	15 c0       	rjmp	.+42     	; 0x29a8 <storeOfflineTransaction+0xd4>
    297e:	84 30       	cpi	r24, 0x04	; 4
    2980:	29 f0       	breq	.+10     	; 0x298c <storeOfflineTransaction+0xb8>
    2982:	85 30       	cpi	r24, 0x05	; 5
    2984:	89 f4       	brne	.+34     	; 0x29a8 <storeOfflineTransaction+0xd4>
		{
			case 5:
			OfflineTransaction.vendPrice = SQACADryerProgramming.HeatVendPrice4[0];
			OfflineTransaction.vendPrice = (OfflineTransaction.vendPrice >> 8 ) | SQACADryerProgramming.HeatVendPrice4[1];
    2986:	80 91 0f 0a 	lds	r24, 0x0A0F	; 0x800a0f <SQACADryerProgramming+0xc>
    298a:	0b c0       	rjmp	.+22     	; 0x29a2 <storeOfflineTransaction+0xce>
			break;
			case 4:
			OfflineTransaction.vendPrice = SQACADryerProgramming.HeatVendPrice1[0];
			OfflineTransaction.vendPrice = (OfflineTransaction.vendPrice >> 8 ) | SQACADryerProgramming.HeatVendPrice2[1];
    298c:	80 91 0b 0a 	lds	r24, 0x0A0B	; 0x800a0b <SQACADryerProgramming+0x8>
    2990:	08 c0       	rjmp	.+16     	; 0x29a2 <storeOfflineTransaction+0xce>
			break;
			case 3:
			OfflineTransaction.vendPrice = SQACADryerProgramming.NoHeatVendPrice[0];
			OfflineTransaction.vendPrice = (OfflineTransaction.vendPrice >> 8 ) | SQACADryerProgramming.NoHeatVendPrice[1];
    2992:	80 91 11 0a 	lds	r24, 0x0A11	; 0x800a11 <SQACADryerProgramming+0xe>
    2996:	05 c0       	rjmp	.+10     	; 0x29a2 <storeOfflineTransaction+0xce>
			break;
			case 2:
			OfflineTransaction.vendPrice = SQACADryerProgramming.HeatVendPrice3[0];
			OfflineTransaction.vendPrice = (OfflineTransaction.vendPrice >> 8 ) | SQACADryerProgramming.HeatVendPrice3[1];
    2998:	80 91 0d 0a 	lds	r24, 0x0A0D	; 0x800a0d <SQACADryerProgramming+0xa>
    299c:	02 c0       	rjmp	.+4      	; 0x29a2 <storeOfflineTransaction+0xce>
			break;
			case 1:
			OfflineTransaction.vendPrice = SQACADryerProgramming.HeatVendPrice2[1];
			OfflineTransaction.vendPrice = (OfflineTransaction.vendPrice >> 8 ) |SQACAToploadProgramming.VendPrice1[1];
    299e:	80 91 cf 08 	lds	r24, 0x08CF	; 0x8008cf <SQACAToploadProgramming+0x6>
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	99 87       	std	Y+9, r25	; 0x09
    29a6:	88 87       	std	Y+8, r24	; 0x08
		}
	}
	//OfflineTransaction.vendPrice = SQACAToploadProgramming.VendPrice1[0];
	//OfflineTransaction.vendPrice = (OfflineTransaction.vendPrice >> 8 ) | SQACAToploadProgramming.VendPrice1[1];	
	
	OfflineTransaction.Date[0] = 0x00;
    29a8:	1e 86       	std	Y+14, r1	; 0x0e
	OfflineTransaction.Date[1] = 0x00;
    29aa:	1f 86       	std	Y+15, r1	; 0x0f
	OfflineTransaction.Date[2] = 0x00;
    29ac:	18 8a       	std	Y+16, r1	; 0x10
	OfflineTransaction.Date[3] = 0x00;
    29ae:	19 8a       	std	Y+17, r1	; 0x11
	
	OfflineTransaction.Time[0] = 0x00;	
    29b0:	1a 8a       	std	Y+18, r1	; 0x12
	OfflineTransaction.Time[1] = 0x00;	
    29b2:	1b 8a       	std	Y+19, r1	; 0x13
	OfflineTransaction.Time[2] = 0x00;
    29b4:	1c 8a       	std	Y+20, r1	; 0x14
	
	OfflineTransaction.isOffline = true;
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	8d 8b       	std	Y+21, r24	; 0x15
	//get number of stored records
	halGetEeprom(OFFLINE_TRANSACTION_RECORD_ADDR, 1, &ReaderSetup.numOfSavedTransactions);
    29ba:	43 ec       	ldi	r20, 0xC3	; 195
    29bc:	59 e0       	ldi	r21, 0x09	; 9
    29be:	61 e0       	ldi	r22, 0x01	; 1
    29c0:	80 e0       	ldi	r24, 0x00	; 0
    29c2:	91 e0       	ldi	r25, 0x01	; 1
    29c4:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <halGetEeprom>
	//store structure in the next EEPROM record address
	if ((ReaderSetup.numOfSavedTransactions == 0xff) || (ReaderSetup.numOfSavedTransactions < ReaderSetup.maxOfflineTransaction))
    29c8:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    29cc:	8f 3f       	cpi	r24, 0xFF	; 255
    29ce:	29 f0       	breq	.+10     	; 0x29da <storeOfflineTransaction+0x106>
    29d0:	90 91 c2 09 	lds	r25, 0x09C2	; 0x8009c2 <ReaderSetup+0x8>
    29d4:	89 17       	cp	r24, r25
    29d6:	08 f0       	brcs	.+2      	; 0x29da <storeOfflineTransaction+0x106>
    29d8:	48 c0       	rjmp	.+144    	; 0x2a6a <storeOfflineTransaction+0x196>
	{	
		if (ReaderSetup.numOfSavedTransactions == 0xff || ReaderSetup.numOfSavedTransactions == 0x00)
    29da:	81 50       	subi	r24, 0x01	; 1
    29dc:	8e 3f       	cpi	r24, 0xFE	; 254
    29de:	50 f0       	brcs	.+20     	; 0x29f4 <storeOfflineTransaction+0x120>
		{
			ReaderSetup.numOfSavedTransactions = 0;
    29e0:	10 92 c3 09 	sts	0x09C3, r1	; 0x8009c3 <ReaderSetup+0x9>
			//halPutEeprom(OFFLINE_TRANSACTION_RECORD_ADDR,1, &num_of_trans);
			//store first transaction records address.
			halPutEeprom(OFFLINE_TRANSACTION_RECORD_START,2,addr);
    29e4:	ae 01       	movw	r20, r28
    29e6:	4a 5e       	subi	r20, 0xEA	; 234
    29e8:	5f 4f       	sbci	r21, 0xFF	; 255
    29ea:	62 e0       	ldi	r22, 0x02	; 2
    29ec:	81 e0       	ldi	r24, 0x01	; 1
    29ee:	91 e0       	ldi	r25, 0x01	; 1
    29f0:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <halPutEeprom>
/*		else{
			//start at end of existing records
			halGetEeprom(OFFLINE_TRANSACTION_RECORD_START,2,addr);  
		}	*/		
					
		halPutEeprom((u8*)(OFFLINE_TRANSACTION_ADDR_START + (ReaderSetup.numOfSavedTransactions * OFFLINE_TRANSACTION_NUM_BYTE)), OFFLINE_TRANSACTION_NUM_BYTE, (u8*)&OfflineTransaction);
    29f4:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    29f8:	25 e1       	ldi	r18, 0x15	; 21
    29fa:	82 9f       	mul	r24, r18
    29fc:	c0 01       	movw	r24, r0
    29fe:	11 24       	eor	r1, r1
    2a00:	ae 01       	movw	r20, r28
    2a02:	4f 5f       	subi	r20, 0xFF	; 255
    2a04:	5f 4f       	sbci	r21, 0xFF	; 255
    2a06:	65 e1       	ldi	r22, 0x15	; 21
    2a08:	88 5e       	subi	r24, 0xE8	; 232
    2a0a:	9e 4f       	sbci	r25, 0xFE	; 254
    2a0c:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <halPutEeprom>
		ReaderSetup.numOfSavedTransactions++;
    2a10:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    2a14:	8f 5f       	subi	r24, 0xFF	; 255
    2a16:	80 93 c3 09 	sts	0x09C3, r24	; 0x8009c3 <ReaderSetup+0x9>
		halPutEeprom((u8*)OFFLINE_TRANSACTION_RECORD_ADDR,1,&ReaderSetup.numOfSavedTransactions);
    2a1a:	43 ec       	ldi	r20, 0xC3	; 195
    2a1c:	59 e0       	ldi	r21, 0x09	; 9
    2a1e:	61 e0       	ldi	r22, 0x01	; 1
    2a20:	80 e0       	ldi	r24, 0x00	; 0
    2a22:	91 e0       	ldi	r25, 0x01	; 1
    2a24:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <halPutEeprom>
		if(ReaderStateFlag.OfflineTransactionExist == false)
    2a28:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
    2a2c:	85 fd       	sbrc	r24, 5
    2a2e:	0a c0       	rjmp	.+20     	; 0x2a44 <storeOfflineTransaction+0x170>
		{
			ReaderStateFlag.OfflineTransactionExist = true;
    2a30:	80 62       	ori	r24, 0x20	; 32
    2a32:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
			halPutEeprom(READER_STATE_ADDR,READER_STATE_FLAG_SIZE,(u8*)&ReaderStateFlag);	
    2a36:	45 e3       	ldi	r20, 0x35	; 53
    2a38:	59 e0       	ldi	r21, 0x09	; 9
    2a3a:	62 e0       	ldi	r22, 0x02	; 2
    2a3c:	82 e2       	ldi	r24, 0x22	; 34
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <halPutEeprom>
		}
		if (ReaderSetup.numOfSavedTransactions == ReaderSetup.maxOfflineTransaction)
    2a44:	90 91 c3 09 	lds	r25, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    2a48:	80 91 c2 09 	lds	r24, 0x09C2	; 0x8009c2 <ReaderSetup+0x8>
    2a4c:	98 13       	cpse	r25, r24
    2a4e:	23 c0       	rjmp	.+70     	; 0x2a96 <storeOfflineTransaction+0x1c2>
		{
			ReaderStateFlag.MaxNumTransReached = true;
    2a50:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
    2a54:	80 61       	ori	r24, 0x10	; 16
    2a56:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
			halPutEeprom(READER_STATE_ADDR,READER_STATE_FLAG_SIZE,(u8*)&ReaderStateFlag);
    2a5a:	45 e3       	ldi	r20, 0x35	; 53
    2a5c:	59 e0       	ldi	r21, 0x09	; 9
    2a5e:	62 e0       	ldi	r22, 0x02	; 2
    2a60:	82 e2       	ldi	r24, 0x22	; 34
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <halPutEeprom>
    2a68:	16 c0       	rjmp	.+44     	; 0x2a96 <storeOfflineTransaction+0x1c2>
		}
	}
	else if(ReaderSetup.numOfSavedTransactions >= ReaderSetup.maxOfflineTransaction){
		halGetEeprom(READER_STATE_ADDR, 1, (u8*)&ReaderStateFlag);
    2a6a:	45 e3       	ldi	r20, 0x35	; 53
    2a6c:	59 e0       	ldi	r21, 0x09	; 9
    2a6e:	61 e0       	ldi	r22, 0x01	; 1
    2a70:	82 e2       	ldi	r24, 0x22	; 34
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <halGetEeprom>
		ReaderStateFlag.EnableOfflineTransaction = false; // stop conducting off line transaction, EEPROM is full.
    2a78:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
		ReaderStateFlag.MaxNumTransReached = true;
    2a7c:	87 7f       	andi	r24, 0xF7	; 247
    2a7e:	80 61       	ori	r24, 0x10	; 16
    2a80:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
		halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
    2a84:	45 e3       	ldi	r20, 0x35	; 53
    2a86:	59 e0       	ldi	r21, 0x09	; 9
    2a88:	61 e0       	ldi	r22, 0x01	; 1
    2a8a:	82 e2       	ldi	r24, 0x22	; 34
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <halPutEeprom>
		return_code = 0;
    2a92:	80 e0       	ldi	r24, 0x00	; 0
    2a94:	01 c0       	rjmp	.+2      	; 0x2a98 <storeOfflineTransaction+0x1c4>
*/

#if(DEVICE_CONNECTED == ACA_MACHINE)
u8 storeOfflineTransaction(u32 cardNum)
{
	u8 return_code = 1;
    2a96:	81 e0       	ldi	r24, 0x01	; 1
		ReaderStateFlag.MaxNumTransReached = true;
		halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
		return_code = 0;
	}
	return return_code;	
}
    2a98:	67 96       	adiw	r28, 0x17	; 23
    2a9a:	0f b6       	in	r0, 0x3f	; 63
    2a9c:	f8 94       	cli
    2a9e:	de bf       	out	0x3e, r29	; 62
    2aa0:	0f be       	out	0x3f, r0	; 63
    2aa2:	cd bf       	out	0x3d, r28	; 61
    2aa4:	df 91       	pop	r29
    2aa6:	cf 91       	pop	r28
    2aa8:	08 95       	ret

00002aaa <sendStoredTransaction>:

u8 sendStoredTransaction(void)
{	
    2aaa:	cf 93       	push	r28
    2aac:	df 93       	push	r29
    2aae:	cd b7       	in	r28, 0x3d	; 61
    2ab0:	de b7       	in	r29, 0x3e	; 62
    2ab2:	67 97       	sbiw	r28, 0x17	; 23
    2ab4:	0f b6       	in	r0, 0x3f	; 63
    2ab6:	f8 94       	cli
    2ab8:	de bf       	out	0x3e, r29	; 62
    2aba:	0f be       	out	0x3f, r0	; 63
    2abc:	cd bf       	out	0x3d, r28	; 61
	//get total number of stored off line transactions from EEPROM.
	halGetEeprom(OFFLINE_TRANSACTION_RECORD_ADDR, 1, &ReaderSetup.numOfSavedTransactions);
    2abe:	43 ec       	ldi	r20, 0xC3	; 195
    2ac0:	59 e0       	ldi	r21, 0x09	; 9
    2ac2:	61 e0       	ldi	r22, 0x01	; 1
    2ac4:	80 e0       	ldi	r24, 0x00	; 0
    2ac6:	91 e0       	ldi	r25, 0x01	; 1
    2ac8:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <halGetEeprom>
	
	//build buffer of transactions to be transmitted.
	if (ReaderSetup.numOfSavedTransactions > 0 && ReaderSetup.numOfSavedTransactions < 0xFF) // valid number of transactions stored, prepare to send to BOW
    2acc:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    2ad0:	81 50       	subi	r24, 0x01	; 1
    2ad2:	8e 3f       	cpi	r24, 0xFE	; 254
    2ad4:	78 f5       	brcc	.+94     	; 0x2b34 <sendStoredTransaction+0x8a>
		structTransaction record;
		u16 addr;
		
		//send data to BOW

		halGetEeprom(OFFLINE_TRANSACTION_RECORD_START,2,(u8*)&addr);		
    2ad6:	ae 01       	movw	r20, r28
    2ad8:	4a 5e       	subi	r20, 0xEA	; 234
    2ada:	5f 4f       	sbci	r21, 0xFF	; 255
    2adc:	62 e0       	ldi	r22, 0x02	; 2
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	91 e0       	ldi	r25, 0x01	; 1
    2ae2:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <halGetEeprom>
		halGetEeprom((void*)addr,OFFLINE_TRANSACTION_NUM_BYTE,(u8*)&record); // get transaction record
    2ae6:	ae 01       	movw	r20, r28
    2ae8:	4f 5f       	subi	r20, 0xFF	; 255
    2aea:	5f 4f       	sbci	r21, 0xFF	; 255
    2aec:	65 e1       	ldi	r22, 0x15	; 21
    2aee:	8e 89       	ldd	r24, Y+22	; 0x16
    2af0:	9f 89       	ldd	r25, Y+23	; 0x17
    2af2:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <halGetEeprom>
			
		if( sendBOWCCTransaction(&record) )
    2af6:	ce 01       	movw	r24, r28
    2af8:	01 96       	adiw	r24, 0x01	; 1
    2afa:	0e 94 10 0c 	call	0x1820	; 0x1820 <sendBOWCCTransaction>
    2afe:	88 23       	and	r24, r24
    2b00:	c9 f0       	breq	.+50     	; 0x2b34 <sendStoredTransaction+0x8a>
		{//update current record address
			addr = addr + OFFLINE_TRANSACTION_NUM_BYTE;
    2b02:	8e 89       	ldd	r24, Y+22	; 0x16
    2b04:	9f 89       	ldd	r25, Y+23	; 0x17
    2b06:	45 96       	adiw	r24, 0x15	; 21
    2b08:	9f 8b       	std	Y+23, r25	; 0x17
    2b0a:	8e 8b       	std	Y+22, r24	; 0x16
			
			ReaderSetup.numOfSavedTransactions--;
    2b0c:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    2b10:	81 50       	subi	r24, 0x01	; 1
    2b12:	80 93 c3 09 	sts	0x09C3, r24	; 0x8009c3 <ReaderSetup+0x9>
			halPutEeprom(OFFLINE_TRANSACTION_RECORD_START,2,(u8*)&addr);
    2b16:	ae 01       	movw	r20, r28
    2b18:	4a 5e       	subi	r20, 0xEA	; 234
    2b1a:	5f 4f       	sbci	r21, 0xFF	; 255
    2b1c:	62 e0       	ldi	r22, 0x02	; 2
    2b1e:	81 e0       	ldi	r24, 0x01	; 1
    2b20:	91 e0       	ldi	r25, 0x01	; 1
    2b22:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <halPutEeprom>
			halPutEeprom(OFFLINE_TRANSACTION_RECORD_ADDR, 1, &ReaderSetup.numOfSavedTransactions);
    2b26:	43 ec       	ldi	r20, 0xC3	; 195
    2b28:	59 e0       	ldi	r21, 0x09	; 9
    2b2a:	61 e0       	ldi	r22, 0x01	; 1
    2b2c:	80 e0       	ldi	r24, 0x00	; 0
    2b2e:	91 e0       	ldi	r25, 0x01	; 1
    2b30:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <halPutEeprom>
		}
	}
	if (ReaderSetup.numOfSavedTransactions == 0)
    2b34:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    2b38:	81 11       	cpse	r24, r1
    2b3a:	0d c0       	rjmp	.+26     	; 0x2b56 <sendStoredTransaction+0xac>
	{
		ReaderStateFlag.OfflineTransactionExist = false;
    2b3c:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
		ReaderStateFlag.MaxNumTransReached = false;
    2b40:	8f 7d       	andi	r24, 0xDF	; 223
    2b42:	8f 7e       	andi	r24, 0xEF	; 239
    2b44:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
		halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
    2b48:	45 e3       	ldi	r20, 0x35	; 53
    2b4a:	59 e0       	ldi	r21, 0x09	; 9
    2b4c:	61 e0       	ldi	r22, 0x01	; 1
    2b4e:	82 e2       	ldi	r24, 0x22	; 34
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <halPutEeprom>
	}
	
	return ReaderSetup.numOfSavedTransactions;
}
    2b56:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    2b5a:	67 96       	adiw	r28, 0x17	; 23
    2b5c:	0f b6       	in	r0, 0x3f	; 63
    2b5e:	f8 94       	cli
    2b60:	de bf       	out	0x3e, r29	; 62
    2b62:	0f be       	out	0x3f, r0	; 63
    2b64:	cd bf       	out	0x3d, r28	; 61
    2b66:	df 91       	pop	r29
    2b68:	cf 91       	pop	r28
    2b6a:	08 95       	ret

00002b6c <SetTimeOut>:
	tmp[13]=255-addr;
	tmp[14]=tmp[12];
	tmp[15]=tmp[13];
	status=Write(addr,tmp);
	return status;
}
    2b6c:	1f 93       	push	r17
    2b6e:	cf 93       	push	r28
    2b70:	df 93       	push	r29
    2b72:	1f 92       	push	r1
    2b74:	cd b7       	in	r28, 0x3d	; 61
    2b76:	de b7       	in	r29, 0x3e	; 62
    2b78:	64 e6       	ldi	r22, 0x64	; 100
    2b7a:	70 e0       	ldi	r23, 0x00	; 0
    2b7c:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__udivmodhi4>
    2b80:	16 2f       	mov	r17, r22
    2b82:	40 e8       	ldi	r20, 0x80	; 128
    2b84:	61 e0       	ldi	r22, 0x01	; 1
    2b86:	8a e2       	ldi	r24, 0x2A	; 42
    2b88:	79 83       	std	Y+1, r23	; 0x01
    2b8a:	0e 94 a8 1a 	call	0x3550	; 0x3550 <RcModifyReg>
    2b8e:	66 ea       	ldi	r22, 0xA6	; 166
    2b90:	8b e2       	ldi	r24, 0x2B	; 43
    2b92:	0e 94 8a 1a 	call	0x3514	; 0x3514 <RcSetReg>
    2b96:	8a e2       	ldi	r24, 0x2A	; 42
    2b98:	0e 94 9e 1a 	call	0x353c	; 0x353c <RcGetReg>
    2b9c:	80 7f       	andi	r24, 0xF0	; 240
    2b9e:	68 2f       	mov	r22, r24
    2ba0:	62 60       	ori	r22, 0x02	; 2
    2ba2:	8a e2       	ldi	r24, 0x2A	; 42
    2ba4:	0e 94 8a 1a 	call	0x3514	; 0x3514 <RcSetReg>
    2ba8:	61 2f       	mov	r22, r17
    2baa:	8d e2       	ldi	r24, 0x2D	; 45
    2bac:	0e 94 8a 1a 	call	0x3514	; 0x3514 <RcSetReg>
    2bb0:	79 81       	ldd	r23, Y+1	; 0x01
    2bb2:	67 2f       	mov	r22, r23
    2bb4:	8c e2       	ldi	r24, 0x2C	; 44
    2bb6:	0e 94 8a 1a 	call	0x3514	; 0x3514 <RcSetReg>
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	0f 90       	pop	r0
    2bc0:	df 91       	pop	r29
    2bc2:	cf 91       	pop	r28
    2bc4:	1f 91       	pop	r17
    2bc6:	08 95       	ret

00002bc8 <Rc522Init>:
    2bc8:	6f e0       	ldi	r22, 0x0F	; 15
    2bca:	81 e0       	ldi	r24, 0x01	; 1
    2bcc:	0e 94 8a 1a 	call	0x3514	; 0x3514 <RcSetReg>
    2bd0:	60 e4       	ldi	r22, 0x40	; 64
    2bd2:	85 e1       	ldi	r24, 0x15	; 21
    2bd4:	0e 94 8a 1a 	call	0x3514	; 0x3514 <RcSetReg>
    2bd8:	48 e0       	ldi	r20, 0x08	; 8
    2bda:	60 e0       	ldi	r22, 0x00	; 0
    2bdc:	88 e0       	ldi	r24, 0x08	; 8
    2bde:	0e 94 a8 1a 	call	0x3550	; 0x3550 <RcModifyReg>
    2be2:	82 e1       	ldi	r24, 0x12	; 18
    2be4:	0e 94 9e 1a 	call	0x353c	; 0x353c <RcGetReg>
    2be8:	88 70       	andi	r24, 0x08	; 8
    2bea:	68 2f       	mov	r22, r24
    2bec:	60 68       	ori	r22, 0x80	; 128
    2bee:	82 e1       	ldi	r24, 0x12	; 18
    2bf0:	0e 94 8a 1a 	call	0x3514	; 0x3514 <RcSetReg>
    2bf4:	83 e1       	ldi	r24, 0x13	; 19
    2bf6:	0e 94 9e 1a 	call	0x353c	; 0x353c <RcGetReg>
    2bfa:	88 70       	andi	r24, 0x08	; 8
    2bfc:	68 2f       	mov	r22, r24
    2bfe:	60 68       	ori	r22, 0x80	; 128
    2c00:	83 e1       	ldi	r24, 0x13	; 19
    2c02:	0e 94 8a 1a 	call	0x3514	; 0x3514 <RcSetReg>
    2c06:	6d e6       	ldi	r22, 0x6D	; 109
    2c08:	89 e1       	ldi	r24, 0x19	; 25
    2c0a:	0e 94 8a 1a 	call	0x3514	; 0x3514 <RcSetReg>
    2c0e:	68 e4       	ldi	r22, 0x48	; 72
    2c10:	86 e2       	ldi	r24, 0x26	; 38
    2c12:	0e 94 8a 1a 	call	0x3514	; 0x3514 <RcSetReg>
    2c16:	65 e5       	ldi	r22, 0x55	; 85
    2c18:	88 e1       	ldi	r24, 0x18	; 24
    2c1a:	0e 94 8a 1a 	call	0x3514	; 0x3514 <RcSetReg>
    2c1e:	66 e2       	ldi	r22, 0x26	; 38
    2c20:	84 e2       	ldi	r24, 0x24	; 36
    2c22:	0e 94 8a 1a 	call	0x3514	; 0x3514 <RcSetReg>
    2c26:	64 ef       	ldi	r22, 0xF4	; 244
    2c28:	87 e2       	ldi	r24, 0x27	; 39
    2c2a:	0e 94 8a 1a 	call	0x3514	; 0x3514 <RcSetReg>
    2c2e:	88 e8       	ldi	r24, 0x88	; 136
    2c30:	93 e1       	ldi	r25, 0x13	; 19
    2c32:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <SetTimeOut>
    2c36:	43 e0       	ldi	r20, 0x03	; 3
    2c38:	61 e0       	ldi	r22, 0x01	; 1
    2c3a:	84 e1       	ldi	r24, 0x14	; 20
    2c3c:	0e 94 a8 1a 	call	0x3550	; 0x3550 <RcModifyReg>
    2c40:	40 e4       	ldi	r20, 0x40	; 64
    2c42:	61 e0       	ldi	r22, 0x01	; 1
    2c44:	8c e0       	ldi	r24, 0x0C	; 12
    2c46:	0e 94 a8 1a 	call	0x3550	; 0x3550 <RcModifyReg>
    2c4a:	84 e0       	ldi	r24, 0x04	; 4
    2c4c:	0e 94 9e 1a 	call	0x353c	; 0x353c <RcGetReg>
    2c50:	80 ff       	sbrs	r24, 0
    2c52:	fb cf       	rjmp	.-10     	; 0x2c4a <Rc522Init+0x82>
    2c54:	61 e0       	ldi	r22, 0x01	; 1
    2c56:	84 e0       	ldi	r24, 0x04	; 4
    2c58:	0e 94 8a 1a 	call	0x3514	; 0x3514 <RcSetReg>
    2c5c:	88 e8       	ldi	r24, 0x88	; 136
    2c5e:	93 e1       	ldi	r25, 0x13	; 19
    2c60:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <SetTimeOut>
    2c64:	6a e1       	ldi	r22, 0x1A	; 26
    2c66:	8b e0       	ldi	r24, 0x0B	; 11
    2c68:	0e 94 8a 1a 	call	0x3514	; 0x3514 <RcSetReg>
    2c6c:	60 e1       	ldi	r22, 0x10	; 16
    2c6e:	86 e1       	ldi	r24, 0x16	; 22
    2c70:	0e 94 8a 1a 	call	0x3514	; 0x3514 <RcSetReg>
    2c74:	64 e8       	ldi	r22, 0x84	; 132
    2c76:	87 e1       	ldi	r24, 0x17	; 23
    2c78:	0e 94 8a 1a 	call	0x3514	; 0x3514 <RcSetReg>
    2c7c:	60 e0       	ldi	r22, 0x00	; 0
    2c7e:	81 e0       	ldi	r24, 0x01	; 1
    2c80:	0e 94 8a 1a 	call	0x3514	; 0x3514 <RcSetReg>
    2c84:	80 ed       	ldi	r24, 0xD0	; 208
    2c86:	97 e0       	ldi	r25, 0x07	; 7
    2c88:	0c 94 b6 15 	jmp	0x2b6c	; 0x2b6c <SetTimeOut>

00002c8c <M522PcdCmd>:
    2c8c:	9f 92       	push	r9
    2c8e:	af 92       	push	r10
    2c90:	bf 92       	push	r11
    2c92:	cf 92       	push	r12
    2c94:	df 92       	push	r13
    2c96:	ef 92       	push	r14
    2c98:	ff 92       	push	r15
    2c9a:	0f 93       	push	r16
    2c9c:	1f 93       	push	r17
    2c9e:	cf 93       	push	r28
    2ca0:	df 93       	push	r29
    2ca2:	18 2f       	mov	r17, r24
    2ca4:	7b 01       	movw	r14, r22
    2ca6:	ea 01       	movw	r28, r20
    2ca8:	62 e4       	ldi	r22, 0x42	; 66
    2caa:	84 e0       	ldi	r24, 0x04	; 4
    2cac:	0e 94 8a 1a 	call	0x3514	; 0x3514 <RcSetReg>
    2cb0:	60 e0       	ldi	r22, 0x00	; 0
    2cb2:	85 e0       	ldi	r24, 0x05	; 5
    2cb4:	0e 94 8a 1a 	call	0x3514	; 0x3514 <RcSetReg>
    2cb8:	60 e8       	ldi	r22, 0x80	; 128
    2cba:	8a e0       	ldi	r24, 0x0A	; 10
    2cbc:	0e 94 8a 1a 	call	0x3514	; 0x3514 <RcSetReg>
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	0e 94 9e 1a 	call	0x353c	; 0x353c <RcGetReg>
    2cc6:	68 2f       	mov	r22, r24
    2cc8:	60 7f       	andi	r22, 0xF0	; 240
    2cca:	1c 30       	cpi	r17, 0x0C	; 12
    2ccc:	09 f4       	brne	.+2      	; 0x2cd0 <M522PcdCmd+0x44>
    2cce:	6c 60       	ori	r22, 0x0C	; 12
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	0e 94 8a 1a 	call	0x3514	; 0x3514 <RcSetReg>
    2cd6:	d0 93 32 05 	sts	0x0532, r29	; 0x800532 <MpIsrInfo+0x1>
    2cda:	c0 93 31 05 	sts	0x0531, r28	; 0x800531 <MpIsrInfo>
    2cde:	10 31       	cpi	r17, 0x10	; 16
    2ce0:	08 f0       	brcs	.+2      	; 0x2ce4 <M522PcdCmd+0x58>
    2ce2:	63 c0       	rjmp	.+198    	; 0x2daa <M522PcdCmd+0x11e>
    2ce4:	81 2f       	mov	r24, r17
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	fc 01       	movw	r30, r24
    2cea:	ee 0f       	add	r30, r30
    2cec:	ff 1f       	adc	r31, r31
    2cee:	e6 5f       	subi	r30, 0xF6	; 246
    2cf0:	fa 4f       	sbci	r31, 0xFA	; 250
    2cf2:	c0 81       	ld	r28, Z
    2cf4:	d1 81       	ldd	r29, Z+1	; 0x01
    2cf6:	fc 01       	movw	r30, r24
    2cf8:	e6 50       	subi	r30, 0x06	; 6
    2cfa:	fb 4f       	sbci	r31, 0xFB	; 251
    2cfc:	c0 80       	ld	r12, Z
    2cfe:	fc 01       	movw	r30, r24
    2d00:	e6 51       	subi	r30, 0x16	; 22
    2d02:	fb 4f       	sbci	r31, 0xFB	; 251
    2d04:	00 81       	ld	r16, Z
    2d06:	fc 01       	movw	r30, r24
    2d08:	e6 52       	subi	r30, 0x26	; 38
    2d0a:	fb 4f       	sbci	r31, 0xFB	; 251
    2d0c:	90 80       	ld	r9, Z
    2d0e:	20 97       	sbiw	r28, 0x00	; 0
    2d10:	09 f0       	breq	.+2      	; 0x2d14 <M522PcdCmd+0x88>
    2d12:	50 c0       	rjmp	.+160    	; 0x2db4 <M522PcdCmd+0x128>
    2d14:	82 e0       	ldi	r24, 0x02	; 2
    2d16:	0e 94 9e 1a 	call	0x353c	; 0x353c <RcGetReg>
    2d1a:	68 2f       	mov	r22, r24
    2d1c:	6c 29       	or	r22, r12
    2d1e:	82 e0       	ldi	r24, 0x02	; 2
    2d20:	0e 94 8a 1a 	call	0x3514	; 0x3514 <RcSetReg>
    2d24:	83 e0       	ldi	r24, 0x03	; 3
    2d26:	0e 94 9e 1a 	call	0x353c	; 0x353c <RcGetReg>
    2d2a:	68 2f       	mov	r22, r24
    2d2c:	83 e0       	ldi	r24, 0x03	; 3
    2d2e:	0e 94 8a 1a 	call	0x3514	; 0x3514 <RcSetReg>
    2d32:	d1 2c       	mov	r13, r1
    2d34:	e0 91 31 05 	lds	r30, 0x0531	; 0x800531 <MpIsrInfo>
    2d38:	f0 91 32 05 	lds	r31, 0x0532	; 0x800532 <MpIsrInfo+0x1>
    2d3c:	83 81       	ldd	r24, Z+3	; 0x03
    2d3e:	d8 16       	cp	r13, r24
    2d40:	48 f4       	brcc	.+18     	; 0x2d54 <M522PcdCmd+0xc8>
    2d42:	f7 01       	movw	r30, r14
    2d44:	ed 0d       	add	r30, r13
    2d46:	f1 1d       	adc	r31, r1
    2d48:	60 81       	ld	r22, Z
    2d4a:	89 e0       	ldi	r24, 0x09	; 9
    2d4c:	0e 94 8a 1a 	call	0x3514	; 0x3514 <RcSetReg>
    2d50:	d3 94       	inc	r13
    2d52:	f0 cf       	rjmp	.-32     	; 0x2d34 <M522PcdCmd+0xa8>
    2d54:	1c 30       	cpi	r17, 0x0C	; 12
    2d56:	31 f4       	brne	.+12     	; 0x2d64 <M522PcdCmd+0xd8>
    2d58:	40 e8       	ldi	r20, 0x80	; 128
    2d5a:	61 e0       	ldi	r22, 0x01	; 1
    2d5c:	8d e0       	ldi	r24, 0x0D	; 13
    2d5e:	0e 94 a8 1a 	call	0x3550	; 0x3550 <RcModifyReg>
    2d62:	09 c0       	rjmp	.+18     	; 0x2d76 <M522PcdCmd+0xea>
    2d64:	81 e0       	ldi	r24, 0x01	; 1
    2d66:	0e 94 9e 1a 	call	0x353c	; 0x353c <RcGetReg>
    2d6a:	80 7f       	andi	r24, 0xF0	; 240
    2d6c:	68 2f       	mov	r22, r24
    2d6e:	61 2b       	or	r22, r17
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	0e 94 8a 1a 	call	0x3514	; 0x3514 <RcSetReg>
    2d76:	aa 24       	eor	r10, r10
    2d78:	a3 94       	inc	r10
    2d7a:	ba 2c       	mov	r11, r10
    2d7c:	10 e0       	ldi	r17, 0x00	; 0
    2d7e:	00 23       	and	r16, r16
    2d80:	71 f0       	breq	.+28     	; 0x2d9e <M522PcdCmd+0x112>
    2d82:	81 2f       	mov	r24, r17
    2d84:	80 23       	and	r24, r16
    2d86:	59 f4       	brne	.+22     	; 0x2d9e <M522PcdCmd+0x112>
    2d88:	84 e0       	ldi	r24, 0x04	; 4
    2d8a:	0e 94 9e 1a 	call	0x353c	; 0x353c <RcGetReg>
    2d8e:	18 2f       	mov	r17, r24
    2d90:	85 e0       	ldi	r24, 0x05	; 5
    2d92:	0e 94 9e 1a 	call	0x353c	; 0x353c <RcGetReg>
    2d96:	81 e0       	ldi	r24, 0x01	; 1
    2d98:	a8 1a       	sub	r10, r24
    2d9a:	b1 08       	sbc	r11, r1
    2d9c:	81 f7       	brne	.-32     	; 0x2d7e <M522PcdCmd+0xf2>
    2d9e:	01 23       	and	r16, r17
    2da0:	11 70       	andi	r17, 0x01	; 1
    2da2:	c1 2f       	mov	r28, r17
    2da4:	e0 e0       	ldi	r30, 0x00	; 0
    2da6:	de 2f       	mov	r29, r30
    2da8:	05 c0       	rjmp	.+10     	; 0x2db4 <M522PcdCmd+0x128>
    2daa:	91 2c       	mov	r9, r1
    2dac:	c1 2c       	mov	r12, r1
    2dae:	02 e4       	ldi	r16, 0x42	; 66
    2db0:	c3 e0       	ldi	r28, 0x03	; 3
    2db2:	d1 e0       	ldi	r29, 0x01	; 1
    2db4:	4c 2d       	mov	r20, r12
    2db6:	60 e0       	ldi	r22, 0x00	; 0
    2db8:	82 e0       	ldi	r24, 0x02	; 2
    2dba:	0e 94 a8 1a 	call	0x3550	; 0x3550 <RcModifyReg>
    2dbe:	40 e0       	ldi	r20, 0x00	; 0
    2dc0:	60 e0       	ldi	r22, 0x00	; 0
    2dc2:	83 e0       	ldi	r24, 0x03	; 3
    2dc4:	0e 94 a8 1a 	call	0x3550	; 0x3550 <RcModifyReg>
    2dc8:	99 20       	and	r9, r9
    2dca:	09 f4       	brne	.+2      	; 0x2dce <M522PcdCmd+0x142>
    2dcc:	7e c0       	rjmp	.+252    	; 0x2eca <M522PcdCmd+0x23e>
    2dce:	20 97       	sbiw	r28, 0x00	; 0
    2dd0:	09 f0       	breq	.+2      	; 0x2dd4 <M522PcdCmd+0x148>
    2dd2:	7b c0       	rjmp	.+246    	; 0x2eca <M522PcdCmd+0x23e>
    2dd4:	c0 90 31 05 	lds	r12, 0x0531	; 0x800531 <MpIsrInfo>
    2dd8:	d0 90 32 05 	lds	r13, 0x0532	; 0x800532 <MpIsrInfo+0x1>
    2ddc:	8a e0       	ldi	r24, 0x0A	; 10
    2dde:	0e 94 9e 1a 	call	0x353c	; 0x353c <RcGetReg>
    2de2:	f6 01       	movw	r30, r12
    2de4:	84 83       	std	Z+4, r24	; 0x04
    2de6:	8c e0       	ldi	r24, 0x0C	; 12
    2de8:	0e 94 9e 1a 	call	0x353c	; 0x353c <RcGetReg>
    2dec:	e0 91 31 05 	lds	r30, 0x0531	; 0x800531 <MpIsrInfo>
    2df0:	f0 91 32 05 	lds	r31, 0x0532	; 0x800532 <MpIsrInfo+0x1>
    2df4:	87 70       	andi	r24, 0x07	; 7
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	96 83       	std	Z+6, r25	; 0x06
    2dfa:	85 83       	std	Z+5, r24	; 0x05
    2dfc:	86 e0       	ldi	r24, 0x06	; 6
    2dfe:	0e 94 9e 1a 	call	0x353c	; 0x353c <RcGetReg>
    2e02:	18 2f       	mov	r17, r24
    2e04:	88 23       	and	r24, r24
    2e06:	09 f4       	brne	.+2      	; 0x2e0a <M522PcdCmd+0x17e>
    2e08:	46 c0       	rjmp	.+140    	; 0x2e96 <M522PcdCmd+0x20a>
    2e0a:	83 fd       	sbrc	r24, 3
    2e0c:	05 c0       	rjmp	.+10     	; 0x2e18 <M522PcdCmd+0x18c>
    2e0e:	81 ff       	sbrs	r24, 1
    2e10:	05 c0       	rjmp	.+10     	; 0x2e1c <M522PcdCmd+0x190>
    2e12:	c3 e0       	ldi	r28, 0x03	; 3
    2e14:	d0 e0       	ldi	r29, 0x00	; 0
    2e16:	02 c0       	rjmp	.+4      	; 0x2e1c <M522PcdCmd+0x190>
    2e18:	c6 e0       	ldi	r28, 0x06	; 6
    2e1a:	d0 e0       	ldi	r29, 0x00	; 0
    2e1c:	10 fd       	sbrc	r17, 0
    2e1e:	22 c0       	rjmp	.+68     	; 0x2e64 <M522PcdCmd+0x1d8>
    2e20:	14 fd       	sbrc	r17, 4
    2e22:	23 c0       	rjmp	.+70     	; 0x2e6a <M522PcdCmd+0x1de>
    2e24:	12 ff       	sbrs	r17, 2
    2e26:	19 c0       	rjmp	.+50     	; 0x2e5a <M522PcdCmd+0x1ce>
    2e28:	e0 91 31 05 	lds	r30, 0x0531	; 0x800531 <MpIsrInfo>
    2e2c:	f0 91 32 05 	lds	r31, 0x0532	; 0x800532 <MpIsrInfo+0x1>
    2e30:	c4 81       	ldd	r28, Z+4	; 0x04
    2e32:	c1 30       	cpi	r28, 0x01	; 1
    2e34:	e9 f4       	brne	.+58     	; 0x2e70 <M522PcdCmd+0x1e4>
    2e36:	85 81       	ldd	r24, Z+5	; 0x05
    2e38:	96 81       	ldd	r25, Z+6	; 0x06
    2e3a:	8b 7f       	andi	r24, 0xFB	; 251
    2e3c:	89 2b       	or	r24, r25
    2e3e:	c1 f4       	brne	.+48     	; 0x2e70 <M522PcdCmd+0x1e4>
    2e40:	89 e0       	ldi	r24, 0x09	; 9
    2e42:	0e 94 9e 1a 	call	0x353c	; 0x353c <RcGetReg>
    2e46:	f7 01       	movw	r30, r14
    2e48:	80 83       	st	Z, r24
    2e4a:	e0 91 31 05 	lds	r30, 0x0531	; 0x800531 <MpIsrInfo>
    2e4e:	f0 91 32 05 	lds	r31, 0x0532	; 0x800532 <MpIsrInfo+0x1>
    2e52:	c4 83       	std	Z+4, r28	; 0x04
    2e54:	c2 e0       	ldi	r28, 0x02	; 2
    2e56:	d2 e0       	ldi	r29, 0x02	; 2
    2e58:	0d c0       	rjmp	.+26     	; 0x2e74 <M522PcdCmd+0x1e8>
    2e5a:	16 ff       	sbrs	r17, 6
    2e5c:	0b c0       	rjmp	.+22     	; 0x2e74 <M522PcdCmd+0x1e8>
    2e5e:	c4 e0       	ldi	r28, 0x04	; 4
    2e60:	de e7       	ldi	r29, 0x7E	; 126
    2e62:	08 c0       	rjmp	.+16     	; 0x2e74 <M522PcdCmd+0x1e8>
    2e64:	cb e0       	ldi	r28, 0x0B	; 11
    2e66:	d0 e0       	ldi	r29, 0x00	; 0
    2e68:	05 c0       	rjmp	.+10     	; 0x2e74 <M522PcdCmd+0x1e8>
    2e6a:	c9 e0       	ldi	r28, 0x09	; 9
    2e6c:	d0 e0       	ldi	r29, 0x00	; 0
    2e6e:	02 c0       	rjmp	.+4      	; 0x2e74 <M522PcdCmd+0x1e8>
    2e70:	c2 e0       	ldi	r28, 0x02	; 2
    2e72:	d0 e0       	ldi	r29, 0x00	; 0
    2e74:	17 fd       	sbrc	r17, 7
    2e76:	05 c0       	rjmp	.+10     	; 0x2e82 <M522PcdCmd+0x1f6>
    2e78:	20 97       	sbiw	r28, 0x00	; 0
    2e7a:	29 f4       	brne	.+10     	; 0x2e86 <M522PcdCmd+0x1fa>
    2e7c:	cc e0       	ldi	r28, 0x0C	; 12
    2e7e:	d0 e0       	ldi	r29, 0x00	; 0
    2e80:	02 c0       	rjmp	.+4      	; 0x2e86 <M522PcdCmd+0x1fa>
    2e82:	cd e0       	ldi	r28, 0x0D	; 13
    2e84:	d0 e0       	ldi	r29, 0x00	; 0
    2e86:	60 e0       	ldi	r22, 0x00	; 0
    2e88:	86 e0       	ldi	r24, 0x06	; 6
    2e8a:	0e 94 8a 1a 	call	0x3514	; 0x3514 <RcSetReg>
    2e8e:	c2 30       	cpi	r28, 0x02	; 2
    2e90:	f2 e0       	ldi	r31, 0x02	; 2
    2e92:	df 07       	cpc	r29, r31
    2e94:	d1 f0       	breq	.+52     	; 0x2eca <M522PcdCmd+0x23e>
    2e96:	10 e0       	ldi	r17, 0x00	; 0
    2e98:	e0 91 31 05 	lds	r30, 0x0531	; 0x800531 <MpIsrInfo>
    2e9c:	f0 91 32 05 	lds	r31, 0x0532	; 0x800532 <MpIsrInfo+0x1>
    2ea0:	84 81       	ldd	r24, Z+4	; 0x04
    2ea2:	18 17       	cp	r17, r24
    2ea4:	50 f4       	brcc	.+20     	; 0x2eba <M522PcdCmd+0x22e>
    2ea6:	67 01       	movw	r12, r14
    2ea8:	c1 0e       	add	r12, r17
    2eaa:	d1 1c       	adc	r13, r1
    2eac:	89 e0       	ldi	r24, 0x09	; 9
    2eae:	0e 94 9e 1a 	call	0x353c	; 0x353c <RcGetReg>
    2eb2:	f6 01       	movw	r30, r12
    2eb4:	80 83       	st	Z, r24
    2eb6:	1f 5f       	subi	r17, 0xFF	; 255
    2eb8:	ef cf       	rjmp	.-34     	; 0x2e98 <M522PcdCmd+0x20c>
    2eba:	25 81       	ldd	r18, Z+5	; 0x05
    2ebc:	36 81       	ldd	r19, Z+6	; 0x06
    2ebe:	23 2b       	or	r18, r19
    2ec0:	21 f0       	breq	.+8      	; 0x2eca <M522PcdCmd+0x23e>
    2ec2:	88 23       	and	r24, r24
    2ec4:	11 f0       	breq	.+4      	; 0x2eca <M522PcdCmd+0x23e>
    2ec6:	81 50       	subi	r24, 0x01	; 1
    2ec8:	84 83       	std	Z+4, r24	; 0x04
    2eca:	60 2f       	mov	r22, r16
    2ecc:	84 e0       	ldi	r24, 0x04	; 4
    2ece:	0e 94 8a 1a 	call	0x3514	; 0x3514 <RcSetReg>
    2ed2:	60 e0       	ldi	r22, 0x00	; 0
    2ed4:	85 e0       	ldi	r24, 0x05	; 5
    2ed6:	0e 94 8a 1a 	call	0x3514	; 0x3514 <RcSetReg>
    2eda:	60 e8       	ldi	r22, 0x80	; 128
    2edc:	8a e0       	ldi	r24, 0x0A	; 10
    2ede:	0e 94 8a 1a 	call	0x3514	; 0x3514 <RcSetReg>
    2ee2:	61 e0       	ldi	r22, 0x01	; 1
    2ee4:	84 e0       	ldi	r24, 0x04	; 4
    2ee6:	0e 94 8a 1a 	call	0x3514	; 0x3514 <RcSetReg>
    2eea:	60 e0       	ldi	r22, 0x00	; 0
    2eec:	8d e0       	ldi	r24, 0x0D	; 13
    2eee:	0e 94 8a 1a 	call	0x3514	; 0x3514 <RcSetReg>
    2ef2:	ce 01       	movw	r24, r28
    2ef4:	df 91       	pop	r29
    2ef6:	cf 91       	pop	r28
    2ef8:	1f 91       	pop	r17
    2efa:	0f 91       	pop	r16
    2efc:	ff 90       	pop	r15
    2efe:	ef 90       	pop	r14
    2f00:	df 90       	pop	r13
    2f02:	cf 90       	pop	r12
    2f04:	bf 90       	pop	r11
    2f06:	af 90       	pop	r10
    2f08:	9f 90       	pop	r9
    2f0a:	08 95       	ret

00002f0c <Request>:
    2f0c:	1f 93       	push	r17
    2f0e:	cf 93       	push	r28
    2f10:	df 93       	push	r29
    2f12:	18 2f       	mov	r17, r24
    2f14:	eb 01       	movw	r28, r22
    2f16:	48 e0       	ldi	r20, 0x08	; 8
    2f18:	60 e0       	ldi	r22, 0x00	; 0
    2f1a:	88 e0       	ldi	r24, 0x08	; 8
    2f1c:	0e 94 a8 1a 	call	0x3550	; 0x3550 <RcModifyReg>
    2f20:	60 e8       	ldi	r22, 0x80	; 128
    2f22:	8e e0       	ldi	r24, 0x0E	; 14
    2f24:	0e 94 8a 1a 	call	0x3514	; 0x3514 <RcSetReg>
    2f28:	40 e8       	ldi	r20, 0x80	; 128
    2f2a:	60 e0       	ldi	r22, 0x00	; 0
    2f2c:	82 e1       	ldi	r24, 0x12	; 18
    2f2e:	0e 94 a8 1a 	call	0x3550	; 0x3550 <RcModifyReg>
    2f32:	40 e8       	ldi	r20, 0x80	; 128
    2f34:	60 e0       	ldi	r22, 0x00	; 0
    2f36:	83 e1       	ldi	r24, 0x13	; 19
    2f38:	0e 94 a8 1a 	call	0x3550	; 0x3550 <RcModifyReg>
    2f3c:	67 e0       	ldi	r22, 0x07	; 7
    2f3e:	8d e0       	ldi	r24, 0x0D	; 13
    2f40:	0e 94 8a 1a 	call	0x3514	; 0x3514 <RcSetReg>
    2f44:	10 92 24 0b 	sts	0x0B24, r1	; 0x800b24 <MInfo>
    2f48:	10 92 25 0b 	sts	0x0B25, r1	; 0x800b25 <MInfo+0x1>
    2f4c:	10 92 26 0b 	sts	0x0B26, r1	; 0x800b26 <MInfo+0x2>
    2f50:	10 92 28 0b 	sts	0x0B28, r1	; 0x800b28 <MInfo+0x4>
    2f54:	10 92 2a 0b 	sts	0x0B2A, r1	; 0x800b2a <MInfo+0x6>
    2f58:	10 92 29 0b 	sts	0x0B29, r1	; 0x800b29 <MInfo+0x5>
    2f5c:	10 92 2b 0b 	sts	0x0B2B, r1	; 0x800b2b <MInfo+0x7>
    2f60:	10 93 10 0b 	sts	0x0B10, r17	; 0x800b10 <SerBuffer>
    2f64:	81 e0       	ldi	r24, 0x01	; 1
    2f66:	80 93 27 0b 	sts	0x0B27, r24	; 0x800b27 <MInfo+0x3>
    2f6a:	80 e9       	ldi	r24, 0x90	; 144
    2f6c:	91 e0       	ldi	r25, 0x01	; 1
    2f6e:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <SetTimeOut>
    2f72:	44 e2       	ldi	r20, 0x24	; 36
    2f74:	5b e0       	ldi	r21, 0x0B	; 11
    2f76:	60 e1       	ldi	r22, 0x10	; 16
    2f78:	7b e0       	ldi	r23, 0x0B	; 11
    2f7a:	8c e0       	ldi	r24, 0x0C	; 12
    2f7c:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <M522PcdCmd>
    2f80:	88 23       	and	r24, r24
    2f82:	11 f0       	breq	.+4      	; 0x2f88 <Request+0x7c>
    2f84:	86 30       	cpi	r24, 0x06	; 6
    2f86:	89 f4       	brne	.+34     	; 0x2faa <Request+0x9e>
    2f88:	90 91 28 0b 	lds	r25, 0x0B28	; 0x800b28 <MInfo+0x4>
    2f8c:	92 30       	cpi	r25, 0x02	; 2
    2f8e:	81 f4       	brne	.+32     	; 0x2fb0 <Request+0xa4>
    2f90:	20 91 29 0b 	lds	r18, 0x0B29	; 0x800b29 <MInfo+0x5>
    2f94:	30 91 2a 0b 	lds	r19, 0x0B2A	; 0x800b2a <MInfo+0x6>
    2f98:	23 2b       	or	r18, r19
    2f9a:	51 f4       	brne	.+20     	; 0x2fb0 <Request+0xa4>
    2f9c:	20 91 10 0b 	lds	r18, 0x0B10	; 0x800b10 <SerBuffer>
    2fa0:	30 91 11 0b 	lds	r19, 0x0B11	; 0x800b11 <SerBuffer+0x1>
    2fa4:	39 83       	std	Y+1, r19	; 0x01
    2fa6:	28 83       	st	Y, r18
    2fa8:	04 c0       	rjmp	.+8      	; 0x2fb2 <Request+0xa6>
    2faa:	18 82       	st	Y, r1
    2fac:	19 82       	std	Y+1, r1	; 0x01
    2fae:	01 c0       	rjmp	.+2      	; 0x2fb2 <Request+0xa6>
    2fb0:	8b e0       	ldi	r24, 0x0B	; 11
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	df 91       	pop	r29
    2fb6:	cf 91       	pop	r28
    2fb8:	1f 91       	pop	r17
    2fba:	08 95       	ret

00002fbc <CascAnticoll>:
    2fbc:	6f 92       	push	r6
    2fbe:	7f 92       	push	r7
    2fc0:	9f 92       	push	r9
    2fc2:	af 92       	push	r10
    2fc4:	bf 92       	push	r11
    2fc6:	cf 92       	push	r12
    2fc8:	df 92       	push	r13
    2fca:	ef 92       	push	r14
    2fcc:	ff 92       	push	r15
    2fce:	0f 93       	push	r16
    2fd0:	1f 93       	push	r17
    2fd2:	cf 93       	push	r28
    2fd4:	df 93       	push	r29
    2fd6:	1f 92       	push	r1
    2fd8:	cd b7       	in	r28, 0x3d	; 61
    2fda:	de b7       	in	r29, 0x3e	; 62
    2fdc:	e8 2e       	mov	r14, r24
    2fde:	f6 2e       	mov	r15, r22
    2fe0:	3a 01       	movw	r6, r20
    2fe2:	10 92 12 0b 	sts	0x0B12, r1	; 0x800b12 <SerBuffer+0x2>
    2fe6:	10 92 13 0b 	sts	0x0B13, r1	; 0x800b13 <SerBuffer+0x3>
    2fea:	10 92 14 0b 	sts	0x0B14, r1	; 0x800b14 <SerBuffer+0x4>
    2fee:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <SerBuffer+0x5>
    2ff2:	10 92 16 0b 	sts	0x0B16, r1	; 0x800b16 <SerBuffer+0x6>
    2ff6:	40 e8       	ldi	r20, 0x80	; 128
    2ff8:	60 e0       	ldi	r22, 0x00	; 0
    2ffa:	82 e1       	ldi	r24, 0x12	; 18
    2ffc:	0e 94 a8 1a 	call	0x3550	; 0x3550 <RcModifyReg>
    3000:	40 e8       	ldi	r20, 0x80	; 128
    3002:	60 e0       	ldi	r22, 0x00	; 0
    3004:	83 e1       	ldi	r24, 0x13	; 19
    3006:	0e 94 a8 1a 	call	0x3550	; 0x3550 <RcModifyReg>
    300a:	60 e0       	ldi	r22, 0x00	; 0
    300c:	8e e0       	ldi	r24, 0x0E	; 14
    300e:	0e 94 8a 1a 	call	0x3514	; 0x3514 <RcSetReg>
    3012:	b6 2c       	mov	r11, r6
    3014:	84 e0       	ldi	r24, 0x04	; 4
    3016:	c8 2e       	mov	r12, r24
    3018:	d1 2c       	mov	r13, r1
    301a:	30 e2       	ldi	r19, 0x20	; 32
    301c:	3f 15       	cp	r19, r15
    301e:	08 f4       	brcc	.+2      	; 0x3022 <CascAnticoll+0x66>
    3020:	a9 c0       	rjmp	.+338    	; 0x3174 <CascAnticoll+0x1b8>
    3022:	2f 2d       	mov	r18, r15
    3024:	27 70       	andi	r18, 0x07	; 7
    3026:	9f 2d       	mov	r25, r15
    3028:	96 95       	lsr	r25
    302a:	96 95       	lsr	r25
    302c:	96 95       	lsr	r25
    302e:	22 23       	and	r18, r18
    3030:	21 f0       	breq	.+8      	; 0x303a <CascAnticoll+0x7e>
    3032:	aa 24       	eor	r10, r10
    3034:	a3 94       	inc	r10
    3036:	a9 0e       	add	r10, r25
    3038:	01 c0       	rjmp	.+2      	; 0x303c <CascAnticoll+0x80>
    303a:	a9 2e       	mov	r10, r25
    303c:	e0 92 10 0b 	sts	0x0B10, r14	; 0x800b10 <SerBuffer>
    3040:	80 e2       	ldi	r24, 0x20	; 32
    3042:	82 0f       	add	r24, r18
    3044:	e0 e1       	ldi	r30, 0x10	; 16
    3046:	9e 9f       	mul	r25, r30
    3048:	80 0d       	add	r24, r0
    304a:	11 24       	eor	r1, r1
    304c:	80 93 11 0b 	sts	0x0B11, r24	; 0x800b11 <SerBuffer+0x1>
    3050:	a2 e1       	ldi	r26, 0x12	; 18
    3052:	bb e0       	ldi	r27, 0x0B	; 11
    3054:	f3 01       	movw	r30, r6
    3056:	8e 2f       	mov	r24, r30
    3058:	8b 19       	sub	r24, r11
    305a:	8a 15       	cp	r24, r10
    305c:	18 f4       	brcc	.+6      	; 0x3064 <CascAnticoll+0xa8>
    305e:	81 91       	ld	r24, Z+
    3060:	8d 93       	st	X+, r24
    3062:	f9 cf       	rjmp	.-14     	; 0x3056 <CascAnticoll+0x9a>
    3064:	f0 e1       	ldi	r31, 0x10	; 16
    3066:	2f 9f       	mul	r18, r31
    3068:	b0 01       	movw	r22, r0
    306a:	11 24       	eor	r1, r1
    306c:	62 2b       	or	r22, r18
    306e:	8d e0       	ldi	r24, 0x0D	; 13
    3070:	29 83       	std	Y+1, r18	; 0x01
    3072:	0e 94 8a 1a 	call	0x3514	; 0x3514 <RcSetReg>
    3076:	10 92 24 0b 	sts	0x0B24, r1	; 0x800b24 <MInfo>
    307a:	10 92 25 0b 	sts	0x0B25, r1	; 0x800b25 <MInfo+0x1>
    307e:	10 92 26 0b 	sts	0x0B26, r1	; 0x800b26 <MInfo+0x2>
    3082:	10 92 28 0b 	sts	0x0B28, r1	; 0x800b28 <MInfo+0x4>
    3086:	10 92 2a 0b 	sts	0x0B2A, r1	; 0x800b2a <MInfo+0x6>
    308a:	10 92 29 0b 	sts	0x0B29, r1	; 0x800b29 <MInfo+0x5>
    308e:	10 92 2b 0b 	sts	0x0B2B, r1	; 0x800b2b <MInfo+0x7>
    3092:	82 e0       	ldi	r24, 0x02	; 2
    3094:	8a 0d       	add	r24, r10
    3096:	80 93 27 0b 	sts	0x0B27, r24	; 0x800b27 <MInfo+0x3>
    309a:	80 e1       	ldi	r24, 0x10	; 16
    309c:	97 e2       	ldi	r25, 0x27	; 39
    309e:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <SetTimeOut>
    30a2:	44 e2       	ldi	r20, 0x24	; 36
    30a4:	5b e0       	ldi	r21, 0x0B	; 11
    30a6:	60 e1       	ldi	r22, 0x10	; 16
    30a8:	7b e0       	ldi	r23, 0x0B	; 11
    30aa:	8c e0       	ldi	r24, 0x0C	; 12
    30ac:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <M522PcdCmd>
    30b0:	8c 01       	movw	r16, r24
    30b2:	29 81       	ldd	r18, Y+1	; 0x01
    30b4:	86 30       	cpi	r24, 0x06	; 6
    30b6:	91 05       	cpc	r25, r1
    30b8:	19 f0       	breq	.+6      	; 0x30c0 <CascAnticoll+0x104>
    30ba:	89 2b       	or	r24, r25
    30bc:	09 f0       	breq	.+2      	; 0x30c0 <CascAnticoll+0x104>
    30be:	5f c0       	rjmp	.+190    	; 0x317e <CascAnticoll+0x1c2>
    30c0:	60 91 29 0b 	lds	r22, 0x0B29	; 0x800b29 <MInfo+0x5>
    30c4:	70 91 2a 0b 	lds	r23, 0x0B2A	; 0x800b2a <MInfo+0x6>
    30c8:	80 91 28 0b 	lds	r24, 0x0B28	; 0x800b28 <MInfo+0x4>
    30cc:	a6 2f       	mov	r26, r22
    30ce:	38 e0       	ldi	r19, 0x08	; 8
    30d0:	83 9f       	mul	r24, r19
    30d2:	a0 0d       	add	r26, r0
    30d4:	11 24       	eor	r1, r1
    30d6:	a2 1b       	sub	r26, r18
    30d8:	4f 2d       	mov	r20, r15
    30da:	50 e0       	ldi	r21, 0x00	; 0
    30dc:	4a 0f       	add	r20, r26
    30de:	51 1d       	adc	r21, r1
    30e0:	49 32       	cpi	r20, 0x29	; 41
    30e2:	51 05       	cpc	r21, r1
    30e4:	0c f0       	brlt	.+2      	; 0x30e8 <CascAnticoll+0x12c>
    30e6:	49 c0       	rjmp	.+146    	; 0x317a <CascAnticoll+0x1be>
    30e8:	67 2b       	or	r22, r23
    30ea:	19 f0       	breq	.+6      	; 0x30f2 <CascAnticoll+0x136>
    30ec:	8f 5f       	subi	r24, 0xFF	; 255
    30ee:	80 93 28 0b 	sts	0x0B28, r24	; 0x800b28 <MInfo+0x4>
    30f2:	4a 2d       	mov	r20, r10
    30f4:	50 e0       	ldi	r21, 0x00	; 0
    30f6:	22 23       	and	r18, r18
    30f8:	59 f0       	breq	.+22     	; 0x3110 <CascAnticoll+0x154>
    30fa:	fa 01       	movw	r30, r20
    30fc:	31 97       	sbiw	r30, 0x01	; 1
    30fe:	e6 0d       	add	r30, r6
    3100:	f7 1d       	adc	r31, r7
    3102:	90 81       	ld	r25, Z
    3104:	80 91 10 0b 	lds	r24, 0x0B10	; 0x800b10 <SerBuffer>
    3108:	89 2b       	or	r24, r25
    310a:	80 83       	st	Z, r24
    310c:	b1 e0       	ldi	r27, 0x01	; 1
    310e:	01 c0       	rjmp	.+2      	; 0x3112 <CascAnticoll+0x156>
    3110:	b0 e0       	ldi	r27, 0x00	; 0
    3112:	a1 2c       	mov	r10, r1
    3114:	c6 01       	movw	r24, r12
    3116:	84 1b       	sub	r24, r20
    3118:	95 0b       	sbc	r25, r21
    311a:	6b 2f       	mov	r22, r27
    311c:	70 e0       	ldi	r23, 0x00	; 0
    311e:	2a 2d       	mov	r18, r10
    3120:	30 e0       	ldi	r19, 0x00	; 0
    3122:	28 17       	cp	r18, r24
    3124:	39 07       	cpc	r19, r25
    3126:	74 f4       	brge	.+28     	; 0x3144 <CascAnticoll+0x188>
    3128:	f9 01       	movw	r30, r18
    312a:	e0 5f       	subi	r30, 0xF0	; 240
    312c:	f4 4f       	sbci	r31, 0xF4	; 244
    312e:	e6 0f       	add	r30, r22
    3130:	f7 1f       	adc	r31, r23
    3132:	90 80       	ld	r9, Z
    3134:	26 0d       	add	r18, r6
    3136:	37 1d       	adc	r19, r7
    3138:	f9 01       	movw	r30, r18
    313a:	e4 0f       	add	r30, r20
    313c:	f5 1f       	adc	r31, r21
    313e:	90 82       	st	Z, r9
    3140:	a3 94       	inc	r10
    3142:	ed cf       	rjmp	.-38     	; 0x311e <CascAnticoll+0x162>
    3144:	06 30       	cpi	r16, 0x06	; 6
    3146:	11 05       	cpc	r17, r1
    3148:	11 f4       	brne	.+4      	; 0x314e <CascAnticoll+0x192>
    314a:	fa 0e       	add	r15, r26
    314c:	66 cf       	rjmp	.-308    	; 0x301a <CascAnticoll+0x5e>
    314e:	f3 01       	movw	r30, r6
    3150:	91 81       	ldd	r25, Z+1	; 0x01
    3152:	80 81       	ld	r24, Z
    3154:	89 27       	eor	r24, r25
    3156:	92 81       	ldd	r25, Z+2	; 0x02
    3158:	89 27       	eor	r24, r25
    315a:	93 81       	ldd	r25, Z+3	; 0x03
    315c:	89 27       	eor	r24, r25
    315e:	20 5f       	subi	r18, 0xF0	; 240
    3160:	34 4f       	sbci	r19, 0xF4	; 244
    3162:	f9 01       	movw	r30, r18
    3164:	eb 0f       	add	r30, r27
    3166:	f1 1d       	adc	r31, r1
    3168:	90 81       	ld	r25, Z
    316a:	89 17       	cp	r24, r25
    316c:	41 f0       	breq	.+16     	; 0x317e <CascAnticoll+0x1c2>
    316e:	01 e0       	ldi	r16, 0x01	; 1
    3170:	15 e0       	ldi	r17, 0x05	; 5
    3172:	05 c0       	rjmp	.+10     	; 0x317e <CascAnticoll+0x1c2>
    3174:	01 e0       	ldi	r16, 0x01	; 1
    3176:	11 e0       	ldi	r17, 0x01	; 1
    3178:	02 c0       	rjmp	.+4      	; 0x317e <CascAnticoll+0x1c2>
    317a:	04 e0       	ldi	r16, 0x04	; 4
    317c:	10 e0       	ldi	r17, 0x00	; 0
    317e:	60 e0       	ldi	r22, 0x00	; 0
    3180:	8d e0       	ldi	r24, 0x0D	; 13
    3182:	0e 94 8a 1a 	call	0x3514	; 0x3514 <RcSetReg>
    3186:	60 e8       	ldi	r22, 0x80	; 128
    3188:	8e e0       	ldi	r24, 0x0E	; 14
    318a:	0e 94 8a 1a 	call	0x3514	; 0x3514 <RcSetReg>
    318e:	c8 01       	movw	r24, r16
    3190:	0f 90       	pop	r0
    3192:	df 91       	pop	r29
    3194:	cf 91       	pop	r28
    3196:	1f 91       	pop	r17
    3198:	0f 91       	pop	r16
    319a:	ff 90       	pop	r15
    319c:	ef 90       	pop	r14
    319e:	df 90       	pop	r13
    31a0:	cf 90       	pop	r12
    31a2:	bf 90       	pop	r11
    31a4:	af 90       	pop	r10
    31a6:	9f 90       	pop	r9
    31a8:	7f 90       	pop	r7
    31aa:	6f 90       	pop	r6
    31ac:	08 95       	ret

000031ae <Select>:
    31ae:	ff 92       	push	r15
    31b0:	0f 93       	push	r16
    31b2:	1f 93       	push	r17
    31b4:	cf 93       	push	r28
    31b6:	df 93       	push	r29
    31b8:	f8 2e       	mov	r15, r24
    31ba:	eb 01       	movw	r28, r22
    31bc:	8a 01       	movw	r16, r20
    31be:	40 e8       	ldi	r20, 0x80	; 128
    31c0:	61 e0       	ldi	r22, 0x01	; 1
    31c2:	82 e1       	ldi	r24, 0x12	; 18
    31c4:	0e 94 a8 1a 	call	0x3550	; 0x3550 <RcModifyReg>
    31c8:	40 e8       	ldi	r20, 0x80	; 128
    31ca:	61 e0       	ldi	r22, 0x01	; 1
    31cc:	83 e1       	ldi	r24, 0x13	; 19
    31ce:	0e 94 a8 1a 	call	0x3550	; 0x3550 <RcModifyReg>
    31d2:	f0 92 10 0b 	sts	0x0B10, r15	; 0x800b10 <SerBuffer>
    31d6:	80 e7       	ldi	r24, 0x70	; 112
    31d8:	80 93 11 0b 	sts	0x0B11, r24	; 0x800b11 <SerBuffer+0x1>
    31dc:	fe 01       	movw	r30, r28
    31de:	a2 e1       	ldi	r26, 0x12	; 18
    31e0:	bb e0       	ldi	r27, 0x0B	; 11
    31e2:	ce 01       	movw	r24, r28
    31e4:	04 96       	adiw	r24, 0x04	; 4
    31e6:	21 91       	ld	r18, Z+
    31e8:	2d 93       	st	X+, r18
    31ea:	e8 17       	cp	r30, r24
    31ec:	f9 07       	cpc	r31, r25
    31ee:	d9 f7       	brne	.-10     	; 0x31e6 <Select+0x38>
    31f0:	99 81       	ldd	r25, Y+1	; 0x01
    31f2:	88 81       	ld	r24, Y
    31f4:	89 27       	eor	r24, r25
    31f6:	9a 81       	ldd	r25, Y+2	; 0x02
    31f8:	89 27       	eor	r24, r25
    31fa:	9b 81       	ldd	r25, Y+3	; 0x03
    31fc:	89 27       	eor	r24, r25
    31fe:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <SerBuffer+0x6>
    3202:	10 92 24 0b 	sts	0x0B24, r1	; 0x800b24 <MInfo>
    3206:	10 92 25 0b 	sts	0x0B25, r1	; 0x800b25 <MInfo+0x1>
    320a:	10 92 26 0b 	sts	0x0B26, r1	; 0x800b26 <MInfo+0x2>
    320e:	10 92 28 0b 	sts	0x0B28, r1	; 0x800b28 <MInfo+0x4>
    3212:	10 92 2a 0b 	sts	0x0B2A, r1	; 0x800b2a <MInfo+0x6>
    3216:	10 92 29 0b 	sts	0x0B29, r1	; 0x800b29 <MInfo+0x5>
    321a:	10 92 2b 0b 	sts	0x0B2B, r1	; 0x800b2b <MInfo+0x7>
    321e:	87 e0       	ldi	r24, 0x07	; 7
    3220:	80 93 27 0b 	sts	0x0B27, r24	; 0x800b27 <MInfo+0x3>
    3224:	80 ed       	ldi	r24, 0xD0	; 208
    3226:	97 e0       	ldi	r25, 0x07	; 7
    3228:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <SetTimeOut>
    322c:	44 e2       	ldi	r20, 0x24	; 36
    322e:	5b e0       	ldi	r21, 0x0B	; 11
    3230:	60 e1       	ldi	r22, 0x10	; 16
    3232:	7b e0       	ldi	r23, 0x0B	; 11
    3234:	8c e0       	ldi	r24, 0x0C	; 12
    3236:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <M522PcdCmd>
    323a:	00 97       	sbiw	r24, 0x00	; 0
    323c:	89 f4       	brne	.+34     	; 0x3260 <Select+0xb2>
    323e:	20 91 28 0b 	lds	r18, 0x0B28	; 0x800b28 <MInfo+0x4>
    3242:	21 30       	cpi	r18, 0x01	; 1
    3244:	59 f4       	brne	.+22     	; 0x325c <Select+0xae>
    3246:	20 91 29 0b 	lds	r18, 0x0B29	; 0x800b29 <MInfo+0x5>
    324a:	30 91 2a 0b 	lds	r19, 0x0B2A	; 0x800b2a <MInfo+0x6>
    324e:	23 2b       	or	r18, r19
    3250:	29 f4       	brne	.+10     	; 0x325c <Select+0xae>
    3252:	20 91 10 0b 	lds	r18, 0x0B10	; 0x800b10 <SerBuffer>
    3256:	f8 01       	movw	r30, r16
    3258:	20 83       	st	Z, r18
    325a:	02 c0       	rjmp	.+4      	; 0x3260 <Select+0xb2>
    325c:	84 e0       	ldi	r24, 0x04	; 4
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	df 91       	pop	r29
    3262:	cf 91       	pop	r28
    3264:	1f 91       	pop	r17
    3266:	0f 91       	pop	r16
    3268:	ff 90       	pop	r15
    326a:	08 95       	ret

0000326c <AnticollSelect>:
    326c:	6f 92       	push	r6
    326e:	7f 92       	push	r7
    3270:	8f 92       	push	r8
    3272:	9f 92       	push	r9
    3274:	af 92       	push	r10
    3276:	bf 92       	push	r11
    3278:	cf 92       	push	r12
    327a:	df 92       	push	r13
    327c:	ef 92       	push	r14
    327e:	ff 92       	push	r15
    3280:	0f 93       	push	r16
    3282:	1f 93       	push	r17
    3284:	cf 93       	push	r28
    3286:	df 93       	push	r29
    3288:	cd b7       	in	r28, 0x3d	; 61
    328a:	de b7       	in	r29, 0x3e	; 62
    328c:	2d 97       	sbiw	r28, 0x0d	; 13
    328e:	0f b6       	in	r0, 0x3f	; 63
    3290:	f8 94       	cli
    3292:	de bf       	out	0x3e, r29	; 62
    3294:	0f be       	out	0x3f, r0	; 63
    3296:	cd bf       	out	0x3d, r28	; 61
    3298:	7b 01       	movw	r14, r22
    329a:	6a 01       	movw	r12, r20
    329c:	9e 01       	movw	r18, r28
    329e:	2f 5f       	subi	r18, 0xFF	; 255
    32a0:	3f 4f       	sbci	r19, 0xFF	; 255
    32a2:	59 01       	movw	r10, r18
    32a4:	20 e0       	ldi	r18, 0x00	; 0
    32a6:	30 e0       	ldi	r19, 0x00	; 0
    32a8:	10 e0       	ldi	r17, 0x00	; 0
    32aa:	88 23       	and	r24, r24
    32ac:	a1 f0       	breq	.+40     	; 0x32d6 <AnticollSelect+0x6a>
    32ae:	81 32       	cpi	r24, 0x21	; 33
    32b0:	40 f0       	brcs	.+16     	; 0x32c2 <AnticollSelect+0x56>
    32b2:	00 ee       	ldi	r16, 0xE0	; 224
    32b4:	08 0f       	add	r16, r24
    32b6:	11 30       	cpi	r17, 0x01	; 1
    32b8:	61 f0       	breq	.+24     	; 0x32d2 <AnticollSelect+0x66>
    32ba:	12 30       	cpi	r17, 0x02	; 2
    32bc:	71 f5       	brne	.+92     	; 0x331a <AnticollSelect+0xae>
    32be:	80 e2       	ldi	r24, 0x20	; 32
    32c0:	05 c0       	rjmp	.+10     	; 0x32cc <AnticollSelect+0x60>
    32c2:	11 30       	cpi	r17, 0x01	; 1
    32c4:	51 f0       	breq	.+20     	; 0x32da <AnticollSelect+0x6e>
    32c6:	12 30       	cpi	r17, 0x02	; 2
    32c8:	99 f4       	brne	.+38     	; 0x32f0 <AnticollSelect+0x84>
    32ca:	00 e0       	ldi	r16, 0x00	; 0
    32cc:	67 e9       	ldi	r22, 0x97	; 151
    32ce:	96 2e       	mov	r9, r22
    32d0:	12 c0       	rjmp	.+36     	; 0x32f6 <AnticollSelect+0x8a>
    32d2:	80 e2       	ldi	r24, 0x20	; 32
    32d4:	03 c0       	rjmp	.+6      	; 0x32dc <AnticollSelect+0x70>
    32d6:	11 30       	cpi	r17, 0x01	; 1
    32d8:	89 f4       	brne	.+34     	; 0x32fc <AnticollSelect+0x90>
    32da:	00 e0       	ldi	r16, 0x00	; 0
    32dc:	6a 80       	ldd	r6, Y+2	; 0x02
    32de:	7b 80       	ldd	r7, Y+3	; 0x03
    32e0:	8c 80       	ldd	r8, Y+4	; 0x04
    32e2:	f7 01       	movw	r30, r14
    32e4:	60 82       	st	Z, r6
    32e6:	71 82       	std	Z+1, r7	; 0x01
    32e8:	82 82       	std	Z+2, r8	; 0x02
    32ea:	55 e9       	ldi	r21, 0x95	; 149
    32ec:	95 2e       	mov	r9, r21
    32ee:	03 c0       	rjmp	.+6      	; 0x32f6 <AnticollSelect+0x8a>
    32f0:	00 e0       	ldi	r16, 0x00	; 0
    32f2:	43 e9       	ldi	r20, 0x93	; 147
    32f4:	94 2e       	mov	r9, r20
    32f6:	80 32       	cpi	r24, 0x20	; 32
    32f8:	31 f4       	brne	.+12     	; 0x3306 <AnticollSelect+0x9a>
    32fa:	11 c0       	rjmp	.+34     	; 0x331e <AnticollSelect+0xb2>
    32fc:	12 30       	cpi	r17, 0x02	; 2
    32fe:	29 f3       	breq	.-54     	; 0x32ca <AnticollSelect+0x5e>
    3300:	00 e0       	ldi	r16, 0x00	; 0
    3302:	93 e9       	ldi	r25, 0x93	; 147
    3304:	99 2e       	mov	r9, r25
    3306:	21 15       	cp	r18, r1
    3308:	31 05       	cpc	r19, r1
    330a:	09 f5       	brne	.+66     	; 0x334e <AnticollSelect+0xe2>
    330c:	a5 01       	movw	r20, r10
    330e:	68 2f       	mov	r22, r24
    3310:	89 2d       	mov	r24, r9
    3312:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <CascAnticoll>
    3316:	9c 01       	movw	r18, r24
    3318:	02 c0       	rjmp	.+4      	; 0x331e <AnticollSelect+0xb2>
    331a:	83 e9       	ldi	r24, 0x93	; 147
    331c:	98 2e       	mov	r9, r24
    331e:	21 15       	cp	r18, r1
    3320:	31 05       	cpc	r19, r1
    3322:	a9 f4       	brne	.+42     	; 0x334e <AnticollSelect+0xe2>
    3324:	ae 01       	movw	r20, r28
    3326:	43 5f       	subi	r20, 0xF3	; 243
    3328:	5f 4f       	sbci	r21, 0xFF	; 255
    332a:	b5 01       	movw	r22, r10
    332c:	89 2d       	mov	r24, r9
    332e:	0e 94 d7 18 	call	0x31ae	; 0x31ae <Select>
    3332:	9c 01       	movw	r18, r24
    3334:	89 2b       	or	r24, r25
    3336:	19 f4       	brne	.+6      	; 0x333e <AnticollSelect+0xd2>
    3338:	8d 85       	ldd	r24, Y+13	; 0x0d
    333a:	82 ff       	sbrs	r24, 2
    333c:	08 c0       	rjmp	.+16     	; 0x334e <AnticollSelect+0xe2>
    333e:	1f 5f       	subi	r17, 0xFF	; 255
    3340:	f4 e0       	ldi	r31, 0x04	; 4
    3342:	af 0e       	add	r10, r31
    3344:	b1 1c       	adc	r11, r1
    3346:	13 30       	cpi	r17, 0x03	; 3
    3348:	d1 f0       	breq	.+52     	; 0x337e <AnticollSelect+0x112>
    334a:	80 2f       	mov	r24, r16
    334c:	ae cf       	rjmp	.-164    	; 0x32aa <AnticollSelect+0x3e>
    334e:	11 30       	cpi	r17, 0x01	; 1
    3350:	61 f0       	breq	.+24     	; 0x336a <AnticollSelect+0xfe>
    3352:	12 30       	cpi	r17, 0x02	; 2
    3354:	a1 f4       	brne	.+40     	; 0x337e <AnticollSelect+0x112>
    3356:	8d 81       	ldd	r24, Y+5	; 0x05
    3358:	9e 81       	ldd	r25, Y+6	; 0x06
    335a:	af 81       	ldd	r26, Y+7	; 0x07
    335c:	b8 85       	ldd	r27, Y+8	; 0x08
    335e:	f7 01       	movw	r30, r14
    3360:	86 83       	std	Z+6, r24	; 0x06
    3362:	97 83       	std	Z+7, r25	; 0x07
    3364:	a0 87       	std	Z+8, r26	; 0x08
    3366:	b1 87       	std	Z+9, r27	; 0x09
    3368:	13 c0       	rjmp	.+38     	; 0x3390 <AnticollSelect+0x124>
    336a:	8d 81       	ldd	r24, Y+5	; 0x05
    336c:	9e 81       	ldd	r25, Y+6	; 0x06
    336e:	af 81       	ldd	r26, Y+7	; 0x07
    3370:	b8 85       	ldd	r27, Y+8	; 0x08
    3372:	f7 01       	movw	r30, r14
    3374:	83 83       	std	Z+3, r24	; 0x03
    3376:	94 83       	std	Z+4, r25	; 0x04
    3378:	a5 83       	std	Z+5, r26	; 0x05
    337a:	b6 83       	std	Z+6, r27	; 0x06
    337c:	09 c0       	rjmp	.+18     	; 0x3390 <AnticollSelect+0x124>
    337e:	89 81       	ldd	r24, Y+1	; 0x01
    3380:	9a 81       	ldd	r25, Y+2	; 0x02
    3382:	ab 81       	ldd	r26, Y+3	; 0x03
    3384:	bc 81       	ldd	r27, Y+4	; 0x04
    3386:	f7 01       	movw	r30, r14
    3388:	80 83       	st	Z, r24
    338a:	91 83       	std	Z+1, r25	; 0x01
    338c:	a2 83       	std	Z+2, r26	; 0x02
    338e:	b3 83       	std	Z+3, r27	; 0x03
    3390:	8d 85       	ldd	r24, Y+13	; 0x0d
    3392:	f6 01       	movw	r30, r12
    3394:	80 83       	st	Z, r24
    3396:	c9 01       	movw	r24, r18
    3398:	2d 96       	adiw	r28, 0x0d	; 13
    339a:	0f b6       	in	r0, 0x3f	; 63
    339c:	f8 94       	cli
    339e:	de bf       	out	0x3e, r29	; 62
    33a0:	0f be       	out	0x3f, r0	; 63
    33a2:	cd bf       	out	0x3d, r28	; 61
    33a4:	df 91       	pop	r29
    33a6:	cf 91       	pop	r28
    33a8:	1f 91       	pop	r17
    33aa:	0f 91       	pop	r16
    33ac:	ff 90       	pop	r15
    33ae:	ef 90       	pop	r14
    33b0:	df 90       	pop	r13
    33b2:	cf 90       	pop	r12
    33b4:	bf 90       	pop	r11
    33b6:	af 90       	pop	r10
    33b8:	9f 90       	pop	r9
    33ba:	8f 90       	pop	r8
    33bc:	7f 90       	pop	r7
    33be:	6f 90       	pop	r6
    33c0:	08 95       	ret

000033c2 <Authentication>:
    33c2:	cf 93       	push	r28
    33c4:	df 93       	push	r29
    33c6:	10 92 24 0b 	sts	0x0B24, r1	; 0x800b24 <MInfo>
    33ca:	10 92 25 0b 	sts	0x0B25, r1	; 0x800b25 <MInfo+0x1>
    33ce:	10 92 26 0b 	sts	0x0B26, r1	; 0x800b26 <MInfo+0x2>
    33d2:	10 92 27 0b 	sts	0x0B27, r1	; 0x800b27 <MInfo+0x3>
    33d6:	10 92 28 0b 	sts	0x0B28, r1	; 0x800b28 <MInfo+0x4>
    33da:	10 92 2a 0b 	sts	0x0B2A, r1	; 0x800b2a <MInfo+0x6>
    33de:	10 92 29 0b 	sts	0x0B29, r1	; 0x800b29 <MInfo+0x5>
    33e2:	10 92 2b 0b 	sts	0x0B2B, r1	; 0x800b2b <MInfo+0x7>
    33e6:	80 93 10 0b 	sts	0x0B10, r24	; 0x800b10 <SerBuffer>
    33ea:	20 93 11 0b 	sts	0x0B11, r18	; 0x800b11 <SerBuffer+0x1>
    33ee:	86 e0       	ldi	r24, 0x06	; 6
    33f0:	fb 01       	movw	r30, r22
    33f2:	a2 e1       	ldi	r26, 0x12	; 18
    33f4:	bb e0       	ldi	r27, 0x0B	; 11
    33f6:	01 90       	ld	r0, Z+
    33f8:	0d 92       	st	X+, r0
    33fa:	8a 95       	dec	r24
    33fc:	e1 f7       	brne	.-8      	; 0x33f6 <Authentication+0x34>
    33fe:	fa 01       	movw	r30, r20
    3400:	80 81       	ld	r24, Z
    3402:	91 81       	ldd	r25, Z+1	; 0x01
    3404:	a2 81       	ldd	r26, Z+2	; 0x02
    3406:	b3 81       	ldd	r27, Z+3	; 0x03
    3408:	80 93 18 0b 	sts	0x0B18, r24	; 0x800b18 <SerBuffer+0x8>
    340c:	90 93 19 0b 	sts	0x0B19, r25	; 0x800b19 <SerBuffer+0x9>
    3410:	a0 93 1a 0b 	sts	0x0B1A, r26	; 0x800b1a <SerBuffer+0xa>
    3414:	b0 93 1b 0b 	sts	0x0B1B, r27	; 0x800b1b <SerBuffer+0xb>
    3418:	8c e0       	ldi	r24, 0x0C	; 12
    341a:	80 93 27 0b 	sts	0x0B27, r24	; 0x800b27 <MInfo+0x3>
    341e:	80 ed       	ldi	r24, 0xD0	; 208
    3420:	97 e0       	ldi	r25, 0x07	; 7
    3422:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <SetTimeOut>
    3426:	44 e2       	ldi	r20, 0x24	; 36
    3428:	5b e0       	ldi	r21, 0x0B	; 11
    342a:	60 e1       	ldi	r22, 0x10	; 16
    342c:	7b e0       	ldi	r23, 0x0B	; 11
    342e:	8e e0       	ldi	r24, 0x0E	; 14
    3430:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <M522PcdCmd>
    3434:	ec 01       	movw	r28, r24
    3436:	89 2b       	or	r24, r25
    3438:	41 f4       	brne	.+16     	; 0x344a <Authentication+0x88>
    343a:	88 e0       	ldi	r24, 0x08	; 8
    343c:	0e 94 9e 1a 	call	0x353c	; 0x353c <RcGetReg>
    3440:	8f 70       	andi	r24, 0x0F	; 15
    3442:	88 30       	cpi	r24, 0x08	; 8
    3444:	11 f0       	breq	.+4      	; 0x344a <Authentication+0x88>
    3446:	c1 e0       	ldi	r28, 0x01	; 1
    3448:	d2 e0       	ldi	r29, 0x02	; 2
    344a:	ce 01       	movw	r24, r28
    344c:	df 91       	pop	r29
    344e:	cf 91       	pop	r28
    3450:	08 95       	ret

00003452 <Read>:
    3452:	cf 93       	push	r28
    3454:	df 93       	push	r29
    3456:	eb 01       	movw	r28, r22
    3458:	10 92 24 0b 	sts	0x0B24, r1	; 0x800b24 <MInfo>
    345c:	10 92 25 0b 	sts	0x0B25, r1	; 0x800b25 <MInfo+0x1>
    3460:	10 92 26 0b 	sts	0x0B26, r1	; 0x800b26 <MInfo+0x2>
    3464:	10 92 28 0b 	sts	0x0B28, r1	; 0x800b28 <MInfo+0x4>
    3468:	10 92 2a 0b 	sts	0x0B2A, r1	; 0x800b2a <MInfo+0x6>
    346c:	10 92 29 0b 	sts	0x0B29, r1	; 0x800b29 <MInfo+0x5>
    3470:	10 92 2b 0b 	sts	0x0B2B, r1	; 0x800b2b <MInfo+0x7>
    3474:	90 e3       	ldi	r25, 0x30	; 48
    3476:	90 93 10 0b 	sts	0x0B10, r25	; 0x800b10 <SerBuffer>
    347a:	80 93 11 0b 	sts	0x0B11, r24	; 0x800b11 <SerBuffer+0x1>
    347e:	82 e0       	ldi	r24, 0x02	; 2
    3480:	80 93 27 0b 	sts	0x0B27, r24	; 0x800b27 <MInfo+0x3>
    3484:	80 e1       	ldi	r24, 0x10	; 16
    3486:	97 e2       	ldi	r25, 0x27	; 39
    3488:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <SetTimeOut>
    348c:	44 e2       	ldi	r20, 0x24	; 36
    348e:	5b e0       	ldi	r21, 0x0B	; 11
    3490:	60 e1       	ldi	r22, 0x10	; 16
    3492:	7b e0       	ldi	r23, 0x0B	; 11
    3494:	8c e0       	ldi	r24, 0x0C	; 12
    3496:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <M522PcdCmd>
    349a:	00 97       	sbiw	r24, 0x00	; 0
    349c:	e9 f0       	breq	.+58     	; 0x34d8 <Read+0x86>
    349e:	81 30       	cpi	r24, 0x01	; 1
    34a0:	91 05       	cpc	r25, r1
    34a2:	a1 f0       	breq	.+40     	; 0x34cc <Read+0x7a>
    34a4:	20 91 29 0b 	lds	r18, 0x0B29	; 0x800b29 <MInfo+0x5>
    34a8:	30 91 2a 0b 	lds	r19, 0x0B2A	; 0x800b2a <MInfo+0x6>
    34ac:	24 30       	cpi	r18, 0x04	; 4
    34ae:	31 05       	cpc	r19, r1
    34b0:	69 f4       	brne	.+26     	; 0x34cc <Read+0x7a>
    34b2:	80 91 10 0b 	lds	r24, 0x0B10	; 0x800b10 <SerBuffer>
    34b6:	98 2f       	mov	r25, r24
    34b8:	9f 70       	andi	r25, 0x0F	; 15
    34ba:	90 93 10 0b 	sts	0x0B10, r25	; 0x800b10 <SerBuffer>
    34be:	8a 70       	andi	r24, 0x0A	; 10
    34c0:	19 f0       	breq	.+6      	; 0x34c8 <Read+0x76>
    34c2:	85 e0       	ldi	r24, 0x05	; 5
    34c4:	91 e0       	ldi	r25, 0x01	; 1
    34c6:	02 c0       	rjmp	.+4      	; 0x34cc <Read+0x7a>
    34c8:	81 e0       	ldi	r24, 0x01	; 1
    34ca:	92 e0       	ldi	r25, 0x02	; 2
    34cc:	20 e1       	ldi	r18, 0x10	; 16
    34ce:	fe 01       	movw	r30, r28
    34d0:	11 92       	st	Z+, r1
    34d2:	2a 95       	dec	r18
    34d4:	e9 f7       	brne	.-6      	; 0x34d0 <Read+0x7e>
    34d6:	14 c0       	rjmp	.+40     	; 0x3500 <Read+0xae>
    34d8:	20 91 28 0b 	lds	r18, 0x0B28	; 0x800b28 <MInfo+0x4>
    34dc:	20 31       	cpi	r18, 0x10	; 16
    34de:	41 f0       	breq	.+16     	; 0x34f0 <Read+0x9e>
    34e0:	80 e1       	ldi	r24, 0x10	; 16
    34e2:	fe 01       	movw	r30, r28
    34e4:	11 92       	st	Z+, r1
    34e6:	8a 95       	dec	r24
    34e8:	e9 f7       	brne	.-6      	; 0x34e4 <Read+0x92>
    34ea:	88 e0       	ldi	r24, 0x08	; 8
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	08 c0       	rjmp	.+16     	; 0x3500 <Read+0xae>
    34f0:	20 e1       	ldi	r18, 0x10	; 16
    34f2:	e0 e1       	ldi	r30, 0x10	; 16
    34f4:	fb e0       	ldi	r31, 0x0B	; 11
    34f6:	de 01       	movw	r26, r28
    34f8:	01 90       	ld	r0, Z+
    34fa:	0d 92       	st	X+, r0
    34fc:	2a 95       	dec	r18
    34fe:	e1 f7       	brne	.-8      	; 0x34f8 <Read+0xa6>
    3500:	df 91       	pop	r29
    3502:	cf 91       	pop	r28
    3504:	08 95       	ret

00003506 <readCardID>:

short readCardID(unsigned char cardType, unsigned char *buffer)
{
	unsigned char zone = 4;

	if(cardType == MIFARE_1K)
    3506:	88 30       	cpi	r24, 0x08	; 8
    3508:	11 f4       	brne	.+4      	; 0x350e <readCardID+0x8>
	{
		zone = 1;
    350a:	81 e0       	ldi	r24, 0x01	; 1
    350c:	01 c0       	rjmp	.+2      	; 0x3510 <readCardID+0xa>
}


short readCardID(unsigned char cardType, unsigned char *buffer)
{
	unsigned char zone = 4;
    350e:	84 e0       	ldi	r24, 0x04	; 4
	{
		zone = 1;
	}
	
	//Read CardID from User Zone
	return(Read(zone, buffer));
    3510:	0c 94 29 1a 	jmp	0x3452	; 0x3452 <Read>

00003514 <RcSetReg>:
     RegVal        The value to be written
Return:
     None
**************************************************/
void RcSetReg(unsigned char RegAddr, unsigned char RegVal)
{ 
    3514:	cf 93       	push	r28
    3516:	df 93       	push	r29
    3518:	1f 92       	push	r1
    351a:	cd b7       	in	r28, 0x3d	; 61
    351c:	de b7       	in	r29, 0x3e	; 62

	// shift addr, bits[6:1] defines address
	RegAddr = RegAddr << 1;
    351e:	88 0f       	add	r24, r24
	
	//clear bits 7 and 0 for SPI write address
    RegAddr &= 0x7e;   
	Spi_ss_low;
    3520:	71 98       	cbi	0x0e, 1	; 14
    
	Spi_send(RegAddr);
    3522:	8e 77       	andi	r24, 0x7E	; 126
    3524:	69 83       	std	Y+1, r22	; 0x01
    3526:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <Spi_send>
	Spi_send(RegVal);
    352a:	69 81       	ldd	r22, Y+1	; 0x01
    352c:	86 2f       	mov	r24, r22
    352e:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <Spi_send>

	Spi_ss_high;
    3532:	71 9a       	sbi	0x0e, 1	; 14

}
    3534:	0f 90       	pop	r0
    3536:	df 91       	pop	r29
    3538:	cf 91       	pop	r28
    353a:	08 95       	ret

0000353c <RcGetReg>:
{
    unsigned char RegVal;
    //short status;	
	
	// shift addr, bits[6:1] defines address
	RegAddr = RegAddr << 1;
    353c:	88 0f       	add	r24, r24
	
	// for SPI read, clear bit 0 and set bit 
	RegAddr = (RegAddr & 0xfe) | 0x80; 
    353e:	8e 77       	andi	r24, 0x7E	; 126
    
	Spi_ss_low;
    3540:	71 98       	cbi	0x0e, 1	; 14
	
	// send address byte w/ read bit(7) set 
	Spi_send(RegAddr);
    3542:	80 68       	ori	r24, 0x80	; 128
    3544:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <Spi_send>
	
	// read register value
	RegVal = Spi_receive();
    3548:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <Spi_receive>
	
	Spi_ss_high;
    354c:	71 9a       	sbi	0x0e, 1	; 14
		
    return RegVal;
}
    354e:	08 95       	ret

00003550 <RcModifyReg>:
     MaskByte      Only the corresponding bit '1' is valid,
Return:
     None
**************************************************/
void RcModifyReg(unsigned char RegAddr, unsigned char ModifyVal, unsigned char MaskByte)
{
    3550:	1f 93       	push	r17
    3552:	cf 93       	push	r28
    3554:	df 93       	push	r29
    3556:	00 d0       	rcall	.+0      	; 0x3558 <RcModifyReg+0x8>
    3558:	cd b7       	in	r28, 0x3d	; 61
    355a:	de b7       	in	r29, 0x3e	; 62
    355c:	18 2f       	mov	r17, r24
    unsigned char RegVal;
    RegVal = RcGetReg(RegAddr);
    355e:	4a 83       	std	Y+2, r20	; 0x02
    3560:	69 83       	std	Y+1, r22	; 0x01
    3562:	0e 94 9e 1a 	call	0x353c	; 0x353c <RcGetReg>
    if(ModifyVal)
    3566:	69 81       	ldd	r22, Y+1	; 0x01
    3568:	4a 81       	ldd	r20, Y+2	; 0x02
    356a:	66 23       	and	r22, r22
    356c:	19 f0       	breq	.+6      	; 0x3574 <RcModifyReg+0x24>
    {
        RegVal |= MaskByte;
    356e:	68 2f       	mov	r22, r24
    3570:	64 2b       	or	r22, r20
    3572:	03 c0       	rjmp	.+6      	; 0x357a <RcModifyReg+0x2a>
    }
    else
    {
        RegVal &= (~MaskByte);
    3574:	64 2f       	mov	r22, r20
    3576:	60 95       	com	r22
    3578:	68 23       	and	r22, r24
    }
    RcSetReg(RegAddr, RegVal);
    357a:	81 2f       	mov	r24, r17
}
    357c:	0f 90       	pop	r0
    357e:	0f 90       	pop	r0
    3580:	df 91       	pop	r29
    3582:	cf 91       	pop	r28
    3584:	1f 91       	pop	r17
    }
    else
    {
        RegVal &= (~MaskByte);
    }
    RcSetReg(RegAddr, RegVal);
    3586:	0c 94 8a 1a 	jmp	0x3514	; 0x3514 <RcSetReg>

0000358a <Spi_initialize>:
 * \param ucData is data to be sent.
 * \return ucData1 is received data from SPI
 */
void Spi_send_only ( uint8_t ucData )
{
   Spi_send_and_receive(ucData);
    358a:	cf 93       	push	r28
    358c:	df 93       	push	r29
    358e:	1f 92       	push	r1
    3590:	cd b7       	in	r28, 0x3d	; 61
    3592:	de b7       	in	r29, 0x3e	; 62
    3594:	84 b1       	in	r24, 0x04	; 4
    3596:	87 60       	ori	r24, 0x07	; 7
    3598:	84 b9       	out	0x04, r24	; 4
    359a:	23 98       	cbi	0x04, 3	; 4
    359c:	28 9a       	sbi	0x05, 0	; 5
    359e:	82 e0       	ldi	r24, 0x02	; 2
    35a0:	8d b9       	out	0x0d, r24	; 13
    35a2:	71 9a       	sbi	0x0e, 1	; 14
    35a4:	29 98       	cbi	0x05, 1	; 5
    35a6:	82 e5       	ldi	r24, 0x52	; 82
    35a8:	8c bd       	out	0x2c, r24	; 44
    35aa:	8d b5       	in	r24, 0x2d	; 45
    35ac:	89 83       	std	Y+1, r24	; 0x01
    35ae:	8e b5       	in	r24, 0x2e	; 46
    35b0:	89 83       	std	Y+1, r24	; 0x01
    35b2:	0f 90       	pop	r0
    35b4:	df 91       	pop	r29
    35b6:	cf 91       	pop	r28
    35b8:	08 95       	ret

000035ba <Spi_send>:

void Spi_send ( uint8_t ucData )
{
	
    /* Start transmission */
    SPDR  = ucData ;     // Send Character
    35ba:	8e bd       	out	0x2e, r24	; 46

    /* Wait for transmission complete */
    while (!(SPSR & (1 << SPIF)))
    35bc:	0d b4       	in	r0, 0x2d	; 45
    35be:	07 fe       	sbrs	r0, 7
    35c0:	fd cf       	rjmp	.-6      	; 0x35bc <Spi_send+0x2>
    {
        // Wait until Char is sent
    }

}
    35c2:	08 95       	ret

000035c4 <Spi_receive>:

uint8_t Spi_receive ()
{
	
    /* Start transmission */
    SPDR  = 0xff;     // Send dummy byte
    35c4:	8f ef       	ldi	r24, 0xFF	; 255
    35c6:	8e bd       	out	0x2e, r24	; 46

    /* Wait for transmission complete */
    while (!(SPSR & (1 << SPIF)))
    35c8:	0d b4       	in	r0, 0x2d	; 45
    35ca:	07 fe       	sbrs	r0, 7
    35cc:	fd cf       	rjmp	.-6      	; 0x35c8 <Spi_receive+0x4>
    {
        // Wait until Char is sent
    }

    /* Return the received byte*/
    return SPDR;
    35ce:	8e b5       	in	r24, 0x2e	; 46
}
    35d0:	08 95       	ret

000035d2 <mifareInit>:
*/

/*Initialize the processor and RC522*/
void mifareInit(void)
{
	Spi_initialize();
    35d2:	0e 94 c5 1a 	call	0x358a	; 0x358a <Spi_initialize>
	Rc522Init();	
    35d6:	0c 94 e4 15 	jmp	0x2bc8	; 0x2bc8 <Rc522Init>

000035da <main>:

int main(void){

	
	// SINGLE-CHIP SOLUTION
	cli(); //make sure interrupts are disabled before initialization.
    35da:	f8 94       	cli
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    35dc:	0f b6       	in	r0, 0x3f	; 63
    35de:	f8 94       	cli
    35e0:	a8 95       	wdr
    35e2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    35e6:	88 61       	ori	r24, 0x18	; 24
    35e8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    35ec:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    35f0:	0f be       	out	0x3f, r0	; 63
	wdt_disable();

	// init serial for PinPointSystem LCD output
	serial_init(NULL);
    35f2:	80 e0       	ldi	r24, 0x00	; 0
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <serial_init>
#ifdef DEBUG_UART
	debugMsgStrConst("\r\nUART TEST\r\n ");
#endif

    // Init the timer system for the MAC
    timerInit();
    35fa:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <timerInit>

#if (DEVICE_CONNECTED == ACA_MACHINE)
	InitTimerZero();	//timer for MDC machine comm.
    35fe:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <InitTimerZero>
#endif

    sei();
    3602:	78 94       	sei
{
	getPressedKey();
	_delay_ms(1000);	
}*/
    // Init the (sample) application
    appInit();
    3604:	0e 94 3a 03 	call	0x674	; 0x674 <appInit>
#if( DEBUG )
	Beeps(2);
#endif
       
    // Initialize mifare
	mifareInit();
    3608:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <mifareInit>
    for(;;)
    {
        // Turn interrupts on if they are off.  They should always be on
        // at this point in the loop, so just turn them on every time, in
        // case interrupts were inadvertently turned off elsewhere.
        sei();
    360c:	78 94       	sei

        // Task functions called from main loop.  Either add your own task loop
        // or edit the example appTask().
        appTask();
    360e:	0e 94 77 04 	call	0x8ee	; 0x8ee <appTask>
        macTask();
    3612:	0e 94 d3 21 	call	0x43a6	; 0x43a6 <macTask>

    }
    3616:	fa cf       	rjmp	.-12     	; 0x360c <main+0x32>

00003618 <isSleeping>:
    {
    }
}

void radioSetModulation(u8 modulation)
{
    3618:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    361c:	86 95       	lsr	r24
    361e:	81 70       	andi	r24, 0x01	; 1
    3620:	08 95       	ret

00003622 <radioGetPartnum>:
    3622:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <radio_part_number.3584>
    3626:	81 11       	cpse	r24, r1
    3628:	04 c0       	rjmp	.+8      	; 0x3632 <radioGetPartnum+0x10>
    362a:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__TEXT_REGION_LENGTH__+0x7e015c>
    362e:	80 93 33 05 	sts	0x0533, r24	; 0x800533 <radio_part_number.3584>
    3632:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <radio_part_number.3584>
    3636:	08 95       	ret

00003638 <radioRxStartEvent>:
    3638:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__TEXT_REGION_LENGTH__+0x7e0146>
    363c:	8f 71       	andi	r24, 0x1F	; 31
    363e:	80 93 34 05 	sts	0x0534, r24	; 0x800534 <rssi_val>
    3642:	10 92 47 0c 	sts	0x0C47, r1	; 0x800c47 <macConfig+0x17>
    3646:	08 95       	ret

00003648 <radioGetSavedRssiValue>:
    3648:	0e 94 11 1b 	call	0x3622	; 0x3622 <radioGetPartnum>
    364c:	82 30       	cpi	r24, 0x02	; 2
    364e:	19 f0       	breq	.+6      	; 0x3656 <radioGetSavedRssiValue+0xe>
    3650:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <rssi_val>
    3654:	08 95       	ret
    3656:	86 e1       	ldi	r24, 0x16	; 22
    3658:	08 95       	ret

0000365a <radioGetSavedLqiValue>:
    365a:	80 91 ac 0b 	lds	r24, 0x0BAC	; 0x800bac <mac_buffer_rx+0x80>
    365e:	08 95       	ret

00003660 <radioSetOperatingChannel>:
    3660:	cf 93       	push	r28
    3662:	95 ef       	ldi	r25, 0xF5	; 245
    3664:	98 0f       	add	r25, r24
    3666:	90 31       	cpi	r25, 0x10	; 16
    3668:	18 f5       	brcc	.+70     	; 0x36b0 <radioSetOperatingChannel+0x50>
    366a:	c8 2f       	mov	r28, r24
    366c:	0e 94 0c 1b 	call	0x3618	; 0x3618 <isSleeping>
    3670:	81 11       	cpse	r24, r1
    3672:	20 c0       	rjmp	.+64     	; 0x36b4 <radioSetOperatingChannel+0x54>
    3674:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x7e0148>
    3678:	8f 71       	andi	r24, 0x1F	; 31
    367a:	8c 17       	cp	r24, r28
    367c:	e9 f0       	breq	.+58     	; 0x36b8 <radioSetOperatingChannel+0x58>
    367e:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x7e0148>
    3682:	80 7e       	andi	r24, 0xE0	; 224
    3684:	9c 2f       	mov	r25, r28
    3686:	9f 71       	andi	r25, 0x1F	; 31
    3688:	89 2b       	or	r24, r25
    368a:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <__TEXT_REGION_LENGTH__+0x7e0148>
    368e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    3692:	8f 71       	andi	r24, 0x1F	; 31
    3694:	86 30       	cpi	r24, 0x06	; 6
    3696:	11 f0       	breq	.+4      	; 0x369c <radioSetOperatingChannel+0x3c>
    3698:	89 30       	cpi	r24, 0x09	; 9
    369a:	21 f4       	brne	.+8      	; 0x36a4 <radioSetOperatingChannel+0x44>
    369c:	8d e2       	ldi	r24, 0x2D	; 45
    369e:	91 e0       	ldi	r25, 0x01	; 1
    36a0:	01 97       	sbiw	r24, 0x01	; 1
    36a2:	f1 f7       	brne	.-4      	; 0x36a0 <radioSetOperatingChannel+0x40>
    36a4:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x7e0148>
    36a8:	8f 71       	andi	r24, 0x1F	; 31
    36aa:	8c 13       	cpse	r24, r28
    36ac:	07 c0       	rjmp	.+14     	; 0x36bc <radioSetOperatingChannel+0x5c>
    36ae:	04 c0       	rjmp	.+8      	; 0x36b8 <radioSetOperatingChannel+0x58>
    36b0:	82 e4       	ldi	r24, 0x42	; 66
    36b2:	05 c0       	rjmp	.+10     	; 0x36be <radioSetOperatingChannel+0x5e>
    36b4:	84 e4       	ldi	r24, 0x44	; 68
    36b6:	03 c0       	rjmp	.+6      	; 0x36be <radioSetOperatingChannel+0x5e>
    36b8:	80 e4       	ldi	r24, 0x40	; 64
    36ba:	01 c0       	rjmp	.+2      	; 0x36be <radioSetOperatingChannel+0x5e>
    36bc:	83 e4       	ldi	r24, 0x43	; 67
    36be:	cf 91       	pop	r28
    36c0:	08 95       	ret

000036c2 <radioSetClockSpeed>:
    36c2:	66 30       	cpi	r22, 0x06	; 6
    36c4:	98 f4       	brcc	.+38     	; 0x36ec <radioSetClockSpeed+0x2a>
    36c6:	81 11       	cpse	r24, r1
    36c8:	04 c0       	rjmp	.+8      	; 0x36d2 <radioSetClockSpeed+0x10>
    36ca:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    36ce:	88 60       	ori	r24, 0x08	; 8
    36d0:	03 c0       	rjmp	.+6      	; 0x36d8 <radioSetClockSpeed+0x16>
    36d2:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    36d6:	87 7f       	andi	r24, 0xF7	; 247
    36d8:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    36dc:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    36e0:	88 7f       	andi	r24, 0xF8	; 248
    36e2:	68 2b       	or	r22, r24
    36e4:	60 93 43 01 	sts	0x0143, r22	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    36e8:	80 e4       	ldi	r24, 0x40	; 64
    36ea:	08 95       	ret
    36ec:	82 e4       	ldi	r24, 0x42	; 66
    36ee:	08 95       	ret

000036f0 <radioGetTrxState>:
    36f0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    36f4:	8f 71       	andi	r24, 0x1F	; 31
    36f6:	08 95       	ret

000036f8 <radioResetStateMachine>:
    36f8:	e9 e3       	ldi	r30, 0x39	; 57
    36fa:	f1 e0       	ldi	r31, 0x01	; 1
    36fc:	80 81       	ld	r24, Z
    36fe:	8d 7f       	andi	r24, 0xFD	; 253
    3700:	80 83       	st	Z, r24
    3702:	8d e0       	ldi	r24, 0x0D	; 13
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	01 97       	sbiw	r24, 0x01	; 1
    3708:	f1 f7       	brne	.-4      	; 0x3706 <radioResetStateMachine+0xe>
    370a:	e2 e4       	ldi	r30, 0x42	; 66
    370c:	f1 e0       	ldi	r31, 0x01	; 1
    370e:	80 81       	ld	r24, Z
    3710:	80 7e       	andi	r24, 0xE0	; 224
    3712:	83 60       	ori	r24, 0x03	; 3
    3714:	80 83       	st	Z, r24
    3716:	83 e0       	ldi	r24, 0x03	; 3
    3718:	90 e0       	ldi	r25, 0x00	; 0
    371a:	01 97       	sbiw	r24, 0x01	; 1
    371c:	f1 f7       	brne	.-4      	; 0x371a <radioResetStateMachine+0x22>
    371e:	08 95       	ret

00003720 <radioResetTrx>:
    3720:	e9 e3       	ldi	r30, 0x39	; 57
    3722:	f1 e0       	ldi	r31, 0x01	; 1
    3724:	80 81       	ld	r24, Z
    3726:	81 60       	ori	r24, 0x01	; 1
    3728:	80 83       	st	Z, r24
    372a:	80 81       	ld	r24, Z
    372c:	8d 7f       	andi	r24, 0xFD	; 253
    372e:	80 83       	st	Z, r24
    3730:	8d e0       	ldi	r24, 0x0D	; 13
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	01 97       	sbiw	r24, 0x01	; 1
    3736:	f1 f7       	brne	.-4      	; 0x3734 <radioResetTrx+0x14>
    3738:	80 81       	ld	r24, Z
    373a:	8e 7f       	andi	r24, 0xFE	; 254
    373c:	80 83       	st	Z, r24
    373e:	08 95       	ret

00003740 <radioInit>:
    3740:	0f 93       	push	r16
    3742:	1f 93       	push	r17
    3744:	cf 93       	push	r28
    3746:	df 93       	push	r29
    3748:	1f 92       	push	r1
    374a:	cd b7       	in	r28, 0x3d	; 61
    374c:	de b7       	in	r29, 0x3e	; 62
    374e:	0d ef       	ldi	r16, 0xFD	; 253
    3750:	13 e0       	ldi	r17, 0x03	; 3
    3752:	f8 01       	movw	r30, r16
    3754:	31 97       	sbiw	r30, 0x01	; 1
    3756:	f1 f7       	brne	.-4      	; 0x3754 <radioInit+0x14>
    3758:	89 83       	std	Y+1, r24	; 0x01
    375a:	0e 94 90 1b 	call	0x3720	; 0x3720 <radioResetTrx>
    375e:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3762:	90 7e       	andi	r25, 0xE0	; 224
    3764:	93 60       	ori	r25, 0x03	; 3
    3766:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    376a:	f8 01       	movw	r30, r16
    376c:	31 97       	sbiw	r30, 0x01	; 1
    376e:	f1 f7       	brne	.-4      	; 0x376c <radioInit+0x2c>
    3770:	9c e4       	ldi	r25, 0x4C	; 76
    3772:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <__TEXT_REGION_LENGTH__+0x7e014e>
    3776:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x7e0149>
    377a:	90 7f       	andi	r25, 0xF0	; 240
    377c:	97 60       	ori	r25, 0x07	; 7
    377e:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <__TEXT_REGION_LENGTH__+0x7e0149>
    3782:	89 81       	ldd	r24, Y+1	; 0x01
    3784:	81 11       	cpse	r24, r1
    3786:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <calibrate_rc_osc>
    378a:	80 e4       	ldi	r24, 0x40	; 64
    378c:	0f 90       	pop	r0
    378e:	df 91       	pop	r29
    3790:	cf 91       	pop	r28
    3792:	1f 91       	pop	r17
    3794:	0f 91       	pop	r16
    3796:	08 95       	ret

00003798 <radioUseAutoTxCrc>:
    3798:	cf 93       	push	r28
    379a:	c8 2f       	mov	r28, r24
    379c:	0e 94 11 1b 	call	0x3622	; 0x3622 <radioGetPartnum>
    37a0:	82 30       	cpi	r24, 0x02	; 2
    37a2:	31 f4       	brne	.+12     	; 0x37b0 <radioUseAutoTxCrc+0x18>
    37a4:	80 91 05 00 	lds	r24, 0x0005	; 0x800005 <__TEXT_REGION_LENGTH__+0x7e0005>
    37a8:	c0 fb       	bst	r28, 0
    37aa:	87 f9       	bld	r24, 7
    37ac:	80 93 05 00 	sts	0x0005, r24	; 0x800005 <__TEXT_REGION_LENGTH__+0x7e0005>
    37b0:	0e 94 11 1b 	call	0x3622	; 0x3622 <radioGetPartnum>
    37b4:	83 30       	cpi	r24, 0x03	; 3
    37b6:	61 f4       	brne	.+24     	; 0x37d0 <radioUseAutoTxCrc+0x38>
    37b8:	20 91 04 00 	lds	r18, 0x0004	; 0x800004 <__TEXT_REGION_LENGTH__+0x7e0004>
    37bc:	30 e2       	ldi	r19, 0x20	; 32
    37be:	c3 9f       	mul	r28, r19
    37c0:	c0 01       	movw	r24, r0
    37c2:	11 24       	eor	r1, r1
    37c4:	80 72       	andi	r24, 0x20	; 32
    37c6:	92 2f       	mov	r25, r18
    37c8:	9f 7d       	andi	r25, 0xDF	; 223
    37ca:	89 2b       	or	r24, r25
    37cc:	80 93 04 00 	sts	0x0004, r24	; 0x800004 <__TEXT_REGION_LENGTH__+0x7e0004>
    37d0:	cf 91       	pop	r28
    37d2:	08 95       	ret

000037d4 <radioIsBusy>:
    37d4:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    37d8:	98 2f       	mov	r25, r24
    37da:	9f 70       	andi	r25, 0x0F	; 15
    37dc:	91 50       	subi	r25, 0x01	; 1
    37de:	92 30       	cpi	r25, 0x02	; 2
    37e0:	38 f0       	brcs	.+14     	; 0x37f0 <radioIsBusy+0x1c>
    37e2:	98 2f       	mov	r25, r24
    37e4:	9f 71       	andi	r25, 0x1F	; 31
    37e6:	81 e0       	ldi	r24, 0x01	; 1
    37e8:	9e 31       	cpi	r25, 0x1E	; 30
    37ea:	19 f0       	breq	.+6      	; 0x37f2 <radioIsBusy+0x1e>
    37ec:	80 e0       	ldi	r24, 0x00	; 0
    37ee:	08 95       	ret
    37f0:	81 e0       	ldi	r24, 0x01	; 1
    37f2:	08 95       	ret

000037f4 <radioSetTrxState>:
    37f4:	cf 93       	push	r28
    37f6:	c8 2f       	mov	r28, r24
    37f8:	88 ef       	ldi	r24, 0xF8	; 248
    37fa:	8c 0f       	add	r24, r28
    37fc:	82 30       	cpi	r24, 0x02	; 2
    37fe:	38 f0       	brcs	.+14     	; 0x380e <radioSetTrxState+0x1a>
    3800:	8c 2f       	mov	r24, r28
    3802:	8f 7e       	andi	r24, 0xEF	; 239
    3804:	86 30       	cpi	r24, 0x06	; 6
    3806:	19 f0       	breq	.+6      	; 0x380e <radioSetTrxState+0x1a>
    3808:	c9 31       	cpi	r28, 0x19	; 25
    380a:	09 f0       	breq	.+2      	; 0x380e <radioSetTrxState+0x1a>
    380c:	55 c0       	rjmp	.+170    	; 0x38b8 <radioSetTrxState+0xc4>
    380e:	0e 94 0c 1b 	call	0x3618	; 0x3618 <isSleeping>
    3812:	81 11       	cpse	r24, r1
    3814:	53 c0       	rjmp	.+166    	; 0x38bc <radioSetTrxState+0xc8>
    3816:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <radioIsBusy>
    381a:	81 11       	cpse	r24, r1
    381c:	fc cf       	rjmp	.-8      	; 0x3816 <radioSetTrxState+0x22>
    381e:	0e 94 11 1b 	call	0x3622	; 0x3622 <radioGetPartnum>
    3822:	82 30       	cpi	r24, 0x02	; 2
    3824:	39 f4       	brne	.+14     	; 0x3834 <radioSetTrxState+0x40>
    3826:	0e 94 5a 24 	call	0x48b4	; 0x48b4 <macIsScanning>
    382a:	88 23       	and	r24, r24
    382c:	19 f0       	breq	.+6      	; 0x3834 <radioSetTrxState+0x40>
    382e:	c6 31       	cpi	r28, 0x16	; 22
    3830:	09 f4       	brne	.+2      	; 0x3834 <radioSetTrxState+0x40>
    3832:	c6 e0       	ldi	r28, 0x06	; 6
    3834:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    3838:	8f 71       	andi	r24, 0x1F	; 31
    383a:	c8 17       	cp	r28, r24
    383c:	09 f4       	brne	.+2      	; 0x3840 <radioSetTrxState+0x4c>
    383e:	40 c0       	rjmp	.+128    	; 0x38c0 <radioSetTrxState+0xcc>
    3840:	c8 30       	cpi	r28, 0x08	; 8
    3842:	19 f4       	brne	.+6      	; 0x384a <radioSetTrxState+0x56>
    3844:	0e 94 7c 1b 	call	0x36f8	; 0x36f8 <radioResetStateMachine>
    3848:	31 c0       	rjmp	.+98     	; 0x38ac <radioSetTrxState+0xb8>
    384a:	c9 31       	cpi	r28, 0x19	; 25
    384c:	59 f4       	brne	.+22     	; 0x3864 <radioSetTrxState+0x70>
    384e:	89 30       	cpi	r24, 0x09	; 9
    3850:	e1 f0       	breq	.+56     	; 0x388a <radioSetTrxState+0x96>
    3852:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3856:	90 7e       	andi	r25, 0xE0	; 224
    3858:	99 60       	ori	r25, 0x09	; 9
    385a:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    385e:	86 31       	cpi	r24, 0x16	; 22
    3860:	81 f4       	brne	.+32     	; 0x3882 <radioSetTrxState+0x8e>
    3862:	0c c0       	rjmp	.+24     	; 0x387c <radioSetTrxState+0x88>
    3864:	c6 31       	cpi	r28, 0x16	; 22
    3866:	89 f4       	brne	.+34     	; 0x388a <radioSetTrxState+0x96>
    3868:	89 30       	cpi	r24, 0x09	; 9
    386a:	79 f0       	breq	.+30     	; 0x388a <radioSetTrxState+0x96>
    386c:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3870:	90 7e       	andi	r25, 0xE0	; 224
    3872:	99 60       	ori	r25, 0x09	; 9
    3874:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3878:	89 31       	cpi	r24, 0x19	; 25
    387a:	19 f4       	brne	.+6      	; 0x3882 <radioSetTrxState+0x8e>
    387c:	e3 e0       	ldi	r30, 0x03	; 3
    387e:	f0 e0       	ldi	r31, 0x00	; 0
    3880:	02 c0       	rjmp	.+4      	; 0x3886 <radioSetTrxState+0x92>
    3882:	e9 e6       	ldi	r30, 0x69	; 105
    3884:	f1 e0       	ldi	r31, 0x01	; 1
    3886:	31 97       	sbiw	r30, 0x01	; 1
    3888:	f1 f7       	brne	.-4      	; 0x3886 <radioSetTrxState+0x92>
    388a:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    388e:	90 7e       	andi	r25, 0xE0	; 224
    3890:	2c 2f       	mov	r18, r28
    3892:	2f 71       	andi	r18, 0x1F	; 31
    3894:	92 2b       	or	r25, r18
    3896:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    389a:	88 30       	cpi	r24, 0x08	; 8
    389c:	19 f4       	brne	.+6      	; 0x38a4 <radioSetTrxState+0xb0>
    389e:	89 e6       	ldi	r24, 0x69	; 105
    38a0:	91 e0       	ldi	r25, 0x01	; 1
    38a2:	02 c0       	rjmp	.+4      	; 0x38a8 <radioSetTrxState+0xb4>
    38a4:	83 e0       	ldi	r24, 0x03	; 3
    38a6:	90 e0       	ldi	r25, 0x00	; 0
    38a8:	01 97       	sbiw	r24, 0x01	; 1
    38aa:	f1 f7       	brne	.-4      	; 0x38a8 <radioSetTrxState+0xb4>
    38ac:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    38b0:	8f 71       	andi	r24, 0x1F	; 31
    38b2:	8c 13       	cpse	r24, r28
    38b4:	07 c0       	rjmp	.+14     	; 0x38c4 <radioSetTrxState+0xd0>
    38b6:	04 c0       	rjmp	.+8      	; 0x38c0 <radioSetTrxState+0xcc>
    38b8:	82 e4       	ldi	r24, 0x42	; 66
    38ba:	05 c0       	rjmp	.+10     	; 0x38c6 <radioSetTrxState+0xd2>
    38bc:	84 e4       	ldi	r24, 0x44	; 68
    38be:	03 c0       	rjmp	.+6      	; 0x38c6 <radioSetTrxState+0xd2>
    38c0:	80 e4       	ldi	r24, 0x40	; 64
    38c2:	01 c0       	rjmp	.+2      	; 0x38c6 <radioSetTrxState+0xd2>
    38c4:	83 e4       	ldi	r24, 0x43	; 67
    38c6:	cf 91       	pop	r28
    38c8:	08 95       	ret

000038ca <radioTrxEndEvent>:
    38ca:	cf 93       	push	r28
    38cc:	df 93       	push	r29
    38ce:	00 d0       	rcall	.+0      	; 0x38d0 <radioTrxEndEvent+0x6>
    38d0:	00 d0       	rcall	.+0      	; 0x38d2 <radioTrxEndEvent+0x8>
    38d2:	1f 92       	push	r1
    38d4:	cd b7       	in	r28, 0x3d	; 61
    38d6:	de b7       	in	r29, 0x3e	; 62
    38d8:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    38dc:	8f 71       	andi	r24, 0x1F	; 31
    38de:	8c 83       	std	Y+4, r24	; 0x04
    38e0:	8c 81       	ldd	r24, Y+4	; 0x04
    38e2:	81 31       	cpi	r24, 0x11	; 17
    38e4:	51 f0       	breq	.+20     	; 0x38fa <radioTrxEndEvent+0x30>
    38e6:	8c 81       	ldd	r24, Y+4	; 0x04
    38e8:	86 30       	cpi	r24, 0x06	; 6
    38ea:	39 f0       	breq	.+14     	; 0x38fa <radioTrxEndEvent+0x30>
    38ec:	8c 81       	ldd	r24, Y+4	; 0x04
    38ee:	81 30       	cpi	r24, 0x01	; 1
    38f0:	21 f0       	breq	.+8      	; 0x38fa <radioTrxEndEvent+0x30>
    38f2:	8c 81       	ldd	r24, Y+4	; 0x04
    38f4:	86 31       	cpi	r24, 0x16	; 22
    38f6:	09 f0       	breq	.+2      	; 0x38fa <radioTrxEndEvent+0x30>
    38f8:	5f c0       	rjmp	.+190    	; 0x39b8 <radioTrxEndEvent+0xee>
    38fa:	40 91 7b 01 	lds	r20, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7e017b>
    38fe:	50 e0       	ldi	r21, 0x00	; 0
    3900:	60 e8       	ldi	r22, 0x80	; 128
    3902:	71 e0       	ldi	r23, 0x01	; 1
    3904:	8d e2       	ldi	r24, 0x2D	; 45
    3906:	9b e0       	ldi	r25, 0x0B	; 11
    3908:	0e 94 f8 31 	call	0x63f0	; 0x63f0 <memcpy>
    390c:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7e017b>
    3910:	80 93 2c 0b 	sts	0x0B2C, r24	; 0x800b2c <mac_buffer_rx>
    3914:	e0 91 7b 01 	lds	r30, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7e017b>
    3918:	f0 e0       	ldi	r31, 0x00	; 0
    391a:	e4 5d       	subi	r30, 0xD4	; 212
    391c:	f4 4f       	sbci	r31, 0xF4	; 244
    391e:	80 81       	ld	r24, Z
    3920:	80 93 ac 0b 	sts	0x0BAC, r24	; 0x800bac <mac_buffer_rx+0x80>
    3924:	19 82       	std	Y+1, r1	; 0x01
    3926:	1b 82       	std	Y+3, r1	; 0x03
    3928:	1a 82       	std	Y+2, r1	; 0x02
    392a:	20 91 2d 0b 	lds	r18, 0x0B2D	; 0x800b2d <mac_buffer_rx+0x1>
    392e:	80 91 2e 0b 	lds	r24, 0x0B2E	; 0x800b2e <mac_buffer_rx+0x2>
    3932:	90 e0       	ldi	r25, 0x00	; 0
    3934:	98 2f       	mov	r25, r24
    3936:	88 27       	eor	r24, r24
    3938:	82 0f       	add	r24, r18
    393a:	91 1d       	adc	r25, r1
    393c:	90 93 2e 0b 	sts	0x0B2E, r25	; 0x800b2e <mac_buffer_rx+0x2>
    3940:	80 93 2d 0b 	sts	0x0B2D, r24	; 0x800b2d <mac_buffer_rx+0x1>
    3944:	81 36       	cpi	r24, 0x61	; 97
    3946:	28 e8       	ldi	r18, 0x88	; 136
    3948:	92 07       	cpc	r25, r18
    394a:	09 f1       	breq	.+66     	; 0x398e <radioTrxEndEvent+0xc4>
    394c:	40 f4       	brcc	.+16     	; 0x395e <radioTrxEndEvent+0x94>
    394e:	83 30       	cpi	r24, 0x03	; 3
    3950:	28 e0       	ldi	r18, 0x08	; 8
    3952:	92 07       	cpc	r25, r18
    3954:	81 f0       	breq	.+32     	; 0x3976 <radioTrxEndEvent+0xac>
    3956:	81 15       	cp	r24, r1
    3958:	90 48       	sbci	r25, 0x80	; 128
    395a:	99 f0       	breq	.+38     	; 0x3982 <radioTrxEndEvent+0xb8>
    395c:	28 c0       	rjmp	.+80     	; 0x39ae <radioTrxEndEvent+0xe4>
    395e:	83 36       	cpi	r24, 0x63	; 99
    3960:	2c e8       	ldi	r18, 0x8C	; 140
    3962:	92 07       	cpc	r25, r18
    3964:	01 f1       	breq	.+64     	; 0x39a6 <radioTrxEndEvent+0xdc>
    3966:	83 36       	cpi	r24, 0x63	; 99
    3968:	28 ec       	ldi	r18, 0xC8	; 200
    396a:	92 07       	cpc	r25, r18
    396c:	d1 f0       	breq	.+52     	; 0x39a2 <radioTrxEndEvent+0xd8>
    396e:	83 36       	cpi	r24, 0x63	; 99
    3970:	98 48       	sbci	r25, 0x88	; 136
    3972:	e9 f4       	brne	.+58     	; 0x39ae <radioTrxEndEvent+0xe4>
    3974:	0e c0       	rjmp	.+28     	; 0x3992 <radioTrxEndEvent+0xc8>
    3976:	80 91 38 0c 	lds	r24, 0x0C38	; 0x800c38 <macConfig+0x8>
    397a:	88 23       	and	r24, r24
    397c:	c1 f0       	breq	.+48     	; 0x39ae <radioTrxEndEvent+0xe4>
    397e:	85 e1       	ldi	r24, 0x15	; 21
    3980:	15 c0       	rjmp	.+42     	; 0x39ac <radioTrxEndEvent+0xe2>
    3982:	0e 94 5a 24 	call	0x48b4	; 0x48b4 <macIsScanning>
    3986:	88 23       	and	r24, r24
    3988:	91 f0       	breq	.+36     	; 0x39ae <radioTrxEndEvent+0xe4>
    398a:	84 e1       	ldi	r24, 0x14	; 20
    398c:	0f c0       	rjmp	.+30     	; 0x39ac <radioTrxEndEvent+0xe2>
    398e:	80 e1       	ldi	r24, 0x10	; 16
    3990:	0d c0       	rjmp	.+26     	; 0x39ac <radioTrxEndEvent+0xe2>
    3992:	80 91 36 0b 	lds	r24, 0x0B36	; 0x800b36 <mac_buffer_rx+0xa>
    3996:	82 30       	cpi	r24, 0x02	; 2
    3998:	31 f0       	breq	.+12     	; 0x39a6 <radioTrxEndEvent+0xdc>
    399a:	8b 3b       	cpi	r24, 0xBB	; 187
    399c:	31 f0       	breq	.+12     	; 0x39aa <radioTrxEndEvent+0xe0>
    399e:	81 30       	cpi	r24, 0x01	; 1
    39a0:	31 f4       	brne	.+12     	; 0x39ae <radioTrxEndEvent+0xe4>
    39a2:	87 e1       	ldi	r24, 0x17	; 23
    39a4:	03 c0       	rjmp	.+6      	; 0x39ac <radioTrxEndEvent+0xe2>
    39a6:	88 e1       	ldi	r24, 0x18	; 24
    39a8:	01 c0       	rjmp	.+2      	; 0x39ac <radioTrxEndEvent+0xe2>
    39aa:	89 e1       	ldi	r24, 0x19	; 25
    39ac:	89 83       	std	Y+1, r24	; 0x01
    39ae:	ce 01       	movw	r24, r28
    39b0:	01 96       	adiw	r24, 0x01	; 1
    39b2:	0e 94 88 21 	call	0x4310	; 0x4310 <mac_put_event>
    39b6:	35 c0       	rjmp	.+106    	; 0x3a22 <radioTrxEndEvent+0x158>
    39b8:	8c 81       	ldd	r24, Y+4	; 0x04
    39ba:	82 30       	cpi	r24, 0x02	; 2
    39bc:	49 f0       	breq	.+18     	; 0x39d0 <radioTrxEndEvent+0x106>
    39be:	8c 81       	ldd	r24, Y+4	; 0x04
    39c0:	82 31       	cpi	r24, 0x12	; 18
    39c2:	31 f0       	breq	.+12     	; 0x39d0 <radioTrxEndEvent+0x106>
    39c4:	8c 81       	ldd	r24, Y+4	; 0x04
    39c6:	89 31       	cpi	r24, 0x19	; 25
    39c8:	19 f0       	breq	.+6      	; 0x39d0 <radioTrxEndEvent+0x106>
    39ca:	8c 81       	ldd	r24, Y+4	; 0x04
    39cc:	89 30       	cpi	r24, 0x09	; 9
    39ce:	49 f5       	brne	.+82     	; 0x3a22 <radioTrxEndEvent+0x158>
    39d0:	10 92 47 0c 	sts	0x0C47, r1	; 0x800c47 <macConfig+0x17>
    39d4:	19 82       	std	Y+1, r1	; 0x01
    39d6:	1b 82       	std	Y+3, r1	; 0x03
    39d8:	1a 82       	std	Y+2, r1	; 0x02
    39da:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    39de:	82 95       	swap	r24
    39e0:	86 95       	lsr	r24
    39e2:	87 70       	andi	r24, 0x07	; 7
    39e4:	8d 83       	std	Y+5, r24	; 0x05
    39e6:	8d 81       	ldd	r24, Y+5	; 0x05
    39e8:	83 30       	cpi	r24, 0x03	; 3
    39ea:	49 f0       	breq	.+18     	; 0x39fe <radioTrxEndEvent+0x134>
    39ec:	20 f4       	brcc	.+8      	; 0x39f6 <radioTrxEndEvent+0x12c>
    39ee:	82 30       	cpi	r24, 0x02	; 2
    39f0:	40 f4       	brcc	.+16     	; 0x3a02 <radioTrxEndEvent+0x138>
    39f2:	81 e1       	ldi	r24, 0x11	; 17
    39f4:	05 c0       	rjmp	.+10     	; 0x3a00 <radioTrxEndEvent+0x136>
    39f6:	85 30       	cpi	r24, 0x05	; 5
    39f8:	21 f4       	brne	.+8      	; 0x3a02 <radioTrxEndEvent+0x138>
    39fa:	82 e1       	ldi	r24, 0x12	; 18
    39fc:	01 c0       	rjmp	.+2      	; 0x3a00 <radioTrxEndEvent+0x136>
    39fe:	83 e1       	ldi	r24, 0x13	; 19
    3a00:	89 83       	std	Y+1, r24	; 0x01
    3a02:	89 81       	ldd	r24, Y+1	; 0x01
    3a04:	88 23       	and	r24, r24
    3a06:	21 f0       	breq	.+8      	; 0x3a10 <radioTrxEndEvent+0x146>
    3a08:	ce 01       	movw	r24, r28
    3a0a:	01 96       	adiw	r24, 0x01	; 1
    3a0c:	0e 94 88 21 	call	0x4310	; 0x4310 <mac_put_event>
    3a10:	86 e1       	ldi	r24, 0x16	; 22
    3a12:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <radioSetTrxState>
    3a16:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
    3a1a:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    3a1e:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <srand>
    3a22:	0f 90       	pop	r0
    3a24:	0f 90       	pop	r0
    3a26:	0f 90       	pop	r0
    3a28:	0f 90       	pop	r0
    3a2a:	0f 90       	pop	r0
    3a2c:	df 91       	pop	r29
    3a2e:	cf 91       	pop	r28
    3a30:	08 95       	ret

00003a32 <radioSendData>:
    3a32:	0f 93       	push	r16
    3a34:	1f 93       	push	r17
    3a36:	cf 93       	push	r28
    3a38:	c8 2f       	mov	r28, r24
    3a3a:	8b 01       	movw	r16, r22
    3a3c:	87 fd       	sbrc	r24, 7
    3a3e:	2b c0       	rjmp	.+86     	; 0x3a96 <radioSendData+0x64>
    3a40:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <radioIsBusy>
    3a44:	81 11       	cpse	r24, r1
    3a46:	fc cf       	rjmp	.-8      	; 0x3a40 <radioSendData+0xe>
    3a48:	89 e1       	ldi	r24, 0x19	; 25
    3a4a:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <radioSetTrxState>
    3a4e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    3a52:	8f 71       	andi	r24, 0x1F	; 31
    3a54:	89 31       	cpi	r24, 0x19	; 25
    3a56:	c1 f7       	brne	.-16     	; 0x3a48 <radioSendData+0x16>
    3a58:	f8 01       	movw	r30, r16
    3a5a:	85 81       	ldd	r24, Z+5	; 0x05
    3a5c:	96 81       	ldd	r25, Z+6	; 0x06
    3a5e:	90 93 46 0c 	sts	0x0C46, r25	; 0x800c46 <macConfig+0x16>
    3a62:	80 93 45 0c 	sts	0x0C45, r24	; 0x800c45 <macConfig+0x15>
    3a66:	4c 2f       	mov	r20, r28
    3a68:	50 e0       	ldi	r21, 0x00	; 0
    3a6a:	4e 5f       	subi	r20, 0xFE	; 254
    3a6c:	5f 4f       	sbci	r21, 0xFF	; 255
    3a6e:	b8 01       	movw	r22, r16
    3a70:	81 e8       	ldi	r24, 0x81	; 129
    3a72:	91 e0       	ldi	r25, 0x01	; 1
    3a74:	0e 94 f8 31 	call	0x63f0	; 0x63f0 <memcpy>
    3a78:	ce 5f       	subi	r28, 0xFE	; 254
    3a7a:	c0 93 80 01 	sts	0x0180, r28	; 0x800180 <__TEXT_REGION_LENGTH__+0x7e0180>
    3a7e:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    3a82:	82 60       	ori	r24, 0x02	; 2
    3a84:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    3a88:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    3a8c:	8d 7f       	andi	r24, 0xFD	; 253
    3a8e:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    3a92:	80 e4       	ldi	r24, 0x40	; 64
    3a94:	01 c0       	rjmp	.+2      	; 0x3a98 <radioSendData+0x66>
    3a96:	82 e4       	ldi	r24, 0x42	; 66
    3a98:	cf 91       	pop	r28
    3a9a:	1f 91       	pop	r17
    3a9c:	0f 91       	pop	r16
    3a9e:	08 95       	ret

00003aa0 <radioSetDeviceRole>:
    3aa0:	ee e6       	ldi	r30, 0x6E	; 110
    3aa2:	f1 e0       	ldi	r31, 0x01	; 1
    3aa4:	90 81       	ld	r25, Z
    3aa6:	80 fb       	bst	r24, 0
    3aa8:	93 f9       	bld	r25, 3
    3aaa:	90 83       	st	Z, r25
    3aac:	08 95       	ret

00003aae <radioSetPanId>:
    3aae:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7e0162>
    3ab2:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <__TEXT_REGION_LENGTH__+0x7e0163>
    3ab6:	08 95       	ret

00003ab8 <radioSetShortAddress>:
    3ab8:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7e0160>
    3abc:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <__TEXT_REGION_LENGTH__+0x7e0161>
    3ac0:	08 95       	ret

00003ac2 <radioSetExtendedAddress>:
    3ac2:	e4 e6       	ldi	r30, 0x64	; 100
    3ac4:	f1 e0       	ldi	r31, 0x01	; 1
    3ac6:	dc 01       	movw	r26, r24
    3ac8:	2d 91       	ld	r18, X+
    3aca:	cd 01       	movw	r24, r26
    3acc:	21 93       	st	Z+, r18
    3ace:	ec 36       	cpi	r30, 0x6C	; 108
    3ad0:	b1 e0       	ldi	r27, 0x01	; 1
    3ad2:	fb 07       	cpc	r31, r27
    3ad4:	c1 f7       	brne	.-16     	; 0x3ac6 <radioSetExtendedAddress+0x4>
    3ad6:	08 95       	ret

00003ad8 <radioRandom>:
    3ad8:	cf 93       	push	r28
    3ada:	df 93       	push	r29
    3adc:	c8 2f       	mov	r28, r24
    3ade:	d0 91 41 01 	lds	r29, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    3ae2:	0e 94 11 1b 	call	0x3622	; 0x3622 <radioGetPartnum>
    3ae6:	83 30       	cpi	r24, 0x03	; 3
    3ae8:	39 f4       	brne	.+14     	; 0x3af8 <radioRandom+0x20>
    3aea:	df 70       	andi	r29, 0x0F	; 15
    3aec:	d6 30       	cpi	r29, 0x06	; 6
    3aee:	f1 f4       	brne	.+60     	; 0x3b2c <radioRandom+0x54>
    3af0:	c6 95       	lsr	r28
    3af2:	90 e0       	ldi	r25, 0x00	; 0
    3af4:	20 e0       	ldi	r18, 0x00	; 0
    3af6:	09 c0       	rjmp	.+18     	; 0x3b0a <radioRandom+0x32>
    3af8:	0e 94 11 1b 	call	0x3622	; 0x3622 <radioGetPartnum>
    3afc:	83 38       	cpi	r24, 0x83	; 131
    3afe:	a9 f3       	breq	.-22     	; 0x3aea <radioRandom+0x12>
    3b00:	0e 94 11 1b 	call	0x3622	; 0x3622 <radioGetPartnum>
    3b04:	87 30       	cpi	r24, 0x07	; 7
    3b06:	91 f4       	brne	.+36     	; 0x3b2c <radioRandom+0x54>
    3b08:	f0 cf       	rjmp	.-32     	; 0x3aea <radioRandom+0x12>
    3b0a:	9c 17       	cp	r25, r28
    3b0c:	69 f0       	breq	.+26     	; 0x3b28 <radioRandom+0x50>
    3b0e:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__TEXT_REGION_LENGTH__+0x7e0146>
    3b12:	44 e0       	ldi	r20, 0x04	; 4
    3b14:	24 9f       	mul	r18, r20
    3b16:	90 01       	movw	r18, r0
    3b18:	11 24       	eor	r1, r1
    3b1a:	80 76       	andi	r24, 0x60	; 96
    3b1c:	82 95       	swap	r24
    3b1e:	86 95       	lsr	r24
    3b20:	87 70       	andi	r24, 0x07	; 7
    3b22:	28 2b       	or	r18, r24
    3b24:	9f 5f       	subi	r25, 0xFF	; 255
    3b26:	f1 cf       	rjmp	.-30     	; 0x3b0a <radioRandom+0x32>
    3b28:	82 2f       	mov	r24, r18
    3b2a:	02 c0       	rjmp	.+4      	; 0x3b30 <radioRandom+0x58>
    3b2c:	0e 94 96 2f 	call	0x5f2c	; 0x5f2c <rand>
    3b30:	df 91       	pop	r29
    3b32:	cf 91       	pop	r28
    3b34:	08 95       	ret

00003b36 <radioSetup900>:
    {
    }
}

void radioSetup900(void)
{
    3b36:	08 95       	ret

00003b38 <__vector_59>:
	/*! \brief ISR for the Radio RX_START event.
	 */
	void TRX24_RX_START_vect(void);
	#else  /* !DOXYGEN */
	ISR(TRX24_RX_START_vect)
	{
    3b38:	1f 92       	push	r1
    3b3a:	0f 92       	push	r0
    3b3c:	0f b6       	in	r0, 0x3f	; 63
    3b3e:	0f 92       	push	r0
    3b40:	11 24       	eor	r1, r1
    3b42:	0b b6       	in	r0, 0x3b	; 59
    3b44:	0f 92       	push	r0
    3b46:	2f 93       	push	r18
    3b48:	3f 93       	push	r19
    3b4a:	4f 93       	push	r20
    3b4c:	5f 93       	push	r21
    3b4e:	6f 93       	push	r22
    3b50:	7f 93       	push	r23
    3b52:	8f 93       	push	r24
    3b54:	9f 93       	push	r25
    3b56:	af 93       	push	r26
    3b58:	bf 93       	push	r27
    3b5a:	ef 93       	push	r30
    3b5c:	ff 93       	push	r31
	    //    debugMsgStr("rxstart");
	    radioRxStartEvent();
    3b5e:	0e 94 1c 1b 	call	0x3638	; 0x3638 <radioRxStartEvent>
	}
    3b62:	ff 91       	pop	r31
    3b64:	ef 91       	pop	r30
    3b66:	bf 91       	pop	r27
    3b68:	af 91       	pop	r26
    3b6a:	9f 91       	pop	r25
    3b6c:	8f 91       	pop	r24
    3b6e:	7f 91       	pop	r23
    3b70:	6f 91       	pop	r22
    3b72:	5f 91       	pop	r21
    3b74:	4f 91       	pop	r20
    3b76:	3f 91       	pop	r19
    3b78:	2f 91       	pop	r18
    3b7a:	0f 90       	pop	r0
    3b7c:	0b be       	out	0x3b, r0	; 59
    3b7e:	0f 90       	pop	r0
    3b80:	0f be       	out	0x3f, r0	; 63
    3b82:	0f 90       	pop	r0
    3b84:	1f 90       	pop	r1
    3b86:	18 95       	reti

00003b88 <__vector_60>:
/*! \brief ISR for the Radio RX_START event.
 */
void TRX24_RX_END_vect(void);
#else  /* !DOXYGEN */
	ISR(TRX24_RX_END_vect)
	{
    3b88:	1f 92       	push	r1
    3b8a:	0f 92       	push	r0
    3b8c:	0f b6       	in	r0, 0x3f	; 63
    3b8e:	0f 92       	push	r0
    3b90:	11 24       	eor	r1, r1
    3b92:	0b b6       	in	r0, 0x3b	; 59
    3b94:	0f 92       	push	r0
    3b96:	2f 93       	push	r18
    3b98:	3f 93       	push	r19
    3b9a:	4f 93       	push	r20
    3b9c:	5f 93       	push	r21
    3b9e:	6f 93       	push	r22
    3ba0:	7f 93       	push	r23
    3ba2:	8f 93       	push	r24
    3ba4:	9f 93       	push	r25
    3ba6:	af 93       	push	r26
    3ba8:	bf 93       	push	r27
    3baa:	ef 93       	push	r30
    3bac:	ff 93       	push	r31
	    //debugMsgStr("rxend");
	    radioTrxEndEvent();
    3bae:	0e 94 65 1c 	call	0x38ca	; 0x38ca <radioTrxEndEvent>
	}
    3bb2:	ff 91       	pop	r31
    3bb4:	ef 91       	pop	r30
    3bb6:	bf 91       	pop	r27
    3bb8:	af 91       	pop	r26
    3bba:	9f 91       	pop	r25
    3bbc:	8f 91       	pop	r24
    3bbe:	7f 91       	pop	r23
    3bc0:	6f 91       	pop	r22
    3bc2:	5f 91       	pop	r21
    3bc4:	4f 91       	pop	r20
    3bc6:	3f 91       	pop	r19
    3bc8:	2f 91       	pop	r18
    3bca:	0f 90       	pop	r0
    3bcc:	0b be       	out	0x3b, r0	; 59
    3bce:	0f 90       	pop	r0
    3bd0:	0f be       	out	0x3f, r0	; 63
    3bd2:	0f 90       	pop	r0
    3bd4:	1f 90       	pop	r1
    3bd6:	18 95       	reti

00003bd8 <__vector_63>:
/*! \brief ISR for the Radio RX_START event.
 */
void TRX24_TX_END_vect(void);
#else  /* !DOXYGEN */
ISR(TRX24_TX_END_vect)
{
    3bd8:	1f 92       	push	r1
    3bda:	0f 92       	push	r0
    3bdc:	0f b6       	in	r0, 0x3f	; 63
    3bde:	0f 92       	push	r0
    3be0:	11 24       	eor	r1, r1
    3be2:	0b b6       	in	r0, 0x3b	; 59
    3be4:	0f 92       	push	r0
    3be6:	2f 93       	push	r18
    3be8:	3f 93       	push	r19
    3bea:	4f 93       	push	r20
    3bec:	5f 93       	push	r21
    3bee:	6f 93       	push	r22
    3bf0:	7f 93       	push	r23
    3bf2:	8f 93       	push	r24
    3bf4:	9f 93       	push	r25
    3bf6:	af 93       	push	r26
    3bf8:	bf 93       	push	r27
    3bfa:	ef 93       	push	r30
    3bfc:	ff 93       	push	r31
    //    debugMsgStr("txend");
    //    debugMsgHex(hal_subregister_read(SR_TRX_STATUS));

    /// @todo fix this - this interrupt should never occur!!
    if (hal_subregister_read(SR_TRX_STATUS) != 0x16)
    3bfe:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    3c02:	8f 71       	andi	r24, 0x1F	; 31
    3c04:	86 31       	cpi	r24, 0x16	; 22
    3c06:	11 f0       	breq	.+4      	; 0x3c0c <__vector_63+0x34>
        radioTrxEndEvent();
    3c08:	0e 94 65 1c 	call	0x38ca	; 0x38ca <radioTrxEndEvent>
}
    3c0c:	ff 91       	pop	r31
    3c0e:	ef 91       	pop	r30
    3c10:	bf 91       	pop	r27
    3c12:	af 91       	pop	r26
    3c14:	9f 91       	pop	r25
    3c16:	8f 91       	pop	r24
    3c18:	7f 91       	pop	r23
    3c1a:	6f 91       	pop	r22
    3c1c:	5f 91       	pop	r21
    3c1e:	4f 91       	pop	r20
    3c20:	3f 91       	pop	r19
    3c22:	2f 91       	pop	r18
    3c24:	0f 90       	pop	r0
    3c26:	0b be       	out	0x3b, r0	; 59
    3c28:	0f 90       	pop	r0
    3c2a:	0f be       	out	0x3f, r0	; 63
    3c2c:	0f 90       	pop	r0
    3c2e:	1f 90       	pop	r1
    3c30:	18 95       	reti

00003c32 <__vector_61>:
	#ifndef TRX24_CCA_ED_READY_vect
	  #define TRX24_CCA_ED_READY_vect TRX24_CCA_ED_DONE_vect
	#endif

	ISR(TRX24_CCA_ED_READY_vect)
	{
    3c32:	1f 92       	push	r1
    3c34:	0f 92       	push	r0
    3c36:	0f b6       	in	r0, 0x3f	; 63
    3c38:	0f 92       	push	r0
    3c3a:	11 24       	eor	r1, r1
    3c3c:	0b b6       	in	r0, 0x3b	; 59
    3c3e:	0f 92       	push	r0
    3c40:	2f 93       	push	r18
    3c42:	3f 93       	push	r19
    3c44:	4f 93       	push	r20
    3c46:	5f 93       	push	r21
    3c48:	6f 93       	push	r22
    3c4a:	7f 93       	push	r23
    3c4c:	8f 93       	push	r24
    3c4e:	9f 93       	push	r25
    3c50:	af 93       	push	r26
    3c52:	bf 93       	push	r27
    3c54:	ef 93       	push	r30
    3c56:	ff 93       	push	r31
	    //    debugMsgStr("ccaend");

	    macEdCallback();
    3c58:	0e 94 18 25 	call	0x4a30	; 0x4a30 <macEdCallback>
	}
    3c5c:	ff 91       	pop	r31
    3c5e:	ef 91       	pop	r30
    3c60:	bf 91       	pop	r27
    3c62:	af 91       	pop	r26
    3c64:	9f 91       	pop	r25
    3c66:	8f 91       	pop	r24
    3c68:	7f 91       	pop	r23
    3c6a:	6f 91       	pop	r22
    3c6c:	5f 91       	pop	r21
    3c6e:	4f 91       	pop	r20
    3c70:	3f 91       	pop	r19
    3c72:	2f 91       	pop	r18
    3c74:	0f 90       	pop	r0
    3c76:	0b be       	out	0x3b, r0	; 59
    3c78:	0f 90       	pop	r0
    3c7a:	0f be       	out	0x3f, r0	; 63
    3c7c:	0f 90       	pop	r0
    3c7e:	1f 90       	pop	r1
    3c80:	18 95       	reti

00003c82 <calibrate_rc_osc>:
    and monitor the CPU clock on an I/O pin.

    @return TRUE if calibrate passed; FALSE if calibrate failed.
*/
bool calibrate_rc_osc(void)
{
    3c82:	cf 92       	push	r12
    3c84:	df 92       	push	r13
    3c86:	ef 92       	push	r14
    3c88:	ff 92       	push	r15
    3c8a:	0f 93       	push	r16
    3c8c:	1f 93       	push	r17
    3c8e:	cf 93       	push	r28
    3c90:	df 93       	push	r29
    3c92:	00 d0       	rcall	.+0      	; 0x3c94 <calibrate_rc_osc+0x12>
    3c94:	cd b7       	in	r28, 0x3d	; 61
    3c96:	de b7       	in	r29, 0x3e	; 62
    if (SERIAL && F_CPU >= 2000000UL) // only need for making serial port work
    {
        bool success = false;
        static bool once=0;

        if (once)
    3c98:	10 91 35 05 	lds	r17, 0x0535	; 0x800535 <once.3484>
    3c9c:	11 23       	and	r17, r17
    3c9e:	11 f0       	breq	.+4      	; 0x3ca4 <calibrate_rc_osc+0x22>
            // Only calibrate once
            return true;
    3ca0:	11 e0       	ldi	r17, 0x01	; 1
    3ca2:	58 c0       	rjmp	.+176    	; 0x3d54 <calibrate_rc_osc+0xd2>

        once = true;
    3ca4:	81 e0       	ldi	r24, 0x01	; 1
    3ca6:	80 93 35 05 	sts	0x0535, r24	; 0x800535 <once.3484>
        //   timer2 to overflow
        // Timer 2 (8-bit) is run from the main CPU clock divided by
        //   32.  This means the clock is 31250Hz at 1MHz, or 250KHz at 8MHz.
        //   Target time is 1024uS (8MHz) or 8192uS (1MHz).

        osccal_saved = OSCCAL;
    3caa:	f0 90 66 00 	lds	r15, 0x0066	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>
        cli();
    3cae:	f8 94       	cli

        radioSetClockSpeed(true, CLKM_1MHz);
    3cb0:	61 e0       	ldi	r22, 0x01	; 1
    3cb2:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <radioSetClockSpeed>

        // Save current values of timer status.
        tccr2b = TCCR2B;
    3cb6:	c0 90 b1 00 	lds	r12, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
        tccr1b = TCCR1B;
    3cba:	d0 90 81 00 	lds	r13, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        tccr1a = TCCR1A;
    3cbe:	e0 90 80 00 	lds	r14, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>

        // Stop timers 1 and 2.
        // Set timer 1 to normal mode (no CTC, no PWM, just count).
        TCCR2B = 0;
    3cc2:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
        TCCR1B = 0;
    3cc6:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        TCCR1A = 0;
    3cca:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3cce:	88 ee       	ldi	r24, 0xE8	; 232
    3cd0:	93 e0       	ldi	r25, 0x03	; 3

        for (counter = 0; counter < 1000;  counter++)
        {
            // Timer 2 driven from clock divided by 32
            TCCR2B = (1 << CS21) | (1 << CS20);
    3cd2:	43 e0       	ldi	r20, 0x03	; 3
            // Timer 1 driven with external clock
            TCCR1B = (1 << CS12) | (1 << CS11);
    3cd4:	56 e0       	ldi	r21, 0x06	; 6

            // Clear pending timer 1 and 2 interrupts, and clear the
            // counters.
            TCNT2 = 0;
            TCNT1 = 0;
            TIFR1 = 0xFF;
    3cd6:	3f ef       	ldi	r19, 0xFF	; 255
        TCCR1A = 0;

        for (counter = 0; counter < 1000;  counter++)
        {
            // Timer 2 driven from clock divided by 32
            TCCR2B = (1 << CS21) | (1 << CS20);
    3cd8:	40 93 b1 00 	sts	0x00B1, r20	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
            // Timer 1 driven with external clock
            TCCR1B = (1 << CS12) | (1 << CS11);
    3cdc:	50 93 81 00 	sts	0x0081, r21	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

            // Clear pending timer 1 and 2 interrupts, and clear the
            // counters.
            TCNT2 = 0;
    3ce0:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
            TCNT1 = 0;
    3ce4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    3ce8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
            TIFR1 = 0xFF;
    3cec:	36 bb       	out	0x16, r19	; 22
            TIFR2 = 0xFF;
    3cee:	37 bb       	out	0x17, r19	; 23

            // Wait for timer 2 to overflow.
            while (!(TIFR2 & (1 << TOV2)))
    3cf0:	b8 9b       	sbis	0x17, 0	; 23
    3cf2:	fe cf       	rjmp	.-4      	; 0x3cf0 <calibrate_rc_osc+0x6e>
                ;

            temp = TCNT1;
    3cf4:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    3cf8:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    3cfc:	7a 83       	std	Y+2, r23	; 0x02
    3cfe:	69 83       	std	Y+1, r22	; 0x01


            // Stop timer 1.  Now, TCNT1 contains the number of 1MHz RF2xx cycles
            // counted while timer 2 was counting CPU cycles
            TCCR1B = 0;
    3d00:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
            TCCR2B = 0;
    3d04:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>

            if (temp < (u16)(0.995 * TARGETVAL))
    3d08:	69 81       	ldd	r22, Y+1	; 0x01
    3d0a:	7a 81       	ldd	r23, Y+2	; 0x02
    3d0c:	6d 3f       	cpi	r22, 0xFD	; 253
    3d0e:	71 40       	sbci	r23, 0x01	; 1
    3d10:	20 f4       	brcc	.+8      	; 0x3d1a <calibrate_rc_osc+0x98>
            {
                // Too fast, slow down
                OSCCAL--;
    3d12:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>
    3d16:	21 50       	subi	r18, 0x01	; 1
    3d18:	08 c0       	rjmp	.+16     	; 0x3d2a <calibrate_rc_osc+0xa8>
            }
            else if (temp > (u16)(1.005 * TARGETVAL))
    3d1a:	69 81       	ldd	r22, Y+1	; 0x01
    3d1c:	7a 81       	ldd	r23, Y+2	; 0x02
    3d1e:	63 30       	cpi	r22, 0x03	; 3
    3d20:	72 40       	sbci	r23, 0x02	; 2
    3d22:	48 f0       	brcs	.+18     	; 0x3d36 <calibrate_rc_osc+0xb4>
            {
                // Too slow, speed up
                OSCCAL++;
    3d24:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>
    3d28:	2f 5f       	subi	r18, 0xFF	; 255
    3d2a:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>
    3d2e:	01 97       	sbiw	r24, 0x01	; 1
        // Set timer 1 to normal mode (no CTC, no PWM, just count).
        TCCR2B = 0;
        TCCR1B = 0;
        TCCR1A = 0;

        for (counter = 0; counter < 1000;  counter++)
    3d30:	99 f6       	brne	.-90     	; 0x3cd8 <calibrate_rc_osc+0x56>
*/
bool calibrate_rc_osc(void)
{
    if (SERIAL && F_CPU >= 2000000UL) // only need for making serial port work
    {
        bool success = false;
    3d32:	00 e0       	ldi	r16, 0x00	; 0
    3d34:	01 c0       	rjmp	.+2      	; 0x3d38 <calibrate_rc_osc+0xb6>
            }
            else
            {
                // We are within +/- 0.5 % of our target frequency, so we're
                // done.
                success = true;
    3d36:	01 e0       	ldi	r16, 0x01	; 1
                break;
            }
        }

        radioSetClockSpeed(true, CLKM_DISABLED);
    3d38:	60 e0       	ldi	r22, 0x00	; 0
    3d3a:	81 e0       	ldi	r24, 0x01	; 1
    3d3c:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <radioSetClockSpeed>

        // restore timer status regs
        TCCR2B = tccr2b;
    3d40:	c0 92 b1 00 	sts	0x00B1, r12	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
        TCCR1B = tccr1b;
    3d44:	d0 92 81 00 	sts	0x0081, r13	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        TCCR1A = tccr1a;
    3d48:	e0 92 80 00 	sts	0x0080, r14	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
        if (!success)
    3d4c:	01 11       	cpse	r16, r1
    3d4e:	a8 cf       	rjmp	.-176    	; 0x3ca0 <calibrate_rc_osc+0x1e>
        {
            // We failed, therefore restore previous OSCCAL value.
            OSCCAL = osccal_saved;
    3d50:	f0 92 66 00 	sts	0x0066, r15	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>

        return success;
    }
    else
        return 0;
}
    3d54:	81 2f       	mov	r24, r17
    3d56:	0f 90       	pop	r0
    3d58:	0f 90       	pop	r0
    3d5a:	df 91       	pop	r29
    3d5c:	cf 91       	pop	r28
    3d5e:	1f 91       	pop	r17
    3d60:	0f 91       	pop	r16
    3d62:	ff 90       	pop	r15
    3d64:	ef 90       	pop	r14
    3d66:	df 90       	pop	r13
    3d68:	cf 90       	pop	r12
    3d6a:	08 95       	ret

00003d6c <halGetEeprom>:
   @param offset The offset in EEPROM of the start of the data block
   @param length The length in bytes of the data block
   @param dest  Pointer to the area in memory to place the data block
*/
void halGetEeprom(void *addr, u8 length, u8 *dest)
{
    3d6c:	cf 93       	push	r28
    3d6e:	df 93       	push	r29
    3d70:	1f 92       	push	r1
    3d72:	cd b7       	in	r28, 0x3d	; 61
    3d74:	de b7       	in	r29, 0x3e	; 62
    3d76:	fc 01       	movw	r30, r24
    3d78:	ca 01       	movw	r24, r20
    AVR_ENTER_CRITICAL_REGION();
    3d7a:	3f b7       	in	r19, 0x3f	; 63
    3d7c:	39 83       	std	Y+1, r19	; 0x01
    3d7e:	f8 94       	cli
    eeprom_read_block (dest, addr, length);
    3d80:	46 2f       	mov	r20, r22
    3d82:	50 e0       	ldi	r21, 0x00	; 0
    3d84:	bf 01       	movw	r22, r30
    3d86:	0e 94 03 35 	call	0x6a06	; 0x6a06 <eeprom_read_block>
    AVR_LEAVE_CRITICAL_REGION();
    3d8a:	89 81       	ldd	r24, Y+1	; 0x01
    3d8c:	8f bf       	out	0x3f, r24	; 63
}
    3d8e:	0f 90       	pop	r0
    3d90:	df 91       	pop	r29
    3d92:	cf 91       	pop	r28
    3d94:	08 95       	ret

00003d96 <halPutEeprom>:
   @param offset The offset in EEPROM of the start of the data block
   @param length The length in bytes of the data block
   @param src  Pointer to the area in memory which contains the data block
*/
void halPutEeprom(void *addr, u8 length, u8 *src)
{
    3d96:	cf 93       	push	r28
    3d98:	df 93       	push	r29
    3d9a:	1f 92       	push	r1
    3d9c:	cd b7       	in	r28, 0x3d	; 61
    3d9e:	de b7       	in	r29, 0x3e	; 62
    3da0:	fc 01       	movw	r30, r24
    3da2:	ca 01       	movw	r24, r20
    AVR_ENTER_CRITICAL_REGION();
    3da4:	3f b7       	in	r19, 0x3f	; 63
    3da6:	39 83       	std	Y+1, r19	; 0x01
    3da8:	f8 94       	cli
    eeprom_write_block (src, addr, length);
    3daa:	46 2f       	mov	r20, r22
    3dac:	50 e0       	ldi	r21, 0x00	; 0
    3dae:	bf 01       	movw	r22, r30
    3db0:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <eeprom_write_block>
    AVR_LEAVE_CRITICAL_REGION();
    3db4:	89 81       	ldd	r24, Y+1	; 0x01
    3db6:	8f bf       	out	0x3f, r24	; 63
}
    3db8:	0f 90       	pop	r0
    3dba:	df 91       	pop	r29
    3dbc:	cf 91       	pop	r28
    3dbe:	08 95       	ret

00003dc0 <macInit>:

   @param Channel Sets the channel to use for the MAC.  Use 0xff for
   non-coordinator nodes.
*/
void macInit(u8 Channel)
{
    3dc0:	1f 93       	push	r17
    3dc2:	cf 93       	push	r28
    3dc4:	df 93       	push	r29
    3dc6:	cd b7       	in	r28, 0x3d	; 61
    3dc8:	de b7       	in	r29, 0x3e	; 62
    3dca:	28 97       	sbiw	r28, 0x08	; 8
    3dcc:	0f b6       	in	r0, 0x3f	; 63
    3dce:	f8 94       	cli
    3dd0:	de bf       	out	0x3e, r29	; 62
    3dd2:	0f be       	out	0x3f, r0	; 63
    3dd4:	cd bf       	out	0x3d, r28	; 61
    3dd6:	18 2f       	mov	r17, r24
    // ETG DEBUG
    // Base address of the GPIO modules.
  //  volatile avr32_gpio_t * myGpio = &AVR32_GPIO;
#endif

    macConfig.panId = BROADCASTPANID;
    3dd8:	2f ef       	ldi	r18, 0xFF	; 255
    3dda:	3f ef       	ldi	r19, 0xFF	; 255
    3ddc:	30 93 3c 0c 	sts	0x0C3C, r19	; 0x800c3c <macConfig+0xc>
    3de0:	20 93 3b 0c 	sts	0x0C3B, r18	; 0x800c3b <macConfig+0xb>
    macConfig.shortAddress = BROADCASTADDR;
    3de4:	30 93 3e 0c 	sts	0x0C3E, r19	; 0x800c3e <macConfig+0xe>
    3de8:	20 93 3d 0c 	sts	0x0C3D, r18	; 0x800c3d <macConfig+0xd>
    macConfig.associated = false;
    3dec:	10 92 38 0c 	sts	0x0C38, r1	; 0x800c38 <macConfig+0x8>

    macConfig.parentShortAddress = BROADCASTADDR;
    3df0:	30 93 40 0c 	sts	0x0C40, r19	; 0x800c40 <macConfig+0x10>
    3df4:	20 93 3f 0c 	sts	0x0C3F, r18	; 0x800c3f <macConfig+0xf>
    macConfig.lastRoute = BROADCASTADDR;
    3df8:	30 93 42 0c 	sts	0x0C42, r19	; 0x800c42 <macConfig+0x12>
    3dfc:	20 93 41 0c 	sts	0x0C41, r18	; 0x800c41 <macConfig+0x11>
    macConfig.hopsToCoord = 0;
    3e00:	10 92 43 0c 	sts	0x0C43, r1	; 0x800c43 <macConfig+0x13>
    macConfig.busy = 0;
    3e04:	10 92 47 0c 	sts	0x0C47, r1	; 0x800c47 <macConfig+0x17>
    macConfig.sleeping = 1; // Assume sleeping state initially
    3e08:	81 e0       	ldi	r24, 0x01	; 1
    3e0a:	80 93 48 0c 	sts	0x0C48, r24	; 0x800c48 <macConfig+0x18>

    // Init radio
    radioInit(SERIAL ? true : false);
    3e0e:	0e 94 a0 1b 	call	0x3740	; 0x3740 <radioInit>

    // Set the channel
    macConfig.currentChannel = Channel;
    3e12:	10 93 44 0c 	sts	0x0C44, r17	; 0x800c44 <macConfig+0x14>
    if (Channel != 0xff)
    3e16:	1f 3f       	cpi	r17, 0xFF	; 255
    3e18:	19 f0       	breq	.+6      	; 0x3e20 <macInit+0x60>
        radioSetOperatingChannel(Channel);
    3e1a:	81 2f       	mov	r24, r17
    3e1c:	0e 94 30 1b 	call	0x3660	; 0x3660 <radioSetOperatingChannel>

    radioUseAutoTxCrc(true);
    3e20:	81 e0       	ldi	r24, 0x01	; 1
    3e22:	0e 94 cc 1b 	call	0x3798	; 0x3798 <radioUseAutoTxCrc>
    radioSetTrxState(TRX_OFF);
    3e26:	88 e0       	ldi	r24, 0x08	; 8
    3e28:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <radioSetTrxState>

    // Set RF212 to 250KB mode.
    radioSetup900();
    3e2c:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <radioSetup900>

    // Set ack times shorter
   /// hal_subregister_write(SR_AACK_ACK_TIME, 1); //longer ack response time seems to work better, pb

    radioSetTrxState(RX_AACK_ON);
    3e30:	86 e1       	ldi	r24, 0x16	; 22
    3e32:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <radioSetTrxState>
    // DEBUG
//    myGpio->port[0].ovr &= ~(1<<0);
#endif

    // Setup the address of this device by reading a stored address from eeprom.
    halGetMacAddr((u8*)&(macConfig.longAddr));
    3e36:	40 e3       	ldi	r20, 0x30	; 48
    3e38:	5c e0       	ldi	r21, 0x0C	; 12
    3e3a:	68 e0       	ldi	r22, 0x08	; 8
    3e3c:	80 e0       	ldi	r24, 0x00	; 0
    3e3e:	90 e0       	ldi	r25, 0x00	; 0
    3e40:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <halGetEeprom>

    // Set up radio's coordinator flag
    radioSetDeviceRole(NODETYPE == COORD);
    3e44:	80 e0       	ldi	r24, 0x00	; 0
    3e46:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <radioSetDeviceRole>

    // Setup radio's short addess
    radioSetShortAddress(BROADCASTADDR);
    3e4a:	8f ef       	ldi	r24, 0xFF	; 255
    3e4c:	9f ef       	ldi	r25, 0xFF	; 255
    3e4e:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <radioSetShortAddress>

    // Setup radio's PANID
    radioSetPanId(BROADCASTPANID);
    3e52:	8f ef       	ldi	r24, 0xFF	; 255
    3e54:	9f ef       	ldi	r25, 0xFF	; 255
    3e56:	0e 94 57 1d 	call	0x3aae	; 0x3aae <radioSetPanId>

    // Set up the radio for auto mode operation.
    hal_subregister_write( SR_MAX_FRAME_RETRIES, 2 );
    3e5a:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <__TEXT_REGION_LENGTH__+0x7e016c>
    3e5e:	8f 70       	andi	r24, 0x0F	; 15
    3e60:	80 62       	ori	r24, 0x20	; 32
    3e62:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <__TEXT_REGION_LENGTH__+0x7e016c>

    // Load the long address into the radio. Needed for auto modes.
// ETG
    u64 longAddr = htons_64(macConfig.longAddr);
    3e66:	80 91 30 0c 	lds	r24, 0x0C30	; 0x800c30 <macConfig>
    3e6a:	89 83       	std	Y+1, r24	; 0x01
    3e6c:	80 91 31 0c 	lds	r24, 0x0C31	; 0x800c31 <macConfig+0x1>
    3e70:	8a 83       	std	Y+2, r24	; 0x02
    3e72:	80 91 32 0c 	lds	r24, 0x0C32	; 0x800c32 <macConfig+0x2>
    3e76:	8b 83       	std	Y+3, r24	; 0x03
    3e78:	80 91 33 0c 	lds	r24, 0x0C33	; 0x800c33 <macConfig+0x3>
    3e7c:	8c 83       	std	Y+4, r24	; 0x04
    3e7e:	80 91 34 0c 	lds	r24, 0x0C34	; 0x800c34 <macConfig+0x4>
    3e82:	8d 83       	std	Y+5, r24	; 0x05
    3e84:	80 91 35 0c 	lds	r24, 0x0C35	; 0x800c35 <macConfig+0x5>
    3e88:	8e 83       	std	Y+6, r24	; 0x06
    3e8a:	80 91 36 0c 	lds	r24, 0x0C36	; 0x800c36 <macConfig+0x6>
    3e8e:	8f 83       	std	Y+7, r24	; 0x07
    3e90:	80 91 37 0c 	lds	r24, 0x0C37	; 0x800c37 <macConfig+0x7>
    3e94:	88 87       	std	Y+8, r24	; 0x08
// ETG    radioSetExtendedAddress((uint8_t *)&macConfig.longAddr);
    radioSetExtendedAddress((uint8_t *)&longAddr);
    3e96:	ce 01       	movw	r24, r28
    3e98:	01 96       	adiw	r24, 0x01	; 1
    3e9a:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <radioSetExtendedAddress>

    // Initialize the array of nodes (coordinator only)
    macInitNodes();
    3e9e:	0e 94 29 20 	call	0x4052	; 0x4052 <macInitNodes>
}
    3ea2:	28 96       	adiw	r28, 0x08	; 8
    3ea4:	0f b6       	in	r0, 0x3f	; 63
    3ea6:	f8 94       	cli
    3ea8:	de bf       	out	0x3e, r29	; 62
    3eaa:	0f be       	out	0x3f, r0	; 63
    3eac:	cd bf       	out	0x3d, r28	; 61
    3eae:	df 91       	pop	r29
    3eb0:	cf 91       	pop	r28
    3eb2:	1f 91       	pop	r17
    3eb4:	08 95       	ret

00003eb6 <macSetOperatingChannel>:
   @param channel The channel number to use for radio communication.
*/
void macSetOperatingChannel(u8 channel)
{
    // Set the channel
    macConfig.currentChannel = channel;
    3eb6:	80 93 44 0c 	sts	0x0C44, r24	; 0x800c44 <macConfig+0x14>
    radioSetOperatingChannel(channel);
    3eba:	0c 94 30 1b 	jmp	0x3660	; 0x3660 <radioSetOperatingChannel>

00003ebe <macAssociationConfirm>:
   parent.

   @param addr The short address of the child node that has woken up.
*/
void macClearChildWakeFlag(u16 addr)
{
    3ebe:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <associationTimer>
    3ec2:	0e 94 d5 25 	call	0x4baa	; 0x4baa <macTimerEnd>
    3ec6:	90 91 38 0c 	lds	r25, 0x0C38	; 0x800c38 <macConfig+0x8>
    3eca:	81 e0       	ldi	r24, 0x01	; 1
    3ecc:	89 27       	eor	r24, r25
    3ece:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <appAssociateConfirm>

00003ed2 <macAssociate>:
    3ed2:	cf 93       	push	r28
    3ed4:	df 93       	push	r29
    3ed6:	ec 01       	movw	r28, r24
    3ed8:	86 2f       	mov	r24, r22
    3eda:	0e 94 5b 1f 	call	0x3eb6	; 0x3eb6 <macSetOperatingChannel>
    3ede:	ee ea       	ldi	r30, 0xAE	; 174
    3ee0:	fb e0       	ldi	r31, 0x0B	; 11
    3ee2:	83 e6       	ldi	r24, 0x63	; 99
    3ee4:	98 ec       	ldi	r25, 0xC8	; 200
    3ee6:	92 83       	std	Z+2, r25	; 0x02
    3ee8:	81 83       	std	Z+1, r24	; 0x01
    3eea:	a0 e3       	ldi	r26, 0x30	; 48
    3eec:	bc e0       	ldi	r27, 0x0C	; 12
    3eee:	1a 96       	adiw	r26, 0x0a	; 10
    3ef0:	8c 91       	ld	r24, X
    3ef2:	1a 97       	sbiw	r26, 0x0a	; 10
    3ef4:	91 e0       	ldi	r25, 0x01	; 1
    3ef6:	98 0f       	add	r25, r24
    3ef8:	1a 96       	adiw	r26, 0x0a	; 10
    3efa:	9c 93       	st	X, r25
    3efc:	1a 97       	sbiw	r26, 0x0a	; 10
    3efe:	83 83       	std	Z+3, r24	; 0x03
    3f00:	1b 96       	adiw	r26, 0x0b	; 11
    3f02:	8d 91       	ld	r24, X+
    3f04:	9c 91       	ld	r25, X
    3f06:	1c 97       	sbiw	r26, 0x0c	; 12
    3f08:	95 83       	std	Z+5, r25	; 0x05
    3f0a:	84 83       	std	Z+4, r24	; 0x04
    3f0c:	d7 83       	std	Z+7, r29	; 0x07
    3f0e:	c6 83       	std	Z+6, r28	; 0x06
    3f10:	8c 91       	ld	r24, X
    3f12:	80 87       	std	Z+8, r24	; 0x08
    3f14:	11 96       	adiw	r26, 0x01	; 1
    3f16:	8c 91       	ld	r24, X
    3f18:	11 97       	sbiw	r26, 0x01	; 1
    3f1a:	81 87       	std	Z+9, r24	; 0x09
    3f1c:	12 96       	adiw	r26, 0x02	; 2
    3f1e:	8c 91       	ld	r24, X
    3f20:	12 97       	sbiw	r26, 0x02	; 2
    3f22:	82 87       	std	Z+10, r24	; 0x0a
    3f24:	13 96       	adiw	r26, 0x03	; 3
    3f26:	8c 91       	ld	r24, X
    3f28:	13 97       	sbiw	r26, 0x03	; 3
    3f2a:	83 87       	std	Z+11, r24	; 0x0b
    3f2c:	14 96       	adiw	r26, 0x04	; 4
    3f2e:	8c 91       	ld	r24, X
    3f30:	14 97       	sbiw	r26, 0x04	; 4
    3f32:	84 87       	std	Z+12, r24	; 0x0c
    3f34:	15 96       	adiw	r26, 0x05	; 5
    3f36:	8c 91       	ld	r24, X
    3f38:	15 97       	sbiw	r26, 0x05	; 5
    3f3a:	85 87       	std	Z+13, r24	; 0x0d
    3f3c:	16 96       	adiw	r26, 0x06	; 6
    3f3e:	8c 91       	ld	r24, X
    3f40:	16 97       	sbiw	r26, 0x06	; 6
    3f42:	86 87       	std	Z+14, r24	; 0x0e
    3f44:	17 96       	adiw	r26, 0x07	; 7
    3f46:	8c 91       	ld	r24, X
    3f48:	87 87       	std	Z+15, r24	; 0x0f
    3f4a:	81 e0       	ldi	r24, 0x01	; 1
    3f4c:	80 8b       	std	Z+16, r24	; 0x10
    3f4e:	d2 8b       	std	Z+18, r29	; 0x12
    3f50:	c1 8b       	std	Z+17, r28	; 0x11
    3f52:	82 e0       	ldi	r24, 0x02	; 2
    3f54:	83 8b       	std	Z+19, r24	; 0x13
    3f56:	6f ea       	ldi	r22, 0xAF	; 175
    3f58:	7b e0       	ldi	r23, 0x0B	; 11
    3f5a:	83 e1       	ldi	r24, 0x13	; 19
    3f5c:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <radioSendData>
    3f60:	6f e5       	ldi	r22, 0x5F	; 95
    3f62:	7f e1       	ldi	r23, 0x1F	; 31
    3f64:	88 ee       	ldi	r24, 0xE8	; 232
    3f66:	93 e0       	ldi	r25, 0x03	; 3
    3f68:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <macSetAlarm>
    3f6c:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <associationTimer>
    3f70:	df 91       	pop	r29
    3f72:	cf 91       	pop	r28
    3f74:	08 95       	ret

00003f76 <macIsChild>:
    3f76:	00 97       	sbiw	r24, 0x00	; 0
    3f78:	61 f0       	breq	.+24     	; 0x3f92 <macIsChild+0x1c>
    3f7a:	e6 e3       	ldi	r30, 0x36	; 54
    3f7c:	f5 e0       	ldi	r31, 0x05	; 5
    3f7e:	20 81       	ld	r18, Z
    3f80:	31 81       	ldd	r19, Z+1	; 0x01
    3f82:	28 17       	cp	r18, r24
    3f84:	39 07       	cpc	r19, r25
    3f86:	39 f0       	breq	.+14     	; 0x3f96 <macIsChild+0x20>
    3f88:	33 96       	adiw	r30, 0x03	; 3
    3f8a:	26 e0       	ldi	r18, 0x06	; 6
    3f8c:	e2 36       	cpi	r30, 0x62	; 98
    3f8e:	f2 07       	cpc	r31, r18
    3f90:	b1 f7       	brne	.-20     	; 0x3f7e <macIsChild+0x8>
    3f92:	80 e0       	ldi	r24, 0x00	; 0
    3f94:	08 95       	ret
    3f96:	81 e0       	ldi	r24, 0x01	; 1
    3f98:	08 95       	ret

00003f9a <macAddChild>:
    3f9a:	e6 e3       	ldi	r30, 0x36	; 54
    3f9c:	f5 e0       	ldi	r31, 0x05	; 5
    3f9e:	df 01       	movw	r26, r30
    3fa0:	20 e0       	ldi	r18, 0x00	; 0
    3fa2:	30 e0       	ldi	r19, 0x00	; 0
    3fa4:	4d 91       	ld	r20, X+
    3fa6:	5c 91       	ld	r21, X
    3fa8:	11 97       	sbiw	r26, 0x01	; 1
    3faa:	48 17       	cp	r20, r24
    3fac:	59 07       	cpc	r21, r25
    3fae:	69 f4       	brne	.+26     	; 0x3fca <macAddChild+0x30>
    3fb0:	f9 01       	movw	r30, r18
    3fb2:	ee 0f       	add	r30, r30
    3fb4:	ff 1f       	adc	r31, r31
    3fb6:	2e 0f       	add	r18, r30
    3fb8:	3f 1f       	adc	r19, r31
    3fba:	f9 01       	movw	r30, r18
    3fbc:	e8 5c       	subi	r30, 0xC8	; 200
    3fbe:	fa 4f       	sbci	r31, 0xFA	; 250
    3fc0:	80 81       	ld	r24, Z
    3fc2:	8e 7f       	andi	r24, 0xFE	; 254
    3fc4:	8d 7f       	andi	r24, 0xFD	; 253
    3fc6:	80 83       	st	Z, r24
    3fc8:	08 95       	ret
    3fca:	2f 5f       	subi	r18, 0xFF	; 255
    3fcc:	3f 4f       	sbci	r19, 0xFF	; 255
    3fce:	13 96       	adiw	r26, 0x03	; 3
    3fd0:	24 36       	cpi	r18, 0x64	; 100
    3fd2:	31 05       	cpc	r19, r1
    3fd4:	39 f7       	brne	.-50     	; 0x3fa4 <macAddChild+0xa>
    3fd6:	20 e0       	ldi	r18, 0x00	; 0
    3fd8:	30 e0       	ldi	r19, 0x00	; 0
    3fda:	42 2f       	mov	r20, r18
    3fdc:	60 81       	ld	r22, Z
    3fde:	71 81       	ldd	r23, Z+1	; 0x01
    3fe0:	67 2b       	or	r22, r23
    3fe2:	a9 f4       	brne	.+42     	; 0x400e <__stack+0xe>
    3fe4:	f9 01       	movw	r30, r18
    3fe6:	ee 0f       	add	r30, r30
    3fe8:	ff 1f       	adc	r31, r31
    3fea:	2e 0f       	add	r18, r30
    3fec:	3f 1f       	adc	r19, r31
    3fee:	f9 01       	movw	r30, r18
    3ff0:	ea 5c       	subi	r30, 0xCA	; 202
    3ff2:	fa 4f       	sbci	r31, 0xFA	; 250
    3ff4:	91 83       	std	Z+1, r25	; 0x01
    3ff6:	80 83       	st	Z, r24
    3ff8:	f9 01       	movw	r30, r18
    3ffa:	e8 5c       	subi	r30, 0xC8	; 200
    3ffc:	fa 4f       	sbci	r31, 0xFA	; 250
    3ffe:	90 81       	ld	r25, Z
    4000:	9e 7f       	andi	r25, 0xFE	; 254
    4002:	9d 7f       	andi	r25, 0xFD	; 253
    4004:	90 83       	st	Z, r25
    4006:	84 2f       	mov	r24, r20
    4008:	90 e0       	ldi	r25, 0x00	; 0
    400a:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <appChildAssociated>
    400e:	2f 5f       	subi	r18, 0xFF	; 255
    4010:	3f 4f       	sbci	r19, 0xFF	; 255
    4012:	33 96       	adiw	r30, 0x03	; 3
    4014:	24 36       	cpi	r18, 0x64	; 100
    4016:	31 05       	cpc	r19, r1
    4018:	01 f7       	brne	.-64     	; 0x3fda <macAddChild+0x40>
    401a:	08 95       	ret

0000401c <macRemoveChild>:
    401c:	e6 e3       	ldi	r30, 0x36	; 54
    401e:	f5 e0       	ldi	r31, 0x05	; 5
    4020:	20 e0       	ldi	r18, 0x00	; 0
    4022:	30 e0       	ldi	r19, 0x00	; 0
    4024:	40 81       	ld	r20, Z
    4026:	51 81       	ldd	r21, Z+1	; 0x01
    4028:	48 17       	cp	r20, r24
    402a:	59 07       	cpc	r21, r25
    402c:	59 f4       	brne	.+22     	; 0x4044 <macRemoveChild+0x28>
    402e:	f9 01       	movw	r30, r18
    4030:	ee 0f       	add	r30, r30
    4032:	ff 1f       	adc	r31, r31
    4034:	2e 0f       	add	r18, r30
    4036:	3f 1f       	adc	r19, r31
    4038:	f9 01       	movw	r30, r18
    403a:	ea 5c       	subi	r30, 0xCA	; 202
    403c:	fa 4f       	sbci	r31, 0xFA	; 250
    403e:	11 82       	std	Z+1, r1	; 0x01
    4040:	10 82       	st	Z, r1
    4042:	08 95       	ret
    4044:	2f 5f       	subi	r18, 0xFF	; 255
    4046:	3f 4f       	sbci	r19, 0xFF	; 255
    4048:	33 96       	adiw	r30, 0x03	; 3
    404a:	24 36       	cpi	r18, 0x64	; 100
    404c:	31 05       	cpc	r19, r1
    404e:	51 f7       	brne	.-44     	; 0x4024 <macRemoveChild+0x8>
    4050:	08 95       	ret

00004052 <macInitNodes>:
    4052:	08 95       	ret

00004054 <macWakeChildNode>:
    4054:	08 95       	ret

00004056 <macChildIsAwake>:
   This function is called on the receipt of every packet.

   @param frame Pointer to ftData struct, the received packet.
*/
void macChildIsAwake(ftData *frame)
{
    4056:	fc 01       	movw	r30, r24
            if (RUMSLEEP)
                macSendStoredFrame(addr);
        }
    }
    // Reset the sleeping bit in the frame.
    frame->type &= ~0x80;
    4058:	95 85       	ldd	r25, Z+13	; 0x0d
    405a:	9f 77       	andi	r25, 0x7F	; 127
    405c:	95 87       	std	Z+13, r25	; 0x0d
    405e:	08 95       	ret

00004060 <sendBeaconFrame>:
{
    if (NODETYPE != ENDDEVICE)
    {
        ftBeacon* data_frame = (ftBeacon*)(mac_buffer_tx+1);

        data_frame->fcf   = htons_16(FCF_BEACON);
    4060:	ee ea       	ldi	r30, 0xAE	; 174
    4062:	fb e0       	ldi	r31, 0x0B	; 11
    4064:	80 e0       	ldi	r24, 0x00	; 0
    4066:	90 e8       	ldi	r25, 0x80	; 128
    4068:	92 83       	std	Z+2, r25	; 0x02
    406a:	81 83       	std	Z+1, r24	; 0x01
        data_frame->seq   = macConfig.bsn++;
    406c:	a0 e3       	ldi	r26, 0x30	; 48
    406e:	bc e0       	ldi	r27, 0x0C	; 12
    4070:	19 96       	adiw	r26, 0x09	; 9
    4072:	8c 91       	ld	r24, X
    4074:	19 97       	sbiw	r26, 0x09	; 9
    4076:	91 e0       	ldi	r25, 0x01	; 1
    4078:	98 0f       	add	r25, r24
    407a:	19 96       	adiw	r26, 0x09	; 9
    407c:	9c 93       	st	X, r25
    407e:	19 97       	sbiw	r26, 0x09	; 9
    4080:	83 83       	std	Z+3, r24	; 0x03
        data_frame->panid = htons_16(macConfig.panId);
    4082:	1b 96       	adiw	r26, 0x0b	; 11
    4084:	8d 91       	ld	r24, X+
    4086:	9c 91       	ld	r25, X
    4088:	1c 97       	sbiw	r26, 0x0c	; 12
    408a:	95 83       	std	Z+5, r25	; 0x05
    408c:	84 83       	std	Z+4, r24	; 0x04
        data_frame->addr  = htons_16(macConfig.shortAddress);
    408e:	1d 96       	adiw	r26, 0x0d	; 13
    4090:	8d 91       	ld	r24, X+
    4092:	9c 91       	ld	r25, X
    4094:	1e 97       	sbiw	r26, 0x0e	; 14
    4096:	97 83       	std	Z+7, r25	; 0x07
    4098:	86 83       	std	Z+6, r24	; 0x06

        if (NODETYPE == ROUTER)
            data_frame->superFrame = htons_16(ROUTER_SUPERFRAME);
    409a:	8f ef       	ldi	r24, 0xFF	; 255
    409c:	90 e0       	ldi	r25, 0x00	; 0
    409e:	91 87       	std	Z+9, r25	; 0x09
    40a0:	80 87       	std	Z+8, r24	; 0x08
        else
            data_frame->superFrame = htons_16(COORD_SUPERFRAME);

        data_frame->netID = 0x06;
    40a2:	86 e0       	ldi	r24, 0x06	; 6
    40a4:	82 87       	std	Z+10, r24	; 0x0a
        data_frame->hops = macConfig.hopsToCoord;
    40a6:	53 96       	adiw	r26, 0x13	; 19
    40a8:	8c 91       	ld	r24, X
    40aa:	83 87       	std	Z+11, r24	; 0x0b

        // send data to radio.
        radioSendData(sizeof(ftBeacon), (u8 *)data_frame);
    40ac:	6f ea       	ldi	r22, 0xAF	; 175
    40ae:	7b e0       	ldi	r23, 0x0B	; 11
    40b0:	8b e0       	ldi	r24, 0x0B	; 11
    40b2:	0c 94 19 1d 	jmp	0x3a32	; 0x3a32 <radioSendData>

000040b6 <mdr_timer>:
    @param data Pointer to the data to be sent.

    @ingroup avr6lowpan
*/
void macsixlowpanDataRequest(u16 addr, u8 len, u8 * data)
{
    40b6:	6f ea       	ldi	r22, 0xAF	; 175
    40b8:	7b e0       	ldi	r23, 0x0B	; 11
    40ba:	80 91 ae 0b 	lds	r24, 0x0BAE	; 0x800bae <mac_buffer_tx>
    40be:	0c 94 19 1d 	jmp	0x3a32	; 0x3a32 <radioSendData>

000040c2 <macDataRequestInt>:
    40c2:	ef 92       	push	r14
    40c4:	ff 92       	push	r15
    40c6:	0f 93       	push	r16
    40c8:	1f 93       	push	r17
    40ca:	cf 93       	push	r28
    40cc:	df 93       	push	r29
    40ce:	e0 91 3d 0c 	lds	r30, 0x0C3D	; 0x800c3d <macConfig+0xd>
    40d2:	f0 91 3e 0c 	lds	r31, 0x0C3E	; 0x800c3e <macConfig+0xe>
    40d6:	8e 17       	cp	r24, r30
    40d8:	9f 07       	cpc	r25, r31
    40da:	09 f4       	brne	.+2      	; 0x40de <macDataRequestInt+0x1c>
    40dc:	6e c0       	rjmp	.+220    	; 0x41ba <macDataRequestInt+0xf8>
    40de:	8f 3f       	cpi	r24, 0xFF	; 255
    40e0:	3f ef       	ldi	r19, 0xFF	; 255
    40e2:	93 07       	cpc	r25, r19
    40e4:	09 f4       	brne	.+2      	; 0x40e8 <macDataRequestInt+0x26>
    40e6:	69 c0       	rjmp	.+210    	; 0x41ba <macDataRequestInt+0xf8>
    40e8:	30 91 38 0c 	lds	r19, 0x0C38	; 0x800c38 <macConfig+0x8>
    40ec:	33 23       	and	r19, r19
    40ee:	09 f4       	brne	.+2      	; 0x40f2 <macDataRequestInt+0x30>
    40f0:	64 c0       	rjmp	.+200    	; 0x41ba <macDataRequestInt+0xf8>
    40f2:	c2 2f       	mov	r28, r18
    40f4:	7a 01       	movw	r14, r20
    40f6:	d6 2f       	mov	r29, r22
    40f8:	8c 01       	movw	r16, r24
    40fa:	81 e6       	ldi	r24, 0x61	; 97
    40fc:	98 e8       	ldi	r25, 0x88	; 136
    40fe:	90 93 b0 0b 	sts	0x0BB0, r25	; 0x800bb0 <mac_buffer_tx+0x2>
    4102:	80 93 af 0b 	sts	0x0BAF, r24	; 0x800baf <mac_buffer_tx+0x1>
    4106:	80 91 3a 0c 	lds	r24, 0x0C3A	; 0x800c3a <macConfig+0xa>
    410a:	91 e0       	ldi	r25, 0x01	; 1
    410c:	98 0f       	add	r25, r24
    410e:	90 93 3a 0c 	sts	0x0C3A, r25	; 0x800c3a <macConfig+0xa>
    4112:	80 93 b1 0b 	sts	0x0BB1, r24	; 0x800bb1 <mac_buffer_tx+0x3>
    4116:	80 91 3b 0c 	lds	r24, 0x0C3B	; 0x800c3b <macConfig+0xb>
    411a:	90 91 3c 0c 	lds	r25, 0x0C3C	; 0x800c3c <macConfig+0xc>
    411e:	90 93 b3 0b 	sts	0x0BB3, r25	; 0x800bb3 <mac_buffer_tx+0x5>
    4122:	80 93 b2 0b 	sts	0x0BB2, r24	; 0x800bb2 <mac_buffer_tx+0x4>
    4126:	f0 93 b7 0b 	sts	0x0BB7, r31	; 0x800bb7 <mac_buffer_tx+0x9>
    412a:	e0 93 b6 0b 	sts	0x0BB6, r30	; 0x800bb6 <mac_buffer_tx+0x8>
    412e:	10 93 b9 0b 	sts	0x0BB9, r17	; 0x800bb9 <mac_buffer_tx+0xb>
    4132:	00 93 b8 0b 	sts	0x0BB8, r16	; 0x800bb8 <mac_buffer_tx+0xa>
    4136:	f0 93 bb 0b 	sts	0x0BBB, r31	; 0x800bbb <mac_buffer_tx+0xd>
    413a:	e0 93 ba 0b 	sts	0x0BBA, r30	; 0x800bba <mac_buffer_tx+0xc>
    413e:	c8 01       	movw	r24, r16
    4140:	0e 94 32 24 	call	0x4864	; 0x4864 <macSendRoutingPacket>
    4144:	c6 30       	cpi	r28, 0x06	; 6
    4146:	29 f4       	brne	.+10     	; 0x4152 <macDataRequestInt+0x90>
    4148:	10 93 b5 0b 	sts	0x0BB5, r17	; 0x800bb5 <mac_buffer_tx+0x7>
    414c:	00 93 b4 0b 	sts	0x0BB4, r16	; 0x800bb4 <mac_buffer_tx+0x6>
    4150:	08 c0       	rjmp	.+16     	; 0x4162 <macDataRequestInt+0xa0>
    4152:	80 91 3f 0c 	lds	r24, 0x0C3F	; 0x800c3f <macConfig+0xf>
    4156:	90 91 40 0c 	lds	r25, 0x0C40	; 0x800c40 <macConfig+0x10>
    415a:	90 93 b5 0b 	sts	0x0BB5, r25	; 0x800bb5 <mac_buffer_tx+0x7>
    415e:	80 93 b4 0b 	sts	0x0BB4, r24	; 0x800bb4 <mac_buffer_tx+0x6>
    4162:	c0 93 bc 0b 	sts	0x0BBC, r28	; 0x800bbc <mac_buffer_tx+0xe>
    4166:	f7 01       	movw	r30, r14
    4168:	2d eb       	ldi	r18, 0xBD	; 189
    416a:	3b e0       	ldi	r19, 0x0B	; 11
    416c:	d9 01       	movw	r26, r18
    416e:	8a 2f       	mov	r24, r26
    4170:	82 1b       	sub	r24, r18
    4172:	8d 17       	cp	r24, r29
    4174:	18 f4       	brcc	.+6      	; 0x417c <macDataRequestInt+0xba>
    4176:	81 91       	ld	r24, Z+
    4178:	8d 93       	st	X+, r24
    417a:	f9 cf       	rjmp	.-14     	; 0x416e <macDataRequestInt+0xac>
    417c:	80 91 b4 0b 	lds	r24, 0x0BB4	; 0x800bb4 <mac_buffer_tx+0x6>
    4180:	90 91 b5 0b 	lds	r25, 0x0BB5	; 0x800bb5 <mac_buffer_tx+0x7>
    4184:	20 91 3d 0c 	lds	r18, 0x0C3D	; 0x800c3d <macConfig+0xd>
    4188:	30 91 3e 0c 	lds	r19, 0x0C3E	; 0x800c3e <macConfig+0xe>
    418c:	82 17       	cp	r24, r18
    418e:	93 07       	cpc	r25, r19
    4190:	a1 f0       	breq	.+40     	; 0x41ba <macDataRequestInt+0xf8>
    4192:	01 96       	adiw	r24, 0x01	; 1
    4194:	91 f0       	breq	.+36     	; 0x41ba <macDataRequestInt+0xf8>
    4196:	d2 5f       	subi	r29, 0xF2	; 242
    4198:	d0 93 ae 0b 	sts	0x0BAE, r29	; 0x800bae <mac_buffer_tx>
    419c:	c6 50       	subi	r28, 0x06	; 6
    419e:	c2 30       	cpi	r28, 0x02	; 2
    41a0:	18 f0       	brcs	.+6      	; 0x41a8 <macDataRequestInt+0xe6>
    41a2:	87 e0       	ldi	r24, 0x07	; 7
    41a4:	90 e0       	ldi	r25, 0x00	; 0
    41a6:	02 c0       	rjmp	.+4      	; 0x41ac <macDataRequestInt+0xea>
    41a8:	80 e0       	ldi	r24, 0x00	; 0
    41aa:	90 e0       	ldi	r25, 0x00	; 0
    41ac:	6b e5       	ldi	r22, 0x5B	; 91
    41ae:	70 e2       	ldi	r23, 0x20	; 32
    41b0:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <macSetAlarm>
    41b4:	81 e0       	ldi	r24, 0x01	; 1
    41b6:	80 93 47 0c 	sts	0x0C47, r24	; 0x800c47 <macConfig+0x17>
    41ba:	df 91       	pop	r29
    41bc:	cf 91       	pop	r28
    41be:	1f 91       	pop	r17
    41c0:	0f 91       	pop	r16
    41c2:	ff 90       	pop	r15
    41c4:	ef 90       	pop	r14
    41c6:	08 95       	ret

000041c8 <macDataRequest>:
    41c8:	21 e0       	ldi	r18, 0x01	; 1
    41ca:	0c 94 61 20 	jmp	0x40c2	; 0x40c2 <macDataRequestInt>

000041ce <macDataIndication>:
                fnDebugMsg("\r\nData indication buffer problem");
        }
    }
#endif

    switch (frame->type & 0x7f)  // Mask high bit just in case it was somehow missed
    41ce:	80 91 3a 0b 	lds	r24, 0x0B3A	; 0x800b3a <mac_buffer_rx+0xe>
    41d2:	8f 77       	andi	r24, 0x7F	; 127
    41d4:	83 30       	cpi	r24, 0x03	; 3
    41d6:	29 f1       	breq	.+74     	; 0x4222 <macDataIndication+0x54>
    41d8:	28 f4       	brcc	.+10     	; 0x41e4 <macDataIndication+0x16>
    41da:	81 30       	cpi	r24, 0x01	; 1
    41dc:	41 f0       	breq	.+16     	; 0x41ee <macDataIndication+0x20>
    41de:	82 30       	cpi	r24, 0x02	; 2
    41e0:	d1 f0       	breq	.+52     	; 0x4216 <macDataIndication+0x48>
    41e2:	08 95       	ret
    41e4:	84 30       	cpi	r24, 0x04	; 4
    41e6:	19 f1       	breq	.+70     	; 0x422e <macDataIndication+0x60>
    41e8:	86 30       	cpi	r24, 0x06	; 6
    41ea:	19 f0       	breq	.+6      	; 0x41f2 <macDataIndication+0x24>
    41ec:	08 95       	ret
    {
    case DATA_FRAME:
        // Plain old data, send it up the chain
        appDataIndication();
    41ee:	0c 94 28 02 	jmp	0x450	; 0x450 <appDataIndication>
        break;
    case WAKE_NODE:
        // Wake up the end node.
        if (NODETYPE == ROUTER)
        {
            u8 addr = ((ftWake*)frame)->addr;
    41f2:	80 91 3b 0b 	lds	r24, 0x0B3B	; 0x800b3b <mac_buffer_rx+0xf>
    41f6:	90 91 3c 0b 	lds	r25, 0x0B3C	; 0x800b3c <mac_buffer_rx+0x10>
            // See if this is from parent or child
            if ((((ftWake*)frame)->srcAddr) == macConfig.parentShortAddress)
    41fa:	40 91 34 0b 	lds	r20, 0x0B34	; 0x800b34 <mac_buffer_rx+0x8>
    41fe:	50 91 35 0b 	lds	r21, 0x0B35	; 0x800b35 <mac_buffer_rx+0x9>
    4202:	20 91 3f 0c 	lds	r18, 0x0C3F	; 0x800c3f <macConfig+0xf>
    4206:	30 91 40 0c 	lds	r19, 0x0C40	; 0x800c40 <macConfig+0x10>
    420a:	42 17       	cp	r20, r18
    420c:	53 07       	cpc	r21, r19
    420e:	a9 f4       	brne	.+42     	; 0x423a <macDataIndication+0x6c>
                // Set the flag to wake up the end node when it sends a packet
                macWakeChildNode(addr);
    4210:	99 27       	eor	r25, r25
    4212:	0c 94 2a 20 	jmp	0x4054	; 0x4054 <macWakeChildNode>
            debugMsgStrConst("\r\nAwake");
        }
        break;
    case PING_REQ_FRAME:
        // We got a ping request, let the app handle that
        appPingReq(frame->originAddr);
    4216:	80 91 38 0b 	lds	r24, 0x0B38	; 0x800b38 <mac_buffer_rx+0xc>
    421a:	90 91 39 0b 	lds	r25, 0x0B39	; 0x800b39 <mac_buffer_rx+0xd>
    421e:	0c 94 c6 01 	jmp	0x38c	; 0x38c <appPingReq>
        break;
    case PING_RSP_FRAME:
        // We got a ping response, app will handle it
        appPingRsp(frame->originAddr);
    4222:	80 91 38 0b 	lds	r24, 0x0B38	; 0x800b38 <mac_buffer_rx+0xc>
    4226:	90 91 39 0b 	lds	r25, 0x0B39	; 0x800b39 <mac_buffer_rx+0xd>
    422a:	0c 94 ca 01 	jmp	0x394	; 0x394 <appPingRsp>
        break;
    case DROP_CHILD_FRAME:
        // Coordinator is telling us to drop a child
        if (NODETYPE == ROUTER)
            macRemoveChild(*(u16*)(&frame->payload));
    422e:	80 91 3b 0b 	lds	r24, 0x0B3B	; 0x800b3b <mac_buffer_rx+0xf>
    4232:	90 91 3c 0b 	lds	r25, 0x0B3C	; 0x800b3c <mac_buffer_rx+0x10>
    4236:	0c 94 0e 20 	jmp	0x401c	; 0x401c <macRemoveChild>
    423a:	08 95       	ret

0000423c <mp>:
    }
}

// Target function to timer, sends ping packet after a delay
void mp(void)
{
    423c:	0f 93       	push	r16
    423e:	1f 93       	push	r17
    4240:	cf 93       	push	r28
    4242:	df 93       	push	r29
    4244:	cd b7       	in	r28, 0x3d	; 61
    4246:	de b7       	in	r29, 0x3e	; 62
    4248:	60 97       	sbiw	r28, 0x10	; 16
    424a:	0f b6       	in	r0, 0x3f	; 63
    424c:	f8 94       	cli
    424e:	de bf       	out	0x3e, r29	; 62
    4250:	0f be       	out	0x3f, r0	; 63
    4252:	cd bf       	out	0x3d, r28	; 61
    ftPing frame;

    frame.fcf = htons_16(FCF_DATA);
    4254:	81 e6       	ldi	r24, 0x61	; 97
    4256:	98 e8       	ldi	r25, 0x88	; 136
    4258:	9a 83       	std	Y+2, r25	; 0x02
    425a:	89 83       	std	Y+1, r24	; 0x01
    frame.seq = macConfig.dsn++;
    425c:	00 e3       	ldi	r16, 0x30	; 48
    425e:	1c e0       	ldi	r17, 0x0C	; 12
    4260:	f8 01       	movw	r30, r16
    4262:	82 85       	ldd	r24, Z+10	; 0x0a
    4264:	91 e0       	ldi	r25, 0x01	; 1
    4266:	98 0f       	add	r25, r24
    4268:	92 87       	std	Z+10, r25	; 0x0a
    426a:	8b 83       	std	Y+3, r24	; 0x03
    frame.panid = htons_16(macConfig.panId);
    426c:	83 85       	ldd	r24, Z+11	; 0x0b
    426e:	94 85       	ldd	r25, Z+12	; 0x0c
    4270:	9d 83       	std	Y+5, r25	; 0x05
    4272:	8c 83       	std	Y+4, r24	; 0x04
    frame.srcAddr = htons_16(macConfig.shortAddress);
    4274:	85 85       	ldd	r24, Z+13	; 0x0d
    4276:	96 85       	ldd	r25, Z+14	; 0x0e
    4278:	99 87       	std	Y+9, r25	; 0x09
    427a:	88 87       	std	Y+8, r24	; 0x08
    frame.originAddr = htons_16(macConfig.shortAddress);
    427c:	9d 87       	std	Y+13, r25	; 0x0d
    427e:	8c 87       	std	Y+12, r24	; 0x0c
    frame.finalDestAddr = htons_16(pingAddr);
    4280:	80 91 65 06 	lds	r24, 0x0665	; 0x800665 <pingAddr>
    4284:	90 91 66 06 	lds	r25, 0x0666	; 0x800666 <pingAddr+0x1>
    4288:	9b 87       	std	Y+11, r25	; 0x0b
    428a:	8a 87       	std	Y+10, r24	; 0x0a
    frame.type = pingType;
    428c:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <pingType>
    4290:	8e 87       	std	Y+14, r24	; 0x0e
    frame.rssi = radioGetSavedRssiValue();
    4292:	0e 94 24 1b 	call	0x3648	; 0x3648 <radioGetSavedRssiValue>
    4296:	8f 87       	std	Y+15, r24	; 0x0f
    frame.lqi = radioGetSavedLqiValue();
    4298:	0e 94 2d 1b 	call	0x365a	; 0x365a <radioGetSavedLqiValue>
    429c:	88 8b       	std	Y+16, r24	; 0x10
            return;
        }
    }
    else
        // End/router nodes
        frame.destAddr = htons_16(macConfig.parentShortAddress);
    429e:	f8 01       	movw	r30, r16
    42a0:	87 85       	ldd	r24, Z+15	; 0x0f
    42a2:	90 89       	ldd	r25, Z+16	; 0x10
    42a4:	9f 83       	std	Y+7, r25	; 0x07
    42a6:	8e 83       	std	Y+6, r24	; 0x06


    radioSendData(sizeof(ftPing), (u8*)&frame);
    42a8:	be 01       	movw	r22, r28
    42aa:	6f 5f       	subi	r22, 0xFF	; 255
    42ac:	7f 4f       	sbci	r23, 0xFF	; 255
    42ae:	80 e1       	ldi	r24, 0x10	; 16
    42b0:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <radioSendData>
}
    42b4:	60 96       	adiw	r28, 0x10	; 16
    42b6:	0f b6       	in	r0, 0x3f	; 63
    42b8:	f8 94       	cli
    42ba:	de bf       	out	0x3e, r29	; 62
    42bc:	0f be       	out	0x3f, r0	; 63
    42be:	cd bf       	out	0x3d, r28	; 61
    42c0:	df 91       	pop	r29
    42c2:	cf 91       	pop	r28
    42c4:	1f 91       	pop	r17
    42c6:	0f 91       	pop	r16
    42c8:	08 95       	ret

000042ca <macPing>:

   @param addr Short address of node to send ping
*/
void macPing(u8 pingTypeArg, u16 addr)
{
    if (addr == macConfig.shortAddress)
    42ca:	20 91 3d 0c 	lds	r18, 0x0C3D	; 0x800c3d <macConfig+0xd>
    42ce:	30 91 3e 0c 	lds	r19, 0x0C3E	; 0x800c3e <macConfig+0xe>
    42d2:	62 17       	cp	r22, r18
    42d4:	73 07       	cpc	r23, r19
    42d6:	91 f0       	breq	.+36     	; 0x42fc <macPing+0x32>
        // Don't send to self
        return;

    if (!macConfig.associated)
    42d8:	90 91 38 0c 	lds	r25, 0x0C38	; 0x800c38 <macConfig+0x8>
    42dc:	99 23       	and	r25, r25
    42de:	71 f0       	breq	.+28     	; 0x42fc <macPing+0x32>
        // Broadcast addr
        return;

    pingAddr = addr;
    42e0:	70 93 66 06 	sts	0x0666, r23	; 0x800666 <pingAddr+0x1>
    42e4:	60 93 65 06 	sts	0x0665, r22	; 0x800665 <pingAddr>
    pingType = pingTypeArg;
    42e8:	90 e0       	ldi	r25, 0x00	; 0
    42ea:	90 93 64 06 	sts	0x0664, r25	; 0x800664 <pingType+0x1>
    42ee:	80 93 63 06 	sts	0x0663, r24	; 0x800663 <pingType>
        macConfig.busy = true;
    }
    else
    {
        // End/router nodes
        mp();
    42f2:	0e 94 1e 21 	call	0x423c	; 0x423c <mp>
        macConfig.busy = true;
    42f6:	81 e0       	ldi	r24, 0x01	; 1
    42f8:	80 93 47 0c 	sts	0x0C47, r24	; 0x800c47 <macConfig+0x17>
    42fc:	08 95       	ret

000042fe <mac_event_pending>:

    @return True if there is a pending event, else false.
*/
u8 mac_event_pending(void)
{
    u8 head = event_queue.head;
    42fe:	20 91 49 0c 	lds	r18, 0x0C49	; 0x800c49 <event_queue>
    return (head != event_queue.tail);
    4302:	90 91 4a 0c 	lds	r25, 0x0C4A	; 0x800c4a <event_queue+0x1>
    4306:	81 e0       	ldi	r24, 0x01	; 1
    4308:	29 13       	cpse	r18, r25
    430a:	01 c0       	rjmp	.+2      	; 0x430e <mac_event_pending+0x10>
    430c:	80 e0       	ldi	r24, 0x00	; 0
}
    430e:	08 95       	ret

00004310 <mac_put_event>:
    @brief Puts an event into the queue of events.

    @param object is a pointer to the event to add to queue.
*/
void mac_put_event(event_object_t *object)
{
    4310:	cf 93       	push	r28
    4312:	df 93       	push	r29
    4314:	ec 01       	movw	r28, r24
    u8 newhead = event_queue.head;
    4316:	40 91 49 0c 	lds	r20, 0x0C49	; 0x800c49 <event_queue>

    if ((newhead + 1) % MAX_EVENTS == event_queue.tail)
    431a:	24 2f       	mov	r18, r20
    431c:	30 e0       	ldi	r19, 0x00	; 0
    431e:	e0 91 4a 0c 	lds	r30, 0x0C4A	; 0x800c4a <event_queue+0x1>
    4322:	c9 01       	movw	r24, r18
    4324:	01 96       	adiw	r24, 0x01	; 1
    4326:	6e e1       	ldi	r22, 0x1E	; 30
    4328:	70 e0       	ldi	r23, 0x00	; 0
    432a:	0e 94 c1 2d 	call	0x5b82	; 0x5b82 <__divmodhi4>
    432e:	6e 2f       	mov	r22, r30
    4330:	70 e0       	ldi	r23, 0x00	; 0
    4332:	86 17       	cp	r24, r22
    4334:	97 07       	cpc	r25, r23
    4336:	a9 f0       	breq	.+42     	; 0x4362 <mac_put_event+0x52>
        return;

    //    newhead = event_queue.head;

    // store in queue
    event_queue.event_object[newhead] = *object;
    4338:	f9 01       	movw	r30, r18
    433a:	ee 0f       	add	r30, r30
    433c:	ff 1f       	adc	r31, r31
    433e:	2e 0f       	add	r18, r30
    4340:	3f 1f       	adc	r19, r31
    4342:	f9 01       	movw	r30, r18
    4344:	e7 5b       	subi	r30, 0xB7	; 183
    4346:	f3 4f       	sbci	r31, 0xF3	; 243
    4348:	88 81       	ld	r24, Y
    434a:	99 81       	ldd	r25, Y+1	; 0x01
    434c:	aa 81       	ldd	r26, Y+2	; 0x02
    434e:	82 83       	std	Z+2, r24	; 0x02
    4350:	93 83       	std	Z+3, r25	; 0x03
    4352:	a4 83       	std	Z+4, r26	; 0x04

    // calculate new head index
    newhead++;
    4354:	81 e0       	ldi	r24, 0x01	; 1
    4356:	84 0f       	add	r24, r20
    if (newhead >= MAX_EVENTS)
    4358:	8e 31       	cpi	r24, 0x1E	; 30
    435a:	08 f0       	brcs	.+2      	; 0x435e <mac_put_event+0x4e>
        newhead = 0;
    435c:	80 e0       	ldi	r24, 0x00	; 0
    event_queue.head = newhead;
    435e:	80 93 49 0c 	sts	0x0C49, r24	; 0x800c49 <event_queue>
}
    4362:	df 91       	pop	r29
    4364:	cf 91       	pop	r28
    4366:	08 95       	ret

00004368 <mac_get_event>:

    @return Pointer to the event object, or garbage data if the queue
    is empty.
*/
event_object_t * mac_get_event(void)
{
    4368:	cf 93       	push	r28
    436a:	df 93       	push	r29
    436c:	1f 92       	push	r1
    436e:	cd b7       	in	r28, 0x3d	; 61
    4370:	de b7       	in	r29, 0x3e	; 62
    event_object_t *object = NULL;
    volatile u8 newtail;

    newtail = event_queue.tail;
    4372:	80 91 4a 0c 	lds	r24, 0x0C4A	; 0x800c4a <event_queue+0x1>
    4376:	89 83       	std	Y+1, r24	; 0x01

    object = &(event_queue.event_object[newtail]);
    4378:	89 81       	ldd	r24, Y+1	; 0x01
    437a:	90 e0       	ldi	r25, 0x00	; 0
    437c:	9c 01       	movw	r18, r24
    437e:	22 0f       	add	r18, r18
    4380:	33 1f       	adc	r19, r19
    4382:	82 0f       	add	r24, r18
    4384:	93 1f       	adc	r25, r19
    4386:	85 5b       	subi	r24, 0xB5	; 181
    4388:	93 4f       	sbci	r25, 0xF3	; 243

    // calculate new tail
    newtail++;
    438a:	29 81       	ldd	r18, Y+1	; 0x01
    438c:	2f 5f       	subi	r18, 0xFF	; 255
    438e:	29 83       	std	Y+1, r18	; 0x01
    if (newtail >= MAX_EVENTS)
    4390:	29 81       	ldd	r18, Y+1	; 0x01
    4392:	2e 31       	cpi	r18, 0x1E	; 30
    4394:	08 f0       	brcs	.+2      	; 0x4398 <mac_get_event+0x30>
        newtail = 0;
    4396:	19 82       	std	Y+1, r1	; 0x01

    event_queue.tail = newtail;
    4398:	29 81       	ldd	r18, Y+1	; 0x01
    439a:	20 93 4a 0c 	sts	0x0C4A, r18	; 0x800c4a <event_queue+0x1>

    return(object);
}
    439e:	0f 90       	pop	r0
    43a0:	df 91       	pop	r29
    43a2:	cf 91       	pop	r28
    43a4:	08 95       	ret

000043a6 <macTask>:
   "forever" loop or by an OS task or thread.  This function processes
   interrupt events that are stored in the event queue by the radio or
   timer.
*/
void macTask(void)
{
    43a6:	cf 93       	push	r28
                //   if (*((u16*)(mac_buffer_rx+1)) == FCF_ASSOC_RESP_DIRECT) // Direct to MAC Addr?
                if ((mac_buffer_rx[2] == (htons_16(FCF_ASSOC_RESP_DIRECT) >> 8)) &&
                    (mac_buffer_rx[1] == (htons_16(FCF_ASSOC_RESP_DIRECT) & 0xff)))
                {
                    // this is a new node, do the association thing
                    macConfig.associated = true;
    43a8:	c1 e0       	ldi	r28, 0x01	; 1
void macTask(void)
{
    event_object_t *event;

    event = 0;
    while(mac_event_pending())
    43aa:	0e 94 7f 21 	call	0x42fe	; 0x42fe <mac_event_pending>
    43ae:	88 23       	and	r24, r24
    43b0:	09 f4       	brne	.+2      	; 0x43b4 <macTask+0xe>
    43b2:	81 c0       	rjmp	.+258    	; 0x44b6 <macTask+0x110>
    {
        event = mac_get_event();
    43b4:	0e 94 b4 21 	call	0x4368	; 0x4368 <mac_get_event>
        switch (event->event)
    43b8:	dc 01       	movw	r26, r24
    43ba:	ec 91       	ld	r30, X
    43bc:	4e 2f       	mov	r20, r30
    43be:	50 e0       	ldi	r21, 0x00	; 0
    43c0:	fa 01       	movw	r30, r20
    43c2:	70 97       	sbiw	r30, 0x10	; 16
    43c4:	ea 30       	cpi	r30, 0x0A	; 10
    43c6:	f1 05       	cpc	r31, r1
    43c8:	80 f7       	brcc	.-32     	; 0x43aa <macTask+0x4>
    43ca:	ed 52       	subi	r30, 0x2D	; 45
    43cc:	ff 4f       	sbci	r31, 0xFF	; 255
    43ce:	0c 94 f7 2d 	jmp	0x5bee	; 0x5bee <__tablejump2__>
        {
        case MAC_EVENT_SCAN:
            // A beacon has been received as a result of an active scan.
            // Record the pan descriptor and store it until the scan has
            // completed.
            if (!macConfig.associated)
    43d2:	80 91 38 0c 	lds	r24, 0x0C38	; 0x800c38 <macConfig+0x8>
    43d6:	81 11       	cpse	r24, r1
    43d8:	e8 cf       	rjmp	.-48     	; 0x43aa <macTask+0x4>
                mac_logPanDescriptors();
    43da:	0e 94 5d 24 	call	0x48ba	; 0x48ba <mac_logPanDescriptors>
    43de:	e5 cf       	rjmp	.-54     	; 0x43aa <macTask+0x4>
            break;
// ETG #if __AVR__ || __AVR32__
#if __AVR__ || __AVR32__
       case MAC_EVENT_TIMER:
           // Timer has expired, just callback the stored function pointer
           ((void (*)(void))event->data)();  // cast data to function pointer
    43e0:	dc 01       	movw	r26, r24
    43e2:	11 96       	adiw	r26, 0x01	; 1
    43e4:	ed 91       	ld	r30, X+
    43e6:	fc 91       	ld	r31, X
    43e8:	12 97       	sbiw	r26, 0x02	; 2
    43ea:	09 95       	icall
           break;
    43ec:	de cf       	rjmp	.-68     	; 0x43aa <macTask+0x4>
#endif
        case MAC_EVENT_RX:
            if (macConfig.associated)
    43ee:	80 91 38 0c 	lds	r24, 0x0C38	; 0x800c38 <macConfig+0x8>
    43f2:	88 23       	and	r24, r24
    43f4:	d1 f2       	breq	.-76     	; 0x43aa <macTask+0x4>
                frame->finalDestAddr = ntohs_16(frame->finalDestAddr);
                frame->originAddr = ntohs_16(frame->originAddr);

                // Wake up
                if (NODETYPE != ENDDEVICE)
                    macChildIsAwake((ftData*)(mac_buffer_rx+1));
    43f6:	8d e2       	ldi	r24, 0x2D	; 45
    43f8:	9b e0       	ldi	r25, 0x0B	; 11
    43fa:	0e 94 2b 20 	call	0x4056	; 0x4056 <macChildIsAwake>
                // Received a data frame, process it or route it
                if (((ftData*)(mac_buffer_rx+1))->finalDestAddr == macConfig.shortAddress)
    43fe:	20 91 36 0b 	lds	r18, 0x0B36	; 0x800b36 <mac_buffer_rx+0xa>
    4402:	30 91 37 0b 	lds	r19, 0x0B37	; 0x800b37 <mac_buffer_rx+0xb>
    4406:	80 91 3d 0c 	lds	r24, 0x0C3D	; 0x800c3d <macConfig+0xd>
    440a:	90 91 3e 0c 	lds	r25, 0x0C3E	; 0x800c3e <macConfig+0xe>
    440e:	28 17       	cp	r18, r24
    4410:	39 07       	cpc	r19, r25
    4412:	19 f4       	brne	.+6      	; 0x441a <macTask+0x74>
                    // This data frame is for this node
                    macDataIndication();
    4414:	0e 94 e7 20 	call	0x41ce	; 0x41ce <macDataIndication>
    4418:	c8 cf       	rjmp	.-112    	; 0x43aa <macTask+0x4>
                else
                    // Route the packet up/down stream
                    if (NODETYPE != ENDDEVICE)
                        macRouteData();
    441a:	0e 94 d9 23 	call	0x47b2	; 0x47b2 <macRouteData>
    441e:	c5 cf       	rjmp	.-118    	; 0x43aa <macTask+0x4>
            {
                ftBeaconReq *frame = (ftBeaconReq*)(mac_buffer_rx+1);
                frame->panid = ntohs_16(frame->panid);
                
                // Generate and send the beacon.
                if (NODETYPE == ROUTER && macConfig.associated)
    4420:	80 91 38 0c 	lds	r24, 0x0C38	; 0x800c38 <macConfig+0x8>
    4424:	88 23       	and	r24, r24
    4426:	09 f2       	breq	.-126    	; 0x43aa <macTask+0x4>
                    macSetAlarm(1, sendBeaconFrame);
    4428:	60 e3       	ldi	r22, 0x30	; 48
    442a:	70 e2       	ldi	r23, 0x20	; 32
    442c:	81 e0       	ldi	r24, 0x01	; 1
    442e:	90 e0       	ldi	r25, 0x00	; 0
    4430:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <macSetAlarm>
    4434:	ba cf       	rjmp	.-140    	; 0x43aa <macTask+0x4>
                break;                
            }
            if (NODETYPE == COORD)
                // Pan Coord has received this request.
                macAssociationResponse();
            if (NODETYPE == ROUTER && macConfig.associated)
    4436:	80 91 38 0c 	lds	r24, 0x0C38	; 0x800c38 <macConfig+0x8>
    443a:	88 23       	and	r24, r24
    443c:	09 f4       	brne	.+2      	; 0x4440 <macTask+0x9a>
    443e:	b5 cf       	rjmp	.-150    	; 0x43aa <macTask+0x4>
            {
                // Send this packet along to parent
                macRouteAssociateRequest();
    4440:	0e 94 38 23 	call	0x4670	; 0x4670 <macRouteAssociateRequest>
    4444:	b2 cf       	rjmp	.-156    	; 0x43aa <macTask+0x4>
        case MAC_EVENT_ASSOCIATION_RESPONSE:
            // End device has recieved this response.
            if (NODETYPE != COORD)
            {
                //   if (*((u16*)(mac_buffer_rx+1)) == FCF_ASSOC_RESP_DIRECT) // Direct to MAC Addr?
                if ((mac_buffer_rx[2] == (htons_16(FCF_ASSOC_RESP_DIRECT) >> 8)) &&
    4446:	80 91 2e 0b 	lds	r24, 0x0B2E	; 0x800b2e <mac_buffer_rx+0x2>
    444a:	8c 38       	cpi	r24, 0x8C	; 140
    444c:	d9 f4       	brne	.+54     	; 0x4484 <macTask+0xde>
    444e:	80 91 2d 0b 	lds	r24, 0x0B2D	; 0x800b2d <mac_buffer_rx+0x1>
    4452:	83 36       	cpi	r24, 0x63	; 99
    4454:	b9 f4       	brne	.+46     	; 0x4484 <macTask+0xde>
                    (mac_buffer_rx[1] == (htons_16(FCF_ASSOC_RESP_DIRECT) & 0xff)))
                {
                    // this is a new node, do the association thing
                    macConfig.associated = true;
    4456:	c0 93 38 0c 	sts	0x0C38, r28	; 0x800c38 <macConfig+0x8>
                    macConfig.parentShortAddress = ntohs_16(((ftAssocRespDirect*)(mac_buffer_rx+1))->srcAddr);
    445a:	80 91 3a 0b 	lds	r24, 0x0B3A	; 0x800b3a <mac_buffer_rx+0xe>
    445e:	90 91 3b 0b 	lds	r25, 0x0B3B	; 0x800b3b <mac_buffer_rx+0xf>
    4462:	90 93 40 0c 	sts	0x0C40, r25	; 0x800c40 <macConfig+0x10>
    4466:	80 93 3f 0c 	sts	0x0C3F, r24	; 0x800c3f <macConfig+0xf>
                    macConfig.shortAddress = ntohs_16(((ftAssocRespDirect*)(mac_buffer_rx+1))->shortAddr);
    446a:	80 91 3d 0b 	lds	r24, 0x0B3D	; 0x800b3d <mac_buffer_rx+0x11>
    446e:	90 91 3e 0b 	lds	r25, 0x0B3E	; 0x800b3e <mac_buffer_rx+0x12>
    4472:	90 93 3e 0c 	sts	0x0C3E, r25	; 0x800c3e <macConfig+0xe>
    4476:	80 93 3d 0c 	sts	0x0C3D, r24	; 0x800c3d <macConfig+0xd>

                    radioSetShortAddress(macConfig.shortAddress);
    447a:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <radioSetShortAddress>
                    macAssociationConfirm();
    447e:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <macAssociationConfirm>
    4482:	93 cf       	rjmp	.-218    	; 0x43aa <macTask+0x4>
                }
                else
                {
                    // we are indirect, so just send this packet along.
                    if (NODETYPE == ROUTER && macConfig.associated)
    4484:	80 91 38 0c 	lds	r24, 0x0C38	; 0x800c38 <macConfig+0x8>
    4488:	88 23       	and	r24, r24
    448a:	09 f4       	brne	.+2      	; 0x448e <macTask+0xe8>
    448c:	8e cf       	rjmp	.-228    	; 0x43aa <macTask+0x4>
                        frame->srcAddr = ntohs_16(frame->srcAddr);
                        frame->parentAddr = ntohs_16(frame->parentAddr);
                        frame->shortAddr = ntohs_16(frame->shortAddr);
                        frame->macAddr = ntohs_64(frame->macAddr);
                        // Route the packet
                        macRouteAssociateResponse();
    448e:	0e 94 a9 22 	call	0x4552	; 0x4552 <macRouteAssociateResponse>
    4492:	8b cf       	rjmp	.-234    	; 0x43aa <macTask+0x4>
                }
            }
            break;
        case MAC_EVENT_ROUTE:
            // Routing packet received, forward it
            if (NODETYPE == ROUTER && macConfig.associated)
    4494:	80 91 38 0c 	lds	r24, 0x0C38	; 0x800c38 <macConfig+0x8>
    4498:	88 23       	and	r24, r24
    449a:	09 f4       	brne	.+2      	; 0x449e <macTask+0xf8>
    449c:	86 cf       	rjmp	.-244    	; 0x43aa <macTask+0x4>
                macForwardRoutingPacket();
    449e:	0e 94 5d 22 	call	0x44ba	; 0x44ba <macForwardRoutingPacket>
    44a2:	83 cf       	rjmp	.-250    	; 0x43aa <macTask+0x4>
            break;
        case MAC_EVENT_ACCESS:
            // Channel access failure
            appPacketSendAccessFail();
    44a4:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <appPacketSendAccessFail>
            break;
    44a8:	80 cf       	rjmp	.-256    	; 0x43aa <macTask+0x4>
        case MAC_EVENT_NACK:
            // Packet failed to be sent, alert application
            appPacketSendFailed();
    44aa:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <appPacketSendFailed>
            break;
    44ae:	7d cf       	rjmp	.-262    	; 0x43aa <macTask+0x4>
        case MAC_EVENT_ACK:
            // Packet got through, alert application
            appPacketSendSucceed();
    44b0:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <appPacketSendSucceed>
            break;
    44b4:	7a cf       	rjmp	.-268    	; 0x43aa <macTask+0x4>
        default:
            break;
        }
    }
}
    44b6:	cf 91       	pop	r28
    44b8:	08 95       	ret

000044ba <macForwardRoutingPacket>:
        }
    }
}

void mrd(void)
{
    44ba:	80 91 2c 0b 	lds	r24, 0x0B2C	; 0x800b2c <mac_buffer_rx>
    44be:	92 e8       	ldi	r25, 0x82	; 130
    44c0:	ec e2       	ldi	r30, 0x2C	; 44
    44c2:	fb e0       	ldi	r31, 0x0B	; 11
    44c4:	ae ea       	ldi	r26, 0xAE	; 174
    44c6:	bb e0       	ldi	r27, 0x0B	; 11
    44c8:	01 90       	ld	r0, Z+
    44ca:	0d 92       	st	X+, r0
    44cc:	9a 95       	dec	r25
    44ce:	e1 f7       	brne	.-8      	; 0x44c8 <macForwardRoutingPacket+0xe>
    44d0:	90 91 38 0c 	lds	r25, 0x0C38	; 0x800c38 <macConfig+0x8>
    44d4:	99 23       	and	r25, r25
    44d6:	e1 f1       	breq	.+120    	; 0x4550 <macForwardRoutingPacket+0x96>
    44d8:	8c 50       	subi	r24, 0x0C	; 12
    44da:	86 95       	lsr	r24
    44dc:	e8 2f       	mov	r30, r24
    44de:	f0 e0       	ldi	r31, 0x00	; 0
    44e0:	ee 0f       	add	r30, r30
    44e2:	ff 1f       	adc	r31, r31
    44e4:	e9 54       	subi	r30, 0x49	; 73
    44e6:	f4 4f       	sbci	r31, 0xF4	; 244
    44e8:	20 81       	ld	r18, Z
    44ea:	31 81       	ldd	r19, Z+1	; 0x01
    44ec:	30 93 42 0c 	sts	0x0C42, r19	; 0x800c42 <macConfig+0x12>
    44f0:	20 93 41 0c 	sts	0x0C41, r18	; 0x800c41 <macConfig+0x11>
    44f4:	82 30       	cpi	r24, 0x02	; 2
    44f6:	60 f1       	brcs	.+88     	; 0x4550 <macForwardRoutingPacket+0x96>
    44f8:	81 50       	subi	r24, 0x01	; 1
    44fa:	23 e6       	ldi	r18, 0x63	; 99
    44fc:	38 e8       	ldi	r19, 0x88	; 136
    44fe:	30 93 b0 0b 	sts	0x0BB0, r19	; 0x800bb0 <mac_buffer_tx+0x2>
    4502:	20 93 af 0b 	sts	0x0BAF, r18	; 0x800baf <mac_buffer_tx+0x1>
    4506:	90 91 3a 0c 	lds	r25, 0x0C3A	; 0x800c3a <macConfig+0xa>
    450a:	21 e0       	ldi	r18, 0x01	; 1
    450c:	29 0f       	add	r18, r25
    450e:	20 93 3a 0c 	sts	0x0C3A, r18	; 0x800c3a <macConfig+0xa>
    4512:	90 93 b1 0b 	sts	0x0BB1, r25	; 0x800bb1 <mac_buffer_tx+0x3>
    4516:	90 e0       	ldi	r25, 0x00	; 0
    4518:	fc 01       	movw	r30, r24
    451a:	ee 0f       	add	r30, r30
    451c:	ff 1f       	adc	r31, r31
    451e:	e7 54       	subi	r30, 0x47	; 71
    4520:	f4 4f       	sbci	r31, 0xF4	; 244
    4522:	20 81       	ld	r18, Z
    4524:	31 81       	ldd	r19, Z+1	; 0x01
    4526:	30 93 b5 0b 	sts	0x0BB5, r19	; 0x800bb5 <mac_buffer_tx+0x7>
    452a:	20 93 b4 0b 	sts	0x0BB4, r18	; 0x800bb4 <mac_buffer_tx+0x6>
    452e:	20 91 3d 0c 	lds	r18, 0x0C3D	; 0x800c3d <macConfig+0xd>
    4532:	30 91 3e 0c 	lds	r19, 0x0C3E	; 0x800c3e <macConfig+0xe>
    4536:	30 93 b7 0b 	sts	0x0BB7, r19	; 0x800bb7 <mac_buffer_tx+0x9>
    453a:	20 93 b6 0b 	sts	0x0BB6, r18	; 0x800bb6 <mac_buffer_tx+0x8>
    453e:	9b eb       	ldi	r25, 0xBB	; 187
    4540:	90 93 b8 0b 	sts	0x0BB8, r25	; 0x800bb8 <mac_buffer_tx+0xa>
    4544:	8b 5f       	subi	r24, 0xFB	; 251
    4546:	6f ea       	ldi	r22, 0xAF	; 175
    4548:	7b e0       	ldi	r23, 0x0B	; 11
    454a:	88 0f       	add	r24, r24
    454c:	0c 94 19 1d 	jmp	0x3a32	; 0x3a32 <radioSendData>
    4550:	08 95       	ret

00004552 <macRouteAssociateResponse>:
    4552:	80 91 38 0c 	lds	r24, 0x0C38	; 0x800c38 <macConfig+0x8>
    4556:	88 23       	and	r24, r24
    4558:	09 f4       	brne	.+2      	; 0x455c <macRouteAssociateResponse+0xa>
    455a:	89 c0       	rjmp	.+274    	; 0x466e <macRouteAssociateResponse+0x11c>
    455c:	20 91 37 0b 	lds	r18, 0x0B37	; 0x800b37 <mac_buffer_rx+0xb>
    4560:	30 91 38 0b 	lds	r19, 0x0B38	; 0x800b38 <mac_buffer_rx+0xc>
    4564:	80 91 3d 0c 	lds	r24, 0x0C3D	; 0x800c3d <macConfig+0xd>
    4568:	90 91 3e 0c 	lds	r25, 0x0C3E	; 0x800c3e <macConfig+0xe>
    456c:	28 17       	cp	r18, r24
    456e:	39 07       	cpc	r19, r25
    4570:	09 f0       	breq	.+2      	; 0x4574 <macRouteAssociateResponse+0x22>
    4572:	4b c0       	rjmp	.+150    	; 0x460a <macRouteAssociateResponse+0xb8>
    4574:	83 e6       	ldi	r24, 0x63	; 99
    4576:	9c e8       	ldi	r25, 0x8C	; 140
    4578:	90 93 af 0b 	sts	0x0BAF, r25	; 0x800baf <mac_buffer_tx+0x1>
    457c:	80 93 ae 0b 	sts	0x0BAE, r24	; 0x800bae <mac_buffer_tx>
    4580:	80 91 3a 0c 	lds	r24, 0x0C3A	; 0x800c3a <macConfig+0xa>
    4584:	91 e0       	ldi	r25, 0x01	; 1
    4586:	98 0f       	add	r25, r24
    4588:	90 93 3a 0c 	sts	0x0C3A, r25	; 0x800c3a <macConfig+0xa>
    458c:	80 93 b0 0b 	sts	0x0BB0, r24	; 0x800bb0 <mac_buffer_tx+0x2>
    4590:	80 91 3b 0c 	lds	r24, 0x0C3B	; 0x800c3b <macConfig+0xb>
    4594:	90 91 3c 0c 	lds	r25, 0x0C3C	; 0x800c3c <macConfig+0xc>
    4598:	90 93 b2 0b 	sts	0x0BB2, r25	; 0x800bb2 <mac_buffer_tx+0x4>
    459c:	80 93 b1 0b 	sts	0x0BB1, r24	; 0x800bb1 <mac_buffer_tx+0x3>
    45a0:	80 91 39 0b 	lds	r24, 0x0B39	; 0x800b39 <mac_buffer_rx+0xd>
    45a4:	80 93 b3 0b 	sts	0x0BB3, r24	; 0x800bb3 <mac_buffer_tx+0x5>
    45a8:	80 91 3a 0b 	lds	r24, 0x0B3A	; 0x800b3a <mac_buffer_rx+0xe>
    45ac:	80 93 b4 0b 	sts	0x0BB4, r24	; 0x800bb4 <mac_buffer_tx+0x6>
    45b0:	80 91 3b 0b 	lds	r24, 0x0B3B	; 0x800b3b <mac_buffer_rx+0xf>
    45b4:	80 93 b5 0b 	sts	0x0BB5, r24	; 0x800bb5 <mac_buffer_tx+0x7>
    45b8:	80 91 3c 0b 	lds	r24, 0x0B3C	; 0x800b3c <mac_buffer_rx+0x10>
    45bc:	80 93 b6 0b 	sts	0x0BB6, r24	; 0x800bb6 <mac_buffer_tx+0x8>
    45c0:	80 91 3d 0b 	lds	r24, 0x0B3D	; 0x800b3d <mac_buffer_rx+0x11>
    45c4:	80 93 b7 0b 	sts	0x0BB7, r24	; 0x800bb7 <mac_buffer_tx+0x9>
    45c8:	80 91 3e 0b 	lds	r24, 0x0B3E	; 0x800b3e <mac_buffer_rx+0x12>
    45cc:	80 93 b8 0b 	sts	0x0BB8, r24	; 0x800bb8 <mac_buffer_tx+0xa>
    45d0:	80 91 3f 0b 	lds	r24, 0x0B3F	; 0x800b3f <mac_buffer_rx+0x13>
    45d4:	80 93 b9 0b 	sts	0x0BB9, r24	; 0x800bb9 <mac_buffer_tx+0xb>
    45d8:	80 91 40 0b 	lds	r24, 0x0B40	; 0x800b40 <mac_buffer_rx+0x14>
    45dc:	80 93 ba 0b 	sts	0x0BBA, r24	; 0x800bba <mac_buffer_tx+0xc>
    45e0:	30 93 bc 0b 	sts	0x0BBC, r19	; 0x800bbc <mac_buffer_tx+0xe>
    45e4:	20 93 bb 0b 	sts	0x0BBB, r18	; 0x800bbb <mac_buffer_tx+0xd>
    45e8:	82 e0       	ldi	r24, 0x02	; 2
    45ea:	80 93 bd 0b 	sts	0x0BBD, r24	; 0x800bbd <mac_buffer_tx+0xf>
    45ee:	80 91 41 0b 	lds	r24, 0x0B41	; 0x800b41 <mac_buffer_rx+0x15>
    45f2:	90 91 42 0b 	lds	r25, 0x0B42	; 0x800b42 <mac_buffer_rx+0x16>
    45f6:	90 93 bf 0b 	sts	0x0BBF, r25	; 0x800bbf <mac_buffer_tx+0x11>
    45fa:	80 93 be 0b 	sts	0x0BBE, r24	; 0x800bbe <mac_buffer_tx+0x10>
    45fe:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <macAddChild>
    4602:	6e ea       	ldi	r22, 0xAE	; 174
    4604:	7b e0       	ldi	r23, 0x0B	; 11
    4606:	82 e1       	ldi	r24, 0x12	; 18
    4608:	30 c0       	rjmp	.+96     	; 0x466a <macRouteAssociateResponse+0x118>
    460a:	22 e8       	ldi	r18, 0x82	; 130
    460c:	ec e2       	ldi	r30, 0x2C	; 44
    460e:	fb e0       	ldi	r31, 0x0B	; 11
    4610:	ae ea       	ldi	r26, 0xAE	; 174
    4612:	bb e0       	ldi	r27, 0x0B	; 11
    4614:	01 90       	ld	r0, Z+
    4616:	0d 92       	st	X+, r0
    4618:	2a 95       	dec	r18
    461a:	e1 f7       	brne	.-8      	; 0x4614 <macRouteAssociateResponse+0xc2>
    461c:	20 91 3a 0c 	lds	r18, 0x0C3A	; 0x800c3a <macConfig+0xa>
    4620:	31 e0       	ldi	r19, 0x01	; 1
    4622:	32 0f       	add	r19, r18
    4624:	30 93 3a 0c 	sts	0x0C3A, r19	; 0x800c3a <macConfig+0xa>
    4628:	20 93 b1 0b 	sts	0x0BB1, r18	; 0x800bb1 <mac_buffer_tx+0x3>
    462c:	20 91 41 0c 	lds	r18, 0x0C41	; 0x800c41 <macConfig+0x11>
    4630:	30 91 42 0c 	lds	r19, 0x0C42	; 0x800c42 <macConfig+0x12>
    4634:	30 93 b5 0b 	sts	0x0BB5, r19	; 0x800bb5 <mac_buffer_tx+0x7>
    4638:	20 93 b4 0b 	sts	0x0BB4, r18	; 0x800bb4 <mac_buffer_tx+0x6>
    463c:	90 93 b7 0b 	sts	0x0BB7, r25	; 0x800bb7 <mac_buffer_tx+0x9>
    4640:	80 93 b6 0b 	sts	0x0BB6, r24	; 0x800bb6 <mac_buffer_tx+0x8>
    4644:	80 91 b9 0b 	lds	r24, 0x0BB9	; 0x800bb9 <mac_buffer_tx+0xb>
    4648:	90 91 ba 0b 	lds	r25, 0x0BBA	; 0x800bba <mac_buffer_tx+0xc>
    464c:	0e 94 bb 1f 	call	0x3f76	; 0x3f76 <macIsChild>
    4650:	88 23       	and	r24, r24
    4652:	41 f0       	breq	.+16     	; 0x4664 <macRouteAssociateResponse+0x112>
    4654:	80 91 b9 0b 	lds	r24, 0x0BB9	; 0x800bb9 <mac_buffer_tx+0xb>
    4658:	90 91 ba 0b 	lds	r25, 0x0BBA	; 0x800bba <mac_buffer_tx+0xc>
    465c:	90 93 b5 0b 	sts	0x0BB5, r25	; 0x800bb5 <mac_buffer_tx+0x7>
    4660:	80 93 b4 0b 	sts	0x0BB4, r24	; 0x800bb4 <mac_buffer_tx+0x6>
    4664:	6f ea       	ldi	r22, 0xAF	; 175
    4666:	7b e0       	ldi	r23, 0x0B	; 11
    4668:	86 e1       	ldi	r24, 0x16	; 22
    466a:	0c 94 19 1d 	jmp	0x3a32	; 0x3a32 <radioSendData>
    466e:	08 95       	ret

00004670 <macRouteAssociateRequest>:
    4670:	cf 93       	push	r28
    4672:	df 93       	push	r29
    4674:	cd b7       	in	r28, 0x3d	; 61
    4676:	de b7       	in	r29, 0x3e	; 62
    4678:	65 97       	sbiw	r28, 0x15	; 21
    467a:	0f b6       	in	r0, 0x3f	; 63
    467c:	f8 94       	cli
    467e:	de bf       	out	0x3e, r29	; 62
    4680:	0f be       	out	0x3f, r0	; 63
    4682:	cd bf       	out	0x3d, r28	; 61
    4684:	a0 91 2e 0b 	lds	r26, 0x0B2E	; 0x800b2e <mac_buffer_rx+0x2>
    4688:	80 91 3a 0c 	lds	r24, 0x0C3A	; 0x800c3a <macConfig+0xa>
    468c:	e0 91 3b 0c 	lds	r30, 0x0C3B	; 0x800c3b <macConfig+0xb>
    4690:	f0 91 3c 0c 	lds	r31, 0x0C3C	; 0x800c3c <macConfig+0xc>
    4694:	60 91 3f 0c 	lds	r22, 0x0C3F	; 0x800c3f <macConfig+0xf>
    4698:	70 91 40 0c 	lds	r23, 0x0C40	; 0x800c40 <macConfig+0x10>
    469c:	40 91 3d 0c 	lds	r20, 0x0C3D	; 0x800c3d <macConfig+0xd>
    46a0:	50 91 3e 0c 	lds	r21, 0x0C3E	; 0x800c3e <macConfig+0xe>
    46a4:	30 91 39 0b 	lds	r19, 0x0B39	; 0x800b39 <mac_buffer_rx+0xd>
    46a8:	20 91 3a 0b 	lds	r18, 0x0B3A	; 0x800b3a <mac_buffer_rx+0xe>
    46ac:	90 91 3b 0b 	lds	r25, 0x0B3B	; 0x800b3b <mac_buffer_rx+0xf>
    46b0:	a8 3c       	cpi	r26, 0xC8	; 200
    46b2:	81 f5       	brne	.+96     	; 0x4714 <macRouteAssociateRequest+0xa4>
    46b4:	a3 e6       	ldi	r26, 0x63	; 99
    46b6:	b8 e8       	ldi	r27, 0x88	; 136
    46b8:	ba 83       	std	Y+2, r27	; 0x02
    46ba:	a9 83       	std	Y+1, r26	; 0x01
    46bc:	a1 e0       	ldi	r26, 0x01	; 1
    46be:	a8 0f       	add	r26, r24
    46c0:	a0 93 3a 0c 	sts	0x0C3A, r26	; 0x800c3a <macConfig+0xa>
    46c4:	8b 83       	std	Y+3, r24	; 0x03
    46c6:	fd 83       	std	Y+5, r31	; 0x05
    46c8:	ec 83       	std	Y+4, r30	; 0x04
    46ca:	7f 83       	std	Y+7, r23	; 0x07
    46cc:	6e 83       	std	Y+6, r22	; 0x06
    46ce:	59 87       	std	Y+9, r21	; 0x09
    46d0:	48 87       	std	Y+8, r20	; 0x08
    46d2:	81 e0       	ldi	r24, 0x01	; 1
    46d4:	8a 87       	std	Y+10, r24	; 0x0a
    46d6:	40 91 3d 0b 	lds	r20, 0x0B3D	; 0x800b3d <mac_buffer_rx+0x11>
    46da:	50 91 3e 0b 	lds	r21, 0x0B3E	; 0x800b3e <mac_buffer_rx+0x12>
    46de:	5c 87       	std	Y+12, r21	; 0x0c
    46e0:	4b 87       	std	Y+11, r20	; 0x0b
    46e2:	80 91 34 0b 	lds	r24, 0x0B34	; 0x800b34 <mac_buffer_rx+0x8>
    46e6:	8d 87       	std	Y+13, r24	; 0x0d
    46e8:	80 91 35 0b 	lds	r24, 0x0B35	; 0x800b35 <mac_buffer_rx+0x9>
    46ec:	8e 87       	std	Y+14, r24	; 0x0e
    46ee:	80 91 36 0b 	lds	r24, 0x0B36	; 0x800b36 <mac_buffer_rx+0xa>
    46f2:	8f 87       	std	Y+15, r24	; 0x0f
    46f4:	80 91 37 0b 	lds	r24, 0x0B37	; 0x800b37 <mac_buffer_rx+0xb>
    46f8:	88 8b       	std	Y+16, r24	; 0x10
    46fa:	80 91 38 0b 	lds	r24, 0x0B38	; 0x800b38 <mac_buffer_rx+0xc>
    46fe:	89 8b       	std	Y+17, r24	; 0x11
    4700:	3a 8b       	std	Y+18, r19	; 0x12
    4702:	2b 8b       	std	Y+19, r18	; 0x13
    4704:	9c 8b       	std	Y+20, r25	; 0x14
    4706:	80 91 3f 0b 	lds	r24, 0x0B3F	; 0x800b3f <mac_buffer_rx+0x13>
    470a:	8d 8b       	std	Y+21, r24	; 0x15
    470c:	be 01       	movw	r22, r28
    470e:	6f 5f       	subi	r22, 0xFF	; 255
    4710:	7f 4f       	sbci	r23, 0xFF	; 255
    4712:	43 c0       	rjmp	.+134    	; 0x479a <macRouteAssociateRequest+0x12a>
    4714:	a3 e6       	ldi	r26, 0x63	; 99
    4716:	b8 e8       	ldi	r27, 0x88	; 136
    4718:	b0 93 af 0b 	sts	0x0BAF, r27	; 0x800baf <mac_buffer_tx+0x1>
    471c:	a0 93 ae 0b 	sts	0x0BAE, r26	; 0x800bae <mac_buffer_tx>
    4720:	a1 e0       	ldi	r26, 0x01	; 1
    4722:	a8 0f       	add	r26, r24
    4724:	a0 93 3a 0c 	sts	0x0C3A, r26	; 0x800c3a <macConfig+0xa>
    4728:	80 93 b0 0b 	sts	0x0BB0, r24	; 0x800bb0 <mac_buffer_tx+0x2>
    472c:	f0 93 b2 0b 	sts	0x0BB2, r31	; 0x800bb2 <mac_buffer_tx+0x4>
    4730:	e0 93 b1 0b 	sts	0x0BB1, r30	; 0x800bb1 <mac_buffer_tx+0x3>
    4734:	70 93 b4 0b 	sts	0x0BB4, r23	; 0x800bb4 <mac_buffer_tx+0x6>
    4738:	60 93 b3 0b 	sts	0x0BB3, r22	; 0x800bb3 <mac_buffer_tx+0x5>
    473c:	50 93 b6 0b 	sts	0x0BB6, r21	; 0x800bb6 <mac_buffer_tx+0x8>
    4740:	40 93 b5 0b 	sts	0x0BB5, r20	; 0x800bb5 <mac_buffer_tx+0x7>
    4744:	81 e0       	ldi	r24, 0x01	; 1
    4746:	80 93 b7 0b 	sts	0x0BB7, r24	; 0x800bb7 <mac_buffer_tx+0x9>
    474a:	40 91 37 0b 	lds	r20, 0x0B37	; 0x800b37 <mac_buffer_rx+0xb>
    474e:	50 91 38 0b 	lds	r21, 0x0B38	; 0x800b38 <mac_buffer_rx+0xc>
    4752:	50 93 b9 0b 	sts	0x0BB9, r21	; 0x800bb9 <mac_buffer_tx+0xb>
    4756:	40 93 b8 0b 	sts	0x0BB8, r20	; 0x800bb8 <mac_buffer_tx+0xa>
    475a:	30 93 ba 0b 	sts	0x0BBA, r19	; 0x800bba <mac_buffer_tx+0xc>
    475e:	20 93 bb 0b 	sts	0x0BBB, r18	; 0x800bbb <mac_buffer_tx+0xd>
    4762:	90 93 bc 0b 	sts	0x0BBC, r25	; 0x800bbc <mac_buffer_tx+0xe>
    4766:	80 91 3c 0b 	lds	r24, 0x0B3C	; 0x800b3c <mac_buffer_rx+0x10>
    476a:	80 93 bd 0b 	sts	0x0BBD, r24	; 0x800bbd <mac_buffer_tx+0xf>
    476e:	80 91 3d 0b 	lds	r24, 0x0B3D	; 0x800b3d <mac_buffer_rx+0x11>
    4772:	80 93 be 0b 	sts	0x0BBE, r24	; 0x800bbe <mac_buffer_tx+0x10>
    4776:	80 91 3e 0b 	lds	r24, 0x0B3E	; 0x800b3e <mac_buffer_rx+0x12>
    477a:	80 93 bf 0b 	sts	0x0BBF, r24	; 0x800bbf <mac_buffer_tx+0x11>
    477e:	80 91 3f 0b 	lds	r24, 0x0B3F	; 0x800b3f <mac_buffer_rx+0x13>
    4782:	80 93 c0 0b 	sts	0x0BC0, r24	; 0x800bc0 <mac_buffer_tx+0x12>
    4786:	80 91 40 0b 	lds	r24, 0x0B40	; 0x800b40 <mac_buffer_rx+0x14>
    478a:	80 93 c1 0b 	sts	0x0BC1, r24	; 0x800bc1 <mac_buffer_tx+0x13>
    478e:	80 91 41 0b 	lds	r24, 0x0B41	; 0x800b41 <mac_buffer_rx+0x15>
    4792:	80 93 c2 0b 	sts	0x0BC2, r24	; 0x800bc2 <mac_buffer_tx+0x14>
    4796:	6e ea       	ldi	r22, 0xAE	; 174
    4798:	7b e0       	ldi	r23, 0x0B	; 11
    479a:	85 e1       	ldi	r24, 0x15	; 21
    479c:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <radioSendData>
    47a0:	65 96       	adiw	r28, 0x15	; 21
    47a2:	0f b6       	in	r0, 0x3f	; 63
    47a4:	f8 94       	cli
    47a6:	de bf       	out	0x3e, r29	; 62
    47a8:	0f be       	out	0x3f, r0	; 63
    47aa:	cd bf       	out	0x3d, r28	; 61
    47ac:	df 91       	pop	r29
    47ae:	cf 91       	pop	r28
    47b0:	08 95       	ret

000047b2 <macRouteData>:
    {
        ftData *frame = (ftData *)(mac_buffer_tx+1);
        u8 holdFlag=0;

        // Copy RX to TX buffer
        macCopyRxToTx();
    47b2:	82 e8       	ldi	r24, 0x82	; 130
    47b4:	ec e2       	ldi	r30, 0x2C	; 44
    47b6:	fb e0       	ldi	r31, 0x0B	; 11
    47b8:	ae ea       	ldi	r26, 0xAE	; 174
    47ba:	bb e0       	ldi	r27, 0x0B	; 11
    47bc:	01 90       	ld	r0, Z+
    47be:	0d 92       	st	X+, r0
    47c0:	8a 95       	dec	r24
    47c2:	e1 f7       	brne	.-8      	; 0x47bc <macRouteData+0xa>

        Led1_on();
    47c4:	a0 9a       	sbi	0x14, 0	; 20
        macSetAlarm(LED_DELAY,ledoff1);
    47c6:	6d e9       	ldi	r22, 0x9D	; 157
    47c8:	71 e0       	ldi	r23, 0x01	; 1
    47ca:	8a e0       	ldi	r24, 0x0A	; 10
    47cc:	90 e0       	ldi	r25, 0x00	; 0
    47ce:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <macSetAlarm>

        // See if this frame is in the child table
        if (macIsChild(frame->finalDestAddr))
    47d2:	80 91 b8 0b 	lds	r24, 0x0BB8	; 0x800bb8 <mac_buffer_tx+0xa>
    47d6:	90 91 b9 0b 	lds	r25, 0x0BB9	; 0x800bb9 <mac_buffer_tx+0xb>
    47da:	0e 94 bb 1f 	call	0x3f76	; 0x3f76 <macIsChild>
    47de:	90 91 3a 0c 	lds	r25, 0x0C3A	; 0x800c3a <macConfig+0xa>
    47e2:	20 91 3d 0c 	lds	r18, 0x0C3D	; 0x800c3d <macConfig+0xd>
    47e6:	30 91 3e 0c 	lds	r19, 0x0C3E	; 0x800c3e <macConfig+0xe>
    47ea:	88 23       	and	r24, r24
    47ec:	59 f0       	breq	.+22     	; 0x4804 <macRouteData+0x52>
        {
            // send frame to child
            frame->seq = macConfig.dsn++;
    47ee:	81 e0       	ldi	r24, 0x01	; 1
    47f0:	89 0f       	add	r24, r25
    47f2:	80 93 3a 0c 	sts	0x0C3A, r24	; 0x800c3a <macConfig+0xa>
    47f6:	90 93 b1 0b 	sts	0x0BB1, r25	; 0x800bb1 <mac_buffer_tx+0x3>
            frame->destAddr = frame->finalDestAddr;
    47fa:	80 91 b8 0b 	lds	r24, 0x0BB8	; 0x800bb8 <mac_buffer_tx+0xa>
    47fe:	90 91 b9 0b 	lds	r25, 0x0BB9	; 0x800bb9 <mac_buffer_tx+0xb>
    4802:	15 c0       	rjmp	.+42     	; 0x482e <macRouteData+0x7c>
                }
            }
            else if (NODETYPE == ROUTER)
            {
                // See if we should route up or down
                if (frame->srcAddr == macConfig.parentShortAddress)
    4804:	40 91 3f 0c 	lds	r20, 0x0C3F	; 0x800c3f <macConfig+0xf>
    4808:	50 91 40 0c 	lds	r21, 0x0C40	; 0x800c40 <macConfig+0x10>
    480c:	60 91 b6 0b 	lds	r22, 0x0BB6	; 0x800bb6 <mac_buffer_tx+0x8>
    4810:	70 91 b7 0b 	lds	r23, 0x0BB7	; 0x800bb7 <mac_buffer_tx+0x9>
                {
                    // this frame is from parent, send it down default route
                    frame->seq = macConfig.dsn++;
    4814:	81 e0       	ldi	r24, 0x01	; 1
    4816:	89 0f       	add	r24, r25
    4818:	80 93 3a 0c 	sts	0x0C3A, r24	; 0x800c3a <macConfig+0xa>
    481c:	90 93 b1 0b 	sts	0x0BB1, r25	; 0x800bb1 <mac_buffer_tx+0x3>
                }
            }
            else if (NODETYPE == ROUTER)
            {
                // See if we should route up or down
                if (frame->srcAddr == macConfig.parentShortAddress)
    4820:	64 17       	cp	r22, r20
    4822:	75 07       	cpc	r23, r21
    4824:	49 f4       	brne	.+18     	; 0x4838 <macRouteData+0x86>
                {
                    // this frame is from parent, send it down default route
                    frame->seq = macConfig.dsn++;
                    frame->destAddr = macConfig.lastRoute;
    4826:	80 91 41 0c 	lds	r24, 0x0C41	; 0x800c41 <macConfig+0x11>
    482a:	90 91 42 0c 	lds	r25, 0x0C42	; 0x800c42 <macConfig+0x12>
    482e:	90 93 b5 0b 	sts	0x0BB5, r25	; 0x800bb5 <mac_buffer_tx+0x7>
    4832:	80 93 b4 0b 	sts	0x0BB4, r24	; 0x800bb4 <mac_buffer_tx+0x6>
    4836:	04 c0       	rjmp	.+8      	; 0x4840 <macRouteData+0x8e>
                }
                else
                {
                    // this frame is from child, send up the chain
                    frame->seq = macConfig.dsn++;
                    frame->destAddr = macConfig.parentShortAddress;
    4838:	50 93 b5 0b 	sts	0x0BB5, r21	; 0x800bb5 <mac_buffer_tx+0x7>
    483c:	40 93 b4 0b 	sts	0x0BB4, r20	; 0x800bb4 <mac_buffer_tx+0x6>
                    frame->srcAddr = macConfig.shortAddress;
    4840:	30 93 b7 0b 	sts	0x0BB7, r19	; 0x800bb7 <mac_buffer_tx+0x9>
    4844:	20 93 b6 0b 	sts	0x0BB6, r18	; 0x800bb6 <mac_buffer_tx+0x8>
        if (holdFlag)
                macHoldFrame(frame->finalDestAddr, (u8*)frame, (u8)*mac_buffer_tx - 2);
        else
        {
            // Make sure we're not broadcasting frames
            if (frame->destAddr != BROADCASTADDR)
    4848:	80 91 b4 0b 	lds	r24, 0x0BB4	; 0x800bb4 <mac_buffer_tx+0x6>
    484c:	90 91 b5 0b 	lds	r25, 0x0BB5	; 0x800bb5 <mac_buffer_tx+0x7>
    4850:	01 96       	adiw	r24, 0x01	; 1
    4852:	39 f0       	breq	.+14     	; 0x4862 <macRouteData+0xb0>
                // Send the frame along (subtract 2 bytes from length for checksum length)
                radioSendData(*mac_buffer_tx - 2, (u8*)frame);
    4854:	80 91 ae 0b 	lds	r24, 0x0BAE	; 0x800bae <mac_buffer_tx>
    4858:	6f ea       	ldi	r22, 0xAF	; 175
    485a:	7b e0       	ldi	r23, 0x0B	; 11
    485c:	82 50       	subi	r24, 0x02	; 2
    485e:	0c 94 19 1d 	jmp	0x3a32	; 0x3a32 <radioSendData>
    4862:	08 95       	ret

00004864 <macSendRoutingPacket>:

        // Set the flag to say we sent a routing packet.
        return 1;
    }
    return 0;
}
    4864:	80 e0       	ldi	r24, 0x00	; 0
    4866:	08 95       	ret

00004868 <store_pandescriptors>:
   @return The channel set by @ref macSetScanChannel().
*/
u8 macGetScanChannel(void)
{
    return scanChannel;
}
    4868:	cf 93       	push	r28
    486a:	df 93       	push	r29
    486c:	ec e2       	ldi	r30, 0x2C	; 44
    486e:	fb e0       	ldi	r31, 0x0B	; 11
    4870:	20 91 ac 0b 	lds	r18, 0x0BAC	; 0x800bac <mac_buffer_rx+0x80>
    4874:	c5 ea       	ldi	r28, 0xA5	; 165
    4876:	dc e0       	ldi	r29, 0x0C	; 12
    4878:	81 81       	ldd	r24, Z+1	; 0x01
    487a:	92 81       	ldd	r25, Z+2	; 0x02
    487c:	84 e0       	ldi	r24, 0x04	; 4
    487e:	98 9f       	mul	r25, r24
    4880:	81 2d       	mov	r24, r1
    4882:	99 27       	eor	r25, r25
    4884:	11 24       	eor	r1, r1
    4886:	88 83       	st	Y, r24
    4888:	84 81       	ldd	r24, Z+4	; 0x04
    488a:	95 81       	ldd	r25, Z+5	; 0x05
    488c:	9a 83       	std	Y+2, r25	; 0x02
    488e:	89 83       	std	Y+1, r24	; 0x01
    4890:	86 81       	ldd	r24, Z+6	; 0x06
    4892:	97 81       	ldd	r25, Z+7	; 0x07
    4894:	9c 83       	std	Y+4, r25	; 0x04
    4896:	8b 83       	std	Y+3, r24	; 0x03
    4898:	83 85       	ldd	r24, Z+11	; 0x0b
    489a:	89 87       	std	Y+9, r24	; 0x09
    489c:	80 91 44 0c 	lds	r24, 0x0C44	; 0x800c44 <macConfig+0x14>
    48a0:	81 50       	subi	r24, 0x01	; 1
    48a2:	8d 83       	std	Y+5, r24	; 0x05
    48a4:	1e 82       	std	Y+6, r1	; 0x06
    48a6:	2a 87       	std	Y+10, r18	; 0x0a
    48a8:	0e 94 24 1b 	call	0x3648	; 0x3648 <radioGetSavedRssiValue>
    48ac:	8b 87       	std	Y+11, r24	; 0x0b
    48ae:	df 91       	pop	r29
    48b0:	cf 91       	pop	r28
    48b2:	08 95       	ret

000048b4 <macIsScanning>:
    48b4:	80 91 67 06 	lds	r24, 0x0667	; 0x800667 <scanInProcess>
    48b8:	08 95       	ret

000048ba <mac_logPanDescriptors>:
    In @ref DEMO mode, the only criteria used is to pick the parent
    with the lowest RSSI reading.  This is done to encourage the
    formation of a multi-hop network for test and demo purposes.
*/
void mac_logPanDescriptors(void)
{
    48ba:	cf 93       	push	r28
    ftBeacon *frame = (ftBeacon *)(mac_buffer_rx+1);
    u8 lqi = ((rx_frame_t *)mac_buffer_rx)->lqi;
    48bc:	80 91 ac 0b 	lds	r24, 0x0BAC	; 0x800bac <mac_buffer_rx+0x80>

    // Swap frame
    frame->panid = ntohs_16(frame->panid);
    frame->addr = ntohs_16(frame->addr);
    frame->superFrame = ntohs_16(frame->superFrame);
    48c0:	40 91 34 0b 	lds	r20, 0x0B34	; 0x800b34 <mac_buffer_rx+0x8>
    48c4:	50 91 35 0b 	lds	r21, 0x0B35	; 0x800b35 <mac_buffer_rx+0x9>


    if (!scanInProcess)
    48c8:	90 91 67 06 	lds	r25, 0x0667	; 0x800667 <scanInProcess>
    48cc:	99 23       	and	r25, r25
    48ce:	61 f1       	breq	.+88     	; 0x4928 <mac_logPanDescriptors+0x6e>
        return;
    if (frame->netID != 6)
    48d0:	90 91 36 0b 	lds	r25, 0x0B36	; 0x800b36 <mac_buffer_rx+0xa>
    48d4:	96 30       	cpi	r25, 0x06	; 6
    48d6:	41 f5       	brne	.+80     	; 0x4928 <mac_logPanDescriptors+0x6e>
        energy.energy[energy.currentChannel] += 500;
    }
    else  // Router and end nodes
    {
        // Check the Beacon frame Superframe spec value.
        u16 previous_superframe = panDescriptor.superFrameSpec.superframe_data;
    48d8:	20 91 ac 0c 	lds	r18, 0x0CAC	; 0x800cac <panDescriptor+0x7>
    48dc:	30 91 ad 0c 	lds	r19, 0x0CAD	; 0x800cad <panDescriptor+0x8>
        panDescriptor.superFrameSpec.superframe_data = htons_16(frame->superFrame);
    48e0:	50 93 ad 0c 	sts	0x0CAD, r21	; 0x800cad <panDescriptor+0x8>
    48e4:	40 93 ac 0c 	sts	0x0CAC, r20	; 0x800cac <panDescriptor+0x7>

        // Determine if association permit is true. We're looking for false.
        if(panDescriptor.superFrameSpec.superframe_struct.association_permit)
    48e8:	90 91 ad 0c 	lds	r25, 0x0CAD	; 0x800cad <panDescriptor+0x8>
    48ec:	97 ff       	sbrs	r25, 7
    48ee:	05 c0       	rjmp	.+10     	; 0x48fa <mac_logPanDescriptors+0x40>
        {
            panDescriptor.superFrameSpec.superframe_data = previous_superframe;
    48f0:	30 93 ad 0c 	sts	0x0CAD, r19	; 0x800cad <panDescriptor+0x8>
    48f4:	20 93 ac 0c 	sts	0x0CAC, r18	; 0x800cac <panDescriptor+0x7>
            return;
    48f8:	17 c0       	rjmp	.+46     	; 0x4928 <mac_logPanDescriptors+0x6e>
            }
        }
        else
        {
            // Determine if the Beacon LQI value is stronger than the previous scan.
            if(panDescriptor.lqi < lqi)
    48fa:	90 91 af 0c 	lds	r25, 0x0CAF	; 0x800caf <panDescriptor+0xa>
    48fe:	98 17       	cp	r25, r24
    4900:	18 f4       	brcc	.+6      	; 0x4908 <mac_logPanDescriptors+0x4e>
            {
                store_pandescriptors();
            }
        }
    }
}
    4902:	cf 91       	pop	r28
        else
        {
            // Determine if the Beacon LQI value is stronger than the previous scan.
            if(panDescriptor.lqi < lqi)
            {
                store_pandescriptors();
    4904:	0c 94 34 24 	jmp	0x4868	; 0x4868 <store_pandescriptors>
            }
            // If LQI is equal to previous stored, check for the least amount of hops to the coord.
            else if((panDescriptor.lqi == lqi)
    4908:	98 13       	cpse	r25, r24
    490a:	0e c0       	rjmp	.+28     	; 0x4928 <mac_logPanDescriptors+0x6e>
                    && (panDescriptor.hopsToCoord > frame->hops))
    490c:	90 91 ae 0c 	lds	r25, 0x0CAE	; 0x800cae <panDescriptor+0x9>
    4910:	80 91 37 0b 	lds	r24, 0x0B37	; 0x800b37 <mac_buffer_rx+0xb>
    4914:	89 17       	cp	r24, r25
    4916:	a8 f3       	brcs	.-22     	; 0x4902 <mac_logPanDescriptors+0x48>
            {
                store_pandescriptors();
            }
            // If LQI and hops are equal to the previous stored, check for the best RSSI value.
            else if((panDescriptor.lqi == lqi)
                    && (panDescriptor.hopsToCoord == frame->hops)
    4918:	98 13       	cpse	r25, r24
    491a:	06 c0       	rjmp	.+12     	; 0x4928 <mac_logPanDescriptors+0x6e>
                    && (panDescriptor.rssi < radioGetSavedRssiValue()))
    491c:	c0 91 b0 0c 	lds	r28, 0x0CB0	; 0x800cb0 <panDescriptor+0xb>
    4920:	0e 94 24 1b 	call	0x3648	; 0x3648 <radioGetSavedRssiValue>
    4924:	c8 17       	cp	r28, r24
    4926:	68 f3       	brcs	.-38     	; 0x4902 <mac_logPanDescriptors+0x48>
            {
                store_pandescriptors();
            }
        }
    }
}
    4928:	cf 91       	pop	r28
    492a:	08 95       	ret

0000492c <mac_scanConfirm>:
    @brief Trigger a call to @ref appScanConfirm(), since the scanning
    process is done.  If at least one valid beacon was received, then signal that
    success to the application.
*/
void mac_scanConfirm(void)
{
    492c:	cf 93       	push	r28
    // logicalChannel is used as flag to show that we received a valid beacon
    u8 gotbeacon = (panDescriptor.logicalChannel != 0xff);
    492e:	c1 e0       	ldi	r28, 0x01	; 1
    4930:	80 91 aa 0c 	lds	r24, 0x0CAA	; 0x800caa <panDescriptor+0x5>
    4934:	8f 3f       	cpi	r24, 0xFF	; 255
    4936:	11 f4       	brne	.+4      	; 0x493c <mac_scanConfirm+0x10>
    4938:	c0 e0       	ldi	r28, 0x00	; 0
    493a:	1b c0       	rjmp	.+54     	; 0x4972 <mac_scanConfirm+0x46>

    if (gotbeacon)
    {
        // Save the panDescriptor data to the PIB's.
        macConfig.panId = panDescriptor.coorPANId;
    493c:	80 91 a6 0c 	lds	r24, 0x0CA6	; 0x800ca6 <panDescriptor+0x1>
    4940:	90 91 a7 0c 	lds	r25, 0x0CA7	; 0x800ca7 <panDescriptor+0x2>
    4944:	90 93 3c 0c 	sts	0x0C3C, r25	; 0x800c3c <macConfig+0xc>
    4948:	80 93 3b 0c 	sts	0x0C3B, r24	; 0x800c3b <macConfig+0xb>
        macConfig.parentShortAddress = panDescriptor.coordAddr;
    494c:	20 91 a8 0c 	lds	r18, 0x0CA8	; 0x800ca8 <panDescriptor+0x3>
    4950:	30 91 a9 0c 	lds	r19, 0x0CA9	; 0x800ca9 <panDescriptor+0x4>
    4954:	30 93 40 0c 	sts	0x0C40, r19	; 0x800c40 <macConfig+0x10>
    4958:	20 93 3f 0c 	sts	0x0C3F, r18	; 0x800c3f <macConfig+0xf>

        // Need to reset the PAN ID in the radio.
        radioSetPanId(macConfig.panId);
    495c:	0e 94 57 1d 	call	0x3aae	; 0x3aae <radioSetPanId>

        macSetOperatingChannel(panDescriptor.logicalChannel);
    4960:	80 91 aa 0c 	lds	r24, 0x0CAA	; 0x800caa <panDescriptor+0x5>
    4964:	0e 94 5b 1f 	call	0x3eb6	; 0x3eb6 <macSetOperatingChannel>

        // We are one hop more than our (prospective) parent
        macConfig.hopsToCoord = panDescriptor.hopsToCoord + 1;
    4968:	90 91 ae 0c 	lds	r25, 0x0CAE	; 0x800cae <panDescriptor+0x9>
    496c:	9f 5f       	subi	r25, 0xFF	; 255
    496e:	90 93 43 0c 	sts	0x0C43, r25	; 0x800c43 <macConfig+0x13>
    }
    // Confirm the scan, only if we have a valid coordinator
    appScanConfirm(gotbeacon);
    4972:	8c 2f       	mov	r24, r28
}
    4974:	cf 91       	pop	r28

        // We are one hop more than our (prospective) parent
        macConfig.hopsToCoord = panDescriptor.hopsToCoord + 1;
    }
    // Confirm the scan, only if we have a valid coordinator
    appScanConfirm(gotbeacon);
    4976:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <appScanConfirm>

0000497a <macScan>:
    // Check for fixed channel
    if (PAN_CHANNEL != CHANNEL255)
        macSetScanChannel(PAN_CHANNEL);

    // Set up some varibles on the initial call to macScan()
    if (0xFF == macConfig.currentChannel)
    497a:	80 91 44 0c 	lds	r24, 0x0C44	; 0x800c44 <macConfig+0x14>
    497e:	8f 3f       	cpi	r24, 0xFF	; 255
    4980:	b1 f4       	brne	.+44     	; 0x49ae <macScan+0x34>
    {
        scanInProcess = true;
    4982:	91 e0       	ldi	r25, 0x01	; 1
    4984:	90 93 67 06 	sts	0x0667, r25	; 0x800667 <scanInProcess>

        // Reset the variables.
        memset(&panDescriptor, 0, sizeof(panDescriptor_t));
    4988:	96 e1       	ldi	r25, 0x16	; 22
    498a:	e5 ea       	ldi	r30, 0xA5	; 165
    498c:	fc e0       	ldi	r31, 0x0C	; 12
    498e:	df 01       	movw	r26, r30
    4990:	1d 92       	st	X+, r1
    4992:	9a 95       	dec	r25
    4994:	e9 f7       	brne	.-6      	; 0x4990 <macScan+0x16>

        // logicalChannel is used as flag to show that we received a valid beacon
        panDescriptor.logicalChannel = 0xff;
    4996:	80 93 aa 0c 	sts	0x0CAA, r24	; 0x800caa <panDescriptor+0x5>

        macConfig.currentChannel = MIN_CHANNEL; // First possible channel for RF23x
    499a:	8b e0       	ldi	r24, 0x0B	; 11
    499c:	80 93 44 0c 	sts	0x0C44, r24	; 0x800c44 <macConfig+0x14>

        // Check for a single pre-defined channel to scan.
        if (scanChannel != ALL_CHANNELS)
    49a0:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <scanChannel>
    49a4:	80 38       	cpi	r24, 0x80	; 128
    49a6:	a9 f0       	breq	.+42     	; 0x49d2 <macScan+0x58>
            macConfig.currentChannel = scanChannel;
    49a8:	80 93 44 0c 	sts	0x0C44, r24	; 0x800c44 <macConfig+0x14>
    49ac:	12 c0       	rjmp	.+36     	; 0x49d2 <macScan+0x58>
        // Not first time through, must sleep very low power nodes.
        #if (VLP && (NODETYPE == ENDDEVICE))
            nodeSleep(SCAN_SLEEP_TIME);
		#endif
    // See if we're done scanning
    if(macConfig.currentChannel > (CHINA_MODE ? 4 : MAX_CHANNEL) ||
    49ae:	8b 31       	cpi	r24, 0x1B	; 27
    49b0:	48 f4       	brcc	.+18     	; 0x49c4 <macScan+0x4a>
       macConfig.currentChannel == scanChannel + 1)
    49b2:	90 e0       	ldi	r25, 0x00	; 0
    49b4:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <scanChannel>
    49b8:	30 e0       	ldi	r19, 0x00	; 0
    49ba:	2f 5f       	subi	r18, 0xFF	; 255
    49bc:	3f 4f       	sbci	r19, 0xFF	; 255
        // Not first time through, must sleep very low power nodes.
        #if (VLP && (NODETYPE == ENDDEVICE))
            nodeSleep(SCAN_SLEEP_TIME);
		#endif
    // See if we're done scanning
    if(macConfig.currentChannel > (CHINA_MODE ? 4 : MAX_CHANNEL) ||
    49be:	82 17       	cp	r24, r18
    49c0:	93 07       	cpc	r25, r19
    49c2:	39 f4       	brne	.+14     	; 0x49d2 <macScan+0x58>
       macConfig.currentChannel == scanChannel + 1)
        {
            // done scanning
            scanInProcess = false;
    49c4:	10 92 67 06 	sts	0x0667, r1	; 0x800667 <scanInProcess>
            macConfig.currentChannel = 0xFF;
    49c8:	8f ef       	ldi	r24, 0xFF	; 255
    49ca:	80 93 44 0c 	sts	0x0C44, r24	; 0x800c44 <macConfig+0x14>

            mac_scanConfirm();
    49ce:	0c 94 96 24 	jmp	0x492c	; 0x492c <mac_scanConfirm>
            return;
        }

    // Set the channel.
    macSetOperatingChannel(macConfig.currentChannel);
    49d2:	80 91 44 0c 	lds	r24, 0x0C44	; 0x800c44 <macConfig+0x14>
    49d6:	0e 94 5b 1f 	call	0x3eb6	; 0x3eb6 <macSetOperatingChannel>
{
    // Create a struct pointer to the global variable...
    volatile ftBeaconReq* brFrame = (ftBeaconReq*)(mac_buffer_tx+1);

    // Fill in beacon request frame
    brFrame->fcf = htons_16(FCF_BEACONREQ);
    49da:	83 e0       	ldi	r24, 0x03	; 3
    49dc:	98 e0       	ldi	r25, 0x08	; 8
    49de:	90 93 b0 0b 	sts	0x0BB0, r25	; 0x800bb0 <mac_buffer_tx+0x2>
    49e2:	80 93 af 0b 	sts	0x0BAF, r24	; 0x800baf <mac_buffer_tx+0x1>
    brFrame->seq = macConfig.bsn++;
    49e6:	80 91 39 0c 	lds	r24, 0x0C39	; 0x800c39 <macConfig+0x9>
    49ea:	91 e0       	ldi	r25, 0x01	; 1
    49ec:	98 0f       	add	r25, r24
    49ee:	90 93 39 0c 	sts	0x0C39, r25	; 0x800c39 <macConfig+0x9>
    49f2:	80 93 b1 0b 	sts	0x0BB1, r24	; 0x800bb1 <mac_buffer_tx+0x3>
    brFrame->panid = htons_16(PAN_ID);
    49f6:	8f ef       	ldi	r24, 0xFF	; 255
    49f8:	9f ef       	ldi	r25, 0xFF	; 255
    49fa:	90 93 b3 0b 	sts	0x0BB3, r25	; 0x800bb3 <mac_buffer_tx+0x5>
    49fe:	80 93 b2 0b 	sts	0x0BB2, r24	; 0x800bb2 <mac_buffer_tx+0x4>
    brFrame->broadcastAddr = BROADCASTADDR;
    4a02:	90 93 b5 0b 	sts	0x0BB5, r25	; 0x800bb5 <mac_buffer_tx+0x7>
    4a06:	80 93 b4 0b 	sts	0x0BB4, r24	; 0x800bb4 <mac_buffer_tx+0x6>
    brFrame->cmd = BEACON_REQUEST;
    4a0a:	87 e0       	ldi	r24, 0x07	; 7
    4a0c:	80 93 b6 0b 	sts	0x0BB6, r24	; 0x800bb6 <mac_buffer_tx+0x8>

    // Send the frame via radio
    radioSendData(sizeof(ftBeaconReq), (u8*)brFrame);
    4a10:	6f ea       	ldi	r22, 0xAF	; 175
    4a12:	7b e0       	ldi	r23, 0x0B	; 11
    4a14:	88 e0       	ldi	r24, 0x08	; 8
    4a16:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <radioSendData>

    // Send the beacon request
    sendBeaconRequest();

    // Beacon was send, increment channel to prepare for the next one.
    macConfig.currentChannel++;
    4a1a:	80 91 44 0c 	lds	r24, 0x0C44	; 0x800c44 <macConfig+0x14>
    4a1e:	8f 5f       	subi	r24, 0xFF	; 255
    4a20:	80 93 44 0c 	sts	0x0C44, r24	; 0x800c44 <macConfig+0x14>

    // Set the scan duration timer.
    macSetAlarm(SCANDURATION, macScan);
    4a24:	6d eb       	ldi	r22, 0xBD	; 189
    4a26:	74 e2       	ldi	r23, 0x24	; 36
    4a28:	84 e1       	ldi	r24, 0x14	; 20
    4a2a:	90 e0       	ldi	r25, 0x00	; 0
    4a2c:	0c 94 4f 25 	jmp	0x4a9e	; 0x4a9e <macSetAlarm>

00004a30 <macEdCallback>:
   @brief Callback function, called by the radio ISR function when the
   radio issues an energy measurement interrupt.  This function stores
   the energy measurement for later use.
 */
void macEdCallback(void)
{
    4a30:	08 95       	ret

00004a32 <getUniqueID>:
    localtime = tickTimer;
    AVR_LEAVE_CRITICAL_REGION();

    return localtime;

}
    4a32:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <currentTimerID.3607>
    4a36:	8f 5f       	subi	r24, 0xFF	; 255
    4a38:	09 f4       	brne	.+2      	; 0x4a3c <getUniqueID+0xa>
    4a3a:	81 e0       	ldi	r24, 0x01	; 1
    4a3c:	20 e0       	ldi	r18, 0x00	; 0
    4a3e:	30 e0       	ldi	r19, 0x00	; 0
    4a40:	91 e0       	ldi	r25, 0x01	; 1
    4a42:	f9 01       	movw	r30, r18
    4a44:	e0 53       	subi	r30, 0x30	; 48
    4a46:	f9 4f       	sbci	r31, 0xF9	; 249
    4a48:	42 81       	ldd	r20, Z+2	; 0x02
    4a4a:	48 13       	cpse	r20, r24
    4a4c:	01 c0       	rjmp	.+2      	; 0x4a50 <getUniqueID+0x1e>
    4a4e:	90 e0       	ldi	r25, 0x00	; 0
    4a50:	2b 5f       	subi	r18, 0xFB	; 251
    4a52:	3f 4f       	sbci	r19, 0xFF	; 255
    4a54:	24 36       	cpi	r18, 0x64	; 100
    4a56:	31 05       	cpc	r19, r1
    4a58:	a1 f7       	brne	.-24     	; 0x4a42 <getUniqueID+0x10>
    4a5a:	20 e0       	ldi	r18, 0x00	; 0
    4a5c:	30 e0       	ldi	r19, 0x00	; 0
    4a5e:	f9 01       	movw	r30, r18
    4a60:	e4 59       	subi	r30, 0x94	; 148
    4a62:	f9 4f       	sbci	r31, 0xF9	; 249
    4a64:	42 81       	ldd	r20, Z+2	; 0x02
    4a66:	48 13       	cpse	r20, r24
    4a68:	01 c0       	rjmp	.+2      	; 0x4a6c <getUniqueID+0x3a>
    4a6a:	90 e0       	ldi	r25, 0x00	; 0
    4a6c:	2b 5f       	subi	r18, 0xFB	; 251
    4a6e:	3f 4f       	sbci	r19, 0xFF	; 255
    4a70:	24 36       	cpi	r18, 0x64	; 100
    4a72:	31 05       	cpc	r19, r1
    4a74:	a1 f7       	brne	.-24     	; 0x4a5e <getUniqueID+0x2c>
    4a76:	99 23       	and	r25, r25
    4a78:	f1 f2       	breq	.-68     	; 0x4a36 <getUniqueID+0x4>
    4a7a:	80 93 68 06 	sts	0x0668, r24	; 0x800668 <currentTimerID.3607>
    4a7e:	08 95       	ret

00004a80 <timerStart>:
    4a80:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <timerRunning>
    4a84:	81 11       	cpse	r24, r1
    4a86:	0a c0       	rjmp	.+20     	; 0x4a9c <timerStart+0x1c>
    4a88:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    4a8c:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
    4a90:	82 e0       	ldi	r24, 0x02	; 2
    4a92:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    4a96:	81 e0       	ldi	r24, 0x01	; 1
    4a98:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <timerRunning>
    4a9c:	08 95       	ret

00004a9e <macSetAlarm>:
   return nothing.

   @return Handle to timer.  Can be used to call macTimerEnd().
*/
u8 macSetAlarm(u16 time, void(*callback)(void))
{
    4a9e:	0f 93       	push	r16
    4aa0:	1f 93       	push	r17
    4aa2:	cf 93       	push	r28
    4aa4:	df 93       	push	r29
    4aa6:	1f 92       	push	r1
    4aa8:	cd b7       	in	r28, 0x3d	; 61
    4aaa:	de b7       	in	r29, 0x3e	; 62
    u8 i;
    u16 ticks;

    if (!time)
    4aac:	00 97       	sbiw	r24, 0x00	; 0
    4aae:	19 f4       	brne	.+6      	; 0x4ab6 <macSetAlarm+0x18>
    {
        // Don't delay, just call it
        callback();
    4ab0:	fb 01       	movw	r30, r22
    4ab2:	09 95       	icall
    4ab4:	12 c0       	rjmp	.+36     	; 0x4ada <macSetAlarm+0x3c>

    // Store the timer details in the array
    ticks = max(time, 1);  // At least one tick

    // Protect this section from an ISR that will add an alarm
    AVR_ENTER_CRITICAL_REGION();
    4ab6:	2f b7       	in	r18, 0x3f	; 63
    4ab8:	29 83       	std	Y+1, r18	; 0x01
    4aba:	f8 94       	cli
    4abc:	a0 ed       	ldi	r26, 0xD0	; 208
    4abe:	b6 e0       	ldi	r27, 0x06	; 6
    4ac0:	20 e0       	ldi	r18, 0x00	; 0
    4ac2:	30 e0       	ldi	r19, 0x00	; 0
    // search for free event structure
    for (i=0;i<TIMER_EVENTS_MAX;i++)
        if (!timerEvents[i].time)
    4ac4:	4d 91       	ld	r20, X+
    4ac6:	5c 91       	ld	r21, X
    4ac8:	11 97       	sbiw	r26, 0x01	; 1
    4aca:	45 2b       	or	r20, r21
    4acc:	41 f0       	breq	.+16     	; 0x4ade <macSetAlarm+0x40>
    4ace:	2f 5f       	subi	r18, 0xFF	; 255
    4ad0:	3f 4f       	sbci	r19, 0xFF	; 255
    4ad2:	15 96       	adiw	r26, 0x05	; 5
    ticks = max(time, 1);  // At least one tick

    // Protect this section from an ISR that will add an alarm
    AVR_ENTER_CRITICAL_REGION();
    // search for free event structure
    for (i=0;i<TIMER_EVENTS_MAX;i++)
    4ad4:	24 31       	cpi	r18, 0x14	; 20
    4ad6:	31 05       	cpc	r19, r1
    4ad8:	a9 f7       	brne	.-22     	; 0x4ac4 <macSetAlarm+0x26>
            // free, use this one
            break;

    if (i >= TIMER_EVENTS_MAX)
        // Out of timers to use, just quit
        return 0;
    4ada:	80 e0       	ldi	r24, 0x00	; 0
    4adc:	23 c0       	rjmp	.+70     	; 0x4b24 <macSetAlarm+0x86>

    timerEvents[i].time = ticks;
    4ade:	45 e0       	ldi	r20, 0x05	; 5
    4ae0:	42 9f       	mul	r20, r18
    4ae2:	d0 01       	movw	r26, r0
    4ae4:	43 9f       	mul	r20, r19
    4ae6:	b0 0d       	add	r27, r0
    4ae8:	11 24       	eor	r1, r1
    4aea:	a0 53       	subi	r26, 0x30	; 48
    4aec:	b9 4f       	sbci	r27, 0xF9	; 249
        callback();
        return 0;
    }

    // Store the timer details in the array
    ticks = max(time, 1);  // At least one tick
    4aee:	00 97       	sbiw	r24, 0x00	; 0
    4af0:	11 f4       	brne	.+4      	; 0x4af6 <macSetAlarm+0x58>
    4af2:	81 e0       	ldi	r24, 0x01	; 1
    4af4:	90 e0       	ldi	r25, 0x00	; 0

    if (i >= TIMER_EVENTS_MAX)
        // Out of timers to use, just quit
        return 0;

    timerEvents[i].time = ticks;
    4af6:	8d 93       	st	X+, r24
    4af8:	9c 93       	st	X, r25
    timerEvents[i].callback = callback;
    4afa:	85 e0       	ldi	r24, 0x05	; 5
    4afc:	82 9f       	mul	r24, r18
    4afe:	80 01       	movw	r16, r0
    4b00:	83 9f       	mul	r24, r19
    4b02:	10 0d       	add	r17, r0
    4b04:	11 24       	eor	r1, r1
    4b06:	00 53       	subi	r16, 0x30	; 48
    4b08:	19 4f       	sbci	r17, 0xF9	; 249
    4b0a:	f8 01       	movw	r30, r16
    4b0c:	74 83       	std	Z+4, r23	; 0x04
    4b0e:	63 83       	std	Z+3, r22	; 0x03
    // don't return zero as a timer ID
    timerEvents[i].timerID = getUniqueID();
    4b10:	0e 94 19 25 	call	0x4a32	; 0x4a32 <getUniqueID>
    4b14:	f8 01       	movw	r30, r16
    4b16:	82 83       	std	Z+2, r24	; 0x02

    // start timer running, since we have at least one timer running
    timerStart();
    4b18:	0e 94 40 25 	call	0x4a80	; 0x4a80 <timerStart>
    AVR_LEAVE_CRITICAL_REGION();
    4b1c:	89 81       	ldd	r24, Y+1	; 0x01
    4b1e:	8f bf       	out	0x3f, r24	; 63

    return timerEvents[i].timerID;
    4b20:	f8 01       	movw	r30, r16
    4b22:	82 81       	ldd	r24, Z+2	; 0x02
}
    4b24:	0f 90       	pop	r0
    4b26:	df 91       	pop	r29
    4b28:	cf 91       	pop	r28
    4b2a:	1f 91       	pop	r17
    4b2c:	0f 91       	pop	r16
    4b2e:	08 95       	ret

00004b30 <macSetLongAlarm>:
   hours.

   @return Handle to timer.  Can be used to call macTimerEnd().
*/
u8 macSetLongAlarm(u16 seconds, void(*callback)(void))
{
    4b30:	0f 93       	push	r16
    4b32:	1f 93       	push	r17
    4b34:	cf 93       	push	r28
    4b36:	df 93       	push	r29
    4b38:	1f 92       	push	r1
    4b3a:	cd b7       	in	r28, 0x3d	; 61
    4b3c:	de b7       	in	r29, 0x3e	; 62
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        // Find a free timer
        u8 i;
        
        if (!seconds)
    4b3e:	00 97       	sbiw	r24, 0x00	; 0
    4b40:	19 f4       	brne	.+6      	; 0x4b48 <macSetLongAlarm+0x18>
        {
            // Just go right now
            callback();
    4b42:	fb 01       	movw	r30, r22
    4b44:	09 95       	icall
    4b46:	0f c0       	rjmp	.+30     	; 0x4b66 <macSetLongAlarm+0x36>
    4b48:	ac e6       	ldi	r26, 0x6C	; 108
    4b4a:	b6 e0       	ldi	r27, 0x06	; 6
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        // Find a free timer
        u8 i;
        
        if (!seconds)
    4b4c:	20 e0       	ldi	r18, 0x00	; 0
    4b4e:	30 e0       	ldi	r19, 0x00	; 0
            callback();
            return 0;
        }
        
        for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
            if (!longTimerEvents[i].time)
    4b50:	4d 91       	ld	r20, X+
    4b52:	5c 91       	ld	r21, X
    4b54:	11 97       	sbiw	r26, 0x01	; 1
    4b56:	45 2b       	or	r20, r21
    4b58:	41 f0       	breq	.+16     	; 0x4b6a <macSetLongAlarm+0x3a>
    4b5a:	2f 5f       	subi	r18, 0xFF	; 255
    4b5c:	3f 4f       	sbci	r19, 0xFF	; 255
    4b5e:	15 96       	adiw	r26, 0x05	; 5
            // Just go right now
            callback();
            return 0;
        }
        
        for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
    4b60:	24 31       	cpi	r18, 0x14	; 20
    4b62:	31 05       	cpc	r19, r1
    4b64:	a9 f7       	brne	.-22     	; 0x4b50 <macSetLongAlarm+0x20>
                // free, use this one
                break;

        if (i >= LONG_TIMER_EVENTS_MAX)
            // No more timers, just quit
            return 0;
    4b66:	80 e0       	ldi	r24, 0x00	; 0
    4b68:	1a c0       	rjmp	.+52     	; 0x4b9e <macSetLongAlarm+0x6e>
        
        // Store the time and callback into free timer
        longTimerEvents[i].time = seconds;
    4b6a:	45 e0       	ldi	r20, 0x05	; 5
    4b6c:	42 9f       	mul	r20, r18
    4b6e:	80 01       	movw	r16, r0
    4b70:	43 9f       	mul	r20, r19
    4b72:	10 0d       	add	r17, r0
    4b74:	11 24       	eor	r1, r1
    4b76:	04 59       	subi	r16, 0x94	; 148
    4b78:	19 4f       	sbci	r17, 0xF9	; 249
    4b7a:	f8 01       	movw	r30, r16
    4b7c:	91 83       	std	Z+1, r25	; 0x01
    4b7e:	80 83       	st	Z, r24
        longTimerEvents[i].callback = callback;
    4b80:	74 83       	std	Z+4, r23	; 0x04
    4b82:	63 83       	std	Z+3, r22	; 0x03
        longTimerEvents[i].timerID = getUniqueID();
    4b84:	0e 94 19 25 	call	0x4a32	; 0x4a32 <getUniqueID>
    4b88:	f8 01       	movw	r30, r16
    4b8a:	82 83       	std	Z+2, r24	; 0x02
        
        // start timer running, since we have at least one timer running
        AVR_ENTER_CRITICAL_REGION();
    4b8c:	8f b7       	in	r24, 0x3f	; 63
    4b8e:	89 83       	std	Y+1, r24	; 0x01
    4b90:	f8 94       	cli
        timerStart();
    4b92:	0e 94 40 25 	call	0x4a80	; 0x4a80 <timerStart>
        AVR_LEAVE_CRITICAL_REGION();
    4b96:	89 81       	ldd	r24, Y+1	; 0x01
    4b98:	8f bf       	out	0x3f, r24	; 63
        
        return longTimerEvents[i].timerID;
    4b9a:	f8 01       	movw	r30, r16
    4b9c:	82 81       	ldd	r24, Z+2	; 0x02
    }
    return 0;
}
    4b9e:	0f 90       	pop	r0
    4ba0:	df 91       	pop	r29
    4ba2:	cf 91       	pop	r28
    4ba4:	1f 91       	pop	r17
    4ba6:	0f 91       	pop	r16
    4ba8:	08 95       	ret

00004baa <macTimerEnd>:

   @param timerID The value returned from macSetAlarm when the alarm
   was set.
*/
void macTimerEnd(u8 timerID)
{
    4baa:	e2 ed       	ldi	r30, 0xD2	; 210
    4bac:	f6 e0       	ldi	r31, 0x06	; 6
    4bae:	20 e0       	ldi	r18, 0x00	; 0
    4bb0:	30 e0       	ldi	r19, 0x00	; 0
    u8 i;

    // search for timer with timerID
    for (i=0;i<TIMER_EVENTS_MAX;i++)
        if (timerEvents[i].timerID == timerID)
    4bb2:	90 81       	ld	r25, Z
    4bb4:	98 13       	cpse	r25, r24
    4bb6:	09 c0       	rjmp	.+18     	; 0x4bca <macTimerEnd+0x20>
        {
            // kill this timer
            timerEvents[i].time = 0;
    4bb8:	85 e0       	ldi	r24, 0x05	; 5
    4bba:	82 9f       	mul	r24, r18
    4bbc:	f0 01       	movw	r30, r0
    4bbe:	83 9f       	mul	r24, r19
    4bc0:	f0 0d       	add	r31, r0
    4bc2:	11 24       	eor	r1, r1
    4bc4:	e0 53       	subi	r30, 0x30	; 48
    4bc6:	f9 4f       	sbci	r31, 0xF9	; 249
    4bc8:	15 c0       	rjmp	.+42     	; 0x4bf4 <macTimerEnd+0x4a>
    4bca:	2f 5f       	subi	r18, 0xFF	; 255
    4bcc:	3f 4f       	sbci	r19, 0xFF	; 255
    4bce:	35 96       	adiw	r30, 0x05	; 5
void macTimerEnd(u8 timerID)
{
    u8 i;

    // search for timer with timerID
    for (i=0;i<TIMER_EVENTS_MAX;i++)
    4bd0:	24 31       	cpi	r18, 0x14	; 20
    4bd2:	31 05       	cpc	r19, r1
    4bd4:	71 f7       	brne	.-36     	; 0x4bb2 <macTimerEnd+0x8>
    4bd6:	ee e6       	ldi	r30, 0x6E	; 110
    4bd8:	f6 e0       	ldi	r31, 0x06	; 6
    4bda:	20 e0       	ldi	r18, 0x00	; 0
    4bdc:	30 e0       	ldi	r19, 0x00	; 0

    // search for long timer with timerID
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
            if (longTimerEvents[i].timerID == timerID)
    4bde:	90 81       	ld	r25, Z
    4be0:	98 13       	cpse	r25, r24
    4be2:	0c c0       	rjmp	.+24     	; 0x4bfc <macTimerEnd+0x52>
            {
                // kill this timer
                longTimerEvents[i].time = 0;
    4be4:	85 e0       	ldi	r24, 0x05	; 5
    4be6:	82 9f       	mul	r24, r18
    4be8:	f0 01       	movw	r30, r0
    4bea:	83 9f       	mul	r24, r19
    4bec:	f0 0d       	add	r31, r0
    4bee:	11 24       	eor	r1, r1
    4bf0:	e4 59       	subi	r30, 0x94	; 148
    4bf2:	f9 4f       	sbci	r31, 0xF9	; 249
    4bf4:	11 82       	std	Z+1, r1	; 0x01
    4bf6:	10 82       	st	Z, r1
                longTimerEvents[i].timerID = 0;
    4bf8:	12 82       	std	Z+2, r1	; 0x02
                return;
    4bfa:	08 95       	ret
    4bfc:	2f 5f       	subi	r18, 0xFF	; 255
    4bfe:	3f 4f       	sbci	r19, 0xFF	; 255
    4c00:	35 96       	adiw	r30, 0x05	; 5
        }

    // search for long timer with timerID
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
    4c02:	24 31       	cpi	r18, 0x14	; 20
    4c04:	31 05       	cpc	r19, r1
    4c06:	59 f7       	brne	.-42     	; 0x4bde <macTimerEnd+0x34>
    4c08:	08 95       	ret

00004c0a <timerInit>:
   want to clear all timers.  Sets the timeout for each tick of the
   system clock.
 */
void timerInit(void)
{
    TIMER_INIT();
    4c0a:	e1 e9       	ldi	r30, 0x91	; 145
    4c0c:	f0 e0       	ldi	r31, 0x00	; 0
    4c0e:	80 81       	ld	r24, Z
    4c10:	8a 60       	ori	r24, 0x0A	; 10
    4c12:	80 83       	st	Z, r24
    4c14:	80 ed       	ldi	r24, 0xD0	; 208
    4c16:	97 e0       	ldi	r25, 0x07	; 7
    4c18:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    4c1c:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>

#if __AVR__
    // Init the PRNG
    if (NODETYPE != ENDDEVICE)
        srand(TCNT(TICKTIMER));
    4c20:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
    4c24:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    4c28:	0c 94 9a 2f 	jmp	0x5f34	; 0x5f34 <srand>

00004c2c <__vector_32>:
#if __AVR__
/**
   @brief Timer interrupt service routine.
*/
ISR(TICKVECT)
{
    4c2c:	1f 92       	push	r1
    4c2e:	0f 92       	push	r0
    4c30:	0f b6       	in	r0, 0x3f	; 63
    4c32:	0f 92       	push	r0
    4c34:	11 24       	eor	r1, r1
    4c36:	0b b6       	in	r0, 0x3b	; 59
    4c38:	0f 92       	push	r0
    4c3a:	ff 92       	push	r15
    4c3c:	0f 93       	push	r16
    4c3e:	1f 93       	push	r17
    4c40:	2f 93       	push	r18
    4c42:	3f 93       	push	r19
    4c44:	4f 93       	push	r20
    4c46:	5f 93       	push	r21
    4c48:	6f 93       	push	r22
    4c4a:	7f 93       	push	r23
    4c4c:	8f 93       	push	r24
    4c4e:	9f 93       	push	r25
    4c50:	af 93       	push	r26
    4c52:	bf 93       	push	r27
    4c54:	ef 93       	push	r30
    4c56:	ff 93       	push	r31
    4c58:	cf 93       	push	r28
    4c5a:	df 93       	push	r29
    4c5c:	00 d0       	rcall	.+0      	; 0x4c5e <__vector_32+0x32>
    4c5e:	1f 92       	push	r1
    4c60:	cd b7       	in	r28, 0x3d	; 61
    4c62:	de b7       	in	r29, 0x3e	; 62
    u8 i;
    event_object_t event;

    tickTimer++;
    4c64:	80 91 69 06 	lds	r24, 0x0669	; 0x800669 <tickTimer>
    4c68:	90 91 6a 06 	lds	r25, 0x066A	; 0x80066a <tickTimer+0x1>
    4c6c:	01 96       	adiw	r24, 0x01	; 1
    4c6e:	90 93 6a 06 	sts	0x066A, r25	; 0x80066a <tickTimer+0x1>
    4c72:	80 93 69 06 	sts	0x0669, r24	; 0x800669 <tickTimer>
#endif
    
    // Decrement second timer
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        if (!--secondTimer)
    4c76:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <secondTimer>
    4c7a:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <secondTimer+0x1>
    4c7e:	01 97       	sbiw	r24, 0x01	; 1
    4c80:	49 f0       	breq	.+18     	; 0x4c94 <__vector_32+0x68>
    4c82:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <secondTimer+0x1>
    4c86:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <secondTimer>
    4c8a:	00 ed       	ldi	r16, 0xD0	; 208
    4c8c:	16 e0       	ldi	r17, 0x06	; 6
        {
            // this timer event is live, check for expiration
            if (!--timerEvents[i].time)
            {
                // Timer expired, queue the associated callback
                event.event = MAC_EVENT_TIMER;  // Event type, see event_t for details.
    4c8e:	96 e1       	ldi	r25, 0x16	; 22
    4c90:	f9 2e       	mov	r15, r25
    4c92:	24 c0       	rjmp	.+72     	; 0x4cdc <__vector_32+0xb0>
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        if (!--secondTimer)
        {
            // Reset one second timer
            secondTimer = 1000/MS_PER_TICK;
    4c94:	84 ef       	ldi	r24, 0xF4	; 244
    4c96:	91 e0       	ldi	r25, 0x01	; 1
    4c98:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <secondTimer+0x1>
    4c9c:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <secondTimer>
    4ca0:	0c e6       	ldi	r16, 0x6C	; 108
    4ca2:	16 e0       	ldi	r17, 0x06	; 6
                {
                    // This timer is active, check for expiration
                    if (!--longTimerEvents[i].time)
                    {
                        // Timer expired, queue the associated callback
                        event.event = MAC_EVENT_TIMER;  // Event type, see event_t for details.
    4ca4:	86 e1       	ldi	r24, 0x16	; 22
    4ca6:	f8 2e       	mov	r15, r24
            // Reset one second timer
            secondTimer = 1000/MS_PER_TICK;
            // Handle the one-second timers
            for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
            {
                if (longTimerEvents[i].time)
    4ca8:	f8 01       	movw	r30, r16
    4caa:	80 81       	ld	r24, Z
    4cac:	91 81       	ldd	r25, Z+1	; 0x01
    4cae:	00 97       	sbiw	r24, 0x00	; 0
    4cb0:	71 f0       	breq	.+28     	; 0x4cce <__vector_32+0xa2>
                {
                    // This timer is active, check for expiration
                    if (!--longTimerEvents[i].time)
    4cb2:	01 97       	sbiw	r24, 0x01	; 1
    4cb4:	91 83       	std	Z+1, r25	; 0x01
    4cb6:	80 83       	st	Z, r24
    4cb8:	89 2b       	or	r24, r25
    4cba:	49 f4       	brne	.+18     	; 0x4cce <__vector_32+0xa2>
                    {
                        // Timer expired, queue the associated callback
                        event.event = MAC_EVENT_TIMER;  // Event type, see event_t for details.
    4cbc:	f9 82       	std	Y+1, r15	; 0x01
                        event.data = (void(*)(void))longTimerEvents[i].callback;
    4cbe:	83 81       	ldd	r24, Z+3	; 0x03
    4cc0:	94 81       	ldd	r25, Z+4	; 0x04
    4cc2:	9b 83       	std	Y+3, r25	; 0x03
    4cc4:	8a 83       	std	Y+2, r24	; 0x02
                        mac_put_event(&event);
    4cc6:	ce 01       	movw	r24, r28
    4cc8:	01 96       	adiw	r24, 0x01	; 1
    4cca:	0e 94 88 21 	call	0x4310	; 0x4310 <mac_put_event>
    4cce:	0b 5f       	subi	r16, 0xFB	; 251
    4cd0:	1f 4f       	sbci	r17, 0xFF	; 255
        if (!--secondTimer)
        {
            // Reset one second timer
            secondTimer = 1000/MS_PER_TICK;
            // Handle the one-second timers
            for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
    4cd2:	f6 e0       	ldi	r31, 0x06	; 6
    4cd4:	00 3d       	cpi	r16, 0xD0	; 208
    4cd6:	1f 07       	cpc	r17, r31
    4cd8:	39 f7       	brne	.-50     	; 0x4ca8 <__vector_32+0x7c>
    4cda:	d7 cf       	rjmp	.-82     	; 0x4c8a <__vector_32+0x5e>
    }

    // check for pending events
    for (i=0;i<TIMER_EVENTS_MAX;i++)
    {
        if (timerEvents[i].time)
    4cdc:	f8 01       	movw	r30, r16
    4cde:	80 81       	ld	r24, Z
    4ce0:	91 81       	ldd	r25, Z+1	; 0x01
    4ce2:	00 97       	sbiw	r24, 0x00	; 0
    4ce4:	71 f0       	breq	.+28     	; 0x4d02 <__vector_32+0xd6>
        {
            // this timer event is live, check for expiration
            if (!--timerEvents[i].time)
    4ce6:	01 97       	sbiw	r24, 0x01	; 1
    4ce8:	91 83       	std	Z+1, r25	; 0x01
    4cea:	80 83       	st	Z, r24
    4cec:	89 2b       	or	r24, r25
    4cee:	49 f4       	brne	.+18     	; 0x4d02 <__vector_32+0xd6>
            {
                // Timer expired, queue the associated callback
                event.event = MAC_EVENT_TIMER;  // Event type, see event_t for details.
    4cf0:	f9 82       	std	Y+1, r15	; 0x01
                event.data = (void (*)(void))(timerEvents[i].callback);
    4cf2:	83 81       	ldd	r24, Z+3	; 0x03
    4cf4:	94 81       	ldd	r25, Z+4	; 0x04
    4cf6:	9b 83       	std	Y+3, r25	; 0x03
    4cf8:	8a 83       	std	Y+2, r24	; 0x02
                mac_put_event(&event);
    4cfa:	ce 01       	movw	r24, r28
    4cfc:	01 96       	adiw	r24, 0x01	; 1
    4cfe:	0e 94 88 21 	call	0x4310	; 0x4310 <mac_put_event>
    4d02:	0b 5f       	subi	r16, 0xFB	; 251
    4d04:	1f 4f       	sbci	r17, 0xFF	; 255
            }
        }
    }

    // check for pending events
    for (i=0;i<TIMER_EVENTS_MAX;i++)
    4d06:	f7 e0       	ldi	r31, 0x07	; 7
    4d08:	04 33       	cpi	r16, 0x34	; 52
    4d0a:	1f 07       	cpc	r17, r31
    4d0c:	39 f7       	brne	.-50     	; 0x4cdc <__vector_32+0xb0>
                event.data = (void (*)(void))(timerEvents[i].callback);
                mac_put_event(&event);
            }
        }
    }
}
    4d0e:	0f 90       	pop	r0
    4d10:	0f 90       	pop	r0
    4d12:	0f 90       	pop	r0
    4d14:	df 91       	pop	r29
    4d16:	cf 91       	pop	r28
    4d18:	ff 91       	pop	r31
    4d1a:	ef 91       	pop	r30
    4d1c:	bf 91       	pop	r27
    4d1e:	af 91       	pop	r26
    4d20:	9f 91       	pop	r25
    4d22:	8f 91       	pop	r24
    4d24:	7f 91       	pop	r23
    4d26:	6f 91       	pop	r22
    4d28:	5f 91       	pop	r21
    4d2a:	4f 91       	pop	r20
    4d2c:	3f 91       	pop	r19
    4d2e:	2f 91       	pop	r18
    4d30:	1f 91       	pop	r17
    4d32:	0f 91       	pop	r16
    4d34:	ff 90       	pop	r15
    4d36:	0f 90       	pop	r0
    4d38:	0b be       	out	0x3b, r0	; 59
    4d3a:	0f 90       	pop	r0
    4d3c:	0f be       	out	0x3f, r0	; 63
    4d3e:	0f 90       	pop	r0
    4d40:	1f 90       	pop	r1
    4d42:	18 95       	reti

00004d44 <__vector_35>:

    for(i = 0; i < uiDelay; i++)
    {
        Timer_delay_us ( 1000 );
    }
}
    4d44:	1f 92       	push	r1
    4d46:	0f 92       	push	r0
    4d48:	0f b6       	in	r0, 0x3f	; 63
    4d4a:	0f 92       	push	r0
    4d4c:	11 24       	eor	r1, r1
    4d4e:	8f 93       	push	r24
    4d50:	82 e0       	ldi	r24, 0x02	; 2
    4d52:	80 93 35 07 	sts	0x0735, r24	; 0x800735 <GenericTimerFlag>
    4d56:	8f 91       	pop	r24
    4d58:	0f 90       	pop	r0
    4d5a:	0f be       	out	0x3f, r0	; 63
    4d5c:	0f 90       	pop	r0
    4d5e:	1f 90       	pop	r1
    4d60:	18 95       	reti

00004d62 <__vector_12>:

/** \brief Watchdog Timer Interrupt Service Routine.
 */
ISR ( WDT_vect )
{    
    4d62:	1f 92       	push	r1
    4d64:	0f 92       	push	r0
    4d66:	0f b6       	in	r0, 0x3f	; 63
    4d68:	0f 92       	push	r0
    4d6a:	11 24       	eor	r1, r1
    4d6c:	8f 93       	push	r24
    WDTFlag = 1;
    4d6e:	81 e0       	ldi	r24, 0x01	; 1
    4d70:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <WDTFlag>
}
    4d74:	8f 91       	pop	r24
    4d76:	0f 90       	pop	r0
    4d78:	0f be       	out	0x3f, r0	; 63
    4d7a:	0f 90       	pop	r0
    4d7c:	1f 90       	pop	r1
    4d7e:	18 95       	reti

00004d80 <WaitForMachine>:



void WaitForMachine(void)
{
	ucMachineWait = MACHINE_TIME_OUT;
    4d80:	81 e0       	ldi	r24, 0x01	; 1
    4d82:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <ucMachineWait>
    4d86:	08 95       	ret

00004d88 <InitTimerZero>:


void InitTimerZero(void)
{
//	TCCR0B = (1<<CS02) | (1<<CS00);	//set prescaler to 1024
TIFR0 = 2;//1<<TOV0;					//clear TOV0 / clear interrupt
    4d88:	82 e0       	ldi	r24, 0x02	; 2
    4d8a:	85 bb       	out	0x15, r24	; 21
TIMSK0 = 2;//1<<TOIE0;				//enable timer0 overflow interrupt
    4d8c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
TCNT0 = 0;//16;
    4d90:	16 bc       	out	0x26, r1	; 38
ucTimerCount = 0;
    4d92:	10 92 bf 0c 	sts	0x0CBF, r1	; 0x800cbf <ucTimerCount>
    4d96:	08 95       	ret

00004d98 <StopTimerZero>:
}


void StopTimerZero(void)
{
TCCR0B = 0;//~(1<<CS02) | ~(1<<CS01) | ~(1<<CS00);	//set prescaler to zero
    4d98:	15 bc       	out	0x25, r1	; 37
    4d9a:	08 95       	ret

00004d9c <StartTimerZero>:
}

/* set timer zero to 5 milisecond resolution and start.*/
void StartTimerZero(void)
{
OCR0A = 78;
    4d9c:	8e e4       	ldi	r24, 0x4E	; 78
    4d9e:	87 bd       	out	0x27, r24	; 39
TCCR0A = 2;
    4da0:	82 e0       	ldi	r24, 0x02	; 2
    4da2:	84 bd       	out	0x24, r24	; 36
TCCR0B = (1<<CS02) | (1<<CS00);	//set prescaler to 1024
    4da4:	85 e0       	ldi	r24, 0x05	; 5
    4da6:	85 bd       	out	0x25, r24	; 37
    4da8:	08 95       	ret

00004daa <__vector_21>:
}

ISR(TIMER0_COMPA_vect)
{
    4daa:	1f 92       	push	r1
    4dac:	0f 92       	push	r0
    4dae:	0f b6       	in	r0, 0x3f	; 63
    4db0:	0f 92       	push	r0
    4db2:	11 24       	eor	r1, r1
    4db4:	8f 93       	push	r24
ucTimerCount++;
    4db6:	80 91 bf 0c 	lds	r24, 0x0CBF	; 0x800cbf <ucTimerCount>
    4dba:	8f 5f       	subi	r24, 0xFF	; 255
    4dbc:	80 93 bf 0c 	sts	0x0CBF, r24	; 0x800cbf <ucTimerCount>

}
    4dc0:	8f 91       	pop	r24
    4dc2:	0f 90       	pop	r0
    4dc4:	0f be       	out	0x3f, r0	; 63
    4dc6:	0f 90       	pop	r0
    4dc8:	1f 90       	pop	r1
    4dca:	18 95       	reti

00004dcc <SetDefaultMachineSetup>:
{
}
*/

void SetDefaultMachineSetup(void)
{
    4dcc:	08 95       	ret

00004dce <get_from_circ_buf>:
    else
    {
        ucData = ucData - 10 + 'A';
    }
    return ucData;
}
    4dce:	fc 01       	movw	r30, r24
    4dd0:	91 81       	ldd	r25, Z+1	; 0x01
    4dd2:	df 01       	movw	r26, r30
    4dd4:	a9 0f       	add	r26, r25
    4dd6:	b1 1d       	adc	r27, r1
    4dd8:	12 96       	adiw	r26, 0x02	; 2
    4dda:	2c 91       	ld	r18, X
    4ddc:	80 81       	ld	r24, Z
    4dde:	98 17       	cp	r25, r24
    4de0:	31 f0       	breq	.+12     	; 0x4dee <get_from_circ_buf+0x20>
    4de2:	9f 5f       	subi	r25, 0xFF	; 255
    4de4:	97 fd       	sbrc	r25, 7
    4de6:	90 e0       	ldi	r25, 0x00	; 0
    4de8:	91 83       	std	Z+1, r25	; 0x01
    4dea:	82 2f       	mov	r24, r18
    4dec:	08 95       	ret
    4dee:	8f ef       	ldi	r24, 0xFF	; 255
    4df0:	08 95       	ret

00004df2 <init_rx_buf>:
    4df2:	ea e3       	ldi	r30, 0x3A	; 58
    4df4:	f7 e0       	ldi	r31, 0x07	; 7
    4df6:	11 82       	std	Z+1, r1	; 0x01
    4df8:	10 82       	st	Z, r1
    4dfa:	08 95       	ret

00004dfc <serial_init>:
    4dfc:	ea e3       	ldi	r30, 0x3A	; 58
    4dfe:	f7 e0       	ldi	r31, 0x07	; 7
    4e00:	11 82       	std	Z+1, r1	; 0x01
    4e02:	10 82       	st	Z, r1
    4e04:	ec eb       	ldi	r30, 0xBC	; 188
    4e06:	f7 e0       	ldi	r31, 0x07	; 7
    4e08:	11 82       	std	Z+1, r1	; 0x01
    4e0a:	10 82       	st	Z, r1
    4e0c:	28 e9       	ldi	r18, 0x98	; 152
    4e0e:	20 93 c9 00 	sts	0x00C9, r18	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    4e12:	26 e0       	ldi	r18, 0x06	; 6
    4e14:	20 93 ca 00 	sts	0x00CA, r18	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
    4e18:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    4e1c:	27 e6       	ldi	r18, 0x67	; 103
    4e1e:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    4e22:	90 93 39 07 	sts	0x0739, r25	; 0x800739 <rx_handler+0x1>
    4e26:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <rx_handler>
    4e2a:	08 95       	ret

00004e2c <serial_putchar>:
    4e2c:	90 91 36 07 	lds	r25, 0x0736	; 0x800736 <pause>
    4e30:	91 11       	cpse	r25, r1
    4e32:	2a c0       	rjmp	.+84     	; 0x4e88 <serial_putchar+0x5c>
    4e34:	78 94       	sei
    4e36:	90 91 bc 07 	lds	r25, 0x07BC	; 0x8007bc <txbuf>
    4e3a:	9f 5f       	subi	r25, 0xFF	; 255
    4e3c:	97 fd       	sbrc	r25, 7
    4e3e:	90 e0       	ldi	r25, 0x00	; 0
    4e40:	30 91 37 07 	lds	r19, 0x0737	; 0x800737 <rx>
    4e44:	20 91 bd 07 	lds	r18, 0x07BD	; 0x8007bd <txbuf+0x1>
    4e48:	92 13       	cpse	r25, r18
    4e4a:	03 c0       	rjmp	.+6      	; 0x4e52 <serial_putchar+0x26>
    4e4c:	33 23       	and	r19, r19
    4e4e:	d1 f3       	breq	.-12     	; 0x4e44 <serial_putchar+0x18>
    4e50:	08 c0       	rjmp	.+16     	; 0x4e62 <serial_putchar+0x36>
    4e52:	e0 91 bc 07 	lds	r30, 0x07BC	; 0x8007bc <txbuf>
    4e56:	f0 e0       	ldi	r31, 0x00	; 0
    4e58:	e4 54       	subi	r30, 0x44	; 68
    4e5a:	f8 4f       	sbci	r31, 0xF8	; 248
    4e5c:	82 83       	std	Z+2, r24	; 0x02
    4e5e:	90 93 bc 07 	sts	0x07BC, r25	; 0x8007bc <txbuf>
    4e62:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    4e66:	85 fd       	sbrc	r24, 5
    4e68:	0f c0       	rjmp	.+30     	; 0x4e88 <serial_putchar+0x5c>
    4e6a:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    4e6e:	85 ff       	sbrs	r24, 5
    4e70:	fc cf       	rjmp	.-8      	; 0x4e6a <serial_putchar+0x3e>
    4e72:	8c eb       	ldi	r24, 0xBC	; 188
    4e74:	97 e0       	ldi	r25, 0x07	; 7
    4e76:	0e 94 e7 26 	call	0x4dce	; 0x4dce <get_from_circ_buf>
    4e7a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    4e7e:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    4e82:	80 62       	ori	r24, 0x20	; 32
    4e84:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    4e88:	08 95       	ret

00004e8a <rx_buf_count>:
    4e8a:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <rxbuf>
    4e8e:	90 e0       	ldi	r25, 0x00	; 0
    4e90:	20 91 3b 07 	lds	r18, 0x073B	; 0x80073b <rxbuf+0x1>
    4e94:	82 1b       	sub	r24, r18
    4e96:	91 09       	sbc	r25, r1
    4e98:	97 ff       	sbrs	r25, 7
    4e9a:	02 c0       	rjmp	.+4      	; 0x4ea0 <rx_buf_count+0x16>
    4e9c:	80 58       	subi	r24, 0x80	; 128
    4e9e:	9f 4f       	sbci	r25, 0xFF	; 255
    4ea0:	08 95       	ret

00004ea2 <serial_getchar>:
    4ea2:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <rxbuf>
    4ea6:	90 e0       	ldi	r25, 0x00	; 0
    4ea8:	20 91 3b 07 	lds	r18, 0x073B	; 0x80073b <rxbuf+0x1>
    4eac:	82 1b       	sub	r24, r18
    4eae:	91 09       	sbc	r25, r1
    4eb0:	97 ff       	sbrs	r25, 7
    4eb2:	02 c0       	rjmp	.+4      	; 0x4eb8 <serial_getchar+0x16>
    4eb4:	80 58       	subi	r24, 0x80	; 128
    4eb6:	9f 4f       	sbci	r25, 0xFF	; 255
    4eb8:	88 23       	and	r24, r24
    4eba:	99 f3       	breq	.-26     	; 0x4ea2 <serial_getchar>
    4ebc:	8a e3       	ldi	r24, 0x3A	; 58
    4ebe:	97 e0       	ldi	r25, 0x07	; 7
    4ec0:	0c 94 e7 26 	jmp	0x4dce	; 0x4dce <get_from_circ_buf>

00004ec4 <__vector_36>:
    4ec4:	1f 92       	push	r1
    4ec6:	0f 92       	push	r0
    4ec8:	0f b6       	in	r0, 0x3f	; 63
    4eca:	0f 92       	push	r0
    4ecc:	11 24       	eor	r1, r1
    4ece:	0b b6       	in	r0, 0x3b	; 59
    4ed0:	0f 92       	push	r0
    4ed2:	2f 93       	push	r18
    4ed4:	3f 93       	push	r19
    4ed6:	4f 93       	push	r20
    4ed8:	5f 93       	push	r21
    4eda:	6f 93       	push	r22
    4edc:	7f 93       	push	r23
    4ede:	8f 93       	push	r24
    4ee0:	9f 93       	push	r25
    4ee2:	af 93       	push	r26
    4ee4:	bf 93       	push	r27
    4ee6:	ef 93       	push	r30
    4ee8:	ff 93       	push	r31
    4eea:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    4eee:	91 e0       	ldi	r25, 0x01	; 1
    4ef0:	90 93 37 07 	sts	0x0737, r25	; 0x800737 <rx>
    4ef4:	90 91 3a 07 	lds	r25, 0x073A	; 0x80073a <rxbuf>
    4ef8:	9f 5f       	subi	r25, 0xFF	; 255
    4efa:	97 fd       	sbrc	r25, 7
    4efc:	90 e0       	ldi	r25, 0x00	; 0
    4efe:	20 91 3b 07 	lds	r18, 0x073B	; 0x80073b <rxbuf+0x1>
    4f02:	92 17       	cp	r25, r18
    4f04:	41 f0       	breq	.+16     	; 0x4f16 <__vector_36+0x52>
    4f06:	e0 91 3a 07 	lds	r30, 0x073A	; 0x80073a <rxbuf>
    4f0a:	f0 e0       	ldi	r31, 0x00	; 0
    4f0c:	e6 5c       	subi	r30, 0xC6	; 198
    4f0e:	f8 4f       	sbci	r31, 0xF8	; 248
    4f10:	82 83       	std	Z+2, r24	; 0x02
    4f12:	90 93 3a 07 	sts	0x073A, r25	; 0x80073a <rxbuf>
    4f16:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <rx>
    4f1a:	e0 91 38 07 	lds	r30, 0x0738	; 0x800738 <rx_handler>
    4f1e:	f0 91 39 07 	lds	r31, 0x0739	; 0x800739 <rx_handler+0x1>
    4f22:	30 97       	sbiw	r30, 0x00	; 0
    4f24:	09 f0       	breq	.+2      	; 0x4f28 <__vector_36+0x64>
    4f26:	09 95       	icall
    4f28:	ff 91       	pop	r31
    4f2a:	ef 91       	pop	r30
    4f2c:	bf 91       	pop	r27
    4f2e:	af 91       	pop	r26
    4f30:	9f 91       	pop	r25
    4f32:	8f 91       	pop	r24
    4f34:	7f 91       	pop	r23
    4f36:	6f 91       	pop	r22
    4f38:	5f 91       	pop	r21
    4f3a:	4f 91       	pop	r20
    4f3c:	3f 91       	pop	r19
    4f3e:	2f 91       	pop	r18
    4f40:	0f 90       	pop	r0
    4f42:	0b be       	out	0x3b, r0	; 59
    4f44:	0f 90       	pop	r0
    4f46:	0f be       	out	0x3f, r0	; 63
    4f48:	0f 90       	pop	r0
    4f4a:	1f 90       	pop	r1
    4f4c:	18 95       	reti

00004f4e <__vector_37>:
    4f4e:	1f 92       	push	r1
    4f50:	0f 92       	push	r0
    4f52:	0f b6       	in	r0, 0x3f	; 63
    4f54:	0f 92       	push	r0
    4f56:	11 24       	eor	r1, r1
    4f58:	0b b6       	in	r0, 0x3b	; 59
    4f5a:	0f 92       	push	r0
    4f5c:	2f 93       	push	r18
    4f5e:	3f 93       	push	r19
    4f60:	4f 93       	push	r20
    4f62:	5f 93       	push	r21
    4f64:	6f 93       	push	r22
    4f66:	7f 93       	push	r23
    4f68:	8f 93       	push	r24
    4f6a:	9f 93       	push	r25
    4f6c:	af 93       	push	r26
    4f6e:	bf 93       	push	r27
    4f70:	ef 93       	push	r30
    4f72:	ff 93       	push	r31
    4f74:	90 91 bc 07 	lds	r25, 0x07BC	; 0x8007bc <txbuf>
    4f78:	80 91 bd 07 	lds	r24, 0x07BD	; 0x8007bd <txbuf+0x1>
    4f7c:	98 17       	cp	r25, r24
    4f7e:	39 f0       	breq	.+14     	; 0x4f8e <__vector_37+0x40>
    4f80:	8c eb       	ldi	r24, 0xBC	; 188
    4f82:	97 e0       	ldi	r25, 0x07	; 7
    4f84:	0e 94 e7 26 	call	0x4dce	; 0x4dce <get_from_circ_buf>
    4f88:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    4f8c:	05 c0       	rjmp	.+10     	; 0x4f98 <__vector_37+0x4a>
    4f8e:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    4f92:	8f 7d       	andi	r24, 0xDF	; 223
    4f94:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    4f98:	ff 91       	pop	r31
    4f9a:	ef 91       	pop	r30
    4f9c:	bf 91       	pop	r27
    4f9e:	af 91       	pop	r26
    4fa0:	9f 91       	pop	r25
    4fa2:	8f 91       	pop	r24
    4fa4:	7f 91       	pop	r23
    4fa6:	6f 91       	pop	r22
    4fa8:	5f 91       	pop	r21
    4faa:	4f 91       	pop	r20
    4fac:	3f 91       	pop	r19
    4fae:	2f 91       	pop	r18
    4fb0:	0f 90       	pop	r0
    4fb2:	0b be       	out	0x3b, r0	; 59
    4fb4:	0f 90       	pop	r0
    4fb6:	0f be       	out	0x3f, r0	; 63
    4fb8:	0f 90       	pop	r0
    4fba:	1f 90       	pop	r1
    4fbc:	18 95       	reti

00004fbe <Ascii_to_nible>:
 * \param ucData is the ASCII value to be converted.
 *
 * \return ucData is the nible value.
**/
u8 Ascii_to_nible ( u8 ucData )
{
    4fbe:	98 2f       	mov	r25, r24
    if ((ucData <= '9' ) && (ucData >= '0')) 
    4fc0:	80 ed       	ldi	r24, 0xD0	; 208
    4fc2:	89 0f       	add	r24, r25
    4fc4:	8a 30       	cpi	r24, 0x0A	; 10
    4fc6:	70 f0       	brcs	.+28     	; 0x4fe4 <Ascii_to_nible+0x26>
    {
        ucData -= '0';
    }
    else if ((ucData <= 'F' ) && (ucData >= 'A')) 
    4fc8:	8f eb       	ldi	r24, 0xBF	; 191
    4fca:	89 0f       	add	r24, r25
    4fcc:	86 30       	cpi	r24, 0x06	; 6
    4fce:	10 f4       	brcc	.+4      	; 0x4fd4 <Ascii_to_nible+0x16>
    {
        ucData = ucData -'A' + 10;
    4fd0:	89 ec       	ldi	r24, 0xC9	; 201
    4fd2:	05 c0       	rjmp	.+10     	; 0x4fde <Ascii_to_nible+0x20>
    }
    else if ((ucData <= 'f' ) && (ucData >= 'a')) 
    4fd4:	8f e9       	ldi	r24, 0x9F	; 159
    4fd6:	89 0f       	add	r24, r25
    4fd8:	86 30       	cpi	r24, 0x06	; 6
    4fda:	18 f4       	brcc	.+6      	; 0x4fe2 <Ascii_to_nible+0x24>
    {
        ucData = ucData -'a' + 10;
    4fdc:	89 ea       	ldi	r24, 0xA9	; 169
    4fde:	89 0f       	add	r24, r25
    4fe0:	08 95       	ret
    }
    else 
    {
        ucData = 0;
    4fe2:	80 e0       	ldi	r24, 0x00	; 0
    }
    return ucData;
}
    4fe4:	08 95       	ret

00004fe6 <vfprintf>:
    4fe6:	2f 92       	push	r2
    4fe8:	3f 92       	push	r3
    4fea:	4f 92       	push	r4
    4fec:	5f 92       	push	r5
    4fee:	6f 92       	push	r6
    4ff0:	7f 92       	push	r7
    4ff2:	8f 92       	push	r8
    4ff4:	9f 92       	push	r9
    4ff6:	af 92       	push	r10
    4ff8:	bf 92       	push	r11
    4ffa:	cf 92       	push	r12
    4ffc:	df 92       	push	r13
    4ffe:	ef 92       	push	r14
    5000:	ff 92       	push	r15
    5002:	0f 93       	push	r16
    5004:	1f 93       	push	r17
    5006:	cf 93       	push	r28
    5008:	df 93       	push	r29
    500a:	cd b7       	in	r28, 0x3d	; 61
    500c:	de b7       	in	r29, 0x3e	; 62
    500e:	63 97       	sbiw	r28, 0x13	; 19
    5010:	0f b6       	in	r0, 0x3f	; 63
    5012:	f8 94       	cli
    5014:	de bf       	out	0x3e, r29	; 62
    5016:	0f be       	out	0x3f, r0	; 63
    5018:	cd bf       	out	0x3d, r28	; 61
    501a:	6c 01       	movw	r12, r24
    501c:	4b 01       	movw	r8, r22
    501e:	2a 01       	movw	r4, r20
    5020:	fc 01       	movw	r30, r24
    5022:	17 82       	std	Z+7, r1	; 0x07
    5024:	16 82       	std	Z+6, r1	; 0x06
    5026:	83 81       	ldd	r24, Z+3	; 0x03
    5028:	81 ff       	sbrs	r24, 1
    502a:	43 c3       	rjmp	.+1670   	; 0x56b2 <vfprintf+0x6cc>
    502c:	ae 01       	movw	r20, r28
    502e:	4f 5f       	subi	r20, 0xFF	; 255
    5030:	5f 4f       	sbci	r21, 0xFF	; 255
    5032:	3a 01       	movw	r6, r20
    5034:	f6 01       	movw	r30, r12
    5036:	93 81       	ldd	r25, Z+3	; 0x03
    5038:	f4 01       	movw	r30, r8
    503a:	93 fd       	sbrc	r25, 3
    503c:	85 91       	lpm	r24, Z+
    503e:	93 ff       	sbrs	r25, 3
    5040:	81 91       	ld	r24, Z+
    5042:	4f 01       	movw	r8, r30
    5044:	88 23       	and	r24, r24
    5046:	09 f4       	brne	.+2      	; 0x504a <vfprintf+0x64>
    5048:	30 c3       	rjmp	.+1632   	; 0x56aa <vfprintf+0x6c4>
    504a:	85 32       	cpi	r24, 0x25	; 37
    504c:	39 f4       	brne	.+14     	; 0x505c <vfprintf+0x76>
    504e:	93 fd       	sbrc	r25, 3
    5050:	85 91       	lpm	r24, Z+
    5052:	93 ff       	sbrs	r25, 3
    5054:	81 91       	ld	r24, Z+
    5056:	4f 01       	movw	r8, r30
    5058:	85 32       	cpi	r24, 0x25	; 37
    505a:	39 f4       	brne	.+14     	; 0x506a <vfprintf+0x84>
    505c:	b6 01       	movw	r22, r12
    505e:	90 e0       	ldi	r25, 0x00	; 0
    5060:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <fputc>
    5064:	52 01       	movw	r10, r4
    5066:	25 01       	movw	r4, r10
    5068:	e5 cf       	rjmp	.-54     	; 0x5034 <vfprintf+0x4e>
    506a:	10 e0       	ldi	r17, 0x00	; 0
    506c:	f1 2c       	mov	r15, r1
    506e:	20 e0       	ldi	r18, 0x00	; 0
    5070:	20 32       	cpi	r18, 0x20	; 32
    5072:	a0 f4       	brcc	.+40     	; 0x509c <vfprintf+0xb6>
    5074:	8b 32       	cpi	r24, 0x2B	; 43
    5076:	69 f0       	breq	.+26     	; 0x5092 <vfprintf+0xac>
    5078:	30 f4       	brcc	.+12     	; 0x5086 <vfprintf+0xa0>
    507a:	80 32       	cpi	r24, 0x20	; 32
    507c:	59 f0       	breq	.+22     	; 0x5094 <vfprintf+0xae>
    507e:	83 32       	cpi	r24, 0x23	; 35
    5080:	69 f4       	brne	.+26     	; 0x509c <vfprintf+0xb6>
    5082:	20 61       	ori	r18, 0x10	; 16
    5084:	2c c0       	rjmp	.+88     	; 0x50de <vfprintf+0xf8>
    5086:	8d 32       	cpi	r24, 0x2D	; 45
    5088:	39 f0       	breq	.+14     	; 0x5098 <vfprintf+0xb2>
    508a:	80 33       	cpi	r24, 0x30	; 48
    508c:	39 f4       	brne	.+14     	; 0x509c <vfprintf+0xb6>
    508e:	21 60       	ori	r18, 0x01	; 1
    5090:	26 c0       	rjmp	.+76     	; 0x50de <vfprintf+0xf8>
    5092:	22 60       	ori	r18, 0x02	; 2
    5094:	24 60       	ori	r18, 0x04	; 4
    5096:	23 c0       	rjmp	.+70     	; 0x50de <vfprintf+0xf8>
    5098:	28 60       	ori	r18, 0x08	; 8
    509a:	21 c0       	rjmp	.+66     	; 0x50de <vfprintf+0xf8>
    509c:	27 fd       	sbrc	r18, 7
    509e:	27 c0       	rjmp	.+78     	; 0x50ee <vfprintf+0x108>
    50a0:	30 ed       	ldi	r19, 0xD0	; 208
    50a2:	38 0f       	add	r19, r24
    50a4:	3a 30       	cpi	r19, 0x0A	; 10
    50a6:	78 f4       	brcc	.+30     	; 0x50c6 <vfprintf+0xe0>
    50a8:	26 ff       	sbrs	r18, 6
    50aa:	06 c0       	rjmp	.+12     	; 0x50b8 <vfprintf+0xd2>
    50ac:	fa e0       	ldi	r31, 0x0A	; 10
    50ae:	1f 9f       	mul	r17, r31
    50b0:	30 0d       	add	r19, r0
    50b2:	11 24       	eor	r1, r1
    50b4:	13 2f       	mov	r17, r19
    50b6:	13 c0       	rjmp	.+38     	; 0x50de <vfprintf+0xf8>
    50b8:	4a e0       	ldi	r20, 0x0A	; 10
    50ba:	f4 9e       	mul	r15, r20
    50bc:	30 0d       	add	r19, r0
    50be:	11 24       	eor	r1, r1
    50c0:	f3 2e       	mov	r15, r19
    50c2:	20 62       	ori	r18, 0x20	; 32
    50c4:	0c c0       	rjmp	.+24     	; 0x50de <vfprintf+0xf8>
    50c6:	8e 32       	cpi	r24, 0x2E	; 46
    50c8:	21 f4       	brne	.+8      	; 0x50d2 <vfprintf+0xec>
    50ca:	26 fd       	sbrc	r18, 6
    50cc:	ee c2       	rjmp	.+1500   	; 0x56aa <vfprintf+0x6c4>
    50ce:	20 64       	ori	r18, 0x40	; 64
    50d0:	06 c0       	rjmp	.+12     	; 0x50de <vfprintf+0xf8>
    50d2:	8c 36       	cpi	r24, 0x6C	; 108
    50d4:	11 f4       	brne	.+4      	; 0x50da <vfprintf+0xf4>
    50d6:	20 68       	ori	r18, 0x80	; 128
    50d8:	02 c0       	rjmp	.+4      	; 0x50de <vfprintf+0xf8>
    50da:	88 36       	cpi	r24, 0x68	; 104
    50dc:	41 f4       	brne	.+16     	; 0x50ee <vfprintf+0x108>
    50de:	f4 01       	movw	r30, r8
    50e0:	93 fd       	sbrc	r25, 3
    50e2:	85 91       	lpm	r24, Z+
    50e4:	93 ff       	sbrs	r25, 3
    50e6:	81 91       	ld	r24, Z+
    50e8:	4f 01       	movw	r8, r30
    50ea:	81 11       	cpse	r24, r1
    50ec:	c1 cf       	rjmp	.-126    	; 0x5070 <vfprintf+0x8a>
    50ee:	9b eb       	ldi	r25, 0xBB	; 187
    50f0:	98 0f       	add	r25, r24
    50f2:	93 30       	cpi	r25, 0x03	; 3
    50f4:	18 f4       	brcc	.+6      	; 0x50fc <vfprintf+0x116>
    50f6:	20 61       	ori	r18, 0x10	; 16
    50f8:	80 5e       	subi	r24, 0xE0	; 224
    50fa:	06 c0       	rjmp	.+12     	; 0x5108 <vfprintf+0x122>
    50fc:	9b e9       	ldi	r25, 0x9B	; 155
    50fe:	98 0f       	add	r25, r24
    5100:	93 30       	cpi	r25, 0x03	; 3
    5102:	08 f0       	brcs	.+2      	; 0x5106 <vfprintf+0x120>
    5104:	71 c1       	rjmp	.+738    	; 0x53e8 <vfprintf+0x402>
    5106:	2f 7e       	andi	r18, 0xEF	; 239
    5108:	26 ff       	sbrs	r18, 6
    510a:	16 e0       	ldi	r17, 0x06	; 6
    510c:	2f 73       	andi	r18, 0x3F	; 63
    510e:	32 2e       	mov	r3, r18
    5110:	85 36       	cpi	r24, 0x65	; 101
    5112:	19 f4       	brne	.+6      	; 0x511a <vfprintf+0x134>
    5114:	20 64       	ori	r18, 0x40	; 64
    5116:	32 2e       	mov	r3, r18
    5118:	08 c0       	rjmp	.+16     	; 0x512a <vfprintf+0x144>
    511a:	86 36       	cpi	r24, 0x66	; 102
    511c:	21 f4       	brne	.+8      	; 0x5126 <vfprintf+0x140>
    511e:	f2 2f       	mov	r31, r18
    5120:	f0 68       	ori	r31, 0x80	; 128
    5122:	3f 2e       	mov	r3, r31
    5124:	02 c0       	rjmp	.+4      	; 0x512a <vfprintf+0x144>
    5126:	11 11       	cpse	r17, r1
    5128:	11 50       	subi	r17, 0x01	; 1
    512a:	37 fe       	sbrs	r3, 7
    512c:	07 c0       	rjmp	.+14     	; 0x513c <vfprintf+0x156>
    512e:	1c 33       	cpi	r17, 0x3C	; 60
    5130:	50 f4       	brcc	.+20     	; 0x5146 <vfprintf+0x160>
    5132:	ee 24       	eor	r14, r14
    5134:	e3 94       	inc	r14
    5136:	e1 0e       	add	r14, r17
    5138:	27 e0       	ldi	r18, 0x07	; 7
    513a:	0b c0       	rjmp	.+22     	; 0x5152 <vfprintf+0x16c>
    513c:	18 30       	cpi	r17, 0x08	; 8
    513e:	38 f0       	brcs	.+14     	; 0x514e <vfprintf+0x168>
    5140:	27 e0       	ldi	r18, 0x07	; 7
    5142:	17 e0       	ldi	r17, 0x07	; 7
    5144:	05 c0       	rjmp	.+10     	; 0x5150 <vfprintf+0x16a>
    5146:	27 e0       	ldi	r18, 0x07	; 7
    5148:	4c e3       	ldi	r20, 0x3C	; 60
    514a:	e4 2e       	mov	r14, r20
    514c:	02 c0       	rjmp	.+4      	; 0x5152 <vfprintf+0x16c>
    514e:	21 2f       	mov	r18, r17
    5150:	e1 2c       	mov	r14, r1
    5152:	52 01       	movw	r10, r4
    5154:	44 e0       	ldi	r20, 0x04	; 4
    5156:	a4 0e       	add	r10, r20
    5158:	b1 1c       	adc	r11, r1
    515a:	f2 01       	movw	r30, r4
    515c:	60 81       	ld	r22, Z
    515e:	71 81       	ldd	r23, Z+1	; 0x01
    5160:	82 81       	ldd	r24, Z+2	; 0x02
    5162:	93 81       	ldd	r25, Z+3	; 0x03
    5164:	0e 2d       	mov	r16, r14
    5166:	a3 01       	movw	r20, r6
    5168:	0e 94 ff 30 	call	0x61fe	; 0x61fe <__ftoa_engine>
    516c:	2c 01       	movw	r4, r24
    516e:	09 81       	ldd	r16, Y+1	; 0x01
    5170:	00 ff       	sbrs	r16, 0
    5172:	02 c0       	rjmp	.+4      	; 0x5178 <vfprintf+0x192>
    5174:	03 ff       	sbrs	r16, 3
    5176:	07 c0       	rjmp	.+14     	; 0x5186 <vfprintf+0x1a0>
    5178:	31 fc       	sbrc	r3, 1
    517a:	08 c0       	rjmp	.+16     	; 0x518c <vfprintf+0x1a6>
    517c:	32 fe       	sbrs	r3, 2
    517e:	09 c0       	rjmp	.+18     	; 0x5192 <vfprintf+0x1ac>
    5180:	30 e2       	ldi	r19, 0x20	; 32
    5182:	23 2e       	mov	r2, r19
    5184:	07 c0       	rjmp	.+14     	; 0x5194 <vfprintf+0x1ae>
    5186:	2d e2       	ldi	r18, 0x2D	; 45
    5188:	22 2e       	mov	r2, r18
    518a:	04 c0       	rjmp	.+8      	; 0x5194 <vfprintf+0x1ae>
    518c:	9b e2       	ldi	r25, 0x2B	; 43
    518e:	29 2e       	mov	r2, r25
    5190:	01 c0       	rjmp	.+2      	; 0x5194 <vfprintf+0x1ae>
    5192:	21 2c       	mov	r2, r1
    5194:	80 2f       	mov	r24, r16
    5196:	8c 70       	andi	r24, 0x0C	; 12
    5198:	19 f0       	breq	.+6      	; 0x51a0 <vfprintf+0x1ba>
    519a:	21 10       	cpse	r2, r1
    519c:	68 c2       	rjmp	.+1232   	; 0x566e <vfprintf+0x688>
    519e:	a8 c2       	rjmp	.+1360   	; 0x56f0 <vfprintf+0x70a>
    51a0:	37 fe       	sbrs	r3, 7
    51a2:	0f c0       	rjmp	.+30     	; 0x51c2 <vfprintf+0x1dc>
    51a4:	e4 0c       	add	r14, r4
    51a6:	04 ff       	sbrs	r16, 4
    51a8:	04 c0       	rjmp	.+8      	; 0x51b2 <vfprintf+0x1cc>
    51aa:	8a 81       	ldd	r24, Y+2	; 0x02
    51ac:	81 33       	cpi	r24, 0x31	; 49
    51ae:	09 f4       	brne	.+2      	; 0x51b2 <vfprintf+0x1cc>
    51b0:	ea 94       	dec	r14
    51b2:	1e 14       	cp	r1, r14
    51b4:	74 f5       	brge	.+92     	; 0x5212 <vfprintf+0x22c>
    51b6:	f8 e0       	ldi	r31, 0x08	; 8
    51b8:	fe 15       	cp	r31, r14
    51ba:	78 f5       	brcc	.+94     	; 0x521a <vfprintf+0x234>
    51bc:	88 e0       	ldi	r24, 0x08	; 8
    51be:	e8 2e       	mov	r14, r24
    51c0:	2c c0       	rjmp	.+88     	; 0x521a <vfprintf+0x234>
    51c2:	36 fc       	sbrc	r3, 6
    51c4:	2a c0       	rjmp	.+84     	; 0x521a <vfprintf+0x234>
    51c6:	81 2f       	mov	r24, r17
    51c8:	90 e0       	ldi	r25, 0x00	; 0
    51ca:	84 15       	cp	r24, r4
    51cc:	95 05       	cpc	r25, r5
    51ce:	9c f0       	brlt	.+38     	; 0x51f6 <vfprintf+0x210>
    51d0:	2c ef       	ldi	r18, 0xFC	; 252
    51d2:	42 16       	cp	r4, r18
    51d4:	2f ef       	ldi	r18, 0xFF	; 255
    51d6:	52 06       	cpc	r5, r18
    51d8:	74 f0       	brlt	.+28     	; 0x51f6 <vfprintf+0x210>
    51da:	43 2d       	mov	r20, r3
    51dc:	40 68       	ori	r20, 0x80	; 128
    51de:	34 2e       	mov	r3, r20
    51e0:	0a c0       	rjmp	.+20     	; 0x51f6 <vfprintf+0x210>
    51e2:	e2 e0       	ldi	r30, 0x02	; 2
    51e4:	f0 e0       	ldi	r31, 0x00	; 0
    51e6:	ec 0f       	add	r30, r28
    51e8:	fd 1f       	adc	r31, r29
    51ea:	e1 0f       	add	r30, r17
    51ec:	f1 1d       	adc	r31, r1
    51ee:	80 81       	ld	r24, Z
    51f0:	80 33       	cpi	r24, 0x30	; 48
    51f2:	19 f4       	brne	.+6      	; 0x51fa <vfprintf+0x214>
    51f4:	11 50       	subi	r17, 0x01	; 1
    51f6:	11 11       	cpse	r17, r1
    51f8:	f4 cf       	rjmp	.-24     	; 0x51e2 <vfprintf+0x1fc>
    51fa:	37 fe       	sbrs	r3, 7
    51fc:	0e c0       	rjmp	.+28     	; 0x521a <vfprintf+0x234>
    51fe:	ee 24       	eor	r14, r14
    5200:	e3 94       	inc	r14
    5202:	e1 0e       	add	r14, r17
    5204:	81 2f       	mov	r24, r17
    5206:	90 e0       	ldi	r25, 0x00	; 0
    5208:	48 16       	cp	r4, r24
    520a:	59 06       	cpc	r5, r25
    520c:	2c f4       	brge	.+10     	; 0x5218 <vfprintf+0x232>
    520e:	14 19       	sub	r17, r4
    5210:	04 c0       	rjmp	.+8      	; 0x521a <vfprintf+0x234>
    5212:	ee 24       	eor	r14, r14
    5214:	e3 94       	inc	r14
    5216:	01 c0       	rjmp	.+2      	; 0x521a <vfprintf+0x234>
    5218:	10 e0       	ldi	r17, 0x00	; 0
    521a:	37 fe       	sbrs	r3, 7
    521c:	06 c0       	rjmp	.+12     	; 0x522a <vfprintf+0x244>
    521e:	14 14       	cp	r1, r4
    5220:	15 04       	cpc	r1, r5
    5222:	34 f4       	brge	.+12     	; 0x5230 <vfprintf+0x24a>
    5224:	c2 01       	movw	r24, r4
    5226:	01 96       	adiw	r24, 0x01	; 1
    5228:	05 c0       	rjmp	.+10     	; 0x5234 <vfprintf+0x24e>
    522a:	85 e0       	ldi	r24, 0x05	; 5
    522c:	90 e0       	ldi	r25, 0x00	; 0
    522e:	02 c0       	rjmp	.+4      	; 0x5234 <vfprintf+0x24e>
    5230:	81 e0       	ldi	r24, 0x01	; 1
    5232:	90 e0       	ldi	r25, 0x00	; 0
    5234:	21 10       	cpse	r2, r1
    5236:	01 96       	adiw	r24, 0x01	; 1
    5238:	11 23       	and	r17, r17
    523a:	31 f0       	breq	.+12     	; 0x5248 <vfprintf+0x262>
    523c:	21 2f       	mov	r18, r17
    523e:	30 e0       	ldi	r19, 0x00	; 0
    5240:	2f 5f       	subi	r18, 0xFF	; 255
    5242:	3f 4f       	sbci	r19, 0xFF	; 255
    5244:	82 0f       	add	r24, r18
    5246:	93 1f       	adc	r25, r19
    5248:	2f 2d       	mov	r18, r15
    524a:	30 e0       	ldi	r19, 0x00	; 0
    524c:	82 17       	cp	r24, r18
    524e:	93 07       	cpc	r25, r19
    5250:	14 f4       	brge	.+4      	; 0x5256 <vfprintf+0x270>
    5252:	f8 1a       	sub	r15, r24
    5254:	01 c0       	rjmp	.+2      	; 0x5258 <vfprintf+0x272>
    5256:	f1 2c       	mov	r15, r1
    5258:	83 2d       	mov	r24, r3
    525a:	89 70       	andi	r24, 0x09	; 9
    525c:	49 f4       	brne	.+18     	; 0x5270 <vfprintf+0x28a>
    525e:	ff 20       	and	r15, r15
    5260:	39 f0       	breq	.+14     	; 0x5270 <vfprintf+0x28a>
    5262:	b6 01       	movw	r22, r12
    5264:	80 e2       	ldi	r24, 0x20	; 32
    5266:	90 e0       	ldi	r25, 0x00	; 0
    5268:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <fputc>
    526c:	fa 94       	dec	r15
    526e:	f7 cf       	rjmp	.-18     	; 0x525e <vfprintf+0x278>
    5270:	22 20       	and	r2, r2
    5272:	29 f0       	breq	.+10     	; 0x527e <vfprintf+0x298>
    5274:	b6 01       	movw	r22, r12
    5276:	82 2d       	mov	r24, r2
    5278:	90 e0       	ldi	r25, 0x00	; 0
    527a:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <fputc>
    527e:	33 fc       	sbrc	r3, 3
    5280:	09 c0       	rjmp	.+18     	; 0x5294 <vfprintf+0x2ae>
    5282:	ff 20       	and	r15, r15
    5284:	39 f0       	breq	.+14     	; 0x5294 <vfprintf+0x2ae>
    5286:	b6 01       	movw	r22, r12
    5288:	80 e3       	ldi	r24, 0x30	; 48
    528a:	90 e0       	ldi	r25, 0x00	; 0
    528c:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <fputc>
    5290:	fa 94       	dec	r15
    5292:	f7 cf       	rjmp	.-18     	; 0x5282 <vfprintf+0x29c>
    5294:	37 fe       	sbrs	r3, 7
    5296:	5a c0       	rjmp	.+180    	; 0x534c <vfprintf+0x366>
    5298:	94 2d       	mov	r25, r4
    529a:	85 2d       	mov	r24, r5
    529c:	57 fe       	sbrs	r5, 7
    529e:	02 c0       	rjmp	.+4      	; 0x52a4 <vfprintf+0x2be>
    52a0:	90 e0       	ldi	r25, 0x00	; 0
    52a2:	80 e0       	ldi	r24, 0x00	; 0
    52a4:	29 2e       	mov	r2, r25
    52a6:	38 2e       	mov	r3, r24
    52a8:	20 e0       	ldi	r18, 0x00	; 0
    52aa:	30 e0       	ldi	r19, 0x00	; 0
    52ac:	a2 01       	movw	r20, r4
    52ae:	4e 19       	sub	r20, r14
    52b0:	51 09       	sbc	r21, r1
    52b2:	5d 87       	std	Y+13, r21	; 0x0d
    52b4:	4c 87       	std	Y+12, r20	; 0x0c
    52b6:	a2 01       	movw	r20, r4
    52b8:	42 19       	sub	r20, r2
    52ba:	53 09       	sbc	r21, r3
    52bc:	5f 87       	std	Y+15, r21	; 0x0f
    52be:	4e 87       	std	Y+14, r20	; 0x0e
    52c0:	61 2f       	mov	r22, r17
    52c2:	70 e0       	ldi	r23, 0x00	; 0
    52c4:	44 27       	eor	r20, r20
    52c6:	55 27       	eor	r21, r21
    52c8:	46 1b       	sub	r20, r22
    52ca:	57 0b       	sbc	r21, r23
    52cc:	59 8b       	std	Y+17, r21	; 0x11
    52ce:	48 8b       	std	Y+16, r20	; 0x10
    52d0:	5f ef       	ldi	r21, 0xFF	; 255
    52d2:	25 16       	cp	r2, r21
    52d4:	35 06       	cpc	r3, r21
    52d6:	49 f4       	brne	.+18     	; 0x52ea <vfprintf+0x304>
    52d8:	b6 01       	movw	r22, r12
    52da:	8e e2       	ldi	r24, 0x2E	; 46
    52dc:	90 e0       	ldi	r25, 0x00	; 0
    52de:	2a 8b       	std	Y+18, r18	; 0x12
    52e0:	3b 8b       	std	Y+19, r19	; 0x13
    52e2:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <fputc>
    52e6:	3b 89       	ldd	r19, Y+19	; 0x13
    52e8:	2a 89       	ldd	r18, Y+18	; 0x12
    52ea:	42 14       	cp	r4, r2
    52ec:	53 04       	cpc	r5, r3
    52ee:	6c f0       	brlt	.+26     	; 0x530a <vfprintf+0x324>
    52f0:	4c 85       	ldd	r20, Y+12	; 0x0c
    52f2:	5d 85       	ldd	r21, Y+13	; 0x0d
    52f4:	42 15       	cp	r20, r2
    52f6:	53 05       	cpc	r21, r3
    52f8:	44 f4       	brge	.+16     	; 0x530a <vfprintf+0x324>
    52fa:	ee 85       	ldd	r30, Y+14	; 0x0e
    52fc:	ff 85       	ldd	r31, Y+15	; 0x0f
    52fe:	e2 0f       	add	r30, r18
    5300:	f3 1f       	adc	r31, r19
    5302:	e6 0d       	add	r30, r6
    5304:	f7 1d       	adc	r31, r7
    5306:	81 81       	ldd	r24, Z+1	; 0x01
    5308:	01 c0       	rjmp	.+2      	; 0x530c <vfprintf+0x326>
    530a:	80 e3       	ldi	r24, 0x30	; 48
    530c:	51 e0       	ldi	r21, 0x01	; 1
    530e:	25 1a       	sub	r2, r21
    5310:	31 08       	sbc	r3, r1
    5312:	2f 5f       	subi	r18, 0xFF	; 255
    5314:	3f 4f       	sbci	r19, 0xFF	; 255
    5316:	48 89       	ldd	r20, Y+16	; 0x10
    5318:	59 89       	ldd	r21, Y+17	; 0x11
    531a:	24 16       	cp	r2, r20
    531c:	35 06       	cpc	r3, r21
    531e:	4c f0       	brlt	.+18     	; 0x5332 <vfprintf+0x34c>
    5320:	b6 01       	movw	r22, r12
    5322:	90 e0       	ldi	r25, 0x00	; 0
    5324:	2a 8b       	std	Y+18, r18	; 0x12
    5326:	3b 8b       	std	Y+19, r19	; 0x13
    5328:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <fputc>
    532c:	2a 89       	ldd	r18, Y+18	; 0x12
    532e:	3b 89       	ldd	r19, Y+19	; 0x13
    5330:	cf cf       	rjmp	.-98     	; 0x52d0 <vfprintf+0x2ea>
    5332:	24 14       	cp	r2, r4
    5334:	35 04       	cpc	r3, r5
    5336:	39 f4       	brne	.+14     	; 0x5346 <vfprintf+0x360>
    5338:	9a 81       	ldd	r25, Y+2	; 0x02
    533a:	96 33       	cpi	r25, 0x36	; 54
    533c:	18 f4       	brcc	.+6      	; 0x5344 <vfprintf+0x35e>
    533e:	95 33       	cpi	r25, 0x35	; 53
    5340:	11 f4       	brne	.+4      	; 0x5346 <vfprintf+0x360>
    5342:	04 ff       	sbrs	r16, 4
    5344:	81 e3       	ldi	r24, 0x31	; 49
    5346:	b6 01       	movw	r22, r12
    5348:	90 e0       	ldi	r25, 0x00	; 0
    534a:	4b c0       	rjmp	.+150    	; 0x53e2 <vfprintf+0x3fc>
    534c:	8a 81       	ldd	r24, Y+2	; 0x02
    534e:	81 33       	cpi	r24, 0x31	; 49
    5350:	09 f0       	breq	.+2      	; 0x5354 <vfprintf+0x36e>
    5352:	0f 7e       	andi	r16, 0xEF	; 239
    5354:	b6 01       	movw	r22, r12
    5356:	90 e0       	ldi	r25, 0x00	; 0
    5358:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <fputc>
    535c:	11 11       	cpse	r17, r1
    535e:	05 c0       	rjmp	.+10     	; 0x536a <vfprintf+0x384>
    5360:	34 fc       	sbrc	r3, 4
    5362:	18 c0       	rjmp	.+48     	; 0x5394 <vfprintf+0x3ae>
    5364:	85 e6       	ldi	r24, 0x65	; 101
    5366:	90 e0       	ldi	r25, 0x00	; 0
    5368:	17 c0       	rjmp	.+46     	; 0x5398 <vfprintf+0x3b2>
    536a:	b6 01       	movw	r22, r12
    536c:	8e e2       	ldi	r24, 0x2E	; 46
    536e:	90 e0       	ldi	r25, 0x00	; 0
    5370:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <fputc>
    5374:	82 e0       	ldi	r24, 0x02	; 2
    5376:	ee 24       	eor	r14, r14
    5378:	e3 94       	inc	r14
    537a:	e8 0e       	add	r14, r24
    537c:	f3 01       	movw	r30, r6
    537e:	e8 0f       	add	r30, r24
    5380:	f1 1d       	adc	r31, r1
    5382:	80 81       	ld	r24, Z
    5384:	b6 01       	movw	r22, r12
    5386:	90 e0       	ldi	r25, 0x00	; 0
    5388:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <fputc>
    538c:	11 50       	subi	r17, 0x01	; 1
    538e:	8e 2d       	mov	r24, r14
    5390:	91 f7       	brne	.-28     	; 0x5376 <vfprintf+0x390>
    5392:	e6 cf       	rjmp	.-52     	; 0x5360 <vfprintf+0x37a>
    5394:	85 e4       	ldi	r24, 0x45	; 69
    5396:	90 e0       	ldi	r25, 0x00	; 0
    5398:	b6 01       	movw	r22, r12
    539a:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <fputc>
    539e:	57 fc       	sbrc	r5, 7
    53a0:	05 c0       	rjmp	.+10     	; 0x53ac <vfprintf+0x3c6>
    53a2:	41 14       	cp	r4, r1
    53a4:	51 04       	cpc	r5, r1
    53a6:	39 f4       	brne	.+14     	; 0x53b6 <vfprintf+0x3d0>
    53a8:	04 ff       	sbrs	r16, 4
    53aa:	05 c0       	rjmp	.+10     	; 0x53b6 <vfprintf+0x3d0>
    53ac:	51 94       	neg	r5
    53ae:	41 94       	neg	r4
    53b0:	51 08       	sbc	r5, r1
    53b2:	8d e2       	ldi	r24, 0x2D	; 45
    53b4:	01 c0       	rjmp	.+2      	; 0x53b8 <vfprintf+0x3d2>
    53b6:	8b e2       	ldi	r24, 0x2B	; 43
    53b8:	b6 01       	movw	r22, r12
    53ba:	90 e0       	ldi	r25, 0x00	; 0
    53bc:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <fputc>
    53c0:	80 e3       	ldi	r24, 0x30	; 48
    53c2:	9a e0       	ldi	r25, 0x0A	; 10
    53c4:	49 16       	cp	r4, r25
    53c6:	51 04       	cpc	r5, r1
    53c8:	2c f0       	brlt	.+10     	; 0x53d4 <vfprintf+0x3ee>
    53ca:	8f 5f       	subi	r24, 0xFF	; 255
    53cc:	5a e0       	ldi	r21, 0x0A	; 10
    53ce:	45 1a       	sub	r4, r21
    53d0:	51 08       	sbc	r5, r1
    53d2:	f7 cf       	rjmp	.-18     	; 0x53c2 <vfprintf+0x3dc>
    53d4:	b6 01       	movw	r22, r12
    53d6:	90 e0       	ldi	r25, 0x00	; 0
    53d8:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <fputc>
    53dc:	b6 01       	movw	r22, r12
    53de:	c2 01       	movw	r24, r4
    53e0:	c0 96       	adiw	r24, 0x30	; 48
    53e2:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <fputc>
    53e6:	57 c1       	rjmp	.+686    	; 0x5696 <vfprintf+0x6b0>
    53e8:	83 36       	cpi	r24, 0x63	; 99
    53ea:	31 f0       	breq	.+12     	; 0x53f8 <vfprintf+0x412>
    53ec:	83 37       	cpi	r24, 0x73	; 115
    53ee:	79 f0       	breq	.+30     	; 0x540e <vfprintf+0x428>
    53f0:	83 35       	cpi	r24, 0x53	; 83
    53f2:	09 f0       	breq	.+2      	; 0x53f6 <vfprintf+0x410>
    53f4:	58 c0       	rjmp	.+176    	; 0x54a6 <vfprintf+0x4c0>
    53f6:	21 c0       	rjmp	.+66     	; 0x543a <vfprintf+0x454>
    53f8:	52 01       	movw	r10, r4
    53fa:	e2 e0       	ldi	r30, 0x02	; 2
    53fc:	ae 0e       	add	r10, r30
    53fe:	b1 1c       	adc	r11, r1
    5400:	f2 01       	movw	r30, r4
    5402:	80 81       	ld	r24, Z
    5404:	89 83       	std	Y+1, r24	; 0x01
    5406:	01 e0       	ldi	r16, 0x01	; 1
    5408:	10 e0       	ldi	r17, 0x00	; 0
    540a:	23 01       	movw	r4, r6
    540c:	14 c0       	rjmp	.+40     	; 0x5436 <vfprintf+0x450>
    540e:	52 01       	movw	r10, r4
    5410:	f2 e0       	ldi	r31, 0x02	; 2
    5412:	af 0e       	add	r10, r31
    5414:	b1 1c       	adc	r11, r1
    5416:	f2 01       	movw	r30, r4
    5418:	40 80       	ld	r4, Z
    541a:	51 80       	ldd	r5, Z+1	; 0x01
    541c:	26 ff       	sbrs	r18, 6
    541e:	03 c0       	rjmp	.+6      	; 0x5426 <vfprintf+0x440>
    5420:	61 2f       	mov	r22, r17
    5422:	70 e0       	ldi	r23, 0x00	; 0
    5424:	02 c0       	rjmp	.+4      	; 0x542a <vfprintf+0x444>
    5426:	6f ef       	ldi	r22, 0xFF	; 255
    5428:	7f ef       	ldi	r23, 0xFF	; 255
    542a:	c2 01       	movw	r24, r4
    542c:	2a 8b       	std	Y+18, r18	; 0x12
    542e:	0e 94 2b 32 	call	0x6456	; 0x6456 <strnlen>
    5432:	8c 01       	movw	r16, r24
    5434:	2a 89       	ldd	r18, Y+18	; 0x12
    5436:	2f 77       	andi	r18, 0x7F	; 127
    5438:	15 c0       	rjmp	.+42     	; 0x5464 <vfprintf+0x47e>
    543a:	52 01       	movw	r10, r4
    543c:	f2 e0       	ldi	r31, 0x02	; 2
    543e:	af 0e       	add	r10, r31
    5440:	b1 1c       	adc	r11, r1
    5442:	f2 01       	movw	r30, r4
    5444:	40 80       	ld	r4, Z
    5446:	51 80       	ldd	r5, Z+1	; 0x01
    5448:	26 ff       	sbrs	r18, 6
    544a:	03 c0       	rjmp	.+6      	; 0x5452 <vfprintf+0x46c>
    544c:	61 2f       	mov	r22, r17
    544e:	70 e0       	ldi	r23, 0x00	; 0
    5450:	02 c0       	rjmp	.+4      	; 0x5456 <vfprintf+0x470>
    5452:	6f ef       	ldi	r22, 0xFF	; 255
    5454:	7f ef       	ldi	r23, 0xFF	; 255
    5456:	c2 01       	movw	r24, r4
    5458:	2a 8b       	std	Y+18, r18	; 0x12
    545a:	0e 94 e0 31 	call	0x63c0	; 0x63c0 <strnlen_P>
    545e:	8c 01       	movw	r16, r24
    5460:	2a 89       	ldd	r18, Y+18	; 0x12
    5462:	20 68       	ori	r18, 0x80	; 128
    5464:	32 2e       	mov	r3, r18
    5466:	23 fd       	sbrc	r18, 3
    5468:	1a c0       	rjmp	.+52     	; 0x549e <vfprintf+0x4b8>
    546a:	8f 2d       	mov	r24, r15
    546c:	90 e0       	ldi	r25, 0x00	; 0
    546e:	08 17       	cp	r16, r24
    5470:	19 07       	cpc	r17, r25
    5472:	a8 f4       	brcc	.+42     	; 0x549e <vfprintf+0x4b8>
    5474:	b6 01       	movw	r22, r12
    5476:	80 e2       	ldi	r24, 0x20	; 32
    5478:	90 e0       	ldi	r25, 0x00	; 0
    547a:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <fputc>
    547e:	fa 94       	dec	r15
    5480:	f4 cf       	rjmp	.-24     	; 0x546a <vfprintf+0x484>
    5482:	f2 01       	movw	r30, r4
    5484:	37 fc       	sbrc	r3, 7
    5486:	85 91       	lpm	r24, Z+
    5488:	37 fe       	sbrs	r3, 7
    548a:	81 91       	ld	r24, Z+
    548c:	2f 01       	movw	r4, r30
    548e:	b6 01       	movw	r22, r12
    5490:	90 e0       	ldi	r25, 0x00	; 0
    5492:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <fputc>
    5496:	f1 10       	cpse	r15, r1
    5498:	fa 94       	dec	r15
    549a:	01 50       	subi	r16, 0x01	; 1
    549c:	11 09       	sbc	r17, r1
    549e:	01 15       	cp	r16, r1
    54a0:	11 05       	cpc	r17, r1
    54a2:	79 f7       	brne	.-34     	; 0x5482 <vfprintf+0x49c>
    54a4:	f8 c0       	rjmp	.+496    	; 0x5696 <vfprintf+0x6b0>
    54a6:	84 36       	cpi	r24, 0x64	; 100
    54a8:	11 f0       	breq	.+4      	; 0x54ae <vfprintf+0x4c8>
    54aa:	89 36       	cpi	r24, 0x69	; 105
    54ac:	59 f5       	brne	.+86     	; 0x5504 <vfprintf+0x51e>
    54ae:	52 01       	movw	r10, r4
    54b0:	27 ff       	sbrs	r18, 7
    54b2:	09 c0       	rjmp	.+18     	; 0x54c6 <vfprintf+0x4e0>
    54b4:	f4 e0       	ldi	r31, 0x04	; 4
    54b6:	af 0e       	add	r10, r31
    54b8:	b1 1c       	adc	r11, r1
    54ba:	f2 01       	movw	r30, r4
    54bc:	60 81       	ld	r22, Z
    54be:	71 81       	ldd	r23, Z+1	; 0x01
    54c0:	82 81       	ldd	r24, Z+2	; 0x02
    54c2:	93 81       	ldd	r25, Z+3	; 0x03
    54c4:	0a c0       	rjmp	.+20     	; 0x54da <vfprintf+0x4f4>
    54c6:	f2 e0       	ldi	r31, 0x02	; 2
    54c8:	af 0e       	add	r10, r31
    54ca:	b1 1c       	adc	r11, r1
    54cc:	f2 01       	movw	r30, r4
    54ce:	60 81       	ld	r22, Z
    54d0:	71 81       	ldd	r23, Z+1	; 0x01
    54d2:	07 2e       	mov	r0, r23
    54d4:	00 0c       	add	r0, r0
    54d6:	88 0b       	sbc	r24, r24
    54d8:	99 0b       	sbc	r25, r25
    54da:	2f 76       	andi	r18, 0x6F	; 111
    54dc:	32 2e       	mov	r3, r18
    54de:	97 ff       	sbrs	r25, 7
    54e0:	09 c0       	rjmp	.+18     	; 0x54f4 <vfprintf+0x50e>
    54e2:	90 95       	com	r25
    54e4:	80 95       	com	r24
    54e6:	70 95       	com	r23
    54e8:	61 95       	neg	r22
    54ea:	7f 4f       	sbci	r23, 0xFF	; 255
    54ec:	8f 4f       	sbci	r24, 0xFF	; 255
    54ee:	9f 4f       	sbci	r25, 0xFF	; 255
    54f0:	20 68       	ori	r18, 0x80	; 128
    54f2:	32 2e       	mov	r3, r18
    54f4:	2a e0       	ldi	r18, 0x0A	; 10
    54f6:	30 e0       	ldi	r19, 0x00	; 0
    54f8:	a3 01       	movw	r20, r6
    54fa:	0e 94 e2 32 	call	0x65c4	; 0x65c4 <__ultoa_invert>
    54fe:	e8 2e       	mov	r14, r24
    5500:	e6 18       	sub	r14, r6
    5502:	3f c0       	rjmp	.+126    	; 0x5582 <vfprintf+0x59c>
    5504:	02 2f       	mov	r16, r18
    5506:	85 37       	cpi	r24, 0x75	; 117
    5508:	21 f4       	brne	.+8      	; 0x5512 <vfprintf+0x52c>
    550a:	0f 7e       	andi	r16, 0xEF	; 239
    550c:	2a e0       	ldi	r18, 0x0A	; 10
    550e:	30 e0       	ldi	r19, 0x00	; 0
    5510:	1d c0       	rjmp	.+58     	; 0x554c <vfprintf+0x566>
    5512:	09 7f       	andi	r16, 0xF9	; 249
    5514:	8f 36       	cpi	r24, 0x6F	; 111
    5516:	91 f0       	breq	.+36     	; 0x553c <vfprintf+0x556>
    5518:	18 f4       	brcc	.+6      	; 0x5520 <vfprintf+0x53a>
    551a:	88 35       	cpi	r24, 0x58	; 88
    551c:	59 f0       	breq	.+22     	; 0x5534 <vfprintf+0x54e>
    551e:	c5 c0       	rjmp	.+394    	; 0x56aa <vfprintf+0x6c4>
    5520:	80 37       	cpi	r24, 0x70	; 112
    5522:	19 f0       	breq	.+6      	; 0x552a <vfprintf+0x544>
    5524:	88 37       	cpi	r24, 0x78	; 120
    5526:	11 f0       	breq	.+4      	; 0x552c <vfprintf+0x546>
    5528:	c0 c0       	rjmp	.+384    	; 0x56aa <vfprintf+0x6c4>
    552a:	00 61       	ori	r16, 0x10	; 16
    552c:	04 ff       	sbrs	r16, 4
    552e:	09 c0       	rjmp	.+18     	; 0x5542 <vfprintf+0x55c>
    5530:	04 60       	ori	r16, 0x04	; 4
    5532:	07 c0       	rjmp	.+14     	; 0x5542 <vfprintf+0x55c>
    5534:	24 ff       	sbrs	r18, 4
    5536:	08 c0       	rjmp	.+16     	; 0x5548 <vfprintf+0x562>
    5538:	06 60       	ori	r16, 0x06	; 6
    553a:	06 c0       	rjmp	.+12     	; 0x5548 <vfprintf+0x562>
    553c:	28 e0       	ldi	r18, 0x08	; 8
    553e:	30 e0       	ldi	r19, 0x00	; 0
    5540:	05 c0       	rjmp	.+10     	; 0x554c <vfprintf+0x566>
    5542:	20 e1       	ldi	r18, 0x10	; 16
    5544:	30 e0       	ldi	r19, 0x00	; 0
    5546:	02 c0       	rjmp	.+4      	; 0x554c <vfprintf+0x566>
    5548:	20 e1       	ldi	r18, 0x10	; 16
    554a:	32 e0       	ldi	r19, 0x02	; 2
    554c:	52 01       	movw	r10, r4
    554e:	07 ff       	sbrs	r16, 7
    5550:	09 c0       	rjmp	.+18     	; 0x5564 <vfprintf+0x57e>
    5552:	f4 e0       	ldi	r31, 0x04	; 4
    5554:	af 0e       	add	r10, r31
    5556:	b1 1c       	adc	r11, r1
    5558:	f2 01       	movw	r30, r4
    555a:	60 81       	ld	r22, Z
    555c:	71 81       	ldd	r23, Z+1	; 0x01
    555e:	82 81       	ldd	r24, Z+2	; 0x02
    5560:	93 81       	ldd	r25, Z+3	; 0x03
    5562:	08 c0       	rjmp	.+16     	; 0x5574 <vfprintf+0x58e>
    5564:	f2 e0       	ldi	r31, 0x02	; 2
    5566:	af 0e       	add	r10, r31
    5568:	b1 1c       	adc	r11, r1
    556a:	f2 01       	movw	r30, r4
    556c:	60 81       	ld	r22, Z
    556e:	71 81       	ldd	r23, Z+1	; 0x01
    5570:	80 e0       	ldi	r24, 0x00	; 0
    5572:	90 e0       	ldi	r25, 0x00	; 0
    5574:	a3 01       	movw	r20, r6
    5576:	0e 94 e2 32 	call	0x65c4	; 0x65c4 <__ultoa_invert>
    557a:	e8 2e       	mov	r14, r24
    557c:	e6 18       	sub	r14, r6
    557e:	0f 77       	andi	r16, 0x7F	; 127
    5580:	30 2e       	mov	r3, r16
    5582:	36 fe       	sbrs	r3, 6
    5584:	0b c0       	rjmp	.+22     	; 0x559c <vfprintf+0x5b6>
    5586:	33 2d       	mov	r19, r3
    5588:	3e 7f       	andi	r19, 0xFE	; 254
    558a:	e1 16       	cp	r14, r17
    558c:	50 f4       	brcc	.+20     	; 0x55a2 <vfprintf+0x5bc>
    558e:	34 fe       	sbrs	r3, 4
    5590:	0a c0       	rjmp	.+20     	; 0x55a6 <vfprintf+0x5c0>
    5592:	32 fc       	sbrc	r3, 2
    5594:	08 c0       	rjmp	.+16     	; 0x55a6 <vfprintf+0x5c0>
    5596:	33 2d       	mov	r19, r3
    5598:	3e 7e       	andi	r19, 0xEE	; 238
    559a:	05 c0       	rjmp	.+10     	; 0x55a6 <vfprintf+0x5c0>
    559c:	0e 2d       	mov	r16, r14
    559e:	33 2d       	mov	r19, r3
    55a0:	03 c0       	rjmp	.+6      	; 0x55a8 <vfprintf+0x5c2>
    55a2:	0e 2d       	mov	r16, r14
    55a4:	01 c0       	rjmp	.+2      	; 0x55a8 <vfprintf+0x5c2>
    55a6:	01 2f       	mov	r16, r17
    55a8:	34 ff       	sbrs	r19, 4
    55aa:	0c c0       	rjmp	.+24     	; 0x55c4 <vfprintf+0x5de>
    55ac:	fe 01       	movw	r30, r28
    55ae:	ee 0d       	add	r30, r14
    55b0:	f1 1d       	adc	r31, r1
    55b2:	80 81       	ld	r24, Z
    55b4:	80 33       	cpi	r24, 0x30	; 48
    55b6:	11 f4       	brne	.+4      	; 0x55bc <vfprintf+0x5d6>
    55b8:	39 7e       	andi	r19, 0xE9	; 233
    55ba:	08 c0       	rjmp	.+16     	; 0x55cc <vfprintf+0x5e6>
    55bc:	32 ff       	sbrs	r19, 2
    55be:	05 c0       	rjmp	.+10     	; 0x55ca <vfprintf+0x5e4>
    55c0:	0e 5f       	subi	r16, 0xFE	; 254
    55c2:	04 c0       	rjmp	.+8      	; 0x55cc <vfprintf+0x5e6>
    55c4:	83 2f       	mov	r24, r19
    55c6:	86 78       	andi	r24, 0x86	; 134
    55c8:	09 f0       	breq	.+2      	; 0x55cc <vfprintf+0x5e6>
    55ca:	0f 5f       	subi	r16, 0xFF	; 255
    55cc:	33 fd       	sbrc	r19, 3
    55ce:	13 c0       	rjmp	.+38     	; 0x55f6 <vfprintf+0x610>
    55d0:	30 ff       	sbrs	r19, 0
    55d2:	06 c0       	rjmp	.+12     	; 0x55e0 <vfprintf+0x5fa>
    55d4:	1e 2d       	mov	r17, r14
    55d6:	0f 15       	cp	r16, r15
    55d8:	18 f4       	brcc	.+6      	; 0x55e0 <vfprintf+0x5fa>
    55da:	1f 0d       	add	r17, r15
    55dc:	10 1b       	sub	r17, r16
    55de:	0f 2d       	mov	r16, r15
    55e0:	0f 15       	cp	r16, r15
    55e2:	68 f4       	brcc	.+26     	; 0x55fe <vfprintf+0x618>
    55e4:	b6 01       	movw	r22, r12
    55e6:	80 e2       	ldi	r24, 0x20	; 32
    55e8:	90 e0       	ldi	r25, 0x00	; 0
    55ea:	3b 8b       	std	Y+19, r19	; 0x13
    55ec:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <fputc>
    55f0:	0f 5f       	subi	r16, 0xFF	; 255
    55f2:	3b 89       	ldd	r19, Y+19	; 0x13
    55f4:	f5 cf       	rjmp	.-22     	; 0x55e0 <vfprintf+0x5fa>
    55f6:	0f 15       	cp	r16, r15
    55f8:	10 f4       	brcc	.+4      	; 0x55fe <vfprintf+0x618>
    55fa:	f0 1a       	sub	r15, r16
    55fc:	01 c0       	rjmp	.+2      	; 0x5600 <vfprintf+0x61a>
    55fe:	f1 2c       	mov	r15, r1
    5600:	34 ff       	sbrs	r19, 4
    5602:	12 c0       	rjmp	.+36     	; 0x5628 <vfprintf+0x642>
    5604:	b6 01       	movw	r22, r12
    5606:	80 e3       	ldi	r24, 0x30	; 48
    5608:	90 e0       	ldi	r25, 0x00	; 0
    560a:	3b 8b       	std	Y+19, r19	; 0x13
    560c:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <fputc>
    5610:	3b 89       	ldd	r19, Y+19	; 0x13
    5612:	32 ff       	sbrs	r19, 2
    5614:	17 c0       	rjmp	.+46     	; 0x5644 <vfprintf+0x65e>
    5616:	31 fd       	sbrc	r19, 1
    5618:	03 c0       	rjmp	.+6      	; 0x5620 <vfprintf+0x63a>
    561a:	88 e7       	ldi	r24, 0x78	; 120
    561c:	90 e0       	ldi	r25, 0x00	; 0
    561e:	02 c0       	rjmp	.+4      	; 0x5624 <vfprintf+0x63e>
    5620:	88 e5       	ldi	r24, 0x58	; 88
    5622:	90 e0       	ldi	r25, 0x00	; 0
    5624:	b6 01       	movw	r22, r12
    5626:	0c c0       	rjmp	.+24     	; 0x5640 <vfprintf+0x65a>
    5628:	83 2f       	mov	r24, r19
    562a:	86 78       	andi	r24, 0x86	; 134
    562c:	59 f0       	breq	.+22     	; 0x5644 <vfprintf+0x65e>
    562e:	31 ff       	sbrs	r19, 1
    5630:	02 c0       	rjmp	.+4      	; 0x5636 <vfprintf+0x650>
    5632:	8b e2       	ldi	r24, 0x2B	; 43
    5634:	01 c0       	rjmp	.+2      	; 0x5638 <vfprintf+0x652>
    5636:	80 e2       	ldi	r24, 0x20	; 32
    5638:	37 fd       	sbrc	r19, 7
    563a:	8d e2       	ldi	r24, 0x2D	; 45
    563c:	b6 01       	movw	r22, r12
    563e:	90 e0       	ldi	r25, 0x00	; 0
    5640:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <fputc>
    5644:	e1 16       	cp	r14, r17
    5646:	38 f4       	brcc	.+14     	; 0x5656 <vfprintf+0x670>
    5648:	b6 01       	movw	r22, r12
    564a:	80 e3       	ldi	r24, 0x30	; 48
    564c:	90 e0       	ldi	r25, 0x00	; 0
    564e:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <fputc>
    5652:	11 50       	subi	r17, 0x01	; 1
    5654:	f7 cf       	rjmp	.-18     	; 0x5644 <vfprintf+0x65e>
    5656:	ea 94       	dec	r14
    5658:	f3 01       	movw	r30, r6
    565a:	ee 0d       	add	r30, r14
    565c:	f1 1d       	adc	r31, r1
    565e:	80 81       	ld	r24, Z
    5660:	b6 01       	movw	r22, r12
    5662:	90 e0       	ldi	r25, 0x00	; 0
    5664:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <fputc>
    5668:	e1 10       	cpse	r14, r1
    566a:	f5 cf       	rjmp	.-22     	; 0x5656 <vfprintf+0x670>
    566c:	14 c0       	rjmp	.+40     	; 0x5696 <vfprintf+0x6b0>
    566e:	f4 e0       	ldi	r31, 0x04	; 4
    5670:	ff 15       	cp	r31, r15
    5672:	58 f5       	brcc	.+86     	; 0x56ca <vfprintf+0x6e4>
    5674:	84 e0       	ldi	r24, 0x04	; 4
    5676:	f8 1a       	sub	r15, r24
    5678:	33 fe       	sbrs	r3, 3
    567a:	1e c0       	rjmp	.+60     	; 0x56b8 <vfprintf+0x6d2>
    567c:	21 10       	cpse	r2, r1
    567e:	26 c0       	rjmp	.+76     	; 0x56cc <vfprintf+0x6e6>
    5680:	03 ff       	sbrs	r16, 3
    5682:	2a c0       	rjmp	.+84     	; 0x56d8 <vfprintf+0x6f2>
    5684:	0a eb       	ldi	r16, 0xBA	; 186
    5686:	11 e0       	ldi	r17, 0x01	; 1
    5688:	f3 2d       	mov	r31, r3
    568a:	f0 71       	andi	r31, 0x10	; 16
    568c:	3f 2e       	mov	r3, r31
    568e:	f8 01       	movw	r30, r16
    5690:	84 91       	lpm	r24, Z
    5692:	81 11       	cpse	r24, r1
    5694:	24 c0       	rjmp	.+72     	; 0x56de <vfprintf+0x6f8>
    5696:	ff 20       	and	r15, r15
    5698:	09 f4       	brne	.+2      	; 0x569c <vfprintf+0x6b6>
    569a:	e5 cc       	rjmp	.-1590   	; 0x5066 <vfprintf+0x80>
    569c:	b6 01       	movw	r22, r12
    569e:	80 e2       	ldi	r24, 0x20	; 32
    56a0:	90 e0       	ldi	r25, 0x00	; 0
    56a2:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <fputc>
    56a6:	fa 94       	dec	r15
    56a8:	f6 cf       	rjmp	.-20     	; 0x5696 <vfprintf+0x6b0>
    56aa:	f6 01       	movw	r30, r12
    56ac:	86 81       	ldd	r24, Z+6	; 0x06
    56ae:	97 81       	ldd	r25, Z+7	; 0x07
    56b0:	26 c0       	rjmp	.+76     	; 0x56fe <vfprintf+0x718>
    56b2:	8f ef       	ldi	r24, 0xFF	; 255
    56b4:	9f ef       	ldi	r25, 0xFF	; 255
    56b6:	23 c0       	rjmp	.+70     	; 0x56fe <vfprintf+0x718>
    56b8:	b6 01       	movw	r22, r12
    56ba:	80 e2       	ldi	r24, 0x20	; 32
    56bc:	90 e0       	ldi	r25, 0x00	; 0
    56be:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <fputc>
    56c2:	fa 94       	dec	r15
    56c4:	f1 10       	cpse	r15, r1
    56c6:	f8 cf       	rjmp	.-16     	; 0x56b8 <vfprintf+0x6d2>
    56c8:	d9 cf       	rjmp	.-78     	; 0x567c <vfprintf+0x696>
    56ca:	f1 2c       	mov	r15, r1
    56cc:	b6 01       	movw	r22, r12
    56ce:	82 2d       	mov	r24, r2
    56d0:	90 e0       	ldi	r25, 0x00	; 0
    56d2:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <fputc>
    56d6:	d4 cf       	rjmp	.-88     	; 0x5680 <vfprintf+0x69a>
    56d8:	0e eb       	ldi	r16, 0xBE	; 190
    56da:	11 e0       	ldi	r17, 0x01	; 1
    56dc:	d5 cf       	rjmp	.-86     	; 0x5688 <vfprintf+0x6a2>
    56de:	31 10       	cpse	r3, r1
    56e0:	80 52       	subi	r24, 0x20	; 32
    56e2:	b6 01       	movw	r22, r12
    56e4:	90 e0       	ldi	r25, 0x00	; 0
    56e6:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <fputc>
    56ea:	0f 5f       	subi	r16, 0xFF	; 255
    56ec:	1f 4f       	sbci	r17, 0xFF	; 255
    56ee:	cf cf       	rjmp	.-98     	; 0x568e <vfprintf+0x6a8>
    56f0:	23 e0       	ldi	r18, 0x03	; 3
    56f2:	2f 15       	cp	r18, r15
    56f4:	10 f4       	brcc	.+4      	; 0x56fa <vfprintf+0x714>
    56f6:	83 e0       	ldi	r24, 0x03	; 3
    56f8:	be cf       	rjmp	.-132    	; 0x5676 <vfprintf+0x690>
    56fa:	f1 2c       	mov	r15, r1
    56fc:	c1 cf       	rjmp	.-126    	; 0x5680 <vfprintf+0x69a>
    56fe:	63 96       	adiw	r28, 0x13	; 19
    5700:	0f b6       	in	r0, 0x3f	; 63
    5702:	f8 94       	cli
    5704:	de bf       	out	0x3e, r29	; 62
    5706:	0f be       	out	0x3f, r0	; 63
    5708:	cd bf       	out	0x3d, r28	; 61
    570a:	df 91       	pop	r29
    570c:	cf 91       	pop	r28
    570e:	1f 91       	pop	r17
    5710:	0f 91       	pop	r16
    5712:	ff 90       	pop	r15
    5714:	ef 90       	pop	r14
    5716:	df 90       	pop	r13
    5718:	cf 90       	pop	r12
    571a:	bf 90       	pop	r11
    571c:	af 90       	pop	r10
    571e:	9f 90       	pop	r9
    5720:	8f 90       	pop	r8
    5722:	7f 90       	pop	r7
    5724:	6f 90       	pop	r6
    5726:	5f 90       	pop	r5
    5728:	4f 90       	pop	r4
    572a:	3f 90       	pop	r3
    572c:	2f 90       	pop	r2
    572e:	08 95       	ret

00005730 <__subsf3>:
    5730:	50 58       	subi	r21, 0x80	; 128

00005732 <__addsf3>:
    5732:	bb 27       	eor	r27, r27
    5734:	aa 27       	eor	r26, r26
    5736:	0e 94 b0 2b 	call	0x5760	; 0x5760 <__addsf3x>
    573a:	0c 94 fa 2c 	jmp	0x59f4	; 0x59f4 <__fp_round>
    573e:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <__fp_pscA>
    5742:	38 f0       	brcs	.+14     	; 0x5752 <__addsf3+0x20>
    5744:	0e 94 f3 2c 	call	0x59e6	; 0x59e6 <__fp_pscB>
    5748:	20 f0       	brcs	.+8      	; 0x5752 <__addsf3+0x20>
    574a:	39 f4       	brne	.+14     	; 0x575a <__addsf3+0x28>
    574c:	9f 3f       	cpi	r25, 0xFF	; 255
    574e:	19 f4       	brne	.+6      	; 0x5756 <__addsf3+0x24>
    5750:	26 f4       	brtc	.+8      	; 0x575a <__addsf3+0x28>
    5752:	0c 94 e9 2c 	jmp	0x59d2	; 0x59d2 <__fp_nan>
    5756:	0e f4       	brtc	.+2      	; 0x575a <__addsf3+0x28>
    5758:	e0 95       	com	r30
    575a:	e7 fb       	bst	r30, 7
    575c:	0c 94 e3 2c 	jmp	0x59c6	; 0x59c6 <__fp_inf>

00005760 <__addsf3x>:
    5760:	e9 2f       	mov	r30, r25
    5762:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <__fp_split3>
    5766:	58 f3       	brcs	.-42     	; 0x573e <__addsf3+0xc>
    5768:	ba 17       	cp	r27, r26
    576a:	62 07       	cpc	r22, r18
    576c:	73 07       	cpc	r23, r19
    576e:	84 07       	cpc	r24, r20
    5770:	95 07       	cpc	r25, r21
    5772:	20 f0       	brcs	.+8      	; 0x577c <__addsf3x+0x1c>
    5774:	79 f4       	brne	.+30     	; 0x5794 <__addsf3x+0x34>
    5776:	a6 f5       	brtc	.+104    	; 0x57e0 <__addsf3x+0x80>
    5778:	0c 94 2d 2d 	jmp	0x5a5a	; 0x5a5a <__fp_zero>
    577c:	0e f4       	brtc	.+2      	; 0x5780 <__addsf3x+0x20>
    577e:	e0 95       	com	r30
    5780:	0b 2e       	mov	r0, r27
    5782:	ba 2f       	mov	r27, r26
    5784:	a0 2d       	mov	r26, r0
    5786:	0b 01       	movw	r0, r22
    5788:	b9 01       	movw	r22, r18
    578a:	90 01       	movw	r18, r0
    578c:	0c 01       	movw	r0, r24
    578e:	ca 01       	movw	r24, r20
    5790:	a0 01       	movw	r20, r0
    5792:	11 24       	eor	r1, r1
    5794:	ff 27       	eor	r31, r31
    5796:	59 1b       	sub	r21, r25
    5798:	99 f0       	breq	.+38     	; 0x57c0 <__addsf3x+0x60>
    579a:	59 3f       	cpi	r21, 0xF9	; 249
    579c:	50 f4       	brcc	.+20     	; 0x57b2 <__addsf3x+0x52>
    579e:	50 3e       	cpi	r21, 0xE0	; 224
    57a0:	68 f1       	brcs	.+90     	; 0x57fc <__addsf3x+0x9c>
    57a2:	1a 16       	cp	r1, r26
    57a4:	f0 40       	sbci	r31, 0x00	; 0
    57a6:	a2 2f       	mov	r26, r18
    57a8:	23 2f       	mov	r18, r19
    57aa:	34 2f       	mov	r19, r20
    57ac:	44 27       	eor	r20, r20
    57ae:	58 5f       	subi	r21, 0xF8	; 248
    57b0:	f3 cf       	rjmp	.-26     	; 0x5798 <__addsf3x+0x38>
    57b2:	46 95       	lsr	r20
    57b4:	37 95       	ror	r19
    57b6:	27 95       	ror	r18
    57b8:	a7 95       	ror	r26
    57ba:	f0 40       	sbci	r31, 0x00	; 0
    57bc:	53 95       	inc	r21
    57be:	c9 f7       	brne	.-14     	; 0x57b2 <__addsf3x+0x52>
    57c0:	7e f4       	brtc	.+30     	; 0x57e0 <__addsf3x+0x80>
    57c2:	1f 16       	cp	r1, r31
    57c4:	ba 0b       	sbc	r27, r26
    57c6:	62 0b       	sbc	r22, r18
    57c8:	73 0b       	sbc	r23, r19
    57ca:	84 0b       	sbc	r24, r20
    57cc:	ba f0       	brmi	.+46     	; 0x57fc <__addsf3x+0x9c>
    57ce:	91 50       	subi	r25, 0x01	; 1
    57d0:	a1 f0       	breq	.+40     	; 0x57fa <__addsf3x+0x9a>
    57d2:	ff 0f       	add	r31, r31
    57d4:	bb 1f       	adc	r27, r27
    57d6:	66 1f       	adc	r22, r22
    57d8:	77 1f       	adc	r23, r23
    57da:	88 1f       	adc	r24, r24
    57dc:	c2 f7       	brpl	.-16     	; 0x57ce <__addsf3x+0x6e>
    57de:	0e c0       	rjmp	.+28     	; 0x57fc <__addsf3x+0x9c>
    57e0:	ba 0f       	add	r27, r26
    57e2:	62 1f       	adc	r22, r18
    57e4:	73 1f       	adc	r23, r19
    57e6:	84 1f       	adc	r24, r20
    57e8:	48 f4       	brcc	.+18     	; 0x57fc <__addsf3x+0x9c>
    57ea:	87 95       	ror	r24
    57ec:	77 95       	ror	r23
    57ee:	67 95       	ror	r22
    57f0:	b7 95       	ror	r27
    57f2:	f7 95       	ror	r31
    57f4:	9e 3f       	cpi	r25, 0xFE	; 254
    57f6:	08 f0       	brcs	.+2      	; 0x57fa <__addsf3x+0x9a>
    57f8:	b0 cf       	rjmp	.-160    	; 0x575a <__addsf3+0x28>
    57fa:	93 95       	inc	r25
    57fc:	88 0f       	add	r24, r24
    57fe:	08 f0       	brcs	.+2      	; 0x5802 <__addsf3x+0xa2>
    5800:	99 27       	eor	r25, r25
    5802:	ee 0f       	add	r30, r30
    5804:	97 95       	ror	r25
    5806:	87 95       	ror	r24
    5808:	08 95       	ret

0000580a <__divsf3>:
    580a:	0e 94 19 2c 	call	0x5832	; 0x5832 <__divsf3x>
    580e:	0c 94 fa 2c 	jmp	0x59f4	; 0x59f4 <__fp_round>
    5812:	0e 94 f3 2c 	call	0x59e6	; 0x59e6 <__fp_pscB>
    5816:	58 f0       	brcs	.+22     	; 0x582e <__divsf3+0x24>
    5818:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <__fp_pscA>
    581c:	40 f0       	brcs	.+16     	; 0x582e <__divsf3+0x24>
    581e:	29 f4       	brne	.+10     	; 0x582a <__divsf3+0x20>
    5820:	5f 3f       	cpi	r21, 0xFF	; 255
    5822:	29 f0       	breq	.+10     	; 0x582e <__divsf3+0x24>
    5824:	0c 94 e3 2c 	jmp	0x59c6	; 0x59c6 <__fp_inf>
    5828:	51 11       	cpse	r21, r1
    582a:	0c 94 2e 2d 	jmp	0x5a5c	; 0x5a5c <__fp_szero>
    582e:	0c 94 e9 2c 	jmp	0x59d2	; 0x59d2 <__fp_nan>

00005832 <__divsf3x>:
    5832:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <__fp_split3>
    5836:	68 f3       	brcs	.-38     	; 0x5812 <__divsf3+0x8>

00005838 <__divsf3_pse>:
    5838:	99 23       	and	r25, r25
    583a:	b1 f3       	breq	.-20     	; 0x5828 <__divsf3+0x1e>
    583c:	55 23       	and	r21, r21
    583e:	91 f3       	breq	.-28     	; 0x5824 <__divsf3+0x1a>
    5840:	95 1b       	sub	r25, r21
    5842:	55 0b       	sbc	r21, r21
    5844:	bb 27       	eor	r27, r27
    5846:	aa 27       	eor	r26, r26
    5848:	62 17       	cp	r22, r18
    584a:	73 07       	cpc	r23, r19
    584c:	84 07       	cpc	r24, r20
    584e:	38 f0       	brcs	.+14     	; 0x585e <__divsf3_pse+0x26>
    5850:	9f 5f       	subi	r25, 0xFF	; 255
    5852:	5f 4f       	sbci	r21, 0xFF	; 255
    5854:	22 0f       	add	r18, r18
    5856:	33 1f       	adc	r19, r19
    5858:	44 1f       	adc	r20, r20
    585a:	aa 1f       	adc	r26, r26
    585c:	a9 f3       	breq	.-22     	; 0x5848 <__divsf3_pse+0x10>
    585e:	35 d0       	rcall	.+106    	; 0x58ca <__divsf3_pse+0x92>
    5860:	0e 2e       	mov	r0, r30
    5862:	3a f0       	brmi	.+14     	; 0x5872 <__divsf3_pse+0x3a>
    5864:	e0 e8       	ldi	r30, 0x80	; 128
    5866:	32 d0       	rcall	.+100    	; 0x58cc <__divsf3_pse+0x94>
    5868:	91 50       	subi	r25, 0x01	; 1
    586a:	50 40       	sbci	r21, 0x00	; 0
    586c:	e6 95       	lsr	r30
    586e:	00 1c       	adc	r0, r0
    5870:	ca f7       	brpl	.-14     	; 0x5864 <__divsf3_pse+0x2c>
    5872:	2b d0       	rcall	.+86     	; 0x58ca <__divsf3_pse+0x92>
    5874:	fe 2f       	mov	r31, r30
    5876:	29 d0       	rcall	.+82     	; 0x58ca <__divsf3_pse+0x92>
    5878:	66 0f       	add	r22, r22
    587a:	77 1f       	adc	r23, r23
    587c:	88 1f       	adc	r24, r24
    587e:	bb 1f       	adc	r27, r27
    5880:	26 17       	cp	r18, r22
    5882:	37 07       	cpc	r19, r23
    5884:	48 07       	cpc	r20, r24
    5886:	ab 07       	cpc	r26, r27
    5888:	b0 e8       	ldi	r27, 0x80	; 128
    588a:	09 f0       	breq	.+2      	; 0x588e <__divsf3_pse+0x56>
    588c:	bb 0b       	sbc	r27, r27
    588e:	80 2d       	mov	r24, r0
    5890:	bf 01       	movw	r22, r30
    5892:	ff 27       	eor	r31, r31
    5894:	93 58       	subi	r25, 0x83	; 131
    5896:	5f 4f       	sbci	r21, 0xFF	; 255
    5898:	3a f0       	brmi	.+14     	; 0x58a8 <__divsf3_pse+0x70>
    589a:	9e 3f       	cpi	r25, 0xFE	; 254
    589c:	51 05       	cpc	r21, r1
    589e:	78 f0       	brcs	.+30     	; 0x58be <__divsf3_pse+0x86>
    58a0:	0c 94 e3 2c 	jmp	0x59c6	; 0x59c6 <__fp_inf>
    58a4:	0c 94 2e 2d 	jmp	0x5a5c	; 0x5a5c <__fp_szero>
    58a8:	5f 3f       	cpi	r21, 0xFF	; 255
    58aa:	e4 f3       	brlt	.-8      	; 0x58a4 <__divsf3_pse+0x6c>
    58ac:	98 3e       	cpi	r25, 0xE8	; 232
    58ae:	d4 f3       	brlt	.-12     	; 0x58a4 <__divsf3_pse+0x6c>
    58b0:	86 95       	lsr	r24
    58b2:	77 95       	ror	r23
    58b4:	67 95       	ror	r22
    58b6:	b7 95       	ror	r27
    58b8:	f7 95       	ror	r31
    58ba:	9f 5f       	subi	r25, 0xFF	; 255
    58bc:	c9 f7       	brne	.-14     	; 0x58b0 <__divsf3_pse+0x78>
    58be:	88 0f       	add	r24, r24
    58c0:	91 1d       	adc	r25, r1
    58c2:	96 95       	lsr	r25
    58c4:	87 95       	ror	r24
    58c6:	97 f9       	bld	r25, 7
    58c8:	08 95       	ret
    58ca:	e1 e0       	ldi	r30, 0x01	; 1
    58cc:	66 0f       	add	r22, r22
    58ce:	77 1f       	adc	r23, r23
    58d0:	88 1f       	adc	r24, r24
    58d2:	bb 1f       	adc	r27, r27
    58d4:	62 17       	cp	r22, r18
    58d6:	73 07       	cpc	r23, r19
    58d8:	84 07       	cpc	r24, r20
    58da:	ba 07       	cpc	r27, r26
    58dc:	20 f0       	brcs	.+8      	; 0x58e6 <__divsf3_pse+0xae>
    58de:	62 1b       	sub	r22, r18
    58e0:	73 0b       	sbc	r23, r19
    58e2:	84 0b       	sbc	r24, r20
    58e4:	ba 0b       	sbc	r27, r26
    58e6:	ee 1f       	adc	r30, r30
    58e8:	88 f7       	brcc	.-30     	; 0x58cc <__divsf3_pse+0x94>
    58ea:	e0 95       	com	r30
    58ec:	08 95       	ret

000058ee <__fixunssfsi>:
    58ee:	0e 94 13 2d 	call	0x5a26	; 0x5a26 <__fp_splitA>
    58f2:	88 f0       	brcs	.+34     	; 0x5916 <__fixunssfsi+0x28>
    58f4:	9f 57       	subi	r25, 0x7F	; 127
    58f6:	98 f0       	brcs	.+38     	; 0x591e <__fixunssfsi+0x30>
    58f8:	b9 2f       	mov	r27, r25
    58fa:	99 27       	eor	r25, r25
    58fc:	b7 51       	subi	r27, 0x17	; 23
    58fe:	b0 f0       	brcs	.+44     	; 0x592c <__fixunssfsi+0x3e>
    5900:	e1 f0       	breq	.+56     	; 0x593a <__fixunssfsi+0x4c>
    5902:	66 0f       	add	r22, r22
    5904:	77 1f       	adc	r23, r23
    5906:	88 1f       	adc	r24, r24
    5908:	99 1f       	adc	r25, r25
    590a:	1a f0       	brmi	.+6      	; 0x5912 <__fixunssfsi+0x24>
    590c:	ba 95       	dec	r27
    590e:	c9 f7       	brne	.-14     	; 0x5902 <__fixunssfsi+0x14>
    5910:	14 c0       	rjmp	.+40     	; 0x593a <__fixunssfsi+0x4c>
    5912:	b1 30       	cpi	r27, 0x01	; 1
    5914:	91 f0       	breq	.+36     	; 0x593a <__fixunssfsi+0x4c>
    5916:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <__fp_zero>
    591a:	b1 e0       	ldi	r27, 0x01	; 1
    591c:	08 95       	ret
    591e:	0c 94 2d 2d 	jmp	0x5a5a	; 0x5a5a <__fp_zero>
    5922:	67 2f       	mov	r22, r23
    5924:	78 2f       	mov	r23, r24
    5926:	88 27       	eor	r24, r24
    5928:	b8 5f       	subi	r27, 0xF8	; 248
    592a:	39 f0       	breq	.+14     	; 0x593a <__fixunssfsi+0x4c>
    592c:	b9 3f       	cpi	r27, 0xF9	; 249
    592e:	cc f3       	brlt	.-14     	; 0x5922 <__fixunssfsi+0x34>
    5930:	86 95       	lsr	r24
    5932:	77 95       	ror	r23
    5934:	67 95       	ror	r22
    5936:	b3 95       	inc	r27
    5938:	d9 f7       	brne	.-10     	; 0x5930 <__fixunssfsi+0x42>
    593a:	3e f4       	brtc	.+14     	; 0x594a <__fixunssfsi+0x5c>
    593c:	90 95       	com	r25
    593e:	80 95       	com	r24
    5940:	70 95       	com	r23
    5942:	61 95       	neg	r22
    5944:	7f 4f       	sbci	r23, 0xFF	; 255
    5946:	8f 4f       	sbci	r24, 0xFF	; 255
    5948:	9f 4f       	sbci	r25, 0xFF	; 255
    594a:	08 95       	ret

0000594c <__floatunsisf>:
    594c:	e8 94       	clt
    594e:	09 c0       	rjmp	.+18     	; 0x5962 <__floatsisf+0x12>

00005950 <__floatsisf>:
    5950:	97 fb       	bst	r25, 7
    5952:	3e f4       	brtc	.+14     	; 0x5962 <__floatsisf+0x12>
    5954:	90 95       	com	r25
    5956:	80 95       	com	r24
    5958:	70 95       	com	r23
    595a:	61 95       	neg	r22
    595c:	7f 4f       	sbci	r23, 0xFF	; 255
    595e:	8f 4f       	sbci	r24, 0xFF	; 255
    5960:	9f 4f       	sbci	r25, 0xFF	; 255
    5962:	99 23       	and	r25, r25
    5964:	a9 f0       	breq	.+42     	; 0x5990 <__floatsisf+0x40>
    5966:	f9 2f       	mov	r31, r25
    5968:	96 e9       	ldi	r25, 0x96	; 150
    596a:	bb 27       	eor	r27, r27
    596c:	93 95       	inc	r25
    596e:	f6 95       	lsr	r31
    5970:	87 95       	ror	r24
    5972:	77 95       	ror	r23
    5974:	67 95       	ror	r22
    5976:	b7 95       	ror	r27
    5978:	f1 11       	cpse	r31, r1
    597a:	f8 cf       	rjmp	.-16     	; 0x596c <__floatsisf+0x1c>
    597c:	fa f4       	brpl	.+62     	; 0x59bc <__floatsisf+0x6c>
    597e:	bb 0f       	add	r27, r27
    5980:	11 f4       	brne	.+4      	; 0x5986 <__floatsisf+0x36>
    5982:	60 ff       	sbrs	r22, 0
    5984:	1b c0       	rjmp	.+54     	; 0x59bc <__floatsisf+0x6c>
    5986:	6f 5f       	subi	r22, 0xFF	; 255
    5988:	7f 4f       	sbci	r23, 0xFF	; 255
    598a:	8f 4f       	sbci	r24, 0xFF	; 255
    598c:	9f 4f       	sbci	r25, 0xFF	; 255
    598e:	16 c0       	rjmp	.+44     	; 0x59bc <__floatsisf+0x6c>
    5990:	88 23       	and	r24, r24
    5992:	11 f0       	breq	.+4      	; 0x5998 <__floatsisf+0x48>
    5994:	96 e9       	ldi	r25, 0x96	; 150
    5996:	11 c0       	rjmp	.+34     	; 0x59ba <__floatsisf+0x6a>
    5998:	77 23       	and	r23, r23
    599a:	21 f0       	breq	.+8      	; 0x59a4 <__floatsisf+0x54>
    599c:	9e e8       	ldi	r25, 0x8E	; 142
    599e:	87 2f       	mov	r24, r23
    59a0:	76 2f       	mov	r23, r22
    59a2:	05 c0       	rjmp	.+10     	; 0x59ae <__floatsisf+0x5e>
    59a4:	66 23       	and	r22, r22
    59a6:	71 f0       	breq	.+28     	; 0x59c4 <__floatsisf+0x74>
    59a8:	96 e8       	ldi	r25, 0x86	; 134
    59aa:	86 2f       	mov	r24, r22
    59ac:	70 e0       	ldi	r23, 0x00	; 0
    59ae:	60 e0       	ldi	r22, 0x00	; 0
    59b0:	2a f0       	brmi	.+10     	; 0x59bc <__floatsisf+0x6c>
    59b2:	9a 95       	dec	r25
    59b4:	66 0f       	add	r22, r22
    59b6:	77 1f       	adc	r23, r23
    59b8:	88 1f       	adc	r24, r24
    59ba:	da f7       	brpl	.-10     	; 0x59b2 <__floatsisf+0x62>
    59bc:	88 0f       	add	r24, r24
    59be:	96 95       	lsr	r25
    59c0:	87 95       	ror	r24
    59c2:	97 f9       	bld	r25, 7
    59c4:	08 95       	ret

000059c6 <__fp_inf>:
    59c6:	97 f9       	bld	r25, 7
    59c8:	9f 67       	ori	r25, 0x7F	; 127
    59ca:	80 e8       	ldi	r24, 0x80	; 128
    59cc:	70 e0       	ldi	r23, 0x00	; 0
    59ce:	60 e0       	ldi	r22, 0x00	; 0
    59d0:	08 95       	ret

000059d2 <__fp_nan>:
    59d2:	9f ef       	ldi	r25, 0xFF	; 255
    59d4:	80 ec       	ldi	r24, 0xC0	; 192
    59d6:	08 95       	ret

000059d8 <__fp_pscA>:
    59d8:	00 24       	eor	r0, r0
    59da:	0a 94       	dec	r0
    59dc:	16 16       	cp	r1, r22
    59de:	17 06       	cpc	r1, r23
    59e0:	18 06       	cpc	r1, r24
    59e2:	09 06       	cpc	r0, r25
    59e4:	08 95       	ret

000059e6 <__fp_pscB>:
    59e6:	00 24       	eor	r0, r0
    59e8:	0a 94       	dec	r0
    59ea:	12 16       	cp	r1, r18
    59ec:	13 06       	cpc	r1, r19
    59ee:	14 06       	cpc	r1, r20
    59f0:	05 06       	cpc	r0, r21
    59f2:	08 95       	ret

000059f4 <__fp_round>:
    59f4:	09 2e       	mov	r0, r25
    59f6:	03 94       	inc	r0
    59f8:	00 0c       	add	r0, r0
    59fa:	11 f4       	brne	.+4      	; 0x5a00 <__fp_round+0xc>
    59fc:	88 23       	and	r24, r24
    59fe:	52 f0       	brmi	.+20     	; 0x5a14 <__fp_round+0x20>
    5a00:	bb 0f       	add	r27, r27
    5a02:	40 f4       	brcc	.+16     	; 0x5a14 <__fp_round+0x20>
    5a04:	bf 2b       	or	r27, r31
    5a06:	11 f4       	brne	.+4      	; 0x5a0c <__fp_round+0x18>
    5a08:	60 ff       	sbrs	r22, 0
    5a0a:	04 c0       	rjmp	.+8      	; 0x5a14 <__fp_round+0x20>
    5a0c:	6f 5f       	subi	r22, 0xFF	; 255
    5a0e:	7f 4f       	sbci	r23, 0xFF	; 255
    5a10:	8f 4f       	sbci	r24, 0xFF	; 255
    5a12:	9f 4f       	sbci	r25, 0xFF	; 255
    5a14:	08 95       	ret

00005a16 <__fp_split3>:
    5a16:	57 fd       	sbrc	r21, 7
    5a18:	90 58       	subi	r25, 0x80	; 128
    5a1a:	44 0f       	add	r20, r20
    5a1c:	55 1f       	adc	r21, r21
    5a1e:	59 f0       	breq	.+22     	; 0x5a36 <__fp_splitA+0x10>
    5a20:	5f 3f       	cpi	r21, 0xFF	; 255
    5a22:	71 f0       	breq	.+28     	; 0x5a40 <__fp_splitA+0x1a>
    5a24:	47 95       	ror	r20

00005a26 <__fp_splitA>:
    5a26:	88 0f       	add	r24, r24
    5a28:	97 fb       	bst	r25, 7
    5a2a:	99 1f       	adc	r25, r25
    5a2c:	61 f0       	breq	.+24     	; 0x5a46 <__fp_splitA+0x20>
    5a2e:	9f 3f       	cpi	r25, 0xFF	; 255
    5a30:	79 f0       	breq	.+30     	; 0x5a50 <__fp_splitA+0x2a>
    5a32:	87 95       	ror	r24
    5a34:	08 95       	ret
    5a36:	12 16       	cp	r1, r18
    5a38:	13 06       	cpc	r1, r19
    5a3a:	14 06       	cpc	r1, r20
    5a3c:	55 1f       	adc	r21, r21
    5a3e:	f2 cf       	rjmp	.-28     	; 0x5a24 <__fp_split3+0xe>
    5a40:	46 95       	lsr	r20
    5a42:	f1 df       	rcall	.-30     	; 0x5a26 <__fp_splitA>
    5a44:	08 c0       	rjmp	.+16     	; 0x5a56 <__fp_splitA+0x30>
    5a46:	16 16       	cp	r1, r22
    5a48:	17 06       	cpc	r1, r23
    5a4a:	18 06       	cpc	r1, r24
    5a4c:	99 1f       	adc	r25, r25
    5a4e:	f1 cf       	rjmp	.-30     	; 0x5a32 <__fp_splitA+0xc>
    5a50:	86 95       	lsr	r24
    5a52:	71 05       	cpc	r23, r1
    5a54:	61 05       	cpc	r22, r1
    5a56:	08 94       	sec
    5a58:	08 95       	ret

00005a5a <__fp_zero>:
    5a5a:	e8 94       	clt

00005a5c <__fp_szero>:
    5a5c:	bb 27       	eor	r27, r27
    5a5e:	66 27       	eor	r22, r22
    5a60:	77 27       	eor	r23, r23
    5a62:	cb 01       	movw	r24, r22
    5a64:	97 f9       	bld	r25, 7
    5a66:	08 95       	ret

00005a68 <__mulsf3>:
    5a68:	0e 94 47 2d 	call	0x5a8e	; 0x5a8e <__mulsf3x>
    5a6c:	0c 94 fa 2c 	jmp	0x59f4	; 0x59f4 <__fp_round>
    5a70:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <__fp_pscA>
    5a74:	38 f0       	brcs	.+14     	; 0x5a84 <__mulsf3+0x1c>
    5a76:	0e 94 f3 2c 	call	0x59e6	; 0x59e6 <__fp_pscB>
    5a7a:	20 f0       	brcs	.+8      	; 0x5a84 <__mulsf3+0x1c>
    5a7c:	95 23       	and	r25, r21
    5a7e:	11 f0       	breq	.+4      	; 0x5a84 <__mulsf3+0x1c>
    5a80:	0c 94 e3 2c 	jmp	0x59c6	; 0x59c6 <__fp_inf>
    5a84:	0c 94 e9 2c 	jmp	0x59d2	; 0x59d2 <__fp_nan>
    5a88:	11 24       	eor	r1, r1
    5a8a:	0c 94 2e 2d 	jmp	0x5a5c	; 0x5a5c <__fp_szero>

00005a8e <__mulsf3x>:
    5a8e:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <__fp_split3>
    5a92:	70 f3       	brcs	.-36     	; 0x5a70 <__mulsf3+0x8>

00005a94 <__mulsf3_pse>:
    5a94:	95 9f       	mul	r25, r21
    5a96:	c1 f3       	breq	.-16     	; 0x5a88 <__mulsf3+0x20>
    5a98:	95 0f       	add	r25, r21
    5a9a:	50 e0       	ldi	r21, 0x00	; 0
    5a9c:	55 1f       	adc	r21, r21
    5a9e:	62 9f       	mul	r22, r18
    5aa0:	f0 01       	movw	r30, r0
    5aa2:	72 9f       	mul	r23, r18
    5aa4:	bb 27       	eor	r27, r27
    5aa6:	f0 0d       	add	r31, r0
    5aa8:	b1 1d       	adc	r27, r1
    5aaa:	63 9f       	mul	r22, r19
    5aac:	aa 27       	eor	r26, r26
    5aae:	f0 0d       	add	r31, r0
    5ab0:	b1 1d       	adc	r27, r1
    5ab2:	aa 1f       	adc	r26, r26
    5ab4:	64 9f       	mul	r22, r20
    5ab6:	66 27       	eor	r22, r22
    5ab8:	b0 0d       	add	r27, r0
    5aba:	a1 1d       	adc	r26, r1
    5abc:	66 1f       	adc	r22, r22
    5abe:	82 9f       	mul	r24, r18
    5ac0:	22 27       	eor	r18, r18
    5ac2:	b0 0d       	add	r27, r0
    5ac4:	a1 1d       	adc	r26, r1
    5ac6:	62 1f       	adc	r22, r18
    5ac8:	73 9f       	mul	r23, r19
    5aca:	b0 0d       	add	r27, r0
    5acc:	a1 1d       	adc	r26, r1
    5ace:	62 1f       	adc	r22, r18
    5ad0:	83 9f       	mul	r24, r19
    5ad2:	a0 0d       	add	r26, r0
    5ad4:	61 1d       	adc	r22, r1
    5ad6:	22 1f       	adc	r18, r18
    5ad8:	74 9f       	mul	r23, r20
    5ada:	33 27       	eor	r19, r19
    5adc:	a0 0d       	add	r26, r0
    5ade:	61 1d       	adc	r22, r1
    5ae0:	23 1f       	adc	r18, r19
    5ae2:	84 9f       	mul	r24, r20
    5ae4:	60 0d       	add	r22, r0
    5ae6:	21 1d       	adc	r18, r1
    5ae8:	82 2f       	mov	r24, r18
    5aea:	76 2f       	mov	r23, r22
    5aec:	6a 2f       	mov	r22, r26
    5aee:	11 24       	eor	r1, r1
    5af0:	9f 57       	subi	r25, 0x7F	; 127
    5af2:	50 40       	sbci	r21, 0x00	; 0
    5af4:	9a f0       	brmi	.+38     	; 0x5b1c <__mulsf3_pse+0x88>
    5af6:	f1 f0       	breq	.+60     	; 0x5b34 <__mulsf3_pse+0xa0>
    5af8:	88 23       	and	r24, r24
    5afa:	4a f0       	brmi	.+18     	; 0x5b0e <__mulsf3_pse+0x7a>
    5afc:	ee 0f       	add	r30, r30
    5afe:	ff 1f       	adc	r31, r31
    5b00:	bb 1f       	adc	r27, r27
    5b02:	66 1f       	adc	r22, r22
    5b04:	77 1f       	adc	r23, r23
    5b06:	88 1f       	adc	r24, r24
    5b08:	91 50       	subi	r25, 0x01	; 1
    5b0a:	50 40       	sbci	r21, 0x00	; 0
    5b0c:	a9 f7       	brne	.-22     	; 0x5af8 <__mulsf3_pse+0x64>
    5b0e:	9e 3f       	cpi	r25, 0xFE	; 254
    5b10:	51 05       	cpc	r21, r1
    5b12:	80 f0       	brcs	.+32     	; 0x5b34 <__mulsf3_pse+0xa0>
    5b14:	0c 94 e3 2c 	jmp	0x59c6	; 0x59c6 <__fp_inf>
    5b18:	0c 94 2e 2d 	jmp	0x5a5c	; 0x5a5c <__fp_szero>
    5b1c:	5f 3f       	cpi	r21, 0xFF	; 255
    5b1e:	e4 f3       	brlt	.-8      	; 0x5b18 <__mulsf3_pse+0x84>
    5b20:	98 3e       	cpi	r25, 0xE8	; 232
    5b22:	d4 f3       	brlt	.-12     	; 0x5b18 <__mulsf3_pse+0x84>
    5b24:	86 95       	lsr	r24
    5b26:	77 95       	ror	r23
    5b28:	67 95       	ror	r22
    5b2a:	b7 95       	ror	r27
    5b2c:	f7 95       	ror	r31
    5b2e:	e7 95       	ror	r30
    5b30:	9f 5f       	subi	r25, 0xFF	; 255
    5b32:	c1 f7       	brne	.-16     	; 0x5b24 <__mulsf3_pse+0x90>
    5b34:	fe 2b       	or	r31, r30
    5b36:	88 0f       	add	r24, r24
    5b38:	91 1d       	adc	r25, r1
    5b3a:	96 95       	lsr	r25
    5b3c:	87 95       	ror	r24
    5b3e:	97 f9       	bld	r25, 7
    5b40:	08 95       	ret

00005b42 <__udivmodqi4>:
    5b42:	99 1b       	sub	r25, r25
    5b44:	79 e0       	ldi	r23, 0x09	; 9
    5b46:	04 c0       	rjmp	.+8      	; 0x5b50 <__udivmodqi4_ep>

00005b48 <__udivmodqi4_loop>:
    5b48:	99 1f       	adc	r25, r25
    5b4a:	96 17       	cp	r25, r22
    5b4c:	08 f0       	brcs	.+2      	; 0x5b50 <__udivmodqi4_ep>
    5b4e:	96 1b       	sub	r25, r22

00005b50 <__udivmodqi4_ep>:
    5b50:	88 1f       	adc	r24, r24
    5b52:	7a 95       	dec	r23
    5b54:	c9 f7       	brne	.-14     	; 0x5b48 <__udivmodqi4_loop>
    5b56:	80 95       	com	r24
    5b58:	08 95       	ret

00005b5a <__udivmodhi4>:
    5b5a:	aa 1b       	sub	r26, r26
    5b5c:	bb 1b       	sub	r27, r27
    5b5e:	51 e1       	ldi	r21, 0x11	; 17
    5b60:	07 c0       	rjmp	.+14     	; 0x5b70 <__udivmodhi4_ep>

00005b62 <__udivmodhi4_loop>:
    5b62:	aa 1f       	adc	r26, r26
    5b64:	bb 1f       	adc	r27, r27
    5b66:	a6 17       	cp	r26, r22
    5b68:	b7 07       	cpc	r27, r23
    5b6a:	10 f0       	brcs	.+4      	; 0x5b70 <__udivmodhi4_ep>
    5b6c:	a6 1b       	sub	r26, r22
    5b6e:	b7 0b       	sbc	r27, r23

00005b70 <__udivmodhi4_ep>:
    5b70:	88 1f       	adc	r24, r24
    5b72:	99 1f       	adc	r25, r25
    5b74:	5a 95       	dec	r21
    5b76:	a9 f7       	brne	.-22     	; 0x5b62 <__udivmodhi4_loop>
    5b78:	80 95       	com	r24
    5b7a:	90 95       	com	r25
    5b7c:	bc 01       	movw	r22, r24
    5b7e:	cd 01       	movw	r24, r26
    5b80:	08 95       	ret

00005b82 <__divmodhi4>:
    5b82:	97 fb       	bst	r25, 7
    5b84:	07 2e       	mov	r0, r23
    5b86:	16 f4       	brtc	.+4      	; 0x5b8c <__divmodhi4+0xa>
    5b88:	00 94       	com	r0
    5b8a:	07 d0       	rcall	.+14     	; 0x5b9a <__divmodhi4_neg1>
    5b8c:	77 fd       	sbrc	r23, 7
    5b8e:	09 d0       	rcall	.+18     	; 0x5ba2 <__divmodhi4_neg2>
    5b90:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__udivmodhi4>
    5b94:	07 fc       	sbrc	r0, 7
    5b96:	05 d0       	rcall	.+10     	; 0x5ba2 <__divmodhi4_neg2>
    5b98:	3e f4       	brtc	.+14     	; 0x5ba8 <__divmodhi4_exit>

00005b9a <__divmodhi4_neg1>:
    5b9a:	90 95       	com	r25
    5b9c:	81 95       	neg	r24
    5b9e:	9f 4f       	sbci	r25, 0xFF	; 255
    5ba0:	08 95       	ret

00005ba2 <__divmodhi4_neg2>:
    5ba2:	70 95       	com	r23
    5ba4:	61 95       	neg	r22
    5ba6:	7f 4f       	sbci	r23, 0xFF	; 255

00005ba8 <__divmodhi4_exit>:
    5ba8:	08 95       	ret

00005baa <__udivmodsi4>:
    5baa:	a1 e2       	ldi	r26, 0x21	; 33
    5bac:	1a 2e       	mov	r1, r26
    5bae:	aa 1b       	sub	r26, r26
    5bb0:	bb 1b       	sub	r27, r27
    5bb2:	fd 01       	movw	r30, r26
    5bb4:	0d c0       	rjmp	.+26     	; 0x5bd0 <__udivmodsi4_ep>

00005bb6 <__udivmodsi4_loop>:
    5bb6:	aa 1f       	adc	r26, r26
    5bb8:	bb 1f       	adc	r27, r27
    5bba:	ee 1f       	adc	r30, r30
    5bbc:	ff 1f       	adc	r31, r31
    5bbe:	a2 17       	cp	r26, r18
    5bc0:	b3 07       	cpc	r27, r19
    5bc2:	e4 07       	cpc	r30, r20
    5bc4:	f5 07       	cpc	r31, r21
    5bc6:	20 f0       	brcs	.+8      	; 0x5bd0 <__udivmodsi4_ep>
    5bc8:	a2 1b       	sub	r26, r18
    5bca:	b3 0b       	sbc	r27, r19
    5bcc:	e4 0b       	sbc	r30, r20
    5bce:	f5 0b       	sbc	r31, r21

00005bd0 <__udivmodsi4_ep>:
    5bd0:	66 1f       	adc	r22, r22
    5bd2:	77 1f       	adc	r23, r23
    5bd4:	88 1f       	adc	r24, r24
    5bd6:	99 1f       	adc	r25, r25
    5bd8:	1a 94       	dec	r1
    5bda:	69 f7       	brne	.-38     	; 0x5bb6 <__udivmodsi4_loop>
    5bdc:	60 95       	com	r22
    5bde:	70 95       	com	r23
    5be0:	80 95       	com	r24
    5be2:	90 95       	com	r25
    5be4:	9b 01       	movw	r18, r22
    5be6:	ac 01       	movw	r20, r24
    5be8:	bd 01       	movw	r22, r26
    5bea:	cf 01       	movw	r24, r30
    5bec:	08 95       	ret

00005bee <__tablejump2__>:
    5bee:	ee 0f       	add	r30, r30
    5bf0:	ff 1f       	adc	r31, r31
    5bf2:	00 24       	eor	r0, r0
    5bf4:	00 1c       	adc	r0, r0
    5bf6:	0b be       	out	0x3b, r0	; 59
    5bf8:	07 90       	elpm	r0, Z+
    5bfa:	f6 91       	elpm	r31, Z
    5bfc:	e0 2d       	mov	r30, r0
    5bfe:	09 94       	ijmp

00005c00 <__ashrdi3>:
    5c00:	97 fb       	bst	r25, 7
    5c02:	10 f8       	bld	r1, 0

00005c04 <__lshrdi3>:
    5c04:	16 94       	lsr	r1
    5c06:	00 08       	sbc	r0, r0
    5c08:	0f 93       	push	r16
    5c0a:	08 30       	cpi	r16, 0x08	; 8
    5c0c:	98 f0       	brcs	.+38     	; 0x5c34 <__lshrdi3+0x30>
    5c0e:	08 50       	subi	r16, 0x08	; 8
    5c10:	23 2f       	mov	r18, r19
    5c12:	34 2f       	mov	r19, r20
    5c14:	45 2f       	mov	r20, r21
    5c16:	56 2f       	mov	r21, r22
    5c18:	67 2f       	mov	r22, r23
    5c1a:	78 2f       	mov	r23, r24
    5c1c:	89 2f       	mov	r24, r25
    5c1e:	90 2d       	mov	r25, r0
    5c20:	f4 cf       	rjmp	.-24     	; 0x5c0a <__lshrdi3+0x6>
    5c22:	05 94       	asr	r0
    5c24:	97 95       	ror	r25
    5c26:	87 95       	ror	r24
    5c28:	77 95       	ror	r23
    5c2a:	67 95       	ror	r22
    5c2c:	57 95       	ror	r21
    5c2e:	47 95       	ror	r20
    5c30:	37 95       	ror	r19
    5c32:	27 95       	ror	r18
    5c34:	0a 95       	dec	r16
    5c36:	aa f7       	brpl	.-22     	; 0x5c22 <__lshrdi3+0x1e>
    5c38:	0f 91       	pop	r16
    5c3a:	08 95       	ret

00005c3c <malloc>:
    5c3c:	cf 93       	push	r28
    5c3e:	df 93       	push	r29
    5c40:	82 30       	cpi	r24, 0x02	; 2
    5c42:	91 05       	cpc	r25, r1
    5c44:	10 f4       	brcc	.+4      	; 0x5c4a <malloc+0xe>
    5c46:	82 e0       	ldi	r24, 0x02	; 2
    5c48:	90 e0       	ldi	r25, 0x00	; 0
    5c4a:	e0 91 c8 0c 	lds	r30, 0x0CC8	; 0x800cc8 <__flp>
    5c4e:	f0 91 c9 0c 	lds	r31, 0x0CC9	; 0x800cc9 <__flp+0x1>
    5c52:	20 e0       	ldi	r18, 0x00	; 0
    5c54:	30 e0       	ldi	r19, 0x00	; 0
    5c56:	c0 e0       	ldi	r28, 0x00	; 0
    5c58:	d0 e0       	ldi	r29, 0x00	; 0
    5c5a:	30 97       	sbiw	r30, 0x00	; 0
    5c5c:	11 f1       	breq	.+68     	; 0x5ca2 <malloc+0x66>
    5c5e:	40 81       	ld	r20, Z
    5c60:	51 81       	ldd	r21, Z+1	; 0x01
    5c62:	48 17       	cp	r20, r24
    5c64:	59 07       	cpc	r21, r25
    5c66:	c0 f0       	brcs	.+48     	; 0x5c98 <malloc+0x5c>
    5c68:	48 17       	cp	r20, r24
    5c6a:	59 07       	cpc	r21, r25
    5c6c:	61 f4       	brne	.+24     	; 0x5c86 <malloc+0x4a>
    5c6e:	82 81       	ldd	r24, Z+2	; 0x02
    5c70:	93 81       	ldd	r25, Z+3	; 0x03
    5c72:	20 97       	sbiw	r28, 0x00	; 0
    5c74:	19 f0       	breq	.+6      	; 0x5c7c <malloc+0x40>
    5c76:	9b 83       	std	Y+3, r25	; 0x03
    5c78:	8a 83       	std	Y+2, r24	; 0x02
    5c7a:	2b c0       	rjmp	.+86     	; 0x5cd2 <malloc+0x96>
    5c7c:	90 93 c9 0c 	sts	0x0CC9, r25	; 0x800cc9 <__flp+0x1>
    5c80:	80 93 c8 0c 	sts	0x0CC8, r24	; 0x800cc8 <__flp>
    5c84:	26 c0       	rjmp	.+76     	; 0x5cd2 <malloc+0x96>
    5c86:	21 15       	cp	r18, r1
    5c88:	31 05       	cpc	r19, r1
    5c8a:	19 f0       	breq	.+6      	; 0x5c92 <malloc+0x56>
    5c8c:	42 17       	cp	r20, r18
    5c8e:	53 07       	cpc	r21, r19
    5c90:	18 f4       	brcc	.+6      	; 0x5c98 <malloc+0x5c>
    5c92:	9a 01       	movw	r18, r20
    5c94:	be 01       	movw	r22, r28
    5c96:	df 01       	movw	r26, r30
    5c98:	ef 01       	movw	r28, r30
    5c9a:	02 80       	ldd	r0, Z+2	; 0x02
    5c9c:	f3 81       	ldd	r31, Z+3	; 0x03
    5c9e:	e0 2d       	mov	r30, r0
    5ca0:	dc cf       	rjmp	.-72     	; 0x5c5a <malloc+0x1e>
    5ca2:	21 15       	cp	r18, r1
    5ca4:	31 05       	cpc	r19, r1
    5ca6:	09 f1       	breq	.+66     	; 0x5cea <malloc+0xae>
    5ca8:	28 1b       	sub	r18, r24
    5caa:	39 0b       	sbc	r19, r25
    5cac:	24 30       	cpi	r18, 0x04	; 4
    5cae:	31 05       	cpc	r19, r1
    5cb0:	90 f4       	brcc	.+36     	; 0x5cd6 <malloc+0x9a>
    5cb2:	12 96       	adiw	r26, 0x02	; 2
    5cb4:	8d 91       	ld	r24, X+
    5cb6:	9c 91       	ld	r25, X
    5cb8:	13 97       	sbiw	r26, 0x03	; 3
    5cba:	61 15       	cp	r22, r1
    5cbc:	71 05       	cpc	r23, r1
    5cbe:	21 f0       	breq	.+8      	; 0x5cc8 <malloc+0x8c>
    5cc0:	fb 01       	movw	r30, r22
    5cc2:	93 83       	std	Z+3, r25	; 0x03
    5cc4:	82 83       	std	Z+2, r24	; 0x02
    5cc6:	04 c0       	rjmp	.+8      	; 0x5cd0 <malloc+0x94>
    5cc8:	90 93 c9 0c 	sts	0x0CC9, r25	; 0x800cc9 <__flp+0x1>
    5ccc:	80 93 c8 0c 	sts	0x0CC8, r24	; 0x800cc8 <__flp>
    5cd0:	fd 01       	movw	r30, r26
    5cd2:	32 96       	adiw	r30, 0x02	; 2
    5cd4:	44 c0       	rjmp	.+136    	; 0x5d5e <malloc+0x122>
    5cd6:	fd 01       	movw	r30, r26
    5cd8:	e2 0f       	add	r30, r18
    5cda:	f3 1f       	adc	r31, r19
    5cdc:	81 93       	st	Z+, r24
    5cde:	91 93       	st	Z+, r25
    5ce0:	22 50       	subi	r18, 0x02	; 2
    5ce2:	31 09       	sbc	r19, r1
    5ce4:	2d 93       	st	X+, r18
    5ce6:	3c 93       	st	X, r19
    5ce8:	3a c0       	rjmp	.+116    	; 0x5d5e <malloc+0x122>
    5cea:	20 91 c6 0c 	lds	r18, 0x0CC6	; 0x800cc6 <__brkval>
    5cee:	30 91 c7 0c 	lds	r19, 0x0CC7	; 0x800cc7 <__brkval+0x1>
    5cf2:	23 2b       	or	r18, r19
    5cf4:	41 f4       	brne	.+16     	; 0x5d06 <malloc+0xca>
    5cf6:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5cfa:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5cfe:	30 93 c7 0c 	sts	0x0CC7, r19	; 0x800cc7 <__brkval+0x1>
    5d02:	20 93 c6 0c 	sts	0x0CC6, r18	; 0x800cc6 <__brkval>
    5d06:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    5d0a:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    5d0e:	21 15       	cp	r18, r1
    5d10:	31 05       	cpc	r19, r1
    5d12:	41 f4       	brne	.+16     	; 0x5d24 <malloc+0xe8>
    5d14:	2d b7       	in	r18, 0x3d	; 61
    5d16:	3e b7       	in	r19, 0x3e	; 62
    5d18:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5d1c:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5d20:	24 1b       	sub	r18, r20
    5d22:	35 0b       	sbc	r19, r21
    5d24:	e0 91 c6 0c 	lds	r30, 0x0CC6	; 0x800cc6 <__brkval>
    5d28:	f0 91 c7 0c 	lds	r31, 0x0CC7	; 0x800cc7 <__brkval+0x1>
    5d2c:	e2 17       	cp	r30, r18
    5d2e:	f3 07       	cpc	r31, r19
    5d30:	a0 f4       	brcc	.+40     	; 0x5d5a <malloc+0x11e>
    5d32:	2e 1b       	sub	r18, r30
    5d34:	3f 0b       	sbc	r19, r31
    5d36:	28 17       	cp	r18, r24
    5d38:	39 07       	cpc	r19, r25
    5d3a:	78 f0       	brcs	.+30     	; 0x5d5a <malloc+0x11e>
    5d3c:	ac 01       	movw	r20, r24
    5d3e:	4e 5f       	subi	r20, 0xFE	; 254
    5d40:	5f 4f       	sbci	r21, 0xFF	; 255
    5d42:	24 17       	cp	r18, r20
    5d44:	35 07       	cpc	r19, r21
    5d46:	48 f0       	brcs	.+18     	; 0x5d5a <malloc+0x11e>
    5d48:	4e 0f       	add	r20, r30
    5d4a:	5f 1f       	adc	r21, r31
    5d4c:	50 93 c7 0c 	sts	0x0CC7, r21	; 0x800cc7 <__brkval+0x1>
    5d50:	40 93 c6 0c 	sts	0x0CC6, r20	; 0x800cc6 <__brkval>
    5d54:	81 93       	st	Z+, r24
    5d56:	91 93       	st	Z+, r25
    5d58:	02 c0       	rjmp	.+4      	; 0x5d5e <malloc+0x122>
    5d5a:	e0 e0       	ldi	r30, 0x00	; 0
    5d5c:	f0 e0       	ldi	r31, 0x00	; 0
    5d5e:	cf 01       	movw	r24, r30
    5d60:	df 91       	pop	r29
    5d62:	cf 91       	pop	r28
    5d64:	08 95       	ret

00005d66 <free>:
    5d66:	0f 93       	push	r16
    5d68:	1f 93       	push	r17
    5d6a:	cf 93       	push	r28
    5d6c:	df 93       	push	r29
    5d6e:	00 97       	sbiw	r24, 0x00	; 0
    5d70:	09 f4       	brne	.+2      	; 0x5d74 <free+0xe>
    5d72:	8c c0       	rjmp	.+280    	; 0x5e8c <free+0x126>
    5d74:	fc 01       	movw	r30, r24
    5d76:	32 97       	sbiw	r30, 0x02	; 2
    5d78:	13 82       	std	Z+3, r1	; 0x03
    5d7a:	12 82       	std	Z+2, r1	; 0x02
    5d7c:	00 91 c8 0c 	lds	r16, 0x0CC8	; 0x800cc8 <__flp>
    5d80:	10 91 c9 0c 	lds	r17, 0x0CC9	; 0x800cc9 <__flp+0x1>
    5d84:	01 15       	cp	r16, r1
    5d86:	11 05       	cpc	r17, r1
    5d88:	81 f4       	brne	.+32     	; 0x5daa <free+0x44>
    5d8a:	20 81       	ld	r18, Z
    5d8c:	31 81       	ldd	r19, Z+1	; 0x01
    5d8e:	82 0f       	add	r24, r18
    5d90:	93 1f       	adc	r25, r19
    5d92:	20 91 c6 0c 	lds	r18, 0x0CC6	; 0x800cc6 <__brkval>
    5d96:	30 91 c7 0c 	lds	r19, 0x0CC7	; 0x800cc7 <__brkval+0x1>
    5d9a:	28 17       	cp	r18, r24
    5d9c:	39 07       	cpc	r19, r25
    5d9e:	79 f5       	brne	.+94     	; 0x5dfe <free+0x98>
    5da0:	f0 93 c7 0c 	sts	0x0CC7, r31	; 0x800cc7 <__brkval+0x1>
    5da4:	e0 93 c6 0c 	sts	0x0CC6, r30	; 0x800cc6 <__brkval>
    5da8:	71 c0       	rjmp	.+226    	; 0x5e8c <free+0x126>
    5daa:	d8 01       	movw	r26, r16
    5dac:	40 e0       	ldi	r20, 0x00	; 0
    5dae:	50 e0       	ldi	r21, 0x00	; 0
    5db0:	ae 17       	cp	r26, r30
    5db2:	bf 07       	cpc	r27, r31
    5db4:	50 f4       	brcc	.+20     	; 0x5dca <free+0x64>
    5db6:	12 96       	adiw	r26, 0x02	; 2
    5db8:	2d 91       	ld	r18, X+
    5dba:	3c 91       	ld	r19, X
    5dbc:	13 97       	sbiw	r26, 0x03	; 3
    5dbe:	ad 01       	movw	r20, r26
    5dc0:	21 15       	cp	r18, r1
    5dc2:	31 05       	cpc	r19, r1
    5dc4:	09 f1       	breq	.+66     	; 0x5e08 <free+0xa2>
    5dc6:	d9 01       	movw	r26, r18
    5dc8:	f3 cf       	rjmp	.-26     	; 0x5db0 <free+0x4a>
    5dca:	9d 01       	movw	r18, r26
    5dcc:	da 01       	movw	r26, r20
    5dce:	33 83       	std	Z+3, r19	; 0x03
    5dd0:	22 83       	std	Z+2, r18	; 0x02
    5dd2:	60 81       	ld	r22, Z
    5dd4:	71 81       	ldd	r23, Z+1	; 0x01
    5dd6:	86 0f       	add	r24, r22
    5dd8:	97 1f       	adc	r25, r23
    5dda:	82 17       	cp	r24, r18
    5ddc:	93 07       	cpc	r25, r19
    5dde:	69 f4       	brne	.+26     	; 0x5dfa <free+0x94>
    5de0:	ec 01       	movw	r28, r24
    5de2:	28 81       	ld	r18, Y
    5de4:	39 81       	ldd	r19, Y+1	; 0x01
    5de6:	26 0f       	add	r18, r22
    5de8:	37 1f       	adc	r19, r23
    5dea:	2e 5f       	subi	r18, 0xFE	; 254
    5dec:	3f 4f       	sbci	r19, 0xFF	; 255
    5dee:	31 83       	std	Z+1, r19	; 0x01
    5df0:	20 83       	st	Z, r18
    5df2:	8a 81       	ldd	r24, Y+2	; 0x02
    5df4:	9b 81       	ldd	r25, Y+3	; 0x03
    5df6:	93 83       	std	Z+3, r25	; 0x03
    5df8:	82 83       	std	Z+2, r24	; 0x02
    5dfa:	45 2b       	or	r20, r21
    5dfc:	29 f4       	brne	.+10     	; 0x5e08 <free+0xa2>
    5dfe:	f0 93 c9 0c 	sts	0x0CC9, r31	; 0x800cc9 <__flp+0x1>
    5e02:	e0 93 c8 0c 	sts	0x0CC8, r30	; 0x800cc8 <__flp>
    5e06:	42 c0       	rjmp	.+132    	; 0x5e8c <free+0x126>
    5e08:	13 96       	adiw	r26, 0x03	; 3
    5e0a:	fc 93       	st	X, r31
    5e0c:	ee 93       	st	-X, r30
    5e0e:	12 97       	sbiw	r26, 0x02	; 2
    5e10:	ed 01       	movw	r28, r26
    5e12:	49 91       	ld	r20, Y+
    5e14:	59 91       	ld	r21, Y+
    5e16:	9e 01       	movw	r18, r28
    5e18:	24 0f       	add	r18, r20
    5e1a:	35 1f       	adc	r19, r21
    5e1c:	e2 17       	cp	r30, r18
    5e1e:	f3 07       	cpc	r31, r19
    5e20:	71 f4       	brne	.+28     	; 0x5e3e <free+0xd8>
    5e22:	80 81       	ld	r24, Z
    5e24:	91 81       	ldd	r25, Z+1	; 0x01
    5e26:	84 0f       	add	r24, r20
    5e28:	95 1f       	adc	r25, r21
    5e2a:	02 96       	adiw	r24, 0x02	; 2
    5e2c:	11 96       	adiw	r26, 0x01	; 1
    5e2e:	9c 93       	st	X, r25
    5e30:	8e 93       	st	-X, r24
    5e32:	82 81       	ldd	r24, Z+2	; 0x02
    5e34:	93 81       	ldd	r25, Z+3	; 0x03
    5e36:	13 96       	adiw	r26, 0x03	; 3
    5e38:	9c 93       	st	X, r25
    5e3a:	8e 93       	st	-X, r24
    5e3c:	12 97       	sbiw	r26, 0x02	; 2
    5e3e:	e0 e0       	ldi	r30, 0x00	; 0
    5e40:	f0 e0       	ldi	r31, 0x00	; 0
    5e42:	d8 01       	movw	r26, r16
    5e44:	12 96       	adiw	r26, 0x02	; 2
    5e46:	8d 91       	ld	r24, X+
    5e48:	9c 91       	ld	r25, X
    5e4a:	13 97       	sbiw	r26, 0x03	; 3
    5e4c:	00 97       	sbiw	r24, 0x00	; 0
    5e4e:	19 f0       	breq	.+6      	; 0x5e56 <free+0xf0>
    5e50:	f8 01       	movw	r30, r16
    5e52:	8c 01       	movw	r16, r24
    5e54:	f6 cf       	rjmp	.-20     	; 0x5e42 <free+0xdc>
    5e56:	8d 91       	ld	r24, X+
    5e58:	9c 91       	ld	r25, X
    5e5a:	98 01       	movw	r18, r16
    5e5c:	2e 5f       	subi	r18, 0xFE	; 254
    5e5e:	3f 4f       	sbci	r19, 0xFF	; 255
    5e60:	82 0f       	add	r24, r18
    5e62:	93 1f       	adc	r25, r19
    5e64:	20 91 c6 0c 	lds	r18, 0x0CC6	; 0x800cc6 <__brkval>
    5e68:	30 91 c7 0c 	lds	r19, 0x0CC7	; 0x800cc7 <__brkval+0x1>
    5e6c:	28 17       	cp	r18, r24
    5e6e:	39 07       	cpc	r19, r25
    5e70:	69 f4       	brne	.+26     	; 0x5e8c <free+0x126>
    5e72:	30 97       	sbiw	r30, 0x00	; 0
    5e74:	29 f4       	brne	.+10     	; 0x5e80 <free+0x11a>
    5e76:	10 92 c9 0c 	sts	0x0CC9, r1	; 0x800cc9 <__flp+0x1>
    5e7a:	10 92 c8 0c 	sts	0x0CC8, r1	; 0x800cc8 <__flp>
    5e7e:	02 c0       	rjmp	.+4      	; 0x5e84 <free+0x11e>
    5e80:	13 82       	std	Z+3, r1	; 0x03
    5e82:	12 82       	std	Z+2, r1	; 0x02
    5e84:	10 93 c7 0c 	sts	0x0CC7, r17	; 0x800cc7 <__brkval+0x1>
    5e88:	00 93 c6 0c 	sts	0x0CC6, r16	; 0x800cc6 <__brkval>
    5e8c:	df 91       	pop	r29
    5e8e:	cf 91       	pop	r28
    5e90:	1f 91       	pop	r17
    5e92:	0f 91       	pop	r16
    5e94:	08 95       	ret

00005e96 <do_rand>:
    5e96:	8f 92       	push	r8
    5e98:	9f 92       	push	r9
    5e9a:	af 92       	push	r10
    5e9c:	bf 92       	push	r11
    5e9e:	cf 92       	push	r12
    5ea0:	df 92       	push	r13
    5ea2:	ef 92       	push	r14
    5ea4:	ff 92       	push	r15
    5ea6:	cf 93       	push	r28
    5ea8:	df 93       	push	r29
    5eaa:	ec 01       	movw	r28, r24
    5eac:	68 81       	ld	r22, Y
    5eae:	79 81       	ldd	r23, Y+1	; 0x01
    5eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    5eb2:	9b 81       	ldd	r25, Y+3	; 0x03
    5eb4:	61 15       	cp	r22, r1
    5eb6:	71 05       	cpc	r23, r1
    5eb8:	81 05       	cpc	r24, r1
    5eba:	91 05       	cpc	r25, r1
    5ebc:	21 f4       	brne	.+8      	; 0x5ec6 <do_rand+0x30>
    5ebe:	64 e2       	ldi	r22, 0x24	; 36
    5ec0:	79 ed       	ldi	r23, 0xD9	; 217
    5ec2:	8b e5       	ldi	r24, 0x5B	; 91
    5ec4:	97 e0       	ldi	r25, 0x07	; 7
    5ec6:	2d e1       	ldi	r18, 0x1D	; 29
    5ec8:	33 ef       	ldi	r19, 0xF3	; 243
    5eca:	41 e0       	ldi	r20, 0x01	; 1
    5ecc:	50 e0       	ldi	r21, 0x00	; 0
    5ece:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <__divmodsi4>
    5ed2:	49 01       	movw	r8, r18
    5ed4:	5a 01       	movw	r10, r20
    5ed6:	9b 01       	movw	r18, r22
    5ed8:	ac 01       	movw	r20, r24
    5eda:	a7 ea       	ldi	r26, 0xA7	; 167
    5edc:	b1 e4       	ldi	r27, 0x41	; 65
    5ede:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <__muluhisi3>
    5ee2:	6b 01       	movw	r12, r22
    5ee4:	7c 01       	movw	r14, r24
    5ee6:	ac ee       	ldi	r26, 0xEC	; 236
    5ee8:	b4 ef       	ldi	r27, 0xF4	; 244
    5eea:	a5 01       	movw	r20, r10
    5eec:	94 01       	movw	r18, r8
    5eee:	0e 94 7a 35 	call	0x6af4	; 0x6af4 <__mulohisi3>
    5ef2:	dc 01       	movw	r26, r24
    5ef4:	cb 01       	movw	r24, r22
    5ef6:	8c 0d       	add	r24, r12
    5ef8:	9d 1d       	adc	r25, r13
    5efa:	ae 1d       	adc	r26, r14
    5efc:	bf 1d       	adc	r27, r15
    5efe:	b7 ff       	sbrs	r27, 7
    5f00:	03 c0       	rjmp	.+6      	; 0x5f08 <do_rand+0x72>
    5f02:	01 97       	sbiw	r24, 0x01	; 1
    5f04:	a1 09       	sbc	r26, r1
    5f06:	b0 48       	sbci	r27, 0x80	; 128
    5f08:	88 83       	st	Y, r24
    5f0a:	99 83       	std	Y+1, r25	; 0x01
    5f0c:	aa 83       	std	Y+2, r26	; 0x02
    5f0e:	bb 83       	std	Y+3, r27	; 0x03
    5f10:	9f 77       	andi	r25, 0x7F	; 127
    5f12:	df 91       	pop	r29
    5f14:	cf 91       	pop	r28
    5f16:	ff 90       	pop	r15
    5f18:	ef 90       	pop	r14
    5f1a:	df 90       	pop	r13
    5f1c:	cf 90       	pop	r12
    5f1e:	bf 90       	pop	r11
    5f20:	af 90       	pop	r10
    5f22:	9f 90       	pop	r9
    5f24:	8f 90       	pop	r8
    5f26:	08 95       	ret

00005f28 <rand_r>:
    5f28:	0c 94 4b 2f 	jmp	0x5e96	; 0x5e96 <do_rand>

00005f2c <rand>:
    5f2c:	86 e0       	ldi	r24, 0x06	; 6
    5f2e:	92 e0       	ldi	r25, 0x02	; 2
    5f30:	0c 94 4b 2f 	jmp	0x5e96	; 0x5e96 <do_rand>

00005f34 <srand>:
    5f34:	a0 e0       	ldi	r26, 0x00	; 0
    5f36:	b0 e0       	ldi	r27, 0x00	; 0
    5f38:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <next>
    5f3c:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <next+0x1>
    5f40:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <next+0x2>
    5f44:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <next+0x3>
    5f48:	08 95       	ret

00005f4a <strtoul>:
    5f4a:	2f 92       	push	r2
    5f4c:	3f 92       	push	r3
    5f4e:	4f 92       	push	r4
    5f50:	5f 92       	push	r5
    5f52:	6f 92       	push	r6
    5f54:	7f 92       	push	r7
    5f56:	8f 92       	push	r8
    5f58:	9f 92       	push	r9
    5f5a:	af 92       	push	r10
    5f5c:	bf 92       	push	r11
    5f5e:	cf 92       	push	r12
    5f60:	df 92       	push	r13
    5f62:	ef 92       	push	r14
    5f64:	ff 92       	push	r15
    5f66:	0f 93       	push	r16
    5f68:	1f 93       	push	r17
    5f6a:	cf 93       	push	r28
    5f6c:	df 93       	push	r29
    5f6e:	00 d0       	rcall	.+0      	; 0x5f70 <strtoul+0x26>
    5f70:	00 d0       	rcall	.+0      	; 0x5f72 <strtoul+0x28>
    5f72:	00 d0       	rcall	.+0      	; 0x5f74 <strtoul+0x2a>
    5f74:	cd b7       	in	r28, 0x3d	; 61
    5f76:	de b7       	in	r29, 0x3e	; 62
    5f78:	5c 01       	movw	r10, r24
    5f7a:	6b 01       	movw	r12, r22
    5f7c:	7a 01       	movw	r14, r20
    5f7e:	61 15       	cp	r22, r1
    5f80:	71 05       	cpc	r23, r1
    5f82:	19 f0       	breq	.+6      	; 0x5f8a <strtoul+0x40>
    5f84:	db 01       	movw	r26, r22
    5f86:	8d 93       	st	X+, r24
    5f88:	9c 93       	st	X, r25
    5f8a:	e1 14       	cp	r14, r1
    5f8c:	f1 04       	cpc	r15, r1
    5f8e:	29 f0       	breq	.+10     	; 0x5f9a <strtoul+0x50>
    5f90:	c7 01       	movw	r24, r14
    5f92:	02 97       	sbiw	r24, 0x02	; 2
    5f94:	83 97       	sbiw	r24, 0x23	; 35
    5f96:	08 f0       	brcs	.+2      	; 0x5f9a <strtoul+0x50>
    5f98:	dc c0       	rjmp	.+440    	; 0x6152 <strtoul+0x208>
    5f9a:	35 01       	movw	r6, r10
    5f9c:	bf ef       	ldi	r27, 0xFF	; 255
    5f9e:	6b 1a       	sub	r6, r27
    5fa0:	7b 0a       	sbc	r7, r27
    5fa2:	f5 01       	movw	r30, r10
    5fa4:	10 81       	ld	r17, Z
    5fa6:	81 2f       	mov	r24, r17
    5fa8:	90 e0       	ldi	r25, 0x00	; 0
    5faa:	0e 94 d7 31 	call	0x63ae	; 0x63ae <isspace>
    5fae:	89 2b       	or	r24, r25
    5fb0:	11 f0       	breq	.+4      	; 0x5fb6 <strtoul+0x6c>
    5fb2:	53 01       	movw	r10, r6
    5fb4:	f2 cf       	rjmp	.-28     	; 0x5f9a <strtoul+0x50>
    5fb6:	1d 32       	cpi	r17, 0x2D	; 45
    5fb8:	49 f4       	brne	.+18     	; 0x5fcc <strtoul+0x82>
    5fba:	35 01       	movw	r6, r10
    5fbc:	f2 e0       	ldi	r31, 0x02	; 2
    5fbe:	6f 0e       	add	r6, r31
    5fc0:	71 1c       	adc	r7, r1
    5fc2:	d5 01       	movw	r26, r10
    5fc4:	11 96       	adiw	r26, 0x01	; 1
    5fc6:	1c 91       	ld	r17, X
    5fc8:	01 e0       	ldi	r16, 0x01	; 1
    5fca:	09 c0       	rjmp	.+18     	; 0x5fde <strtoul+0x94>
    5fcc:	1b 32       	cpi	r17, 0x2B	; 43
    5fce:	31 f4       	brne	.+12     	; 0x5fdc <strtoul+0x92>
    5fd0:	35 01       	movw	r6, r10
    5fd2:	b2 e0       	ldi	r27, 0x02	; 2
    5fd4:	6b 0e       	add	r6, r27
    5fd6:	71 1c       	adc	r7, r1
    5fd8:	f5 01       	movw	r30, r10
    5fda:	11 81       	ldd	r17, Z+1	; 0x01
    5fdc:	00 e0       	ldi	r16, 0x00	; 0
    5fde:	e1 14       	cp	r14, r1
    5fe0:	f1 04       	cpc	r15, r1
    5fe2:	09 f4       	brne	.+2      	; 0x5fe6 <strtoul+0x9c>
    5fe4:	c4 c0       	rjmp	.+392    	; 0x616e <strtoul+0x224>
    5fe6:	f0 e1       	ldi	r31, 0x10	; 16
    5fe8:	ef 16       	cp	r14, r31
    5fea:	f1 04       	cpc	r15, r1
    5fec:	89 f4       	brne	.+34     	; 0x6010 <strtoul+0xc6>
    5fee:	10 33       	cpi	r17, 0x30	; 48
    5ff0:	99 f5       	brne	.+102    	; 0x6058 <strtoul+0x10e>
    5ff2:	d3 01       	movw	r26, r6
    5ff4:	8c 91       	ld	r24, X
    5ff6:	8f 7d       	andi	r24, 0xDF	; 223
    5ff8:	88 35       	cpi	r24, 0x58	; 88
    5ffa:	09 f0       	breq	.+2      	; 0x5ffe <strtoul+0xb4>
    5ffc:	b2 c0       	rjmp	.+356    	; 0x6162 <strtoul+0x218>
    5ffe:	11 96       	adiw	r26, 0x01	; 1
    6000:	1c 91       	ld	r17, X
    6002:	b2 e0       	ldi	r27, 0x02	; 2
    6004:	6b 0e       	add	r6, r27
    6006:	71 1c       	adc	r7, r1
    6008:	02 60       	ori	r16, 0x02	; 2
    600a:	50 e1       	ldi	r21, 0x10	; 16
    600c:	e5 2e       	mov	r14, r21
    600e:	f1 2c       	mov	r15, r1
    6010:	ea e0       	ldi	r30, 0x0A	; 10
    6012:	ee 16       	cp	r14, r30
    6014:	f1 04       	cpc	r15, r1
    6016:	09 f4       	brne	.+2      	; 0x601a <strtoul+0xd0>
    6018:	b0 c0       	rjmp	.+352    	; 0x617a <strtoul+0x230>
    601a:	f0 e1       	ldi	r31, 0x10	; 16
    601c:	ef 16       	cp	r14, r31
    601e:	f1 04       	cpc	r15, r1
    6020:	d9 f0       	breq	.+54     	; 0x6058 <strtoul+0x10e>
    6022:	28 e0       	ldi	r18, 0x08	; 8
    6024:	e2 16       	cp	r14, r18
    6026:	f1 04       	cpc	r15, r1
    6028:	51 f4       	brne	.+20     	; 0x603e <strtoul+0xf4>
    602a:	38 e0       	ldi	r19, 0x08	; 8
    602c:	e3 2e       	mov	r14, r19
    602e:	f1 2c       	mov	r15, r1
    6030:	88 24       	eor	r8, r8
    6032:	8a 94       	dec	r8
    6034:	98 2c       	mov	r9, r8
    6036:	a8 2c       	mov	r10, r8
    6038:	4f e1       	ldi	r20, 0x1F	; 31
    603a:	b4 2e       	mov	r11, r20
    603c:	13 c0       	rjmp	.+38     	; 0x6064 <strtoul+0x11a>
    603e:	6f ef       	ldi	r22, 0xFF	; 255
    6040:	7f ef       	ldi	r23, 0xFF	; 255
    6042:	cb 01       	movw	r24, r22
    6044:	97 01       	movw	r18, r14
    6046:	0f 2c       	mov	r0, r15
    6048:	00 0c       	add	r0, r0
    604a:	44 0b       	sbc	r20, r20
    604c:	55 0b       	sbc	r21, r21
    604e:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <__udivmodsi4>
    6052:	49 01       	movw	r8, r18
    6054:	5a 01       	movw	r10, r20
    6056:	06 c0       	rjmp	.+12     	; 0x6064 <strtoul+0x11a>
    6058:	88 24       	eor	r8, r8
    605a:	8a 94       	dec	r8
    605c:	98 2c       	mov	r9, r8
    605e:	a8 2c       	mov	r10, r8
    6060:	2f e0       	ldi	r18, 0x0F	; 15
    6062:	b2 2e       	mov	r11, r18
    6064:	7e 82       	std	Y+6, r7	; 0x06
    6066:	6d 82       	std	Y+5, r6	; 0x05
    6068:	60 e0       	ldi	r22, 0x00	; 0
    606a:	20 e0       	ldi	r18, 0x00	; 0
    606c:	30 e0       	ldi	r19, 0x00	; 0
    606e:	a9 01       	movw	r20, r18
    6070:	27 01       	movw	r4, r14
    6072:	0f 2c       	mov	r0, r15
    6074:	00 0c       	add	r0, r0
    6076:	66 08       	sbc	r6, r6
    6078:	77 08       	sbc	r7, r7
    607a:	2d 80       	ldd	r2, Y+5	; 0x05
    607c:	3e 80       	ldd	r3, Y+6	; 0x06
    607e:	e0 ed       	ldi	r30, 0xD0	; 208
    6080:	e1 0f       	add	r30, r17
    6082:	ea 30       	cpi	r30, 0x0A	; 10
    6084:	60 f0       	brcs	.+24     	; 0x609e <strtoul+0x154>
    6086:	8f eb       	ldi	r24, 0xBF	; 191
    6088:	81 0f       	add	r24, r17
    608a:	8a 31       	cpi	r24, 0x1A	; 26
    608c:	10 f4       	brcc	.+4      	; 0x6092 <strtoul+0x148>
    608e:	e9 ec       	ldi	r30, 0xC9	; 201
    6090:	05 c0       	rjmp	.+10     	; 0x609c <strtoul+0x152>
    6092:	8f e9       	ldi	r24, 0x9F	; 159
    6094:	81 0f       	add	r24, r17
    6096:	8a 31       	cpi	r24, 0x1A	; 26
    6098:	90 f5       	brcc	.+100    	; 0x60fe <strtoul+0x1b4>
    609a:	e9 ea       	ldi	r30, 0xA9	; 169
    609c:	e1 0f       	add	r30, r17
    609e:	8e 2f       	mov	r24, r30
    60a0:	90 e0       	ldi	r25, 0x00	; 0
    60a2:	8e 15       	cp	r24, r14
    60a4:	9f 05       	cpc	r25, r15
    60a6:	5c f5       	brge	.+86     	; 0x60fe <strtoul+0x1b4>
    60a8:	6f 3f       	cpi	r22, 0xFF	; 255
    60aa:	09 f1       	breq	.+66     	; 0x60ee <strtoul+0x1a4>
    60ac:	82 16       	cp	r8, r18
    60ae:	93 06       	cpc	r9, r19
    60b0:	a4 06       	cpc	r10, r20
    60b2:	b5 06       	cpc	r11, r21
    60b4:	d8 f0       	brcs	.+54     	; 0x60ec <strtoul+0x1a2>
    60b6:	c3 01       	movw	r24, r6
    60b8:	b2 01       	movw	r22, r4
    60ba:	0e 94 3d 35 	call	0x6a7a	; 0x6a7a <__mulsi3>
    60be:	2e 2f       	mov	r18, r30
    60c0:	30 e0       	ldi	r19, 0x00	; 0
    60c2:	40 e0       	ldi	r20, 0x00	; 0
    60c4:	50 e0       	ldi	r21, 0x00	; 0
    60c6:	29 83       	std	Y+1, r18	; 0x01
    60c8:	3a 83       	std	Y+2, r19	; 0x02
    60ca:	4b 83       	std	Y+3, r20	; 0x03
    60cc:	5c 83       	std	Y+4, r21	; 0x04
    60ce:	26 0f       	add	r18, r22
    60d0:	37 1f       	adc	r19, r23
    60d2:	48 1f       	adc	r20, r24
    60d4:	59 1f       	adc	r21, r25
    60d6:	89 81       	ldd	r24, Y+1	; 0x01
    60d8:	9a 81       	ldd	r25, Y+2	; 0x02
    60da:	ab 81       	ldd	r26, Y+3	; 0x03
    60dc:	bc 81       	ldd	r27, Y+4	; 0x04
    60de:	28 17       	cp	r18, r24
    60e0:	39 07       	cpc	r19, r25
    60e2:	4a 07       	cpc	r20, r26
    60e4:	5b 07       	cpc	r21, r27
    60e6:	10 f0       	brcs	.+4      	; 0x60ec <strtoul+0x1a2>
    60e8:	61 e0       	ldi	r22, 0x01	; 1
    60ea:	01 c0       	rjmp	.+2      	; 0x60ee <strtoul+0x1a4>
    60ec:	6f ef       	ldi	r22, 0xFF	; 255
    60ee:	ed 81       	ldd	r30, Y+5	; 0x05
    60f0:	fe 81       	ldd	r31, Y+6	; 0x06
    60f2:	31 96       	adiw	r30, 0x01	; 1
    60f4:	fe 83       	std	Y+6, r31	; 0x06
    60f6:	ed 83       	std	Y+5, r30	; 0x05
    60f8:	d1 01       	movw	r26, r2
    60fa:	1c 91       	ld	r17, X
    60fc:	be cf       	rjmp	.-132    	; 0x607a <strtoul+0x130>
    60fe:	c1 14       	cp	r12, r1
    6100:	d1 04       	cpc	r13, r1
    6102:	89 f0       	breq	.+34     	; 0x6126 <strtoul+0x1dc>
    6104:	66 23       	and	r22, r22
    6106:	39 f0       	breq	.+14     	; 0x6116 <strtoul+0x1cc>
    6108:	8d 81       	ldd	r24, Y+5	; 0x05
    610a:	9e 81       	ldd	r25, Y+6	; 0x06
    610c:	01 97       	sbiw	r24, 0x01	; 1
    610e:	f6 01       	movw	r30, r12
    6110:	91 83       	std	Z+1, r25	; 0x01
    6112:	80 83       	st	Z, r24
    6114:	08 c0       	rjmp	.+16     	; 0x6126 <strtoul+0x1dc>
    6116:	01 ff       	sbrs	r16, 1
    6118:	06 c0       	rjmp	.+12     	; 0x6126 <strtoul+0x1dc>
    611a:	8d 81       	ldd	r24, Y+5	; 0x05
    611c:	9e 81       	ldd	r25, Y+6	; 0x06
    611e:	02 97       	sbiw	r24, 0x02	; 2
    6120:	d6 01       	movw	r26, r12
    6122:	8d 93       	st	X+, r24
    6124:	9c 93       	st	X, r25
    6126:	00 ff       	sbrs	r16, 0
    6128:	07 c0       	rjmp	.+14     	; 0x6138 <strtoul+0x1ee>
    612a:	50 95       	com	r21
    612c:	40 95       	com	r20
    612e:	30 95       	com	r19
    6130:	21 95       	neg	r18
    6132:	3f 4f       	sbci	r19, 0xFF	; 255
    6134:	4f 4f       	sbci	r20, 0xFF	; 255
    6136:	5f 4f       	sbci	r21, 0xFF	; 255
    6138:	67 ff       	sbrs	r22, 7
    613a:	10 c0       	rjmp	.+32     	; 0x615c <strtoul+0x212>
    613c:	82 e2       	ldi	r24, 0x22	; 34
    613e:	90 e0       	ldi	r25, 0x00	; 0
    6140:	90 93 cb 0c 	sts	0x0CCB, r25	; 0x800ccb <errno+0x1>
    6144:	80 93 ca 0c 	sts	0x0CCA, r24	; 0x800cca <errno>
    6148:	6f ef       	ldi	r22, 0xFF	; 255
    614a:	7f ef       	ldi	r23, 0xFF	; 255
    614c:	8f ef       	ldi	r24, 0xFF	; 255
    614e:	9f ef       	ldi	r25, 0xFF	; 255
    6150:	1b c0       	rjmp	.+54     	; 0x6188 <strtoul+0x23e>
    6152:	60 e0       	ldi	r22, 0x00	; 0
    6154:	70 e0       	ldi	r23, 0x00	; 0
    6156:	80 e0       	ldi	r24, 0x00	; 0
    6158:	90 e0       	ldi	r25, 0x00	; 0
    615a:	16 c0       	rjmp	.+44     	; 0x6188 <strtoul+0x23e>
    615c:	b9 01       	movw	r22, r18
    615e:	ca 01       	movw	r24, r20
    6160:	13 c0       	rjmp	.+38     	; 0x6188 <strtoul+0x23e>
    6162:	10 e3       	ldi	r17, 0x30	; 48
    6164:	e1 14       	cp	r14, r1
    6166:	f1 04       	cpc	r15, r1
    6168:	09 f4       	brne	.+2      	; 0x616c <strtoul+0x222>
    616a:	5f cf       	rjmp	.-322    	; 0x602a <strtoul+0xe0>
    616c:	51 cf       	rjmp	.-350    	; 0x6010 <strtoul+0xc6>
    616e:	10 33       	cpi	r17, 0x30	; 48
    6170:	09 f4       	brne	.+2      	; 0x6174 <strtoul+0x22a>
    6172:	3f cf       	rjmp	.-386    	; 0x5ff2 <strtoul+0xa8>
    6174:	9a e0       	ldi	r25, 0x0A	; 10
    6176:	e9 2e       	mov	r14, r25
    6178:	f1 2c       	mov	r15, r1
    617a:	89 e9       	ldi	r24, 0x99	; 153
    617c:	88 2e       	mov	r8, r24
    617e:	98 2c       	mov	r9, r8
    6180:	a8 2c       	mov	r10, r8
    6182:	89 e1       	ldi	r24, 0x19	; 25
    6184:	b8 2e       	mov	r11, r24
    6186:	6e cf       	rjmp	.-292    	; 0x6064 <strtoul+0x11a>
    6188:	26 96       	adiw	r28, 0x06	; 6
    618a:	0f b6       	in	r0, 0x3f	; 63
    618c:	f8 94       	cli
    618e:	de bf       	out	0x3e, r29	; 62
    6190:	0f be       	out	0x3f, r0	; 63
    6192:	cd bf       	out	0x3d, r28	; 61
    6194:	df 91       	pop	r29
    6196:	cf 91       	pop	r28
    6198:	1f 91       	pop	r17
    619a:	0f 91       	pop	r16
    619c:	ff 90       	pop	r15
    619e:	ef 90       	pop	r14
    61a0:	df 90       	pop	r13
    61a2:	cf 90       	pop	r12
    61a4:	bf 90       	pop	r11
    61a6:	af 90       	pop	r10
    61a8:	9f 90       	pop	r9
    61aa:	8f 90       	pop	r8
    61ac:	7f 90       	pop	r7
    61ae:	6f 90       	pop	r6
    61b0:	5f 90       	pop	r5
    61b2:	4f 90       	pop	r4
    61b4:	3f 90       	pop	r3
    61b6:	2f 90       	pop	r2
    61b8:	08 95       	ret

000061ba <atof>:
    61ba:	66 27       	eor	r22, r22
    61bc:	77 27       	eor	r23, r23
    61be:	0c 94 40 33 	jmp	0x6680	; 0x6680 <strtod>

000061c2 <atoi>:
    61c2:	fc 01       	movw	r30, r24
    61c4:	88 27       	eor	r24, r24
    61c6:	99 27       	eor	r25, r25
    61c8:	e8 94       	clt
    61ca:	21 91       	ld	r18, Z+
    61cc:	20 32       	cpi	r18, 0x20	; 32
    61ce:	e9 f3       	breq	.-6      	; 0x61ca <atoi+0x8>
    61d0:	29 30       	cpi	r18, 0x09	; 9
    61d2:	10 f0       	brcs	.+4      	; 0x61d8 <atoi+0x16>
    61d4:	2e 30       	cpi	r18, 0x0E	; 14
    61d6:	c8 f3       	brcs	.-14     	; 0x61ca <atoi+0x8>
    61d8:	2b 32       	cpi	r18, 0x2B	; 43
    61da:	41 f0       	breq	.+16     	; 0x61ec <atoi+0x2a>
    61dc:	2d 32       	cpi	r18, 0x2D	; 45
    61de:	39 f4       	brne	.+14     	; 0x61ee <atoi+0x2c>
    61e0:	68 94       	set
    61e2:	04 c0       	rjmp	.+8      	; 0x61ec <atoi+0x2a>
    61e4:	0e 94 50 32 	call	0x64a0	; 0x64a0 <__mulhi_const_10>
    61e8:	82 0f       	add	r24, r18
    61ea:	91 1d       	adc	r25, r1
    61ec:	21 91       	ld	r18, Z+
    61ee:	20 53       	subi	r18, 0x30	; 48
    61f0:	2a 30       	cpi	r18, 0x0A	; 10
    61f2:	c0 f3       	brcs	.-16     	; 0x61e4 <atoi+0x22>
    61f4:	1e f4       	brtc	.+6      	; 0x61fc <atoi+0x3a>
    61f6:	90 95       	com	r25
    61f8:	81 95       	neg	r24
    61fa:	9f 4f       	sbci	r25, 0xFF	; 255
    61fc:	08 95       	ret

000061fe <__ftoa_engine>:
    61fe:	28 30       	cpi	r18, 0x08	; 8
    6200:	08 f0       	brcs	.+2      	; 0x6204 <__ftoa_engine+0x6>
    6202:	27 e0       	ldi	r18, 0x07	; 7
    6204:	33 27       	eor	r19, r19
    6206:	da 01       	movw	r26, r20
    6208:	99 0f       	add	r25, r25
    620a:	31 1d       	adc	r19, r1
    620c:	87 fd       	sbrc	r24, 7
    620e:	91 60       	ori	r25, 0x01	; 1
    6210:	00 96       	adiw	r24, 0x00	; 0
    6212:	61 05       	cpc	r22, r1
    6214:	71 05       	cpc	r23, r1
    6216:	39 f4       	brne	.+14     	; 0x6226 <__ftoa_engine+0x28>
    6218:	32 60       	ori	r19, 0x02	; 2
    621a:	2e 5f       	subi	r18, 0xFE	; 254
    621c:	3d 93       	st	X+, r19
    621e:	30 e3       	ldi	r19, 0x30	; 48
    6220:	2a 95       	dec	r18
    6222:	e1 f7       	brne	.-8      	; 0x621c <__ftoa_engine+0x1e>
    6224:	08 95       	ret
    6226:	9f 3f       	cpi	r25, 0xFF	; 255
    6228:	30 f0       	brcs	.+12     	; 0x6236 <__ftoa_engine+0x38>
    622a:	80 38       	cpi	r24, 0x80	; 128
    622c:	71 05       	cpc	r23, r1
    622e:	61 05       	cpc	r22, r1
    6230:	09 f0       	breq	.+2      	; 0x6234 <__ftoa_engine+0x36>
    6232:	3c 5f       	subi	r19, 0xFC	; 252
    6234:	3c 5f       	subi	r19, 0xFC	; 252
    6236:	3d 93       	st	X+, r19
    6238:	91 30       	cpi	r25, 0x01	; 1
    623a:	08 f0       	brcs	.+2      	; 0x623e <__ftoa_engine+0x40>
    623c:	80 68       	ori	r24, 0x80	; 128
    623e:	91 1d       	adc	r25, r1
    6240:	df 93       	push	r29
    6242:	cf 93       	push	r28
    6244:	1f 93       	push	r17
    6246:	0f 93       	push	r16
    6248:	ff 92       	push	r15
    624a:	ef 92       	push	r14
    624c:	19 2f       	mov	r17, r25
    624e:	98 7f       	andi	r25, 0xF8	; 248
    6250:	96 95       	lsr	r25
    6252:	e9 2f       	mov	r30, r25
    6254:	96 95       	lsr	r25
    6256:	96 95       	lsr	r25
    6258:	e9 0f       	add	r30, r25
    625a:	ff 27       	eor	r31, r31
    625c:	e4 5e       	subi	r30, 0xE4	; 228
    625e:	fd 4f       	sbci	r31, 0xFD	; 253
    6260:	99 27       	eor	r25, r25
    6262:	33 27       	eor	r19, r19
    6264:	ee 24       	eor	r14, r14
    6266:	ff 24       	eor	r15, r15
    6268:	a7 01       	movw	r20, r14
    626a:	e7 01       	movw	r28, r14
    626c:	05 90       	lpm	r0, Z+
    626e:	08 94       	sec
    6270:	07 94       	ror	r0
    6272:	28 f4       	brcc	.+10     	; 0x627e <__ftoa_engine+0x80>
    6274:	36 0f       	add	r19, r22
    6276:	e7 1e       	adc	r14, r23
    6278:	f8 1e       	adc	r15, r24
    627a:	49 1f       	adc	r20, r25
    627c:	51 1d       	adc	r21, r1
    627e:	66 0f       	add	r22, r22
    6280:	77 1f       	adc	r23, r23
    6282:	88 1f       	adc	r24, r24
    6284:	99 1f       	adc	r25, r25
    6286:	06 94       	lsr	r0
    6288:	a1 f7       	brne	.-24     	; 0x6272 <__ftoa_engine+0x74>
    628a:	05 90       	lpm	r0, Z+
    628c:	07 94       	ror	r0
    628e:	28 f4       	brcc	.+10     	; 0x629a <__ftoa_engine+0x9c>
    6290:	e7 0e       	add	r14, r23
    6292:	f8 1e       	adc	r15, r24
    6294:	49 1f       	adc	r20, r25
    6296:	56 1f       	adc	r21, r22
    6298:	c1 1d       	adc	r28, r1
    629a:	77 0f       	add	r23, r23
    629c:	88 1f       	adc	r24, r24
    629e:	99 1f       	adc	r25, r25
    62a0:	66 1f       	adc	r22, r22
    62a2:	06 94       	lsr	r0
    62a4:	a1 f7       	brne	.-24     	; 0x628e <__ftoa_engine+0x90>
    62a6:	05 90       	lpm	r0, Z+
    62a8:	07 94       	ror	r0
    62aa:	28 f4       	brcc	.+10     	; 0x62b6 <__ftoa_engine+0xb8>
    62ac:	f8 0e       	add	r15, r24
    62ae:	49 1f       	adc	r20, r25
    62b0:	56 1f       	adc	r21, r22
    62b2:	c7 1f       	adc	r28, r23
    62b4:	d1 1d       	adc	r29, r1
    62b6:	88 0f       	add	r24, r24
    62b8:	99 1f       	adc	r25, r25
    62ba:	66 1f       	adc	r22, r22
    62bc:	77 1f       	adc	r23, r23
    62be:	06 94       	lsr	r0
    62c0:	a1 f7       	brne	.-24     	; 0x62aa <__ftoa_engine+0xac>
    62c2:	05 90       	lpm	r0, Z+
    62c4:	07 94       	ror	r0
    62c6:	20 f4       	brcc	.+8      	; 0x62d0 <__ftoa_engine+0xd2>
    62c8:	49 0f       	add	r20, r25
    62ca:	56 1f       	adc	r21, r22
    62cc:	c7 1f       	adc	r28, r23
    62ce:	d8 1f       	adc	r29, r24
    62d0:	99 0f       	add	r25, r25
    62d2:	66 1f       	adc	r22, r22
    62d4:	77 1f       	adc	r23, r23
    62d6:	88 1f       	adc	r24, r24
    62d8:	06 94       	lsr	r0
    62da:	a9 f7       	brne	.-22     	; 0x62c6 <__ftoa_engine+0xc8>
    62dc:	84 91       	lpm	r24, Z
    62de:	10 95       	com	r17
    62e0:	17 70       	andi	r17, 0x07	; 7
    62e2:	41 f0       	breq	.+16     	; 0x62f4 <__ftoa_engine+0xf6>
    62e4:	d6 95       	lsr	r29
    62e6:	c7 95       	ror	r28
    62e8:	57 95       	ror	r21
    62ea:	47 95       	ror	r20
    62ec:	f7 94       	ror	r15
    62ee:	e7 94       	ror	r14
    62f0:	1a 95       	dec	r17
    62f2:	c1 f7       	brne	.-16     	; 0x62e4 <__ftoa_engine+0xe6>
    62f4:	e2 ec       	ldi	r30, 0xC2	; 194
    62f6:	f1 e0       	ldi	r31, 0x01	; 1
    62f8:	68 94       	set
    62fa:	15 90       	lpm	r1, Z+
    62fc:	15 91       	lpm	r17, Z+
    62fe:	35 91       	lpm	r19, Z+
    6300:	65 91       	lpm	r22, Z+
    6302:	95 91       	lpm	r25, Z+
    6304:	05 90       	lpm	r0, Z+
    6306:	7f e2       	ldi	r23, 0x2F	; 47
    6308:	73 95       	inc	r23
    630a:	e1 18       	sub	r14, r1
    630c:	f1 0a       	sbc	r15, r17
    630e:	43 0b       	sbc	r20, r19
    6310:	56 0b       	sbc	r21, r22
    6312:	c9 0b       	sbc	r28, r25
    6314:	d0 09       	sbc	r29, r0
    6316:	c0 f7       	brcc	.-16     	; 0x6308 <__ftoa_engine+0x10a>
    6318:	e1 0c       	add	r14, r1
    631a:	f1 1e       	adc	r15, r17
    631c:	43 1f       	adc	r20, r19
    631e:	56 1f       	adc	r21, r22
    6320:	c9 1f       	adc	r28, r25
    6322:	d0 1d       	adc	r29, r0
    6324:	7e f4       	brtc	.+30     	; 0x6344 <__ftoa_engine+0x146>
    6326:	70 33       	cpi	r23, 0x30	; 48
    6328:	11 f4       	brne	.+4      	; 0x632e <__ftoa_engine+0x130>
    632a:	8a 95       	dec	r24
    632c:	e6 cf       	rjmp	.-52     	; 0x62fa <__ftoa_engine+0xfc>
    632e:	e8 94       	clt
    6330:	01 50       	subi	r16, 0x01	; 1
    6332:	30 f0       	brcs	.+12     	; 0x6340 <__ftoa_engine+0x142>
    6334:	08 0f       	add	r16, r24
    6336:	0a f4       	brpl	.+2      	; 0x633a <__ftoa_engine+0x13c>
    6338:	00 27       	eor	r16, r16
    633a:	02 17       	cp	r16, r18
    633c:	08 f4       	brcc	.+2      	; 0x6340 <__ftoa_engine+0x142>
    633e:	20 2f       	mov	r18, r16
    6340:	23 95       	inc	r18
    6342:	02 2f       	mov	r16, r18
    6344:	7a 33       	cpi	r23, 0x3A	; 58
    6346:	28 f0       	brcs	.+10     	; 0x6352 <__ftoa_engine+0x154>
    6348:	79 e3       	ldi	r23, 0x39	; 57
    634a:	7d 93       	st	X+, r23
    634c:	2a 95       	dec	r18
    634e:	e9 f7       	brne	.-6      	; 0x634a <__ftoa_engine+0x14c>
    6350:	10 c0       	rjmp	.+32     	; 0x6372 <__ftoa_engine+0x174>
    6352:	7d 93       	st	X+, r23
    6354:	2a 95       	dec	r18
    6356:	89 f6       	brne	.-94     	; 0x62fa <__ftoa_engine+0xfc>
    6358:	06 94       	lsr	r0
    635a:	97 95       	ror	r25
    635c:	67 95       	ror	r22
    635e:	37 95       	ror	r19
    6360:	17 95       	ror	r17
    6362:	17 94       	ror	r1
    6364:	e1 18       	sub	r14, r1
    6366:	f1 0a       	sbc	r15, r17
    6368:	43 0b       	sbc	r20, r19
    636a:	56 0b       	sbc	r21, r22
    636c:	c9 0b       	sbc	r28, r25
    636e:	d0 09       	sbc	r29, r0
    6370:	98 f0       	brcs	.+38     	; 0x6398 <__ftoa_engine+0x19a>
    6372:	23 95       	inc	r18
    6374:	7e 91       	ld	r23, -X
    6376:	73 95       	inc	r23
    6378:	7a 33       	cpi	r23, 0x3A	; 58
    637a:	08 f0       	brcs	.+2      	; 0x637e <__ftoa_engine+0x180>
    637c:	70 e3       	ldi	r23, 0x30	; 48
    637e:	7c 93       	st	X, r23
    6380:	20 13       	cpse	r18, r16
    6382:	b8 f7       	brcc	.-18     	; 0x6372 <__ftoa_engine+0x174>
    6384:	7e 91       	ld	r23, -X
    6386:	70 61       	ori	r23, 0x10	; 16
    6388:	7d 93       	st	X+, r23
    638a:	30 f0       	brcs	.+12     	; 0x6398 <__ftoa_engine+0x19a>
    638c:	83 95       	inc	r24
    638e:	71 e3       	ldi	r23, 0x31	; 49
    6390:	7d 93       	st	X+, r23
    6392:	70 e3       	ldi	r23, 0x30	; 48
    6394:	2a 95       	dec	r18
    6396:	e1 f7       	brne	.-8      	; 0x6390 <__ftoa_engine+0x192>
    6398:	11 24       	eor	r1, r1
    639a:	ef 90       	pop	r14
    639c:	ff 90       	pop	r15
    639e:	0f 91       	pop	r16
    63a0:	1f 91       	pop	r17
    63a2:	cf 91       	pop	r28
    63a4:	df 91       	pop	r29
    63a6:	99 27       	eor	r25, r25
    63a8:	87 fd       	sbrc	r24, 7
    63aa:	90 95       	com	r25
    63ac:	08 95       	ret

000063ae <isspace>:
    63ae:	91 11       	cpse	r25, r1
    63b0:	0c 94 af 34 	jmp	0x695e	; 0x695e <__ctype_isfalse>
    63b4:	80 32       	cpi	r24, 0x20	; 32
    63b6:	19 f0       	breq	.+6      	; 0x63be <isspace+0x10>
    63b8:	89 50       	subi	r24, 0x09	; 9
    63ba:	85 50       	subi	r24, 0x05	; 5
    63bc:	c8 f7       	brcc	.-14     	; 0x63b0 <isspace+0x2>
    63be:	08 95       	ret

000063c0 <strnlen_P>:
    63c0:	fc 01       	movw	r30, r24
    63c2:	05 90       	lpm	r0, Z+
    63c4:	61 50       	subi	r22, 0x01	; 1
    63c6:	70 40       	sbci	r23, 0x00	; 0
    63c8:	01 10       	cpse	r0, r1
    63ca:	d8 f7       	brcc	.-10     	; 0x63c2 <strnlen_P+0x2>
    63cc:	80 95       	com	r24
    63ce:	90 95       	com	r25
    63d0:	8e 0f       	add	r24, r30
    63d2:	9f 1f       	adc	r25, r31
    63d4:	08 95       	ret

000063d6 <memcmp>:
    63d6:	fb 01       	movw	r30, r22
    63d8:	dc 01       	movw	r26, r24
    63da:	04 c0       	rjmp	.+8      	; 0x63e4 <memcmp+0xe>
    63dc:	8d 91       	ld	r24, X+
    63de:	01 90       	ld	r0, Z+
    63e0:	80 19       	sub	r24, r0
    63e2:	21 f4       	brne	.+8      	; 0x63ec <memcmp+0x16>
    63e4:	41 50       	subi	r20, 0x01	; 1
    63e6:	50 40       	sbci	r21, 0x00	; 0
    63e8:	c8 f7       	brcc	.-14     	; 0x63dc <memcmp+0x6>
    63ea:	88 1b       	sub	r24, r24
    63ec:	99 0b       	sbc	r25, r25
    63ee:	08 95       	ret

000063f0 <memcpy>:
    63f0:	fb 01       	movw	r30, r22
    63f2:	dc 01       	movw	r26, r24
    63f4:	02 c0       	rjmp	.+4      	; 0x63fa <memcpy+0xa>
    63f6:	01 90       	ld	r0, Z+
    63f8:	0d 92       	st	X+, r0
    63fa:	41 50       	subi	r20, 0x01	; 1
    63fc:	50 40       	sbci	r21, 0x00	; 0
    63fe:	d8 f7       	brcc	.-10     	; 0x63f6 <memcpy+0x6>
    6400:	08 95       	ret

00006402 <strchr>:
    6402:	fc 01       	movw	r30, r24
    6404:	81 91       	ld	r24, Z+
    6406:	86 17       	cp	r24, r22
    6408:	21 f0       	breq	.+8      	; 0x6412 <strchr+0x10>
    640a:	88 23       	and	r24, r24
    640c:	d9 f7       	brne	.-10     	; 0x6404 <strchr+0x2>
    640e:	99 27       	eor	r25, r25
    6410:	08 95       	ret
    6412:	31 97       	sbiw	r30, 0x01	; 1
    6414:	cf 01       	movw	r24, r30
    6416:	08 95       	ret

00006418 <strcmp>:
    6418:	fb 01       	movw	r30, r22
    641a:	dc 01       	movw	r26, r24
    641c:	8d 91       	ld	r24, X+
    641e:	01 90       	ld	r0, Z+
    6420:	80 19       	sub	r24, r0
    6422:	01 10       	cpse	r0, r1
    6424:	d9 f3       	breq	.-10     	; 0x641c <strcmp+0x4>
    6426:	99 0b       	sbc	r25, r25
    6428:	08 95       	ret

0000642a <strcpy>:
    642a:	fb 01       	movw	r30, r22
    642c:	dc 01       	movw	r26, r24
    642e:	01 90       	ld	r0, Z+
    6430:	0d 92       	st	X+, r0
    6432:	00 20       	and	r0, r0
    6434:	e1 f7       	brne	.-8      	; 0x642e <strcpy+0x4>
    6436:	08 95       	ret

00006438 <strncpy>:
    6438:	fb 01       	movw	r30, r22
    643a:	dc 01       	movw	r26, r24
    643c:	41 50       	subi	r20, 0x01	; 1
    643e:	50 40       	sbci	r21, 0x00	; 0
    6440:	48 f0       	brcs	.+18     	; 0x6454 <strncpy+0x1c>
    6442:	01 90       	ld	r0, Z+
    6444:	0d 92       	st	X+, r0
    6446:	00 20       	and	r0, r0
    6448:	c9 f7       	brne	.-14     	; 0x643c <strncpy+0x4>
    644a:	01 c0       	rjmp	.+2      	; 0x644e <strncpy+0x16>
    644c:	1d 92       	st	X+, r1
    644e:	41 50       	subi	r20, 0x01	; 1
    6450:	50 40       	sbci	r21, 0x00	; 0
    6452:	e0 f7       	brcc	.-8      	; 0x644c <strncpy+0x14>
    6454:	08 95       	ret

00006456 <strnlen>:
    6456:	fc 01       	movw	r30, r24
    6458:	61 50       	subi	r22, 0x01	; 1
    645a:	70 40       	sbci	r23, 0x00	; 0
    645c:	01 90       	ld	r0, Z+
    645e:	01 10       	cpse	r0, r1
    6460:	d8 f7       	brcc	.-10     	; 0x6458 <strnlen+0x2>
    6462:	80 95       	com	r24
    6464:	90 95       	com	r25
    6466:	8e 0f       	add	r24, r30
    6468:	9f 1f       	adc	r25, r31
    646a:	08 95       	ret

0000646c <strstr>:
    646c:	fb 01       	movw	r30, r22
    646e:	51 91       	ld	r21, Z+
    6470:	55 23       	and	r21, r21
    6472:	a9 f0       	breq	.+42     	; 0x649e <strstr+0x32>
    6474:	bf 01       	movw	r22, r30
    6476:	dc 01       	movw	r26, r24
    6478:	4d 91       	ld	r20, X+
    647a:	45 17       	cp	r20, r21
    647c:	41 11       	cpse	r20, r1
    647e:	e1 f7       	brne	.-8      	; 0x6478 <strstr+0xc>
    6480:	59 f4       	brne	.+22     	; 0x6498 <strstr+0x2c>
    6482:	cd 01       	movw	r24, r26
    6484:	01 90       	ld	r0, Z+
    6486:	00 20       	and	r0, r0
    6488:	49 f0       	breq	.+18     	; 0x649c <strstr+0x30>
    648a:	4d 91       	ld	r20, X+
    648c:	40 15       	cp	r20, r0
    648e:	41 11       	cpse	r20, r1
    6490:	c9 f3       	breq	.-14     	; 0x6484 <strstr+0x18>
    6492:	fb 01       	movw	r30, r22
    6494:	41 11       	cpse	r20, r1
    6496:	ef cf       	rjmp	.-34     	; 0x6476 <strstr+0xa>
    6498:	81 e0       	ldi	r24, 0x01	; 1
    649a:	90 e0       	ldi	r25, 0x00	; 0
    649c:	01 97       	sbiw	r24, 0x01	; 1
    649e:	08 95       	ret

000064a0 <__mulhi_const_10>:
    64a0:	7a e0       	ldi	r23, 0x0A	; 10
    64a2:	97 9f       	mul	r25, r23
    64a4:	90 2d       	mov	r25, r0
    64a6:	87 9f       	mul	r24, r23
    64a8:	80 2d       	mov	r24, r0
    64aa:	91 0d       	add	r25, r1
    64ac:	11 24       	eor	r1, r1
    64ae:	08 95       	ret

000064b0 <__ultoa_ncheck>:
    64b0:	bb 27       	eor	r27, r27

000064b2 <__ultoa_common>:
    64b2:	fa 01       	movw	r30, r20
    64b4:	a6 2f       	mov	r26, r22
    64b6:	62 17       	cp	r22, r18
    64b8:	71 05       	cpc	r23, r1
    64ba:	81 05       	cpc	r24, r1
    64bc:	91 05       	cpc	r25, r1
    64be:	33 0b       	sbc	r19, r19
    64c0:	30 fb       	bst	r19, 0
    64c2:	66 f0       	brts	.+24     	; 0x64dc <__ultoa_common+0x2a>
    64c4:	aa 27       	eor	r26, r26
    64c6:	66 0f       	add	r22, r22
    64c8:	77 1f       	adc	r23, r23
    64ca:	88 1f       	adc	r24, r24
    64cc:	99 1f       	adc	r25, r25
    64ce:	aa 1f       	adc	r26, r26
    64d0:	a2 17       	cp	r26, r18
    64d2:	10 f0       	brcs	.+4      	; 0x64d8 <__ultoa_common+0x26>
    64d4:	a2 1b       	sub	r26, r18
    64d6:	63 95       	inc	r22
    64d8:	38 50       	subi	r19, 0x08	; 8
    64da:	a9 f7       	brne	.-22     	; 0x64c6 <__ultoa_common+0x14>
    64dc:	a0 5d       	subi	r26, 0xD0	; 208
    64de:	aa 33       	cpi	r26, 0x3A	; 58
    64e0:	08 f0       	brcs	.+2      	; 0x64e4 <__ultoa_common+0x32>
    64e2:	a9 5d       	subi	r26, 0xD9	; 217
    64e4:	a1 93       	st	Z+, r26
    64e6:	36 f7       	brtc	.-52     	; 0x64b4 <__ultoa_common+0x2>
    64e8:	b1 11       	cpse	r27, r1
    64ea:	b1 93       	st	Z+, r27
    64ec:	10 82       	st	Z, r1
    64ee:	ca 01       	movw	r24, r20
    64f0:	0c 94 ca 34 	jmp	0x6994	; 0x6994 <strrev>

000064f4 <fputc>:
    64f4:	0f 93       	push	r16
    64f6:	1f 93       	push	r17
    64f8:	cf 93       	push	r28
    64fa:	df 93       	push	r29
    64fc:	fb 01       	movw	r30, r22
    64fe:	23 81       	ldd	r18, Z+3	; 0x03
    6500:	21 fd       	sbrc	r18, 1
    6502:	03 c0       	rjmp	.+6      	; 0x650a <fputc+0x16>
    6504:	8f ef       	ldi	r24, 0xFF	; 255
    6506:	9f ef       	ldi	r25, 0xFF	; 255
    6508:	28 c0       	rjmp	.+80     	; 0x655a <fputc+0x66>
    650a:	22 ff       	sbrs	r18, 2
    650c:	16 c0       	rjmp	.+44     	; 0x653a <fputc+0x46>
    650e:	46 81       	ldd	r20, Z+6	; 0x06
    6510:	57 81       	ldd	r21, Z+7	; 0x07
    6512:	24 81       	ldd	r18, Z+4	; 0x04
    6514:	35 81       	ldd	r19, Z+5	; 0x05
    6516:	42 17       	cp	r20, r18
    6518:	53 07       	cpc	r21, r19
    651a:	44 f4       	brge	.+16     	; 0x652c <fputc+0x38>
    651c:	a0 81       	ld	r26, Z
    651e:	b1 81       	ldd	r27, Z+1	; 0x01
    6520:	9d 01       	movw	r18, r26
    6522:	2f 5f       	subi	r18, 0xFF	; 255
    6524:	3f 4f       	sbci	r19, 0xFF	; 255
    6526:	31 83       	std	Z+1, r19	; 0x01
    6528:	20 83       	st	Z, r18
    652a:	8c 93       	st	X, r24
    652c:	26 81       	ldd	r18, Z+6	; 0x06
    652e:	37 81       	ldd	r19, Z+7	; 0x07
    6530:	2f 5f       	subi	r18, 0xFF	; 255
    6532:	3f 4f       	sbci	r19, 0xFF	; 255
    6534:	37 83       	std	Z+7, r19	; 0x07
    6536:	26 83       	std	Z+6, r18	; 0x06
    6538:	10 c0       	rjmp	.+32     	; 0x655a <fputc+0x66>
    653a:	eb 01       	movw	r28, r22
    653c:	09 2f       	mov	r16, r25
    653e:	18 2f       	mov	r17, r24
    6540:	00 84       	ldd	r0, Z+8	; 0x08
    6542:	f1 85       	ldd	r31, Z+9	; 0x09
    6544:	e0 2d       	mov	r30, r0
    6546:	09 95       	icall
    6548:	89 2b       	or	r24, r25
    654a:	e1 f6       	brne	.-72     	; 0x6504 <fputc+0x10>
    654c:	8e 81       	ldd	r24, Y+6	; 0x06
    654e:	9f 81       	ldd	r25, Y+7	; 0x07
    6550:	01 96       	adiw	r24, 0x01	; 1
    6552:	9f 83       	std	Y+7, r25	; 0x07
    6554:	8e 83       	std	Y+6, r24	; 0x06
    6556:	81 2f       	mov	r24, r17
    6558:	90 2f       	mov	r25, r16
    655a:	df 91       	pop	r29
    655c:	cf 91       	pop	r28
    655e:	1f 91       	pop	r17
    6560:	0f 91       	pop	r16
    6562:	08 95       	ret

00006564 <sprintf>:
    6564:	0f 93       	push	r16
    6566:	1f 93       	push	r17
    6568:	cf 93       	push	r28
    656a:	df 93       	push	r29
    656c:	cd b7       	in	r28, 0x3d	; 61
    656e:	de b7       	in	r29, 0x3e	; 62
    6570:	2e 97       	sbiw	r28, 0x0e	; 14
    6572:	0f b6       	in	r0, 0x3f	; 63
    6574:	f8 94       	cli
    6576:	de bf       	out	0x3e, r29	; 62
    6578:	0f be       	out	0x3f, r0	; 63
    657a:	cd bf       	out	0x3d, r28	; 61
    657c:	0d 89       	ldd	r16, Y+21	; 0x15
    657e:	1e 89       	ldd	r17, Y+22	; 0x16
    6580:	86 e0       	ldi	r24, 0x06	; 6
    6582:	8c 83       	std	Y+4, r24	; 0x04
    6584:	1a 83       	std	Y+2, r17	; 0x02
    6586:	09 83       	std	Y+1, r16	; 0x01
    6588:	8f ef       	ldi	r24, 0xFF	; 255
    658a:	9f e7       	ldi	r25, 0x7F	; 127
    658c:	9e 83       	std	Y+6, r25	; 0x06
    658e:	8d 83       	std	Y+5, r24	; 0x05
    6590:	ae 01       	movw	r20, r28
    6592:	47 5e       	subi	r20, 0xE7	; 231
    6594:	5f 4f       	sbci	r21, 0xFF	; 255
    6596:	6f 89       	ldd	r22, Y+23	; 0x17
    6598:	78 8d       	ldd	r23, Y+24	; 0x18
    659a:	ce 01       	movw	r24, r28
    659c:	01 96       	adiw	r24, 0x01	; 1
    659e:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <vfprintf>
    65a2:	2f 81       	ldd	r18, Y+7	; 0x07
    65a4:	38 85       	ldd	r19, Y+8	; 0x08
    65a6:	f8 01       	movw	r30, r16
    65a8:	e2 0f       	add	r30, r18
    65aa:	f3 1f       	adc	r31, r19
    65ac:	10 82       	st	Z, r1
    65ae:	2e 96       	adiw	r28, 0x0e	; 14
    65b0:	0f b6       	in	r0, 0x3f	; 63
    65b2:	f8 94       	cli
    65b4:	de bf       	out	0x3e, r29	; 62
    65b6:	0f be       	out	0x3f, r0	; 63
    65b8:	cd bf       	out	0x3d, r28	; 61
    65ba:	df 91       	pop	r29
    65bc:	cf 91       	pop	r28
    65be:	1f 91       	pop	r17
    65c0:	0f 91       	pop	r16
    65c2:	08 95       	ret

000065c4 <__ultoa_invert>:
    65c4:	fa 01       	movw	r30, r20
    65c6:	aa 27       	eor	r26, r26
    65c8:	28 30       	cpi	r18, 0x08	; 8
    65ca:	51 f1       	breq	.+84     	; 0x6620 <__ultoa_invert+0x5c>
    65cc:	20 31       	cpi	r18, 0x10	; 16
    65ce:	81 f1       	breq	.+96     	; 0x6630 <__ultoa_invert+0x6c>
    65d0:	e8 94       	clt
    65d2:	6f 93       	push	r22
    65d4:	6e 7f       	andi	r22, 0xFE	; 254
    65d6:	6e 5f       	subi	r22, 0xFE	; 254
    65d8:	7f 4f       	sbci	r23, 0xFF	; 255
    65da:	8f 4f       	sbci	r24, 0xFF	; 255
    65dc:	9f 4f       	sbci	r25, 0xFF	; 255
    65de:	af 4f       	sbci	r26, 0xFF	; 255
    65e0:	b1 e0       	ldi	r27, 0x01	; 1
    65e2:	3e d0       	rcall	.+124    	; 0x6660 <__ultoa_invert+0x9c>
    65e4:	b4 e0       	ldi	r27, 0x04	; 4
    65e6:	3c d0       	rcall	.+120    	; 0x6660 <__ultoa_invert+0x9c>
    65e8:	67 0f       	add	r22, r23
    65ea:	78 1f       	adc	r23, r24
    65ec:	89 1f       	adc	r24, r25
    65ee:	9a 1f       	adc	r25, r26
    65f0:	a1 1d       	adc	r26, r1
    65f2:	68 0f       	add	r22, r24
    65f4:	79 1f       	adc	r23, r25
    65f6:	8a 1f       	adc	r24, r26
    65f8:	91 1d       	adc	r25, r1
    65fa:	a1 1d       	adc	r26, r1
    65fc:	6a 0f       	add	r22, r26
    65fe:	71 1d       	adc	r23, r1
    6600:	81 1d       	adc	r24, r1
    6602:	91 1d       	adc	r25, r1
    6604:	a1 1d       	adc	r26, r1
    6606:	20 d0       	rcall	.+64     	; 0x6648 <__ultoa_invert+0x84>
    6608:	09 f4       	brne	.+2      	; 0x660c <__ultoa_invert+0x48>
    660a:	68 94       	set
    660c:	3f 91       	pop	r19
    660e:	2a e0       	ldi	r18, 0x0A	; 10
    6610:	26 9f       	mul	r18, r22
    6612:	11 24       	eor	r1, r1
    6614:	30 19       	sub	r19, r0
    6616:	30 5d       	subi	r19, 0xD0	; 208
    6618:	31 93       	st	Z+, r19
    661a:	de f6       	brtc	.-74     	; 0x65d2 <__ultoa_invert+0xe>
    661c:	cf 01       	movw	r24, r30
    661e:	08 95       	ret
    6620:	46 2f       	mov	r20, r22
    6622:	47 70       	andi	r20, 0x07	; 7
    6624:	40 5d       	subi	r20, 0xD0	; 208
    6626:	41 93       	st	Z+, r20
    6628:	b3 e0       	ldi	r27, 0x03	; 3
    662a:	0f d0       	rcall	.+30     	; 0x664a <__ultoa_invert+0x86>
    662c:	c9 f7       	brne	.-14     	; 0x6620 <__ultoa_invert+0x5c>
    662e:	f6 cf       	rjmp	.-20     	; 0x661c <__ultoa_invert+0x58>
    6630:	46 2f       	mov	r20, r22
    6632:	4f 70       	andi	r20, 0x0F	; 15
    6634:	40 5d       	subi	r20, 0xD0	; 208
    6636:	4a 33       	cpi	r20, 0x3A	; 58
    6638:	18 f0       	brcs	.+6      	; 0x6640 <__ultoa_invert+0x7c>
    663a:	49 5d       	subi	r20, 0xD9	; 217
    663c:	31 fd       	sbrc	r19, 1
    663e:	40 52       	subi	r20, 0x20	; 32
    6640:	41 93       	st	Z+, r20
    6642:	02 d0       	rcall	.+4      	; 0x6648 <__ultoa_invert+0x84>
    6644:	a9 f7       	brne	.-22     	; 0x6630 <__ultoa_invert+0x6c>
    6646:	ea cf       	rjmp	.-44     	; 0x661c <__ultoa_invert+0x58>
    6648:	b4 e0       	ldi	r27, 0x04	; 4
    664a:	a6 95       	lsr	r26
    664c:	97 95       	ror	r25
    664e:	87 95       	ror	r24
    6650:	77 95       	ror	r23
    6652:	67 95       	ror	r22
    6654:	ba 95       	dec	r27
    6656:	c9 f7       	brne	.-14     	; 0x664a <__ultoa_invert+0x86>
    6658:	00 97       	sbiw	r24, 0x00	; 0
    665a:	61 05       	cpc	r22, r1
    665c:	71 05       	cpc	r23, r1
    665e:	08 95       	ret
    6660:	9b 01       	movw	r18, r22
    6662:	ac 01       	movw	r20, r24
    6664:	0a 2e       	mov	r0, r26
    6666:	06 94       	lsr	r0
    6668:	57 95       	ror	r21
    666a:	47 95       	ror	r20
    666c:	37 95       	ror	r19
    666e:	27 95       	ror	r18
    6670:	ba 95       	dec	r27
    6672:	c9 f7       	brne	.-14     	; 0x6666 <__ultoa_invert+0xa2>
    6674:	62 0f       	add	r22, r18
    6676:	73 1f       	adc	r23, r19
    6678:	84 1f       	adc	r24, r20
    667a:	95 1f       	adc	r25, r21
    667c:	a0 1d       	adc	r26, r0
    667e:	08 95       	ret

00006680 <strtod>:
    6680:	6f 92       	push	r6
    6682:	7f 92       	push	r7
    6684:	8f 92       	push	r8
    6686:	9f 92       	push	r9
    6688:	af 92       	push	r10
    668a:	bf 92       	push	r11
    668c:	cf 92       	push	r12
    668e:	df 92       	push	r13
    6690:	ef 92       	push	r14
    6692:	ff 92       	push	r15
    6694:	0f 93       	push	r16
    6696:	1f 93       	push	r17
    6698:	cf 93       	push	r28
    669a:	df 93       	push	r29
    669c:	ec 01       	movw	r28, r24
    669e:	7b 01       	movw	r14, r22
    66a0:	61 15       	cp	r22, r1
    66a2:	71 05       	cpc	r23, r1
    66a4:	19 f0       	breq	.+6      	; 0x66ac <strtod+0x2c>
    66a6:	db 01       	movw	r26, r22
    66a8:	8d 93       	st	X+, r24
    66aa:	9c 93       	st	X, r25
    66ac:	8e 01       	movw	r16, r28
    66ae:	0f 5f       	subi	r16, 0xFF	; 255
    66b0:	1f 4f       	sbci	r17, 0xFF	; 255
    66b2:	78 80       	ld	r7, Y
    66b4:	87 2d       	mov	r24, r7
    66b6:	90 e0       	ldi	r25, 0x00	; 0
    66b8:	0e 94 d7 31 	call	0x63ae	; 0x63ae <isspace>
    66bc:	89 2b       	or	r24, r25
    66be:	11 f0       	breq	.+4      	; 0x66c4 <strtod+0x44>
    66c0:	e8 01       	movw	r28, r16
    66c2:	f4 cf       	rjmp	.-24     	; 0x66ac <strtod+0x2c>
    66c4:	bd e2       	ldi	r27, 0x2D	; 45
    66c6:	7b 12       	cpse	r7, r27
    66c8:	05 c0       	rjmp	.+10     	; 0x66d4 <strtod+0x54>
    66ca:	0f 5f       	subi	r16, 0xFF	; 255
    66cc:	1f 4f       	sbci	r17, 0xFF	; 255
    66ce:	79 80       	ldd	r7, Y+1	; 0x01
    66d0:	c1 e0       	ldi	r28, 0x01	; 1
    66d2:	08 c0       	rjmp	.+16     	; 0x66e4 <strtod+0x64>
    66d4:	eb e2       	ldi	r30, 0x2B	; 43
    66d6:	7e 12       	cpse	r7, r30
    66d8:	04 c0       	rjmp	.+8      	; 0x66e2 <strtod+0x62>
    66da:	8e 01       	movw	r16, r28
    66dc:	0e 5f       	subi	r16, 0xFE	; 254
    66de:	1f 4f       	sbci	r17, 0xFF	; 255
    66e0:	79 80       	ldd	r7, Y+1	; 0x01
    66e2:	c0 e0       	ldi	r28, 0x00	; 0
    66e4:	68 01       	movw	r12, r16
    66e6:	f1 e0       	ldi	r31, 0x01	; 1
    66e8:	cf 1a       	sub	r12, r31
    66ea:	d1 08       	sbc	r13, r1
    66ec:	43 e0       	ldi	r20, 0x03	; 3
    66ee:	50 e0       	ldi	r21, 0x00	; 0
    66f0:	64 ec       	ldi	r22, 0xC4	; 196
    66f2:	72 e0       	ldi	r23, 0x02	; 2
    66f4:	c6 01       	movw	r24, r12
    66f6:	0e 94 b2 34 	call	0x6964	; 0x6964 <strncasecmp_P>
    66fa:	89 2b       	or	r24, r25
    66fc:	f1 f4       	brne	.+60     	; 0x673a <strtod+0xba>
    66fe:	68 01       	movw	r12, r16
    6700:	22 e0       	ldi	r18, 0x02	; 2
    6702:	c2 0e       	add	r12, r18
    6704:	d1 1c       	adc	r13, r1
    6706:	45 e0       	ldi	r20, 0x05	; 5
    6708:	50 e0       	ldi	r21, 0x00	; 0
    670a:	6f eb       	ldi	r22, 0xBF	; 191
    670c:	72 e0       	ldi	r23, 0x02	; 2
    670e:	c6 01       	movw	r24, r12
    6710:	0e 94 b2 34 	call	0x6964	; 0x6964 <strncasecmp_P>
    6714:	89 2b       	or	r24, r25
    6716:	21 f4       	brne	.+8      	; 0x6720 <strtod+0xa0>
    6718:	68 01       	movw	r12, r16
    671a:	87 e0       	ldi	r24, 0x07	; 7
    671c:	c8 0e       	add	r12, r24
    671e:	d1 1c       	adc	r13, r1
    6720:	e1 14       	cp	r14, r1
    6722:	f1 04       	cpc	r15, r1
    6724:	19 f0       	breq	.+6      	; 0x672c <strtod+0xac>
    6726:	d7 01       	movw	r26, r14
    6728:	cd 92       	st	X+, r12
    672a:	dc 92       	st	X, r13
    672c:	c1 11       	cpse	r28, r1
    672e:	ff c0       	rjmp	.+510    	; 0x692e <strtod+0x2ae>
    6730:	60 e0       	ldi	r22, 0x00	; 0
    6732:	70 e0       	ldi	r23, 0x00	; 0
    6734:	80 e8       	ldi	r24, 0x80	; 128
    6736:	9f e7       	ldi	r25, 0x7F	; 127
    6738:	03 c1       	rjmp	.+518    	; 0x6940 <strtod+0x2c0>
    673a:	43 e0       	ldi	r20, 0x03	; 3
    673c:	50 e0       	ldi	r21, 0x00	; 0
    673e:	6c eb       	ldi	r22, 0xBC	; 188
    6740:	72 e0       	ldi	r23, 0x02	; 2
    6742:	c6 01       	movw	r24, r12
    6744:	0e 94 b2 34 	call	0x6964	; 0x6964 <strncasecmp_P>
    6748:	89 2b       	or	r24, r25
    674a:	51 f4       	brne	.+20     	; 0x6760 <strtod+0xe0>
    674c:	e1 14       	cp	r14, r1
    674e:	f1 04       	cpc	r15, r1
    6750:	09 f4       	brne	.+2      	; 0x6754 <strtod+0xd4>
    6752:	f2 c0       	rjmp	.+484    	; 0x6938 <strtod+0x2b8>
    6754:	0e 5f       	subi	r16, 0xFE	; 254
    6756:	1f 4f       	sbci	r17, 0xFF	; 255
    6758:	f7 01       	movw	r30, r14
    675a:	11 83       	std	Z+1, r17	; 0x01
    675c:	00 83       	st	Z, r16
    675e:	ec c0       	rjmp	.+472    	; 0x6938 <strtod+0x2b8>
    6760:	68 01       	movw	r12, r16
    6762:	60 e0       	ldi	r22, 0x00	; 0
    6764:	70 e0       	ldi	r23, 0x00	; 0
    6766:	cb 01       	movw	r24, r22
    6768:	00 e0       	ldi	r16, 0x00	; 0
    676a:	10 e0       	ldi	r17, 0x00	; 0
    676c:	f6 01       	movw	r30, r12
    676e:	d0 ed       	ldi	r29, 0xD0	; 208
    6770:	d7 0d       	add	r29, r7
    6772:	da 30       	cpi	r29, 0x0A	; 10
    6774:	58 f5       	brcc	.+86     	; 0x67cc <strtod+0x14c>
    6776:	2c 2f       	mov	r18, r28
    6778:	22 60       	ori	r18, 0x02	; 2
    677a:	62 2e       	mov	r6, r18
    677c:	2c 2f       	mov	r18, r28
    677e:	28 70       	andi	r18, 0x08	; 8
    6780:	c2 ff       	sbrs	r28, 2
    6782:	05 c0       	rjmp	.+10     	; 0x678e <strtod+0x10e>
    6784:	21 11       	cpse	r18, r1
    6786:	28 c0       	rjmp	.+80     	; 0x67d8 <strtod+0x158>
    6788:	0f 5f       	subi	r16, 0xFF	; 255
    678a:	1f 4f       	sbci	r17, 0xFF	; 255
    678c:	25 c0       	rjmp	.+74     	; 0x67d8 <strtod+0x158>
    678e:	22 23       	and	r18, r18
    6790:	11 f0       	breq	.+4      	; 0x6796 <strtod+0x116>
    6792:	01 50       	subi	r16, 0x01	; 1
    6794:	11 09       	sbc	r17, r1
    6796:	a5 e0       	ldi	r26, 0x05	; 5
    6798:	b0 e0       	ldi	r27, 0x00	; 0
    679a:	9b 01       	movw	r18, r22
    679c:	ac 01       	movw	r20, r24
    679e:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <__muluhisi3>
    67a2:	4b 01       	movw	r8, r22
    67a4:	5c 01       	movw	r10, r24
    67a6:	88 0c       	add	r8, r8
    67a8:	99 1c       	adc	r9, r9
    67aa:	aa 1c       	adc	r10, r10
    67ac:	bb 1c       	adc	r11, r11
    67ae:	c5 01       	movw	r24, r10
    67b0:	b4 01       	movw	r22, r8
    67b2:	6d 0f       	add	r22, r29
    67b4:	71 1d       	adc	r23, r1
    67b6:	81 1d       	adc	r24, r1
    67b8:	91 1d       	adc	r25, r1
    67ba:	68 39       	cpi	r22, 0x98	; 152
    67bc:	a9 e9       	ldi	r26, 0x99	; 153
    67be:	7a 07       	cpc	r23, r26
    67c0:	8a 07       	cpc	r24, r26
    67c2:	a9 e1       	ldi	r26, 0x19	; 25
    67c4:	9a 07       	cpc	r25, r26
    67c6:	40 f0       	brcs	.+16     	; 0x67d8 <strtod+0x158>
    67c8:	c6 60       	ori	r28, 0x06	; 6
    67ca:	05 c0       	rjmp	.+10     	; 0x67d6 <strtod+0x156>
    67cc:	de 3f       	cpi	r29, 0xFE	; 254
    67ce:	51 f4       	brne	.+20     	; 0x67e4 <strtod+0x164>
    67d0:	c3 fd       	sbrc	r28, 3
    67d2:	44 c0       	rjmp	.+136    	; 0x685c <strtod+0x1dc>
    67d4:	c8 60       	ori	r28, 0x08	; 8
    67d6:	6c 2e       	mov	r6, r28
    67d8:	bf ef       	ldi	r27, 0xFF	; 255
    67da:	cb 1a       	sub	r12, r27
    67dc:	db 0a       	sbc	r13, r27
    67de:	70 80       	ld	r7, Z
    67e0:	c6 2d       	mov	r28, r6
    67e2:	c4 cf       	rjmp	.-120    	; 0x676c <strtod+0xec>
    67e4:	2d 2f       	mov	r18, r29
    67e6:	2f 7d       	andi	r18, 0xDF	; 223
    67e8:	25 31       	cpi	r18, 0x15	; 21
    67ea:	c1 f5       	brne	.+112    	; 0x685c <strtod+0x1dc>
    67ec:	40 81       	ld	r20, Z
    67ee:	4d 32       	cpi	r20, 0x2D	; 45
    67f0:	11 f4       	brne	.+4      	; 0x67f6 <strtod+0x176>
    67f2:	c0 61       	ori	r28, 0x10	; 16
    67f4:	06 c0       	rjmp	.+12     	; 0x6802 <strtod+0x182>
    67f6:	4b 32       	cpi	r20, 0x2B	; 43
    67f8:	21 f0       	breq	.+8      	; 0x6802 <strtod+0x182>
    67fa:	31 96       	adiw	r30, 0x01	; 1
    67fc:	21 e0       	ldi	r18, 0x01	; 1
    67fe:	30 e0       	ldi	r19, 0x00	; 0
    6800:	06 c0       	rjmp	.+12     	; 0x680e <strtod+0x18e>
    6802:	32 96       	adiw	r30, 0x02	; 2
    6804:	d6 01       	movw	r26, r12
    6806:	11 96       	adiw	r26, 0x01	; 1
    6808:	4c 91       	ld	r20, X
    680a:	22 e0       	ldi	r18, 0x02	; 2
    680c:	30 e0       	ldi	r19, 0x00	; 0
    680e:	a0 ed       	ldi	r26, 0xD0	; 208
    6810:	a4 0f       	add	r26, r20
    6812:	aa 30       	cpi	r26, 0x0A	; 10
    6814:	18 f0       	brcs	.+6      	; 0x681c <strtod+0x19c>
    6816:	e2 1b       	sub	r30, r18
    6818:	f3 0b       	sbc	r31, r19
    681a:	20 c0       	rjmp	.+64     	; 0x685c <strtod+0x1dc>
    681c:	40 e0       	ldi	r20, 0x00	; 0
    681e:	50 e0       	ldi	r21, 0x00	; 0
    6820:	40 38       	cpi	r20, 0x80	; 128
    6822:	bc e0       	ldi	r27, 0x0C	; 12
    6824:	5b 07       	cpc	r21, r27
    6826:	5c f4       	brge	.+22     	; 0x683e <strtod+0x1be>
    6828:	9a 01       	movw	r18, r20
    682a:	22 0f       	add	r18, r18
    682c:	33 1f       	adc	r19, r19
    682e:	22 0f       	add	r18, r18
    6830:	33 1f       	adc	r19, r19
    6832:	42 0f       	add	r20, r18
    6834:	53 1f       	adc	r21, r19
    6836:	44 0f       	add	r20, r20
    6838:	55 1f       	adc	r21, r21
    683a:	4a 0f       	add	r20, r26
    683c:	51 1d       	adc	r21, r1
    683e:	31 96       	adiw	r30, 0x01	; 1
    6840:	df 01       	movw	r26, r30
    6842:	11 97       	sbiw	r26, 0x01	; 1
    6844:	2c 91       	ld	r18, X
    6846:	a0 ed       	ldi	r26, 0xD0	; 208
    6848:	a2 0f       	add	r26, r18
    684a:	aa 30       	cpi	r26, 0x0A	; 10
    684c:	48 f3       	brcs	.-46     	; 0x6820 <strtod+0x1a0>
    684e:	c4 ff       	sbrs	r28, 4
    6850:	03 c0       	rjmp	.+6      	; 0x6858 <strtod+0x1d8>
    6852:	51 95       	neg	r21
    6854:	41 95       	neg	r20
    6856:	51 09       	sbc	r21, r1
    6858:	04 0f       	add	r16, r20
    685a:	15 1f       	adc	r17, r21
    685c:	c1 ff       	sbrs	r28, 1
    685e:	07 c0       	rjmp	.+14     	; 0x686e <strtod+0x1ee>
    6860:	e1 14       	cp	r14, r1
    6862:	f1 04       	cpc	r15, r1
    6864:	21 f0       	breq	.+8      	; 0x686e <strtod+0x1ee>
    6866:	31 97       	sbiw	r30, 0x01	; 1
    6868:	d7 01       	movw	r26, r14
    686a:	ed 93       	st	X+, r30
    686c:	fc 93       	st	X, r31
    686e:	0e 94 a6 2c 	call	0x594c	; 0x594c <__floatunsisf>
    6872:	c3 70       	andi	r28, 0x03	; 3
    6874:	c3 30       	cpi	r28, 0x03	; 3
    6876:	19 f0       	breq	.+6      	; 0x687e <strtod+0x1fe>
    6878:	6b 01       	movw	r12, r22
    687a:	7c 01       	movw	r14, r24
    687c:	06 c0       	rjmp	.+12     	; 0x688a <strtod+0x20a>
    687e:	6b 01       	movw	r12, r22
    6880:	7c 01       	movw	r14, r24
    6882:	f7 fa       	bst	r15, 7
    6884:	f0 94       	com	r15
    6886:	f7 f8       	bld	r15, 7
    6888:	f0 94       	com	r15
    688a:	20 e0       	ldi	r18, 0x00	; 0
    688c:	30 e0       	ldi	r19, 0x00	; 0
    688e:	a9 01       	movw	r20, r18
    6890:	c7 01       	movw	r24, r14
    6892:	b6 01       	movw	r22, r12
    6894:	0e 94 da 34 	call	0x69b4	; 0x69b4 <__cmpsf2>
    6898:	88 23       	and	r24, r24
    689a:	09 f4       	brne	.+2      	; 0x689e <strtod+0x21e>
    689c:	45 c0       	rjmp	.+138    	; 0x6928 <strtod+0x2a8>
    689e:	17 ff       	sbrs	r17, 7
    68a0:	06 c0       	rjmp	.+12     	; 0x68ae <strtod+0x22e>
    68a2:	11 95       	neg	r17
    68a4:	01 95       	neg	r16
    68a6:	11 09       	sbc	r17, r1
    68a8:	cb ed       	ldi	r28, 0xDB	; 219
    68aa:	d2 e0       	ldi	r29, 0x02	; 2
    68ac:	02 c0       	rjmp	.+4      	; 0x68b2 <strtod+0x232>
    68ae:	c3 ef       	ldi	r28, 0xF3	; 243
    68b0:	d2 e0       	ldi	r29, 0x02	; 2
    68b2:	5e 01       	movw	r10, r28
    68b4:	b8 e1       	ldi	r27, 0x18	; 24
    68b6:	ab 1a       	sub	r10, r27
    68b8:	b1 08       	sbc	r11, r1
    68ba:	46 01       	movw	r8, r12
    68bc:	be 2d       	mov	r27, r14
    68be:	af 2d       	mov	r26, r15
    68c0:	90 e2       	ldi	r25, 0x20	; 32
    68c2:	e9 2e       	mov	r14, r25
    68c4:	f1 2c       	mov	r15, r1
    68c6:	0e 15       	cp	r16, r14
    68c8:	1f 05       	cpc	r17, r15
    68ca:	84 f0       	brlt	.+32     	; 0x68ec <strtod+0x26c>
    68cc:	fe 01       	movw	r30, r28
    68ce:	25 91       	lpm	r18, Z+
    68d0:	35 91       	lpm	r19, Z+
    68d2:	45 91       	lpm	r20, Z+
    68d4:	54 91       	lpm	r21, Z
    68d6:	b4 01       	movw	r22, r8
    68d8:	8b 2f       	mov	r24, r27
    68da:	9a 2f       	mov	r25, r26
    68dc:	0e 94 34 2d 	call	0x5a68	; 0x5a68 <__mulsf3>
    68e0:	4b 01       	movw	r8, r22
    68e2:	b8 2f       	mov	r27, r24
    68e4:	a9 2f       	mov	r26, r25
    68e6:	0e 19       	sub	r16, r14
    68e8:	1f 09       	sbc	r17, r15
    68ea:	ed cf       	rjmp	.-38     	; 0x68c6 <strtod+0x246>
    68ec:	24 97       	sbiw	r28, 0x04	; 4
    68ee:	f5 94       	asr	r15
    68f0:	e7 94       	ror	r14
    68f2:	ca 15       	cp	r28, r10
    68f4:	db 05       	cpc	r29, r11
    68f6:	39 f7       	brne	.-50     	; 0x68c6 <strtod+0x246>
    68f8:	64 01       	movw	r12, r8
    68fa:	eb 2e       	mov	r14, r27
    68fc:	fa 2e       	mov	r15, r26
    68fe:	8e 2d       	mov	r24, r14
    6900:	88 0f       	add	r24, r24
    6902:	8f 2d       	mov	r24, r15
    6904:	88 1f       	adc	r24, r24
    6906:	8f 3f       	cpi	r24, 0xFF	; 255
    6908:	49 f0       	breq	.+18     	; 0x691c <strtod+0x29c>
    690a:	20 e0       	ldi	r18, 0x00	; 0
    690c:	30 e0       	ldi	r19, 0x00	; 0
    690e:	a9 01       	movw	r20, r18
    6910:	c7 01       	movw	r24, r14
    6912:	b6 01       	movw	r22, r12
    6914:	0e 94 da 34 	call	0x69b4	; 0x69b4 <__cmpsf2>
    6918:	81 11       	cpse	r24, r1
    691a:	06 c0       	rjmp	.+12     	; 0x6928 <strtod+0x2a8>
    691c:	82 e2       	ldi	r24, 0x22	; 34
    691e:	90 e0       	ldi	r25, 0x00	; 0
    6920:	90 93 cb 0c 	sts	0x0CCB, r25	; 0x800ccb <errno+0x1>
    6924:	80 93 ca 0c 	sts	0x0CCA, r24	; 0x800cca <errno>
    6928:	c7 01       	movw	r24, r14
    692a:	b6 01       	movw	r22, r12
    692c:	09 c0       	rjmp	.+18     	; 0x6940 <strtod+0x2c0>
    692e:	60 e0       	ldi	r22, 0x00	; 0
    6930:	70 e0       	ldi	r23, 0x00	; 0
    6932:	80 e8       	ldi	r24, 0x80	; 128
    6934:	9f ef       	ldi	r25, 0xFF	; 255
    6936:	04 c0       	rjmp	.+8      	; 0x6940 <strtod+0x2c0>
    6938:	60 e0       	ldi	r22, 0x00	; 0
    693a:	70 e0       	ldi	r23, 0x00	; 0
    693c:	80 ec       	ldi	r24, 0xC0	; 192
    693e:	9f e7       	ldi	r25, 0x7F	; 127
    6940:	df 91       	pop	r29
    6942:	cf 91       	pop	r28
    6944:	1f 91       	pop	r17
    6946:	0f 91       	pop	r16
    6948:	ff 90       	pop	r15
    694a:	ef 90       	pop	r14
    694c:	df 90       	pop	r13
    694e:	cf 90       	pop	r12
    6950:	bf 90       	pop	r11
    6952:	af 90       	pop	r10
    6954:	9f 90       	pop	r9
    6956:	8f 90       	pop	r8
    6958:	7f 90       	pop	r7
    695a:	6f 90       	pop	r6
    695c:	08 95       	ret

0000695e <__ctype_isfalse>:
    695e:	99 27       	eor	r25, r25
    6960:	88 27       	eor	r24, r24

00006962 <__ctype_istrue>:
    6962:	08 95       	ret

00006964 <strncasecmp_P>:
    6964:	fb 01       	movw	r30, r22
    6966:	dc 01       	movw	r26, r24
    6968:	41 50       	subi	r20, 0x01	; 1
    696a:	50 40       	sbci	r21, 0x00	; 0
    696c:	88 f0       	brcs	.+34     	; 0x6990 <strncasecmp_P+0x2c>
    696e:	8d 91       	ld	r24, X+
    6970:	81 34       	cpi	r24, 0x41	; 65
    6972:	1c f0       	brlt	.+6      	; 0x697a <strncasecmp_P+0x16>
    6974:	8b 35       	cpi	r24, 0x5B	; 91
    6976:	0c f4       	brge	.+2      	; 0x697a <strncasecmp_P+0x16>
    6978:	80 5e       	subi	r24, 0xE0	; 224
    697a:	65 91       	lpm	r22, Z+
    697c:	61 34       	cpi	r22, 0x41	; 65
    697e:	1c f0       	brlt	.+6      	; 0x6986 <strncasecmp_P+0x22>
    6980:	6b 35       	cpi	r22, 0x5B	; 91
    6982:	0c f4       	brge	.+2      	; 0x6986 <strncasecmp_P+0x22>
    6984:	60 5e       	subi	r22, 0xE0	; 224
    6986:	86 1b       	sub	r24, r22
    6988:	61 11       	cpse	r22, r1
    698a:	71 f3       	breq	.-36     	; 0x6968 <strncasecmp_P+0x4>
    698c:	99 0b       	sbc	r25, r25
    698e:	08 95       	ret
    6990:	88 1b       	sub	r24, r24
    6992:	fc cf       	rjmp	.-8      	; 0x698c <strncasecmp_P+0x28>

00006994 <strrev>:
    6994:	dc 01       	movw	r26, r24
    6996:	fc 01       	movw	r30, r24
    6998:	67 2f       	mov	r22, r23
    699a:	71 91       	ld	r23, Z+
    699c:	77 23       	and	r23, r23
    699e:	e1 f7       	brne	.-8      	; 0x6998 <strrev+0x4>
    69a0:	32 97       	sbiw	r30, 0x02	; 2
    69a2:	04 c0       	rjmp	.+8      	; 0x69ac <strrev+0x18>
    69a4:	7c 91       	ld	r23, X
    69a6:	6d 93       	st	X+, r22
    69a8:	70 83       	st	Z, r23
    69aa:	62 91       	ld	r22, -Z
    69ac:	ae 17       	cp	r26, r30
    69ae:	bf 07       	cpc	r27, r31
    69b0:	c8 f3       	brcs	.-14     	; 0x69a4 <strrev+0x10>
    69b2:	08 95       	ret

000069b4 <__cmpsf2>:
    69b4:	0e 94 df 34 	call	0x69be	; 0x69be <__fp_cmp>
    69b8:	08 f4       	brcc	.+2      	; 0x69bc <__cmpsf2+0x8>
    69ba:	81 e0       	ldi	r24, 0x01	; 1
    69bc:	08 95       	ret

000069be <__fp_cmp>:
    69be:	99 0f       	add	r25, r25
    69c0:	00 08       	sbc	r0, r0
    69c2:	55 0f       	add	r21, r21
    69c4:	aa 0b       	sbc	r26, r26
    69c6:	e0 e8       	ldi	r30, 0x80	; 128
    69c8:	fe ef       	ldi	r31, 0xFE	; 254
    69ca:	16 16       	cp	r1, r22
    69cc:	17 06       	cpc	r1, r23
    69ce:	e8 07       	cpc	r30, r24
    69d0:	f9 07       	cpc	r31, r25
    69d2:	c0 f0       	brcs	.+48     	; 0x6a04 <__fp_cmp+0x46>
    69d4:	12 16       	cp	r1, r18
    69d6:	13 06       	cpc	r1, r19
    69d8:	e4 07       	cpc	r30, r20
    69da:	f5 07       	cpc	r31, r21
    69dc:	98 f0       	brcs	.+38     	; 0x6a04 <__fp_cmp+0x46>
    69de:	62 1b       	sub	r22, r18
    69e0:	73 0b       	sbc	r23, r19
    69e2:	84 0b       	sbc	r24, r20
    69e4:	95 0b       	sbc	r25, r21
    69e6:	39 f4       	brne	.+14     	; 0x69f6 <__fp_cmp+0x38>
    69e8:	0a 26       	eor	r0, r26
    69ea:	61 f0       	breq	.+24     	; 0x6a04 <__fp_cmp+0x46>
    69ec:	23 2b       	or	r18, r19
    69ee:	24 2b       	or	r18, r20
    69f0:	25 2b       	or	r18, r21
    69f2:	21 f4       	brne	.+8      	; 0x69fc <__fp_cmp+0x3e>
    69f4:	08 95       	ret
    69f6:	0a 26       	eor	r0, r26
    69f8:	09 f4       	brne	.+2      	; 0x69fc <__fp_cmp+0x3e>
    69fa:	a1 40       	sbci	r26, 0x01	; 1
    69fc:	a6 95       	lsr	r26
    69fe:	8f ef       	ldi	r24, 0xFF	; 255
    6a00:	81 1d       	adc	r24, r1
    6a02:	81 1d       	adc	r24, r1
    6a04:	08 95       	ret

00006a06 <eeprom_read_block>:
    6a06:	dc 01       	movw	r26, r24
    6a08:	cb 01       	movw	r24, r22

00006a0a <eeprom_read_blraw>:
    6a0a:	fc 01       	movw	r30, r24
    6a0c:	f9 99       	sbic	0x1f, 1	; 31
    6a0e:	fe cf       	rjmp	.-4      	; 0x6a0c <eeprom_read_blraw+0x2>
    6a10:	06 c0       	rjmp	.+12     	; 0x6a1e <eeprom_read_blraw+0x14>
    6a12:	f2 bd       	out	0x22, r31	; 34
    6a14:	e1 bd       	out	0x21, r30	; 33
    6a16:	f8 9a       	sbi	0x1f, 0	; 31
    6a18:	31 96       	adiw	r30, 0x01	; 1
    6a1a:	00 b4       	in	r0, 0x20	; 32
    6a1c:	0d 92       	st	X+, r0
    6a1e:	41 50       	subi	r20, 0x01	; 1
    6a20:	50 40       	sbci	r21, 0x00	; 0
    6a22:	b8 f7       	brcc	.-18     	; 0x6a12 <eeprom_read_blraw+0x8>
    6a24:	08 95       	ret

00006a26 <eeprom_update_byte>:
    6a26:	26 2f       	mov	r18, r22

00006a28 <eeprom_update_r18>:
    6a28:	f9 99       	sbic	0x1f, 1	; 31
    6a2a:	fe cf       	rjmp	.-4      	; 0x6a28 <eeprom_update_r18>
    6a2c:	92 bd       	out	0x22, r25	; 34
    6a2e:	81 bd       	out	0x21, r24	; 33
    6a30:	f8 9a       	sbi	0x1f, 0	; 31
    6a32:	01 97       	sbiw	r24, 0x01	; 1
    6a34:	00 b4       	in	r0, 0x20	; 32
    6a36:	02 16       	cp	r0, r18
    6a38:	39 f0       	breq	.+14     	; 0x6a48 <eeprom_update_r18+0x20>
    6a3a:	1f ba       	out	0x1f, r1	; 31
    6a3c:	20 bd       	out	0x20, r18	; 32
    6a3e:	0f b6       	in	r0, 0x3f	; 63
    6a40:	f8 94       	cli
    6a42:	fa 9a       	sbi	0x1f, 2	; 31
    6a44:	f9 9a       	sbi	0x1f, 1	; 31
    6a46:	0f be       	out	0x3f, r0	; 63
    6a48:	08 95       	ret

00006a4a <eeprom_write_block>:
    6a4a:	dc 01       	movw	r26, r24
    6a4c:	cb 01       	movw	r24, r22
    6a4e:	03 c0       	rjmp	.+6      	; 0x6a56 <eeprom_write_block+0xc>
    6a50:	2d 91       	ld	r18, X+
    6a52:	0e 94 30 35 	call	0x6a60	; 0x6a60 <eeprom_write_r18>
    6a56:	41 50       	subi	r20, 0x01	; 1
    6a58:	50 40       	sbci	r21, 0x00	; 0
    6a5a:	d0 f7       	brcc	.-12     	; 0x6a50 <eeprom_write_block+0x6>
    6a5c:	08 95       	ret

00006a5e <eeprom_write_byte>:
    6a5e:	26 2f       	mov	r18, r22

00006a60 <eeprom_write_r18>:
    6a60:	f9 99       	sbic	0x1f, 1	; 31
    6a62:	fe cf       	rjmp	.-4      	; 0x6a60 <eeprom_write_r18>
    6a64:	1f ba       	out	0x1f, r1	; 31
    6a66:	92 bd       	out	0x22, r25	; 34
    6a68:	81 bd       	out	0x21, r24	; 33
    6a6a:	20 bd       	out	0x20, r18	; 32
    6a6c:	0f b6       	in	r0, 0x3f	; 63
    6a6e:	f8 94       	cli
    6a70:	fa 9a       	sbi	0x1f, 2	; 31
    6a72:	f9 9a       	sbi	0x1f, 1	; 31
    6a74:	0f be       	out	0x3f, r0	; 63
    6a76:	01 96       	adiw	r24, 0x01	; 1
    6a78:	08 95       	ret

00006a7a <__mulsi3>:
    6a7a:	db 01       	movw	r26, r22
    6a7c:	8f 93       	push	r24
    6a7e:	9f 93       	push	r25
    6a80:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <__muluhisi3>
    6a84:	bf 91       	pop	r27
    6a86:	af 91       	pop	r26
    6a88:	a2 9f       	mul	r26, r18
    6a8a:	80 0d       	add	r24, r0
    6a8c:	91 1d       	adc	r25, r1
    6a8e:	a3 9f       	mul	r26, r19
    6a90:	90 0d       	add	r25, r0
    6a92:	b2 9f       	mul	r27, r18
    6a94:	90 0d       	add	r25, r0
    6a96:	11 24       	eor	r1, r1
    6a98:	08 95       	ret

00006a9a <__divmodsi4>:
    6a9a:	05 2e       	mov	r0, r21
    6a9c:	97 fb       	bst	r25, 7
    6a9e:	1e f4       	brtc	.+6      	; 0x6aa6 <__divmodsi4+0xc>
    6aa0:	00 94       	com	r0
    6aa2:	0e 94 64 35 	call	0x6ac8	; 0x6ac8 <__negsi2>
    6aa6:	57 fd       	sbrc	r21, 7
    6aa8:	07 d0       	rcall	.+14     	; 0x6ab8 <__divmodsi4_neg2>
    6aaa:	0e 94 d5 2d 	call	0x5baa	; 0x5baa <__udivmodsi4>
    6aae:	07 fc       	sbrc	r0, 7
    6ab0:	03 d0       	rcall	.+6      	; 0x6ab8 <__divmodsi4_neg2>
    6ab2:	4e f4       	brtc	.+18     	; 0x6ac6 <__divmodsi4_exit>
    6ab4:	0c 94 64 35 	jmp	0x6ac8	; 0x6ac8 <__negsi2>

00006ab8 <__divmodsi4_neg2>:
    6ab8:	50 95       	com	r21
    6aba:	40 95       	com	r20
    6abc:	30 95       	com	r19
    6abe:	21 95       	neg	r18
    6ac0:	3f 4f       	sbci	r19, 0xFF	; 255
    6ac2:	4f 4f       	sbci	r20, 0xFF	; 255
    6ac4:	5f 4f       	sbci	r21, 0xFF	; 255

00006ac6 <__divmodsi4_exit>:
    6ac6:	08 95       	ret

00006ac8 <__negsi2>:
    6ac8:	90 95       	com	r25
    6aca:	80 95       	com	r24
    6acc:	70 95       	com	r23
    6ace:	61 95       	neg	r22
    6ad0:	7f 4f       	sbci	r23, 0xFF	; 255
    6ad2:	8f 4f       	sbci	r24, 0xFF	; 255
    6ad4:	9f 4f       	sbci	r25, 0xFF	; 255
    6ad6:	08 95       	ret

00006ad8 <__muluhisi3>:
    6ad8:	0e 94 7f 35 	call	0x6afe	; 0x6afe <__umulhisi3>
    6adc:	a5 9f       	mul	r26, r21
    6ade:	90 0d       	add	r25, r0
    6ae0:	b4 9f       	mul	r27, r20
    6ae2:	90 0d       	add	r25, r0
    6ae4:	a4 9f       	mul	r26, r20
    6ae6:	80 0d       	add	r24, r0
    6ae8:	91 1d       	adc	r25, r1
    6aea:	11 24       	eor	r1, r1
    6aec:	08 95       	ret

00006aee <__mulshisi3>:
    6aee:	b7 ff       	sbrs	r27, 7
    6af0:	0c 94 6c 35 	jmp	0x6ad8	; 0x6ad8 <__muluhisi3>

00006af4 <__mulohisi3>:
    6af4:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <__muluhisi3>
    6af8:	82 1b       	sub	r24, r18
    6afa:	93 0b       	sbc	r25, r19
    6afc:	08 95       	ret

00006afe <__umulhisi3>:
    6afe:	a2 9f       	mul	r26, r18
    6b00:	b0 01       	movw	r22, r0
    6b02:	b3 9f       	mul	r27, r19
    6b04:	c0 01       	movw	r24, r0
    6b06:	a3 9f       	mul	r26, r19
    6b08:	70 0d       	add	r23, r0
    6b0a:	81 1d       	adc	r24, r1
    6b0c:	11 24       	eor	r1, r1
    6b0e:	91 1d       	adc	r25, r1
    6b10:	b2 9f       	mul	r27, r18
    6b12:	70 0d       	add	r23, r0
    6b14:	81 1d       	adc	r24, r1
    6b16:	11 24       	eor	r1, r1
    6b18:	91 1d       	adc	r25, r1
    6b1a:	08 95       	ret

00006b1c <_exit>:
    6b1c:	f8 94       	cli

00006b1e <__stop_program>:
    6b1e:	ff cf       	rjmp	.-2      	; 0x6b1e <__stop_program>
