
RDR_ACA_20170815_V1.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000032a  00800200  00006e2c  00006ec0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006e2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000007a4  0080052a  0080052a  000071ea  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000071ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007248  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a80  00000000  00000000  00007288  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00011d56  00000000  00000000  00007d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004984  00000000  00000000  00019a5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000a8db  00000000  00000000  0001e3e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001c08  00000000  00000000  00028cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00021662  00000000  00000000  0002a8c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000070a0  00000000  00000000  0004bf2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000d20  00000000  00000000  00052fca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000bd55  00000000  00000000  00053cea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	84 c1       	rjmp	.+776    	; 0x30a <__ctors_end>
       2:	00 00       	nop
       4:	a1 c1       	rjmp	.+834    	; 0x348 <__bad_interrupt>
       6:	00 00       	nop
       8:	9f c1       	rjmp	.+830    	; 0x348 <__bad_interrupt>
       a:	00 00       	nop
       c:	9d c1       	rjmp	.+826    	; 0x348 <__bad_interrupt>
       e:	00 00       	nop
      10:	9b c1       	rjmp	.+822    	; 0x348 <__bad_interrupt>
      12:	00 00       	nop
      14:	99 c1       	rjmp	.+818    	; 0x348 <__bad_interrupt>
      16:	00 00       	nop
      18:	97 c1       	rjmp	.+814    	; 0x348 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	95 c1       	rjmp	.+810    	; 0x348 <__bad_interrupt>
      1e:	00 00       	nop
      20:	93 c1       	rjmp	.+806    	; 0x348 <__bad_interrupt>
      22:	00 00       	nop
      24:	91 c1       	rjmp	.+802    	; 0x348 <__bad_interrupt>
      26:	00 00       	nop
      28:	8f c1       	rjmp	.+798    	; 0x348 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8d c1       	rjmp	.+794    	; 0x348 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 67 28 	jmp	0x50ce	; 0x50ce <__vector_12>
      34:	89 c1       	rjmp	.+786    	; 0x348 <__bad_interrupt>
      36:	00 00       	nop
      38:	87 c1       	rjmp	.+782    	; 0x348 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	85 c1       	rjmp	.+778    	; 0x348 <__bad_interrupt>
      3e:	00 00       	nop
      40:	83 c1       	rjmp	.+774    	; 0x348 <__bad_interrupt>
      42:	00 00       	nop
      44:	81 c1       	rjmp	.+770    	; 0x348 <__bad_interrupt>
      46:	00 00       	nop
      48:	7f c1       	rjmp	.+766    	; 0x348 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7d c1       	rjmp	.+762    	; 0x348 <__bad_interrupt>
      4e:	00 00       	nop
      50:	7b c1       	rjmp	.+758    	; 0x348 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 60 16 	jmp	0x2cc0	; 0x2cc0 <__vector_21>
      58:	77 c1       	rjmp	.+750    	; 0x348 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	75 c1       	rjmp	.+746    	; 0x348 <__bad_interrupt>
      5e:	00 00       	nop
      60:	73 c1       	rjmp	.+742    	; 0x348 <__bad_interrupt>
      62:	00 00       	nop
      64:	71 c1       	rjmp	.+738    	; 0x348 <__bad_interrupt>
      66:	00 00       	nop
      68:	6f c1       	rjmp	.+734    	; 0x348 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6d c1       	rjmp	.+730    	; 0x348 <__bad_interrupt>
      6e:	00 00       	nop
      70:	6b c1       	rjmp	.+726    	; 0x348 <__bad_interrupt>
      72:	00 00       	nop
      74:	69 c1       	rjmp	.+722    	; 0x348 <__bad_interrupt>
      76:	00 00       	nop
      78:	67 c1       	rjmp	.+718    	; 0x348 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	65 c1       	rjmp	.+714    	; 0x348 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 c5 27 	jmp	0x4f8a	; 0x4f8a <__vector_32>
      84:	61 c1       	rjmp	.+706    	; 0x348 <__bad_interrupt>
      86:	00 00       	nop
      88:	5f c1       	rjmp	.+702    	; 0x348 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	0c 94 58 28 	jmp	0x50b0	; 0x50b0 <__vector_35>
      90:	0c 94 04 29 	jmp	0x5208	; 0x5208 <__vector_36>
      94:	0c 94 4b 29 	jmp	0x5296	; 0x5296 <__vector_37>
      98:	57 c1       	rjmp	.+686    	; 0x348 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	55 c1       	rjmp	.+682    	; 0x348 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	53 c1       	rjmp	.+678    	; 0x348 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	51 c1       	rjmp	.+674    	; 0x348 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4f c1       	rjmp	.+670    	; 0x348 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4d c1       	rjmp	.+666    	; 0x348 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4b c1       	rjmp	.+662    	; 0x348 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	49 c1       	rjmp	.+658    	; 0x348 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	47 c1       	rjmp	.+654    	; 0x348 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	45 c1       	rjmp	.+650    	; 0x348 <__bad_interrupt>
      be:	00 00       	nop
      c0:	43 c1       	rjmp	.+646    	; 0x348 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	41 c1       	rjmp	.+642    	; 0x348 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3f c1       	rjmp	.+638    	; 0x348 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	3d c1       	rjmp	.+634    	; 0x348 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	3b c1       	rjmp	.+630    	; 0x348 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	39 c1       	rjmp	.+626    	; 0x348 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	37 c1       	rjmp	.+622    	; 0x348 <__bad_interrupt>
      da:	00 00       	nop
      dc:	35 c1       	rjmp	.+618    	; 0x348 <__bad_interrupt>
      de:	00 00       	nop
      e0:	33 c1       	rjmp	.+614    	; 0x348 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	31 c1       	rjmp	.+610    	; 0x348 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	2f c1       	rjmp	.+606    	; 0x348 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	0c 94 fb 1e 	jmp	0x3df6	; 0x3df6 <__vector_59>
      f0:	0c 94 22 1f 	jmp	0x3e44	; 0x3e44 <__vector_60>
      f4:	0c 94 75 1f 	jmp	0x3eea	; 0x3eea <__vector_61>
      f8:	27 c1       	rjmp	.+590    	; 0x348 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	0c 94 49 1f 	jmp	0x3e92	; 0x3e92 <__vector_63>
     100:	23 c1       	rjmp	.+582    	; 0x348 <__bad_interrupt>
     102:	00 00       	nop
     104:	21 c1       	rjmp	.+578    	; 0x348 <__bad_interrupt>
     106:	00 00       	nop
     108:	1f c1       	rjmp	.+574    	; 0x348 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	1d c1       	rjmp	.+570    	; 0x348 <__bad_interrupt>
     10e:	00 00       	nop
     110:	1b c1       	rjmp	.+566    	; 0x348 <__bad_interrupt>
     112:	00 00       	nop
     114:	19 c1       	rjmp	.+562    	; 0x348 <__bad_interrupt>
     116:	00 00       	nop
     118:	17 c1       	rjmp	.+558    	; 0x348 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	15 c1       	rjmp	.+554    	; 0x348 <__bad_interrupt>
     11e:	00 00       	nop
     120:	c4 04       	cpc	r12, r4
     122:	ec 06       	cpc	r14, r28
     124:	45 04       	cpc	r4, r5
     126:	45 04       	cpc	r4, r5
     128:	45 04       	cpc	r4, r5
     12a:	45 04       	cpc	r4, r5
     12c:	a7 05       	cpc	r26, r7
     12e:	60 06       	cpc	r6, r16
     130:	45 04       	cpc	r4, r5
     132:	e1 04       	cpc	r14, r1
     134:	45 04       	cpc	r4, r5
     136:	f8 04       	cpc	r15, r8
     138:	45 04       	cpc	r4, r5
     13a:	45 04       	cpc	r4, r5
     13c:	56 05       	cpc	r21, r6
     13e:	b3 04       	cpc	r11, r3
     140:	45 04       	cpc	r4, r5
     142:	45 04       	cpc	r4, r5
     144:	74 06       	cpc	r7, r20
     146:	88 06       	cpc	r8, r24
     148:	45 04       	cpc	r4, r5
     14a:	45 04       	cpc	r4, r5
     14c:	86 06       	cpc	r8, r22
     14e:	5c 04       	cpc	r5, r12
     150:	45 04       	cpc	r4, r5
     152:	dd 04       	cpc	r13, r13
     154:	45 04       	cpc	r4, r5
     156:	45 04       	cpc	r4, r5
     158:	45 04       	cpc	r4, r5
     15a:	45 04       	cpc	r4, r5
     15c:	a7 05       	cpc	r26, r7
     15e:	a5 05       	cpc	r26, r5
     160:	45 04       	cpc	r4, r5
     162:	45 04       	cpc	r4, r5
     164:	45 04       	cpc	r4, r5
     166:	45 04       	cpc	r4, r5
     168:	45 04       	cpc	r4, r5
     16a:	45 04       	cpc	r4, r5
     16c:	b3 04       	cpc	r11, r3
     16e:	22 07       	cpc	r18, r18
     170:	d0 10       	cpse	r13, r0
     172:	c9 10       	cpse	r12, r9
     174:	c2 10       	cpse	r12, r2
     176:	bb 10       	cpse	r11, r11
     178:	b4 10       	cpse	r11, r4
     17a:	ad 10       	cpse	r10, r13
     17c:	a6 10       	cpse	r10, r6
     17e:	67 10       	cpse	r6, r7
     180:	d7 10       	cpse	r13, r7
     182:	98 10       	cpse	r9, r8
     184:	91 10       	cpse	r9, r1
     186:	8a 10       	cpse	r8, r10
     188:	83 10       	cpse	r8, r3
     18a:	7c 10       	cpse	r7, r12
     18c:	75 10       	cpse	r7, r5
     18e:	6e 10       	cpse	r6, r14
     190:	60 10       	cpse	r6, r0
     192:	9f 10       	cpse	r9, r15
     194:	a3 15       	cp	r26, r3
     196:	91 15       	cp	r25, r1
     198:	97 15       	cp	r25, r7
     19a:	9d 15       	cp	r25, r13
     19c:	60 15       	cp	r22, r0
     19e:	bb 15       	cp	r27, r11
     1a0:	b5 15       	cp	r27, r5
     1a2:	af 15       	cp	r26, r15
     1a4:	a9 15       	cp	r26, r9
     1a6:	a3 15       	cp	r26, r3
     1a8:	91 15       	cp	r25, r1
     1aa:	97 15       	cp	r25, r7
     1ac:	9d 15       	cp	r25, r13
     1ae:	60 15       	cp	r22, r0
     1b0:	bb 15       	cp	r27, r11
     1b2:	b5 15       	cp	r27, r5
     1b4:	af 15       	cp	r26, r15
     1b6:	a9 15       	cp	r26, r9
     1b8:	75 23       	and	r23, r21
     1ba:	72 23       	and	r23, r18
     1bc:	6f 23       	and	r22, r31
     1be:	6c 23       	and	r22, r28
     1c0:	66 23       	and	r22, r22
     1c2:	5b 23       	and	r21, r27
     1c4:	4c 23       	and	r20, r28
     1c6:	45 23       	and	r20, r21
     1c8:	30 23       	and	r19, r16
     1ca:	8a 23       	and	r24, r26

000001cc <__trampolines_end>:
     1cc:	6e 61       	ori	r22, 0x1E	; 30
     1ce:	6e 00       	.word	0x006e	; ????

000001d0 <__c.2240>:
     1d0:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1e0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1f0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     200:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     210:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     220:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     230:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     240:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     250:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     260:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     270:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     280:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     290:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2a0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2b0:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2c0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002ce <pstr_nan>:
     2ce:	4e 41 4e                                            NAN

000002d1 <pstr_inity>:
     2d1:	49 4e 49 54 59                                      INITY

000002d6 <pstr_inf>:
     2d6:	49 4e 46                                            INF

000002d9 <pwr_m10>:
     2d9:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     2e9:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000002f1 <pwr_p10>:
     2f1:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     301:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

0000030a <__ctors_end>:
     30a:	11 24       	eor	r1, r1
     30c:	1f be       	out	0x3f, r1	; 63
     30e:	c0 e0       	ldi	r28, 0x00	; 0
     310:	d0 e4       	ldi	r29, 0x40	; 64
     312:	de bf       	out	0x3e, r29	; 62
     314:	cd bf       	out	0x3d, r28	; 61

00000316 <__do_copy_data>:
     316:	15 e0       	ldi	r17, 0x05	; 5
     318:	a0 e0       	ldi	r26, 0x00	; 0
     31a:	b2 e0       	ldi	r27, 0x02	; 2
     31c:	ec e2       	ldi	r30, 0x2C	; 44
     31e:	fe e6       	ldi	r31, 0x6E	; 110
     320:	00 e0       	ldi	r16, 0x00	; 0
     322:	0b bf       	out	0x3b, r16	; 59
     324:	02 c0       	rjmp	.+4      	; 0x32a <__do_copy_data+0x14>
     326:	07 90       	elpm	r0, Z+
     328:	0d 92       	st	X+, r0
     32a:	aa 32       	cpi	r26, 0x2A	; 42
     32c:	b1 07       	cpc	r27, r17
     32e:	d9 f7       	brne	.-10     	; 0x326 <__do_copy_data+0x10>

00000330 <__do_clear_bss>:
     330:	2c e0       	ldi	r18, 0x0C	; 12
     332:	aa e2       	ldi	r26, 0x2A	; 42
     334:	b5 e0       	ldi	r27, 0x05	; 5
     336:	01 c0       	rjmp	.+2      	; 0x33a <.do_clear_bss_start>

00000338 <.do_clear_bss_loop>:
     338:	1d 92       	st	X+, r1

0000033a <.do_clear_bss_start>:
     33a:	ae 3c       	cpi	r26, 0xCE	; 206
     33c:	b2 07       	cpc	r27, r18
     33e:	e1 f7       	brne	.-8      	; 0x338 <.do_clear_bss_loop>
     340:	0e 94 18 1c 	call	0x3830	; 0x3830 <main>
     344:	0c 94 14 37 	jmp	0x6e28	; 0x6e28 <_exit>

00000348 <__bad_interrupt>:
     348:	5b ce       	rjmp	.-842    	; 0x0 <__vectors>

0000034a <ledoff1>:
	completes.

	u8 channel The clear channel selected for use by this PAN.
	*/
	void appClearChanFound(u8 channel)
	{
     34a:	a0 98       	cbi	0x14, 0	; 20
     34c:	08 95       	ret

0000034e <ledoff2>:
     34e:	a1 98       	cbi	0x14, 1	; 20
     350:	08 95       	ret

00000352 <ValidationTimeout>:
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <VALIDATION_TIMEOUT>
     358:	08 95       	ret

0000035a <CommTimeOut>:
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	80 93 2f 05 	sts	0x052F, r24	; 0x80052f <TOFlag>
     360:	e5 e3       	ldi	r30, 0x35	; 53
     362:	f9 e0       	ldi	r31, 0x09	; 9
     364:	80 81       	ld	r24, Z
     366:	8f 7b       	andi	r24, 0xBF	; 191
     368:	80 83       	st	Z, r24
     36a:	08 95       	ret

0000036c <KeypressTimeOut>:
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <KPTOFlag>
     372:	08 95       	ret

00000374 <SetupTimeout>:
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <SETUP_TIMEOUT>
     37a:	08 95       	ret

0000037c <SetDeviceState>:
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	80 93 ba 09 	sts	0x09BA, r24	; 0x8009ba <ucDeviceStateFlag>
     382:	08 95       	ret

00000384 <appStartScan>:
     384:	8f ef       	ldi	r24, 0xFF	; 255
     386:	0e 94 40 20 	call	0x4080	; 0x4080 <macInit>
     38a:	0c 94 35 26 	jmp	0x4c6a	; 0x4c6a <macScan>

0000038e <appAssociate>:
     38e:	e2 eb       	ldi	r30, 0xB2	; 178
     390:	fc e0       	ldi	r31, 0x0C	; 12
     392:	65 81       	ldd	r22, Z+5	; 0x05
     394:	83 81       	ldd	r24, Z+3	; 0x03
     396:	94 81       	ldd	r25, Z+4	; 0x04
     398:	0c 94 bb 20 	jmp	0x4176	; 0x4176 <macAssociate>

0000039c <appPingReq>:
     39c:	bc 01       	movw	r22, r24
     39e:	83 e0       	ldi	r24, 0x03	; 3
     3a0:	0c 94 b2 22 	jmp	0x4564	; 0x4564 <macPing>

000003a4 <appPingRsp>:
     3a4:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <radioGetSavedRssiValue>
     3a8:	88 23       	and	r24, r24
     3aa:	19 f0       	breq	.+6      	; 0x3b2 <appPingRsp+0xe>
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	80 93 45 0c 	sts	0x0C45, r24	; 0x800c45 <macConfig+0x8>
     3b2:	08 95       	ret

000003b4 <appPacketSendSucceed>:
     3b4:	20 91 52 0c 	lds	r18, 0x0C52	; 0x800c52 <macConfig+0x15>
     3b8:	30 91 53 0c 	lds	r19, 0x0C53	; 0x800c53 <macConfig+0x16>
     3bc:	80 91 4c 0c 	lds	r24, 0x0C4C	; 0x800c4c <macConfig+0xf>
     3c0:	90 91 4d 0c 	lds	r25, 0x0C4D	; 0x800c4d <macConfig+0x10>
     3c4:	28 17       	cp	r18, r24
     3c6:	39 07       	cpc	r19, r25
     3c8:	09 f0       	breq	.+2      	; 0x3cc <appPacketSendSucceed+0x18>
     3ca:	08 95       	ret
     3cc:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <failCount>
     3d0:	08 95       	ret

000003d2 <appPacketSendAccessFail>:
     3d2:	08 95       	ret

000003d4 <appPacketSendFailed>:
     3d4:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <macIsScanning>
     3d8:	81 11       	cpse	r24, r1
     3da:	17 c0       	rjmp	.+46     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     3dc:	20 91 52 0c 	lds	r18, 0x0C52	; 0x800c52 <macConfig+0x15>
     3e0:	30 91 53 0c 	lds	r19, 0x0C53	; 0x800c53 <macConfig+0x16>
     3e4:	80 91 4c 0c 	lds	r24, 0x0C4C	; 0x800c4c <macConfig+0xf>
     3e8:	90 91 4d 0c 	lds	r25, 0x0C4D	; 0x800c4d <macConfig+0x10>
     3ec:	28 17       	cp	r18, r24
     3ee:	39 07       	cpc	r19, r25
     3f0:	69 f0       	breq	.+26     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     3f2:	90 91 2c 05 	lds	r25, 0x052C	; 0x80052c <failCount>
     3f6:	9f 5f       	subi	r25, 0xFF	; 255
     3f8:	90 93 2c 05 	sts	0x052C, r25	; 0x80052c <failCount>
     3fc:	93 30       	cpi	r25, 0x03	; 3
     3fe:	28 f0       	brcs	.+10     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     400:	c9 01       	movw	r24, r18
     402:	0e 94 0a 21 	call	0x4214	; 0x4214 <macIsChild>
     406:	81 11       	cpse	r24, r1
     408:	2c c0       	rjmp	.+88     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     40a:	08 95       	ret
     40c:	40 e0       	ldi	r20, 0x00	; 0
     40e:	50 e0       	ldi	r21, 0x00	; 0
     410:	60 e0       	ldi	r22, 0x00	; 0
     412:	c9 01       	movw	r24, r18
     414:	0e 94 37 22 	call	0x446e	; 0x446e <macDataRequest>
     418:	80 91 2c 05 	lds	r24, 0x052C	; 0x80052c <failCount>
     41c:	8f 5f       	subi	r24, 0xFF	; 255
     41e:	80 93 2c 05 	sts	0x052C, r24	; 0x80052c <failCount>
     422:	83 30       	cpi	r24, 0x03	; 3
     424:	90 f3       	brcs	.-28     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     426:	10 92 45 0c 	sts	0x0C45, r1	; 0x800c45 <macConfig+0x8>
     42a:	88 e0       	ldi	r24, 0x08	; 8
     42c:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <radioRandom>
     430:	28 2f       	mov	r18, r24
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	2e 5c       	subi	r18, 0xCE	; 206
     436:	3f 4f       	sbci	r19, 0xFF	; 255
     438:	4e e1       	ldi	r20, 0x1E	; 30
     43a:	42 9f       	mul	r20, r18
     43c:	c0 01       	movw	r24, r0
     43e:	43 9f       	mul	r20, r19
     440:	90 0d       	add	r25, r0
     442:	11 24       	eor	r1, r1
     444:	62 ec       	ldi	r22, 0xC2	; 194
     446:	71 e0       	ldi	r23, 0x01	; 1
     448:	88 51       	subi	r24, 0x18	; 24
     44a:	9c 4f       	sbci	r25, 0xFC	; 252
     44c:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <macSetAlarm>
     450:	20 91 52 0c 	lds	r18, 0x0C52	; 0x800c52 <macConfig+0x15>
     454:	30 91 53 0c 	lds	r19, 0x0C53	; 0x800c53 <macConfig+0x16>
     458:	c9 01       	movw	r24, r18
     45a:	0e 94 0a 21 	call	0x4214	; 0x4214 <macIsChild>
     45e:	88 23       	and	r24, r24
     460:	a1 f2       	breq	.-88     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     462:	80 91 52 0c 	lds	r24, 0x0C52	; 0x800c52 <macConfig+0x15>
     466:	90 91 53 0c 	lds	r25, 0x0C53	; 0x800c53 <macConfig+0x16>
     46a:	0c 94 60 21 	jmp	0x42c0	; 0x42c0 <macRemoveChild>

0000046e <appDataIndication>:
     46e:	80 91 39 0b 	lds	r24, 0x0B39	; 0x800b39 <mac_buffer_rx>
     472:	10 92 10 0b 	sts	0x0B10, r1	; 0x800b10 <ucSendDataSize>
     476:	88 23       	and	r24, r24
     478:	29 f0       	breq	.+10     	; 0x484 <appDataIndication+0x16>
     47a:	80 91 47 0b 	lds	r24, 0x0B47	; 0x800b47 <mac_buffer_rx+0xe>
     47e:	8f 77       	andi	r24, 0x7F	; 127
     480:	81 30       	cpi	r24, 0x01	; 1
     482:	09 f0       	breq	.+2      	; 0x486 <appDataIndication+0x18>
     484:	08 95       	ret
     486:	20 91 48 0b 	lds	r18, 0x0B48	; 0x800b48 <mac_buffer_rx+0xf>
     48a:	20 93 2b 05 	sts	0x052B, r18	; 0x80052b <ucDataLength.4360>
     48e:	e7 e3       	ldi	r30, 0x37	; 55
     490:	f9 e0       	ldi	r31, 0x09	; 9
     492:	80 e8       	ldi	r24, 0x80	; 128
     494:	df 01       	movw	r26, r30
     496:	1d 92       	st	X+, r1
     498:	8a 95       	dec	r24
     49a:	e9 f7       	brne	.-6      	; 0x496 <appDataIndication+0x28>
     49c:	22 23       	and	r18, r18
     49e:	69 f0       	breq	.+26     	; 0x4ba <appDataIndication+0x4c>
     4a0:	e9 e4       	ldi	r30, 0x49	; 73
     4a2:	fb e0       	ldi	r31, 0x0B	; 11
     4a4:	a7 e3       	ldi	r26, 0x37	; 55
     4a6:	b9 e0       	ldi	r27, 0x09	; 9
     4a8:	21 50       	subi	r18, 0x01	; 1
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	26 5b       	subi	r18, 0xB6	; 182
     4ae:	34 4f       	sbci	r19, 0xF4	; 244
     4b0:	81 91       	ld	r24, Z+
     4b2:	8d 93       	st	X+, r24
     4b4:	e2 17       	cp	r30, r18
     4b6:	f3 07       	cpc	r31, r19
     4b8:	d9 f7       	brne	.-10     	; 0x4b0 <appDataIndication+0x42>
     4ba:	87 e3       	ldi	r24, 0x37	; 55
     4bc:	99 e0       	ldi	r25, 0x09	; 9
     4be:	b9 d7       	rcall	.+3954   	; 0x1432 <extractIncomingMessage>
     4c0:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <OP>
     4c4:	10 92 34 09 	sts	0x0934, r1	; 0x800934 <ucNumberOfRetry>
     4c8:	08 95       	ret

000004ca <appChildAssociated>:
     4ca:	a1 9a       	sbi	0x14, 1	; 20
     4cc:	67 ea       	ldi	r22, 0xA7	; 167
     4ce:	71 e0       	ldi	r23, 0x01	; 1
     4d0:	8a e0       	ldi	r24, 0x0A	; 10
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	0c 94 bd 26 	jmp	0x4d7a	; 0x4d7a <macSetAlarm>

000004d8 <appAssociateConfirm>:
     4d8:	81 11       	cpse	r24, r1
     4da:	08 95       	ret
     4dc:	a1 9a       	sbi	0x14, 1	; 20
     4de:	67 ea       	ldi	r22, 0xA7	; 167
     4e0:	71 e0       	ldi	r23, 0x01	; 1
     4e2:	8a e0       	ldi	r24, 0x0A	; 10
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	0c 94 bd 26 	jmp	0x4d7a	; 0x4d7a <macSetAlarm>

000004ea <appScanConfirm>:
     4ea:	81 11       	cpse	r24, r1
     4ec:	06 c0       	rjmp	.+12     	; 0x4fa <appScanConfirm+0x10>
     4ee:	62 ec       	ldi	r22, 0xC2	; 194
     4f0:	71 e0       	ldi	r23, 0x01	; 1
     4f2:	88 ee       	ldi	r24, 0xE8	; 232
     4f4:	93 e0       	ldi	r25, 0x03	; 3
     4f6:	0c 94 bd 26 	jmp	0x4d7a	; 0x4d7a <macSetAlarm>
     4fa:	67 ec       	ldi	r22, 0xC7	; 199
     4fc:	71 e0       	ldi	r23, 0x01	; 1
     4fe:	8e e1       	ldi	r24, 0x1E	; 30
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	0c 94 bd 26 	jmp	0x4d7a	; 0x4d7a <macSetAlarm>

00000506 <checkEeprom>:
	address.  If the EEPROM is unprogrammed, then a random MAC address
	is written into EEPROM.
	Similarly, the reader state is set to ? if the EEPROM is unprogrammed.
	*/
	void checkEeprom(void)
	{
     506:	8f 92       	push	r8
     508:	9f 92       	push	r9
     50a:	af 92       	push	r10
     50c:	bf 92       	push	r11
     50e:	cf 92       	push	r12
     510:	df 92       	push	r13
     512:	ef 92       	push	r14
     514:	ff 92       	push	r15
     516:	0f 93       	push	r16
     518:	1f 93       	push	r17
     51a:	cf 93       	push	r28
     51c:	df 93       	push	r29
     51e:	cd b7       	in	r28, 0x3d	; 61
     520:	de b7       	in	r29, 0x3e	; 62
     522:	61 97       	sbiw	r28, 0x11	; 17
     524:	0f b6       	in	r0, 0x3f	; 63
     526:	f8 94       	cli
     528:	de bf       	out	0x3e, r29	; 62
     52a:	0f be       	out	0x3f, r0	; 63
     52c:	cd bf       	out	0x3d, r28	; 61
			u32 low;
			u32 high;
			u8 regval;
			u8  i=0;
			
			u8 temp = READER_NEW;
     52e:	87 e0       	ldi	r24, 0x07	; 7
     530:	89 8b       	std	Y+17, r24	; 0x11
			
			// Setup the address of this device by reading a stored address from eeprom.
			halGetMacAddr((u8*)&(NodeLongAddress));
     532:	ae 01       	movw	r20, r28
     534:	47 5f       	subi	r20, 0xF7	; 247
     536:	5f 4f       	sbci	r21, 0xFF	; 255
     538:	68 e0       	ldi	r22, 0x08	; 8
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	0e 94 16 20 	call	0x402c	; 0x402c <halGetEeprom>
			
			// Partition the long address
			low = NodeLongAddress & 0xffffffff;
     542:	89 84       	ldd	r8, Y+9	; 0x09
     544:	9a 84       	ldd	r9, Y+10	; 0x0a
     546:	ab 84       	ldd	r10, Y+11	; 0x0b
     548:	bc 84       	ldd	r11, Y+12	; 0x0c
     54a:	cd 84       	ldd	r12, Y+13	; 0x0d
     54c:	de 84       	ldd	r13, Y+14	; 0x0e
     54e:	ef 84       	ldd	r14, Y+15	; 0x0f
     550:	f8 88       	ldd	r15, Y+16	; 0x10
			high = NodeLongAddress >> 32;
			
			// Virgin Board Configuration Found,
			// Request Setup Info from Reader
			if((low == 0xFFFFFFFF) && (high == 0xFFFFFFFF)){
     552:	8f ef       	ldi	r24, 0xFF	; 255
     554:	88 16       	cp	r8, r24
     556:	98 06       	cpc	r9, r24
     558:	a8 06       	cpc	r10, r24
     55a:	b8 06       	cpc	r11, r24
     55c:	99 f0       	breq	.+38     	; 0x584 <checkEeprom+0x7e>
				asm("nop");
			}
			
			
		}
	}
     55e:	61 96       	adiw	r28, 0x11	; 17
     560:	0f b6       	in	r0, 0x3f	; 63
     562:	f8 94       	cli
     564:	de bf       	out	0x3e, r29	; 62
     566:	0f be       	out	0x3f, r0	; 63
     568:	cd bf       	out	0x3d, r28	; 61
     56a:	df 91       	pop	r29
     56c:	cf 91       	pop	r28
     56e:	1f 91       	pop	r17
     570:	0f 91       	pop	r16
     572:	ff 90       	pop	r15
     574:	ef 90       	pop	r14
     576:	df 90       	pop	r13
     578:	cf 90       	pop	r12
     57a:	bf 90       	pop	r11
     57c:	af 90       	pop	r10
     57e:	9f 90       	pop	r9
     580:	8f 90       	pop	r8
     582:	08 95       	ret
			// Setup the address of this device by reading a stored address from eeprom.
			halGetMacAddr((u8*)&(NodeLongAddress));
			
			// Partition the long address
			low = NodeLongAddress & 0xffffffff;
			high = NodeLongAddress >> 32;
     584:	94 01       	movw	r18, r8
     586:	a5 01       	movw	r20, r10
     588:	b6 01       	movw	r22, r12
     58a:	c7 01       	movw	r24, r14
     58c:	00 e2       	ldi	r16, 0x20	; 32
     58e:	0e 94 3e 2f 	call	0x5e7c	; 0x5e7c <__lshrdi3>
     592:	69 01       	movw	r12, r18
     594:	7a 01       	movw	r14, r20
			
			// Virgin Board Configuration Found,
			// Request Setup Info from Reader
			if((low == 0xFFFFFFFF) && (high == 0xFFFFFFFF)){
     596:	2f 3f       	cpi	r18, 0xFF	; 255
     598:	3f 4f       	sbci	r19, 0xFF	; 255
     59a:	4f 4f       	sbci	r20, 0xFF	; 255
     59c:	5f 4f       	sbci	r21, 0xFF	; 255
     59e:	61 05       	cpc	r22, r1
     5a0:	71 05       	cpc	r23, r1
     5a2:	81 05       	cpc	r24, r1
     5a4:	91 05       	cpc	r25, r1
     5a6:	71 f0       	breq	.+28     	; 0x5c4 <checkEeprom+0xbe>
				halPutEeprom(READER_STATE_ADDR,2,&temp);
				eeprom_update_byte(MACHINE_LABEL_ADDR, 0); //make label empty string
				eeprom_update_byte(MACHINE_DESCRIPTION_ADDR, 0); //make description empty string
			}

			else if((low == 0xFFFFFFFF) && (high != 0x00000000)){
     5a8:	cd 28       	or	r12, r13
     5aa:	ce 28       	or	r12, r14
     5ac:	cf 28       	or	r12, r15
     5ae:	b9 f2       	breq	.-82     	; 0x55e <checkEeprom+0x58>
				
				halPutEeprom(READER_STATE_ADDR,2,&temp);
     5b0:	ae 01       	movw	r20, r28
     5b2:	4f 5e       	subi	r20, 0xEF	; 239
     5b4:	5f 4f       	sbci	r21, 0xFF	; 255
     5b6:	62 e0       	ldi	r22, 0x02	; 2
     5b8:	82 e2       	ldi	r24, 0x22	; 34
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	0e 94 2b 20 	call	0x4056	; 0x4056 <halPutEeprom>
				asm("nop");
     5c0:	00 00       	nop
     5c2:	cd cf       	rjmp	.-102    	; 0x55e <checkEeprom+0x58>
				// Produce Random Number
				
				u8 buf[8];
				u8 bits =8;

				memset(&buf,0,sizeof(buf));
     5c4:	ce 01       	movw	r24, r28
     5c6:	01 96       	adiw	r24, 0x01	; 1
     5c8:	6c 01       	movw	r12, r24
     5ca:	88 e0       	ldi	r24, 0x08	; 8
     5cc:	f6 01       	movw	r30, r12
     5ce:	11 92       	st	Z+, r1
     5d0:	8a 95       	dec	r24
     5d2:	e9 f7       	brne	.-6      	; 0x5ce <checkEeprom+0xc8>
				// create random MAC address and store it
				radioInit(0); // Needed for random to work.
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	0e 94 35 1c 	call	0x386a	; 0x386a <radioInit>
				radioSetTrxState(RX_ON);
     5da:	86 e0       	ldi	r24, 0x06	; 6
     5dc:	0e 94 ce 1c 	call	0x399c	; 0x399c <radioSetTrxState>
     5e0:	76 01       	movw	r14, r12

				
				for (u8 x = 0;x < 8;x++){
     5e2:	10 e0       	ldi	r17, 0x00	; 0

					
					if(x < 4)
					buf[x] = 0xFF;			// Load lower 4-bytes w/ 0xFF
     5e4:	0f ef       	ldi	r16, 0xFF	; 255
     5e6:	08 c0       	rjmp	.+16     	; 0x5f8 <checkEeprom+0xf2>
     5e8:	f7 01       	movw	r30, r14
     5ea:	00 83       	st	Z, r16
				// create random MAC address and store it
				radioInit(0); // Needed for random to work.
				radioSetTrxState(RX_ON);

				
				for (u8 x = 0;x < 8;x++){
     5ec:	1f 5f       	subi	r17, 0xFF	; 255
     5ee:	ff ef       	ldi	r31, 0xFF	; 255
     5f0:	ef 1a       	sub	r14, r31
     5f2:	ff 0a       	sbc	r15, r31
     5f4:	18 30       	cpi	r17, 0x08	; 8
     5f6:	c1 f0       	breq	.+48     	; 0x628 <checkEeprom+0x122>

					
					if(x < 4)
     5f8:	14 30       	cpi	r17, 0x04	; 4
     5fa:	b0 f3       	brcs	.-20     	; 0x5e8 <checkEeprom+0xe2>
					buf[x] = 0xFF;			// Load lower 4-bytes w/ 0xFF

					else{
						
						i = radioGetTrxState();
     5fc:	0e 94 ca 1c 	call	0x3994	; 0x3994 <radioGetTrxState>

						// Load upper 4-bytes w/ random number (4-bytes)
						if(i == RX_ON || i == RX_AACK_ON)
     600:	8f 7e       	andi	r24, 0xEF	; 239
     602:	86 30       	cpi	r24, 0x06	; 6
     604:	99 f7       	brne	.-26     	; 0x5ec <checkEeprom+0xe6>
     606:	f7 01       	movw	r30, r14
     608:	90 81       	ld	r25, Z
     60a:	24 e0       	ldi	r18, 0x04	; 4
						// Must be in rx to get random numbers
						// Random number generator on-board
						// has two random bits each read
						for (i=0;i<bits/2;i++)
						{
							regval = hal_subregister_read(SR_RND_VALUE);
     60c:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__TEXT_REGION_LENGTH__+0x7e0146>
     610:	80 76       	andi	r24, 0x60	; 96
     612:	82 95       	swap	r24
     614:	86 95       	lsr	r24
     616:	87 70       	andi	r24, 0x07	; 7
							buf[x]= (buf[x] << 2) | regval;
     618:	99 0f       	add	r25, r25
     61a:	99 0f       	add	r25, r25
     61c:	98 2b       	or	r25, r24
     61e:	f7 01       	movw	r30, r14
     620:	90 83       	st	Z, r25
     622:	21 50       	subi	r18, 0x01	; 1
						// Load upper 4-bytes w/ random number (4-bytes)
						if(i == RX_ON || i == RX_AACK_ON)
						// Must be in rx to get random numbers
						// Random number generator on-board
						// has two random bits each read
						for (i=0;i<bits/2;i++)
     624:	99 f7       	brne	.-26     	; 0x60c <checkEeprom+0x106>
     626:	e2 cf       	rjmp	.-60     	; 0x5ec <checkEeprom+0xe6>
							buf[x]= (buf[x] << 2) | regval;
						}
					}
				}
				
				halPutMacAddr(buf);
     628:	a6 01       	movw	r20, r12
     62a:	68 e0       	ldi	r22, 0x08	; 8
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	0e 94 2b 20 	call	0x4056	; 0x4056 <halPutEeprom>
				
				halPutEeprom(READER_STATE_ADDR,2,&temp);
     634:	ae 01       	movw	r20, r28
     636:	4f 5e       	subi	r20, 0xEF	; 239
     638:	5f 4f       	sbci	r21, 0xFF	; 255
     63a:	62 e0       	ldi	r22, 0x02	; 2
     63c:	82 e2       	ldi	r24, 0x22	; 34
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	0e 94 2b 20 	call	0x4056	; 0x4056 <halPutEeprom>
				eeprom_update_byte(MACHINE_LABEL_ADDR, 0); //make label empty string
     644:	60 e0       	ldi	r22, 0x00	; 0
     646:	8c e6       	ldi	r24, 0x6C	; 108
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <eeprom_update_byte>
				eeprom_update_byte(MACHINE_DESCRIPTION_ADDR, 0); //make description empty string
     64e:	60 e0       	ldi	r22, 0x00	; 0
     650:	87 e7       	ldi	r24, 0x77	; 119
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	0e 94 b0 36 	call	0x6d60	; 0x6d60 <eeprom_update_byte>
			low = NodeLongAddress & 0xffffffff;
			high = NodeLongAddress >> 32;
			
			// Virgin Board Configuration Found,
			// Request Setup Info from Reader
			if((low == 0xFFFFFFFF) && (high == 0xFFFFFFFF)){
     658:	82 cf       	rjmp	.-252    	; 0x55e <checkEeprom+0x58>

0000065a <appInit>:
	Initializes ACA machines calling machine status
	Set flags: VALIDATE_READER
	ucDeviceStateFlag
	*/
	void appInit(void)
	{
     65a:	0f 93       	push	r16
     65c:	1f 93       	push	r17
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	1f 92       	push	r1
     664:	cd b7       	in	r28, 0x3d	; 61
     666:	de b7       	in	r29, 0x3e	; 62
		u8 machineCode;
		u8 tmp=0;
		u8 machineTimerId;
		
		// Init the mac
		LED_INIT();
     668:	83 b3       	in	r24, 0x13	; 19
     66a:	87 60       	ori	r24, 0x07	; 7
     66c:	83 bb       	out	0x13, r24	; 19
     66e:	84 b3       	in	r24, 0x14	; 20
     670:	88 7f       	andi	r24, 0xF8	; 248
     672:	84 bb       	out	0x14, r24	; 20
		Leds_on();
     674:	84 b3       	in	r24, 0x14	; 20
     676:	87 60       	ori	r24, 0x07	; 7
     678:	84 bb       	out	0x14, r24	; 20
		Buzzer_init();
     67a:	6b 9a       	sbi	0x0d, 3	; 13
     67c:	73 98       	cbi	0x0e, 3	; 14
		Leds_off();
     67e:	84 b3       	in	r24, 0x14	; 20
     680:	88 7f       	andi	r24, 0xF8	; 248
     682:	84 bb       	out	0x14, r24	; 20

		// Blip the LED once on powerup
		Led1_on();
     684:	a0 9a       	sbi	0x14, 0	; 20
		//read validation code
		OP = VALIDATE_READER;
     686:	83 e1       	ldi	r24, 0x13	; 19
     688:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <OP>
		macSetAlarm(25, ledoff1);
     68c:	65 ea       	ldi	r22, 0xA5	; 165
     68e:	71 e0       	ldi	r23, 0x01	; 1
     690:	89 e1       	ldi	r24, 0x19	; 25
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <macSetAlarm>
		//communicate with machines
		ucDeviceStateFlag = DEVICE_STATUS_NEEDED;  //true
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	80 93 ba 09 	sts	0x09BA, r24	; 0x8009ba <ucDeviceStateFlag>
		
		#if (__AVR__)
		// If the EEPROM is cleared, init it to something useful
		checkEeprom();
     69e:	33 df       	rcall	.-410    	; 0x506 <checkEeprom>
		#endif // __AVR__
		
		initReader();
     6a0:	0e 94 5f 14 	call	0x28be	; 0x28be <initReader>

		
		#ifdef MACHINE_CONNECTED
		
		//wait up to 10 seconds for machine to become active
		machineTimerId = macSetAlarm(MACHINE_WAIT_TIMEOUT,WaitForMachine);
     6a4:	6b e4       	ldi	r22, 0x4B	; 75
     6a6:	76 e1       	ldi	r23, 0x16	; 22
     6a8:	88 e2       	ldi	r24, 0x28	; 40
     6aa:	93 e2       	ldi	r25, 0x23	; 35
     6ac:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <macSetAlarm>
     6b0:	08 2f       	mov	r16, r24
	ucDeviceStateFlag
	*/
	void appInit(void)
	{
		u8 machineCode;
		u8 tmp=0;
     6b2:	10 e0       	ldi	r17, 0x00	; 0
		#ifdef MACHINE_CONNECTED
		
		//wait up to 10 seconds for machine to become active
		machineTimerId = macSetAlarm(MACHINE_WAIT_TIMEOUT,WaitForMachine);
		
		while(ucMachineWait == MACHINE_WAIT)
     6b4:	90 91 b9 09 	lds	r25, 0x09B9	; 0x8009b9 <ucMachineWait>
     6b8:	91 11       	cpse	r25, r1
     6ba:	11 c0       	rjmp	.+34     	; 0x6de <appInit+0x84>
		{
			if(ucDeviceStateFlag == DEVICE_STATUS_NEEDED)	//true
     6bc:	90 91 ba 09 	lds	r25, 0x09BA	; 0x8009ba <ucDeviceStateFlag>
     6c0:	91 30       	cpi	r25, 0x01	; 1
     6c2:	99 f1       	breq	.+102    	; 0x72a <appInit+0xd0>
				//If True, Machine Status has been completed, ucDeviceStateFlag set to MACHINE_STATUS_ON
				SQACAInitializationSequence();
				
				tmp = macSetAlarm(DEVICE_POLL_PERIOD,SetDeviceState);
			}
			else if(ucDeviceStateFlag == MACHINE_STATUS_ON)		//false
     6c4:	92 30       	cpi	r25, 0x02	; 2
     6c6:	09 f4       	brne	.+2      	; 0x6ca <appInit+0x70>
     6c8:	59 c0       	rjmp	.+178    	; 0x77c <appInit+0x122>
				macTimerEnd(machineTimerId);
				macTimerEnd(tmp);
				
				break;
			}
			else if( mac_event_pending() )
     6ca:	0e 94 cc 22 	call	0x4598	; 0x4598 <mac_event_pending>
     6ce:	88 23       	and	r24, r24
     6d0:	89 f3       	breq	.-30     	; 0x6b4 <appInit+0x5a>
			{
				macTask();  //timer has timed out handle timer task.
     6d2:	0e 94 01 23 	call	0x4602	; 0x4602 <macTask>
		#ifdef MACHINE_CONNECTED
		
		//wait up to 10 seconds for machine to become active
		machineTimerId = macSetAlarm(MACHINE_WAIT_TIMEOUT,WaitForMachine);
		
		while(ucMachineWait == MACHINE_WAIT)
     6d6:	90 91 b9 09 	lds	r25, 0x09B9	; 0x8009b9 <ucMachineWait>
     6da:	99 23       	and	r25, r25
     6dc:	79 f3       	breq	.-34     	; 0x6bc <appInit+0x62>
			{
				macTask();  //timer has timed out handle timer task.
			}
			
		}
		macSetAlarm(DEVICE_POLL_PERIOD,SetDeviceState);
     6de:	6e eb       	ldi	r22, 0xBE	; 190
     6e0:	71 e0       	ldi	r23, 0x01	; 1
     6e2:	8c e2       	ldi	r24, 0x2C	; 44
     6e4:	91 e0       	ldi	r25, 0x01	; 1
     6e6:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <macSetAlarm>
		#endif
		*/
		#if (DEVICE_CONNECTED == ACA_MACHINE)
		// read machine code stored in EEPROM
		/********can check reader state flag here and update******/
		halGetEeprom(MACHINE_TYPE_ADDR,1,&machineCode);
     6ea:	ae 01       	movw	r20, r28
     6ec:	4f 5f       	subi	r20, 0xFF	; 255
     6ee:	5f 4f       	sbci	r21, 0xFF	; 255
     6f0:	61 e0       	ldi	r22, 0x01	; 1
     6f2:	8e e1       	ldi	r24, 0x1E	; 30
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	0e 94 16 20 	call	0x402c	; 0x402c <halGetEeprom>
		
		//if a valid machine is connected, then store the machine type
		if((machineCode == 0xFF) && (SQACAMachineStatus.MachineType[0] != INVALID_MACHINE))
     6fa:	89 81       	ldd	r24, Y+1	; 0x01
     6fc:	8f 3f       	cpi	r24, 0xFF	; 255
     6fe:	f9 f0       	breq	.+62     	; 0x73e <appInit+0xe4>
		{
			// save the actual machine code
			halPutEeprom(MACHINE_TYPE_ADDR,1,&SQACAMachineStatus.MachineType[0]);
			halPutEeprom(MACHINE_TYPE_ADDR+1,1,&SQACAMachineStatus.MachineType[1]);
		}
		else if(SQACAMachineStatus.MachineType[0] != machineCode)
     700:	90 91 f6 0a 	lds	r25, 0x0AF6	; 0x800af6 <SQACAMachineStatus>
     704:	89 13       	cpse	r24, r25
     706:	1f c0       	rjmp	.+62     	; 0x746 <appInit+0xec>
			#ifdef DEBUG_RADIO
			debugMsgStrConst("\r\nStart scan ");
			#endif

			//macSetScanChannel(0x0f);//BOW is operating only on this channel
			macInit(0xff);
     708:	8f ef       	ldi	r24, 0xFF	; 255
     70a:	0e 94 40 20 	call	0x4080	; 0x4080 <macInit>
			
			macScan();
     70e:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <macScan>
			sixlowpan_init();

			#ifndef COORDNODE

			
			if (ucDeviceStateFlag == MACHINE_STATUS_ON)
     712:	80 91 ba 09 	lds	r24, 0x09BA	; 0x8009ba <ucDeviceStateFlag>
     716:	82 30       	cpi	r24, 0x02	; 2
     718:	09 f4       	brne	.+2      	; 0x71c <appInit+0xc2>
     71a:	46 c0       	rjmp	.+140    	; 0x7a8 <appInit+0x14e>

			#endif

		}
		
		asm("nop");
     71c:	00 00       	nop
	}
     71e:	0f 90       	pop	r0
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	1f 91       	pop	r17
     726:	0f 91       	pop	r16
     728:	08 95       	ret
		while(ucMachineWait == MACHINE_WAIT)
		{
			if(ucDeviceStateFlag == DEVICE_STATUS_NEEDED)	//true
			{
				//If True, Machine Status has been completed, ucDeviceStateFlag set to MACHINE_STATUS_ON
				SQACAInitializationSequence();
     72a:	0e 94 85 12 	call	0x250a	; 0x250a <SQACAInitializationSequence>
				
				tmp = macSetAlarm(DEVICE_POLL_PERIOD,SetDeviceState);
     72e:	6e eb       	ldi	r22, 0xBE	; 190
     730:	71 e0       	ldi	r23, 0x01	; 1
     732:	8c e2       	ldi	r24, 0x2C	; 44
     734:	91 e0       	ldi	r25, 0x01	; 1
     736:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <macSetAlarm>
     73a:	18 2f       	mov	r17, r24
     73c:	bb cf       	rjmp	.-138    	; 0x6b4 <appInit+0x5a>
		// read machine code stored in EEPROM
		/********can check reader state flag here and update******/
		halGetEeprom(MACHINE_TYPE_ADDR,1,&machineCode);
		
		//if a valid machine is connected, then store the machine type
		if((machineCode == 0xFF) && (SQACAMachineStatus.MachineType[0] != INVALID_MACHINE))
     73e:	80 91 f6 0a 	lds	r24, 0x0AF6	; 0x800af6 <SQACAMachineStatus>
     742:	81 11       	cpse	r24, r1
     744:	22 c0       	rjmp	.+68     	; 0x78a <appInit+0x130>
			halPutEeprom(MACHINE_TYPE_ADDR+1,1,&SQACAMachineStatus.MachineType[1]);
		}
		else if(SQACAMachineStatus.MachineType[0] != machineCode)
		{
			// machine has been swapped - trigger setup request
			halPutEeprom(MACHINE_TYPE_ADDR,1,&SQACAMachineStatus.MachineType[0]);
     746:	46 ef       	ldi	r20, 0xF6	; 246
     748:	5a e0       	ldi	r21, 0x0A	; 10
     74a:	61 e0       	ldi	r22, 0x01	; 1
     74c:	8e e1       	ldi	r24, 0x1E	; 30
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	0e 94 2b 20 	call	0x4056	; 0x4056 <halPutEeprom>
			halPutEeprom(MACHINE_TYPE_ADDR+1,1,&SQACAMachineStatus.MachineType[1]);
     754:	47 ef       	ldi	r20, 0xF7	; 247
     756:	5a e0       	ldi	r21, 0x0A	; 10
     758:	61 e0       	ldi	r22, 0x01	; 1
     75a:	8f e1       	ldi	r24, 0x1F	; 31
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	0e 94 2b 20 	call	0x4056	; 0x4056 <halPutEeprom>
			
			ReaderStateFlag.ReaderSetup = READER_SETUP_NEEDED;			//(ReaderStateFlag | READER_SETUP_NEEDED);
     762:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
     766:	82 60       	ori	r24, 0x02	; 2
     768:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
			halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
     76c:	45 e3       	ldi	r20, 0x35	; 53
     76e:	59 e0       	ldi	r21, 0x09	; 9
     770:	61 e0       	ldi	r22, 0x01	; 1
     772:	82 e2       	ldi	r24, 0x22	; 34
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	0e 94 2b 20 	call	0x4056	; 0x4056 <halPutEeprom>
     77a:	c6 cf       	rjmp	.-116    	; 0x708 <appInit+0xae>
				tmp = macSetAlarm(DEVICE_POLL_PERIOD,SetDeviceState);
			}
			else if(ucDeviceStateFlag == MACHINE_STATUS_ON)		//false
			{
				//don't wait anymore
				macTimerEnd(machineTimerId);
     77c:	80 2f       	mov	r24, r16
     77e:	0e 94 7d 27 	call	0x4efa	; 0x4efa <macTimerEnd>
				macTimerEnd(tmp);
     782:	81 2f       	mov	r24, r17
     784:	0e 94 7d 27 	call	0x4efa	; 0x4efa <macTimerEnd>
				
				break;
     788:	aa cf       	rjmp	.-172    	; 0x6de <appInit+0x84>
		
		//if a valid machine is connected, then store the machine type
		if((machineCode == 0xFF) && (SQACAMachineStatus.MachineType[0] != INVALID_MACHINE))
		{
			// save the actual machine code
			halPutEeprom(MACHINE_TYPE_ADDR,1,&SQACAMachineStatus.MachineType[0]);
     78a:	46 ef       	ldi	r20, 0xF6	; 246
     78c:	5a e0       	ldi	r21, 0x0A	; 10
     78e:	61 e0       	ldi	r22, 0x01	; 1
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	0e 94 2b 20 	call	0x4056	; 0x4056 <halPutEeprom>
			halPutEeprom(MACHINE_TYPE_ADDR+1,1,&SQACAMachineStatus.MachineType[1]);
     798:	47 ef       	ldi	r20, 0xF7	; 247
     79a:	5a e0       	ldi	r21, 0x0A	; 10
     79c:	61 e0       	ldi	r22, 0x01	; 1
     79e:	8f e1       	ldi	r24, 0x1F	; 31
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	0e 94 2b 20 	call	0x4056	; 0x4056 <halPutEeprom>
     7a6:	b0 cf       	rjmp	.-160    	; 0x708 <appInit+0xae>

			
			if (ucDeviceStateFlag == MACHINE_STATUS_ON)
			{
				//display current Firmware version
				displaySQReaderVersion();
     7a8:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <displaySQReaderVersion>
				
				//Send machine setup at every power up if reader has setup and machine is connected
				if( ReaderStateFlag.ReaderSetup == READER_SETUP_DONE )
     7ac:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
     7b0:	81 fd       	sbrc	r24, 1
     7b2:	b4 cf       	rjmp	.-152    	; 0x71c <appInit+0xc2>
				{
					// get ACA Programming data
					getSQReaderMachineSetup();			// get PROGRAMMING_DATA_TOPLOAD, _DRYER, _FRONTLOADER
     7b4:	0e 94 b9 12 	call	0x2572	; 0x2572 <getSQReaderMachineSetup>
     7b8:	b1 cf       	rjmp	.-158    	; 0x71c <appInit+0xc2>

000007ba <GetParam>:
	/*  This function copies no more than size bytes from from to to, stopping if a
	byte matching c is found. The return value is a pointer into to one byte past where c was copied,
	or a null pointer if no byte matching c appeared in the first size bytes of from.                                                                   */
	/************************************************************************/
	char * GetParam(char *ptrBuffer, char *tmpstr, char *EndChar)
	{
     7ba:	ef 92       	push	r14
     7bc:	ff 92       	push	r15
     7be:	0f 93       	push	r16
     7c0:	1f 93       	push	r17
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	7a 01       	movw	r14, r20
		char *pStr;
		char *pStr2;
		u8 tmpstrlen =0;

		tmpstrlen = strlen(tmpstr);
     7c8:	fb 01       	movw	r30, r22
     7ca:	01 90       	ld	r0, Z+
     7cc:	00 20       	and	r0, r0
     7ce:	e9 f7       	brne	.-6      	; 0x7ca <GetParam+0x10>
     7d0:	31 97       	sbiw	r30, 0x01	; 1
     7d2:	ef 01       	movw	r28, r30
     7d4:	c6 1b       	sub	r28, r22
     7d6:	d7 0b       	sbc	r29, r23

		if((pStr = strstr(ptrBuffer,tmpstr)) != NULL)
     7d8:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <strstr>
     7dc:	00 97       	sbiw	r24, 0x00	; 0
     7de:	f1 f0       	breq	.+60     	; 0x81c <GetParam+0x62>
		{ //1
			if((pStr2 = strstr(pStr + tmpstrlen,EndChar)) != NULL)
     7e0:	8c 01       	movw	r16, r24
     7e2:	0c 0f       	add	r16, r28
     7e4:	11 1d       	adc	r17, r1
     7e6:	b7 01       	movw	r22, r14
     7e8:	c8 01       	movw	r24, r16
     7ea:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <strstr>
     7ee:	00 97       	sbiw	r24, 0x00	; 0
     7f0:	a9 f0       	breq	.+42     	; 0x81c <GetParam+0x62>
			{ //2 "<"
				memcpy(ParamStr,pStr + tmpstrlen, pStr2-(pStr+tmpstrlen));
     7f2:	ec 01       	movw	r28, r24
     7f4:	c0 1b       	sub	r28, r16
     7f6:	d1 0b       	sbc	r29, r17
     7f8:	ae 01       	movw	r20, r28
     7fa:	b8 01       	movw	r22, r16
     7fc:	8e e3       	ldi	r24, 0x3E	; 62
     7fe:	98 e0       	ldi	r25, 0x08	; 8
     800:	0e 94 3d 33 	call	0x667a	; 0x667a <memcpy>
				ParamStr[pStr2-(pStr + tmpstrlen)]  ='\0';
     804:	c2 5c       	subi	r28, 0xC2	; 194
     806:	d7 4f       	sbci	r29, 0xF7	; 247
     808:	18 82       	st	Y, r1

				return (char *)ParamStr;
     80a:	8e e3       	ldi	r24, 0x3E	; 62
     80c:	98 e0       	ldi	r25, 0x08	; 8
			}//1
		}//2
		
		return '\0';
	}
     80e:	df 91       	pop	r29
     810:	cf 91       	pop	r28
     812:	1f 91       	pop	r17
     814:	0f 91       	pop	r16
     816:	ff 90       	pop	r15
     818:	ef 90       	pop	r14
     81a:	08 95       	ret

				return (char *)ParamStr;
			}//1
		}//2
		
		return '\0';
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	f6 cf       	rjmp	.-20     	; 0x80e <GetParam+0x54>

00000822 <appTask>:
	/**
	@brief This is the main loop task for the Application.  Called by the main
	"forever" loop.  This function processes application tasks
	*/
	void appTask(void)				//called by appInit()
	{
     822:	8f 92       	push	r8
     824:	9f 92       	push	r9
     826:	af 92       	push	r10
     828:	bf 92       	push	r11
     82a:	cf 92       	push	r12
     82c:	df 92       	push	r13
     82e:	ef 92       	push	r14
     830:	ff 92       	push	r15
     832:	0f 93       	push	r16
     834:	1f 93       	push	r17
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	cd b7       	in	r28, 0x3d	; 61
     83c:	de b7       	in	r29, 0x3e	; 62
     83e:	e1 97       	sbiw	r28, 0x31	; 49
     840:	0f b6       	in	r0, 0x3f	; 63
     842:	f8 94       	cli
     844:	de bf       	out	0x3e, r29	; 62
     846:	0f be       	out	0x3f, r0	; 63
     848:	cd bf       	out	0x3d, r28	; 61
		//vars declaration
		ucSendDataSize = 0;
     84a:	10 92 10 0b 	sts	0x0B10, r1	; 0x800b10 <ucSendDataSize>
		
		u8 k, l;
		u8  Setup[30];
		u8 n = 0;
		
		u8 cardNum[10] = {0};
     84e:	8e 01       	movw	r16, r28
     850:	01 5e       	subi	r16, 0xE1	; 225
     852:	1f 4f       	sbci	r17, 0xFF	; 255
     854:	8a e0       	ldi	r24, 0x0A	; 10
     856:	d8 01       	movw	r26, r16
     858:	1d 92       	st	X+, r1
     85a:	8a 95       	dec	r24
     85c:	e9 f7       	brne	.-6      	; 0x858 <appTask+0x36>
		
		#ifdef MACHINE_CONNECTED
		
		if(ucDeviceStateFlag == DEVICE_STATUS_NEEDED)	//do machine status communication every 1/2 second
     85e:	80 91 ba 09 	lds	r24, 0x09BA	; 0x8009ba <ucDeviceStateFlag>
     862:	81 30       	cpi	r24, 0x01	; 1
     864:	09 f4       	brne	.+2      	; 0x868 <appTask+0x46>
     866:	98 c0       	rjmp	.+304    	; 0x998 <appTask+0x176>
     868:	80 91 45 0c 	lds	r24, 0x0C45	; 0x800c45 <macConfig+0x8>
			}
		}
		
		#endif

		if(macConfig.associated == true || ReaderStateFlag.EnableOfflineTransaction == true) //  Don't bother running the app until the reader has associated
     86c:	81 11       	cpse	r24, r1
     86e:	04 c0       	rjmp	.+8      	; 0x878 <appTask+0x56>
     870:	90 91 35 09 	lds	r25, 0x0935	; 0x800935 <ReaderStateFlag>
     874:	93 ff       	sbrs	r25, 3
     876:	09 c0       	rjmp	.+18     	; 0x88a <appTask+0x68>
		{
			//
			switch(OP)
     878:	e0 91 b8 09 	lds	r30, 0x09B8	; 0x8009b8 <OP>
     87c:	4e 2f       	mov	r20, r30
     87e:	50 e0       	ldi	r21, 0x00	; 0
     880:	fa 01       	movw	r30, r20
     882:	31 97       	sbiw	r30, 0x01	; 1
     884:	e8 32       	cpi	r30, 0x28	; 40
     886:	f1 05       	cpc	r31, r1
     888:	98 f0       	brcs	.+38     	; 0x8b0 <appTask+0x8e>
			} //switch OP


		}// macConfig.associated
		
	}//appTask
     88a:	e1 96       	adiw	r28, 0x31	; 49
     88c:	0f b6       	in	r0, 0x3f	; 63
     88e:	f8 94       	cli
     890:	de bf       	out	0x3e, r29	; 62
     892:	0f be       	out	0x3f, r0	; 63
     894:	cd bf       	out	0x3d, r28	; 61
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	1f 91       	pop	r17
     89c:	0f 91       	pop	r16
     89e:	ff 90       	pop	r15
     8a0:	ef 90       	pop	r14
     8a2:	df 90       	pop	r13
     8a4:	cf 90       	pop	r12
     8a6:	bf 90       	pop	r11
     8a8:	af 90       	pop	r10
     8aa:	9f 90       	pop	r9
     8ac:	8f 90       	pop	r8
     8ae:	08 95       	ret
		#endif

		if(macConfig.associated == true || ReaderStateFlag.EnableOfflineTransaction == true) //  Don't bother running the app until the reader has associated
		{
			//
			switch(OP)
     8b0:	e0 57       	subi	r30, 0x70	; 112
     8b2:	ff 4f       	sbci	r31, 0xFF	; 255
     8b4:	0c 94 24 2f 	jmp	0x5e48	; 0x5e48 <__tablejump2__>
				break;

				//case #9A Purchase TopOff called by case #6 GET_BALANCE_FROM_SERVER
				case DRYERCYCLE_RUNNING:
				//The Payment System sends this packet to the Machine Control to perform a TopOff vending transaction.
				if( sendSQACAVendingTransaction(TOPOFF_VEND) )
     8b8:	82 e0       	ldi	r24, 0x02	; 2
     8ba:	0e 94 4b 12 	call	0x2496	; 0x2496 <sendSQACAVendingTransaction>
     8be:	88 23       	and	r24, r24
     8c0:	21 f3       	breq	.-56     	; 0x88a <appTask+0x68>
				{
					displaySQTopOffvend(vendPrice);
     8c2:	60 91 17 0b 	lds	r22, 0x0B17	; 0x800b17 <vendPrice>
     8c6:	70 91 18 0b 	lds	r23, 0x0B18	; 0x800b18 <vendPrice+0x1>
     8ca:	80 91 19 0b 	lds	r24, 0x0B19	; 0x800b19 <vendPrice+0x2>
     8ce:	90 91 1a 0b 	lds	r25, 0x0B1A	; 0x800b1a <vendPrice+0x3>
     8d2:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <displaySQTopOffvend>
					
					vendPrice = SQACADryerProgramming.PaymSTopoffPrice[1] * 256 + SQACADryerProgramming.PaymSTopoffPrice[0];
     8d6:	00 91 16 0a 	lds	r16, 0x0A16	; 0x800a16 <SQACADryerProgramming+0x11>
     8da:	10 e0       	ldi	r17, 0x00	; 0
     8dc:	10 2f       	mov	r17, r16
     8de:	00 27       	eor	r16, r16
     8e0:	80 91 15 0a 	lds	r24, 0x0A15	; 0x800a15 <SQACADryerProgramming+0x10>
     8e4:	08 0f       	add	r16, r24
     8e6:	11 1d       	adc	r17, r1
     8e8:	b8 01       	movw	r22, r16
     8ea:	01 2e       	mov	r0, r17
     8ec:	00 0c       	add	r0, r0
     8ee:	88 0b       	sbc	r24, r24
     8f0:	99 0b       	sbc	r25, r25
     8f2:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <__floatsisf>
     8f6:	60 93 17 0b 	sts	0x0B17, r22	; 0x800b17 <vendPrice>
     8fa:	70 93 18 0b 	sts	0x0B18, r23	; 0x800b18 <vendPrice+0x1>
     8fe:	80 93 19 0b 	sts	0x0B19, r24	; 0x800b19 <vendPrice+0x2>
     902:	90 93 1a 0b 	sts	0x0B1A, r25	; 0x800b1a <vendPrice+0x3>
					//getSQVend(&vend); //replaces the next 7 lines
					structTransaction vend;
					vend.CardId			= CurrentAccount.ID;
     906:	80 91 2b 09 	lds	r24, 0x092B	; 0x80092b <CurrentAccount+0x1>
     90a:	90 91 2c 09 	lds	r25, 0x092C	; 0x80092c <CurrentAccount+0x2>
     90e:	a0 91 2d 09 	lds	r26, 0x092D	; 0x80092d <CurrentAccount+0x3>
     912:	b0 91 2e 09 	lds	r27, 0x092E	; 0x80092e <CurrentAccount+0x4>
     916:	8a 87       	std	Y+10, r24	; 0x0a
     918:	9b 87       	std	Y+11, r25	; 0x0b
     91a:	ac 87       	std	Y+12, r26	; 0x0c
     91c:	bd 87       	std	Y+13, r27	; 0x0d
					vend.vendPrice		= vendPrice ;
     91e:	19 87       	std	Y+9, r17	; 0x09
     920:	08 87       	std	Y+8, r16	; 0x08
					vend.LocationId		= ReaderSetup.locationId;
     922:	80 91 c1 09 	lds	r24, 0x09C1	; 0x8009c1 <ReaderSetup+0x6>
     926:	90 91 c2 09 	lds	r25, 0x09C2	; 0x8009c2 <ReaderSetup+0x7>
     92a:	9a 83       	std	Y+2, r25	; 0x02
     92c:	89 83       	std	Y+1, r24	; 0x01
					vend.ManufactureId	= ReaderSetup.manufacturerId;
     92e:	80 91 bf 09 	lds	r24, 0x09BF	; 0x8009bf <ReaderSetup+0x4>
     932:	90 91 c0 09 	lds	r25, 0x09C0	; 0x8009c0 <ReaderSetup+0x5>
     936:	9e 83       	std	Y+6, r25	; 0x06
     938:	8d 83       	std	Y+5, r24	; 0x05
					vend.MachineId[0]	= deviceStatus.deviceType[0];
     93a:	80 91 f2 0a 	lds	r24, 0x0AF2	; 0x800af2 <deviceStatus>
     93e:	8b 83       	std	Y+3, r24	; 0x03
					vend.MachineId[1]	= deviceStatus.deviceType[1];
     940:	80 91 f3 0a 	lds	r24, 0x0AF3	; 0x800af3 <deviceStatus+0x1>
     944:	8c 83       	std	Y+4, r24	; 0x04
					
					if((isAssociated() == false))
     946:	0e 94 51 14 	call	0x28a2	; 0x28a2 <isAssociated>
     94a:	81 11       	cpse	r24, r1
     94c:	40 c3       	rjmp	.+1664   	; 0xfce <appTask+0x7ac>
					{//must be offline transaction, store a record.
						vend.isOffline = true;
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	8d 8b       	std	Y+21, r24	; 0x15
						storeOfflineTransaction(CurrentAccount.ID);
     952:	60 91 2b 09 	lds	r22, 0x092B	; 0x80092b <CurrentAccount+0x1>
     956:	70 91 2c 09 	lds	r23, 0x092C	; 0x80092c <CurrentAccount+0x2>
     95a:	80 91 2d 09 	lds	r24, 0x092D	; 0x80092d <CurrentAccount+0x3>
     95e:	90 91 2e 09 	lds	r25, 0x092E	; 0x80092e <CurrentAccount+0x4>
     962:	0e 94 cd 14 	call	0x299a	; 0x299a <storeOfflineTransaction>
				case UPDATE_READER_FIRMWARE:
				break;

				//case #14
				case IDLE:
				OP = SCANNING;
     966:	82 e0       	ldi	r24, 0x02	; 2
     968:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <OP>
				break;
     96c:	8e cf       	rjmp	.-228    	; 0x88a <appTask+0x68>
				{
					OP = INIT_READER;
				}
				else{
					
					if( ((ReaderStateFlag.ReaderSetup == READER_SETUP_NEEDED) || ( ReaderStateFlag.FirstRun == VIRGIN_READER)) && (SQACAMachineStatus.MachineType[0] != INVALID_MACHINE) )
     96e:	91 fd       	sbrc	r25, 1
     970:	c1 c1       	rjmp	.+898    	; 0xcf4 <appTask+0x4d2>
     972:	90 ff       	sbrs	r25, 0
     974:	04 c0       	rjmp	.+8      	; 0x97e <appTask+0x15c>
     976:	80 91 f6 0a 	lds	r24, 0x0AF6	; 0x800af6 <SQACAMachineStatus>
     97a:	81 11       	cpse	r24, r1
     97c:	c0 c1       	rjmp	.+896    	; 0xcfe <appTask+0x4dc>
					{
						SETUP_TIMEOUT = true;
						OP = SETUP_REQUEST; //enable when setup supported by server
						
					}
					else if( (ReaderStateFlag.ReaderSetup == READER_SETUP_DONE) && (ReaderStateFlag.ValidateSetup == VALIDATE_READER_SETUP) )
     97e:	92 fd       	sbrc	r25, 2
     980:	5d c3       	rjmp	.+1722   	; 0x103c <appTask+0x81a>
				case VALIDATE_READER:
				//TODO: fix machine type switch
				
				if((ReaderStateFlag.EnableOfflineTransaction == true) && (ReaderStateFlag.ReaderSetup == READER_SETUP_DONE))
				{
					OP = INIT_READER;
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <OP>
				
				
				//case #2
				case INIT_READER:
				
				if( isMachineCycleRunning() )
     988:	0e 94 a0 12 	call	0x2540	; 0x2540 <isMachineCycleRunning>
     98c:	88 23       	and	r24, r24
     98e:	59 f3       	breq	.-42     	; 0x966 <appTask+0x144>
					{
						vend.isOffline = false;
						CurrentAccount.Value -= vendPrice;
						sendBOWCCTransaction(&vend);
					}
					OP = CYCLE_RUNNING;						//PPOS review Error handling?
     990:	80 e1       	ldi	r24, 0x10	; 16
     992:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <OP>
     996:	79 cf       	rjmp	.-270    	; 0x88a <appTask+0x68>
	/**
	Initialize communication with the ACA machines
	*/
	void DevicePoll(void)
	{
		SQACAMachineStatusCommSequence();					//SQ Payment System Driven Vending
     998:	0e 94 b2 12 	call	0x2564	; 0x2564 <SQACAMachineStatusCommSequence>
		macSetAlarm(DEVICE_POLL_PERIOD,SetDeviceState);		//300ms
     99c:	6e eb       	ldi	r22, 0xBE	; 190
     99e:	71 e0       	ldi	r23, 0x01	; 1
     9a0:	8c e2       	ldi	r24, 0x2C	; 44
     9a2:	91 e0       	ldi	r25, 0x01	; 1
     9a4:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <macSetAlarm>
		{
			DevicePoll();
			
			
			//still online
			if (ucDeviceStateFlag == MACHINE_STATUS_ON)			//machine status 33, 41, 43 online
     9a8:	80 91 ba 09 	lds	r24, 0x09BA	; 0x8009ba <ucDeviceStateFlag>
     9ac:	82 30       	cpi	r24, 0x02	; 2
     9ae:	09 f4       	brne	.+2      	; 0x9b2 <appTask+0x190>
     9b0:	54 c2       	rjmp	.+1192   	; 0xe5a <appTask+0x638>
				}
			}
			else
			{
				// machine is not online, print error message
				displayMsg(CABLE_MSG);
     9b2:	86 e0       	ldi	r24, 0x06	; 6
     9b4:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <displayMsg>
     9b8:	57 cf       	rjmp	.-338    	; 0x868 <appTask+0x46>
				OP = SCANNING;
				break;

				//case #16 BOW sending error codes
				case BOW_ERROR:
				OP = IDLE;
     9ba:	87 e2       	ldi	r24, 0x27	; 39
     9bc:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <OP>
				break;
     9c0:	64 cf       	rjmp	.-312    	; 0x88a <appTask+0x68>
				case TIME_OUT: // Server Communication Error Occurred
				break;

				//case #11
				case SETUP_REQUEST:
				if( SETUP_TIMEOUT == true)
     9c2:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <SETUP_TIMEOUT>
     9c6:	88 23       	and	r24, r24
     9c8:	09 f4       	brne	.+2      	; 0x9cc <appTask+0x1aa>
     9ca:	5f cf       	rjmp	.-322    	; 0x88a <appTask+0x68>
	/**
	Initialize communication with the ACA machines
	*/
	void DevicePoll(void)
	{
		SQACAMachineStatusCommSequence();					//SQ Payment System Driven Vending
     9cc:	0e 94 b2 12 	call	0x2564	; 0x2564 <SQACAMachineStatusCommSequence>
		macSetAlarm(DEVICE_POLL_PERIOD,SetDeviceState);		//300ms
     9d0:	6e eb       	ldi	r22, 0xBE	; 190
     9d2:	71 e0       	ldi	r23, 0x01	; 1
     9d4:	8c e2       	ldi	r24, 0x2C	; 44
     9d6:	91 e0       	ldi	r25, 0x01	; 1
     9d8:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <macSetAlarm>
					#else
					deviceStatus.deviceType[0] = 33;
					deviceStatus.deviceType[1] = 1;
					
					#endif //MACHINE_CONNECTED
					sendBOWSetupRequest();
     9dc:	68 d4       	rcall	.+2256   	; 0x12ae <sendBOWSetupRequest>
					
					SETUP_TIMEOUT = false;
     9de:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <SETUP_TIMEOUT>
					macSetLongAlarm(SETUP_REQUEST_TIMEOUT, SetupTimeout);
     9e2:	6a eb       	ldi	r22, 0xBA	; 186
     9e4:	71 e0       	ldi	r23, 0x01	; 1
     9e6:	88 e7       	ldi	r24, 0x78	; 120
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	0e 94 22 27 	call	0x4e44	; 0x4e44 <macSetLongAlarm>
     9ee:	4d cf       	rjmp	.-358    	; 0x88a <appTask+0x68>
				
				//case #4
				case CARD_DETECTED:
				
				//Read CardID from User Zone
				if(!readCardID(CurrentAccount.Type, &cardNum[0]))
     9f0:	b8 01       	movw	r22, r16
     9f2:	80 91 2a 09 	lds	r24, 0x092A	; 0x80092a <CurrentAccount>
     9f6:	0e 94 b3 1b 	call	0x3766	; 0x3766 <readCardID>
     9fa:	89 2b       	or	r24, r25
     9fc:	09 f0       	breq	.+2      	; 0xa00 <appTask+0x1de>
     9fe:	b3 cf       	rjmp	.-154    	; 0x966 <appTask+0x144>
				{
					padLeft((char*)&cardNum[0],9,"200");
     a00:	4e e3       	ldi	r20, 0x3E	; 62
     a02:	52 e0       	ldi	r21, 0x02	; 2
     a04:	69 e0       	ldi	r22, 0x09	; 9
     a06:	c8 01       	movw	r24, r16
     a08:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <padLeft>
					
					CurrentAccount.ID = strtoul((const char*)cardNum,NULL,10);	//save active card's id
     a0c:	4a e0       	ldi	r20, 0x0A	; 10
     a0e:	50 e0       	ldi	r21, 0x00	; 0
     a10:	60 e0       	ldi	r22, 0x00	; 0
     a12:	70 e0       	ldi	r23, 0x00	; 0
     a14:	c8 01       	movw	r24, r16
     a16:	0e 94 f0 30 	call	0x61e0	; 0x61e0 <strtoul>
     a1a:	60 93 2b 09 	sts	0x092B, r22	; 0x80092b <CurrentAccount+0x1>
     a1e:	70 93 2c 09 	sts	0x092C, r23	; 0x80092c <CurrentAccount+0x2>
     a22:	80 93 2d 09 	sts	0x092D, r24	; 0x80092d <CurrentAccount+0x3>
     a26:	90 93 2e 09 	sts	0x092E, r25	; 0x80092e <CurrentAccount+0x4>
					//associated?
					if(macConfig.associated == true)
     a2a:	80 91 45 0c 	lds	r24, 0x0C45	; 0x800c45 <macConfig+0x8>
     a2e:	88 23       	and	r24, r24
     a30:	09 f4       	brne	.+2      	; 0xa34 <appTask+0x212>
     a32:	5a c2       	rjmp	.+1204   	; 0xee8 <appTask+0x6c6>
					{
						// Send Data Package via Radio
						sprintf((char*)ucSendDataBuffer+1, "<sN>%s</sN>",cardNum);
     a34:	1f 93       	push	r17
     a36:	0f 93       	push	r16
     a38:	82 e4       	ldi	r24, 0x42	; 66
     a3a:	92 e0       	ldi	r25, 0x02	; 2
     a3c:	9f 93       	push	r25
     a3e:	8f 93       	push	r24
     a40:	03 e3       	ldi	r16, 0x33	; 51
     a42:	1a e0       	ldi	r17, 0x0A	; 10
     a44:	1f 93       	push	r17
     a46:	0f 93       	push	r16
     a48:	0e 94 f6 33 	call	0x67ec	; 0x67ec <sprintf>

						ucSendDataSize = strlen((char*)ucSendDataBuffer+1);
     a4c:	f8 01       	movw	r30, r16
     a4e:	01 90       	ld	r0, Z+
     a50:	00 20       	and	r0, r0
     a52:	e9 f7       	brne	.-6      	; 0xa4e <appTask+0x22c>
     a54:	bf 01       	movw	r22, r30
     a56:	64 53       	subi	r22, 0x34	; 52
     a58:	7a 40       	sbci	r23, 0x0A	; 10
						ucSendDataBuffer[0] = ucSendDataSize;   // Length
     a5a:	60 93 32 0a 	sts	0x0A32, r22	; 0x800a32 <ucSendDataBuffer>
						ucSendDataSize = ucSendDataSize + 1;    // data size = data byte + size byte
     a5e:	6f 5f       	subi	r22, 0xFF	; 255
     a60:	60 93 10 0b 	sts	0x0B10, r22	; 0x800b10 <ucSendDataSize>
						macDataRequest(DEFAULT_COORD_ADDR, ucSendDataSize, ucSendDataBuffer);
     a64:	42 e3       	ldi	r20, 0x32	; 50
     a66:	5a e0       	ldi	r21, 0x0A	; 10
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	0e 94 37 22 	call	0x446e	; 0x446e <macDataRequest>
						
						// Clear Rx Buffer
						memset(DataBuffer,0,sizeof(DataBuffer));
     a70:	80 e8       	ldi	r24, 0x80	; 128
     a72:	e7 e3       	ldi	r30, 0x37	; 55
     a74:	f9 e0       	ldi	r31, 0x09	; 9
     a76:	df 01       	movw	r26, r30
     a78:	1d 92       	st	X+, r1
     a7a:	8a 95       	dec	r24
     a7c:	e9 f7       	brne	.-6      	; 0xa78 <appTask+0x256>
						
						OP = GET_BALANCE_FROM_SERVER;
     a7e:	87 e0       	ldi	r24, 0x07	; 7
     a80:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <OP>
						//set busy msg flag
						ReaderStateFlag.Busy = true;
     a84:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
     a88:	80 64       	ori	r24, 0x40	; 64
     a8a:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
     a8e:	0f 90       	pop	r0
     a90:	0f 90       	pop	r0
     a92:	0f 90       	pop	r0
     a94:	0f 90       	pop	r0
     a96:	0f 90       	pop	r0
     a98:	0f 90       	pop	r0
					#if (DEBUG)
					Beeps(1);
					#endif

					//Set Timeout timer 60secs for every read
					TOFlag = false;
     a9a:	10 92 2f 05 	sts	0x052F, r1	; 0x80052f <TOFlag>
					ucTimerID = macSetLongAlarm(SERVER_RESPONSE_TIMEOUT,CommTimeOut);
     a9e:	6d ea       	ldi	r22, 0xAD	; 173
     aa0:	71 e0       	ldi	r23, 0x01	; 1
     aa2:	8c e3       	ldi	r24, 0x3C	; 60
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	0e 94 22 27 	call	0x4e44	; 0x4e44 <macSetLongAlarm>
     aaa:	ef ce       	rjmp	.-546    	; 0x88a <appTask+0x68>
				break;

				//case #8 Start Regular vend called by case #7 WAIT_FOR_SELECTION
				case START_CYCLE:
				//The Payment System sends this packet to the Machine Control to perform a vending transaction.
				if( sendSQACAVendingTransaction(REGULAR_VEND) )
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	0e 94 4b 12 	call	0x2496	; 0x2496 <sendSQACAVendingTransaction>
     ab2:	88 23       	and	r24, r24
     ab4:	09 f4       	brne	.+2      	; 0xab8 <appTask+0x296>
     ab6:	e9 ce       	rjmp	.-558    	; 0x88a <appTask+0x68>
				{
					vendPrice = SQACAMachineStatus.RemainingVend[1] * 256 + SQACAMachineStatus.RemainingVend[0];
     ab8:	00 91 02 0b 	lds	r16, 0x0B02	; 0x800b02 <SQACAMachineStatus+0xc>
     abc:	10 e0       	ldi	r17, 0x00	; 0
     abe:	10 2f       	mov	r17, r16
     ac0:	00 27       	eor	r16, r16
     ac2:	80 91 01 0b 	lds	r24, 0x0B01	; 0x800b01 <SQACAMachineStatus+0xb>
     ac6:	08 0f       	add	r16, r24
     ac8:	11 1d       	adc	r17, r1
     aca:	b8 01       	movw	r22, r16
     acc:	01 2e       	mov	r0, r17
     ace:	00 0c       	add	r0, r0
     ad0:	88 0b       	sbc	r24, r24
     ad2:	99 0b       	sbc	r25, r25
     ad4:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <__floatsisf>
     ad8:	60 93 17 0b 	sts	0x0B17, r22	; 0x800b17 <vendPrice>
     adc:	70 93 18 0b 	sts	0x0B18, r23	; 0x800b18 <vendPrice+0x1>
     ae0:	80 93 19 0b 	sts	0x0B19, r24	; 0x800b19 <vendPrice+0x2>
     ae4:	90 93 1a 0b 	sts	0x0B1A, r25	; 0x800b1a <vendPrice+0x3>
					//getSQVend(&vend); will replace the next 7 lines
					structTransaction vend;
					vend.CardId			= CurrentAccount.ID;
     ae8:	80 91 2b 09 	lds	r24, 0x092B	; 0x80092b <CurrentAccount+0x1>
     aec:	90 91 2c 09 	lds	r25, 0x092C	; 0x80092c <CurrentAccount+0x2>
     af0:	a0 91 2d 09 	lds	r26, 0x092D	; 0x80092d <CurrentAccount+0x3>
     af4:	b0 91 2e 09 	lds	r27, 0x092E	; 0x80092e <CurrentAccount+0x4>
     af8:	8a 87       	std	Y+10, r24	; 0x0a
     afa:	9b 87       	std	Y+11, r25	; 0x0b
     afc:	ac 87       	std	Y+12, r26	; 0x0c
     afe:	bd 87       	std	Y+13, r27	; 0x0d
					vend.vendPrice		= vendPrice ;
     b00:	19 87       	std	Y+9, r17	; 0x09
     b02:	08 87       	std	Y+8, r16	; 0x08
					vend.LocationId		= ReaderSetup.locationId;
     b04:	80 91 c1 09 	lds	r24, 0x09C1	; 0x8009c1 <ReaderSetup+0x6>
     b08:	90 91 c2 09 	lds	r25, 0x09C2	; 0x8009c2 <ReaderSetup+0x7>
     b0c:	9a 83       	std	Y+2, r25	; 0x02
     b0e:	89 83       	std	Y+1, r24	; 0x01
					vend.ManufactureId	= ReaderSetup.manufacturerId;
     b10:	80 91 bf 09 	lds	r24, 0x09BF	; 0x8009bf <ReaderSetup+0x4>
     b14:	90 91 c0 09 	lds	r25, 0x09C0	; 0x8009c0 <ReaderSetup+0x5>
     b18:	9e 83       	std	Y+6, r25	; 0x06
     b1a:	8d 83       	std	Y+5, r24	; 0x05
					vend.MachineId[0]	= deviceStatus.deviceType[0];
     b1c:	80 91 f2 0a 	lds	r24, 0x0AF2	; 0x800af2 <deviceStatus>
     b20:	8b 83       	std	Y+3, r24	; 0x03
					vend.MachineId[1]	= deviceStatus.deviceType[1];
     b22:	80 91 f3 0a 	lds	r24, 0x0AF3	; 0x800af3 <deviceStatus+0x1>
     b26:	8c 83       	std	Y+4, r24	; 0x04
					
					if((isAssociated() == false))
     b28:	0e 94 51 14 	call	0x28a2	; 0x28a2 <isAssociated>
     b2c:	81 11       	cpse	r24, r1
     b2e:	32 c2       	rjmp	.+1124   	; 0xf94 <appTask+0x772>
					{//must be offline transaction, store a record.
						vend.isOffline = true;
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	8d 8b       	std	Y+21, r24	; 0x15
						storeOfflineTransaction(CurrentAccount.ID);
     b34:	60 91 2b 09 	lds	r22, 0x092B	; 0x80092b <CurrentAccount+0x1>
     b38:	70 91 2c 09 	lds	r23, 0x092C	; 0x80092c <CurrentAccount+0x2>
     b3c:	80 91 2d 09 	lds	r24, 0x092D	; 0x80092d <CurrentAccount+0x3>
     b40:	90 91 2e 09 	lds	r25, 0x092E	; 0x80092e <CurrentAccount+0x4>
     b44:	0e 94 cd 14 	call	0x299a	; 0x299a <storeOfflineTransaction>
     b48:	23 cf       	rjmp	.-442    	; 0x990 <appTask+0x16e>
				OP = IDLE;
				break;

				//case #17 Re-associate with COORD using new ReaderID
				case APP_INIT:
				appInit();
     b4a:	87 dd       	rcall	.-1266   	; 0x65a <appInit>
				break;
     b4c:	9e ce       	rjmp	.-708    	; 0x88a <appTask+0x68>
				
				case SHOW_BALANCE_REQUEST:

				//case #6 called by case 4# wait for response from server after card swipe
				case GET_BALANCE_FROM_SERVER:
				if(DataBuffer[0] != '\0')	//coming from OP = extractIncomingMessage()
     b4e:	90 91 37 09 	lds	r25, 0x0937	; 0x800937 <DataBuffer>
     b52:	99 23       	and	r25, r25
     b54:	09 f4       	brne	.+2      	; 0xb58 <appTask+0x336>
     b56:	9c c1       	rjmp	.+824    	; 0xe90 <appTask+0x66e>
				{
					// Print response
					ReaderStateFlag.Busy = false;
     b58:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
     b5c:	8f 7b       	andi	r24, 0xBF	; 191
     b5e:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
					debugMsgStr("\r\n");
					debugMsgStr(DataBuffer);
					debugMsgStr("\r\n");
					#endif

					OP = SCANNING;  // old SCARD_REMOVED
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <OP>
					
					//Extract the Card Id from the incoming message
					if( (uctempBuf = strstr((char *)DataBuffer,"sN: ")) )
     b68:	6e e4       	ldi	r22, 0x4E	; 78
     b6a:	72 e0       	ldi	r23, 0x02	; 2
     b6c:	87 e3       	ldi	r24, 0x37	; 55
     b6e:	99 e0       	ldi	r25, 0x09	; 9
     b70:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <strstr>
     b74:	00 97       	sbiw	r24, 0x00	; 0
     b76:	09 f4       	brne	.+2      	; 0xb7a <appTask+0x358>
     b78:	4b c2       	rjmp	.+1174   	; 0x1010 <appTask+0x7ee>
					{
						CurrentAccount.ID = strtoul((const char*)(uctempBuf+4),NULL,10);	//save active card's id
     b7a:	4a e0       	ldi	r20, 0x0A	; 10
     b7c:	50 e0       	ldi	r21, 0x00	; 0
     b7e:	60 e0       	ldi	r22, 0x00	; 0
     b80:	70 e0       	ldi	r23, 0x00	; 0
     b82:	04 96       	adiw	r24, 0x04	; 4
     b84:	0e 94 f0 30 	call	0x61e0	; 0x61e0 <strtoul>
     b88:	60 93 2b 09 	sts	0x092B, r22	; 0x80092b <CurrentAccount+0x1>
     b8c:	70 93 2c 09 	sts	0x092C, r23	; 0x80092c <CurrentAccount+0x2>
     b90:	80 93 2d 09 	sts	0x092D, r24	; 0x80092d <CurrentAccount+0x3>
     b94:	90 93 2e 09 	sts	0x092E, r25	; 0x80092e <CurrentAccount+0x4>
						
						//Display card balance on machine
						double fBalance = 0.0;
						
						uctempBuf = strstr((char *)DataBuffer,"Balance: ");
     b98:	63 e5       	ldi	r22, 0x53	; 83
     b9a:	72 e0       	ldi	r23, 0x02	; 2
     b9c:	87 e3       	ldi	r24, 0x37	; 55
     b9e:	99 e0       	ldi	r25, 0x09	; 9
     ba0:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <strstr>
     ba4:	8c 01       	movw	r16, r24
						uctempBuf += 9;
     ba6:	7c 01       	movw	r14, r24
     ba8:	b9 e0       	ldi	r27, 0x09	; 9
     baa:	eb 0e       	add	r14, r27
     bac:	f1 1c       	adc	r15, r1
						ptr = strchr(uctempBuf,'.');
     bae:	6e e2       	ldi	r22, 0x2E	; 46
     bb0:	70 e0       	ldi	r23, 0x00	; 0
     bb2:	c7 01       	movw	r24, r14
     bb4:	0e 94 46 33 	call	0x668c	; 0x668c <strchr>
						k = ptr - uctempBuf;
     bb8:	d8 2e       	mov	r13, r24
     bba:	de 18       	sub	r13, r14
						fBalance = atof(uctempBuf);
     bbc:	c7 01       	movw	r24, r14
     bbe:	0e 94 25 32 	call	0x644a	; 0x644a <atof>
						
						// Format the Balance to XX.XX
						//capture numeric into string
						if (k <2)
     bc2:	e1 e0       	ldi	r30, 0x01	; 1
     bc4:	ed 15       	cp	r30, r13
     bc6:	08 f0       	brcs	.+2      	; 0xbca <appTask+0x3a8>
     bc8:	63 c2       	rjmp	.+1222   	; 0x1090 <appTask+0x86e>
						sprintf(uctempBuf,"0%.2f",fBalance);
						else if(k == 2)
     bca:	32 e0       	ldi	r19, 0x02	; 2
     bcc:	d3 16       	cp	r13, r19
     bce:	09 f4       	brne	.+2      	; 0xbd2 <appTask+0x3b0>
     bd0:	23 c2       	rjmp	.+1094   	; 0x1018 <appTask+0x7f6>
						sprintf(uctempBuf,"%.2f",fBalance);
						else
						strcpy(uctempBuf,"99.99");
     bd2:	86 e0       	ldi	r24, 0x06	; 6
     bd4:	e3 e6       	ldi	r30, 0x63	; 99
     bd6:	f2 e0       	ldi	r31, 0x02	; 2
     bd8:	d7 01       	movw	r26, r14
     bda:	01 90       	ld	r0, Z+
     bdc:	0d 92       	st	X+, r0
     bde:	8a 95       	dec	r24
     be0:	e1 f7       	brne	.-8      	; 0xbda <appTask+0x3b8>
						
						//split string into individual values, skip decimal point
						CurrentAccount.Value = (uctempBuf[0]-0x30) * 1000 + (uctempBuf[1]-0x30) * 100 + (uctempBuf[3]-0x30) * 10 + uctempBuf[4]-0x30;
     be2:	d8 01       	movw	r26, r16
     be4:	19 96       	adiw	r26, 0x09	; 9
     be6:	6c 91       	ld	r22, X
     be8:	19 97       	sbiw	r26, 0x09	; 9
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	60 53       	subi	r22, 0x30	; 48
     bee:	71 09       	sbc	r23, r1
     bf0:	1a 96       	adiw	r26, 0x0a	; 10
     bf2:	ec 91       	ld	r30, X
     bf4:	1a 97       	sbiw	r26, 0x0a	; 10
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	f0 97       	sbiw	r30, 0x30	; 48
     bfa:	1c 96       	adiw	r26, 0x0c	; 12
     bfc:	2c 91       	ld	r18, X
     bfe:	1c 97       	sbiw	r26, 0x0c	; 12
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	20 53       	subi	r18, 0x30	; 48
     c04:	31 09       	sbc	r19, r1
     c06:	1d 96       	adiw	r26, 0x0d	; 13
     c08:	8c 91       	ld	r24, X
     c0a:	a8 2f       	mov	r26, r24
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	88 ee       	ldi	r24, 0xE8	; 232
     c10:	93 e0       	ldi	r25, 0x03	; 3
     c12:	68 9f       	mul	r22, r24
     c14:	80 01       	movw	r16, r0
     c16:	69 9f       	mul	r22, r25
     c18:	10 0d       	add	r17, r0
     c1a:	78 9f       	mul	r23, r24
     c1c:	10 0d       	add	r17, r0
     c1e:	11 24       	eor	r1, r1
     c20:	44 e6       	ldi	r20, 0x64	; 100
     c22:	4e 9f       	mul	r20, r30
     c24:	c0 01       	movw	r24, r0
     c26:	4f 9f       	mul	r20, r31
     c28:	90 0d       	add	r25, r0
     c2a:	11 24       	eor	r1, r1
     c2c:	08 0f       	add	r16, r24
     c2e:	19 1f       	adc	r17, r25
     c30:	c9 01       	movw	r24, r18
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	a9 01       	movw	r20, r18
     c38:	44 0f       	add	r20, r20
     c3a:	55 1f       	adc	r21, r21
     c3c:	44 0f       	add	r20, r20
     c3e:	55 1f       	adc	r21, r21
     c40:	44 0f       	add	r20, r20
     c42:	55 1f       	adc	r21, r21
     c44:	84 0f       	add	r24, r20
     c46:	95 1f       	adc	r25, r21
     c48:	80 0f       	add	r24, r16
     c4a:	91 1f       	adc	r25, r17
     c4c:	8a 0f       	add	r24, r26
     c4e:	9b 1f       	adc	r25, r27
     c50:	c0 97       	sbiw	r24, 0x30	; 48
     c52:	90 93 32 09 	sts	0x0932, r25	; 0x800932 <CurrentAccount+0x8>
     c56:	80 93 31 09 	sts	0x0931, r24	; 0x800931 <CurrentAccount+0x7>
						
						// give display control back to front end controller. Important! Don't forget!!!!
						//displaySQBalance(fBalance); needs fixing
						sendSQDisplayCommand(msgNumber[uctempBuf[0]-0x30], msgNumber[uctempBuf[1]-0x30], msgNumber[uctempBuf[3]-0x30], msgNumber[uctempBuf[4]-0x30], LED_BLANK, LED_BLANK,10);
     c5a:	ad 01       	movw	r20, r26
     c5c:	43 52       	subi	r20, 0x23	; 35
     c5e:	5e 4f       	sbci	r21, 0xFE	; 254
     c60:	c9 01       	movw	r24, r18
     c62:	83 5f       	subi	r24, 0xF3	; 243
     c64:	9d 4f       	sbci	r25, 0xFD	; 253
     c66:	df 01       	movw	r26, r30
     c68:	a3 5f       	subi	r26, 0xF3	; 243
     c6a:	bd 4f       	sbci	r27, 0xFD	; 253
     c6c:	fb 01       	movw	r30, r22
     c6e:	e3 5f       	subi	r30, 0xF3	; 243
     c70:	fd 4f       	sbci	r31, 0xFD	; 253
     c72:	5f 01       	movw	r10, r30
     c74:	2a e0       	ldi	r18, 0x0A	; 10
     c76:	c2 2e       	mov	r12, r18
     c78:	e1 2c       	mov	r14, r1
     c7a:	00 e0       	ldi	r16, 0x00	; 0
     c7c:	fa 01       	movw	r30, r20
     c7e:	20 81       	ld	r18, Z
     c80:	fc 01       	movw	r30, r24
     c82:	40 81       	ld	r20, Z
     c84:	6c 91       	ld	r22, X
     c86:	d5 01       	movw	r26, r10
     c88:	8c 91       	ld	r24, X
     c8a:	ca d6       	rcall	.+3476   	; 0x1a20 <sendSQDisplayCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c8c:	bf ef       	ldi	r27, 0xFF	; 255
     c8e:	e1 ee       	ldi	r30, 0xE1	; 225
     c90:	f4 e0       	ldi	r31, 0x04	; 4
     c92:	b1 50       	subi	r27, 0x01	; 1
     c94:	e0 40       	sbci	r30, 0x00	; 0
     c96:	f0 40       	sbci	r31, 0x00	; 0
     c98:	e1 f7       	brne	.-8      	; 0xc92 <appTask+0x470>
     c9a:	00 c0       	rjmp	.+0      	; 0xc9c <appTask+0x47a>
     c9c:	00 00       	nop
						_delay_ms(100);

						if (SQACAMachineStatus.MachineStatus[0] == MACHINE_READY_MODE)
     c9e:	80 91 fb 0a 	lds	r24, 0x0AFB	; 0x800afb <SQACAMachineStatus+0x5>
     ca2:	81 30       	cpi	r24, 0x01	; 1
     ca4:	09 f4       	brne	.+2      	; 0xca8 <appTask+0x486>
     ca6:	e2 c1       	rjmp	.+964    	; 0x106c <appTask+0x84a>
							// code to avoid multiple button press
							macSetAlarm(500, KeypressTimeOut);		//if connected to a washer while cycle is running and a card is swiped, just display the balance and continue scanning.
							
						}
						//initiate TopOff
						else if( (SQACAMachineStatus.MachineStatus[0] == MACHINE_RUN_MODE) && (SQACAMachineStatus.MachineType[0] == PROGRAMMING_DATA_DRYER) )
     ca8:	88 30       	cpi	r24, 0x08	; 8
     caa:	09 f0       	breq	.+2      	; 0xcae <appTask+0x48c>
     cac:	ee cd       	rjmp	.-1060   	; 0x88a <appTask+0x68>
     cae:	80 91 f6 0a 	lds	r24, 0x0AF6	; 0x800af6 <SQACAMachineStatus>
     cb2:	89 32       	cpi	r24, 0x29	; 41
     cb4:	09 f0       	breq	.+2      	; 0xcb8 <appTask+0x496>
     cb6:	e9 cd       	rjmp	.-1070   	; 0x88a <appTask+0x68>
						{
							OP = DRYERCYCLE_RUNNING;
     cb8:	88 e1       	ldi	r24, 0x18	; 24
     cba:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <OP>
     cbe:	e5 cd       	rjmp	.-1078   	; 0x88a <appTask+0x68>
     cc0:	2f ef       	ldi	r18, 0xFF	; 255
     cc2:	37 ea       	ldi	r19, 0xA7	; 167
     cc4:	81 e6       	ldi	r24, 0x61	; 97
     cc6:	21 50       	subi	r18, 0x01	; 1
     cc8:	30 40       	sbci	r19, 0x00	; 0
     cca:	80 40       	sbci	r24, 0x00	; 0
     ccc:	e1 f7       	brne	.-8      	; 0xcc6 <appTask+0x4a4>
     cce:	00 c0       	rjmp	.+0      	; 0xcd0 <appTask+0x4ae>
     cd0:	00 00       	nop

				//case #7 called by case #6 SCANNING
				case WAIT_FOR_SELECTION:			//wait to see if cycle start has been requested by user
				//either press the start button
				_delay_ms(2000); //PPOS 170706 without this delay the Start button will not work
				if( SQACAMachineStatus.CmdToReader == START_PAD_PRESSED )
     cd2:	80 91 fa 0a 	lds	r24, 0x0AFA	; 0x800afa <SQACAMachineStatus+0x4>
     cd6:	81 30       	cpi	r24, 0x01	; 1
     cd8:	09 f4       	brne	.+2      	; 0xcdc <appTask+0x4ba>
     cda:	02 c1       	rjmp	.+516    	; 0xee0 <appTask+0x6be>
				{
					OP = START_CYCLE;				//Start Pad was pressed ...you have 10secs to pay and to start in Run mode
				}

				else if(KPTOFlag == 1)  //...or not, but state it
     cdc:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <KPTOFlag>
     ce0:	81 30       	cpi	r24, 0x01	; 1
     ce2:	09 f0       	breq	.+2      	; 0xce6 <appTask+0x4c4>
     ce4:	d2 cd       	rjmp	.-1116   	; 0x88a <appTask+0x68>
     ce6:	3f ce       	rjmp	.-898    	; 0x966 <appTask+0x144>
			{
				//case #1 called by appInit
				case VALIDATE_READER:
				//TODO: fix machine type switch
				
				if((ReaderStateFlag.EnableOfflineTransaction == true) && (ReaderStateFlag.ReaderSetup == READER_SETUP_DONE))
     ce8:	90 91 35 09 	lds	r25, 0x0935	; 0x800935 <ReaderStateFlag>
     cec:	93 ff       	sbrs	r25, 3
     cee:	3f ce       	rjmp	.-898    	; 0x96e <appTask+0x14c>
     cf0:	91 ff       	sbrs	r25, 1
     cf2:	47 ce       	rjmp	.-882    	; 0x982 <appTask+0x160>
				{
					OP = INIT_READER;
				}
				else{
					
					if( ((ReaderStateFlag.ReaderSetup == READER_SETUP_NEEDED) || ( ReaderStateFlag.FirstRun == VIRGIN_READER)) && (SQACAMachineStatus.MachineType[0] != INVALID_MACHINE) )
     cf4:	80 91 f6 0a 	lds	r24, 0x0AF6	; 0x800af6 <SQACAMachineStatus>
     cf8:	88 23       	and	r24, r24
     cfa:	09 f4       	brne	.+2      	; 0xcfe <appTask+0x4dc>
     cfc:	45 ce       	rjmp	.-886    	; 0x988 <appTask+0x166>
					{
						SETUP_TIMEOUT = true;
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <SETUP_TIMEOUT>
						OP = SETUP_REQUEST; //enable when setup supported by server
     d04:	8a e0       	ldi	r24, 0x0A	; 10
     d06:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <OP>
     d0a:	3e ce       	rjmp	.-900    	; 0x988 <appTask+0x166>
				appInit();
				break;

				//case #18
				case AUDITDATA_REQUEST:
				sendBOWAuditDataRequest() ;
     d0c:	61 d6       	rcall	.+3266   	; 0x19d0 <sendBOWAuditDataRequest>
				break;
     d0e:	bd cd       	rjmp	.-1158   	; 0x88a <appTask+0x68>
				break;
				
				
				//case #12
				case VALIDATE_SETUP:
				if((ptr = GetParam((char *)DataBuffer,"<ValidationResponse>","<")) != NULL)
     d10:	49 e6       	ldi	r20, 0x69	; 105
     d12:	52 e0       	ldi	r21, 0x02	; 2
     d14:	6b e6       	ldi	r22, 0x6B	; 107
     d16:	72 e0       	ldi	r23, 0x02	; 2
     d18:	87 e3       	ldi	r24, 0x37	; 55
     d1a:	99 e0       	ldi	r25, 0x09	; 9
     d1c:	4e dd       	rcall	.-1380   	; 0x7ba <GetParam>
     d1e:	6c 01       	movw	r12, r24
     d20:	00 97       	sbiw	r24, 0x00	; 0
     d22:	09 f4       	brne	.+2      	; 0xd26 <appTask+0x504>
     d24:	4a c0       	rjmp	.+148    	; 0xdba <appTask+0x598>
				{
					u8 addr[8];
					static u8 Len = 0;
					n = strlen(ptr);
     d26:	fc 01       	movw	r30, r24
     d28:	01 90       	ld	r0, Z+
     d2a:	00 20       	and	r0, r0
     d2c:	e9 f7       	brne	.-6      	; 0xd28 <appTask+0x506>
     d2e:	31 97       	sbiw	r30, 0x01	; 1
     d30:	8e 2e       	mov	r8, r30
     d32:	88 1a       	sub	r8, r24
					k = 0;
					l = 0;
					
					// Get length of Validation code
					halGetEeprom(VALIDATION_CODE_ADDR, 1, &Len);
     d34:	4a e2       	ldi	r20, 0x2A	; 42
     d36:	55 e0       	ldi	r21, 0x05	; 5
     d38:	61 e0       	ldi	r22, 0x01	; 1
     d3a:	87 e5       	ldi	r24, 0x57	; 87
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	0e 94 16 20 	call	0x402c	; 0x402c <halGetEeprom>
					
					// 	Get Validation Code from EEPROM
					halGetEeprom(((u8*)VALIDATION_CODE_ADDR+1), Len, addr);
     d42:	ae 01       	movw	r20, r28
     d44:	47 5d       	subi	r20, 0xD7	; 215
     d46:	5f 4f       	sbci	r21, 0xFF	; 255
     d48:	60 91 2a 05 	lds	r22, 0x052A	; 0x80052a <__data_end>
     d4c:	88 e5       	ldi	r24, 0x58	; 88
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	0e 94 16 20 	call	0x402c	; 0x402c <halGetEeprom>
					
					while (k < n)
     d54:	88 20       	and	r8, r8
     d56:	09 f4       	brne	.+2      	; 0xd5a <appTask+0x538>
     d58:	85 c1       	rjmp	.+778    	; 0x1064 <appTask+0x842>
     d5a:	00 e0       	ldi	r16, 0x00	; 0
     d5c:	10 e0       	ldi	r17, 0x00	; 0
     d5e:	fe 01       	movw	r30, r28
     d60:	31 96       	adiw	r30, 0x01	; 1
     d62:	5f 01       	movw	r10, r30
					{
						Setup[l] = (Ascii_to_nible ( *(ptr+k) ) * 16)
     d64:	76 01       	movw	r14, r12
     d66:	e1 0e       	add	r14, r17
     d68:	f1 1c       	adc	r15, r1
     d6a:	d7 01       	movw	r26, r14
     d6c:	8c 91       	ld	r24, X
     d6e:	0e 94 86 29 	call	0x530c	; 0x530c <Ascii_to_nible>
     d72:	98 2e       	mov	r9, r24
						+  Ascii_to_nible ( *(ptr+k+1));
     d74:	f7 01       	movw	r30, r14
     d76:	81 81       	ldd	r24, Z+1	; 0x01
     d78:	0e 94 86 29 	call	0x530c	; 0x530c <Ascii_to_nible>
					// 	Get Validation Code from EEPROM
					halGetEeprom(((u8*)VALIDATION_CODE_ADDR+1), Len, addr);
					
					while (k < n)
					{
						Setup[l] = (Ascii_to_nible ( *(ptr+k) ) * 16)
     d7c:	f5 01       	movw	r30, r10
     d7e:	e0 0f       	add	r30, r16
     d80:	f1 1d       	adc	r31, r1
     d82:	20 e1       	ldi	r18, 0x10	; 16
     d84:	92 9e       	mul	r9, r18
     d86:	80 0d       	add	r24, r0
     d88:	11 24       	eor	r1, r1
     d8a:	80 83       	st	Z, r24
						+  Ascii_to_nible ( *(ptr+k+1));
						k += 2;
     d8c:	1e 5f       	subi	r17, 0xFE	; 254
						l++;
     d8e:	0f 5f       	subi	r16, 0xFF	; 255
					halGetEeprom(VALIDATION_CODE_ADDR, 1, &Len);
					
					// 	Get Validation Code from EEPROM
					halGetEeprom(((u8*)VALIDATION_CODE_ADDR+1), Len, addr);
					
					while (k < n)
     d90:	18 15       	cp	r17, r8
     d92:	40 f3       	brcs	.-48     	; 0xd64 <appTask+0x542>
						+  Ascii_to_nible ( *(ptr+k+1));
						k += 2;
						l++;
					}

					if(memcmp(addr,Setup,Len) == 0)
     d94:	40 91 2a 05 	lds	r20, 0x052A	; 0x80052a <__data_end>
     d98:	50 e0       	ldi	r21, 0x00	; 0
     d9a:	b5 01       	movw	r22, r10
     d9c:	ce 01       	movw	r24, r28
     d9e:	89 96       	adiw	r24, 0x29	; 41
     da0:	0e 94 30 33 	call	0x6660	; 0x6660 <memcmp>
     da4:	89 2b       	or	r24, r25
     da6:	09 f0       	breq	.+2      	; 0xdaa <appTask+0x588>
     da8:	94 c0       	rjmp	.+296    	; 0xed2 <appTask+0x6b0>
					{
						ReaderStateFlag.ValidateSetup = VALID_READER_SETUP; //Don't store this bit in eeprom it allows for validation check on every power cycle.
     daa:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
     dae:	8b 7f       	andi	r24, 0xFB	; 251
     db0:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
						OP = VALIDATE_READER;
     db4:	83 e1       	ldi	r24, 0x13	; 19
     db6:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <OP>
						
					}
				}

				// Response TIMEOUT
				if(VALIDATION_TIMEOUT)
     dba:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <VALIDATION_TIMEOUT>
     dbe:	88 23       	and	r24, r24
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <appTask+0x5a2>
     dc2:	63 cd       	rjmp	.-1338   	; 0x88a <appTask+0x68>
				{
					VALIDATION_TIMEOUT = false;
     dc4:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <VALIDATION_TIMEOUT>
					sendBOWValidationRequest();// Re-send Validation Request
     dc8:	9a d2       	rcall	.+1332   	; 0x12fe <sendBOWValidationRequest>
					
					macSetLongAlarm(SETUP_VALIDATION_TIMEOUT, ValidationTimeout); 		//check Every 5s
     dca:	69 ea       	ldi	r22, 0xA9	; 169
     dcc:	71 e0       	ldi	r23, 0x01	; 1
     dce:	8c e3       	ldi	r24, 0x3C	; 60
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	0e 94 22 27 	call	0x4e44	; 0x4e44 <macSetLongAlarm>
     dd6:	59 cd       	rjmp	.-1358   	; 0x88a <appTask+0x68>
				break;

				//case #3 called by case #2 scan for card swipe
				case SCANNING:
				// Enable Heart beat routine
				if (uiFunctionEntered < (20 * (F_CPU/4000000)))
     dd8:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <uiFunctionEntered>
     ddc:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <uiFunctionEntered+0x1>
     de0:	80 35       	cpi	r24, 0x50	; 80
     de2:	91 05       	cpc	r25, r1
     de4:	08 f0       	brcs	.+2      	; 0xde8 <appTask+0x5c6>
     de6:	4e c0       	rjmp	.+156    	; 0xe84 <appTask+0x662>
				{
					uiFunctionEntered++;
     de8:	01 96       	adiw	r24, 0x01	; 1
     dea:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <uiFunctionEntered+0x1>
     dee:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <uiFunctionEntered>
					Led1_toggle();
					
					uiFunctionEntered = 0;
				}
				
				if(!Request(ISO14443_3_REQALL, tmp))
     df2:	be 01       	movw	r22, r28
     df4:	6f 5f       	subi	r22, 0xFF	; 255
     df6:	7f 4f       	sbci	r23, 0xFF	; 255
     df8:	82 e5       	ldi	r24, 0x52	; 82
     dfa:	0e 94 9d 18 	call	0x313a	; 0x313a <Request>
     dfe:	89 2b       	or	r24, r25
     e00:	09 f0       	breq	.+2      	; 0xe04 <appTask+0x5e2>
     e02:	43 cd       	rjmp	.-1402   	; 0x88a <appTask+0x68>
				{
					u8 cardType;
					u8 cardKey[6] = {0xff,0xff,0xff,0xff,0xff,0xff};
     e04:	86 e0       	ldi	r24, 0x06	; 6
     e06:	e1 e2       	ldi	r30, 0x21	; 33
     e08:	f2 e0       	ldi	r31, 0x02	; 2
     e0a:	de 01       	movw	r26, r28
     e0c:	99 96       	adiw	r26, 0x29	; 41
     e0e:	01 90       	ld	r0, Z+
     e10:	0d 92       	st	X+, r0
     e12:	8a 95       	dec	r24
     e14:	e1 f7       	brne	.-8      	; 0xe0e <appTask+0x5ec>
					
					/*anti-collision and select the card*/
					
					if(!AnticollSelect(0, tmp, &cardType))
     e16:	ae 01       	movw	r20, r28
     e18:	4f 5c       	subi	r20, 0xCF	; 207
     e1a:	5f 4f       	sbci	r21, 0xFF	; 255
     e1c:	be 01       	movw	r22, r28
     e1e:	6f 5f       	subi	r22, 0xFF	; 255
     e20:	7f 4f       	sbci	r23, 0xFF	; 255
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	0e 94 67 1a 	call	0x34ce	; 0x34ce <AnticollSelect>
     e28:	89 2b       	or	r24, r25
     e2a:	09 f0       	breq	.+2      	; 0xe2e <appTask+0x60c>
     e2c:	2e cd       	rjmp	.-1444   	; 0x88a <appTask+0x68>
					{
						if(cardType == MIFARE_1K)
     e2e:	89 a9       	ldd	r24, Y+49	; 0x31
     e30:	88 30       	cpi	r24, 0x08	; 8
     e32:	09 f4       	brne	.+2      	; 0xe36 <appTask+0x614>
     e34:	34 c1       	rjmp	.+616    	; 0x109e <appTask+0x87c>
							
							Authentication(MIFARE_AUTHENT_A,cardKey,tmp,0);
						}
						else
						{
							CurrentAccount.Type = 0;
     e36:	10 92 2a 09 	sts	0x092A, r1	; 0x80092a <CurrentAccount>
						}
						OP = CARD_DETECTED;
     e3a:	8c e0       	ldi	r24, 0x0C	; 12
     e3c:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <OP>

// These LED functions are used to provide address callbacks for macSetAlarm.
// Cannot use defines directly in callbacks.
void ledoff1(void)
{
	LED_OFF(1);
     e40:	a0 98       	cbi	0x14, 0	; 20
     e42:	23 cd       	rjmp	.-1466   	; 0x88a <appTask+0x68>
				break;

				//case #5
				case SEND_OFFLINE_TRANSACTIONS:
				
				if (timeout.sendingOfflineTransactions)
     e44:	80 91 04 0a 	lds	r24, 0x0A04	; 0x800a04 <timeout>
     e48:	80 ff       	sbrs	r24, 0
     e4a:	1f cd       	rjmp	.-1474   	; 0x88a <appTask+0x68>
				{
					timeout.sendingOfflineTransactions = false;
     e4c:	8e 7f       	andi	r24, 0xFE	; 254
     e4e:	80 93 04 0a 	sts	0x0A04, r24	; 0x800a04 <timeout>
					OP = IDLE;
     e52:	87 e2       	ldi	r24, 0x27	; 39
     e54:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <OP>
     e58:	18 cd       	rjmp	.-1488   	; 0x88a <appTask+0x68>
     e5a:	ef e1       	ldi	r30, 0x1F	; 31
     e5c:	fe e4       	ldi	r31, 0x4E	; 78
     e5e:	31 97       	sbiw	r30, 0x01	; 1
     e60:	f1 f7       	brne	.-4      	; 0xe5e <appTask+0x63c>
     e62:	00 c0       	rjmp	.+0      	; 0xe64 <appTask+0x642>
     e64:	00 00       	nop
			//still online
			if (ucDeviceStateFlag == MACHINE_STATUS_ON)			//machine status 33, 41, 43 online
			{
				_delay_ms(5);
				//invalid machinecode
				if (ReaderStateFlag.ReaderSetup == READER_SETUP_NEEDED)
     e66:	90 91 35 09 	lds	r25, 0x0935	; 0x800935 <ReaderStateFlag>
     e6a:	91 fd       	sbrc	r25, 1
     e6c:	a3 cd       	rjmp	.-1210   	; 0x9b4 <appTask+0x192>
				{
					//Display "No Setup" message on machine
					displayMsg(SETUP_MSG);
				}
				else if (((macConfig.associated == false) && (ReaderStateFlag.EnableOfflineTransaction == false)) || (ReaderStateFlag.MaxNumTransReached == true))
     e6e:	80 91 45 0c 	lds	r24, 0x0C45	; 0x800c45 <macConfig+0x8>
     e72:	81 11       	cpse	r24, r1
     e74:	1e c0       	rjmp	.+60     	; 0xeb2 <appTask+0x690>
     e76:	93 fd       	sbrc	r25, 3
     e78:	1c c0       	rjmp	.+56     	; 0xeb2 <appTask+0x690>
				{
					//Display "Service message" message on machine
					displayMsg(SERVICE_MSG);
     e7a:	83 e0       	ldi	r24, 0x03	; 3
     e7c:	6e d6       	rcall	.+3292   	; 0x1b5a <displayMsg>
     e7e:	80 91 45 0c 	lds	r24, 0x0C45	; 0x800c45 <macConfig+0x8>
     e82:	f4 cc       	rjmp	.-1560   	; 0x86c <appTask+0x4a>
				{
					uiFunctionEntered++;
				}
				else
				{
					Led1_toggle();
     e84:	90 9a       	sbi	0x12, 0	; 18
					
					uiFunctionEntered = 0;
     e86:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <uiFunctionEntered+0x1>
     e8a:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <uiFunctionEntered>
     e8e:	b1 cf       	rjmp	.-158    	; 0xdf2 <appTask+0x5d0>
						CommTimeOut();					//TOFlag = true;
					}

				} // end if
				//still case 6# server fails to respond in time no balance
				else if(TOFlag == true || macConfig.associated == false)
     e90:	90 91 2f 05 	lds	r25, 0x052F	; 0x80052f <TOFlag>
     e94:	91 30       	cpi	r25, 0x01	; 1
     e96:	11 f0       	breq	.+4      	; 0xe9c <appTask+0x67a>
     e98:	81 11       	cpse	r24, r1
     e9a:	f7 cc       	rjmp	.-1554   	; 0x88a <appTask+0x68>
					#if(DEBUG_BOW)
					debugMsgStr("\r\nTOFlag == 1\r\n");
					#endif

					// Error Occured, Re-enter SCANNING mode
					ReaderStateFlag.Busy = false;
     e9c:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
     ea0:	8f 7b       	andi	r24, 0xBF	; 191
     ea2:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
					//send error message to machine display
					displayMsg(CARD_ERR_MSG);
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	58 d6       	rcall	.+3248   	; 0x1b5a <displayMsg>
					OP = IDLE;
     eaa:	87 e2       	ldi	r24, 0x27	; 39
     eac:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <OP>
     eb0:	ec cc       	rjmp	.-1576   	; 0x88a <appTask+0x68>
				if (ReaderStateFlag.ReaderSetup == READER_SETUP_NEEDED)
				{
					//Display "No Setup" message on machine
					displayMsg(SETUP_MSG);
				}
				else if (((macConfig.associated == false) && (ReaderStateFlag.EnableOfflineTransaction == false)) || (ReaderStateFlag.MaxNumTransReached == true))
     eb2:	94 fd       	sbrc	r25, 4
     eb4:	e2 cf       	rjmp	.-60     	; 0xe7a <appTask+0x658>
				{
					//Display "Service message" message on machine
					displayMsg(SERVICE_MSG);
				}
				else if (ReaderStateFlag.Busy == true)
     eb6:	96 ff       	sbrs	r25, 6
     eb8:	d9 cc       	rjmp	.-1614   	; 0x86c <appTask+0x4a>
				{
					
					//Display busy message
					if( OP != GET_BALANCE_FROM_SERVER ) // ****need to put op code in a queue****
     eba:	80 91 b8 09 	lds	r24, 0x09B8	; 0x8009b8 <OP>
     ebe:	87 30       	cpi	r24, 0x07	; 7
     ec0:	19 f0       	breq	.+6      	; 0xec8 <appTask+0x6a6>
					{
						OP = GET_BALANCE_FROM_SERVER;
     ec2:	87 e0       	ldi	r24, 0x07	; 7
     ec4:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <OP>
					}
					displayMsg(BUSY_MSG);
     ec8:	84 e0       	ldi	r24, 0x04	; 4
     eca:	47 d6       	rcall	.+3214   	; 0x1b5a <displayMsg>
     ecc:	80 91 45 0c 	lds	r24, 0x0C45	; 0x800c45 <macConfig+0x8>
     ed0:	cd cc       	rjmp	.-1638   	; 0x86c <appTask+0x4a>
						OP = VALIDATE_READER;
					}
					else
					{
						
						OP = SETUP_REQUEST; // validation failed, request new setup info
     ed2:	8a e0       	ldi	r24, 0x0A	; 10
     ed4:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <OP>
						SETUP_TIMEOUT = true;
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <SETUP_TIMEOUT>
     ede:	6d cf       	rjmp	.-294    	; 0xdba <appTask+0x598>
				case WAIT_FOR_SELECTION:			//wait to see if cycle start has been requested by user
				//either press the start button
				_delay_ms(2000); //PPOS 170706 without this delay the Start button will not work
				if( SQACAMachineStatus.CmdToReader == START_PAD_PRESSED )
				{
					OP = START_CYCLE;				//Start Pad was pressed ...you have 10secs to pay and to start in Run mode
     ee0:	8f e0       	ldi	r24, 0x0F	; 15
     ee2:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <OP>
     ee6:	d1 cc       	rjmp	.-1630   	; 0x88a <appTask+0x68>
						//set busy msg flag
						ReaderStateFlag.Busy = true;
						
					}
					//not associated
					else if((isAssociated() == false) && (ReaderStateFlag.MaxNumTransReached == false))
     ee8:	0e 94 51 14 	call	0x28a2	; 0x28a2 <isAssociated>
     eec:	81 11       	cpse	r24, r1
     eee:	8c c0       	rjmp	.+280    	; 0x1008 <appTask+0x7e6>
     ef0:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
     ef4:	84 fd       	sbrc	r24, 4
     ef6:	88 c0       	rjmp	.+272    	; 0x1008 <appTask+0x7e6>
					{
						//allow cycle to start when BOW is down
						//CurrentAccount.Value = vendPrice * 100;  PPOS
						CurrentAccount.Value = (uctempBuf[0]-0x30) * 1000 + (uctempBuf[1]-0x30) * 100 + (uctempBuf[3]-0x30) * 10 + uctempBuf[4]-0x30;
     ef8:	e0 e0       	ldi	r30, 0x00	; 0
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	20 81       	ld	r18, Z
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	20 53       	subi	r18, 0x30	; 48
     f02:	31 09       	sbc	r19, r1
     f04:	88 ee       	ldi	r24, 0xE8	; 232
     f06:	93 e0       	ldi	r25, 0x03	; 3
     f08:	28 9f       	mul	r18, r24
     f0a:	a0 01       	movw	r20, r0
     f0c:	29 9f       	mul	r18, r25
     f0e:	50 0d       	add	r21, r0
     f10:	38 9f       	mul	r19, r24
     f12:	50 0d       	add	r21, r0
     f14:	11 24       	eor	r1, r1
     f16:	21 81       	ldd	r18, Z+1	; 0x01
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	20 53       	subi	r18, 0x30	; 48
     f1c:	31 09       	sbc	r19, r1
     f1e:	64 e6       	ldi	r22, 0x64	; 100
     f20:	62 9f       	mul	r22, r18
     f22:	c0 01       	movw	r24, r0
     f24:	63 9f       	mul	r22, r19
     f26:	90 0d       	add	r25, r0
     f28:	11 24       	eor	r1, r1
     f2a:	48 0f       	add	r20, r24
     f2c:	59 1f       	adc	r21, r25
     f2e:	23 81       	ldd	r18, Z+3	; 0x03
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	c9 01       	movw	r24, r18
     f34:	c0 97       	sbiw	r24, 0x30	; 48
     f36:	bc 01       	movw	r22, r24
     f38:	66 0f       	add	r22, r22
     f3a:	77 1f       	adc	r23, r23
     f3c:	9c 01       	movw	r18, r24
     f3e:	22 0f       	add	r18, r18
     f40:	33 1f       	adc	r19, r19
     f42:	22 0f       	add	r18, r18
     f44:	33 1f       	adc	r19, r19
     f46:	22 0f       	add	r18, r18
     f48:	33 1f       	adc	r19, r19
     f4a:	cb 01       	movw	r24, r22
     f4c:	82 0f       	add	r24, r18
     f4e:	93 1f       	adc	r25, r19
     f50:	84 0f       	add	r24, r20
     f52:	95 1f       	adc	r25, r21
     f54:	24 81       	ldd	r18, Z+4	; 0x04
     f56:	82 0f       	add	r24, r18
     f58:	91 1d       	adc	r25, r1
     f5a:	c0 97       	sbiw	r24, 0x30	; 48
     f5c:	90 93 32 09 	sts	0x0932, r25	; 0x800932 <CurrentAccount+0x8>
     f60:	80 93 31 09 	sts	0x0931, r24	; 0x800931 <CurrentAccount+0x7>
						
						if (SQACAMachineStatus.MachineStatus[0] == MACHINE_READY_MODE)
     f64:	80 91 fb 0a 	lds	r24, 0x0AFB	; 0x800afb <SQACAMachineStatus+0x5>
     f68:	81 30       	cpi	r24, 0x01	; 1
     f6a:	09 f0       	breq	.+2      	; 0xf6e <appTask+0x74c>
     f6c:	96 cd       	rjmp	.-1236   	; 0xa9a <appTask+0x278>
						{
							sendSQACAMimicQuantumVending();
     f6e:	0e 94 33 12 	call	0x2466	; 0x2466 <sendSQACAMimicQuantumVending>

							OP = WAIT_FOR_SELECTION;
     f72:	88 e0       	ldi	r24, 0x08	; 8
     f74:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <OP>
							
							KPTOFlag = 0;
     f78:	10 92 2e 05 	sts	0x052E, r1	; 0x80052e <KPTOFlag>
							
							if( waitForMachineStartKey() )
     f7c:	0e 94 a7 12 	call	0x254e	; 0x254e <waitForMachineStartKey>
							{
								macSetLongAlarm(MACHINE_KEYPRESS_WAITTIME,KeypressTimeOut);		//KeyPressWaitTime
     f80:	66 eb       	ldi	r22, 0xB6	; 182
     f82:	71 e0       	ldi	r23, 0x01	; 1

							OP = WAIT_FOR_SELECTION;
							
							KPTOFlag = 0;
							
							if( waitForMachineStartKey() )
     f84:	88 23       	and	r24, r24
     f86:	09 f4       	brne	.+2      	; 0xf8a <appTask+0x768>
     f88:	9c c0       	rjmp	.+312    	; 0x10c2 <appTask+0x8a0>
							{
								macSetLongAlarm(MACHINE_KEYPRESS_WAITTIME,KeypressTimeOut);		//KeyPressWaitTime
     f8a:	8e e1       	ldi	r24, 0x1E	; 30
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	0e 94 22 27 	call	0x4e44	; 0x4e44 <macSetLongAlarm>
     f92:	83 cd       	rjmp	.-1274   	; 0xa9a <appTask+0x278>
						storeOfflineTransaction(CurrentAccount.ID);
					}
					//The reader sends this packet to the BOW to record a vending transaction.
					else
					{
						vend.isOffline = false;
     f94:	1d 8a       	std	Y+21, r1	; 0x15
						CurrentAccount.Value -= vendPrice;
     f96:	60 91 31 09 	lds	r22, 0x0931	; 0x800931 <CurrentAccount+0x7>
     f9a:	70 91 32 09 	lds	r23, 0x0932	; 0x800932 <CurrentAccount+0x8>
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	0e 94 61 2e 	call	0x5cc2	; 0x5cc2 <__floatunsisf>
     fa6:	20 91 17 0b 	lds	r18, 0x0B17	; 0x800b17 <vendPrice>
     faa:	30 91 18 0b 	lds	r19, 0x0B18	; 0x800b18 <vendPrice+0x1>
     fae:	40 91 19 0b 	lds	r20, 0x0B19	; 0x800b19 <vendPrice+0x2>
     fb2:	50 91 1a 0b 	lds	r21, 0x0B1A	; 0x800b1a <vendPrice+0x3>
     fb6:	0e 94 68 2d 	call	0x5ad0	; 0x5ad0 <__subsf3>
     fba:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__fixunssfsi>
     fbe:	70 93 32 09 	sts	0x0932, r23	; 0x800932 <CurrentAccount+0x8>
     fc2:	60 93 31 09 	sts	0x0931, r22	; 0x800931 <CurrentAccount+0x7>
						sendBOWCCTransaction(&vend);
     fc6:	ce 01       	movw	r24, r28
     fc8:	01 96       	adiw	r24, 0x01	; 1
     fca:	78 d4       	rcall	.+2288   	; 0x18bc <sendBOWCCTransaction>
     fcc:	e1 cc       	rjmp	.-1598   	; 0x990 <appTask+0x16e>
						
					}
					//The reader sends this packet to the BOW to record a vending transaction.
					else
					{
						vend.isOffline = false;
     fce:	1d 8a       	std	Y+21, r1	; 0x15
						CurrentAccount.Value -= vendPrice;
     fd0:	60 91 31 09 	lds	r22, 0x0931	; 0x800931 <CurrentAccount+0x7>
     fd4:	70 91 32 09 	lds	r23, 0x0932	; 0x800932 <CurrentAccount+0x8>
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	0e 94 61 2e 	call	0x5cc2	; 0x5cc2 <__floatunsisf>
     fe0:	20 91 17 0b 	lds	r18, 0x0B17	; 0x800b17 <vendPrice>
     fe4:	30 91 18 0b 	lds	r19, 0x0B18	; 0x800b18 <vendPrice+0x1>
     fe8:	40 91 19 0b 	lds	r20, 0x0B19	; 0x800b19 <vendPrice+0x2>
     fec:	50 91 1a 0b 	lds	r21, 0x0B1A	; 0x800b1a <vendPrice+0x3>
     ff0:	0e 94 68 2d 	call	0x5ad0	; 0x5ad0 <__subsf3>
     ff4:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__fixunssfsi>
     ff8:	70 93 32 09 	sts	0x0932, r23	; 0x800932 <CurrentAccount+0x8>
     ffc:	60 93 31 09 	sts	0x0931, r22	; 0x800931 <CurrentAccount+0x7>
						sendBOWCCTransaction(&vend);
    1000:	ce 01       	movw	r24, r28
    1002:	01 96       	adiw	r24, 0x01	; 1
    1004:	5b d4       	rcall	.+2230   	; 0x18bc <sendBOWCCTransaction>
    1006:	af cc       	rjmp	.-1698   	; 0x966 <appTask+0x144>
							
						}
					}
					else
					{
						OP = SCANNING;
    1008:	82 e0       	ldi	r24, 0x02	; 2
    100a:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <OP>
    100e:	45 cd       	rjmp	.-1398   	; 0xa9a <appTask+0x278>
		}
	}

	void CommTimeOut()
	{
		TOFlag = true;
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	80 93 2f 05 	sts	0x052F, r24	; 0x80052f <TOFlag>
    1016:	39 cc       	rjmp	.-1934   	; 0x88a <appTask+0x68>
						// Format the Balance to XX.XX
						//capture numeric into string
						if (k <2)
						sprintf(uctempBuf,"0%.2f",fBalance);
						else if(k == 2)
						sprintf(uctempBuf,"%.2f",fBalance);
    1018:	9f 93       	push	r25
    101a:	8f 93       	push	r24
    101c:	7f 93       	push	r23
    101e:	6f 93       	push	r22
    1020:	8e e5       	ldi	r24, 0x5E	; 94
    1022:	92 e0       	ldi	r25, 0x02	; 2
    1024:	9f 93       	push	r25
    1026:	8f 93       	push	r24
    1028:	ff 92       	push	r15
    102a:	ef 92       	push	r14
    102c:	0e 94 f6 33 	call	0x67ec	; 0x67ec <sprintf>
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	f8 94       	cli
    1034:	de bf       	out	0x3e, r29	; 62
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	cd bf       	out	0x3d, r28	; 61
    103a:	d3 cd       	rjmp	.-1114   	; 0xbe2 <appTask+0x3c0>
						OP = SETUP_REQUEST; //enable when setup supported by server
						
					}
					else if( (ReaderStateFlag.ReaderSetup == READER_SETUP_DONE) && (ReaderStateFlag.ValidateSetup == VALIDATE_READER_SETUP) )
					{
						VALIDATION_TIMEOUT = false;
    103c:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <VALIDATION_TIMEOUT>
						sendBOWValidationRequest();
    1040:	5e d1       	rcall	.+700    	; 0x12fe <sendBOWValidationRequest>
						// Clear Rx Buffer
						memset(DataBuffer,0,sizeof(DataBuffer));
    1042:	80 e8       	ldi	r24, 0x80	; 128
    1044:	e7 e3       	ldi	r30, 0x37	; 55
    1046:	f9 e0       	ldi	r31, 0x09	; 9
    1048:	df 01       	movw	r26, r30
    104a:	1d 92       	st	X+, r1
    104c:	8a 95       	dec	r24
    104e:	e9 f7       	brne	.-6      	; 0x104a <appTask+0x828>
						
						macSetLongAlarm(SETUP_VALIDATION_TIMEOUT, ValidationTimeout); 		//check Every 15s
    1050:	69 ea       	ldi	r22, 0xA9	; 169
    1052:	71 e0       	ldi	r23, 0x01	; 1
    1054:	8c e3       	ldi	r24, 0x3C	; 60
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	0e 94 22 27 	call	0x4e44	; 0x4e44 <macSetLongAlarm>

						// Wait for validation package to arrive
						OP = VALIDATE_SETUP;
    105c:	84 e1       	ldi	r24, 0x14	; 20
    105e:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <OP>
    1062:	92 cc       	rjmp	.-1756   	; 0x988 <appTask+0x166>
    1064:	de 01       	movw	r26, r28
    1066:	11 96       	adiw	r26, 0x01	; 1
    1068:	5d 01       	movw	r10, r26
    106a:	94 ce       	rjmp	.-728    	; 0xd94 <appTask+0x572>
						sendSQDisplayCommand(msgNumber[uctempBuf[0]-0x30], msgNumber[uctempBuf[1]-0x30], msgNumber[uctempBuf[3]-0x30], msgNumber[uctempBuf[4]-0x30], LED_BLANK, LED_BLANK,10);
						_delay_ms(100);

						if (SQACAMachineStatus.MachineStatus[0] == MACHINE_READY_MODE)
						{
							sendSQACAMimicQuantumVending();
    106c:	0e 94 33 12 	call	0x2466	; 0x2466 <sendSQACAMimicQuantumVending>
							
							#if(DEBUG_BOW)
							debugMsgStr("\r\nsendSQACAMimicQuantumVending()\r\n");
							#endif
							OP = WAIT_FOR_SELECTION; 	// ...wait for Start Pad Selection
    1070:	88 e0       	ldi	r24, 0x08	; 8
    1072:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <OP>
							//Sound Buzzer
							#if (DEBUG)
							Beeps(2);
							#endif
							
							KPTOFlag = 0;								//KeyPressTimeout false
    1076:	10 92 2e 05 	sts	0x052E, r1	; 0x80052e <KPTOFlag>
							//Examine machine control and the current status of the machine (Primary and Secondary Modes)
							if( waitForMachineStartKey() )
    107a:	0e 94 a7 12 	call	0x254e	; 0x254e <waitForMachineStartKey>
							{
								macSetLongAlarm(MACHINE_KEYPRESS_WAITTIME, KeypressTimeOut);		//15secs 
    107e:	66 eb       	ldi	r22, 0xB6	; 182
    1080:	71 e0       	ldi	r23, 0x01	; 1
							Beeps(2);
							#endif
							
							KPTOFlag = 0;								//KeyPressTimeout false
							//Examine machine control and the current status of the machine (Primary and Secondary Modes)
							if( waitForMachineStartKey() )
    1082:	88 23       	and	r24, r24
    1084:	c9 f0       	breq	.+50     	; 0x10b8 <appTask+0x896>
							{
								macSetLongAlarm(MACHINE_KEYPRESS_WAITTIME, KeypressTimeOut);		//15secs 
    1086:	8e e1       	ldi	r24, 0x1E	; 30
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	0e 94 22 27 	call	0x4e44	; 0x4e44 <macSetLongAlarm>
    108e:	fd cb       	rjmp	.-2054   	; 0x88a <appTask+0x68>
						fBalance = atof(uctempBuf);
						
						// Format the Balance to XX.XX
						//capture numeric into string
						if (k <2)
						sprintf(uctempBuf,"0%.2f",fBalance);
    1090:	9f 93       	push	r25
    1092:	8f 93       	push	r24
    1094:	7f 93       	push	r23
    1096:	6f 93       	push	r22
    1098:	8d e5       	ldi	r24, 0x5D	; 93
    109a:	92 e0       	ldi	r25, 0x02	; 2
    109c:	c3 cf       	rjmp	.-122    	; 0x1024 <appTask+0x802>
					
					if(!AnticollSelect(0, tmp, &cardType))
					{
						if(cardType == MIFARE_1K)
						{
							CurrentAccount.Type = MIFARE_1K;
    109e:	80 93 2a 09 	sts	0x092A, r24	; 0x80092a <CurrentAccount>
							
							Authentication(MIFARE_AUTHENT_A,cardKey,tmp,0);
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	ae 01       	movw	r20, r28
    10a6:	4f 5f       	subi	r20, 0xFF	; 255
    10a8:	5f 4f       	sbci	r21, 0xFF	; 255
    10aa:	be 01       	movw	r22, r28
    10ac:	67 5d       	subi	r22, 0xD7	; 215
    10ae:	7f 4f       	sbci	r23, 0xFF	; 255
    10b0:	80 e6       	ldi	r24, 0x60	; 96
    10b2:	0e 94 0f 1b 	call	0x361e	; 0x361e <Authentication>
    10b6:	c1 ce       	rjmp	.-638    	; 0xe3a <appTask+0x618>
							{
								macSetLongAlarm(MACHINE_KEYPRESS_WAITTIME, KeypressTimeOut);		//15secs 
							}
							else
							// code to avoid multiple button press
							macSetAlarm(500, KeypressTimeOut);		//if connected to a washer while cycle is running and a card is swiped, just display the balance and continue scanning.
    10b8:	84 ef       	ldi	r24, 0xF4	; 244
    10ba:	91 e0       	ldi	r25, 0x01	; 1
    10bc:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <macSetAlarm>
    10c0:	e4 cb       	rjmp	.-2104   	; 0x88a <appTask+0x68>
							if( waitForMachineStartKey() )
							{
								macSetLongAlarm(MACHINE_KEYPRESS_WAITTIME,KeypressTimeOut);		//KeyPressWaitTime
							}
							else
							macSetAlarm(500, KeypressTimeOut); // if connected to a washer while cycle is running and a card is swiped, just display the balance and continue scanning.
    10c2:	84 ef       	ldi	r24, 0xF4	; 244
    10c4:	91 e0       	ldi	r25, 0x01	; 1
    10c6:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <macSetAlarm>
    10ca:	e7 cc       	rjmp	.-1586   	; 0xa9a <appTask+0x278>

000010cc <timeoutWaitingForOLTReponse>:
bool sendBOWCCTransaction(structTransaction *transRecord);

static inline void timeoutWaitingForOLTReponse(void)
{
	
	timeout.sendingOfflineTransactions = true;
    10cc:	80 91 04 0a 	lds	r24, 0x0A04	; 0x800a04 <timeout>
    10d0:	81 60       	ori	r24, 0x01	; 1
    10d2:	80 93 04 0a 	sts	0x0A04, r24	; 0x800a04 <timeout>
    10d6:	08 95       	ret

000010d8 <constructOutgoingString>:
@param data Pointer to the data to be sent.

@param type Type of frame to be sent
*/
bool constructOutgoingString(u8 strType, char *tempStr)
{
    10d8:	0f 93       	push	r16
    10da:	1f 93       	push	r17
    10dc:	cf 93       	push	r28
    10de:	df 93       	push	r29
    10e0:	8b 01       	movw	r16, r22
	switch(strType)
    10e2:	83 30       	cpi	r24, 0x03	; 3
    10e4:	09 f4       	brne	.+2      	; 0x10e8 <constructOutgoingString+0x10>
    10e6:	a6 c0       	rjmp	.+332    	; 0x1234 <constructOutgoingString+0x15c>
    10e8:	40 f1       	brcs	.+80     	; 0x113a <constructOutgoingString+0x62>
    10ea:	85 30       	cpi	r24, 0x05	; 5
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <constructOutgoingString+0x18>
    10ee:	62 c0       	rjmp	.+196    	; 0x11b4 <constructOutgoingString+0xdc>
    10f0:	08 f4       	brcc	.+2      	; 0x10f4 <constructOutgoingString+0x1c>
    10f2:	97 c0       	rjmp	.+302    	; 0x1222 <constructOutgoingString+0x14a>
    10f4:	86 30       	cpi	r24, 0x06	; 6
    10f6:	09 f0       	breq	.+2      	; 0x10fa <constructOutgoingString+0x22>
    10f8:	72 c0       	rjmp	.+228    	; 0x11de <constructOutgoingString+0x106>
		
		break;
		//number of OfflineTransactions
		case REQUEST_NUMBER_OF_OLT:
		
		halGetEeprom(OFFLINE_TRANSACTION_RECORD_ADDR, 1, &ReaderSetup.numOfSavedTransactions);
    10fa:	44 ec       	ldi	r20, 0xC4	; 196
    10fc:	59 e0       	ldi	r21, 0x09	; 9
    10fe:	61 e0       	ldi	r22, 0x01	; 1
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	91 e0       	ldi	r25, 0x01	; 1
    1104:	0e 94 16 20 	call	0x402c	; 0x402c <halGetEeprom>
		if (ReaderSetup.numOfSavedTransactions == 0xff)
    1108:	80 91 c4 09 	lds	r24, 0x09C4	; 0x8009c4 <ReaderSetup+0x9>
    110c:	8f 3f       	cpi	r24, 0xFF	; 255
    110e:	09 f4       	brne	.+2      	; 0x1112 <constructOutgoingString+0x3a>
    1110:	9c c0       	rjmp	.+312    	; 0x124a <constructOutgoingString+0x172>
    1112:	90 e0       	ldi	r25, 0x00	; 0
		{
			ReaderSetup.numOfSavedTransactions = 0;
		}
		//build number of offline transactions string
		sprintf(tempStr+1, //"<OLT>"
    1114:	e8 01       	movw	r28, r16
    1116:	21 96       	adiw	r28, 0x01	; 1
    1118:	9f 93       	push	r25
    111a:	8f 93       	push	r24
    111c:	88 e7       	ldi	r24, 0x78	; 120
    111e:	93 e0       	ldi	r25, 0x03	; 3
    1120:	9f 93       	push	r25
    1122:	8f 93       	push	r24
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	0e 94 f6 33 	call	0x67ec	; 0x67ec <sprintf>
		"<OLT>%d</OLT>"
		,ReaderSetup.numOfSavedTransactions);
		
		break;
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	2c c0       	rjmp	.+88     	; 0x1192 <constructOutgoingString+0xba>

@param type Type of frame to be sent
*/
bool constructOutgoingString(u8 strType, char *tempStr)
{
	switch(strType)
    113a:	81 30       	cpi	r24, 0x01	; 1
    113c:	09 f4       	brne	.+2      	; 0x1140 <constructOutgoingString+0x68>
    113e:	52 c0       	rjmp	.+164    	; 0x11e4 <constructOutgoingString+0x10c>
    1140:	82 30       	cpi	r24, 0x02	; 2
    1142:	09 f0       	breq	.+2      	; 0x1146 <constructOutgoingString+0x6e>
    1144:	4c c0       	rjmp	.+152    	; 0x11de <constructOutgoingString+0x106>
		
		break;
		
		case REQUEST_SETUP:
		// Build setup request string
		sprintf(tempStr+1, "<ReaderSetupInfo>"
    1146:	eb 01       	movw	r28, r22
    1148:	21 96       	adiw	r28, 0x01	; 1
    114a:	80 91 f3 0a 	lds	r24, 0x0AF3	; 0x800af3 <deviceStatus+0x1>
    114e:	1f 92       	push	r1
    1150:	8f 93       	push	r24
    1152:	80 91 f2 0a 	lds	r24, 0x0AF2	; 0x800af2 <deviceStatus>
    1156:	1f 92       	push	r1
    1158:	8f 93       	push	r24
    115a:	80 91 c0 09 	lds	r24, 0x09C0	; 0x8009c0 <ReaderSetup+0x5>
    115e:	8f 93       	push	r24
    1160:	80 91 bf 09 	lds	r24, 0x09BF	; 0x8009bf <ReaderSetup+0x4>
    1164:	8f 93       	push	r24
    1166:	80 91 c2 09 	lds	r24, 0x09C2	; 0x8009c2 <ReaderSetup+0x7>
    116a:	8f 93       	push	r24
    116c:	80 91 c1 09 	lds	r24, 0x09C1	; 0x8009c1 <ReaderSetup+0x6>
    1170:	8f 93       	push	r24
    1172:	83 ec       	ldi	r24, 0xC3	; 195
    1174:	92 e0       	ldi	r25, 0x02	; 2
    1176:	9f 93       	push	r25
    1178:	8f 93       	push	r24
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	0e 94 f6 33 	call	0x67ec	; 0x67ec <sprintf>
		"<laundryRoomId>%d</laundryRoomId>"
		"<manufacturerId>%d</manufacturerId>"
		"<code>%d%d</code>",ReaderSetup.locationId, ReaderSetup.manufacturerId, deviceStatus.deviceType[0],deviceStatus.deviceType[1]);
		
		break;
    1182:	ad b7       	in	r26, 0x3d	; 61
    1184:	be b7       	in	r27, 0x3e	; 62
    1186:	1c 96       	adiw	r26, 0x0c	; 12
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	f8 94       	cli
    118c:	be bf       	out	0x3e, r27	; 62
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	ad bf       	out	0x3d, r26	; 61
		default:
		
		break;
	}
	
	tempStr[0] = strlen(tempStr+1); //get string length then assign to first element
    1192:	fe 01       	movw	r30, r28
    1194:	01 90       	ld	r0, Z+
    1196:	00 20       	and	r0, r0
    1198:	e9 f7       	brne	.-6      	; 0x1194 <constructOutgoingString+0xbc>
	tempStr[0] = tempStr[0] + 1;    // data size = data byte + size byte
    119a:	ec 1b       	sub	r30, r28
    119c:	d8 01       	movw	r26, r16
    119e:	ec 93       	st	X, r30
	
	if (tempStr[0] > 127)
    11a0:	8e 2f       	mov	r24, r30
    11a2:	80 95       	com	r24
		//#error "Outgoing string to large"
		return false;
	}

	return true;
}
    11a4:	88 1f       	adc	r24, r24
    11a6:	88 27       	eor	r24, r24
    11a8:	88 1f       	adc	r24, r24
    11aa:	df 91       	pop	r29
    11ac:	cf 91       	pop	r28
    11ae:	1f 91       	pop	r17
    11b0:	0f 91       	pop	r16
    11b2:	08 95       	ret
		break;
		
		case REQUEST_MACHINE_DESCRIPTION:
		
		//build machine description response string
		sprintf(tempStr+1, "<MachineDescription>"
    11b4:	eb 01       	movw	r28, r22
    11b6:	21 96       	adiw	r28, 0x01	; 1
    11b8:	85 ec       	ldi	r24, 0xC5	; 197
    11ba:	99 e0       	ldi	r25, 0x09	; 9
    11bc:	9f 93       	push	r25
    11be:	8f 93       	push	r24
    11c0:	88 e5       	ldi	r24, 0x58	; 88
    11c2:	93 e0       	ldi	r25, 0x03	; 3
    11c4:	9f 93       	push	r25
    11c6:	8f 93       	push	r24
    11c8:	df 93       	push	r29
    11ca:	cf 93       	push	r28
    11cc:	0e 94 f6 33 	call	0x67ec	; 0x67ec <sprintf>
		"<mD>%s</mD>"
		,ReaderSetup.machineDescription);
		
		break;
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	da cf       	rjmp	.-76     	; 0x1192 <constructOutgoingString+0xba>
    11de:	e8 01       	movw	r28, r16
    11e0:	21 96       	adiw	r28, 0x01	; 1
    11e2:	d7 cf       	rjmp	.-82     	; 0x1192 <constructOutgoingString+0xba>
{
	switch(strType)
	{
		case FIRMWARE_VERSION:
		//build firmware version string
		sprintf(tempStr+1, "<FirmwareVersion>"
    11e4:	eb 01       	movw	r28, r22
    11e6:	21 96       	adiw	r28, 0x01	; 1
    11e8:	80 91 f3 0a 	lds	r24, 0x0AF3	; 0x800af3 <deviceStatus+0x1>
    11ec:	1f 92       	push	r1
    11ee:	8f 93       	push	r24
    11f0:	80 91 f2 0a 	lds	r24, 0x0AF2	; 0x800af2 <deviceStatus>
    11f4:	1f 92       	push	r1
    11f6:	8f 93       	push	r24
    11f8:	80 e8       	ldi	r24, 0x80	; 128
    11fa:	92 e0       	ldi	r25, 0x02	; 2
    11fc:	9f 93       	push	r25
    11fe:	8f 93       	push	r24
    1200:	8a e8       	ldi	r24, 0x8A	; 138
    1202:	92 e0       	ldi	r25, 0x02	; 2
    1204:	9f 93       	push	r25
    1206:	8f 93       	push	r24
    1208:	df 93       	push	r29
    120a:	cf 93       	push	r28
    120c:	0e 94 f6 33 	call	0x67ec	; 0x67ec <sprintf>
		"<fw>%s</fw>"
		"<DeviceType>%d%d<Devicetype>"
		,__APP_VERSION_STRING__,deviceStatus.deviceType[0],deviceStatus.deviceType[1]);
		
		break;
    1210:	ad b7       	in	r26, 0x3d	; 61
    1212:	be b7       	in	r27, 0x3e	; 62
    1214:	1a 96       	adiw	r26, 0x0a	; 10
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	f8 94       	cli
    121a:	be bf       	out	0x3e, r27	; 62
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	ad bf       	out	0x3d, r26	; 61
    1220:	b8 cf       	rjmp	.-144    	; 0x1192 <constructOutgoingString+0xba>
		break;
		
		case REQUEST_MACHINE_LABEL:
		//build machine label response string
		
		sprintf(tempStr+1, "<MachineLabel>"
    1222:	eb 01       	movw	r28, r22
    1224:	21 96       	adiw	r28, 0x01	; 1
    1226:	88 ef       	ldi	r24, 0xF8	; 248
    1228:	99 e0       	ldi	r25, 0x09	; 9
    122a:	9f 93       	push	r25
    122c:	8f 93       	push	r24
    122e:	8e e3       	ldi	r24, 0x3E	; 62
    1230:	93 e0       	ldi	r25, 0x03	; 3
    1232:	76 cf       	rjmp	.-276    	; 0x1120 <constructOutgoingString+0x48>
		
		break;
		
		case REQUEST_VALIDATION:
		//build validation request string
		sprintf(tempStr+1, "<ValidationRequest>");
    1234:	eb 01       	movw	r28, r22
    1236:	21 96       	adiw	r28, 0x01	; 1
    1238:	84 e1       	ldi	r24, 0x14	; 20
    123a:	ea e2       	ldi	r30, 0x2A	; 42
    123c:	f3 e0       	ldi	r31, 0x03	; 3
    123e:	de 01       	movw	r26, r28
    1240:	01 90       	ld	r0, Z+
    1242:	0d 92       	st	X+, r0
    1244:	8a 95       	dec	r24
    1246:	e1 f7       	brne	.-8      	; 0x1240 <constructOutgoingString+0x168>
		
		break;
    1248:	a4 cf       	rjmp	.-184    	; 0x1192 <constructOutgoingString+0xba>
		case REQUEST_NUMBER_OF_OLT:
		
		halGetEeprom(OFFLINE_TRANSACTION_RECORD_ADDR, 1, &ReaderSetup.numOfSavedTransactions);
		if (ReaderSetup.numOfSavedTransactions == 0xff)
		{
			ReaderSetup.numOfSavedTransactions = 0;
    124a:	10 92 c4 09 	sts	0x09C4, r1	; 0x8009c4 <ReaderSetup+0x9>
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	60 cf       	rjmp	.-320    	; 0x1114 <constructOutgoingString+0x3c>

00001254 <sendBOWReaderFirmwareVersion>:
/**
Application function, sends a data frame to the coordinator
This contains a string payload that is displayed on the coordinator end.
*/
bool sendBOWReaderFirmwareVersion()
{
    1254:	1f 93       	push	r17
    1256:	cf 93       	push	r28
    1258:	df 93       	push	r29
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
    125e:	c0 58       	subi	r28, 0x80	; 128
    1260:	d1 09       	sbc	r29, r1
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	f8 94       	cli
    1266:	de bf       	out	0x3e, r29	; 62
    1268:	0f be       	out	0x3f, r0	; 63
    126a:	cd bf       	out	0x3d, r28	; 61
	char tmp[128]={0};
    126c:	be 01       	movw	r22, r28
    126e:	6f 5f       	subi	r22, 0xFF	; 255
    1270:	7f 4f       	sbci	r23, 0xFF	; 255
    1272:	80 e8       	ldi	r24, 0x80	; 128
    1274:	fb 01       	movw	r30, r22
    1276:	11 92       	st	Z+, r1
    1278:	8a 95       	dec	r24
    127a:	e9 f7       	brne	.-6      	; 0x1276 <sendBOWReaderFirmwareVersion+0x22>

	if ( constructOutgoingString(FIRMWARE_VERSION, tmp) )
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	2c df       	rcall	.-424    	; 0x10d8 <constructOutgoingString>
    1280:	18 2f       	mov	r17, r24
    1282:	88 23       	and	r24, r24
    1284:	41 f0       	breq	.+16     	; 0x1296 <sendBOWReaderFirmwareVersion+0x42>
	{
		macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);
    1286:	ae 01       	movw	r20, r28
    1288:	4e 5f       	subi	r20, 0xFE	; 254
    128a:	5f 4f       	sbci	r21, 0xFF	; 255
    128c:	69 81       	ldd	r22, Y+1	; 0x01
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	0e 94 37 22 	call	0x446e	; 0x446e <macDataRequest>
		return true;
	}
	return false;
}
    1296:	81 2f       	mov	r24, r17
    1298:	c0 58       	subi	r28, 0x80	; 128
    129a:	df 4f       	sbci	r29, 0xFF	; 255
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	f8 94       	cli
    12a0:	de bf       	out	0x3e, r29	; 62
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	cd bf       	out	0x3d, r28	; 61
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	1f 91       	pop	r17
    12ac:	08 95       	ret

000012ae <sendBOWSetupRequest>:
/**
Application function, sends a data frame to the coordinator
This contains a string payload that is displayed on the coordinator end.
*/
bool sendBOWSetupRequest()							//virgin
{
    12ae:	cf 93       	push	r28
    12b0:	df 93       	push	r29
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
    12b6:	c0 58       	subi	r28, 0x80	; 128
    12b8:	d1 09       	sbc	r29, r1
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	f8 94       	cli
    12be:	de bf       	out	0x3e, r29	; 62
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	cd bf       	out	0x3d, r28	; 61
	char tmp[128] = {0};
    12c4:	be 01       	movw	r22, r28
    12c6:	6f 5f       	subi	r22, 0xFF	; 255
    12c8:	7f 4f       	sbci	r23, 0xFF	; 255
    12ca:	80 e8       	ldi	r24, 0x80	; 128
    12cc:	fb 01       	movw	r30, r22
    12ce:	11 92       	st	Z+, r1
    12d0:	8a 95       	dec	r24
    12d2:	e9 f7       	brne	.-6      	; 0x12ce <sendBOWSetupRequest+0x20>
	
	constructOutgoingString(REQUEST_SETUP, tmp);
    12d4:	82 e0       	ldi	r24, 0x02	; 2
    12d6:	00 df       	rcall	.-512    	; 0x10d8 <constructOutgoingString>
	macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);
    12d8:	ae 01       	movw	r20, r28
    12da:	4e 5f       	subi	r20, 0xFE	; 254
    12dc:	5f 4f       	sbci	r21, 0xFF	; 255
    12de:	69 81       	ldd	r22, Y+1	; 0x01
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	0e 94 37 22 	call	0x446e	; 0x446e <macDataRequest>
	
	return true;
}
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	c0 58       	subi	r28, 0x80	; 128
    12ec:	df 4f       	sbci	r29, 0xFF	; 255
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	f8 94       	cli
    12f2:	de bf       	out	0x3e, r29	; 62
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	cd bf       	out	0x3d, r28	; 61
    12f8:	df 91       	pop	r29
    12fa:	cf 91       	pop	r28
    12fc:	08 95       	ret

000012fe <sendBOWValidationRequest>:
/**
Application function, sends a data frame to the coordinator
This contains a string payload that is displayed on the coordinator end.
*/
bool sendBOWValidationRequest()
{
    12fe:	cf 93       	push	r28
    1300:	df 93       	push	r29
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
    1306:	69 97       	sbiw	r28, 0x19	; 25
    1308:	0f b6       	in	r0, 0x3f	; 63
    130a:	f8 94       	cli
    130c:	de bf       	out	0x3e, r29	; 62
    130e:	0f be       	out	0x3f, r0	; 63
    1310:	cd bf       	out	0x3d, r28	; 61
	char tmp[25] = {0};
    1312:	be 01       	movw	r22, r28
    1314:	6f 5f       	subi	r22, 0xFF	; 255
    1316:	7f 4f       	sbci	r23, 0xFF	; 255
    1318:	89 e1       	ldi	r24, 0x19	; 25
    131a:	fb 01       	movw	r30, r22
    131c:	11 92       	st	Z+, r1
    131e:	8a 95       	dec	r24
    1320:	e9 f7       	brne	.-6      	; 0x131c <sendBOWValidationRequest+0x1e>
	
	constructOutgoingString(REQUEST_VALIDATION, tmp);
    1322:	83 e0       	ldi	r24, 0x03	; 3
    1324:	d9 de       	rcall	.-590    	; 0x10d8 <constructOutgoingString>
	macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);
    1326:	ae 01       	movw	r20, r28
    1328:	4e 5f       	subi	r20, 0xFE	; 254
    132a:	5f 4f       	sbci	r21, 0xFF	; 255
    132c:	69 81       	ldd	r22, Y+1	; 0x01
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	0e 94 37 22 	call	0x446e	; 0x446e <macDataRequest>
	
	return true;
}
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	69 96       	adiw	r28, 0x19	; 25
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	f8 94       	cli
    133e:	de bf       	out	0x3e, r29	; 62
    1340:	0f be       	out	0x3f, r0	; 63
    1342:	cd bf       	out	0x3d, r28	; 61
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	08 95       	ret

0000134a <sendBOWMachineLabel>:
/**
Application function, sends a data frame to the coordinator
This contains a string payload that is displayed on the coordinator end.
*/
bool sendBOWMachineLabel()
{
    134a:	cf 93       	push	r28
    134c:	df 93       	push	r29
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
    1352:	a3 97       	sbiw	r28, 0x23	; 35
    1354:	0f b6       	in	r0, 0x3f	; 63
    1356:	f8 94       	cli
    1358:	de bf       	out	0x3e, r29	; 62
    135a:	0f be       	out	0x3f, r0	; 63
    135c:	cd bf       	out	0x3d, r28	; 61
	char tmp[35] = {0};
    135e:	be 01       	movw	r22, r28
    1360:	6f 5f       	subi	r22, 0xFF	; 255
    1362:	7f 4f       	sbci	r23, 0xFF	; 255
    1364:	83 e2       	ldi	r24, 0x23	; 35
    1366:	fb 01       	movw	r30, r22
    1368:	11 92       	st	Z+, r1
    136a:	8a 95       	dec	r24
    136c:	e9 f7       	brne	.-6      	; 0x1368 <sendBOWMachineLabel+0x1e>
	
	constructOutgoingString(REQUEST_MACHINE_LABEL, tmp);
    136e:	84 e0       	ldi	r24, 0x04	; 4
    1370:	b3 de       	rcall	.-666    	; 0x10d8 <constructOutgoingString>
	macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);
    1372:	ae 01       	movw	r20, r28
    1374:	4e 5f       	subi	r20, 0xFE	; 254
    1376:	5f 4f       	sbci	r21, 0xFF	; 255
    1378:	69 81       	ldd	r22, Y+1	; 0x01
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	0e 94 37 22 	call	0x446e	; 0x446e <macDataRequest>
	
	return true;
}
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	a3 96       	adiw	r28, 0x23	; 35
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	de bf       	out	0x3e, r29	; 62
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	cd bf       	out	0x3d, r28	; 61
    1390:	df 91       	pop	r29
    1392:	cf 91       	pop	r28
    1394:	08 95       	ret

00001396 <sendBOWMachineDescription>:
/**
Application function, sends a data frame to the coordinator
This contains a string payload that is displayed on the coordinator end.
*/
bool sendBOWMachineDescription()
{
    1396:	cf 93       	push	r28
    1398:	df 93       	push	r29
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	c5 55       	subi	r28, 0x55	; 85
    13a0:	d1 09       	sbc	r29, r1
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	f8 94       	cli
    13a6:	de bf       	out	0x3e, r29	; 62
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	cd bf       	out	0x3d, r28	; 61
	char tmp[85] = {0};
    13ac:	be 01       	movw	r22, r28
    13ae:	6f 5f       	subi	r22, 0xFF	; 255
    13b0:	7f 4f       	sbci	r23, 0xFF	; 255
    13b2:	85 e5       	ldi	r24, 0x55	; 85
    13b4:	fb 01       	movw	r30, r22
    13b6:	11 92       	st	Z+, r1
    13b8:	8a 95       	dec	r24
    13ba:	e9 f7       	brne	.-6      	; 0x13b6 <sendBOWMachineDescription+0x20>
	
	constructOutgoingString(REQUEST_MACHINE_DESCRIPTION, tmp);
    13bc:	85 e0       	ldi	r24, 0x05	; 5
    13be:	8c de       	rcall	.-744    	; 0x10d8 <constructOutgoingString>
	macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);
    13c0:	ae 01       	movw	r20, r28
    13c2:	4e 5f       	subi	r20, 0xFE	; 254
    13c4:	5f 4f       	sbci	r21, 0xFF	; 255
    13c6:	69 81       	ldd	r22, Y+1	; 0x01
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	0e 94 37 22 	call	0x446e	; 0x446e <macDataRequest>
	
	return true;
}
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	cb 5a       	subi	r28, 0xAB	; 171
    13d4:	df 4f       	sbci	r29, 0xFF	; 255
    13d6:	0f b6       	in	r0, 0x3f	; 63
    13d8:	f8 94       	cli
    13da:	de bf       	out	0x3e, r29	; 62
    13dc:	0f be       	out	0x3f, r0	; 63
    13de:	cd bf       	out	0x3d, r28	; 61
    13e0:	df 91       	pop	r29
    13e2:	cf 91       	pop	r28
    13e4:	08 95       	ret

000013e6 <sendNumberOfOLT>:
/**
Application function, sends a data frame to the coordinator
This contains a string payload that is displayed on the coordinator end.
*/
bool sendNumberOfOLT()
{
    13e6:	cf 93       	push	r28
    13e8:	df 93       	push	r29
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
    13ee:	a3 97       	sbiw	r28, 0x23	; 35
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	f8 94       	cli
    13f4:	de bf       	out	0x3e, r29	; 62
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	cd bf       	out	0x3d, r28	; 61
	char tmp[35] = {0};
    13fa:	be 01       	movw	r22, r28
    13fc:	6f 5f       	subi	r22, 0xFF	; 255
    13fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1400:	83 e2       	ldi	r24, 0x23	; 35
    1402:	fb 01       	movw	r30, r22
    1404:	11 92       	st	Z+, r1
    1406:	8a 95       	dec	r24
    1408:	e9 f7       	brne	.-6      	; 0x1404 <sendNumberOfOLT+0x1e>
	
	constructOutgoingString(REQUEST_NUMBER_OF_OLT, tmp);
    140a:	86 e0       	ldi	r24, 0x06	; 6
    140c:	65 de       	rcall	.-822    	; 0x10d8 <constructOutgoingString>
	macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);
    140e:	ae 01       	movw	r20, r28
    1410:	4e 5f       	subi	r20, 0xFE	; 254
    1412:	5f 4f       	sbci	r21, 0xFF	; 255
    1414:	69 81       	ldd	r22, Y+1	; 0x01
    1416:	80 e0       	ldi	r24, 0x00	; 0
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	0e 94 37 22 	call	0x446e	; 0x446e <macDataRequest>
	
	return true;
}
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	a3 96       	adiw	r28, 0x23	; 35
    1422:	0f b6       	in	r0, 0x3f	; 63
    1424:	f8 94       	cli
    1426:	de bf       	out	0x3e, r29	; 62
    1428:	0f be       	out	0x3f, r0	; 63
    142a:	cd bf       	out	0x3d, r28	; 61
    142c:	df 91       	pop	r29
    142e:	cf 91       	pop	r28
    1430:	08 95       	ret

00001432 <extractIncomingMessage>:
\ or \c NULL if the substring is not found.

Sets also flag READER_SETUP_DONE
*/
u8 extractIncomingMessage(char *dataBuffer)
{
    1432:	8f 92       	push	r8
    1434:	9f 92       	push	r9
    1436:	af 92       	push	r10
    1438:	bf 92       	push	r11
    143a:	df 92       	push	r13
    143c:	ef 92       	push	r14
    143e:	ff 92       	push	r15
    1440:	0f 93       	push	r16
    1442:	1f 93       	push	r17
    1444:	cf 93       	push	r28
    1446:	df 93       	push	r29
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
    144c:	cd 54       	subi	r28, 0x4D	; 77
    144e:	d1 09       	sbc	r29, r1
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	de bf       	out	0x3e, r29	; 62
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	cd bf       	out	0x3d, r28	; 61
    145a:	2e 96       	adiw	r28, 0x0e	; 14
    145c:	9f af       	std	Y+63, r25	; 0x3f
    145e:	8e af       	std	Y+62, r24	; 0x3e
    1460:	2e 97       	sbiw	r28, 0x0e	; 14
	u8 TemplongAddr[8] = {0};
    1462:	8e 01       	movw	r16, r28
    1464:	0d 5b       	subi	r16, 0xBD	; 189
    1466:	1f 4f       	sbci	r17, 0xFF	; 255
    1468:	88 e0       	ldi	r24, 0x08	; 8
    146a:	f8 01       	movw	r30, r16
    146c:	98 2f       	mov	r25, r24
    146e:	11 92       	st	Z+, r1
    1470:	9a 95       	dec	r25
    1472:	e9 f7       	brne	.-6      	; 0x146e <extractIncomingMessage+0x3c>
	u8 MaclongAddr[8]  = {0};
    1474:	7e 01       	movw	r14, r28
    1476:	eb e3       	ldi	r30, 0x3B	; 59
    1478:	ee 0e       	add	r14, r30
    147a:	f1 1c       	adc	r15, r1
    147c:	f7 01       	movw	r30, r14
    147e:	11 92       	st	Z+, r1
    1480:	8a 95       	dec	r24
    1482:	e9 f7       	brne	.-6      	; 0x147e <extractIncomingMessage+0x4c>
	u16 tmp;
	char *ptr;
	u8 n;
	char nibbleStr[50] = {0};
    1484:	ce 01       	movw	r24, r28
    1486:	01 96       	adiw	r24, 0x01	; 1
    1488:	5c 01       	movw	r10, r24
    148a:	82 e3       	ldi	r24, 0x32	; 50
    148c:	f5 01       	movw	r30, r10
    148e:	11 92       	st	Z+, r1
    1490:	8a 95       	dec	r24
    1492:	e9 f7       	brne	.-6      	; 0x148e <extractIncomingMessage+0x5c>
	u8 i = 0;
    1494:	2c 96       	adiw	r28, 0x0c	; 12
    1496:	1f ae       	std	Y+63, r1	; 0x3f
    1498:	2c 97       	sbiw	r28, 0x0c	; 12
	u8 Nibble = 0;
	u8 returnCode = OP;
    149a:	d0 90 b8 09 	lds	r13, 0x09B8	; 0x8009b8 <OP>
	11 ShowBalance			SHOW_BALANCE_REQUEST
	12 faultcode
	13 AuditRq				AUDITDATA_REQUEST
	*/
	//1
	if(strstr(dataBuffer, "SetupPackage") != NULL)
    149e:	2e 96       	adiw	r28, 0x0e	; 14
    14a0:	8e ac       	ldd	r8, Y+62	; 0x3e
    14a2:	9f ac       	ldd	r9, Y+63	; 0x3f
    14a4:	2e 97       	sbiw	r28, 0x0e	; 14
    14a6:	66 e8       	ldi	r22, 0x86	; 134
    14a8:	73 e0       	ldi	r23, 0x03	; 3
    14aa:	c4 01       	movw	r24, r8
    14ac:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <strstr>
    14b0:	89 2b       	or	r24, r25
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <extractIncomingMessage+0x84>
    14b4:	ae c0       	rjmp	.+348    	; 0x1612 <extractIncomingMessage+0x1e0>
	{
		//if((ptr = GetParam(dataBuffer,"<SetupString>","<")) != NULL)			PPOS170601
		if((ptr = GetParam(dataBuffer,"<SS>","<")) != NULL)
    14b6:	49 e6       	ldi	r20, 0x69	; 105
    14b8:	52 e0       	ldi	r21, 0x02	; 2
    14ba:	63 e9       	ldi	r22, 0x93	; 147
    14bc:	73 e0       	ldi	r23, 0x03	; 3
    14be:	c4 01       	movw	r24, r8
    14c0:	7c d9       	rcall	.-3336   	; 0x7ba <GetParam>
    14c2:	00 97       	sbiw	r24, 0x00	; 0
    14c4:	21 f1       	breq	.+72     	; 0x150e <extractIncomingMessage+0xdc>
		{
			n = asciiStringToNibble(ptr, nibbleStr);
    14c6:	b5 01       	movw	r22, r10
    14c8:	0e 94 9b 29 	call	0x5336	; 0x5336 <asciiStringToNibble>
    14cc:	8b ab       	std	Y+51, r24	; 0x33
			// copy setup data

			halPutEeprom(MACHINE_SETUP_ADDR, n, (u8*)nibbleStr); //write machine setup string to eeprom; Maurice's Fix
    14ce:	a5 01       	movw	r20, r10
    14d0:	68 2f       	mov	r22, r24
    14d2:	84 e2       	ldi	r24, 0x24	; 36
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	0e 94 2b 20 	call	0x4056	; 0x4056 <halPutEeprom>
			
			ReaderSetup.maxOfflineTransaction = nibbleStr[n-1];  //PPOS170712
    14da:	8b a9       	ldd	r24, Y+51	; 0x33
    14dc:	fe 01       	movw	r30, r28
    14de:	e8 0f       	add	r30, r24
    14e0:	f1 1d       	adc	r31, r1
    14e2:	80 81       	ld	r24, Z
    14e4:	80 93 c3 09 	sts	0x09C3, r24	; 0x8009c3 <ReaderSetup+0x8>
			halPutEeprom(MAXNUM_OFFLINE_ADDR, 1, (u8*)&ReaderSetup.maxOfflineTransaction); //write machine setup string to eeprom minus "number of offline transactions"
    14e8:	43 ec       	ldi	r20, 0xC3	; 195
    14ea:	59 e0       	ldi	r21, 0x09	; 9
    14ec:	61 e0       	ldi	r22, 0x01	; 1
    14ee:	81 e6       	ldi	r24, 0x61	; 97
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	0e 94 2b 20 	call	0x4056	; 0x4056 <halPutEeprom>
			
			ReaderStateFlag.ReaderSetup = READER_SETUP_DONE;
    14f6:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
    14fa:	8d 7f       	andi	r24, 0xFD	; 253
    14fc:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
			halPutEeprom(READER_STATE_ADDR, 1, (u8*)&ReaderStateFlag);
    1500:	45 e3       	ldi	r20, 0x35	; 53
    1502:	59 e0       	ldi	r21, 0x09	; 9
    1504:	61 e0       	ldi	r22, 0x01	; 1
    1506:	82 e2       	ldi	r24, 0x22	; 34
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	0e 94 2b 20 	call	0x4056	; 0x4056 <halPutEeprom>
		}
		
		if((ptr = GetParam((char *)dataBuffer,"<ValidationCode>","<")) != NULL)
    150e:	49 e6       	ldi	r20, 0x69	; 105
    1510:	52 e0       	ldi	r21, 0x02	; 2
    1512:	68 e9       	ldi	r22, 0x98	; 152
    1514:	73 e0       	ldi	r23, 0x03	; 3
    1516:	2e 96       	adiw	r28, 0x0e	; 14
    1518:	8e ad       	ldd	r24, Y+62	; 0x3e
    151a:	9f ad       	ldd	r25, Y+63	; 0x3f
    151c:	2e 97       	sbiw	r28, 0x0e	; 14
    151e:	4d d9       	rcall	.-3430   	; 0x7ba <GetParam>
    1520:	00 97       	sbiw	r24, 0x00	; 0
    1522:	91 f0       	breq	.+36     	; 0x1548 <extractIncomingMessage+0x116>
		{
			n = asciiStringToNibble(ptr, nibbleStr);
    1524:	b5 01       	movw	r22, r10
    1526:	0e 94 9b 29 	call	0x5336	; 0x5336 <asciiStringToNibble>
    152a:	8b ab       	std	Y+51, r24	; 0x33
			// save validation code
			halPutEeprom(VALIDATION_CODE_ADDR, 1, (u8*)&n);
    152c:	ae 01       	movw	r20, r28
    152e:	4d 5c       	subi	r20, 0xCD	; 205
    1530:	5f 4f       	sbci	r21, 0xFF	; 255
    1532:	61 e0       	ldi	r22, 0x01	; 1
    1534:	87 e5       	ldi	r24, 0x57	; 87
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	0e 94 2b 20 	call	0x4056	; 0x4056 <halPutEeprom>
			halPutEeprom(VALIDATION_CODE_ADDR+1, n, (u8*)nibbleStr);
    153c:	a5 01       	movw	r20, r10
    153e:	6b a9       	ldd	r22, Y+51	; 0x33
    1540:	88 e5       	ldi	r24, 0x58	; 88
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	0e 94 2b 20 	call	0x4056	; 0x4056 <halPutEeprom>
		}
		
		if((ptr = GetParam((char *)dataBuffer,"<ReaderId>","<")) != NULL)
    1548:	49 e6       	ldi	r20, 0x69	; 105
    154a:	52 e0       	ldi	r21, 0x02	; 2
    154c:	69 ea       	ldi	r22, 0xA9	; 169
    154e:	73 e0       	ldi	r23, 0x03	; 3
    1550:	2e 96       	adiw	r28, 0x0e	; 14
    1552:	8e ad       	ldd	r24, Y+62	; 0x3e
    1554:	9f ad       	ldd	r25, Y+63	; 0x3f
    1556:	2e 97       	sbiw	r28, 0x0e	; 14
    1558:	30 d9       	rcall	.-3488   	; 0x7ba <GetParam>
    155a:	00 97       	sbiw	r24, 0x00	; 0
    155c:	89 f1       	breq	.+98     	; 0x15c0 <extractIncomingMessage+0x18e>
		{ //1
			tmp = atoi(ptr);
    155e:	0e 94 28 32 	call	0x6450	; 0x6450 <atoi>
    1562:	9c 01       	movw	r18, r24
			
			while (tmp> 0)
    1564:	89 2b       	or	r24, r25
    1566:	01 f1       	breq	.+64     	; 0x15a8 <extractIncomingMessage+0x176>
    1568:	2c 96       	adiw	r28, 0x0c	; 12
    156a:	4f ad       	ldd	r20, Y+63	; 0x3f
    156c:	2c 97       	sbiw	r28, 0x0c	; 12
    156e:	0a c0       	rjmp	.+20     	; 0x1584 <extractIncomingMessage+0x152>
					Nibble = highNibble;
					break;

					case highNibble:

					TemplongAddr[i] =  ((tmp % 16)<<4)| TemplongAddr[i];
    1570:	e2 95       	swap	r30
    1572:	e0 7f       	andi	r30, 0xF0	; 240
    1574:	9e 2b       	or	r25, r30
    1576:	9c 93       	st	X, r25
					i++;
    1578:	4f 5f       	subi	r20, 0xFF	; 255
					Nibble = lowNibble;
					break;
				}
				
				tmp = tmp / 16;
    157a:	23 2f       	mov	r18, r19
    157c:	33 27       	eor	r19, r19
		
		if((ptr = GetParam((char *)dataBuffer,"<ReaderId>","<")) != NULL)
		{ //1
			tmp = atoi(ptr);
			
			while (tmp> 0)
    157e:	21 15       	cp	r18, r1
    1580:	31 05       	cpc	r19, r1
    1582:	79 f0       	breq	.+30     	; 0x15a2 <extractIncomingMessage+0x170>
			{
				switch(Nibble)
				{
					case lowNibble:

					TemplongAddr[i] = (tmp % 16);
    1584:	92 2f       	mov	r25, r18
    1586:	9f 70       	andi	r25, 0x0F	; 15
    1588:	d8 01       	movw	r26, r16
    158a:	a4 0f       	add	r26, r20
    158c:	b1 1d       	adc	r27, r1
    158e:	9c 93       	st	X, r25
					i++;
					Nibble = lowNibble;
					break;
				}
				
				tmp = tmp / 16;
    1590:	f9 01       	movw	r30, r18
    1592:	f2 95       	swap	r31
    1594:	e2 95       	swap	r30
    1596:	ef 70       	andi	r30, 0x0F	; 15
    1598:	ef 27       	eor	r30, r31
    159a:	ff 70       	andi	r31, 0x0F	; 15
    159c:	ef 27       	eor	r30, r31
		
		if((ptr = GetParam((char *)dataBuffer,"<ReaderId>","<")) != NULL)
		{ //1
			tmp = atoi(ptr);
			
			while (tmp> 0)
    159e:	30 97       	sbiw	r30, 0x00	; 0
    15a0:	39 f7       	brne	.-50     	; 0x1570 <extractIncomingMessage+0x13e>
    15a2:	2c 96       	adiw	r28, 0x0c	; 12
    15a4:	4f af       	std	Y+63, r20	; 0x3f
    15a6:	2c 97       	sbiw	r28, 0x0c	; 12
				
				tmp = tmp / 16;
			}

			//Update Reader to eeprom in Hex format
			halPutMacAddr(TemplongAddr);
    15a8:	a8 01       	movw	r20, r16
    15aa:	68 e0       	ldi	r22, 0x08	; 8
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	0e 94 2b 20 	call	0x4056	; 0x4056 <halPutEeprom>

			// Verify write operation
			halGetMacAddr(MaclongAddr);
    15b4:	a7 01       	movw	r20, r14
    15b6:	68 e0       	ldi	r22, 0x08	; 8
    15b8:	80 e0       	ldi	r24, 0x00	; 0
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	0e 94 16 20 	call	0x402c	; 0x402c <halGetEeprom>

		}//1


		// Re-associate with COORD using new ReaderID
		if(strcmp((char*)TemplongAddr,(char*)MaclongAddr) == 0 )
    15c0:	b7 01       	movw	r22, r14
    15c2:	c8 01       	movw	r24, r16
    15c4:	0e 94 51 33 	call	0x66a2	; 0x66a2 <strcmp>
    15c8:	89 2b       	or	r24, r25
    15ca:	a1 f0       	breq	.+40     	; 0x15f4 <extractIncomingMessage+0x1c2>
	else if(strstr(dataBuffer, "AuditRq") != NULL)
	{
		returnCode = AUDITDATA_REQUEST;
	}
	return returnCode;
}
    15cc:	8d 2d       	mov	r24, r13
    15ce:	c3 5b       	subi	r28, 0xB3	; 179
    15d0:	df 4f       	sbci	r29, 0xFF	; 255
    15d2:	0f b6       	in	r0, 0x3f	; 63
    15d4:	f8 94       	cli
    15d6:	de bf       	out	0x3e, r29	; 62
    15d8:	0f be       	out	0x3f, r0	; 63
    15da:	cd bf       	out	0x3d, r28	; 61
    15dc:	df 91       	pop	r29
    15de:	cf 91       	pop	r28
    15e0:	1f 91       	pop	r17
    15e2:	0f 91       	pop	r16
    15e4:	ff 90       	pop	r15
    15e6:	ef 90       	pop	r14
    15e8:	df 90       	pop	r13
    15ea:	bf 90       	pop	r11
    15ec:	af 90       	pop	r10
    15ee:	9f 90       	pop	r9
    15f0:	8f 90       	pop	r8
    15f2:	08 95       	ret
			#if (DEBUG)
			Beeps(5);// Beeps 5x
			#endif
			

			ReaderStateFlag.FirstRun = NON_VIRGIN_READER;
    15f4:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
    15f8:	8e 7f       	andi	r24, 0xFE	; 254
    15fa:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
			halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
    15fe:	45 e3       	ldi	r20, 0x35	; 53
    1600:	59 e0       	ldi	r21, 0x09	; 9
    1602:	61 e0       	ldi	r22, 0x01	; 1
    1604:	82 e2       	ldi	r24, 0x22	; 34
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	0e 94 2b 20 	call	0x4056	; 0x4056 <halPutEeprom>

			// re-associate with new readerId
			returnCode = APP_INIT;
    160c:	70 e2       	ldi	r23, 0x20	; 32
    160e:	d7 2e       	mov	r13, r23
    1610:	dd cf       	rjmp	.-70     	; 0x15cc <extractIncomingMessage+0x19a>
		}

	}
	//2
	else if(strstr(dataBuffer, "SetupRequest") != NULL)
    1612:	64 eb       	ldi	r22, 0xB4	; 180
    1614:	73 e0       	ldi	r23, 0x03	; 3
    1616:	c4 01       	movw	r24, r8
    1618:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <strstr>
    161c:	89 2b       	or	r24, r25
    161e:	19 f0       	breq	.+6      	; 0x1626 <extractIncomingMessage+0x1f4>
	{
		returnCode = SETUP_REQUEST;
    1620:	2a e0       	ldi	r18, 0x0A	; 10
    1622:	d2 2e       	mov	r13, r18
    1624:	d3 cf       	rjmp	.-90     	; 0x15cc <extractIncomingMessage+0x19a>
	}
	//3
	else if(strstr(dataBuffer, "ValidationResponse") != NULL)
    1626:	61 ec       	ldi	r22, 0xC1	; 193
    1628:	73 e0       	ldi	r23, 0x03	; 3
    162a:	c4 01       	movw	r24, r8
    162c:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <strstr>
    1630:	89 2b       	or	r24, r25
    1632:	19 f0       	breq	.+6      	; 0x163a <extractIncomingMessage+0x208>
	{
		returnCode = VALIDATE_SETUP;
    1634:	94 e1       	ldi	r25, 0x14	; 20
    1636:	d9 2e       	mov	r13, r25
    1638:	c9 cf       	rjmp	.-110    	; 0x15cc <extractIncomingMessage+0x19a>
	}
	//4
	else if(strstr(dataBuffer, "GetFirmwareVersion") != NULL)
    163a:	64 ed       	ldi	r22, 0xD4	; 212
    163c:	73 e0       	ldi	r23, 0x03	; 3
    163e:	c4 01       	movw	r24, r8
    1640:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <strstr>
    1644:	89 2b       	or	r24, r25
    1646:	11 f0       	breq	.+4      	; 0x164c <extractIncomingMessage+0x21a>
	{
		sendBOWReaderFirmwareVersion();
    1648:	05 de       	rcall	.-1014   	; 0x1254 <sendBOWReaderFirmwareVersion>
    164a:	c0 cf       	rjmp	.-128    	; 0x15cc <extractIncomingMessage+0x19a>
		
	}
	//5
	else if(strstr(dataBuffer, "ResetEEPROM") != NULL)
    164c:	67 ee       	ldi	r22, 0xE7	; 231
    164e:	73 e0       	ldi	r23, 0x03	; 3
    1650:	c4 01       	movw	r24, r8
    1652:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <strstr>
    1656:	89 2b       	or	r24, r25
    1658:	a1 f0       	breq	.+40     	; 0x1682 <extractIncomingMessage+0x250>
	{
		unsigned char reset_eeprom[8] = {255,255,255,255,255,255,255,255};
    165a:	88 e0       	ldi	r24, 0x08	; 8
    165c:	e7 e2       	ldi	r30, 0x27	; 39
    165e:	f2 e0       	ldi	r31, 0x02	; 2
    1660:	de 01       	movw	r26, r28
    1662:	d3 96       	adiw	r26, 0x33	; 51
    1664:	01 90       	ld	r0, Z+
    1666:	0d 92       	st	X+, r0
    1668:	8a 95       	dec	r24
    166a:	e1 f7       	brne	.-8      	; 0x1664 <extractIncomingMessage+0x232>
		halPutEeprom(0,8,(u8*)reset_eeprom);
    166c:	ae 01       	movw	r20, r28
    166e:	4d 5c       	subi	r20, 0xCD	; 205
    1670:	5f 4f       	sbci	r21, 0xFF	; 255
    1672:	68 e0       	ldi	r22, 0x08	; 8
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	0e 94 2b 20 	call	0x4056	; 0x4056 <halPutEeprom>
		
		// re-associate
		returnCode = APP_INIT;
    167c:	60 e2       	ldi	r22, 0x20	; 32
    167e:	d6 2e       	mov	r13, r22
    1680:	a5 cf       	rjmp	.-182    	; 0x15cc <extractIncomingMessage+0x19a>
	}
	//6
	else if(strstr(dataBuffer, "EnterBootloader") != NULL)
    1682:	63 ef       	ldi	r22, 0xF3	; 243
    1684:	73 e0       	ldi	r23, 0x03	; 3
    1686:	c4 01       	movw	r24, r8
    1688:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <strstr>
    168c:	89 2b       	or	r24, r25
    168e:	09 f4       	brne	.+2      	; 0x1692 <extractIncomingMessage+0x260>
    1690:	3b c0       	rjmp	.+118    	; 0x1708 <extractIncomingMessage+0x2d6>
	{
		// Store Active CHANNEL to EEPROM Address 0xFF2
		halPutEeprom((u16*)CHANNEL_ADDR, 1, &macConfig.currentChannel);
    1692:	41 e5       	ldi	r20, 0x51	; 81
    1694:	5c e0       	ldi	r21, 0x0C	; 12
    1696:	61 e0       	ldi	r22, 0x01	; 1
    1698:	82 ef       	ldi	r24, 0xF2	; 242
    169a:	9f e0       	ldi	r25, 0x0F	; 15
    169c:	0e 94 2b 20 	call	0x4056	; 0x4056 <halPutEeprom>

		// Store Active PAN_ID to EEPROM Address 0xFF4
		halPutEeprom((u16*)PANID_ADDR, 2, (u8*)&macConfig.panId);
    16a0:	48 e4       	ldi	r20, 0x48	; 72
    16a2:	5c e0       	ldi	r21, 0x0C	; 12
    16a4:	62 e0       	ldi	r22, 0x02	; 2
    16a6:	84 ef       	ldi	r24, 0xF4	; 244
    16a8:	9f e0       	ldi	r25, 0x0F	; 15
    16aa:	0e 94 2b 20 	call	0x4056	; 0x4056 <halPutEeprom>

		// Store Active SHORT SOURCE ADDR to EEPROM Address 0xFF6
		halPutEeprom((u16*)SRCADDR_ADDR,2, (u8*)&macConfig.shortAddress);
    16ae:	4a e4       	ldi	r20, 0x4A	; 74
    16b0:	5c e0       	ldi	r21, 0x0C	; 12
    16b2:	62 e0       	ldi	r22, 0x02	; 2
    16b4:	86 ef       	ldi	r24, 0xF6	; 246
    16b6:	9f e0       	ldi	r25, 0x0F	; 15
    16b8:	0e 94 2b 20 	call	0x4056	; 0x4056 <halPutEeprom>
		
		i = 0x01;
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	2c 96       	adiw	r28, 0x0c	; 12
    16c0:	8f af       	std	Y+63, r24	; 0x3f
    16c2:	2c 97       	sbiw	r28, 0x0c	; 12
		halPutEeprom((u16*)BOOT_INIT_ADDR,1,(u8*)&i);
    16c4:	ae 01       	movw	r20, r28
    16c6:	45 5b       	subi	r20, 0xB5	; 181
    16c8:	5f 4f       	sbci	r21, 0xFF	; 255
    16ca:	61 e0       	ldi	r22, 0x01	; 1
    16cc:	80 ef       	ldi	r24, 0xF0	; 240
    16ce:	9f e0       	ldi	r25, 0x0F	; 15
    16d0:	0e 94 2b 20 	call	0x4056	; 0x4056 <halPutEeprom>
		
		// zero out CRC and Application size memory location
		memset(dataBuffer,0,sizeof((char*)dataBuffer));
    16d4:	2e 96       	adiw	r28, 0x0e	; 14
    16d6:	ee ad       	ldd	r30, Y+62	; 0x3e
    16d8:	ff ad       	ldd	r31, Y+63	; 0x3f
    16da:	2e 97       	sbiw	r28, 0x0e	; 14
    16dc:	11 82       	std	Z+1, r1	; 0x01
    16de:	10 82       	st	Z, r1
		halPutEeprom((u16*)APP_CRC,6,(u8*)&dataBuffer);
    16e0:	ae 01       	movw	r20, r28
    16e2:	44 5b       	subi	r20, 0xB4	; 180
    16e4:	5f 4f       	sbci	r21, 0xFF	; 255
    16e6:	66 e0       	ldi	r22, 0x06	; 6
    16e8:	8a ef       	ldi	r24, 0xFA	; 250
    16ea:	9f e0       	ldi	r25, 0x0F	; 15
    16ec:	0e 94 2b 20 	call	0x4056	; 0x4056 <halPutEeprom>

		
		// Initiate watchdog timer
		cli();
    16f0:	f8 94       	cli
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    16f2:	9f e0       	ldi	r25, 0x0F	; 15
    16f4:	88 e1       	ldi	r24, 0x18	; 24
    16f6:	0f b6       	in	r0, 0x3f	; 63
    16f8:	f8 94       	cli
    16fa:	a8 95       	wdr
    16fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1700:	0f be       	out	0x3f, r0	; 63
    1702:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		wdt_enable(WDTO_2S);
		while(1);
    1706:	ff cf       	rjmp	.-2      	; 0x1706 <extractIncomingMessage+0x2d4>

	}
	//7
	else if(strstr(dataBuffer, "SetD") != NULL)
    1708:	63 e0       	ldi	r22, 0x03	; 3
    170a:	74 e0       	ldi	r23, 0x04	; 4
    170c:	c4 01       	movw	r24, r8
    170e:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <strstr>
    1712:	89 2b       	or	r24, r25
    1714:	81 f1       	breq	.+96     	; 0x1776 <extractIncomingMessage+0x344>
	{
		if((ptr = GetParam((char *)dataBuffer,"<SetD>","<")) != NULL)
    1716:	49 e6       	ldi	r20, 0x69	; 105
    1718:	52 e0       	ldi	r21, 0x02	; 2
    171a:	68 e0       	ldi	r22, 0x08	; 8
    171c:	74 e0       	ldi	r23, 0x04	; 4
    171e:	c4 01       	movw	r24, r8
    1720:	4c d8       	rcall	.-3944   	; 0x7ba <GetParam>
    1722:	00 97       	sbiw	r24, 0x00	; 0
    1724:	09 f4       	brne	.+2      	; 0x1728 <extractIncomingMessage+0x2f6>
    1726:	52 cf       	rjmp	.-348    	; 0x15cc <extractIncomingMessage+0x19a>
		{
			if((n=strlen(ptr)) <= MACHINE_NAME_SIZE)
    1728:	fc 01       	movw	r30, r24
    172a:	01 90       	ld	r0, Z+
    172c:	00 20       	and	r0, r0
    172e:	e9 f7       	brne	.-6      	; 0x172a <extractIncomingMessage+0x2f8>
    1730:	31 97       	sbiw	r30, 0x01	; 1
    1732:	8f 01       	movw	r16, r30
    1734:	08 1b       	sub	r16, r24
    1736:	19 0b       	sbc	r17, r25
    1738:	0b ab       	std	Y+51, r16	; 0x33
    173a:	03 33       	cpi	r16, 0x33	; 51
    173c:	08 f0       	brcs	.+2      	; 0x1740 <extractIncomingMessage+0x30e>
    173e:	46 cf       	rjmp	.-372    	; 0x15cc <extractIncomingMessage+0x19a>
			{
				strcpy((char*)ReaderSetup.machineDescription, ptr);
    1740:	bc 01       	movw	r22, r24
    1742:	85 ec       	ldi	r24, 0xC5	; 197
    1744:	99 e0       	ldi	r25, 0x09	; 9
    1746:	0e 94 5a 33 	call	0x66b4	; 0x66b4 <strcpy>
				n++;//add null terminator to string
    174a:	61 e0       	ldi	r22, 0x01	; 1
    174c:	60 0f       	add	r22, r16
    174e:	6b ab       	std	Y+51, r22	; 0x33
				halPutEeprom(MACHINE_DESCRIPTION_ADDR, n, (u8*)&ReaderSetup.machineDescription);
    1750:	45 ec       	ldi	r20, 0xC5	; 197
    1752:	59 e0       	ldi	r21, 0x09	; 9
    1754:	87 e7       	ldi	r24, 0x77	; 119
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	0e 94 2b 20 	call	0x4056	; 0x4056 <halPutEeprom>
				
				ReaderStateFlag.ReaderNameSetup = SET_READER_FLAG;
    175c:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
    1760:	8f 77       	andi	r24, 0x7F	; 127
    1762:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
				halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
    1766:	45 e3       	ldi	r20, 0x35	; 53
    1768:	59 e0       	ldi	r21, 0x09	; 9
    176a:	61 e0       	ldi	r22, 0x01	; 1
    176c:	82 e2       	ldi	r24, 0x22	; 34
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	0e 94 2b 20 	call	0x4056	; 0x4056 <halPutEeprom>
    1774:	2b cf       	rjmp	.-426    	; 0x15cc <extractIncomingMessage+0x19a>
			}
		}
	}
	//8
	else if(strstr(dataBuffer, "GetD") != NULL)
    1776:	6f e0       	ldi	r22, 0x0F	; 15
    1778:	74 e0       	ldi	r23, 0x04	; 4
    177a:	c4 01       	movw	r24, r8
    177c:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <strstr>
    1780:	89 2b       	or	r24, r25
    1782:	11 f0       	breq	.+4      	; 0x1788 <extractIncomingMessage+0x356>
	{
		sendBOWMachineDescription();
    1784:	08 de       	rcall	.-1008   	; 0x1396 <sendBOWMachineDescription>
    1786:	22 cf       	rjmp	.-444    	; 0x15cc <extractIncomingMessage+0x19a>
		
	}
	//9
	else if(strstr(dataBuffer, "SetMachineLabel") != NULL)
    1788:	64 e1       	ldi	r22, 0x14	; 20
    178a:	74 e0       	ldi	r23, 0x04	; 4
    178c:	c4 01       	movw	r24, r8
    178e:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <strstr>
    1792:	89 2b       	or	r24, r25
    1794:	81 f1       	breq	.+96     	; 0x17f6 <extractIncomingMessage+0x3c4>
	{
		if((ptr = GetParam((char *)dataBuffer,"<SetMachineLabel>","<")) != NULL)
    1796:	49 e6       	ldi	r20, 0x69	; 105
    1798:	52 e0       	ldi	r21, 0x02	; 2
    179a:	64 e2       	ldi	r22, 0x24	; 36
    179c:	74 e0       	ldi	r23, 0x04	; 4
    179e:	c4 01       	movw	r24, r8
    17a0:	0c d8       	rcall	.-4072   	; 0x7ba <GetParam>
    17a2:	00 97       	sbiw	r24, 0x00	; 0
    17a4:	09 f4       	brne	.+2      	; 0x17a8 <extractIncomingMessage+0x376>
    17a6:	12 cf       	rjmp	.-476    	; 0x15cc <extractIncomingMessage+0x19a>
		{
			if((n=strlen(ptr)) <= MACHINE_LABEL_SIZE)
    17a8:	fc 01       	movw	r30, r24
    17aa:	01 90       	ld	r0, Z+
    17ac:	00 20       	and	r0, r0
    17ae:	e9 f7       	brne	.-6      	; 0x17aa <extractIncomingMessage+0x378>
    17b0:	31 97       	sbiw	r30, 0x01	; 1
    17b2:	8f 01       	movw	r16, r30
    17b4:	08 1b       	sub	r16, r24
    17b6:	19 0b       	sbc	r17, r25
    17b8:	0b ab       	std	Y+51, r16	; 0x33
    17ba:	0b 30       	cpi	r16, 0x0B	; 11
    17bc:	08 f0       	brcs	.+2      	; 0x17c0 <extractIncomingMessage+0x38e>
    17be:	06 cf       	rjmp	.-500    	; 0x15cc <extractIncomingMessage+0x19a>
			{
				strcpy((char*)ReaderSetup.machineLabel, ptr);
    17c0:	bc 01       	movw	r22, r24
    17c2:	88 ef       	ldi	r24, 0xF8	; 248
    17c4:	99 e0       	ldi	r25, 0x09	; 9
    17c6:	0e 94 5a 33 	call	0x66b4	; 0x66b4 <strcpy>
				n++;//add null terminator to string
    17ca:	61 e0       	ldi	r22, 0x01	; 1
    17cc:	60 0f       	add	r22, r16
    17ce:	6b ab       	std	Y+51, r22	; 0x33
				halPutEeprom(MACHINE_LABEL_ADDR, n, (u8*)&ReaderSetup.machineLabel);
    17d0:	48 ef       	ldi	r20, 0xF8	; 248
    17d2:	59 e0       	ldi	r21, 0x09	; 9
    17d4:	8c e6       	ldi	r24, 0x6C	; 108
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	0e 94 2b 20 	call	0x4056	; 0x4056 <halPutEeprom>
				
				ReaderStateFlag.ReaderLabelSetup = SET_READER_FLAG;
    17dc:	80 91 36 09 	lds	r24, 0x0936	; 0x800936 <ReaderStateFlag+0x1>
    17e0:	8e 7f       	andi	r24, 0xFE	; 254
    17e2:	80 93 36 09 	sts	0x0936, r24	; 0x800936 <ReaderStateFlag+0x1>
				halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
    17e6:	45 e3       	ldi	r20, 0x35	; 53
    17e8:	59 e0       	ldi	r21, 0x09	; 9
    17ea:	61 e0       	ldi	r22, 0x01	; 1
    17ec:	82 e2       	ldi	r24, 0x22	; 34
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	0e 94 2b 20 	call	0x4056	; 0x4056 <halPutEeprom>
    17f4:	eb ce       	rjmp	.-554    	; 0x15cc <extractIncomingMessage+0x19a>
			}
			
		}
	}
	//10
	else if(strstr(dataBuffer, "GetMachineLabel") != NULL)
    17f6:	66 e3       	ldi	r22, 0x36	; 54
    17f8:	74 e0       	ldi	r23, 0x04	; 4
    17fa:	c4 01       	movw	r24, r8
    17fc:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <strstr>
    1800:	89 2b       	or	r24, r25
    1802:	11 f0       	breq	.+4      	; 0x1808 <extractIncomingMessage+0x3d6>
	{
		sendBOWMachineLabel();
    1804:	a2 dd       	rcall	.-1212   	; 0x134a <sendBOWMachineLabel>
    1806:	e2 ce       	rjmp	.-572    	; 0x15cc <extractIncomingMessage+0x19a>
	}
	//11
	else if (strstr(dataBuffer, "GetOLT") != NULL)
    1808:	66 e4       	ldi	r22, 0x46	; 70
    180a:	74 e0       	ldi	r23, 0x04	; 4
    180c:	c4 01       	movw	r24, r8
    180e:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <strstr>
    1812:	89 2b       	or	r24, r25
    1814:	61 f0       	breq	.+24     	; 0x182e <extractIncomingMessage+0x3fc>
	{
		sendNumberOfOLT();
    1816:	e7 dd       	rcall	.-1074   	; 0x13e6 <sendNumberOfOLT>
		
		oLTTimerId = macSetLongAlarm(SERVER_RESPONSE_TIMEOUT,timeoutWaitingForOLTReponse);
    1818:	66 e6       	ldi	r22, 0x66	; 102
    181a:	78 e0       	ldi	r23, 0x08	; 8
    181c:	8c e3       	ldi	r24, 0x3C	; 60
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	0e 94 22 27 	call	0x4e44	; 0x4e44 <macSetLongAlarm>
    1824:	80 93 30 05 	sts	0x0530, r24	; 0x800530 <oLTTimerId.4052>
		returnCode = SEND_OFFLINE_TRANSACTIONS;
    1828:	58 e2       	ldi	r21, 0x28	; 40
    182a:	d5 2e       	mov	r13, r21
    182c:	cf ce       	rjmp	.-610    	; 0x15cc <extractIncomingMessage+0x19a>
	}
	//12
	else if(strstr(dataBuffer, "ShowBalance") != NULL)
    182e:	6d e4       	ldi	r22, 0x4D	; 77
    1830:	74 e0       	ldi	r23, 0x04	; 4
    1832:	c4 01       	movw	r24, r8
    1834:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <strstr>
    1838:	89 2b       	or	r24, r25
    183a:	19 f0       	breq	.+6      	; 0x1842 <extractIncomingMessage+0x410>
	{
		returnCode = SHOW_BALANCE_REQUEST;
    183c:	8f e1       	ldi	r24, 0x1F	; 31
    183e:	d8 2e       	mov	r13, r24
    1840:	c5 ce       	rjmp	.-630    	; 0x15cc <extractIncomingMessage+0x19a>
	}
	//13
	else if (strstr(dataBuffer, "faultcode") != NULL)
    1842:	69 e5       	ldi	r22, 0x59	; 89
    1844:	74 e0       	ldi	r23, 0x04	; 4
    1846:	c4 01       	movw	r24, r8
    1848:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <strstr>
    184c:	89 2b       	or	r24, r25
    184e:	11 f1       	breq	.+68     	; 0x1894 <extractIncomingMessage+0x462>
	{
		char errCode = 0;
    1850:	1b aa       	std	Y+51, r1	; 0x33
		if((ptr = GetParam((char *)dataBuffer,"<faultcode>","<")) != NULL)
    1852:	49 e6       	ldi	r20, 0x69	; 105
    1854:	52 e0       	ldi	r21, 0x02	; 2
    1856:	63 e6       	ldi	r22, 0x63	; 99
    1858:	74 e0       	ldi	r23, 0x04	; 4
    185a:	c4 01       	movw	r24, r8
    185c:	0e 94 dd 03 	call	0x7ba	; 0x7ba <GetParam>
    1860:	00 97       	sbiw	r24, 0x00	; 0
    1862:	09 f4       	brne	.+2      	; 0x1866 <extractIncomingMessage+0x434>
    1864:	b3 ce       	rjmp	.-666    	; 0x15cc <extractIncomingMessage+0x19a>
		{
			asciiStringToNibble(ptr, &errCode);
    1866:	be 01       	movw	r22, r28
    1868:	6d 5c       	subi	r22, 0xCD	; 205
    186a:	7f 4f       	sbci	r23, 0xFF	; 255
    186c:	0e 94 9b 29 	call	0x5336	; 0x5336 <asciiStringToNibble>
			
			switch(errCode)
    1870:	8b a9       	ldd	r24, Y+51	; 0x33
    1872:	86 30       	cpi	r24, 0x06	; 6
    1874:	09 f0       	breq	.+2      	; 0x1878 <extractIncomingMessage+0x446>
    1876:	aa ce       	rjmp	.-684    	; 0x15cc <extractIncomingMessage+0x19a>
			{
				case TRANSACTION_SUCCESSFUL:
				if (returnCode == SEND_OFFLINE_TRANSACTIONS)
    1878:	f8 e2       	ldi	r31, 0x28	; 40
    187a:	df 12       	cpse	r13, r31
    187c:	a7 ce       	rjmp	.-690    	; 0x15cc <extractIncomingMessage+0x19a>
				{
					macTimerEnd(oLTTimerId);
    187e:	80 91 30 05 	lds	r24, 0x0530	; 0x800530 <oLTTimerId.4052>
    1882:	0e 94 7d 27 	call	0x4efa	; 0x4efa <macTimerEnd>
					if( !sendStoredTransaction() )
    1886:	0e 94 e7 15 	call	0x2bce	; 0x2bce <sendStoredTransaction>
    188a:	81 11       	cpse	r24, r1
    188c:	0e c0       	rjmp	.+28     	; 0x18aa <extractIncomingMessage+0x478>
					{ //All stored transactions have been sent
						returnCode = IDLE;
    188e:	47 e2       	ldi	r20, 0x27	; 39
    1890:	d4 2e       	mov	r13, r20
    1892:	9c ce       	rjmp	.-712    	; 0x15cc <extractIncomingMessage+0x19a>
			}
		}
		
	}
	//14 new: Audit Data ACA Short Audit Command = 0x30
	else if(strstr(dataBuffer, "AuditRq") != NULL)
    1894:	6f e6       	ldi	r22, 0x6F	; 111
    1896:	74 e0       	ldi	r23, 0x04	; 4
    1898:	c4 01       	movw	r24, r8
    189a:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <strstr>
    189e:	89 2b       	or	r24, r25
    18a0:	09 f4       	brne	.+2      	; 0x18a4 <extractIncomingMessage+0x472>
    18a2:	94 ce       	rjmp	.-728    	; 0x15cc <extractIncomingMessage+0x19a>
	{
		returnCode = AUDITDATA_REQUEST;
    18a4:	37 e1       	ldi	r19, 0x17	; 23
    18a6:	d3 2e       	mov	r13, r19
    18a8:	91 ce       	rjmp	.-734    	; 0x15cc <extractIncomingMessage+0x19a>
					{ //All stored transactions have been sent
						returnCode = IDLE;
					}
					else
					{	//set new timer while waiting for next response
						oLTTimerId = macSetLongAlarm(SERVER_RESPONSE_TIMEOUT,timeoutWaitingForOLTReponse);
    18aa:	66 e6       	ldi	r22, 0x66	; 102
    18ac:	78 e0       	ldi	r23, 0x08	; 8
    18ae:	8c e3       	ldi	r24, 0x3C	; 60
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	0e 94 22 27 	call	0x4e44	; 0x4e44 <macSetLongAlarm>
    18b6:	80 93 30 05 	sts	0x0530, r24	; 0x800530 <oLTTimerId.4052>
    18ba:	88 ce       	rjmp	.-752    	; 0x15cc <extractIncomingMessage+0x19a>

000018bc <sendBOWCCTransaction>:
The reader sends this packet frame to perform a vending transaction.

@param data Pointer to the data to be sent.
*/
bool sendBOWCCTransaction(structTransaction *transRecord)
{
    18bc:	ef 92       	push	r14
    18be:	ff 92       	push	r15
    18c0:	0f 93       	push	r16
    18c2:	1f 93       	push	r17
    18c4:	cf 93       	push	r28
    18c6:	df 93       	push	r29
    18c8:	cd b7       	in	r28, 0x3d	; 61
    18ca:	de b7       	in	r29, 0x3e	; 62
    18cc:	ca 58       	subi	r28, 0x8A	; 138
    18ce:	d1 09       	sbc	r29, r1
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	f8 94       	cli
    18d4:	de bf       	out	0x3e, r29	; 62
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	cd bf       	out	0x3d, r28	; 61
    18da:	8c 01       	movw	r16, r24
	char tmpCardIdString[10] = {0};
    18dc:	7e 01       	movw	r14, r28
    18de:	81 e8       	ldi	r24, 0x81	; 129
    18e0:	e8 0e       	add	r14, r24
    18e2:	f1 1c       	adc	r15, r1
    18e4:	8a e0       	ldi	r24, 0x0A	; 10
    18e6:	d7 01       	movw	r26, r14
    18e8:	1d 92       	st	X+, r1
    18ea:	8a 95       	dec	r24
    18ec:	e9 f7       	brne	.-6      	; 0x18e8 <sendBOWCCTransaction+0x2c>
	char tempStr[128] = {0};
    18ee:	fe 01       	movw	r30, r28
    18f0:	31 96       	adiw	r30, 0x01	; 1
    18f2:	80 e8       	ldi	r24, 0x80	; 128
    18f4:	df 01       	movw	r26, r30
    18f6:	1d 92       	st	X+, r1
    18f8:	8a 95       	dec	r24
    18fa:	e9 f7       	brne	.-6      	; 0x18f6 <sendBOWCCTransaction+0x3a>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ultoa_ncheck (unsigned long, char *, unsigned char);
	return __ultoa_ncheck (__val, __s, __radix);
    18fc:	f8 01       	movw	r30, r16
    18fe:	61 85       	ldd	r22, Z+9	; 0x09
    1900:	72 85       	ldd	r23, Z+10	; 0x0a
    1902:	83 85       	ldd	r24, Z+11	; 0x0b
    1904:	94 85       	ldd	r25, Z+12	; 0x0c
    1906:	2a e0       	ldi	r18, 0x0A	; 10
    1908:	a7 01       	movw	r20, r14
    190a:	0e 94 9d 33 	call	0x673a	; 0x673a <__ultoa_ncheck>
	
	//send data to BOW
	ultoa(transRecord->CardId,tmpCardIdString,10);
	sprintf((char *)tempStr+1, "<CC>"
    190e:	d8 01       	movw	r26, r16
    1910:	54 96       	adiw	r26, 0x14	; 20
    1912:	8c 91       	ld	r24, X
    1914:	54 97       	sbiw	r26, 0x14	; 20
    1916:	1f 92       	push	r1
    1918:	8f 93       	push	r24
    191a:	13 96       	adiw	r26, 0x03	; 3
    191c:	8c 91       	ld	r24, X
    191e:	13 97       	sbiw	r26, 0x03	; 3
    1920:	1f 92       	push	r1
    1922:	8f 93       	push	r24
    1924:	12 96       	adiw	r26, 0x02	; 2
    1926:	8c 91       	ld	r24, X
    1928:	12 97       	sbiw	r26, 0x02	; 2
    192a:	1f 92       	push	r1
    192c:	8f 93       	push	r24
    192e:	15 96       	adiw	r26, 0x05	; 5
    1930:	8c 91       	ld	r24, X
    1932:	15 97       	sbiw	r26, 0x05	; 5
    1934:	8f 93       	push	r24
    1936:	14 96       	adiw	r26, 0x04	; 4
    1938:	8c 91       	ld	r24, X
    193a:	14 97       	sbiw	r26, 0x04	; 4
    193c:	8f 93       	push	r24
    193e:	11 96       	adiw	r26, 0x01	; 1
    1940:	8c 91       	ld	r24, X
    1942:	11 97       	sbiw	r26, 0x01	; 1
    1944:	8f 93       	push	r24
    1946:	8c 91       	ld	r24, X
    1948:	8f 93       	push	r24
    194a:	17 96       	adiw	r26, 0x07	; 7
    194c:	6d 91       	ld	r22, X+
    194e:	7c 91       	ld	r23, X
    1950:	18 97       	sbiw	r26, 0x08	; 8
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	0e 94 61 2e 	call	0x5cc2	; 0x5cc2 <__floatunsisf>
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	48 ec       	ldi	r20, 0xC8	; 200
    1960:	52 e4       	ldi	r21, 0x42	; 66
    1962:	0e 94 cd 2d 	call	0x5b9a	; 0x5b9a <__divsf3>
    1966:	9f 93       	push	r25
    1968:	8f 93       	push	r24
    196a:	7f 93       	push	r23
    196c:	6f 93       	push	r22
    196e:	ff 92       	push	r15
    1970:	ef 92       	push	r14
    1972:	87 e7       	ldi	r24, 0x77	; 119
    1974:	94 e0       	ldi	r25, 0x04	; 4
    1976:	9f 93       	push	r25
    1978:	8f 93       	push	r24
    197a:	8e 01       	movw	r16, r28
    197c:	0e 5f       	subi	r16, 0xFE	; 254
    197e:	1f 4f       	sbci	r17, 0xFF	; 255
    1980:	1f 93       	push	r17
    1982:	0f 93       	push	r16
    1984:	0e 94 f6 33 	call	0x67ec	; 0x67ec <sprintf>
	"<code>%d%d</code>"
	"<isOL>%d</isOL>"
	,tmpCardIdString, (double)(transRecord->vendPrice / 100.0), transRecord->LocationId, transRecord->ManufactureId
	, transRecord->MachineId[0] , transRecord->MachineId[1], transRecord->isOffline);
	
	tempStr[0] = strlen(tempStr+1); //get string length then assign to first element
    1988:	f8 01       	movw	r30, r16
    198a:	01 90       	ld	r0, Z+
    198c:	00 20       	and	r0, r0
    198e:	e9 f7       	brne	.-6      	; 0x198a <sendBOWCCTransaction+0xce>
	tempStr[0] = tempStr[0] + 1;    // data size = data byte + size byte
    1990:	6e 2f       	mov	r22, r30
    1992:	60 1b       	sub	r22, r16
    1994:	69 83       	std	Y+1, r22	; 0x01
	
	if (tempStr[0] > 127)
    1996:	0f b6       	in	r0, 0x3f	; 63
    1998:	f8 94       	cli
    199a:	de bf       	out	0x3e, r29	; 62
    199c:	0f be       	out	0x3f, r0	; 63
    199e:	cd bf       	out	0x3d, r28	; 61
    19a0:	67 fd       	sbrc	r22, 7
    19a2:	14 c0       	rjmp	.+40     	; 0x19cc <sendBOWCCTransaction+0x110>
	{
		//#error "Outgoing string to large"
		return false;
	}
	
	macDataRequest(DEFAULT_COORD_ADDR,(u8)tempStr[0],(u8*)tempStr+1); //send record via radio
    19a4:	a8 01       	movw	r20, r16
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	0e 94 37 22 	call	0x446e	; 0x446e <macDataRequest>
	
	return true;
    19ae:	81 e0       	ldi	r24, 0x01	; 1
}
    19b0:	c6 57       	subi	r28, 0x76	; 118
    19b2:	df 4f       	sbci	r29, 0xFF	; 255
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	f8 94       	cli
    19b8:	de bf       	out	0x3e, r29	; 62
    19ba:	0f be       	out	0x3f, r0	; 63
    19bc:	cd bf       	out	0x3d, r28	; 61
    19be:	df 91       	pop	r29
    19c0:	cf 91       	pop	r28
    19c2:	1f 91       	pop	r17
    19c4:	0f 91       	pop	r16
    19c6:	ff 90       	pop	r15
    19c8:	ef 90       	pop	r14
    19ca:	08 95       	ret
	tempStr[0] = tempStr[0] + 1;    // data size = data byte + size byte
	
	if (tempStr[0] > 127)
	{
		//#error "Outgoing string to large"
		return false;
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	f0 cf       	rjmp	.-32     	; 0x19b0 <sendBOWCCTransaction+0xf4>

000019d0 <sendBOWAuditDataRequest>:
/**
@brief The sendBOWAuditDataRequest function is used to send a frame over the air to the BOW.
The reader sends this packet frame (Audit Data packet 0x30) to transmit Short Audit Data about the vend.
*/
bool sendBOWAuditDataRequest()
{
    19d0:	cf 93       	push	r28
    19d2:	df 93       	push	r29
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
    19d8:	c0 58       	subi	r28, 0x80	; 128
    19da:	d1 09       	sbc	r29, r1
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	f8 94       	cli
    19e0:	de bf       	out	0x3e, r29	; 62
    19e2:	0f be       	out	0x3f, r0	; 63
    19e4:	cd bf       	out	0x3d, r28	; 61
	char tmp[128] = {0};
    19e6:	be 01       	movw	r22, r28
    19e8:	6f 5f       	subi	r22, 0xFF	; 255
    19ea:	7f 4f       	sbci	r23, 0xFF	; 255
    19ec:	80 e8       	ldi	r24, 0x80	; 128
    19ee:	fb 01       	movw	r30, r22
    19f0:	11 92       	st	Z+, r1
    19f2:	8a 95       	dec	r24
    19f4:	e9 f7       	brne	.-6      	; 0x19f0 <sendBOWAuditDataRequest+0x20>
	
	constructOutgoingString(REQUEST_AUDITDATA, tmp);
    19f6:	88 e0       	ldi	r24, 0x08	; 8
    19f8:	6f db       	rcall	.-2338   	; 0x10d8 <constructOutgoingString>
	macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);
    19fa:	ae 01       	movw	r20, r28
    19fc:	4e 5f       	subi	r20, 0xFE	; 254
    19fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1a00:	69 81       	ldd	r22, Y+1	; 0x01
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	0e 94 37 22 	call	0x446e	; 0x446e <macDataRequest>
	
	return true;
}
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	c0 58       	subi	r28, 0x80	; 128
    1a0e:	df 4f       	sbci	r29, 0xFF	; 255
    1a10:	0f b6       	in	r0, 0x3f	; 63
    1a12:	f8 94       	cli
    1a14:	de bf       	out	0x3e, r29	; 62
    1a16:	0f be       	out	0x3f, r0	; 63
    1a18:	cd bf       	out	0x3d, r28	; 61
    1a1a:	df 91       	pop	r29
    1a1c:	cf 91       	pop	r28
    1a1e:	08 95       	ret

00001a20 <sendSQDisplayCommand>:
	temp[4] = balance[2];
	temp[5] = balance[3];	
	temp[8] = 5;					//Duration of display in seconds
	
	return ( sendSQDataPacket(temp) );
}
    1a20:	cf 92       	push	r12
    1a22:	ef 92       	push	r14
    1a24:	0f 93       	push	r16
    1a26:	cf 93       	push	r28
    1a28:	df 93       	push	r29
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62
    1a2e:	29 97       	sbiw	r28, 0x09	; 9
    1a30:	0f b6       	in	r0, 0x3f	; 63
    1a32:	f8 94       	cli
    1a34:	de bf       	out	0x3e, r29	; 62
    1a36:	0f be       	out	0x3f, r0	; 63
    1a38:	cd bf       	out	0x3d, r28	; 61
    1a3a:	fe 01       	movw	r30, r28
    1a3c:	31 96       	adiw	r30, 0x01	; 1
    1a3e:	99 e0       	ldi	r25, 0x09	; 9
    1a40:	df 01       	movw	r26, r30
    1a42:	1d 92       	st	X+, r1
    1a44:	9a 95       	dec	r25
    1a46:	e9 f7       	brne	.-6      	; 0x1a42 <sendSQDisplayCommand+0x22>
    1a48:	98 e0       	ldi	r25, 0x08	; 8
    1a4a:	99 83       	std	Y+1, r25	; 0x01
    1a4c:	90 e6       	ldi	r25, 0x60	; 96
    1a4e:	9a 83       	std	Y+2, r25	; 0x02
    1a50:	8b 83       	std	Y+3, r24	; 0x03
    1a52:	6c 83       	std	Y+4, r22	; 0x04
    1a54:	4d 83       	std	Y+5, r20	; 0x05
    1a56:	2e 83       	std	Y+6, r18	; 0x06
    1a58:	0f 83       	std	Y+7, r16	; 0x07
    1a5a:	e8 86       	std	Y+8, r14	; 0x08
    1a5c:	c9 86       	std	Y+9, r12	; 0x09
    1a5e:	cf 01       	movw	r24, r30
    1a60:	48 d2       	rcall	.+1168   	; 0x1ef2 <sendSQDataPacket>
    1a62:	29 96       	adiw	r28, 0x09	; 9
    1a64:	0f b6       	in	r0, 0x3f	; 63
    1a66:	f8 94       	cli
    1a68:	de bf       	out	0x3e, r29	; 62
    1a6a:	0f be       	out	0x3f, r0	; 63
    1a6c:	cd bf       	out	0x3d, r28	; 61
    1a6e:	df 91       	pop	r29
    1a70:	cf 91       	pop	r28
    1a72:	0f 91       	pop	r16
    1a74:	ef 90       	pop	r14
    1a76:	cf 90       	pop	r12
    1a78:	08 95       	ret

00001a7a <displaySQReaderVersion>:
    1a7a:	cf 92       	push	r12
    1a7c:	ef 92       	push	r14
    1a7e:	0f 93       	push	r16
    1a80:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <msgNumber+0x1>
    1a84:	85 e0       	ldi	r24, 0x05	; 5
    1a86:	c8 2e       	mov	r12, r24
    1a88:	e1 2c       	mov	r14, r1
    1a8a:	00 e0       	ldi	r16, 0x00	; 0
    1a8c:	20 91 0d 02 	lds	r18, 0x020D	; 0x80020d <msgNumber>
    1a90:	46 2f       	mov	r20, r22
    1a92:	80 e5       	ldi	r24, 0x50	; 80
    1a94:	c5 df       	rcall	.-118    	; 0x1a20 <sendSQDisplayCommand>
    1a96:	88 23       	and	r24, r24
    1a98:	49 f0       	breq	.+18     	; 0x1aac <displaySQReaderVersion+0x32>
    1a9a:	2f ef       	ldi	r18, 0xFF	; 255
    1a9c:	37 ea       	ldi	r19, 0xA7	; 167
    1a9e:	91 e6       	ldi	r25, 0x61	; 97
    1aa0:	21 50       	subi	r18, 0x01	; 1
    1aa2:	30 40       	sbci	r19, 0x00	; 0
    1aa4:	90 40       	sbci	r25, 0x00	; 0
    1aa6:	e1 f7       	brne	.-8      	; 0x1aa0 <displaySQReaderVersion+0x26>
    1aa8:	00 c0       	rjmp	.+0      	; 0x1aaa <displaySQReaderVersion+0x30>
    1aaa:	00 00       	nop
    1aac:	0f 91       	pop	r16
    1aae:	ef 90       	pop	r14
    1ab0:	cf 90       	pop	r12
    1ab2:	08 95       	ret

00001ab4 <displaySQTopOffvend>:
   Parameter:  double vend

   maybe I use the above funct instead
 */
bool displaySQTopOffvend(double vend)
{
    1ab4:	cf 92       	push	r12
    1ab6:	ef 92       	push	r14
    1ab8:	0f 93       	push	r16
	if( sendSQDisplayCommand(LED_t, LED_o, LED_P, LED_BLANK, LED_BLANK,LED_BLANK, 5) )
    1aba:	85 e0       	ldi	r24, 0x05	; 5
    1abc:	c8 2e       	mov	r12, r24
    1abe:	e1 2c       	mov	r14, r1
    1ac0:	00 e0       	ldi	r16, 0x00	; 0
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	43 e7       	ldi	r20, 0x73	; 115
    1ac6:	6c e5       	ldi	r22, 0x5C	; 92
    1ac8:	88 e7       	ldi	r24, 0x78	; 120
    1aca:	aa df       	rcall	.-172    	; 0x1a20 <sendSQDisplayCommand>
    1acc:	88 23       	and	r24, r24
    1ace:	49 f0       	breq	.+18     	; 0x1ae2 <displaySQTopOffvend+0x2e>
    1ad0:	2f ef       	ldi	r18, 0xFF	; 255
    1ad2:	37 ea       	ldi	r19, 0xA7	; 167
    1ad4:	91 e6       	ldi	r25, 0x61	; 97
    1ad6:	21 50       	subi	r18, 0x01	; 1
    1ad8:	30 40       	sbci	r19, 0x00	; 0
    1ada:	90 40       	sbci	r25, 0x00	; 0
    1adc:	e1 f7       	brne	.-8      	; 0x1ad6 <displaySQTopOffvend+0x22>
    1ade:	00 c0       	rjmp	.+0      	; 0x1ae0 <displaySQTopOffvend+0x2c>
    1ae0:	00 00       	nop
	{
		_delay_ms(2000);
		return true;
	}
	return false;
}
    1ae2:	0f 91       	pop	r16
    1ae4:	ef 90       	pop	r14
    1ae6:	cf 90       	pop	r12
    1ae8:	08 95       	ret

00001aea <displaySQCardError>:

/** @brief Payment System Display Request. 
   
 */
bool displaySQCardError(void)
{
    1aea:	cf 92       	push	r12
    1aec:	ef 92       	push	r14
    1aee:	0f 93       	push	r16
    1af0:	cf 93       	push	r28
	if( sendSQDisplayCommand(LED_C,LED_A,LED_r,LED_d,LED_BLANK,LED_BLANK,4) )
    1af2:	94 e0       	ldi	r25, 0x04	; 4
    1af4:	c9 2e       	mov	r12, r25
    1af6:	e1 2c       	mov	r14, r1
    1af8:	00 e0       	ldi	r16, 0x00	; 0
    1afa:	2e e5       	ldi	r18, 0x5E	; 94
    1afc:	40 e5       	ldi	r20, 0x50	; 80
    1afe:	67 e7       	ldi	r22, 0x77	; 119
    1b00:	89 e3       	ldi	r24, 0x39	; 57
    1b02:	8e df       	rcall	.-228    	; 0x1a20 <sendSQDisplayCommand>
    1b04:	c8 2f       	mov	r28, r24
    1b06:	81 11       	cpse	r24, r1
    1b08:	06 c0       	rjmp	.+12     	; 0x1b16 <displaySQCardError+0x2c>
		_delay_ms(2000);

		return true;
	}
	return false;
}
    1b0a:	8c 2f       	mov	r24, r28
    1b0c:	cf 91       	pop	r28
    1b0e:	0f 91       	pop	r16
    1b10:	ef 90       	pop	r14
    1b12:	cf 90       	pop	r12
    1b14:	08 95       	ret
    1b16:	2f ef       	ldi	r18, 0xFF	; 255
    1b18:	37 ea       	ldi	r19, 0xA7	; 167
    1b1a:	81 e6       	ldi	r24, 0x61	; 97
    1b1c:	21 50       	subi	r18, 0x01	; 1
    1b1e:	30 40       	sbci	r19, 0x00	; 0
    1b20:	80 40       	sbci	r24, 0x00	; 0
    1b22:	e1 f7       	brne	.-8      	; 0x1b1c <displaySQCardError+0x32>
    1b24:	00 c0       	rjmp	.+0      	; 0x1b26 <displaySQCardError+0x3c>
    1b26:	00 00       	nop
bool displaySQCardError(void)
{
	if( sendSQDisplayCommand(LED_C,LED_A,LED_r,LED_d,LED_BLANK,LED_BLANK,4) )
	{
		_delay_ms(2000);
		if( sendSQDisplayCommand(LED_E, LED_r,LED_r,LED_BLANK,LED_BLANK,LED_BLANK,3) )
    1b28:	83 e0       	ldi	r24, 0x03	; 3
    1b2a:	c8 2e       	mov	r12, r24
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	40 e5       	ldi	r20, 0x50	; 80
    1b30:	60 e5       	ldi	r22, 0x50	; 80
    1b32:	89 e7       	ldi	r24, 0x79	; 121
    1b34:	75 df       	rcall	.-278    	; 0x1a20 <sendSQDisplayCommand>
    1b36:	88 23       	and	r24, r24
    1b38:	41 f3       	breq	.-48     	; 0x1b0a <displaySQCardError+0x20>
    1b3a:	9f ef       	ldi	r25, 0xFF	; 255
    1b3c:	27 ea       	ldi	r18, 0xA7	; 167
    1b3e:	31 e6       	ldi	r19, 0x61	; 97
    1b40:	91 50       	subi	r25, 0x01	; 1
    1b42:	20 40       	sbci	r18, 0x00	; 0
    1b44:	30 40       	sbci	r19, 0x00	; 0
    1b46:	e1 f7       	brne	.-8      	; 0x1b40 <displaySQCardError+0x56>
    1b48:	00 c0       	rjmp	.+0      	; 0x1b4a <displaySQCardError+0x60>
    1b4a:	00 00       	nop
    1b4c:	c8 2f       	mov	r28, r24
		_delay_ms(2000);

		return true;
	}
	return false;
}
    1b4e:	8c 2f       	mov	r24, r28
    1b50:	cf 91       	pop	r28
    1b52:	0f 91       	pop	r16
    1b54:	ef 90       	pop	r14
    1b56:	cf 90       	pop	r12
    1b58:	08 95       	ret

00001b5a <displayMsg>:
   This function will be used to send text to the ACA 6 position 7 segment display. 
   Led1 to led6 are limited to values defined in "display.h"
   @param msg short parameter of the message.
*/
void displayMsg(u8 msg) 
{
    1b5a:	cf 92       	push	r12
    1b5c:	ef 92       	push	r14
    1b5e:	0f 93       	push	r16
	if (msg == CARD_ERR_MSG)
    1b60:	81 30       	cpi	r24, 0x01	; 1
    1b62:	d9 f0       	breq	.+54     	; 0x1b9a <displayMsg+0x40>
	{
		displaySQCardError();
	}
	else if (msg == SETUP_MSG)		//no communication with the BOW
    1b64:	82 30       	cpi	r24, 0x02	; 2
    1b66:	e9 f0       	breq	.+58     	; 0x1ba2 <displayMsg+0x48>
	{
		sendSQDisplayCommand(LED_n,LED_o,LED_S,LED_U,LED_BLANK,LED_BLANK,5);
	}
	else if (msg == BUSY_MSG)
    1b68:	84 30       	cpi	r24, 0x04	; 4
    1b6a:	29 f1       	breq	.+74     	; 0x1bb6 <displayMsg+0x5c>
	{
		sendSQDisplayCommand(LED_b,LED_U,LED_S,LED_Y,LED_BLANK,LED_BLANK,5);
	}
	else if (msg == SERVICE_MSG)
    1b6c:	83 30       	cpi	r24, 0x03	; 3
    1b6e:	69 f1       	breq	.+90     	; 0x1bca <displayMsg+0x70>
	{
		sendSQDisplayCommand(LED_S,LED_E,LED_r,LED_BLANK,LED_BLANK,LED_BLANK,5);
	}
	else if (msg == BLANK_MSG)
    1b70:	85 30       	cpi	r24, 0x05	; 5
    1b72:	a9 f1       	breq	.+106    	; 0x1bde <displayMsg+0x84>
	{
		sendSQDisplayCommand(LED_BLANK,LED_BLANK,LED_BLANK,LED_BLANK,LED_BLANK,LED_BLANK,0);
	}
	else if (msg == CABLE_MSG)		//PPOS Test message
    1b74:	86 30       	cpi	r24, 0x06	; 6
    1b76:	21 f0       	breq	.+8      	; 0x1b80 <displayMsg+0x26>
	{
		sendSQDisplayCommand(LED_C,LED_A,LED_b,LED_L,LED_E,LED_BLANK,5);
	}

}
    1b78:	0f 91       	pop	r16
    1b7a:	ef 90       	pop	r14
    1b7c:	cf 90       	pop	r12
    1b7e:	08 95       	ret
	{
		sendSQDisplayCommand(LED_BLANK,LED_BLANK,LED_BLANK,LED_BLANK,LED_BLANK,LED_BLANK,0);
	}
	else if (msg == CABLE_MSG)		//PPOS Test message
	{
		sendSQDisplayCommand(LED_C,LED_A,LED_b,LED_L,LED_E,LED_BLANK,5);
    1b80:	85 e0       	ldi	r24, 0x05	; 5
    1b82:	c8 2e       	mov	r12, r24
    1b84:	e1 2c       	mov	r14, r1
    1b86:	09 e7       	ldi	r16, 0x79	; 121
    1b88:	28 e3       	ldi	r18, 0x38	; 56
    1b8a:	4c e7       	ldi	r20, 0x7C	; 124
    1b8c:	67 e7       	ldi	r22, 0x77	; 119
    1b8e:	89 e3       	ldi	r24, 0x39	; 57
    1b90:	47 df       	rcall	.-370    	; 0x1a20 <sendSQDisplayCommand>
	}

}
    1b92:	0f 91       	pop	r16
    1b94:	ef 90       	pop	r14
    1b96:	cf 90       	pop	r12
    1b98:	08 95       	ret
    1b9a:	0f 91       	pop	r16
    1b9c:	ef 90       	pop	r14
    1b9e:	cf 90       	pop	r12
*/
void displayMsg(u8 msg) 
{
	if (msg == CARD_ERR_MSG)
	{
		displaySQCardError();
    1ba0:	a4 cf       	rjmp	.-184    	; 0x1aea <displaySQCardError>
	}
	else if (msg == SETUP_MSG)		//no communication with the BOW
	{
		sendSQDisplayCommand(LED_n,LED_o,LED_S,LED_U,LED_BLANK,LED_BLANK,5);
    1ba2:	35 e0       	ldi	r19, 0x05	; 5
    1ba4:	c3 2e       	mov	r12, r19
    1ba6:	e1 2c       	mov	r14, r1
    1ba8:	00 e0       	ldi	r16, 0x00	; 0
    1baa:	2e e3       	ldi	r18, 0x3E	; 62
    1bac:	4d e6       	ldi	r20, 0x6D	; 109
    1bae:	6c e5       	ldi	r22, 0x5C	; 92
    1bb0:	84 e5       	ldi	r24, 0x54	; 84
    1bb2:	36 df       	rcall	.-404    	; 0x1a20 <sendSQDisplayCommand>
    1bb4:	e1 cf       	rjmp	.-62     	; 0x1b78 <displayMsg+0x1e>
	}
	else if (msg == BUSY_MSG)
	{
		sendSQDisplayCommand(LED_b,LED_U,LED_S,LED_Y,LED_BLANK,LED_BLANK,5);
    1bb6:	25 e0       	ldi	r18, 0x05	; 5
    1bb8:	c2 2e       	mov	r12, r18
    1bba:	e1 2c       	mov	r14, r1
    1bbc:	00 e0       	ldi	r16, 0x00	; 0
    1bbe:	2e e6       	ldi	r18, 0x6E	; 110
    1bc0:	4d e6       	ldi	r20, 0x6D	; 109
    1bc2:	6e e3       	ldi	r22, 0x3E	; 62
    1bc4:	8c e7       	ldi	r24, 0x7C	; 124
    1bc6:	2c df       	rcall	.-424    	; 0x1a20 <sendSQDisplayCommand>
    1bc8:	d7 cf       	rjmp	.-82     	; 0x1b78 <displayMsg+0x1e>
	}
	else if (msg == SERVICE_MSG)
	{
		sendSQDisplayCommand(LED_S,LED_E,LED_r,LED_BLANK,LED_BLANK,LED_BLANK,5);
    1bca:	95 e0       	ldi	r25, 0x05	; 5
    1bcc:	c9 2e       	mov	r12, r25
    1bce:	e1 2c       	mov	r14, r1
    1bd0:	00 e0       	ldi	r16, 0x00	; 0
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	40 e5       	ldi	r20, 0x50	; 80
    1bd6:	69 e7       	ldi	r22, 0x79	; 121
    1bd8:	8d e6       	ldi	r24, 0x6D	; 109
    1bda:	22 df       	rcall	.-444    	; 0x1a20 <sendSQDisplayCommand>
    1bdc:	cd cf       	rjmp	.-102    	; 0x1b78 <displayMsg+0x1e>
	}
	else if (msg == BLANK_MSG)
	{
		sendSQDisplayCommand(LED_BLANK,LED_BLANK,LED_BLANK,LED_BLANK,LED_BLANK,LED_BLANK,0);
    1bde:	c1 2c       	mov	r12, r1
    1be0:	e1 2c       	mov	r14, r1
    1be2:	00 e0       	ldi	r16, 0x00	; 0
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	40 e0       	ldi	r20, 0x00	; 0
    1be8:	60 e0       	ldi	r22, 0x00	; 0
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	19 df       	rcall	.-462    	; 0x1a20 <sendSQDisplayCommand>
    1bee:	c4 cf       	rjmp	.-120    	; 0x1b78 <displayMsg+0x1e>

00001bf0 <getSQSetupData>:
		{
			
		}
	}
	return false;
}
    1bf0:	1f 93       	push	r17
    1bf2:	cf 93       	push	r28
    1bf4:	df 93       	push	r29
    1bf6:	cd b7       	in	r28, 0x3d	; 61
    1bf8:	de b7       	in	r29, 0x3e	; 62
    1bfa:	ec 97       	sbiw	r28, 0x3c	; 60
    1bfc:	0f b6       	in	r0, 0x3f	; 63
    1bfe:	f8 94       	cli
    1c00:	de bf       	out	0x3e, r29	; 62
    1c02:	0f be       	out	0x3f, r0	; 63
    1c04:	cd bf       	out	0x3d, r28	; 61
    1c06:	ae 01       	movw	r20, r28
    1c08:	4f 5f       	subi	r20, 0xFF	; 255
    1c0a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c0c:	8c e3       	ldi	r24, 0x3C	; 60
    1c0e:	fa 01       	movw	r30, r20
    1c10:	11 92       	st	Z+, r1
    1c12:	8a 95       	dec	r24
    1c14:	e9 f7       	brne	.-6      	; 0x1c10 <getSQSetupData+0x20>
    1c16:	80 91 f2 0a 	lds	r24, 0x0AF2	; 0x800af2 <deviceStatus>
    1c1a:	82 32       	cpi	r24, 0x22	; 34
    1c1c:	09 f4       	brne	.+2      	; 0x1c20 <getSQSetupData+0x30>
    1c1e:	fc c0       	rjmp	.+504    	; 0x1e18 <getSQSetupData+0x228>
    1c20:	89 32       	cpi	r24, 0x29	; 41
    1c22:	09 f4       	brne	.+2      	; 0x1c26 <getSQSetupData+0x36>
    1c24:	97 c0       	rjmp	.+302    	; 0x1d54 <getSQSetupData+0x164>
    1c26:	81 32       	cpi	r24, 0x21	; 33
    1c28:	51 f0       	breq	.+20     	; 0x1c3e <getSQSetupData+0x4e>
    1c2a:	ec 96       	adiw	r28, 0x3c	; 60
    1c2c:	0f b6       	in	r0, 0x3f	; 63
    1c2e:	f8 94       	cli
    1c30:	de bf       	out	0x3e, r29	; 62
    1c32:	0f be       	out	0x3f, r0	; 63
    1c34:	cd bf       	out	0x3d, r28	; 61
    1c36:	df 91       	pop	r29
    1c38:	cf 91       	pop	r28
    1c3a:	1f 91       	pop	r17
    1c3c:	08 95       	ret
    1c3e:	65 e1       	ldi	r22, 0x15	; 21
    1c40:	84 e2       	ldi	r24, 0x24	; 36
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	0e 94 16 20 	call	0x402c	; 0x402c <halGetEeprom>
    1c48:	1a 85       	ldd	r17, Y+10	; 0x0a
    1c4a:	61 2f       	mov	r22, r17
    1c4c:	70 e0       	ldi	r23, 0x00	; 0
    1c4e:	76 2f       	mov	r23, r22
    1c50:	66 27       	eor	r22, r22
    1c52:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c54:	68 0f       	add	r22, r24
    1c56:	71 1d       	adc	r23, r1
    1c58:	07 2e       	mov	r0, r23
    1c5a:	00 0c       	add	r0, r0
    1c5c:	88 0b       	sbc	r24, r24
    1c5e:	99 0b       	sbc	r25, r25
    1c60:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <__floatsisf>
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	48 ec       	ldi	r20, 0xC8	; 200
    1c6a:	52 e4       	ldi	r21, 0x42	; 66
    1c6c:	0e 94 cd 2d 	call	0x5b9a	; 0x5b9a <__divsf3>
    1c70:	60 93 17 0b 	sts	0x0B17, r22	; 0x800b17 <vendPrice>
    1c74:	70 93 18 0b 	sts	0x0B18, r23	; 0x800b18 <vendPrice+0x1>
    1c78:	80 93 19 0b 	sts	0x0B19, r24	; 0x800b19 <vendPrice+0x2>
    1c7c:	90 93 1a 0b 	sts	0x0B1A, r25	; 0x800b1a <vendPrice+0x3>
    1c80:	8a 81       	ldd	r24, Y+2	; 0x02
    1c82:	80 93 ce 08 	sts	0x08CE, r24	; 0x8008ce <SQACAToploadProgramming+0x5>
    1c86:	10 92 cf 08 	sts	0x08CF, r1	; 0x8008cf <SQACAToploadProgramming+0x6>
    1c8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8c:	80 93 d0 08 	sts	0x08D0, r24	; 0x8008d0 <SQACAToploadProgramming+0x7>
    1c90:	10 92 d1 08 	sts	0x08D1, r1	; 0x8008d1 <SQACAToploadProgramming+0x8>
    1c94:	8e 81       	ldd	r24, Y+6	; 0x06
    1c96:	80 93 d2 08 	sts	0x08D2, r24	; 0x8008d2 <SQACAToploadProgramming+0x9>
    1c9a:	10 92 d3 08 	sts	0x08D3, r1	; 0x8008d3 <SQACAToploadProgramming+0xa>
    1c9e:	88 85       	ldd	r24, Y+8	; 0x08
    1ca0:	80 93 d4 08 	sts	0x08D4, r24	; 0x8008d4 <SQACAToploadProgramming+0xb>
    1ca4:	10 92 d5 08 	sts	0x08D5, r1	; 0x8008d5 <SQACAToploadProgramming+0xc>
    1ca8:	10 93 d6 08 	sts	0x08D6, r17	; 0x8008d6 <SQACAToploadProgramming+0xd>
    1cac:	10 92 d7 08 	sts	0x08D7, r1	; 0x8008d7 <SQACAToploadProgramming+0xe>
    1cb0:	8c 85       	ldd	r24, Y+12	; 0x0c
    1cb2:	80 93 d8 08 	sts	0x08D8, r24	; 0x8008d8 <SQACAToploadProgramming+0xf>
    1cb6:	10 92 d9 08 	sts	0x08D9, r1	; 0x8008d9 <SQACAToploadProgramming+0x10>
    1cba:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cbc:	80 93 da 08 	sts	0x08DA, r24	; 0x8008da <SQACAToploadProgramming+0x11>
    1cc0:	10 92 db 08 	sts	0x08DB, r1	; 0x8008db <SQACAToploadProgramming+0x12>
    1cc4:	88 89       	ldd	r24, Y+16	; 0x10
    1cc6:	80 93 dc 08 	sts	0x08DC, r24	; 0x8008dc <SQACAToploadProgramming+0x13>
    1cca:	10 92 dd 08 	sts	0x08DD, r1	; 0x8008dd <SQACAToploadProgramming+0x14>
    1cce:	8a 89       	ldd	r24, Y+18	; 0x12
    1cd0:	80 93 de 08 	sts	0x08DE, r24	; 0x8008de <SQACAToploadProgramming+0x15>
    1cd4:	10 92 df 08 	sts	0x08DF, r1	; 0x8008df <SQACAToploadProgramming+0x16>
    1cd8:	8c 89       	ldd	r24, Y+20	; 0x14
    1cda:	80 93 e0 08 	sts	0x08E0, r24	; 0x8008e0 <SQACAToploadProgramming+0x17>
    1cde:	10 92 e1 08 	sts	0x08E1, r1	; 0x8008e1 <SQACAToploadProgramming+0x18>
    1ce2:	82 e3       	ldi	r24, 0x32	; 50
    1ce4:	80 93 e2 08 	sts	0x08E2, r24	; 0x8008e2 <SQACAToploadProgramming+0x19>
    1ce8:	10 92 e3 08 	sts	0x08E3, r1	; 0x8008e3 <SQACAToploadProgramming+0x1a>
    1cec:	10 92 e4 08 	sts	0x08E4, r1	; 0x8008e4 <SQACAToploadProgramming+0x1b>
    1cf0:	10 92 e5 08 	sts	0x08E5, r1	; 0x8008e5 <SQACAToploadProgramming+0x1c>
    1cf4:	10 92 e6 08 	sts	0x08E6, r1	; 0x8008e6 <SQACAToploadProgramming+0x1d>
    1cf8:	10 92 e7 08 	sts	0x08E7, r1	; 0x8008e7 <SQACAToploadProgramming+0x1e>
    1cfc:	10 92 e8 08 	sts	0x08E8, r1	; 0x8008e8 <SQACAToploadProgramming+0x1f>
    1d00:	10 92 e9 08 	sts	0x08E9, r1	; 0x8008e9 <SQACAToploadProgramming+0x20>
    1d04:	9a e0       	ldi	r25, 0x0A	; 10
    1d06:	90 93 ea 08 	sts	0x08EA, r25	; 0x8008ea <SQACAToploadProgramming+0x21>
    1d0a:	84 e0       	ldi	r24, 0x04	; 4
    1d0c:	80 93 eb 08 	sts	0x08EB, r24	; 0x8008eb <SQACAToploadProgramming+0x22>
    1d10:	10 92 ec 08 	sts	0x08EC, r1	; 0x8008ec <SQACAToploadProgramming+0x23>
    1d14:	27 e0       	ldi	r18, 0x07	; 7
    1d16:	20 93 ed 08 	sts	0x08ED, r18	; 0x8008ed <SQACAToploadProgramming+0x24>
    1d1a:	90 93 ee 08 	sts	0x08EE, r25	; 0x8008ee <SQACAToploadProgramming+0x25>
    1d1e:	80 93 f0 08 	sts	0x08F0, r24	; 0x8008f0 <SQACAToploadProgramming+0x27>
    1d22:	10 92 ef 08 	sts	0x08EF, r1	; 0x8008ef <SQACAToploadProgramming+0x26>
    1d26:	26 e0       	ldi	r18, 0x06	; 6
    1d28:	20 93 f1 08 	sts	0x08F1, r18	; 0x8008f1 <SQACAToploadProgramming+0x28>
    1d2c:	90 93 f2 08 	sts	0x08F2, r25	; 0x8008f2 <SQACAToploadProgramming+0x29>
    1d30:	80 93 f3 08 	sts	0x08F3, r24	; 0x8008f3 <SQACAToploadProgramming+0x2a>
    1d34:	10 92 f4 08 	sts	0x08F4, r1	; 0x8008f4 <SQACAToploadProgramming+0x2b>
    1d38:	85 e0       	ldi	r24, 0x05	; 5
    1d3a:	80 93 f5 08 	sts	0x08F5, r24	; 0x8008f5 <SQACAToploadProgramming+0x2c>
    1d3e:	80 93 f6 08 	sts	0x08F6, r24	; 0x8008f6 <SQACAToploadProgramming+0x2d>
    1d42:	10 92 f7 08 	sts	0x08F7, r1	; 0x8008f7 <SQACAToploadProgramming+0x2e>
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	80 93 f8 08 	sts	0x08F8, r24	; 0x8008f8 <SQACAToploadProgramming+0x2f>
    1d4c:	8d e1       	ldi	r24, 0x1D	; 29
    1d4e:	80 93 f9 08 	sts	0x08F9, r24	; 0x8008f9 <SQACAToploadProgramming+0x30>
    1d52:	6b cf       	rjmp	.-298    	; 0x1c2a <getSQSetupData+0x3a>
    1d54:	61 e1       	ldi	r22, 0x11	; 17
    1d56:	84 e2       	ldi	r24, 0x24	; 36
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	0e 94 16 20 	call	0x402c	; 0x402c <halGetEeprom>
    1d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d60:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <SQACADryerProgramming+0x5>
    1d64:	10 92 0b 0a 	sts	0x0A0B, r1	; 0x800a0b <SQACADryerProgramming+0x6>
    1d68:	8c 81       	ldd	r24, Y+4	; 0x04
    1d6a:	80 93 0c 0a 	sts	0x0A0C, r24	; 0x800a0c <SQACADryerProgramming+0x7>
    1d6e:	10 92 0d 0a 	sts	0x0A0D, r1	; 0x800a0d <SQACADryerProgramming+0x8>
    1d72:	8e 81       	ldd	r24, Y+6	; 0x06
    1d74:	80 93 0e 0a 	sts	0x0A0E, r24	; 0x800a0e <SQACADryerProgramming+0x9>
    1d78:	10 92 0f 0a 	sts	0x0A0F, r1	; 0x800a0f <SQACADryerProgramming+0xa>
    1d7c:	88 85       	ldd	r24, Y+8	; 0x08
    1d7e:	80 93 10 0a 	sts	0x0A10, r24	; 0x800a10 <SQACADryerProgramming+0xb>
    1d82:	10 92 11 0a 	sts	0x0A11, r1	; 0x800a11 <SQACADryerProgramming+0xc>
    1d86:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d88:	80 93 12 0a 	sts	0x0A12, r24	; 0x800a12 <SQACADryerProgramming+0xd>
    1d8c:	10 92 13 0a 	sts	0x0A13, r1	; 0x800a13 <SQACADryerProgramming+0xe>
    1d90:	88 89       	ldd	r24, Y+16	; 0x10
    1d92:	80 93 14 0a 	sts	0x0A14, r24	; 0x800a14 <SQACADryerProgramming+0xf>
    1d96:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d98:	80 93 15 0a 	sts	0x0A15, r24	; 0x800a15 <SQACADryerProgramming+0x10>
    1d9c:	10 92 16 0a 	sts	0x0A16, r1	; 0x800a16 <SQACADryerProgramming+0x11>
    1da0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1da2:	80 93 17 0a 	sts	0x0A17, r24	; 0x800a17 <SQACADryerProgramming+0x12>
    1da6:	86 e2       	ldi	r24, 0x26	; 38
    1da8:	80 93 18 0a 	sts	0x0A18, r24	; 0x800a18 <SQACADryerProgramming+0x13>
    1dac:	95 e0       	ldi	r25, 0x05	; 5
    1dae:	90 93 19 0a 	sts	0x0A19, r25	; 0x800a19 <SQACADryerProgramming+0x14>
    1db2:	80 93 1a 0a 	sts	0x0A1A, r24	; 0x800a1a <SQACADryerProgramming+0x15>
    1db6:	86 e1       	ldi	r24, 0x16	; 22
    1db8:	80 93 1b 0a 	sts	0x0A1B, r24	; 0x800a1b <SQACADryerProgramming+0x16>
    1dbc:	8e e1       	ldi	r24, 0x1E	; 30
    1dbe:	80 93 1c 0a 	sts	0x0A1C, r24	; 0x800a1c <SQACADryerProgramming+0x17>
    1dc2:	8d e2       	ldi	r24, 0x2D	; 45
    1dc4:	80 93 1d 0a 	sts	0x0A1D, r24	; 0x800a1d <SQACADryerProgramming+0x18>
    1dc8:	10 92 1e 0a 	sts	0x0A1E, r1	; 0x800a1e <SQACADryerProgramming+0x19>
    1dcc:	80 93 1f 0a 	sts	0x0A1F, r24	; 0x800a1f <SQACADryerProgramming+0x1a>
    1dd0:	10 92 20 0a 	sts	0x0A20, r1	; 0x800a20 <SQACADryerProgramming+0x1b>
    1dd4:	83 e0       	ldi	r24, 0x03	; 3
    1dd6:	80 93 21 0a 	sts	0x0A21, r24	; 0x800a21 <SQACADryerProgramming+0x1c>
    1dda:	80 93 22 0a 	sts	0x0A22, r24	; 0x800a22 <SQACADryerProgramming+0x1d>
    1dde:	80 93 23 0a 	sts	0x0A23, r24	; 0x800a23 <SQACADryerProgramming+0x1e>
    1de2:	80 93 24 0a 	sts	0x0A24, r24	; 0x800a24 <SQACADryerProgramming+0x1f>
    1de6:	80 ea       	ldi	r24, 0xA0	; 160
    1de8:	80 93 25 0a 	sts	0x0A25, r24	; 0x800a25 <SQACADryerProgramming+0x20>
    1dec:	8b e9       	ldi	r24, 0x9B	; 155
    1dee:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <SQACADryerProgramming+0x21>
    1df2:	83 e7       	ldi	r24, 0x73	; 115
    1df4:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <SQACADryerProgramming+0x23>
    1df8:	84 e0       	ldi	r24, 0x04	; 4
    1dfa:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <SQACADryerProgramming+0x24>
    1dfe:	8d e1       	ldi	r24, 0x1D	; 29
    1e00:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <SQACADryerProgramming+0x25>
    1e04:	10 92 2b 0a 	sts	0x0A2B, r1	; 0x800a2b <SQACADryerProgramming+0x26>
    1e08:	10 92 2c 0a 	sts	0x0A2C, r1	; 0x800a2c <SQACADryerProgramming+0x27>
    1e0c:	10 92 2d 0a 	sts	0x0A2D, r1	; 0x800a2d <SQACADryerProgramming+0x28>
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	80 93 2e 0a 	sts	0x0A2E, r24	; 0x800a2e <SQACADryerProgramming+0x29>
    1e16:	09 cf       	rjmp	.-494    	; 0x1c2a <getSQSetupData+0x3a>
    1e18:	60 e1       	ldi	r22, 0x10	; 16
    1e1a:	84 e2       	ldi	r24, 0x24	; 36
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	0e 94 16 20 	call	0x402c	; 0x402c <halGetEeprom>
    1e22:	1a 85       	ldd	r17, Y+10	; 0x0a
    1e24:	61 2f       	mov	r22, r17
    1e26:	70 e0       	ldi	r23, 0x00	; 0
    1e28:	76 2f       	mov	r23, r22
    1e2a:	66 27       	eor	r22, r22
    1e2c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e2e:	68 0f       	add	r22, r24
    1e30:	71 1d       	adc	r23, r1
    1e32:	07 2e       	mov	r0, r23
    1e34:	00 0c       	add	r0, r0
    1e36:	88 0b       	sbc	r24, r24
    1e38:	99 0b       	sbc	r25, r25
    1e3a:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <__floatsisf>
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	48 ec       	ldi	r20, 0xC8	; 200
    1e44:	52 e4       	ldi	r21, 0x42	; 66
    1e46:	0e 94 cd 2d 	call	0x5b9a	; 0x5b9a <__divsf3>
    1e4a:	60 93 17 0b 	sts	0x0B17, r22	; 0x800b17 <vendPrice>
    1e4e:	70 93 18 0b 	sts	0x0B18, r23	; 0x800b18 <vendPrice+0x1>
    1e52:	80 93 19 0b 	sts	0x0B19, r24	; 0x800b19 <vendPrice+0x2>
    1e56:	90 93 1a 0b 	sts	0x0B1A, r25	; 0x800b1a <vendPrice+0x3>
    1e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5c:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <SQACAFrontloadProgramming+0x5>
    1e60:	10 92 a8 08 	sts	0x08A8, r1	; 0x8008a8 <SQACAFrontloadProgramming+0x6>
    1e64:	8c 81       	ldd	r24, Y+4	; 0x04
    1e66:	80 93 a9 08 	sts	0x08A9, r24	; 0x8008a9 <SQACAFrontloadProgramming+0x7>
    1e6a:	10 92 aa 08 	sts	0x08AA, r1	; 0x8008aa <SQACAFrontloadProgramming+0x8>
    1e6e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e70:	80 93 ab 08 	sts	0x08AB, r24	; 0x8008ab <SQACAFrontloadProgramming+0x9>
    1e74:	10 92 ac 08 	sts	0x08AC, r1	; 0x8008ac <SQACAFrontloadProgramming+0xa>
    1e78:	88 85       	ldd	r24, Y+8	; 0x08
    1e7a:	80 93 ad 08 	sts	0x08AD, r24	; 0x8008ad <SQACAFrontloadProgramming+0xb>
    1e7e:	10 92 ae 08 	sts	0x08AE, r1	; 0x8008ae <SQACAFrontloadProgramming+0xc>
    1e82:	10 93 af 08 	sts	0x08AF, r17	; 0x8008af <SQACAFrontloadProgramming+0xd>
    1e86:	10 92 b0 08 	sts	0x08B0, r1	; 0x8008b0 <SQACAFrontloadProgramming+0xe>
    1e8a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e8c:	80 93 b1 08 	sts	0x08B1, r24	; 0x8008b1 <SQACAFrontloadProgramming+0xf>
    1e90:	10 92 b2 08 	sts	0x08B2, r1	; 0x8008b2 <SQACAFrontloadProgramming+0x10>
    1e94:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e96:	80 93 b3 08 	sts	0x08B3, r24	; 0x8008b3 <SQACAFrontloadProgramming+0x11>
    1e9a:	10 92 b4 08 	sts	0x08B4, r1	; 0x8008b4 <SQACAFrontloadProgramming+0x12>
    1e9e:	88 89       	ldd	r24, Y+16	; 0x10
    1ea0:	80 93 b5 08 	sts	0x08B5, r24	; 0x8008b5 <SQACAFrontloadProgramming+0x13>
    1ea4:	10 92 b6 08 	sts	0x08B6, r1	; 0x8008b6 <SQACAFrontloadProgramming+0x14>
    1ea8:	8a 89       	ldd	r24, Y+18	; 0x12
    1eaa:	80 93 b7 08 	sts	0x08B7, r24	; 0x8008b7 <SQACAFrontloadProgramming+0x15>
    1eae:	10 92 b8 08 	sts	0x08B8, r1	; 0x8008b8 <SQACAFrontloadProgramming+0x16>
    1eb2:	8c 89       	ldd	r24, Y+20	; 0x14
    1eb4:	80 93 b9 08 	sts	0x08B9, r24	; 0x8008b9 <SQACAFrontloadProgramming+0x17>
    1eb8:	10 92 ba 08 	sts	0x08BA, r1	; 0x8008ba <SQACAFrontloadProgramming+0x18>
    1ebc:	82 e3       	ldi	r24, 0x32	; 50
    1ebe:	80 93 bb 08 	sts	0x08BB, r24	; 0x8008bb <SQACAFrontloadProgramming+0x19>
    1ec2:	10 92 bc 08 	sts	0x08BC, r1	; 0x8008bc <SQACAFrontloadProgramming+0x1a>
    1ec6:	82 e0       	ldi	r24, 0x02	; 2
    1ec8:	80 93 bd 08 	sts	0x08BD, r24	; 0x8008bd <SQACAFrontloadProgramming+0x1b>
    1ecc:	93 e0       	ldi	r25, 0x03	; 3
    1ece:	90 93 be 08 	sts	0x08BE, r25	; 0x8008be <SQACAFrontloadProgramming+0x1c>
    1ed2:	80 93 bf 08 	sts	0x08BF, r24	; 0x8008bf <SQACAFrontloadProgramming+0x1d>
    1ed6:	91 e0       	ldi	r25, 0x01	; 1
    1ed8:	90 93 c0 08 	sts	0x08C0, r25	; 0x8008c0 <SQACAFrontloadProgramming+0x1e>
    1edc:	94 e0       	ldi	r25, 0x04	; 4
    1ede:	90 93 c1 08 	sts	0x08C1, r25	; 0x8008c1 <SQACAFrontloadProgramming+0x1f>
    1ee2:	80 93 c2 08 	sts	0x08C2, r24	; 0x8008c2 <SQACAFrontloadProgramming+0x20>
    1ee6:	10 92 c4 08 	sts	0x08C4, r1	; 0x8008c4 <SQACAFrontloadProgramming+0x22>
    1eea:	8d e1       	ldi	r24, 0x1D	; 29
    1eec:	80 93 c5 08 	sts	0x08C5, r24	; 0x8008c5 <SQACAFrontloadProgramming+0x23>
    1ef0:	9c ce       	rjmp	.-712    	; 0x1c2a <getSQSetupData+0x3a>

00001ef2 <sendSQDataPacket>:
    1ef2:	af 92       	push	r10
    1ef4:	bf 92       	push	r11
    1ef6:	cf 92       	push	r12
    1ef8:	df 92       	push	r13
    1efa:	ef 92       	push	r14
    1efc:	ff 92       	push	r15
    1efe:	0f 93       	push	r16
    1f00:	1f 93       	push	r17
    1f02:	cf 93       	push	r28
    1f04:	df 93       	push	r29
    1f06:	5c 01       	movw	r10, r24
    1f08:	08 e0       	ldi	r16, 0x08	; 8
    1f0a:	0e 94 76 28 	call	0x50ec	; 0x50ec <init_rx_buf>
    1f0e:	f5 01       	movw	r30, r10
    1f10:	10 81       	ld	r17, Z
    1f12:	82 e0       	ldi	r24, 0x02	; 2
    1f14:	0e 94 93 28 	call	0x5126	; 0x5126 <serial_putchar>
    1f18:	1f 3f       	cpi	r17, 0xFF	; 255
    1f1a:	09 f4       	brne	.+2      	; 0x1f1e <sendSQDataPacket+0x2c>
    1f1c:	4a c0       	rjmp	.+148    	; 0x1fb2 <sendSQDataPacket+0xc0>
    1f1e:	e5 01       	movw	r28, r10
    1f20:	c1 2e       	mov	r12, r17
    1f22:	d1 2c       	mov	r13, r1
    1f24:	ff ef       	ldi	r31, 0xFF	; 255
    1f26:	cf 1a       	sub	r12, r31
    1f28:	df 0a       	sbc	r13, r31
    1f2a:	ca 0c       	add	r12, r10
    1f2c:	db 1c       	adc	r13, r11
    1f2e:	12 e0       	ldi	r17, 0x02	; 2
    1f30:	7e 01       	movw	r14, r28
    1f32:	89 91       	ld	r24, Y+
    1f34:	0e 94 93 28 	call	0x5126	; 0x5126 <serial_putchar>
    1f38:	f7 01       	movw	r30, r14
    1f3a:	90 81       	ld	r25, Z
    1f3c:	19 27       	eor	r17, r25
    1f3e:	cc 15       	cp	r28, r12
    1f40:	dd 05       	cpc	r29, r13
    1f42:	b1 f7       	brne	.-20     	; 0x1f30 <sendSQDataPacket+0x3e>
    1f44:	81 2f       	mov	r24, r17
    1f46:	0e 94 93 28 	call	0x5126	; 0x5126 <serial_putchar>
    1f4a:	10 92 16 0b 	sts	0x0B16, r1	; 0x800b16 <ucTimerCount>
    1f4e:	78 94       	sei
    1f50:	b0 d6       	rcall	.+3424   	; 0x2cb2 <StartTimerZero>
    1f52:	08 c0       	rjmp	.+16     	; 0x1f64 <sendSQDataPacket+0x72>
    1f54:	0e 94 d5 28 	call	0x51aa	; 0x51aa <rx_buf_count>
    1f58:	81 11       	cpse	r24, r1
    1f5a:	08 c0       	rjmp	.+16     	; 0x1f6c <sendSQDataPacket+0x7a>
    1f5c:	0e 94 cc 22 	call	0x4598	; 0x4598 <mac_event_pending>
    1f60:	81 11       	cpse	r24, r1
    1f62:	24 c0       	rjmp	.+72     	; 0x1fac <sendSQDataPacket+0xba>
    1f64:	90 91 16 0b 	lds	r25, 0x0B16	; 0x800b16 <ucTimerCount>
    1f68:	96 34       	cpi	r25, 0x46	; 70
    1f6a:	a0 f3       	brcs	.-24     	; 0x1f54 <sendSQDataPacket+0x62>
    1f6c:	a0 d6       	rcall	.+3392   	; 0x2cae <StopTimerZero>
    1f6e:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <ucTimerCount>
    1f72:	86 34       	cpi	r24, 0x46	; 70
    1f74:	30 f4       	brcc	.+12     	; 0x1f82 <sendSQDataPacket+0x90>
    1f76:	0e 94 e1 28 	call	0x51c2	; 0x51c2 <serial_getchar>
    1f7a:	86 30       	cpi	r24, 0x06	; 6
    1f7c:	e1 f0       	breq	.+56     	; 0x1fb6 <sendSQDataPacket+0xc4>
    1f7e:	89 30       	cpi	r24, 0x09	; 9
    1f80:	49 f0       	breq	.+18     	; 0x1f94 <sendSQDataPacket+0xa2>
    1f82:	8f ed       	ldi	r24, 0xDF	; 223
    1f84:	9e e2       	ldi	r25, 0x2E	; 46
    1f86:	01 97       	sbiw	r24, 0x01	; 1
    1f88:	f1 f7       	brne	.-4      	; 0x1f86 <sendSQDataPacket+0x94>
    1f8a:	00 c0       	rjmp	.+0      	; 0x1f8c <sendSQDataPacket+0x9a>
    1f8c:	00 00       	nop
    1f8e:	01 50       	subi	r16, 0x01	; 1
    1f90:	09 f0       	breq	.+2      	; 0x1f94 <sendSQDataPacket+0xa2>
    1f92:	bb cf       	rjmp	.-138    	; 0x1f0a <sendSQDataPacket+0x18>
    1f94:	80 e0       	ldi	r24, 0x00	; 0
    1f96:	df 91       	pop	r29
    1f98:	cf 91       	pop	r28
    1f9a:	1f 91       	pop	r17
    1f9c:	0f 91       	pop	r16
    1f9e:	ff 90       	pop	r15
    1fa0:	ef 90       	pop	r14
    1fa2:	df 90       	pop	r13
    1fa4:	cf 90       	pop	r12
    1fa6:	bf 90       	pop	r11
    1fa8:	af 90       	pop	r10
    1faa:	08 95       	ret
    1fac:	0e 94 01 23 	call	0x4602	; 0x4602 <macTask>
    1fb0:	d9 cf       	rjmp	.-78     	; 0x1f64 <sendSQDataPacket+0x72>
    1fb2:	12 e0       	ldi	r17, 0x02	; 2
    1fb4:	c7 cf       	rjmp	.-114    	; 0x1f44 <sendSQDataPacket+0x52>
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	ee cf       	rjmp	.-36     	; 0x1f96 <sendSQDataPacket+0xa4>

00001fba <sendSQACAVendPrice>:
    1fba:	cf 93       	push	r28
    1fbc:	df 93       	push	r29
    1fbe:	cd b7       	in	r28, 0x3d	; 61
    1fc0:	de b7       	in	r29, 0x3e	; 62
    1fc2:	2b 97       	sbiw	r28, 0x0b	; 11
    1fc4:	0f b6       	in	r0, 0x3f	; 63
    1fc6:	f8 94       	cli
    1fc8:	de bf       	out	0x3e, r29	; 62
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	cd bf       	out	0x3d, r28	; 61
    1fce:	ce 01       	movw	r24, r28
    1fd0:	01 96       	adiw	r24, 0x01	; 1
    1fd2:	2b e0       	ldi	r18, 0x0B	; 11
    1fd4:	fc 01       	movw	r30, r24
    1fd6:	11 92       	st	Z+, r1
    1fd8:	2a 95       	dec	r18
    1fda:	e9 f7       	brne	.-6      	; 0x1fd6 <sendSQACAVendPrice+0x1c>
    1fdc:	20 91 f7 0a 	lds	r18, 0x0AF7	; 0x800af7 <SQACAMachineStatus+0x1>
    1fe0:	23 30       	cpi	r18, 0x03	; 3
    1fe2:	51 f0       	breq	.+20     	; 0x1ff8 <sendSQACAVendPrice+0x3e>
    1fe4:	86 df       	rcall	.-244    	; 0x1ef2 <sendSQDataPacket>
    1fe6:	2b 96       	adiw	r28, 0x0b	; 11
    1fe8:	0f b6       	in	r0, 0x3f	; 63
    1fea:	f8 94       	cli
    1fec:	de bf       	out	0x3e, r29	; 62
    1fee:	0f be       	out	0x3f, r0	; 63
    1ff0:	cd bf       	out	0x3d, r28	; 61
    1ff2:	df 91       	pop	r29
    1ff4:	cf 91       	pop	r28
    1ff6:	08 95       	ret
    1ff8:	20 91 f2 0a 	lds	r18, 0x0AF2	; 0x800af2 <deviceStatus>
    1ffc:	22 32       	cpi	r18, 0x22	; 34
    1ffe:	e9 f1       	breq	.+122    	; 0x207a <sendSQACAVendPrice+0xc0>
    2000:	29 32       	cpi	r18, 0x29	; 41
    2002:	f1 f0       	breq	.+60     	; 0x2040 <sendSQACAVendPrice+0x86>
    2004:	21 32       	cpi	r18, 0x21	; 33
    2006:	71 f7       	brne	.-36     	; 0x1fe4 <sendSQACAVendPrice+0x2a>
    2008:	2a e0       	ldi	r18, 0x0A	; 10
    200a:	29 83       	std	Y+1, r18	; 0x01
    200c:	22 e7       	ldi	r18, 0x72	; 114
    200e:	2a 83       	std	Y+2, r18	; 0x02
    2010:	e0 91 f8 0a 	lds	r30, 0x0AF8	; 0x800af8 <SQACAMachineStatus+0x2>
    2014:	4e 2f       	mov	r20, r30
    2016:	50 e0       	ldi	r21, 0x00	; 0
    2018:	fa 01       	movw	r30, r20
    201a:	31 97       	sbiw	r30, 0x01	; 1
    201c:	e9 30       	cpi	r30, 0x09	; 9
    201e:	f1 05       	cpc	r31, r1
    2020:	08 f4       	brcc	.+2      	; 0x2024 <sendSQACAVendPrice+0x6a>
    2022:	43 c0       	rjmp	.+134    	; 0x20aa <sendSQACAVendPrice+0xf0>
    2024:	20 91 f9 0a 	lds	r18, 0x0AF9	; 0x800af9 <SQACAMachineStatus+0x3>
    2028:	21 30       	cpi	r18, 0x01	; 1
    202a:	09 f4       	brne	.+2      	; 0x202e <sendSQACAVendPrice+0x74>
    202c:	d3 c0       	rjmp	.+422    	; 0x21d4 <sendSQACAVendPrice+0x21a>
    202e:	22 30       	cpi	r18, 0x02	; 2
    2030:	c9 f6       	brne	.-78     	; 0x1fe4 <sendSQACAVendPrice+0x2a>
    2032:	20 91 e2 08 	lds	r18, 0x08E2	; 0x8008e2 <SQACAToploadProgramming+0x19>
    2036:	2d 83       	std	Y+5, r18	; 0x05
    2038:	20 91 e3 08 	lds	r18, 0x08E3	; 0x8008e3 <SQACAToploadProgramming+0x1a>
    203c:	2e 83       	std	Y+6, r18	; 0x06
    203e:	d2 cf       	rjmp	.-92     	; 0x1fe4 <sendSQACAVendPrice+0x2a>
    2040:	2a e0       	ldi	r18, 0x0A	; 10
    2042:	29 83       	std	Y+1, r18	; 0x01
    2044:	22 e7       	ldi	r18, 0x72	; 114
    2046:	2a 83       	std	Y+2, r18	; 0x02
    2048:	20 91 f8 0a 	lds	r18, 0x0AF8	; 0x800af8 <SQACAMachineStatus+0x2>
    204c:	24 30       	cpi	r18, 0x04	; 4
    204e:	08 f0       	brcs	.+2      	; 0x2052 <sendSQACAVendPrice+0x98>
    2050:	b5 c0       	rjmp	.+362    	; 0x21bc <sendSQACAVendPrice+0x202>
    2052:	22 30       	cpi	r18, 0x02	; 2
    2054:	70 f5       	brcc	.+92     	; 0x20b2 <sendSQACAVendPrice+0xf8>
    2056:	21 30       	cpi	r18, 0x01	; 1
    2058:	31 f4       	brne	.+12     	; 0x2066 <sendSQACAVendPrice+0xac>
    205a:	20 91 0c 0a 	lds	r18, 0x0A0C	; 0x800a0c <SQACADryerProgramming+0x7>
    205e:	2b 83       	std	Y+3, r18	; 0x03
    2060:	20 91 0d 0a 	lds	r18, 0x0A0D	; 0x800a0d <SQACADryerProgramming+0x8>
    2064:	2c 83       	std	Y+4, r18	; 0x04
    2066:	20 91 15 0a 	lds	r18, 0x0A15	; 0x800a15 <SQACADryerProgramming+0x10>
    206a:	2f 83       	std	Y+7, r18	; 0x07
    206c:	20 91 16 0a 	lds	r18, 0x0A16	; 0x800a16 <SQACADryerProgramming+0x11>
    2070:	28 87       	std	Y+8, r18	; 0x08
    2072:	20 91 17 0a 	lds	r18, 0x0A17	; 0x800a17 <SQACADryerProgramming+0x12>
    2076:	29 87       	std	Y+9, r18	; 0x09
    2078:	b5 cf       	rjmp	.-150    	; 0x1fe4 <sendSQACAVendPrice+0x2a>
    207a:	2a e0       	ldi	r18, 0x0A	; 10
    207c:	29 83       	std	Y+1, r18	; 0x01
    207e:	22 e7       	ldi	r18, 0x72	; 114
    2080:	2a 83       	std	Y+2, r18	; 0x02
    2082:	e0 91 f8 0a 	lds	r30, 0x0AF8	; 0x800af8 <SQACAMachineStatus+0x2>
    2086:	4e 2f       	mov	r20, r30
    2088:	50 e0       	ldi	r21, 0x00	; 0
    208a:	fa 01       	movw	r30, r20
    208c:	31 97       	sbiw	r30, 0x01	; 1
    208e:	e9 30       	cpi	r30, 0x09	; 9
    2090:	f1 05       	cpc	r31, r1
    2092:	38 f0       	brcs	.+14     	; 0x20a2 <sendSQACAVendPrice+0xe8>
    2094:	20 91 bb 08 	lds	r18, 0x08BB	; 0x8008bb <SQACAFrontloadProgramming+0x19>
    2098:	2d 83       	std	Y+5, r18	; 0x05
    209a:	20 91 bc 08 	lds	r18, 0x08BC	; 0x8008bc <SQACAFrontloadProgramming+0x1a>
    209e:	2e 83       	std	Y+6, r18	; 0x06
    20a0:	a1 cf       	rjmp	.-190    	; 0x1fe4 <sendSQACAVendPrice+0x2a>
    20a2:	e8 54       	subi	r30, 0x48	; 72
    20a4:	ff 4f       	sbci	r31, 0xFF	; 255
    20a6:	0c 94 24 2f 	jmp	0x5e48	; 0x5e48 <__tablejump2__>
    20aa:	ef 53       	subi	r30, 0x3F	; 63
    20ac:	ff 4f       	sbci	r31, 0xFF	; 255
    20ae:	0c 94 24 2f 	jmp	0x5e48	; 0x5e48 <__tablejump2__>
    20b2:	20 91 0e 0a 	lds	r18, 0x0A0E	; 0x800a0e <SQACADryerProgramming+0x9>
    20b6:	2b 83       	std	Y+3, r18	; 0x03
    20b8:	20 91 0f 0a 	lds	r18, 0x0A0F	; 0x800a0f <SQACADryerProgramming+0xa>
    20bc:	2c 83       	std	Y+4, r18	; 0x04
    20be:	d3 cf       	rjmp	.-90     	; 0x2066 <sendSQACAVendPrice+0xac>
    20c0:	20 91 dc 08 	lds	r18, 0x08DC	; 0x8008dc <SQACAToploadProgramming+0x13>
    20c4:	2b 83       	std	Y+3, r18	; 0x03
    20c6:	20 91 dd 08 	lds	r18, 0x08DD	; 0x8008dd <SQACAToploadProgramming+0x14>
    20ca:	2c 83       	std	Y+4, r18	; 0x04
    20cc:	ab cf       	rjmp	.-170    	; 0x2024 <sendSQACAVendPrice+0x6a>
    20ce:	20 91 b5 08 	lds	r18, 0x08B5	; 0x8008b5 <SQACAFrontloadProgramming+0x13>
    20d2:	2b 83       	std	Y+3, r18	; 0x03
    20d4:	20 91 b6 08 	lds	r18, 0x08B6	; 0x8008b6 <SQACAFrontloadProgramming+0x14>
    20d8:	2c 83       	std	Y+4, r18	; 0x04
    20da:	dc cf       	rjmp	.-72     	; 0x2094 <sendSQACAVendPrice+0xda>
    20dc:	20 91 da 08 	lds	r18, 0x08DA	; 0x8008da <SQACAToploadProgramming+0x11>
    20e0:	2b 83       	std	Y+3, r18	; 0x03
    20e2:	20 91 db 08 	lds	r18, 0x08DB	; 0x8008db <SQACAToploadProgramming+0x12>
    20e6:	2c 83       	std	Y+4, r18	; 0x04
    20e8:	9d cf       	rjmp	.-198    	; 0x2024 <sendSQACAVendPrice+0x6a>
    20ea:	20 91 d8 08 	lds	r18, 0x08D8	; 0x8008d8 <SQACAToploadProgramming+0xf>
    20ee:	2b 83       	std	Y+3, r18	; 0x03
    20f0:	20 91 d9 08 	lds	r18, 0x08D9	; 0x8008d9 <SQACAToploadProgramming+0x10>
    20f4:	2c 83       	std	Y+4, r18	; 0x04
    20f6:	96 cf       	rjmp	.-212    	; 0x2024 <sendSQACAVendPrice+0x6a>
    20f8:	20 91 d6 08 	lds	r18, 0x08D6	; 0x8008d6 <SQACAToploadProgramming+0xd>
    20fc:	2b 83       	std	Y+3, r18	; 0x03
    20fe:	20 91 d7 08 	lds	r18, 0x08D7	; 0x8008d7 <SQACAToploadProgramming+0xe>
    2102:	2c 83       	std	Y+4, r18	; 0x04
    2104:	8f cf       	rjmp	.-226    	; 0x2024 <sendSQACAVendPrice+0x6a>
    2106:	20 91 d4 08 	lds	r18, 0x08D4	; 0x8008d4 <SQACAToploadProgramming+0xb>
    210a:	2b 83       	std	Y+3, r18	; 0x03
    210c:	20 91 d5 08 	lds	r18, 0x08D5	; 0x8008d5 <SQACAToploadProgramming+0xc>
    2110:	2c 83       	std	Y+4, r18	; 0x04
    2112:	88 cf       	rjmp	.-240    	; 0x2024 <sendSQACAVendPrice+0x6a>
    2114:	20 91 d2 08 	lds	r18, 0x08D2	; 0x8008d2 <SQACAToploadProgramming+0x9>
    2118:	2b 83       	std	Y+3, r18	; 0x03
    211a:	20 91 d3 08 	lds	r18, 0x08D3	; 0x8008d3 <SQACAToploadProgramming+0xa>
    211e:	2c 83       	std	Y+4, r18	; 0x04
    2120:	81 cf       	rjmp	.-254    	; 0x2024 <sendSQACAVendPrice+0x6a>
    2122:	20 91 d0 08 	lds	r18, 0x08D0	; 0x8008d0 <SQACAToploadProgramming+0x7>
    2126:	2b 83       	std	Y+3, r18	; 0x03
    2128:	20 91 d1 08 	lds	r18, 0x08D1	; 0x8008d1 <SQACAToploadProgramming+0x8>
    212c:	2c 83       	std	Y+4, r18	; 0x04
    212e:	7a cf       	rjmp	.-268    	; 0x2024 <sendSQACAVendPrice+0x6a>
    2130:	20 91 ce 08 	lds	r18, 0x08CE	; 0x8008ce <SQACAToploadProgramming+0x5>
    2134:	2b 83       	std	Y+3, r18	; 0x03
    2136:	20 91 cf 08 	lds	r18, 0x08CF	; 0x8008cf <SQACAToploadProgramming+0x6>
    213a:	2c 83       	std	Y+4, r18	; 0x04
    213c:	73 cf       	rjmp	.-282    	; 0x2024 <sendSQACAVendPrice+0x6a>
    213e:	20 91 de 08 	lds	r18, 0x08DE	; 0x8008de <SQACAToploadProgramming+0x15>
    2142:	2b 83       	std	Y+3, r18	; 0x03
    2144:	20 91 df 08 	lds	r18, 0x08DF	; 0x8008df <SQACAToploadProgramming+0x16>
    2148:	2c 83       	std	Y+4, r18	; 0x04
    214a:	6c cf       	rjmp	.-296    	; 0x2024 <sendSQACAVendPrice+0x6a>
    214c:	20 91 b3 08 	lds	r18, 0x08B3	; 0x8008b3 <SQACAFrontloadProgramming+0x11>
    2150:	2b 83       	std	Y+3, r18	; 0x03
    2152:	20 91 b4 08 	lds	r18, 0x08B4	; 0x8008b4 <SQACAFrontloadProgramming+0x12>
    2156:	2c 83       	std	Y+4, r18	; 0x04
    2158:	9d cf       	rjmp	.-198    	; 0x2094 <sendSQACAVendPrice+0xda>
    215a:	20 91 b1 08 	lds	r18, 0x08B1	; 0x8008b1 <SQACAFrontloadProgramming+0xf>
    215e:	2b 83       	std	Y+3, r18	; 0x03
    2160:	20 91 b2 08 	lds	r18, 0x08B2	; 0x8008b2 <SQACAFrontloadProgramming+0x10>
    2164:	2c 83       	std	Y+4, r18	; 0x04
    2166:	96 cf       	rjmp	.-212    	; 0x2094 <sendSQACAVendPrice+0xda>
    2168:	20 91 af 08 	lds	r18, 0x08AF	; 0x8008af <SQACAFrontloadProgramming+0xd>
    216c:	2b 83       	std	Y+3, r18	; 0x03
    216e:	20 91 b0 08 	lds	r18, 0x08B0	; 0x8008b0 <SQACAFrontloadProgramming+0xe>
    2172:	2c 83       	std	Y+4, r18	; 0x04
    2174:	8f cf       	rjmp	.-226    	; 0x2094 <sendSQACAVendPrice+0xda>
    2176:	20 91 ad 08 	lds	r18, 0x08AD	; 0x8008ad <SQACAFrontloadProgramming+0xb>
    217a:	2b 83       	std	Y+3, r18	; 0x03
    217c:	20 91 ae 08 	lds	r18, 0x08AE	; 0x8008ae <SQACAFrontloadProgramming+0xc>
    2180:	2c 83       	std	Y+4, r18	; 0x04
    2182:	88 cf       	rjmp	.-240    	; 0x2094 <sendSQACAVendPrice+0xda>
    2184:	20 91 ab 08 	lds	r18, 0x08AB	; 0x8008ab <SQACAFrontloadProgramming+0x9>
    2188:	2b 83       	std	Y+3, r18	; 0x03
    218a:	20 91 ac 08 	lds	r18, 0x08AC	; 0x8008ac <SQACAFrontloadProgramming+0xa>
    218e:	2c 83       	std	Y+4, r18	; 0x04
    2190:	81 cf       	rjmp	.-254    	; 0x2094 <sendSQACAVendPrice+0xda>
    2192:	20 91 a9 08 	lds	r18, 0x08A9	; 0x8008a9 <SQACAFrontloadProgramming+0x7>
    2196:	2b 83       	std	Y+3, r18	; 0x03
    2198:	20 91 aa 08 	lds	r18, 0x08AA	; 0x8008aa <SQACAFrontloadProgramming+0x8>
    219c:	2c 83       	std	Y+4, r18	; 0x04
    219e:	7a cf       	rjmp	.-268    	; 0x2094 <sendSQACAVendPrice+0xda>
    21a0:	20 91 a7 08 	lds	r18, 0x08A7	; 0x8008a7 <SQACAFrontloadProgramming+0x5>
    21a4:	2b 83       	std	Y+3, r18	; 0x03
    21a6:	20 91 a8 08 	lds	r18, 0x08A8	; 0x8008a8 <SQACAFrontloadProgramming+0x6>
    21aa:	2c 83       	std	Y+4, r18	; 0x04
    21ac:	73 cf       	rjmp	.-282    	; 0x2094 <sendSQACAVendPrice+0xda>
    21ae:	20 91 b7 08 	lds	r18, 0x08B7	; 0x8008b7 <SQACAFrontloadProgramming+0x15>
    21b2:	2b 83       	std	Y+3, r18	; 0x03
    21b4:	20 91 b8 08 	lds	r18, 0x08B8	; 0x8008b8 <SQACAFrontloadProgramming+0x16>
    21b8:	2c 83       	std	Y+4, r18	; 0x04
    21ba:	6c cf       	rjmp	.-296    	; 0x2094 <sendSQACAVendPrice+0xda>
    21bc:	24 30       	cpi	r18, 0x04	; 4
    21be:	89 f0       	breq	.+34     	; 0x21e2 <sendSQACAVendPrice+0x228>
    21c0:	25 30       	cpi	r18, 0x05	; 5
    21c2:	09 f0       	breq	.+2      	; 0x21c6 <sendSQACAVendPrice+0x20c>
    21c4:	50 cf       	rjmp	.-352    	; 0x2066 <sendSQACAVendPrice+0xac>
    21c6:	20 91 10 0a 	lds	r18, 0x0A10	; 0x800a10 <SQACADryerProgramming+0xb>
    21ca:	2b 83       	std	Y+3, r18	; 0x03
    21cc:	20 91 11 0a 	lds	r18, 0x0A11	; 0x800a11 <SQACADryerProgramming+0xc>
    21d0:	2c 83       	std	Y+4, r18	; 0x04
    21d2:	49 cf       	rjmp	.-366    	; 0x2066 <sendSQACAVendPrice+0xac>
    21d4:	20 91 e0 08 	lds	r18, 0x08E0	; 0x8008e0 <SQACAToploadProgramming+0x17>
    21d8:	2d 83       	std	Y+5, r18	; 0x05
    21da:	20 91 e1 08 	lds	r18, 0x08E1	; 0x8008e1 <SQACAToploadProgramming+0x18>
    21de:	2e 83       	std	Y+6, r18	; 0x06
    21e0:	01 cf       	rjmp	.-510    	; 0x1fe4 <sendSQACAVendPrice+0x2a>
    21e2:	20 91 0a 0a 	lds	r18, 0x0A0A	; 0x800a0a <SQACADryerProgramming+0x5>
    21e6:	2b 83       	std	Y+3, r18	; 0x03
    21e8:	20 91 0b 0a 	lds	r18, 0x0A0B	; 0x800a0b <SQACADryerProgramming+0x6>
    21ec:	2c 83       	std	Y+4, r18	; 0x04
    21ee:	3b cf       	rjmp	.-394    	; 0x2066 <sendSQACAVendPrice+0xac>

000021f0 <getSQDataPacket>:
    21f0:	ef 92       	push	r14
    21f2:	ff 92       	push	r15
    21f4:	1f 93       	push	r17
    21f6:	cf 93       	push	r28
    21f8:	df 93       	push	r29
    21fa:	ec 01       	movw	r28, r24
    21fc:	0e 94 e1 28 	call	0x51c2	; 0x51c2 <serial_getchar>
    2200:	18 2f       	mov	r17, r24
    2202:	82 30       	cpi	r24, 0x02	; 2
    2204:	39 f0       	breq	.+14     	; 0x2214 <getSQDataPacket+0x24>
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	df 91       	pop	r29
    220a:	cf 91       	pop	r28
    220c:	1f 91       	pop	r17
    220e:	ff 90       	pop	r15
    2210:	ef 90       	pop	r14
    2212:	08 95       	ret
    2214:	0e 94 e1 28 	call	0x51c2	; 0x51c2 <serial_getchar>
    2218:	98 81       	ld	r25, Y
    221a:	98 17       	cp	r25, r24
    221c:	a0 f3       	brcs	.-24     	; 0x2206 <getSQDataPacket+0x16>
    221e:	18 27       	eor	r17, r24
    2220:	88 23       	and	r24, r24
    2222:	79 f0       	breq	.+30     	; 0x2242 <getSQDataPacket+0x52>
    2224:	81 50       	subi	r24, 0x01	; 1
    2226:	e8 2e       	mov	r14, r24
    2228:	f1 2c       	mov	r15, r1
    222a:	8f ef       	ldi	r24, 0xFF	; 255
    222c:	e8 1a       	sub	r14, r24
    222e:	f8 0a       	sbc	r15, r24
    2230:	ec 0e       	add	r14, r28
    2232:	fd 1e       	adc	r15, r29
    2234:	0e 94 e1 28 	call	0x51c2	; 0x51c2 <serial_getchar>
    2238:	89 93       	st	Y+, r24
    223a:	18 27       	eor	r17, r24
    223c:	ce 15       	cp	r28, r14
    223e:	df 05       	cpc	r29, r15
    2240:	c9 f7       	brne	.-14     	; 0x2234 <getSQDataPacket+0x44>
    2242:	0e 94 e1 28 	call	0x51c2	; 0x51c2 <serial_getchar>
    2246:	18 17       	cp	r17, r24
    2248:	21 f0       	breq	.+8      	; 0x2252 <getSQDataPacket+0x62>
    224a:	85 e1       	ldi	r24, 0x15	; 21
    224c:	0e 94 93 28 	call	0x5126	; 0x5126 <serial_putchar>
    2250:	da cf       	rjmp	.-76     	; 0x2206 <getSQDataPacket+0x16>
    2252:	86 e0       	ldi	r24, 0x06	; 6
    2254:	0e 94 93 28 	call	0x5126	; 0x5126 <serial_putchar>
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	d6 cf       	rjmp	.-84     	; 0x2208 <getSQDataPacket+0x18>

0000225c <getSQACAStatusData.part.1>:
    225c:	cf 93       	push	r28
    225e:	df 93       	push	r29
    2260:	cd b7       	in	r28, 0x3d	; 61
    2262:	de b7       	in	r29, 0x3e	; 62
    2264:	6a 97       	sbiw	r28, 0x1a	; 26
    2266:	0f b6       	in	r0, 0x3f	; 63
    2268:	f8 94       	cli
    226a:	de bf       	out	0x3e, r29	; 62
    226c:	0f be       	out	0x3f, r0	; 63
    226e:	cd bf       	out	0x3d, r28	; 61
    2270:	2a e1       	ldi	r18, 0x1A	; 26
    2272:	ce 01       	movw	r24, r28
    2274:	01 96       	adiw	r24, 0x01	; 1
    2276:	fc 01       	movw	r30, r24
    2278:	32 2f       	mov	r19, r18
    227a:	11 92       	st	Z+, r1
    227c:	3a 95       	dec	r19
    227e:	e9 f7       	brne	.-6      	; 0x227a <getSQACAStatusData.part.1+0x1e>
    2280:	29 83       	std	Y+1, r18	; 0x01
    2282:	b6 df       	rcall	.-148    	; 0x21f0 <getSQDataPacket>
    2284:	88 23       	and	r24, r24
    2286:	19 f0       	breq	.+6      	; 0x228e <getSQACAStatusData.part.1+0x32>
    2288:	99 81       	ldd	r25, Y+1	; 0x01
    228a:	91 37       	cpi	r25, 0x71	; 113
    228c:	51 f0       	breq	.+20     	; 0x22a2 <getSQACAStatusData.part.1+0x46>
    228e:	80 e0       	ldi	r24, 0x00	; 0
    2290:	6a 96       	adiw	r28, 0x1a	; 26
    2292:	0f b6       	in	r0, 0x3f	; 63
    2294:	f8 94       	cli
    2296:	de bf       	out	0x3e, r29	; 62
    2298:	0f be       	out	0x3f, r0	; 63
    229a:	cd bf       	out	0x3d, r28	; 61
    229c:	df 91       	pop	r29
    229e:	cf 91       	pop	r28
    22a0:	08 95       	ret
    22a2:	9a 81       	ldd	r25, Y+2	; 0x02
    22a4:	90 5e       	subi	r25, 0xE0	; 224
    22a6:	90 93 f6 0a 	sts	0x0AF6, r25	; 0x800af6 <SQACAMachineStatus>
    22aa:	9b 81       	ldd	r25, Y+3	; 0x03
    22ac:	90 93 f8 0a 	sts	0x0AF8, r25	; 0x800af8 <SQACAMachineStatus+0x2>
    22b0:	9c 81       	ldd	r25, Y+4	; 0x04
    22b2:	90 93 f9 0a 	sts	0x0AF9, r25	; 0x800af9 <SQACAMachineStatus+0x3>
    22b6:	9d 81       	ldd	r25, Y+5	; 0x05
    22b8:	90 93 fa 0a 	sts	0x0AFA, r25	; 0x800afa <SQACAMachineStatus+0x4>
    22bc:	9e 81       	ldd	r25, Y+6	; 0x06
    22be:	90 93 fb 0a 	sts	0x0AFB, r25	; 0x800afb <SQACAMachineStatus+0x5>
    22c2:	9f 81       	ldd	r25, Y+7	; 0x07
    22c4:	90 93 fc 0a 	sts	0x0AFC, r25	; 0x800afc <SQACAMachineStatus+0x6>
    22c8:	98 85       	ldd	r25, Y+8	; 0x08
    22ca:	90 93 fd 0a 	sts	0x0AFD, r25	; 0x800afd <SQACAMachineStatus+0x7>
    22ce:	99 85       	ldd	r25, Y+9	; 0x09
    22d0:	90 93 fe 0a 	sts	0x0AFE, r25	; 0x800afe <SQACAMachineStatus+0x8>
    22d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d6:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <SQACAMachineStatus+0x9>
    22da:	9b 85       	ldd	r25, Y+11	; 0x0b
    22dc:	90 93 00 0b 	sts	0x0B00, r25	; 0x800b00 <SQACAMachineStatus+0xa>
    22e0:	9c 85       	ldd	r25, Y+12	; 0x0c
    22e2:	90 93 01 0b 	sts	0x0B01, r25	; 0x800b01 <SQACAMachineStatus+0xb>
    22e6:	9d 85       	ldd	r25, Y+13	; 0x0d
    22e8:	90 93 02 0b 	sts	0x0B02, r25	; 0x800b02 <SQACAMachineStatus+0xc>
    22ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ee:	90 93 03 0b 	sts	0x0B03, r25	; 0x800b03 <SQACAMachineStatus+0xd>
    22f2:	9f 85       	ldd	r25, Y+15	; 0x0f
    22f4:	90 93 04 0b 	sts	0x0B04, r25	; 0x800b04 <SQACAMachineStatus+0xe>
    22f8:	98 89       	ldd	r25, Y+16	; 0x10
    22fa:	90 93 05 0b 	sts	0x0B05, r25	; 0x800b05 <SQACAMachineStatus+0xf>
    22fe:	99 89       	ldd	r25, Y+17	; 0x11
    2300:	90 93 06 0b 	sts	0x0B06, r25	; 0x800b06 <SQACAMachineStatus+0x10>
    2304:	9a 89       	ldd	r25, Y+18	; 0x12
    2306:	90 93 07 0b 	sts	0x0B07, r25	; 0x800b07 <SQACAMachineStatus+0x11>
    230a:	9b 89       	ldd	r25, Y+19	; 0x13
    230c:	90 93 08 0b 	sts	0x0B08, r25	; 0x800b08 <SQACAMachineStatus+0x12>
    2310:	9c 89       	ldd	r25, Y+20	; 0x14
    2312:	90 93 09 0b 	sts	0x0B09, r25	; 0x800b09 <SQACAMachineStatus+0x13>
    2316:	9d 89       	ldd	r25, Y+21	; 0x15
    2318:	90 93 0a 0b 	sts	0x0B0A, r25	; 0x800b0a <SQACAMachineStatus+0x14>
    231c:	9e 89       	ldd	r25, Y+22	; 0x16
    231e:	90 93 0b 0b 	sts	0x0B0B, r25	; 0x800b0b <SQACAMachineStatus+0x15>
    2322:	9f 89       	ldd	r25, Y+23	; 0x17
    2324:	90 93 0c 0b 	sts	0x0B0C, r25	; 0x800b0c <SQACAMachineStatus+0x16>
    2328:	98 8d       	ldd	r25, Y+24	; 0x18
    232a:	90 93 0d 0b 	sts	0x0B0D, r25	; 0x800b0d <SQACAMachineStatus+0x17>
    232e:	99 8d       	ldd	r25, Y+25	; 0x19
    2330:	90 93 0e 0b 	sts	0x0B0E, r25	; 0x800b0e <SQACAMachineStatus+0x18>
    2334:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2336:	90 93 0f 0b 	sts	0x0B0F, r25	; 0x800b0f <SQACAMachineStatus+0x19>
    233a:	aa cf       	rjmp	.-172    	; 0x2290 <getSQACAStatusData.part.1+0x34>

0000233c <SQACAMachineStatusSequence>:
    233c:	1f 93       	push	r17
    233e:	cf 93       	push	r28
    2340:	df 93       	push	r29
    2342:	00 d0       	rcall	.+0      	; 0x2344 <SQACAMachineStatusSequence+0x8>
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
    2348:	1a 82       	std	Y+2, r1	; 0x02
    234a:	19 82       	std	Y+1, r1	; 0x01
    234c:	80 91 f7 0a 	lds	r24, 0x0AF7	; 0x800af7 <SQACAMachineStatus+0x1>
    2350:	83 30       	cpi	r24, 0x03	; 3
    2352:	81 f0       	breq	.+32     	; 0x2374 <SQACAMachineStatusSequence+0x38>
    2354:	ce 01       	movw	r24, r28
    2356:	01 96       	adiw	r24, 0x01	; 1
    2358:	cc dd       	rcall	.-1128   	; 0x1ef2 <sendSQDataPacket>
    235a:	88 23       	and	r24, r24
    235c:	21 f0       	breq	.+8      	; 0x2366 <SQACAMachineStatusSequence+0x2a>
    235e:	80 91 f7 0a 	lds	r24, 0x0AF7	; 0x800af7 <SQACAMachineStatus+0x1>
    2362:	83 30       	cpi	r24, 0x03	; 3
    2364:	61 f0       	breq	.+24     	; 0x237e <SQACAMachineStatusSequence+0x42>
    2366:	80 e0       	ldi	r24, 0x00	; 0
    2368:	0f 90       	pop	r0
    236a:	0f 90       	pop	r0
    236c:	df 91       	pop	r29
    236e:	cf 91       	pop	r28
    2370:	1f 91       	pop	r17
    2372:	08 95       	ret
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	89 83       	std	Y+1, r24	; 0x01
    2378:	80 e7       	ldi	r24, 0x70	; 112
    237a:	8a 83       	std	Y+2, r24	; 0x02
    237c:	eb cf       	rjmp	.-42     	; 0x2354 <SQACAMachineStatusSequence+0x18>
    237e:	6e df       	rcall	.-292    	; 0x225c <getSQACAStatusData.part.1>
    2380:	18 2f       	mov	r17, r24
    2382:	88 23       	and	r24, r24
    2384:	81 f3       	breq	.-32     	; 0x2366 <SQACAMachineStatusSequence+0x2a>
    2386:	90 91 35 09 	lds	r25, 0x0935	; 0x800935 <ReaderStateFlag>
    238a:	91 fb       	bst	r25, 1
    238c:	88 27       	eor	r24, r24
    238e:	80 f9       	bld	r24, 0
    2390:	91 fd       	sbrc	r25, 1
    2392:	ea cf       	rjmp	.-44     	; 0x2368 <SQACAMachineStatusSequence+0x2c>
    2394:	8f ed       	ldi	r24, 0xDF	; 223
    2396:	9e e2       	ldi	r25, 0x2E	; 46
    2398:	01 97       	sbiw	r24, 0x01	; 1
    239a:	f1 f7       	brne	.-4      	; 0x2398 <SQACAMachineStatusSequence+0x5c>
    239c:	00 c0       	rjmp	.+0      	; 0x239e <SQACAMachineStatusSequence+0x62>
    239e:	00 00       	nop
    23a0:	0c de       	rcall	.-1000   	; 0x1fba <sendSQACAVendPrice>
    23a2:	81 2f       	mov	r24, r17
    23a4:	0f 90       	pop	r0
    23a6:	0f 90       	pop	r0
    23a8:	df 91       	pop	r29
    23aa:	cf 91       	pop	r28
    23ac:	1f 91       	pop	r17
    23ae:	08 95       	ret

000023b0 <getSQACAInitData>:
    23b0:	cf 93       	push	r28
    23b2:	df 93       	push	r29
    23b4:	cd b7       	in	r28, 0x3d	; 61
    23b6:	de b7       	in	r29, 0x3e	; 62
    23b8:	6f 97       	sbiw	r28, 0x1f	; 31
    23ba:	0f b6       	in	r0, 0x3f	; 63
    23bc:	f8 94       	cli
    23be:	de bf       	out	0x3e, r29	; 62
    23c0:	0f be       	out	0x3f, r0	; 63
    23c2:	cd bf       	out	0x3d, r28	; 61
    23c4:	2f e1       	ldi	r18, 0x1F	; 31
    23c6:	ce 01       	movw	r24, r28
    23c8:	01 96       	adiw	r24, 0x01	; 1
    23ca:	fc 01       	movw	r30, r24
    23cc:	32 2f       	mov	r19, r18
    23ce:	11 92       	st	Z+, r1
    23d0:	3a 95       	dec	r19
    23d2:	e9 f7       	brne	.-6      	; 0x23ce <getSQACAInitData+0x1e>
    23d4:	29 83       	std	Y+1, r18	; 0x01
    23d6:	0c df       	rcall	.-488    	; 0x21f0 <getSQDataPacket>
    23d8:	88 23       	and	r24, r24
    23da:	79 f0       	breq	.+30     	; 0x23fa <getSQACAInitData+0x4a>
    23dc:	9a 81       	ldd	r25, Y+2	; 0x02
    23de:	90 93 c9 08 	sts	0x08C9, r25	; 0x8008c9 <SQACAToploadProgramming>
    23e2:	9b 81       	ldd	r25, Y+3	; 0x03
    23e4:	90 93 ca 08 	sts	0x08CA, r25	; 0x8008ca <SQACAToploadProgramming+0x1>
    23e8:	9c 81       	ldd	r25, Y+4	; 0x04
    23ea:	90 93 cb 08 	sts	0x08CB, r25	; 0x8008cb <SQACAToploadProgramming+0x2>
    23ee:	9f 81       	ldd	r25, Y+7	; 0x07
    23f0:	90 93 fa 08 	sts	0x08FA, r25	; 0x8008fa <SQACAToploadProgramming+0x31>
    23f4:	99 89       	ldd	r25, Y+17	; 0x11
    23f6:	90 93 fb 08 	sts	0x08FB, r25	; 0x8008fb <SQACAToploadProgramming+0x32>
    23fa:	6f 96       	adiw	r28, 0x1f	; 31
    23fc:	0f b6       	in	r0, 0x3f	; 63
    23fe:	f8 94       	cli
    2400:	de bf       	out	0x3e, r29	; 62
    2402:	0f be       	out	0x3f, r0	; 63
    2404:	cd bf       	out	0x3d, r28	; 61
    2406:	df 91       	pop	r29
    2408:	cf 91       	pop	r28
    240a:	08 95       	ret

0000240c <IsACA>:
    240c:	cf 93       	push	r28
    240e:	df 93       	push	r29
    2410:	cd b7       	in	r28, 0x3d	; 61
    2412:	de b7       	in	r29, 0x3e	; 62
    2414:	2a 97       	sbiw	r28, 0x0a	; 10
    2416:	0f b6       	in	r0, 0x3f	; 63
    2418:	f8 94       	cli
    241a:	de bf       	out	0x3e, r29	; 62
    241c:	0f be       	out	0x3f, r0	; 63
    241e:	cd bf       	out	0x3d, r28	; 61
    2420:	8a e0       	ldi	r24, 0x0A	; 10
    2422:	ef e2       	ldi	r30, 0x2F	; 47
    2424:	f2 e0       	ldi	r31, 0x02	; 2
    2426:	de 01       	movw	r26, r28
    2428:	11 96       	adiw	r26, 0x01	; 1
    242a:	01 90       	ld	r0, Z+
    242c:	0d 92       	st	X+, r0
    242e:	8a 95       	dec	r24
    2430:	e1 f7       	brne	.-8      	; 0x242a <IsACA+0x1e>
    2432:	89 e0       	ldi	r24, 0x09	; 9
    2434:	89 83       	std	Y+1, r24	; 0x01
    2436:	83 e7       	ldi	r24, 0x73	; 115
    2438:	8a 83       	std	Y+2, r24	; 0x02
    243a:	1e 82       	std	Y+6, r1	; 0x06
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	8f 83       	std	Y+7, r24	; 0x07
    2440:	80 e1       	ldi	r24, 0x10	; 16
    2442:	88 87       	std	Y+8, r24	; 0x08
    2444:	19 86       	std	Y+9, r1	; 0x09
    2446:	82 e0       	ldi	r24, 0x02	; 2
    2448:	8a 87       	std	Y+10, r24	; 0x0a
    244a:	ce 01       	movw	r24, r28
    244c:	01 96       	adiw	r24, 0x01	; 1
    244e:	51 dd       	rcall	.-1374   	; 0x1ef2 <sendSQDataPacket>
    2450:	81 11       	cpse	r24, r1
    2452:	ae df       	rcall	.-164    	; 0x23b0 <getSQACAInitData>
    2454:	2a 96       	adiw	r28, 0x0a	; 10
    2456:	0f b6       	in	r0, 0x3f	; 63
    2458:	f8 94       	cli
    245a:	de bf       	out	0x3e, r29	; 62
    245c:	0f be       	out	0x3f, r0	; 63
    245e:	cd bf       	out	0x3d, r28	; 61
    2460:	df 91       	pop	r29
    2462:	cf 91       	pop	r28
    2464:	08 95       	ret

00002466 <sendSQACAMimicQuantumVending>:
    2466:	cf 93       	push	r28
    2468:	df 93       	push	r29
    246a:	00 d0       	rcall	.+0      	; 0x246c <sendSQACAMimicQuantumVending+0x6>
    246c:	00 d0       	rcall	.+0      	; 0x246e <sendSQACAMimicQuantumVending+0x8>
    246e:	cd b7       	in	r28, 0x3d	; 61
    2470:	de b7       	in	r29, 0x3e	; 62
    2472:	83 e0       	ldi	r24, 0x03	; 3
    2474:	89 83       	std	Y+1, r24	; 0x01
    2476:	84 e6       	ldi	r24, 0x64	; 100
    2478:	8a 83       	std	Y+2, r24	; 0x02
    247a:	8f e0       	ldi	r24, 0x0F	; 15
    247c:	8b 83       	std	Y+3, r24	; 0x03
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	8c 83       	std	Y+4, r24	; 0x04
    2482:	ce 01       	movw	r24, r28
    2484:	01 96       	adiw	r24, 0x01	; 1
    2486:	35 dd       	rcall	.-1430   	; 0x1ef2 <sendSQDataPacket>
    2488:	0f 90       	pop	r0
    248a:	0f 90       	pop	r0
    248c:	0f 90       	pop	r0
    248e:	0f 90       	pop	r0
    2490:	df 91       	pop	r29
    2492:	cf 91       	pop	r28
    2494:	08 95       	ret

00002496 <sendSQACAVendingTransaction>:
    2496:	cf 93       	push	r28
    2498:	df 93       	push	r29
    249a:	cd b7       	in	r28, 0x3d	; 61
    249c:	de b7       	in	r29, 0x3e	; 62
    249e:	27 97       	sbiw	r28, 0x07	; 7
    24a0:	0f b6       	in	r0, 0x3f	; 63
    24a2:	f8 94       	cli
    24a4:	de bf       	out	0x3e, r29	; 62
    24a6:	0f be       	out	0x3f, r0	; 63
    24a8:	cd bf       	out	0x3d, r28	; 61
    24aa:	fe 01       	movw	r30, r28
    24ac:	31 96       	adiw	r30, 0x01	; 1
    24ae:	97 e0       	ldi	r25, 0x07	; 7
    24b0:	df 01       	movw	r26, r30
    24b2:	1d 92       	st	X+, r1
    24b4:	9a 95       	dec	r25
    24b6:	e9 f7       	brne	.-6      	; 0x24b2 <sendSQACAVendingTransaction+0x1c>
    24b8:	81 30       	cpi	r24, 0x01	; 1
    24ba:	d1 f0       	breq	.+52     	; 0x24f0 <sendSQACAVendingTransaction+0x5a>
    24bc:	82 30       	cpi	r24, 0x02	; 2
    24be:	59 f0       	breq	.+22     	; 0x24d6 <sendSQACAVendingTransaction+0x40>
    24c0:	cf 01       	movw	r24, r30
    24c2:	17 dd       	rcall	.-1490   	; 0x1ef2 <sendSQDataPacket>
    24c4:	27 96       	adiw	r28, 0x07	; 7
    24c6:	0f b6       	in	r0, 0x3f	; 63
    24c8:	f8 94       	cli
    24ca:	de bf       	out	0x3e, r29	; 62
    24cc:	0f be       	out	0x3f, r0	; 63
    24ce:	cd bf       	out	0x3d, r28	; 61
    24d0:	df 91       	pop	r29
    24d2:	cf 91       	pop	r28
    24d4:	08 95       	ret
    24d6:	86 e0       	ldi	r24, 0x06	; 6
    24d8:	89 83       	std	Y+1, r24	; 0x01
    24da:	8a e6       	ldi	r24, 0x6A	; 106
    24dc:	8a 83       	std	Y+2, r24	; 0x02
    24de:	90 91 15 0a 	lds	r25, 0x0A15	; 0x800a15 <SQACADryerProgramming+0x10>
    24e2:	9b 83       	std	Y+3, r25	; 0x03
    24e4:	80 91 16 0a 	lds	r24, 0x0A16	; 0x800a16 <SQACADryerProgramming+0x11>
    24e8:	8c 83       	std	Y+4, r24	; 0x04
    24ea:	9d 83       	std	Y+5, r25	; 0x05
    24ec:	8e 83       	std	Y+6, r24	; 0x06
    24ee:	e8 cf       	rjmp	.-48     	; 0x24c0 <sendSQACAVendingTransaction+0x2a>
    24f0:	86 e0       	ldi	r24, 0x06	; 6
    24f2:	89 83       	std	Y+1, r24	; 0x01
    24f4:	8a e6       	ldi	r24, 0x6A	; 106
    24f6:	8a 83       	std	Y+2, r24	; 0x02
    24f8:	90 91 01 0b 	lds	r25, 0x0B01	; 0x800b01 <SQACAMachineStatus+0xb>
    24fc:	9b 83       	std	Y+3, r25	; 0x03
    24fe:	80 91 02 0b 	lds	r24, 0x0B02	; 0x800b02 <SQACAMachineStatus+0xc>
    2502:	8c 83       	std	Y+4, r24	; 0x04
    2504:	9d 83       	std	Y+5, r25	; 0x05
    2506:	8e 83       	std	Y+6, r24	; 0x06
    2508:	db cf       	rjmp	.-74     	; 0x24c0 <sendSQACAVendingTransaction+0x2a>

0000250a <SQACAInitializationSequence>:
    250a:	80 df       	rcall	.-256    	; 0x240c <IsACA>
    250c:	88 23       	and	r24, r24
    250e:	19 f0       	breq	.+6      	; 0x2516 <SQACAInitializationSequence+0xc>
    2510:	83 e0       	ldi	r24, 0x03	; 3
    2512:	80 93 f7 0a 	sts	0x0AF7, r24	; 0x800af7 <SQACAMachineStatus+0x1>
    2516:	8f e3       	ldi	r24, 0x3F	; 63
    2518:	9f e1       	ldi	r25, 0x1F	; 31
    251a:	01 97       	sbiw	r24, 0x01	; 1
    251c:	f1 f7       	brne	.-4      	; 0x251a <SQACAInitializationSequence+0x10>
    251e:	00 c0       	rjmp	.+0      	; 0x2520 <SQACAInitializationSequence+0x16>
    2520:	00 00       	nop
    2522:	0c df       	rcall	.-488    	; 0x233c <SQACAMachineStatusSequence>
    2524:	88 23       	and	r24, r24
    2526:	19 f0       	breq	.+6      	; 0x252e <SQACAInitializationSequence+0x24>
    2528:	82 e0       	ldi	r24, 0x02	; 2
    252a:	80 93 ba 09 	sts	0x09BA, r24	; 0x8009ba <ucDeviceStateFlag>
    252e:	80 91 f6 0a 	lds	r24, 0x0AF6	; 0x800af6 <SQACAMachineStatus>
    2532:	80 93 f2 0a 	sts	0x0AF2, r24	; 0x800af2 <deviceStatus>
    2536:	80 91 f7 0a 	lds	r24, 0x0AF7	; 0x800af7 <SQACAMachineStatus+0x1>
    253a:	80 93 f3 0a 	sts	0x0AF3, r24	; 0x800af3 <deviceStatus+0x1>
    253e:	08 95       	ret

00002540 <isMachineCycleRunning>:
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	90 91 fb 0a 	lds	r25, 0x0AFB	; 0x800afb <SQACAMachineStatus+0x5>
    2546:	98 30       	cpi	r25, 0x08	; 8
    2548:	09 f0       	breq	.+2      	; 0x254c <isMachineCycleRunning+0xc>
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	08 95       	ret

0000254e <waitForMachineStartKey>:
    254e:	80 91 fb 0a 	lds	r24, 0x0AFB	; 0x800afb <SQACAMachineStatus+0x5>
    2552:	80 ff       	sbrs	r24, 0
    2554:	05 c0       	rjmp	.+10     	; 0x2560 <waitForMachineStartKey+0x12>
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	90 91 fc 0a 	lds	r25, 0x0AFC	; 0x800afc <SQACAMachineStatus+0x6>
    255c:	90 32       	cpi	r25, 0x20	; 32
    255e:	09 f0       	breq	.+2      	; 0x2562 <waitForMachineStartKey+0x14>
    2560:	80 e0       	ldi	r24, 0x00	; 0
    2562:	08 95       	ret

00002564 <SQACAMachineStatusCommSequence>:
    2564:	eb de       	rcall	.-554    	; 0x233c <SQACAMachineStatusSequence>
    2566:	88 23       	and	r24, r24
    2568:	19 f0       	breq	.+6      	; 0x2570 <SQACAMachineStatusCommSequence+0xc>
    256a:	82 e0       	ldi	r24, 0x02	; 2
    256c:	80 93 ba 09 	sts	0x09BA, r24	; 0x8009ba <ucDeviceStateFlag>
    2570:	08 95       	ret

00002572 <getSQReaderMachineSetup>:
    2572:	cf 93       	push	r28
    2574:	df 93       	push	r29
    2576:	cd b7       	in	r28, 0x3d	; 61
    2578:	de b7       	in	r29, 0x3e	; 62
    257a:	ec 97       	sbiw	r28, 0x3c	; 60
    257c:	0f b6       	in	r0, 0x3f	; 63
    257e:	f8 94       	cli
    2580:	de bf       	out	0x3e, r29	; 62
    2582:	0f be       	out	0x3f, r0	; 63
    2584:	cd bf       	out	0x3d, r28	; 61
    2586:	fe 01       	movw	r30, r28
    2588:	31 96       	adiw	r30, 0x01	; 1
    258a:	8c e3       	ldi	r24, 0x3C	; 60
    258c:	df 01       	movw	r26, r30
    258e:	1d 92       	st	X+, r1
    2590:	8a 95       	dec	r24
    2592:	e9 f7       	brne	.-6      	; 0x258e <getSQReaderMachineSetup+0x1c>
    2594:	90 91 f2 0a 	lds	r25, 0x0AF2	; 0x800af2 <deviceStatus>
    2598:	92 32       	cpi	r25, 0x22	; 34
    259a:	09 f4       	brne	.+2      	; 0x259e <getSQReaderMachineSetup+0x2c>
    259c:	12 c1       	rjmp	.+548    	; 0x27c2 <getSQReaderMachineSetup+0x250>
    259e:	99 32       	cpi	r25, 0x29	; 41
    25a0:	09 f4       	brne	.+2      	; 0x25a4 <getSQReaderMachineSetup+0x32>
    25a2:	9f c0       	rjmp	.+318    	; 0x26e2 <getSQReaderMachineSetup+0x170>
    25a4:	91 32       	cpi	r25, 0x21	; 33
    25a6:	59 f0       	breq	.+22     	; 0x25be <getSQReaderMachineSetup+0x4c>
    25a8:	cf 01       	movw	r24, r30
    25aa:	a3 dc       	rcall	.-1722   	; 0x1ef2 <sendSQDataPacket>
    25ac:	ec 96       	adiw	r28, 0x3c	; 60
    25ae:	0f b6       	in	r0, 0x3f	; 63
    25b0:	f8 94       	cli
    25b2:	de bf       	out	0x3e, r29	; 62
    25b4:	0f be       	out	0x3f, r0	; 63
    25b6:	cd bf       	out	0x3d, r28	; 61
    25b8:	df 91       	pop	r29
    25ba:	cf 91       	pop	r28
    25bc:	08 95       	ret
    25be:	82 e3       	ldi	r24, 0x32	; 50
    25c0:	89 83       	std	Y+1, r24	; 0x01
    25c2:	9a 83       	std	Y+2, r25	; 0x02
    25c4:	80 91 c9 08 	lds	r24, 0x08C9	; 0x8008c9 <SQACAToploadProgramming>
    25c8:	8b 83       	std	Y+3, r24	; 0x03
    25ca:	80 91 ca 08 	lds	r24, 0x08CA	; 0x8008ca <SQACAToploadProgramming+0x1>
    25ce:	8c 83       	std	Y+4, r24	; 0x04
    25d0:	80 91 cb 08 	lds	r24, 0x08CB	; 0x8008cb <SQACAToploadProgramming+0x2>
    25d4:	8d 83       	std	Y+5, r24	; 0x05
    25d6:	80 91 cc 08 	lds	r24, 0x08CC	; 0x8008cc <SQACAToploadProgramming+0x3>
    25da:	8e 83       	std	Y+6, r24	; 0x06
    25dc:	80 91 cd 08 	lds	r24, 0x08CD	; 0x8008cd <SQACAToploadProgramming+0x4>
    25e0:	8f 83       	std	Y+7, r24	; 0x07
    25e2:	80 91 ce 08 	lds	r24, 0x08CE	; 0x8008ce <SQACAToploadProgramming+0x5>
    25e6:	88 87       	std	Y+8, r24	; 0x08
    25e8:	80 91 cf 08 	lds	r24, 0x08CF	; 0x8008cf <SQACAToploadProgramming+0x6>
    25ec:	89 87       	std	Y+9, r24	; 0x09
    25ee:	80 91 d0 08 	lds	r24, 0x08D0	; 0x8008d0 <SQACAToploadProgramming+0x7>
    25f2:	8a 87       	std	Y+10, r24	; 0x0a
    25f4:	80 91 d1 08 	lds	r24, 0x08D1	; 0x8008d1 <SQACAToploadProgramming+0x8>
    25f8:	8b 87       	std	Y+11, r24	; 0x0b
    25fa:	80 91 d2 08 	lds	r24, 0x08D2	; 0x8008d2 <SQACAToploadProgramming+0x9>
    25fe:	8c 87       	std	Y+12, r24	; 0x0c
    2600:	80 91 d3 08 	lds	r24, 0x08D3	; 0x8008d3 <SQACAToploadProgramming+0xa>
    2604:	8d 87       	std	Y+13, r24	; 0x0d
    2606:	80 91 d4 08 	lds	r24, 0x08D4	; 0x8008d4 <SQACAToploadProgramming+0xb>
    260a:	8e 87       	std	Y+14, r24	; 0x0e
    260c:	80 91 d5 08 	lds	r24, 0x08D5	; 0x8008d5 <SQACAToploadProgramming+0xc>
    2610:	8f 87       	std	Y+15, r24	; 0x0f
    2612:	80 91 d6 08 	lds	r24, 0x08D6	; 0x8008d6 <SQACAToploadProgramming+0xd>
    2616:	88 8b       	std	Y+16, r24	; 0x10
    2618:	80 91 d7 08 	lds	r24, 0x08D7	; 0x8008d7 <SQACAToploadProgramming+0xe>
    261c:	89 8b       	std	Y+17, r24	; 0x11
    261e:	80 91 d8 08 	lds	r24, 0x08D8	; 0x8008d8 <SQACAToploadProgramming+0xf>
    2622:	8a 8b       	std	Y+18, r24	; 0x12
    2624:	80 91 d9 08 	lds	r24, 0x08D9	; 0x8008d9 <SQACAToploadProgramming+0x10>
    2628:	8b 8b       	std	Y+19, r24	; 0x13
    262a:	80 91 da 08 	lds	r24, 0x08DA	; 0x8008da <SQACAToploadProgramming+0x11>
    262e:	8c 8b       	std	Y+20, r24	; 0x14
    2630:	80 91 db 08 	lds	r24, 0x08DB	; 0x8008db <SQACAToploadProgramming+0x12>
    2634:	8d 8b       	std	Y+21, r24	; 0x15
    2636:	80 91 dc 08 	lds	r24, 0x08DC	; 0x8008dc <SQACAToploadProgramming+0x13>
    263a:	8e 8b       	std	Y+22, r24	; 0x16
    263c:	80 91 dd 08 	lds	r24, 0x08DD	; 0x8008dd <SQACAToploadProgramming+0x14>
    2640:	8f 8b       	std	Y+23, r24	; 0x17
    2642:	80 91 de 08 	lds	r24, 0x08DE	; 0x8008de <SQACAToploadProgramming+0x15>
    2646:	88 8f       	std	Y+24, r24	; 0x18
    2648:	80 91 df 08 	lds	r24, 0x08DF	; 0x8008df <SQACAToploadProgramming+0x16>
    264c:	89 8f       	std	Y+25, r24	; 0x19
    264e:	80 91 e0 08 	lds	r24, 0x08E0	; 0x8008e0 <SQACAToploadProgramming+0x17>
    2652:	8a 8f       	std	Y+26, r24	; 0x1a
    2654:	80 91 e1 08 	lds	r24, 0x08E1	; 0x8008e1 <SQACAToploadProgramming+0x18>
    2658:	8b 8f       	std	Y+27, r24	; 0x1b
    265a:	80 91 e2 08 	lds	r24, 0x08E2	; 0x8008e2 <SQACAToploadProgramming+0x19>
    265e:	8c 8f       	std	Y+28, r24	; 0x1c
    2660:	80 91 e3 08 	lds	r24, 0x08E3	; 0x8008e3 <SQACAToploadProgramming+0x1a>
    2664:	8d 8f       	std	Y+29, r24	; 0x1d
    2666:	80 91 e5 08 	lds	r24, 0x08E5	; 0x8008e5 <SQACAToploadProgramming+0x1c>
    266a:	8e 8f       	std	Y+30, r24	; 0x1e
    266c:	80 91 e4 08 	lds	r24, 0x08E4	; 0x8008e4 <SQACAToploadProgramming+0x1b>
    2670:	8f 8f       	std	Y+31, r24	; 0x1f
    2672:	80 91 e6 08 	lds	r24, 0x08E6	; 0x8008e6 <SQACAToploadProgramming+0x1d>
    2676:	88 a3       	std	Y+32, r24	; 0x20
    2678:	80 91 e7 08 	lds	r24, 0x08E7	; 0x8008e7 <SQACAToploadProgramming+0x1e>
    267c:	89 a3       	std	Y+33, r24	; 0x21
    267e:	80 91 e8 08 	lds	r24, 0x08E8	; 0x8008e8 <SQACAToploadProgramming+0x1f>
    2682:	8a a3       	std	Y+34, r24	; 0x22
    2684:	80 91 e9 08 	lds	r24, 0x08E9	; 0x8008e9 <SQACAToploadProgramming+0x20>
    2688:	8b a3       	std	Y+35, r24	; 0x23
    268a:	80 91 ea 08 	lds	r24, 0x08EA	; 0x8008ea <SQACAToploadProgramming+0x21>
    268e:	8c a3       	std	Y+36, r24	; 0x24
    2690:	80 91 eb 08 	lds	r24, 0x08EB	; 0x8008eb <SQACAToploadProgramming+0x22>
    2694:	8d a3       	std	Y+37, r24	; 0x25
    2696:	8e a3       	std	Y+38, r24	; 0x26
    2698:	80 91 ed 08 	lds	r24, 0x08ED	; 0x8008ed <SQACAToploadProgramming+0x24>
    269c:	8f a3       	std	Y+39, r24	; 0x27
    269e:	80 91 ee 08 	lds	r24, 0x08EE	; 0x8008ee <SQACAToploadProgramming+0x25>
    26a2:	88 a7       	std	Y+40, r24	; 0x28
    26a4:	80 91 f0 08 	lds	r24, 0x08F0	; 0x8008f0 <SQACAToploadProgramming+0x27>
    26a8:	89 a7       	std	Y+41, r24	; 0x29
    26aa:	80 91 f1 08 	lds	r24, 0x08F1	; 0x8008f1 <SQACAToploadProgramming+0x28>
    26ae:	8b a7       	std	Y+43, r24	; 0x2b
    26b0:	80 91 f2 08 	lds	r24, 0x08F2	; 0x8008f2 <SQACAToploadProgramming+0x29>
    26b4:	8c a7       	std	Y+44, r24	; 0x2c
    26b6:	80 91 f4 08 	lds	r24, 0x08F4	; 0x8008f4 <SQACAToploadProgramming+0x2b>
    26ba:	8d a7       	std	Y+45, r24	; 0x2d
    26bc:	80 91 f3 08 	lds	r24, 0x08F3	; 0x8008f3 <SQACAToploadProgramming+0x2a>
    26c0:	8a a7       	std	Y+42, r24	; 0x2a
    26c2:	80 91 f5 08 	lds	r24, 0x08F5	; 0x8008f5 <SQACAToploadProgramming+0x2c>
    26c6:	8f a7       	std	Y+47, r24	; 0x2f
    26c8:	80 91 f6 08 	lds	r24, 0x08F6	; 0x8008f6 <SQACAToploadProgramming+0x2d>
    26cc:	88 ab       	std	Y+48, r24	; 0x30
    26ce:	80 91 f7 08 	lds	r24, 0x08F7	; 0x8008f7 <SQACAToploadProgramming+0x2e>
    26d2:	89 ab       	std	Y+49, r24	; 0x31
    26d4:	80 91 f8 08 	lds	r24, 0x08F8	; 0x8008f8 <SQACAToploadProgramming+0x2f>
    26d8:	8a ab       	std	Y+50, r24	; 0x32
    26da:	80 91 f9 08 	lds	r24, 0x08F9	; 0x8008f9 <SQACAToploadProgramming+0x30>
    26de:	8b ab       	std	Y+51, r24	; 0x33
    26e0:	63 cf       	rjmp	.-314    	; 0x25a8 <getSQReaderMachineSetup+0x36>
    26e2:	85 e2       	ldi	r24, 0x25	; 37
    26e4:	89 83       	std	Y+1, r24	; 0x01
    26e6:	9a 83       	std	Y+2, r25	; 0x02
    26e8:	80 91 05 0a 	lds	r24, 0x0A05	; 0x800a05 <SQACADryerProgramming>
    26ec:	8b 83       	std	Y+3, r24	; 0x03
    26ee:	80 91 06 0a 	lds	r24, 0x0A06	; 0x800a06 <SQACADryerProgramming+0x1>
    26f2:	8c 83       	std	Y+4, r24	; 0x04
    26f4:	80 91 07 0a 	lds	r24, 0x0A07	; 0x800a07 <SQACADryerProgramming+0x2>
    26f8:	8d 83       	std	Y+5, r24	; 0x05
    26fa:	80 91 08 0a 	lds	r24, 0x0A08	; 0x800a08 <SQACADryerProgramming+0x3>
    26fe:	8e 83       	std	Y+6, r24	; 0x06
    2700:	80 91 09 0a 	lds	r24, 0x0A09	; 0x800a09 <SQACADryerProgramming+0x4>
    2704:	8f 83       	std	Y+7, r24	; 0x07
    2706:	80 91 0a 0a 	lds	r24, 0x0A0A	; 0x800a0a <SQACADryerProgramming+0x5>
    270a:	88 87       	std	Y+8, r24	; 0x08
    270c:	80 91 0b 0a 	lds	r24, 0x0A0B	; 0x800a0b <SQACADryerProgramming+0x6>
    2710:	89 87       	std	Y+9, r24	; 0x09
    2712:	80 91 12 0a 	lds	r24, 0x0A12	; 0x800a12 <SQACADryerProgramming+0xd>
    2716:	8a 87       	std	Y+10, r24	; 0x0a
    2718:	80 91 13 0a 	lds	r24, 0x0A13	; 0x800a13 <SQACADryerProgramming+0xe>
    271c:	8b 87       	std	Y+11, r24	; 0x0b
    271e:	80 91 14 0a 	lds	r24, 0x0A14	; 0x800a14 <SQACADryerProgramming+0xf>
    2722:	8e 87       	std	Y+14, r24	; 0x0e
    2724:	80 91 15 0a 	lds	r24, 0x0A15	; 0x800a15 <SQACADryerProgramming+0x10>
    2728:	8c 87       	std	Y+12, r24	; 0x0c
    272a:	80 91 16 0a 	lds	r24, 0x0A16	; 0x800a16 <SQACADryerProgramming+0x11>
    272e:	8d 87       	std	Y+13, r24	; 0x0d
    2730:	80 91 17 0a 	lds	r24, 0x0A17	; 0x800a17 <SQACADryerProgramming+0x12>
    2734:	8f 87       	std	Y+15, r24	; 0x0f
    2736:	80 91 18 0a 	lds	r24, 0x0A18	; 0x800a18 <SQACADryerProgramming+0x13>
    273a:	88 8b       	std	Y+16, r24	; 0x10
    273c:	80 91 19 0a 	lds	r24, 0x0A19	; 0x800a19 <SQACADryerProgramming+0x14>
    2740:	89 8b       	std	Y+17, r24	; 0x11
    2742:	80 91 1a 0a 	lds	r24, 0x0A1A	; 0x800a1a <SQACADryerProgramming+0x15>
    2746:	8a 8b       	std	Y+18, r24	; 0x12
    2748:	80 91 1b 0a 	lds	r24, 0x0A1B	; 0x800a1b <SQACADryerProgramming+0x16>
    274c:	8b 8b       	std	Y+19, r24	; 0x13
    274e:	80 91 1c 0a 	lds	r24, 0x0A1C	; 0x800a1c <SQACADryerProgramming+0x17>
    2752:	8c 8b       	std	Y+20, r24	; 0x14
    2754:	80 91 1d 0a 	lds	r24, 0x0A1D	; 0x800a1d <SQACADryerProgramming+0x18>
    2758:	8d 8b       	std	Y+21, r24	; 0x15
    275a:	80 91 1e 0a 	lds	r24, 0x0A1E	; 0x800a1e <SQACADryerProgramming+0x19>
    275e:	8e 8b       	std	Y+22, r24	; 0x16
    2760:	80 91 1f 0a 	lds	r24, 0x0A1F	; 0x800a1f <SQACADryerProgramming+0x1a>
    2764:	8f 8b       	std	Y+23, r24	; 0x17
    2766:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <SQACADryerProgramming+0x1b>
    276a:	88 8f       	std	Y+24, r24	; 0x18
    276c:	80 91 21 0a 	lds	r24, 0x0A21	; 0x800a21 <SQACADryerProgramming+0x1c>
    2770:	89 8f       	std	Y+25, r24	; 0x19
    2772:	80 91 22 0a 	lds	r24, 0x0A22	; 0x800a22 <SQACADryerProgramming+0x1d>
    2776:	8a 8f       	std	Y+26, r24	; 0x1a
    2778:	80 91 23 0a 	lds	r24, 0x0A23	; 0x800a23 <SQACADryerProgramming+0x1e>
    277c:	8b 8f       	std	Y+27, r24	; 0x1b
    277e:	80 91 24 0a 	lds	r24, 0x0A24	; 0x800a24 <SQACADryerProgramming+0x1f>
    2782:	8c 8f       	std	Y+28, r24	; 0x1c
    2784:	80 91 25 0a 	lds	r24, 0x0A25	; 0x800a25 <SQACADryerProgramming+0x20>
    2788:	8d 8f       	std	Y+29, r24	; 0x1d
    278a:	80 91 26 0a 	lds	r24, 0x0A26	; 0x800a26 <SQACADryerProgramming+0x21>
    278e:	8e 8f       	std	Y+30, r24	; 0x1e
    2790:	80 91 27 0a 	lds	r24, 0x0A27	; 0x800a27 <SQACADryerProgramming+0x22>
    2794:	8f 8f       	std	Y+31, r24	; 0x1f
    2796:	80 91 28 0a 	lds	r24, 0x0A28	; 0x800a28 <SQACADryerProgramming+0x23>
    279a:	88 a3       	std	Y+32, r24	; 0x20
    279c:	80 91 29 0a 	lds	r24, 0x0A29	; 0x800a29 <SQACADryerProgramming+0x24>
    27a0:	89 a3       	std	Y+33, r24	; 0x21
    27a2:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <SQACADryerProgramming+0x25>
    27a6:	8a a3       	std	Y+34, r24	; 0x22
    27a8:	80 91 2b 0a 	lds	r24, 0x0A2B	; 0x800a2b <SQACADryerProgramming+0x26>
    27ac:	8b a3       	std	Y+35, r24	; 0x23
    27ae:	80 91 2c 0a 	lds	r24, 0x0A2C	; 0x800a2c <SQACADryerProgramming+0x27>
    27b2:	8c a3       	std	Y+36, r24	; 0x24
    27b4:	80 91 2d 0a 	lds	r24, 0x0A2D	; 0x800a2d <SQACADryerProgramming+0x28>
    27b8:	8d a3       	std	Y+37, r24	; 0x25
    27ba:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <SQACADryerProgramming+0x29>
    27be:	8e a3       	std	Y+38, r24	; 0x26
    27c0:	f3 ce       	rjmp	.-538    	; 0x25a8 <getSQReaderMachineSetup+0x36>
    27c2:	82 e3       	ldi	r24, 0x32	; 50
    27c4:	89 83       	std	Y+1, r24	; 0x01
    27c6:	9a 83       	std	Y+2, r25	; 0x02
    27c8:	80 91 a2 08 	lds	r24, 0x08A2	; 0x8008a2 <SQACAFrontloadProgramming>
    27cc:	8b 83       	std	Y+3, r24	; 0x03
    27ce:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <SQACAFrontloadProgramming+0x1>
    27d2:	8c 83       	std	Y+4, r24	; 0x04
    27d4:	80 91 a4 08 	lds	r24, 0x08A4	; 0x8008a4 <SQACAFrontloadProgramming+0x2>
    27d8:	8d 83       	std	Y+5, r24	; 0x05
    27da:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <SQACAFrontloadProgramming+0x3>
    27de:	8e 83       	std	Y+6, r24	; 0x06
    27e0:	80 91 a6 08 	lds	r24, 0x08A6	; 0x8008a6 <SQACAFrontloadProgramming+0x4>
    27e4:	8f 83       	std	Y+7, r24	; 0x07
    27e6:	80 91 a7 08 	lds	r24, 0x08A7	; 0x8008a7 <SQACAFrontloadProgramming+0x5>
    27ea:	88 87       	std	Y+8, r24	; 0x08
    27ec:	80 91 a8 08 	lds	r24, 0x08A8	; 0x8008a8 <SQACAFrontloadProgramming+0x6>
    27f0:	89 87       	std	Y+9, r24	; 0x09
    27f2:	80 91 a9 08 	lds	r24, 0x08A9	; 0x8008a9 <SQACAFrontloadProgramming+0x7>
    27f6:	8a 87       	std	Y+10, r24	; 0x0a
    27f8:	80 91 aa 08 	lds	r24, 0x08AA	; 0x8008aa <SQACAFrontloadProgramming+0x8>
    27fc:	8b 87       	std	Y+11, r24	; 0x0b
    27fe:	80 91 ab 08 	lds	r24, 0x08AB	; 0x8008ab <SQACAFrontloadProgramming+0x9>
    2802:	8c 87       	std	Y+12, r24	; 0x0c
    2804:	80 91 ac 08 	lds	r24, 0x08AC	; 0x8008ac <SQACAFrontloadProgramming+0xa>
    2808:	8d 87       	std	Y+13, r24	; 0x0d
    280a:	80 91 ad 08 	lds	r24, 0x08AD	; 0x8008ad <SQACAFrontloadProgramming+0xb>
    280e:	8e 87       	std	Y+14, r24	; 0x0e
    2810:	80 91 ae 08 	lds	r24, 0x08AE	; 0x8008ae <SQACAFrontloadProgramming+0xc>
    2814:	8f 87       	std	Y+15, r24	; 0x0f
    2816:	80 91 af 08 	lds	r24, 0x08AF	; 0x8008af <SQACAFrontloadProgramming+0xd>
    281a:	88 8b       	std	Y+16, r24	; 0x10
    281c:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <SQACAFrontloadProgramming+0xe>
    2820:	89 8b       	std	Y+17, r24	; 0x11
    2822:	80 91 b1 08 	lds	r24, 0x08B1	; 0x8008b1 <SQACAFrontloadProgramming+0xf>
    2826:	8a 8b       	std	Y+18, r24	; 0x12
    2828:	80 91 b2 08 	lds	r24, 0x08B2	; 0x8008b2 <SQACAFrontloadProgramming+0x10>
    282c:	8b 8b       	std	Y+19, r24	; 0x13
    282e:	80 91 b3 08 	lds	r24, 0x08B3	; 0x8008b3 <SQACAFrontloadProgramming+0x11>
    2832:	8c 8b       	std	Y+20, r24	; 0x14
    2834:	80 91 b4 08 	lds	r24, 0x08B4	; 0x8008b4 <SQACAFrontloadProgramming+0x12>
    2838:	8d 8b       	std	Y+21, r24	; 0x15
    283a:	80 91 b5 08 	lds	r24, 0x08B5	; 0x8008b5 <SQACAFrontloadProgramming+0x13>
    283e:	8e 8b       	std	Y+22, r24	; 0x16
    2840:	80 91 b6 08 	lds	r24, 0x08B6	; 0x8008b6 <SQACAFrontloadProgramming+0x14>
    2844:	8f 8b       	std	Y+23, r24	; 0x17
    2846:	80 91 b7 08 	lds	r24, 0x08B7	; 0x8008b7 <SQACAFrontloadProgramming+0x15>
    284a:	88 8f       	std	Y+24, r24	; 0x18
    284c:	80 91 b8 08 	lds	r24, 0x08B8	; 0x8008b8 <SQACAFrontloadProgramming+0x16>
    2850:	89 8f       	std	Y+25, r24	; 0x19
    2852:	80 91 b9 08 	lds	r24, 0x08B9	; 0x8008b9 <SQACAFrontloadProgramming+0x17>
    2856:	8a 8f       	std	Y+26, r24	; 0x1a
    2858:	80 91 ba 08 	lds	r24, 0x08BA	; 0x8008ba <SQACAFrontloadProgramming+0x18>
    285c:	8b 8f       	std	Y+27, r24	; 0x1b
    285e:	80 91 bb 08 	lds	r24, 0x08BB	; 0x8008bb <SQACAFrontloadProgramming+0x19>
    2862:	8c 8f       	std	Y+28, r24	; 0x1c
    2864:	80 91 bc 08 	lds	r24, 0x08BC	; 0x8008bc <SQACAFrontloadProgramming+0x1a>
    2868:	8d 8f       	std	Y+29, r24	; 0x1d
    286a:	80 91 be 08 	lds	r24, 0x08BE	; 0x8008be <SQACAFrontloadProgramming+0x1c>
    286e:	8e 8f       	std	Y+30, r24	; 0x1e
    2870:	80 91 bd 08 	lds	r24, 0x08BD	; 0x8008bd <SQACAFrontloadProgramming+0x1b>
    2874:	8f 8f       	std	Y+31, r24	; 0x1f
    2876:	80 91 bf 08 	lds	r24, 0x08BF	; 0x8008bf <SQACAFrontloadProgramming+0x1d>
    287a:	88 a3       	std	Y+32, r24	; 0x20
    287c:	80 91 c0 08 	lds	r24, 0x08C0	; 0x8008c0 <SQACAFrontloadProgramming+0x1e>
    2880:	89 a3       	std	Y+33, r24	; 0x21
    2882:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <SQACAFrontloadProgramming+0x1f>
    2886:	8a a3       	std	Y+34, r24	; 0x22
    2888:	80 91 c2 08 	lds	r24, 0x08C2	; 0x8008c2 <SQACAFrontloadProgramming+0x20>
    288c:	8b a3       	std	Y+35, r24	; 0x23
    288e:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <SQACAFrontloadProgramming+0x21>
    2892:	8c a3       	std	Y+36, r24	; 0x24
    2894:	80 91 c4 08 	lds	r24, 0x08C4	; 0x8008c4 <SQACAFrontloadProgramming+0x22>
    2898:	8d a3       	std	Y+37, r24	; 0x25
    289a:	80 91 c5 08 	lds	r24, 0x08C5	; 0x8008c5 <SQACAFrontloadProgramming+0x23>
    289e:	8e a3       	std	Y+38, r24	; 0x26
    28a0:	83 ce       	rjmp	.-762    	; 0x25a8 <getSQReaderMachineSetup+0x36>

000028a2 <isAssociated>:
bool isAssociated(void)
{
    bool associated = true;

    //	
	if( (macConfig.associated == false) && (ReaderStateFlag.EnableOfflineTransaction == true) )
    28a2:	80 91 45 0c 	lds	r24, 0x0C45	; 0x800c45 <macConfig+0x8>
    28a6:	81 11       	cpse	r24, r1
    28a8:	08 c0       	rjmp	.+16     	; 0x28ba <isAssociated+0x18>
    28aa:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
    28ae:	83 fb       	bst	r24, 3
    28b0:	99 27       	eor	r25, r25
    28b2:	90 f9       	bld	r25, 0
    28b4:	81 e0       	ldi	r24, 0x01	; 1
    28b6:	89 27       	eor	r24, r25
    28b8:	08 95       	ret
/**
	@brief Machine Status is offline and not and not associated to the network
*/
bool isAssociated(void)
{
    bool associated = true;
    28ba:	81 e0       	ldi	r24, 0x01	; 1
	if( (macConfig.associated == false) && (ReaderStateFlag.EnableOfflineTransaction == true) )
	    
        associated = false;

    return associated;
}
    28bc:	08 95       	ret

000028be <initReader>:
	u8 n;
	char nibbleStr[50] = {"00770076007500740073007200710070006F00190503"};
	char *ptr = &nibbleStr[0] ;
	n = asciiStringToNibble(ptr, nibbleStr); //eeprom address at 0x24
	halPutEeprom(MACHINE_SETUP_ADDR, n, (u8*)ptr);
}
    28be:	45 e3       	ldi	r20, 0x35	; 53
    28c0:	59 e0       	ldi	r21, 0x09	; 9
    28c2:	62 e0       	ldi	r22, 0x02	; 2
    28c4:	82 e2       	ldi	r24, 0x22	; 34
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	0e 94 16 20 	call	0x402c	; 0x402c <halGetEeprom>
    28cc:	42 ef       	ldi	r20, 0xF2	; 242
    28ce:	5a e0       	ldi	r21, 0x0A	; 10
    28d0:	62 e0       	ldi	r22, 0x02	; 2
    28d2:	8e e1       	ldi	r24, 0x1E	; 30
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	0e 94 16 20 	call	0x402c	; 0x402c <halGetEeprom>
    28da:	10 92 bb 09 	sts	0x09BB, r1	; 0x8009bb <ReaderSetup>
    28de:	10 92 bc 09 	sts	0x09BC, r1	; 0x8009bc <ReaderSetup+0x1>
    28e2:	10 92 bd 09 	sts	0x09BD, r1	; 0x8009bd <ReaderSetup+0x2>
    28e6:	10 92 be 09 	sts	0x09BE, r1	; 0x8009be <ReaderSetup+0x3>
    28ea:	81 e0       	ldi	r24, 0x01	; 1
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	90 93 c0 09 	sts	0x09C0, r25	; 0x8009c0 <ReaderSetup+0x5>
    28f2:	80 93 bf 09 	sts	0x09BF, r24	; 0x8009bf <ReaderSetup+0x4>
    28f6:	90 93 c2 09 	sts	0x09C2, r25	; 0x8009c2 <ReaderSetup+0x7>
    28fa:	80 93 c1 09 	sts	0x09C1, r24	; 0x8009c1 <ReaderSetup+0x6>
    28fe:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
    2902:	8f 7b       	andi	r24, 0xBF	; 191
    2904:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
    2908:	81 fd       	sbrc	r24, 1
    290a:	08 95       	ret
    290c:	71 d9       	rcall	.-3358   	; 0x1bf0 <getSQSetupData>
    290e:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
    2912:	84 60       	ori	r24, 0x04	; 4
    2914:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
    2918:	43 ec       	ldi	r20, 0xC3	; 195
    291a:	59 e0       	ldi	r21, 0x09	; 9
    291c:	61 e0       	ldi	r22, 0x01	; 1
    291e:	81 e6       	ldi	r24, 0x61	; 97
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	0e 94 16 20 	call	0x402c	; 0x402c <halGetEeprom>
    2926:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x8>
    292a:	81 11       	cpse	r24, r1
    292c:	1c c0       	rjmp	.+56     	; 0x2966 <initReader+0xa8>
    292e:	8b e0       	ldi	r24, 0x0B	; 11
    2930:	e8 ef       	ldi	r30, 0xF8	; 248
    2932:	f9 e0       	ldi	r31, 0x09	; 9
    2934:	df 01       	movw	r26, r30
    2936:	1d 92       	st	X+, r1
    2938:	8a 95       	dec	r24
    293a:	e9 f7       	brne	.-6      	; 0x2936 <initReader+0x78>
    293c:	83 e3       	ldi	r24, 0x33	; 51
    293e:	e5 ec       	ldi	r30, 0xC5	; 197
    2940:	f9 e0       	ldi	r31, 0x09	; 9
    2942:	df 01       	movw	r26, r30
    2944:	1d 92       	st	X+, r1
    2946:	8a 95       	dec	r24
    2948:	e9 f7       	brne	.-6      	; 0x2944 <initReader+0x86>
    294a:	48 ef       	ldi	r20, 0xF8	; 248
    294c:	59 e0       	ldi	r21, 0x09	; 9
    294e:	6a e0       	ldi	r22, 0x0A	; 10
    2950:	8c e6       	ldi	r24, 0x6C	; 108
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	0e 94 16 20 	call	0x402c	; 0x402c <halGetEeprom>
    2958:	45 ec       	ldi	r20, 0xC5	; 197
    295a:	59 e0       	ldi	r21, 0x09	; 9
    295c:	62 e3       	ldi	r22, 0x32	; 50
    295e:	87 e7       	ldi	r24, 0x77	; 119
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	0c 94 16 20 	jmp	0x402c	; 0x402c <halGetEeprom>
    2966:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
    296a:	88 60       	ori	r24, 0x08	; 8
    296c:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
    2970:	44 ec       	ldi	r20, 0xC4	; 196
    2972:	59 e0       	ldi	r21, 0x09	; 9
    2974:	61 e0       	ldi	r22, 0x01	; 1
    2976:	80 e0       	ldi	r24, 0x00	; 0
    2978:	91 e0       	ldi	r25, 0x01	; 1
    297a:	0e 94 16 20 	call	0x402c	; 0x402c <halGetEeprom>
    297e:	80 91 c4 09 	lds	r24, 0x09C4	; 0x8009c4 <ReaderSetup+0x9>
    2982:	8f 3f       	cpi	r24, 0xFF	; 255
    2984:	a1 f6       	brne	.-88     	; 0x292e <initReader+0x70>
    2986:	10 92 c4 09 	sts	0x09C4, r1	; 0x8009c4 <ReaderSetup+0x9>
    298a:	44 ec       	ldi	r20, 0xC4	; 196
    298c:	59 e0       	ldi	r21, 0x09	; 9
    298e:	61 e0       	ldi	r22, 0x01	; 1
    2990:	80 e0       	ldi	r24, 0x00	; 0
    2992:	91 e0       	ldi	r25, 0x01	; 1
    2994:	0e 94 2b 20 	call	0x4056	; 0x4056 <halPutEeprom>
    2998:	ca cf       	rjmp	.-108    	; 0x292e <initReader+0x70>

0000299a <storeOfflineTransaction>:
    299a:	cf 93       	push	r28
    299c:	df 93       	push	r29
    299e:	cd b7       	in	r28, 0x3d	; 61
    29a0:	de b7       	in	r29, 0x3e	; 62
    29a2:	67 97       	sbiw	r28, 0x17	; 23
    29a4:	0f b6       	in	r0, 0x3f	; 63
    29a6:	f8 94       	cli
    29a8:	de bf       	out	0x3e, r29	; 62
    29aa:	0f be       	out	0x3f, r0	; 63
    29ac:	cd bf       	out	0x3d, r28	; 61
    29ae:	21 e0       	ldi	r18, 0x01	; 1
    29b0:	2f 8b       	std	Y+23, r18	; 0x17
    29b2:	28 e1       	ldi	r18, 0x18	; 24
    29b4:	2e 8b       	std	Y+22, r18	; 0x16
    29b6:	6a 87       	std	Y+10, r22	; 0x0a
    29b8:	7b 87       	std	Y+11, r23	; 0x0b
    29ba:	8c 87       	std	Y+12, r24	; 0x0c
    29bc:	9d 87       	std	Y+13, r25	; 0x0d
    29be:	80 91 c1 09 	lds	r24, 0x09C1	; 0x8009c1 <ReaderSetup+0x6>
    29c2:	90 91 c2 09 	lds	r25, 0x09C2	; 0x8009c2 <ReaderSetup+0x7>
    29c6:	9a 83       	std	Y+2, r25	; 0x02
    29c8:	89 83       	std	Y+1, r24	; 0x01
    29ca:	80 91 f6 0a 	lds	r24, 0x0AF6	; 0x800af6 <SQACAMachineStatus>
    29ce:	8b 83       	std	Y+3, r24	; 0x03
    29d0:	80 91 f7 0a 	lds	r24, 0x0AF7	; 0x800af7 <SQACAMachineStatus+0x1>
    29d4:	8c 83       	std	Y+4, r24	; 0x04
    29d6:	80 91 f8 0a 	lds	r24, 0x0AF8	; 0x800af8 <SQACAMachineStatus+0x2>
    29da:	8f 83       	std	Y+7, r24	; 0x07
    29dc:	20 91 bf 09 	lds	r18, 0x09BF	; 0x8009bf <ReaderSetup+0x4>
    29e0:	30 91 c0 09 	lds	r19, 0x09C0	; 0x8009c0 <ReaderSetup+0x5>
    29e4:	3e 83       	std	Y+6, r19	; 0x06
    29e6:	2d 83       	std	Y+5, r18	; 0x05
    29e8:	90 91 f2 0a 	lds	r25, 0x0AF2	; 0x800af2 <deviceStatus>
    29ec:	92 32       	cpi	r25, 0x22	; 34
    29ee:	09 f4       	brne	.+2      	; 0x29f2 <storeOfflineTransaction+0x58>
    29f0:	6d c0       	rjmp	.+218    	; 0x2acc <storeOfflineTransaction+0x132>
    29f2:	99 32       	cpi	r25, 0x29	; 41
    29f4:	09 f4       	brne	.+2      	; 0x29f8 <storeOfflineTransaction+0x5e>
    29f6:	5b c0       	rjmp	.+182    	; 0x2aae <storeOfflineTransaction+0x114>
    29f8:	91 32       	cpi	r25, 0x21	; 33
    29fa:	09 f4       	brne	.+2      	; 0x29fe <storeOfflineTransaction+0x64>
    29fc:	4c c0       	rjmp	.+152    	; 0x2a96 <storeOfflineTransaction+0xfc>
    29fe:	1e 86       	std	Y+14, r1	; 0x0e
    2a00:	1f 86       	std	Y+15, r1	; 0x0f
    2a02:	18 8a       	std	Y+16, r1	; 0x10
    2a04:	19 8a       	std	Y+17, r1	; 0x11
    2a06:	1a 8a       	std	Y+18, r1	; 0x12
    2a08:	1b 8a       	std	Y+19, r1	; 0x13
    2a0a:	1c 8a       	std	Y+20, r1	; 0x14
    2a0c:	81 e0       	ldi	r24, 0x01	; 1
    2a0e:	8d 8b       	std	Y+21, r24	; 0x15
    2a10:	44 ec       	ldi	r20, 0xC4	; 196
    2a12:	59 e0       	ldi	r21, 0x09	; 9
    2a14:	61 e0       	ldi	r22, 0x01	; 1
    2a16:	80 e0       	ldi	r24, 0x00	; 0
    2a18:	91 e0       	ldi	r25, 0x01	; 1
    2a1a:	0e 94 16 20 	call	0x402c	; 0x402c <halGetEeprom>
    2a1e:	80 91 c4 09 	lds	r24, 0x09C4	; 0x8009c4 <ReaderSetup+0x9>
    2a22:	8f 3f       	cpi	r24, 0xFF	; 255
    2a24:	09 f4       	brne	.+2      	; 0x2a28 <storeOfflineTransaction+0x8e>
    2a26:	ad c0       	rjmp	.+346    	; 0x2b82 <storeOfflineTransaction+0x1e8>
    2a28:	90 91 c3 09 	lds	r25, 0x09C3	; 0x8009c3 <ReaderSetup+0x8>
    2a2c:	89 17       	cp	r24, r25
    2a2e:	08 f0       	brcs	.+2      	; 0x2a32 <storeOfflineTransaction+0x98>
    2a30:	55 c0       	rjmp	.+170    	; 0x2adc <storeOfflineTransaction+0x142>
    2a32:	9f ef       	ldi	r25, 0xFF	; 255
    2a34:	98 0f       	add	r25, r24
    2a36:	9e 3f       	cpi	r25, 0xFE	; 254
    2a38:	08 f0       	brcs	.+2      	; 0x2a3c <storeOfflineTransaction+0xa2>
    2a3a:	a3 c0       	rjmp	.+326    	; 0x2b82 <storeOfflineTransaction+0x1e8>
    2a3c:	25 e1       	ldi	r18, 0x15	; 21
    2a3e:	82 9f       	mul	r24, r18
    2a40:	c0 01       	movw	r24, r0
    2a42:	11 24       	eor	r1, r1
    2a44:	ae 01       	movw	r20, r28
    2a46:	4f 5f       	subi	r20, 0xFF	; 255
    2a48:	5f 4f       	sbci	r21, 0xFF	; 255
    2a4a:	65 e1       	ldi	r22, 0x15	; 21
    2a4c:	88 5e       	subi	r24, 0xE8	; 232
    2a4e:	9e 4f       	sbci	r25, 0xFE	; 254
    2a50:	0e 94 2b 20 	call	0x4056	; 0x4056 <halPutEeprom>
    2a54:	80 91 c4 09 	lds	r24, 0x09C4	; 0x8009c4 <ReaderSetup+0x9>
    2a58:	8f 5f       	subi	r24, 0xFF	; 255
    2a5a:	80 93 c4 09 	sts	0x09C4, r24	; 0x8009c4 <ReaderSetup+0x9>
    2a5e:	44 ec       	ldi	r20, 0xC4	; 196
    2a60:	59 e0       	ldi	r21, 0x09	; 9
    2a62:	61 e0       	ldi	r22, 0x01	; 1
    2a64:	80 e0       	ldi	r24, 0x00	; 0
    2a66:	91 e0       	ldi	r25, 0x01	; 1
    2a68:	0e 94 2b 20 	call	0x4056	; 0x4056 <halPutEeprom>
    2a6c:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
    2a70:	85 ff       	sbrs	r24, 5
    2a72:	94 c0       	rjmp	.+296    	; 0x2b9c <storeOfflineTransaction+0x202>
    2a74:	90 91 c4 09 	lds	r25, 0x09C4	; 0x8009c4 <ReaderSetup+0x9>
    2a78:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x8>
    2a7c:	98 17       	cp	r25, r24
    2a7e:	09 f4       	brne	.+2      	; 0x2a82 <storeOfflineTransaction+0xe8>
    2a80:	98 c0       	rjmp	.+304    	; 0x2bb2 <storeOfflineTransaction+0x218>
    2a82:	81 e0       	ldi	r24, 0x01	; 1
    2a84:	67 96       	adiw	r28, 0x17	; 23
    2a86:	0f b6       	in	r0, 0x3f	; 63
    2a88:	f8 94       	cli
    2a8a:	de bf       	out	0x3e, r29	; 62
    2a8c:	0f be       	out	0x3f, r0	; 63
    2a8e:	cd bf       	out	0x3d, r28	; 61
    2a90:	df 91       	pop	r29
    2a92:	cf 91       	pop	r28
    2a94:	08 95       	ret
    2a96:	48 2f       	mov	r20, r24
    2a98:	50 e0       	ldi	r21, 0x00	; 0
    2a9a:	fa 01       	movw	r30, r20
    2a9c:	31 97       	sbiw	r30, 0x01	; 1
    2a9e:	e9 30       	cpi	r30, 0x09	; 9
    2aa0:	f1 05       	cpc	r31, r1
    2aa2:	b0 f1       	brcs	.+108    	; 0x2b10 <storeOfflineTransaction+0x176>
    2aa4:	fa 01       	movw	r30, r20
    2aa6:	31 97       	sbiw	r30, 0x01	; 1
    2aa8:	e9 30       	cpi	r30, 0x09	; 9
    2aaa:	f1 05       	cpc	r31, r1
    2aac:	68 f1       	brcs	.+90     	; 0x2b08 <storeOfflineTransaction+0x16e>
    2aae:	83 30       	cpi	r24, 0x03	; 3
    2ab0:	f1 f1       	breq	.+124    	; 0x2b2e <storeOfflineTransaction+0x194>
    2ab2:	90 f1       	brcs	.+100    	; 0x2b18 <storeOfflineTransaction+0x17e>
    2ab4:	84 30       	cpi	r24, 0x04	; 4
    2ab6:	09 f4       	brne	.+2      	; 0x2aba <storeOfflineTransaction+0x120>
    2ab8:	40 c0       	rjmp	.+128    	; 0x2b3a <storeOfflineTransaction+0x1a0>
    2aba:	85 30       	cpi	r24, 0x05	; 5
    2abc:	09 f0       	breq	.+2      	; 0x2ac0 <storeOfflineTransaction+0x126>
    2abe:	9f cf       	rjmp	.-194    	; 0x29fe <storeOfflineTransaction+0x64>
    2ac0:	80 91 11 0a 	lds	r24, 0x0A11	; 0x800a11 <SQACADryerProgramming+0xc>
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	99 87       	std	Y+9, r25	; 0x09
    2ac8:	88 87       	std	Y+8, r24	; 0x08
    2aca:	99 cf       	rjmp	.-206    	; 0x29fe <storeOfflineTransaction+0x64>
    2acc:	48 2f       	mov	r20, r24
    2ace:	50 e0       	ldi	r21, 0x00	; 0
    2ad0:	fa 01       	movw	r30, r20
    2ad2:	31 97       	sbiw	r30, 0x01	; 1
    2ad4:	e9 30       	cpi	r30, 0x09	; 9
    2ad6:	f1 05       	cpc	r31, r1
    2ad8:	50 f7       	brcc	.-44     	; 0x2aae <storeOfflineTransaction+0x114>
    2ada:	16 c0       	rjmp	.+44     	; 0x2b08 <storeOfflineTransaction+0x16e>
    2adc:	45 e3       	ldi	r20, 0x35	; 53
    2ade:	59 e0       	ldi	r21, 0x09	; 9
    2ae0:	61 e0       	ldi	r22, 0x01	; 1
    2ae2:	82 e2       	ldi	r24, 0x22	; 34
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	0e 94 16 20 	call	0x402c	; 0x402c <halGetEeprom>
    2aea:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
    2aee:	87 7f       	andi	r24, 0xF7	; 247
    2af0:	80 61       	ori	r24, 0x10	; 16
    2af2:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
    2af6:	45 e3       	ldi	r20, 0x35	; 53
    2af8:	59 e0       	ldi	r21, 0x09	; 9
    2afa:	61 e0       	ldi	r22, 0x01	; 1
    2afc:	82 e2       	ldi	r24, 0x22	; 34
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	0e 94 2b 20 	call	0x4056	; 0x4056 <halPutEeprom>
    2b04:	80 e0       	ldi	r24, 0x00	; 0
    2b06:	be cf       	rjmp	.-132    	; 0x2a84 <storeOfflineTransaction+0xea>
    2b08:	e6 53       	subi	r30, 0x36	; 54
    2b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0c:	0c 94 24 2f 	jmp	0x5e48	; 0x5e48 <__tablejump2__>
    2b10:	ed 52       	subi	r30, 0x2D	; 45
    2b12:	ff 4f       	sbci	r31, 0xFF	; 255
    2b14:	0c 94 24 2f 	jmp	0x5e48	; 0x5e48 <__tablejump2__>
    2b18:	81 30       	cpi	r24, 0x01	; 1
    2b1a:	a9 f0       	breq	.+42     	; 0x2b46 <storeOfflineTransaction+0x1ac>
    2b1c:	82 30       	cpi	r24, 0x02	; 2
    2b1e:	09 f0       	breq	.+2      	; 0x2b22 <storeOfflineTransaction+0x188>
    2b20:	6e cf       	rjmp	.-292    	; 0x29fe <storeOfflineTransaction+0x64>
    2b22:	80 91 0f 0a 	lds	r24, 0x0A0F	; 0x800a0f <SQACADryerProgramming+0xa>
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	99 87       	std	Y+9, r25	; 0x09
    2b2a:	88 87       	std	Y+8, r24	; 0x08
    2b2c:	68 cf       	rjmp	.-304    	; 0x29fe <storeOfflineTransaction+0x64>
    2b2e:	80 91 13 0a 	lds	r24, 0x0A13	; 0x800a13 <SQACADryerProgramming+0xe>
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	99 87       	std	Y+9, r25	; 0x09
    2b36:	88 87       	std	Y+8, r24	; 0x08
    2b38:	62 cf       	rjmp	.-316    	; 0x29fe <storeOfflineTransaction+0x64>
    2b3a:	80 91 0d 0a 	lds	r24, 0x0A0D	; 0x800a0d <SQACADryerProgramming+0x8>
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	99 87       	std	Y+9, r25	; 0x09
    2b42:	88 87       	std	Y+8, r24	; 0x08
    2b44:	5c cf       	rjmp	.-328    	; 0x29fe <storeOfflineTransaction+0x64>
    2b46:	80 91 cf 08 	lds	r24, 0x08CF	; 0x8008cf <SQACAToploadProgramming+0x6>
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	99 87       	std	Y+9, r25	; 0x09
    2b4e:	88 87       	std	Y+8, r24	; 0x08
    2b50:	56 cf       	rjmp	.-340    	; 0x29fe <storeOfflineTransaction+0x64>
    2b52:	80 91 b8 08 	lds	r24, 0x08B8	; 0x8008b8 <SQACAFrontloadProgramming+0x16>
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	99 87       	std	Y+9, r25	; 0x09
    2b5a:	88 87       	std	Y+8, r24	; 0x08
    2b5c:	50 cf       	rjmp	.-352    	; 0x29fe <storeOfflineTransaction+0x64>
    2b5e:	80 91 b6 08 	lds	r24, 0x08B6	; 0x8008b6 <SQACAFrontloadProgramming+0x14>
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	99 87       	std	Y+9, r25	; 0x09
    2b66:	88 87       	std	Y+8, r24	; 0x08
    2b68:	4a cf       	rjmp	.-364    	; 0x29fe <storeOfflineTransaction+0x64>
    2b6a:	80 91 b4 08 	lds	r24, 0x08B4	; 0x8008b4 <SQACAFrontloadProgramming+0x12>
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	99 87       	std	Y+9, r25	; 0x09
    2b72:	88 87       	std	Y+8, r24	; 0x08
    2b74:	44 cf       	rjmp	.-376    	; 0x29fe <storeOfflineTransaction+0x64>
    2b76:	80 91 b2 08 	lds	r24, 0x08B2	; 0x8008b2 <SQACAFrontloadProgramming+0x10>
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	99 87       	std	Y+9, r25	; 0x09
    2b7e:	88 87       	std	Y+8, r24	; 0x08
    2b80:	3e cf       	rjmp	.-388    	; 0x29fe <storeOfflineTransaction+0x64>
    2b82:	10 92 c4 09 	sts	0x09C4, r1	; 0x8009c4 <ReaderSetup+0x9>
    2b86:	ae 01       	movw	r20, r28
    2b88:	4a 5e       	subi	r20, 0xEA	; 234
    2b8a:	5f 4f       	sbci	r21, 0xFF	; 255
    2b8c:	62 e0       	ldi	r22, 0x02	; 2
    2b8e:	81 e0       	ldi	r24, 0x01	; 1
    2b90:	91 e0       	ldi	r25, 0x01	; 1
    2b92:	0e 94 2b 20 	call	0x4056	; 0x4056 <halPutEeprom>
    2b96:	80 91 c4 09 	lds	r24, 0x09C4	; 0x8009c4 <ReaderSetup+0x9>
    2b9a:	50 cf       	rjmp	.-352    	; 0x2a3c <storeOfflineTransaction+0xa2>
    2b9c:	80 62       	ori	r24, 0x20	; 32
    2b9e:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
    2ba2:	45 e3       	ldi	r20, 0x35	; 53
    2ba4:	59 e0       	ldi	r21, 0x09	; 9
    2ba6:	62 e0       	ldi	r22, 0x02	; 2
    2ba8:	82 e2       	ldi	r24, 0x22	; 34
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	0e 94 2b 20 	call	0x4056	; 0x4056 <halPutEeprom>
    2bb0:	61 cf       	rjmp	.-318    	; 0x2a74 <storeOfflineTransaction+0xda>
    2bb2:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
    2bb6:	80 61       	ori	r24, 0x10	; 16
    2bb8:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
    2bbc:	45 e3       	ldi	r20, 0x35	; 53
    2bbe:	59 e0       	ldi	r21, 0x09	; 9
    2bc0:	62 e0       	ldi	r22, 0x02	; 2
    2bc2:	82 e2       	ldi	r24, 0x22	; 34
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	0e 94 2b 20 	call	0x4056	; 0x4056 <halPutEeprom>
    2bca:	81 e0       	ldi	r24, 0x01	; 1
    2bcc:	5b cf       	rjmp	.-330    	; 0x2a84 <storeOfflineTransaction+0xea>

00002bce <sendStoredTransaction>:
    2bce:	cf 93       	push	r28
    2bd0:	df 93       	push	r29
    2bd2:	cd b7       	in	r28, 0x3d	; 61
    2bd4:	de b7       	in	r29, 0x3e	; 62
    2bd6:	67 97       	sbiw	r28, 0x17	; 23
    2bd8:	0f b6       	in	r0, 0x3f	; 63
    2bda:	f8 94       	cli
    2bdc:	de bf       	out	0x3e, r29	; 62
    2bde:	0f be       	out	0x3f, r0	; 63
    2be0:	cd bf       	out	0x3d, r28	; 61
    2be2:	44 ec       	ldi	r20, 0xC4	; 196
    2be4:	59 e0       	ldi	r21, 0x09	; 9
    2be6:	61 e0       	ldi	r22, 0x01	; 1
    2be8:	80 e0       	ldi	r24, 0x00	; 0
    2bea:	91 e0       	ldi	r25, 0x01	; 1
    2bec:	0e 94 16 20 	call	0x402c	; 0x402c <halGetEeprom>
    2bf0:	80 91 c4 09 	lds	r24, 0x09C4	; 0x8009c4 <ReaderSetup+0x9>
    2bf4:	9f ef       	ldi	r25, 0xFF	; 255
    2bf6:	98 0f       	add	r25, r24
    2bf8:	9e 3f       	cpi	r25, 0xFE	; 254
    2bfa:	d0 f0       	brcs	.+52     	; 0x2c30 <sendStoredTransaction+0x62>
    2bfc:	81 11       	cpse	r24, r1
    2bfe:	0f c0       	rjmp	.+30     	; 0x2c1e <sendStoredTransaction+0x50>
    2c00:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag>
    2c04:	8f 7d       	andi	r24, 0xDF	; 223
    2c06:	8f 7e       	andi	r24, 0xEF	; 239
    2c08:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag>
    2c0c:	45 e3       	ldi	r20, 0x35	; 53
    2c0e:	59 e0       	ldi	r21, 0x09	; 9
    2c10:	61 e0       	ldi	r22, 0x01	; 1
    2c12:	82 e2       	ldi	r24, 0x22	; 34
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	0e 94 2b 20 	call	0x4056	; 0x4056 <halPutEeprom>
    2c1a:	80 91 c4 09 	lds	r24, 0x09C4	; 0x8009c4 <ReaderSetup+0x9>
    2c1e:	67 96       	adiw	r28, 0x17	; 23
    2c20:	0f b6       	in	r0, 0x3f	; 63
    2c22:	f8 94       	cli
    2c24:	de bf       	out	0x3e, r29	; 62
    2c26:	0f be       	out	0x3f, r0	; 63
    2c28:	cd bf       	out	0x3d, r28	; 61
    2c2a:	df 91       	pop	r29
    2c2c:	cf 91       	pop	r28
    2c2e:	08 95       	ret
    2c30:	ae 01       	movw	r20, r28
    2c32:	4a 5e       	subi	r20, 0xEA	; 234
    2c34:	5f 4f       	sbci	r21, 0xFF	; 255
    2c36:	62 e0       	ldi	r22, 0x02	; 2
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	91 e0       	ldi	r25, 0x01	; 1
    2c3c:	0e 94 16 20 	call	0x402c	; 0x402c <halGetEeprom>
    2c40:	ae 01       	movw	r20, r28
    2c42:	4f 5f       	subi	r20, 0xFF	; 255
    2c44:	5f 4f       	sbci	r21, 0xFF	; 255
    2c46:	65 e1       	ldi	r22, 0x15	; 21
    2c48:	8e 89       	ldd	r24, Y+22	; 0x16
    2c4a:	9f 89       	ldd	r25, Y+23	; 0x17
    2c4c:	0e 94 16 20 	call	0x402c	; 0x402c <halGetEeprom>
    2c50:	ce 01       	movw	r24, r28
    2c52:	01 96       	adiw	r24, 0x01	; 1
    2c54:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <sendBOWCCTransaction>
    2c58:	81 11       	cpse	r24, r1
    2c5a:	03 c0       	rjmp	.+6      	; 0x2c62 <sendStoredTransaction+0x94>
    2c5c:	80 91 c4 09 	lds	r24, 0x09C4	; 0x8009c4 <ReaderSetup+0x9>
    2c60:	cd cf       	rjmp	.-102    	; 0x2bfc <sendStoredTransaction+0x2e>
    2c62:	8e 89       	ldd	r24, Y+22	; 0x16
    2c64:	9f 89       	ldd	r25, Y+23	; 0x17
    2c66:	45 96       	adiw	r24, 0x15	; 21
    2c68:	9f 8b       	std	Y+23, r25	; 0x17
    2c6a:	8e 8b       	std	Y+22, r24	; 0x16
    2c6c:	80 91 c4 09 	lds	r24, 0x09C4	; 0x8009c4 <ReaderSetup+0x9>
    2c70:	81 50       	subi	r24, 0x01	; 1
    2c72:	80 93 c4 09 	sts	0x09C4, r24	; 0x8009c4 <ReaderSetup+0x9>
    2c76:	ae 01       	movw	r20, r28
    2c78:	4a 5e       	subi	r20, 0xEA	; 234
    2c7a:	5f 4f       	sbci	r21, 0xFF	; 255
    2c7c:	62 e0       	ldi	r22, 0x02	; 2
    2c7e:	81 e0       	ldi	r24, 0x01	; 1
    2c80:	91 e0       	ldi	r25, 0x01	; 1
    2c82:	0e 94 2b 20 	call	0x4056	; 0x4056 <halPutEeprom>
    2c86:	44 ec       	ldi	r20, 0xC4	; 196
    2c88:	59 e0       	ldi	r21, 0x09	; 9
    2c8a:	61 e0       	ldi	r22, 0x01	; 1
    2c8c:	80 e0       	ldi	r24, 0x00	; 0
    2c8e:	91 e0       	ldi	r25, 0x01	; 1
    2c90:	0e 94 2b 20 	call	0x4056	; 0x4056 <halPutEeprom>
    2c94:	e3 cf       	rjmp	.-58     	; 0x2c5c <sendStoredTransaction+0x8e>

00002c96 <WaitForMachine>:



void WaitForMachine(void)
{
	ucMachineWait = MACHINE_TIME_OUT;
    2c96:	81 e0       	ldi	r24, 0x01	; 1
    2c98:	80 93 b9 09 	sts	0x09B9, r24	; 0x8009b9 <ucMachineWait>
    2c9c:	08 95       	ret

00002c9e <InitTimerZero>:
/** @brief Function to initialize the hardware Timer

*/
void InitTimerZero(void)
{
	TIFR0 = 2;//1<<TOV0;					//clear TOV0 / clear interrupt
    2c9e:	82 e0       	ldi	r24, 0x02	; 2
    2ca0:	85 bb       	out	0x15, r24	; 21
	TIMSK0 = 2;//1<<TOIE0;				//enable timer0 overflow interrupt
    2ca2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	TCNT0 = 0;//16;
    2ca6:	16 bc       	out	0x26, r1	; 38
	ucTimerCount = 0;
    2ca8:	10 92 16 0b 	sts	0x0B16, r1	; 0x800b16 <ucTimerCount>
    2cac:	08 95       	ret

00002cae <StopTimerZero>:
/** @brief Stop the hardware timer running.

*/
void StopTimerZero(void)
{
	TCCR0B = 0;//~(1<<CS02) | ~(1<<CS01) | ~(1<<CS00);	//set prescaler to zero
    2cae:	15 bc       	out	0x25, r1	; 37
    2cb0:	08 95       	ret

00002cb2 <StartTimerZero>:
/** @brief Start the hardware timer running.
set timer zero to 5 milisecond resolution and start
*/
void StartTimerZero(void)
{
	OCR0A = 78;
    2cb2:	8e e4       	ldi	r24, 0x4E	; 78
    2cb4:	87 bd       	out	0x27, r24	; 39
	TCCR0A = 2;
    2cb6:	82 e0       	ldi	r24, 0x02	; 2
    2cb8:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS02) | (1<<CS00);	//set prescaler to 1024
    2cba:	85 e0       	ldi	r24, 0x05	; 5
    2cbc:	85 bd       	out	0x25, r24	; 37
    2cbe:	08 95       	ret

00002cc0 <__vector_21>:

/**
@brief Timer interrupt service routine.
*/
ISR(TIMER0_COMPA_vect)
{
    2cc0:	1f 92       	push	r1
    2cc2:	0f 92       	push	r0
    2cc4:	0f b6       	in	r0, 0x3f	; 63
    2cc6:	0f 92       	push	r0
    2cc8:	11 24       	eor	r1, r1
    2cca:	8f 93       	push	r24
	ucTimerCount++;
    2ccc:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <ucTimerCount>
    2cd0:	8f 5f       	subi	r24, 0xFF	; 255
    2cd2:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <ucTimerCount>

}
    2cd6:	8f 91       	pop	r24
    2cd8:	0f 90       	pop	r0
    2cda:	0f be       	out	0x3f, r0	; 63
    2cdc:	0f 90       	pop	r0
    2cde:	1f 90       	pop	r1
    2ce0:	18 95       	reti

00002ce2 <padLeft>:
\param string is the string size.
\param paddedLength is the data size.
\param pad is pointer to data to be converted.
*/
char * padLeft(char * string, u8 paddedLength, const char * pad)
{
    2ce2:	7f 92       	push	r7
    2ce4:	8f 92       	push	r8
    2ce6:	9f 92       	push	r9
    2ce8:	af 92       	push	r10
    2cea:	bf 92       	push	r11
    2cec:	cf 92       	push	r12
    2cee:	df 92       	push	r13
    2cf0:	ef 92       	push	r14
    2cf2:	ff 92       	push	r15
    2cf4:	0f 93       	push	r16
    2cf6:	1f 93       	push	r17
    2cf8:	cf 93       	push	r28
    2cfa:	df 93       	push	r29
    2cfc:	5c 01       	movw	r10, r24
    2cfe:	76 2e       	mov	r7, r22
    2d00:	6a 01       	movw	r12, r20
	size_t stringLength = strlen(string);
    2d02:	ec 01       	movw	r28, r24
    2d04:	09 90       	ld	r0, Y+
    2d06:	00 20       	and	r0, r0
    2d08:	e9 f7       	brne	.-6      	; 0x2d04 <padLeft+0x22>
    2d0a:	21 97       	sbiw	r28, 0x01	; 1
    2d0c:	7e 01       	movw	r14, r28
    2d0e:	e8 1a       	sub	r14, r24
    2d10:	f9 0a       	sbc	r15, r25
	size_t lenpad = strlen(pad);
    2d12:	fa 01       	movw	r30, r20
    2d14:	01 90       	ld	r0, Z+
    2d16:	00 20       	and	r0, r0
    2d18:	e9 f7       	brne	.-6      	; 0x2d14 <padLeft+0x32>
    2d1a:	31 97       	sbiw	r30, 0x01	; 1
    2d1c:	8f 01       	movw	r16, r30
    2d1e:	04 1b       	sub	r16, r20
    2d20:	15 0b       	sbc	r17, r21
	u8 i = paddedLength;
	
	if (stringLength >= paddedLength)
    2d22:	86 2e       	mov	r8, r22
    2d24:	91 2c       	mov	r9, r1
    2d26:	e8 14       	cp	r14, r8
    2d28:	f9 04       	cpc	r15, r9
    2d2a:	80 f5       	brcc	.+96     	; 0x2d8c <padLeft+0xaa>
	{
		return NULL;//'\0';
	}

	char * padded = (char*)malloc(paddedLength + 1); // allocate memory for new string
    2d2c:	c4 01       	movw	r24, r8
    2d2e:	01 96       	adiw	r24, 0x01	; 1
    2d30:	0e 94 6e 2f 	call	0x5edc	; 0x5edc <malloc>
    2d34:	ec 01       	movw	r28, r24
	
	for(; paddedLength > stringLength; paddedLength--, padded += lenpad)
	{
		strncpy(padded, pad, lenpad);
    2d36:	a8 01       	movw	r20, r16
    2d38:	b6 01       	movw	r22, r12
    2d3a:	ce 01       	movw	r24, r28
    2d3c:	0e 94 61 33 	call	0x66c2	; 0x66c2 <strncpy>
		return NULL;//'\0';
	}

	char * padded = (char*)malloc(paddedLength + 1); // allocate memory for new string
	
	for(; paddedLength > stringLength; paddedLength--, padded += lenpad)
    2d40:	7a 94       	dec	r7
    2d42:	c0 0f       	add	r28, r16
    2d44:	d1 1f       	adc	r29, r17
    2d46:	87 2d       	mov	r24, r7
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	e8 16       	cp	r14, r24
    2d4c:	f9 06       	cpc	r15, r25
    2d4e:	98 f3       	brcs	.-26     	; 0x2d36 <padLeft+0x54>
	{
		strncpy(padded, pad, lenpad);
	}
	
	strncpy(padded, string, stringLength); /* copy without '\0' */
    2d50:	a7 01       	movw	r20, r14
    2d52:	b5 01       	movw	r22, r10
    2d54:	ce 01       	movw	r24, r28
    2d56:	0e 94 61 33 	call	0x66c2	; 0x66c2 <strncpy>
	padded += stringLength; /* prepare for first append of pad */
    2d5a:	ce 0d       	add	r28, r14
    2d5c:	df 1d       	adc	r29, r15
	*padded = '\0';
    2d5e:	18 82       	st	Y, r1

	padded = (padded - i);
    2d60:	c8 19       	sub	r28, r8
    2d62:	d9 09       	sbc	r29, r9
	strncpy(string,padded,i);
    2d64:	a4 01       	movw	r20, r8
    2d66:	be 01       	movw	r22, r28
    2d68:	c5 01       	movw	r24, r10
    2d6a:	0e 94 61 33 	call	0x66c2	; 0x66c2 <strncpy>
	
	return padded;
    2d6e:	ce 01       	movw	r24, r28
}
    2d70:	df 91       	pop	r29
    2d72:	cf 91       	pop	r28
    2d74:	1f 91       	pop	r17
    2d76:	0f 91       	pop	r16
    2d78:	ff 90       	pop	r15
    2d7a:	ef 90       	pop	r14
    2d7c:	df 90       	pop	r13
    2d7e:	cf 90       	pop	r12
    2d80:	bf 90       	pop	r11
    2d82:	af 90       	pop	r10
    2d84:	9f 90       	pop	r9
    2d86:	8f 90       	pop	r8
    2d88:	7f 90       	pop	r7
    2d8a:	08 95       	ret
	size_t lenpad = strlen(pad);
	u8 i = paddedLength;
	
	if (stringLength >= paddedLength)
	{
		return NULL;//'\0';
    2d8c:	80 e0       	ldi	r24, 0x00	; 0
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	ef cf       	rjmp	.-34     	; 0x2d70 <padLeft+0x8e>

00002d92 <SetTimeOut>:
	tmp[13]=255-addr;
	tmp[14]=tmp[12];
	tmp[15]=tmp[13];
	status=Write(addr,tmp);
	return status;
}
    2d92:	cf 93       	push	r28
    2d94:	df 93       	push	r29
    2d96:	9c 01       	movw	r18, r24
    2d98:	36 95       	lsr	r19
    2d9a:	27 95       	ror	r18
    2d9c:	36 95       	lsr	r19
    2d9e:	27 95       	ror	r18
    2da0:	ab e7       	ldi	r26, 0x7B	; 123
    2da2:	b4 e1       	ldi	r27, 0x14	; 20
    2da4:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <__umulhisi3>
    2da8:	ec 01       	movw	r28, r24
    2daa:	d6 95       	lsr	r29
    2dac:	c7 95       	ror	r28
    2dae:	40 e8       	ldi	r20, 0x80	; 128
    2db0:	61 e0       	ldi	r22, 0x01	; 1
    2db2:	8a e2       	ldi	r24, 0x2A	; 42
    2db4:	f8 d4       	rcall	.+2544   	; 0x37a6 <RcModifyReg>
    2db6:	66 ea       	ldi	r22, 0xA6	; 166
    2db8:	8b e2       	ldi	r24, 0x2B	; 43
    2dba:	db d4       	rcall	.+2486   	; 0x3772 <RcSetReg>
    2dbc:	8a e2       	ldi	r24, 0x2A	; 42
    2dbe:	eb d4       	rcall	.+2518   	; 0x3796 <RcGetReg>
    2dc0:	80 7f       	andi	r24, 0xF0	; 240
    2dc2:	68 2f       	mov	r22, r24
    2dc4:	62 60       	ori	r22, 0x02	; 2
    2dc6:	8a e2       	ldi	r24, 0x2A	; 42
    2dc8:	d4 d4       	rcall	.+2472   	; 0x3772 <RcSetReg>
    2dca:	6c 2f       	mov	r22, r28
    2dcc:	8d e2       	ldi	r24, 0x2D	; 45
    2dce:	d1 d4       	rcall	.+2466   	; 0x3772 <RcSetReg>
    2dd0:	6d 2f       	mov	r22, r29
    2dd2:	8c e2       	ldi	r24, 0x2C	; 44
    2dd4:	ce d4       	rcall	.+2460   	; 0x3772 <RcSetReg>
    2dd6:	80 e0       	ldi	r24, 0x00	; 0
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	df 91       	pop	r29
    2ddc:	cf 91       	pop	r28
    2dde:	08 95       	ret

00002de0 <Rc522Init>:
    2de0:	6f e0       	ldi	r22, 0x0F	; 15
    2de2:	81 e0       	ldi	r24, 0x01	; 1
    2de4:	c6 d4       	rcall	.+2444   	; 0x3772 <RcSetReg>
    2de6:	60 e4       	ldi	r22, 0x40	; 64
    2de8:	85 e1       	ldi	r24, 0x15	; 21
    2dea:	c3 d4       	rcall	.+2438   	; 0x3772 <RcSetReg>
    2dec:	48 e0       	ldi	r20, 0x08	; 8
    2dee:	60 e0       	ldi	r22, 0x00	; 0
    2df0:	88 e0       	ldi	r24, 0x08	; 8
    2df2:	d9 d4       	rcall	.+2482   	; 0x37a6 <RcModifyReg>
    2df4:	82 e1       	ldi	r24, 0x12	; 18
    2df6:	cf d4       	rcall	.+2462   	; 0x3796 <RcGetReg>
    2df8:	88 70       	andi	r24, 0x08	; 8
    2dfa:	68 2f       	mov	r22, r24
    2dfc:	60 68       	ori	r22, 0x80	; 128
    2dfe:	82 e1       	ldi	r24, 0x12	; 18
    2e00:	b8 d4       	rcall	.+2416   	; 0x3772 <RcSetReg>
    2e02:	83 e1       	ldi	r24, 0x13	; 19
    2e04:	c8 d4       	rcall	.+2448   	; 0x3796 <RcGetReg>
    2e06:	88 70       	andi	r24, 0x08	; 8
    2e08:	68 2f       	mov	r22, r24
    2e0a:	60 68       	ori	r22, 0x80	; 128
    2e0c:	83 e1       	ldi	r24, 0x13	; 19
    2e0e:	b1 d4       	rcall	.+2402   	; 0x3772 <RcSetReg>
    2e10:	6d e6       	ldi	r22, 0x6D	; 109
    2e12:	89 e1       	ldi	r24, 0x19	; 25
    2e14:	ae d4       	rcall	.+2396   	; 0x3772 <RcSetReg>
    2e16:	68 e4       	ldi	r22, 0x48	; 72
    2e18:	86 e2       	ldi	r24, 0x26	; 38
    2e1a:	ab d4       	rcall	.+2390   	; 0x3772 <RcSetReg>
    2e1c:	65 e5       	ldi	r22, 0x55	; 85
    2e1e:	88 e1       	ldi	r24, 0x18	; 24
    2e20:	a8 d4       	rcall	.+2384   	; 0x3772 <RcSetReg>
    2e22:	66 e2       	ldi	r22, 0x26	; 38
    2e24:	84 e2       	ldi	r24, 0x24	; 36
    2e26:	a5 d4       	rcall	.+2378   	; 0x3772 <RcSetReg>
    2e28:	64 ef       	ldi	r22, 0xF4	; 244
    2e2a:	87 e2       	ldi	r24, 0x27	; 39
    2e2c:	a2 d4       	rcall	.+2372   	; 0x3772 <RcSetReg>
    2e2e:	88 e8       	ldi	r24, 0x88	; 136
    2e30:	93 e1       	ldi	r25, 0x13	; 19
    2e32:	af df       	rcall	.-162    	; 0x2d92 <SetTimeOut>
    2e34:	43 e0       	ldi	r20, 0x03	; 3
    2e36:	61 e0       	ldi	r22, 0x01	; 1
    2e38:	84 e1       	ldi	r24, 0x14	; 20
    2e3a:	b5 d4       	rcall	.+2410   	; 0x37a6 <RcModifyReg>
    2e3c:	40 e4       	ldi	r20, 0x40	; 64
    2e3e:	61 e0       	ldi	r22, 0x01	; 1
    2e40:	8c e0       	ldi	r24, 0x0C	; 12
    2e42:	b1 d4       	rcall	.+2402   	; 0x37a6 <RcModifyReg>
    2e44:	84 e0       	ldi	r24, 0x04	; 4
    2e46:	a7 d4       	rcall	.+2382   	; 0x3796 <RcGetReg>
    2e48:	80 ff       	sbrs	r24, 0
    2e4a:	fc cf       	rjmp	.-8      	; 0x2e44 <Rc522Init+0x64>
    2e4c:	61 e0       	ldi	r22, 0x01	; 1
    2e4e:	84 e0       	ldi	r24, 0x04	; 4
    2e50:	90 d4       	rcall	.+2336   	; 0x3772 <RcSetReg>
    2e52:	88 e8       	ldi	r24, 0x88	; 136
    2e54:	93 e1       	ldi	r25, 0x13	; 19
    2e56:	9d df       	rcall	.-198    	; 0x2d92 <SetTimeOut>
    2e58:	6a e1       	ldi	r22, 0x1A	; 26
    2e5a:	8b e0       	ldi	r24, 0x0B	; 11
    2e5c:	8a d4       	rcall	.+2324   	; 0x3772 <RcSetReg>
    2e5e:	60 e1       	ldi	r22, 0x10	; 16
    2e60:	86 e1       	ldi	r24, 0x16	; 22
    2e62:	87 d4       	rcall	.+2318   	; 0x3772 <RcSetReg>
    2e64:	64 e8       	ldi	r22, 0x84	; 132
    2e66:	87 e1       	ldi	r24, 0x17	; 23
    2e68:	84 d4       	rcall	.+2312   	; 0x3772 <RcSetReg>
    2e6a:	60 e0       	ldi	r22, 0x00	; 0
    2e6c:	81 e0       	ldi	r24, 0x01	; 1
    2e6e:	81 d4       	rcall	.+2306   	; 0x3772 <RcSetReg>
    2e70:	80 ed       	ldi	r24, 0xD0	; 208
    2e72:	97 e0       	ldi	r25, 0x07	; 7
    2e74:	8e cf       	rjmp	.-228    	; 0x2d92 <SetTimeOut>

00002e76 <M522PcdCmd>:
    2e76:	af 92       	push	r10
    2e78:	bf 92       	push	r11
    2e7a:	cf 92       	push	r12
    2e7c:	df 92       	push	r13
    2e7e:	ef 92       	push	r14
    2e80:	ff 92       	push	r15
    2e82:	0f 93       	push	r16
    2e84:	1f 93       	push	r17
    2e86:	cf 93       	push	r28
    2e88:	df 93       	push	r29
    2e8a:	d8 2f       	mov	r29, r24
    2e8c:	7b 01       	movw	r14, r22
    2e8e:	8a 01       	movw	r16, r20
    2e90:	62 e4       	ldi	r22, 0x42	; 66
    2e92:	84 e0       	ldi	r24, 0x04	; 4
    2e94:	6e d4       	rcall	.+2268   	; 0x3772 <RcSetReg>
    2e96:	60 e0       	ldi	r22, 0x00	; 0
    2e98:	85 e0       	ldi	r24, 0x05	; 5
    2e9a:	6b d4       	rcall	.+2262   	; 0x3772 <RcSetReg>
    2e9c:	60 e8       	ldi	r22, 0x80	; 128
    2e9e:	8a e0       	ldi	r24, 0x0A	; 10
    2ea0:	68 d4       	rcall	.+2256   	; 0x3772 <RcSetReg>
    2ea2:	81 e0       	ldi	r24, 0x01	; 1
    2ea4:	78 d4       	rcall	.+2288   	; 0x3796 <RcGetReg>
    2ea6:	68 2f       	mov	r22, r24
    2ea8:	60 7f       	andi	r22, 0xF0	; 240
    2eaa:	dc 30       	cpi	r29, 0x0C	; 12
    2eac:	89 f1       	breq	.+98     	; 0x2f10 <M522PcdCmd+0x9a>
    2eae:	81 e0       	ldi	r24, 0x01	; 1
    2eb0:	60 d4       	rcall	.+2240   	; 0x3772 <RcSetReg>
    2eb2:	10 93 32 05 	sts	0x0532, r17	; 0x800532 <MpIsrInfo+0x1>
    2eb6:	00 93 31 05 	sts	0x0531, r16	; 0x800531 <MpIsrInfo>
    2eba:	d0 31       	cpi	r29, 0x10	; 16
    2ebc:	80 f1       	brcs	.+96     	; 0x2f1e <M522PcdCmd+0xa8>
    2ebe:	b1 2c       	mov	r11, r1
    2ec0:	02 e4       	ldi	r16, 0x42	; 66
    2ec2:	73 e0       	ldi	r23, 0x03	; 3
    2ec4:	c7 2e       	mov	r12, r23
    2ec6:	dd 24       	eor	r13, r13
    2ec8:	d3 94       	inc	r13
    2eca:	4b 2d       	mov	r20, r11
    2ecc:	60 e0       	ldi	r22, 0x00	; 0
    2ece:	82 e0       	ldi	r24, 0x02	; 2
    2ed0:	6a d4       	rcall	.+2260   	; 0x37a6 <RcModifyReg>
    2ed2:	40 e0       	ldi	r20, 0x00	; 0
    2ed4:	60 e0       	ldi	r22, 0x00	; 0
    2ed6:	83 e0       	ldi	r24, 0x03	; 3
    2ed8:	66 d4       	rcall	.+2252   	; 0x37a6 <RcModifyReg>
    2eda:	60 2f       	mov	r22, r16
    2edc:	84 e0       	ldi	r24, 0x04	; 4
    2ede:	49 d4       	rcall	.+2194   	; 0x3772 <RcSetReg>
    2ee0:	60 e0       	ldi	r22, 0x00	; 0
    2ee2:	85 e0       	ldi	r24, 0x05	; 5
    2ee4:	46 d4       	rcall	.+2188   	; 0x3772 <RcSetReg>
    2ee6:	60 e8       	ldi	r22, 0x80	; 128
    2ee8:	8a e0       	ldi	r24, 0x0A	; 10
    2eea:	43 d4       	rcall	.+2182   	; 0x3772 <RcSetReg>
    2eec:	61 e0       	ldi	r22, 0x01	; 1
    2eee:	84 e0       	ldi	r24, 0x04	; 4
    2ef0:	40 d4       	rcall	.+2176   	; 0x3772 <RcSetReg>
    2ef2:	60 e0       	ldi	r22, 0x00	; 0
    2ef4:	8d e0       	ldi	r24, 0x0D	; 13
    2ef6:	3d d4       	rcall	.+2170   	; 0x3772 <RcSetReg>
    2ef8:	c6 01       	movw	r24, r12
    2efa:	df 91       	pop	r29
    2efc:	cf 91       	pop	r28
    2efe:	1f 91       	pop	r17
    2f00:	0f 91       	pop	r16
    2f02:	ff 90       	pop	r15
    2f04:	ef 90       	pop	r14
    2f06:	df 90       	pop	r13
    2f08:	cf 90       	pop	r12
    2f0a:	bf 90       	pop	r11
    2f0c:	af 90       	pop	r10
    2f0e:	08 95       	ret
    2f10:	6c 60       	ori	r22, 0x0C	; 12
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	2e d4       	rcall	.+2140   	; 0x3772 <RcSetReg>
    2f16:	10 93 32 05 	sts	0x0532, r17	; 0x800532 <MpIsrInfo+0x1>
    2f1a:	00 93 31 05 	sts	0x0531, r16	; 0x800531 <MpIsrInfo>
    2f1e:	8d 2f       	mov	r24, r29
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	fc 01       	movw	r30, r24
    2f24:	ee 0f       	add	r30, r30
    2f26:	ff 1f       	adc	r31, r31
    2f28:	e6 5f       	subi	r30, 0xF6	; 246
    2f2a:	fa 4f       	sbci	r31, 0xFA	; 250
    2f2c:	c0 80       	ld	r12, Z
    2f2e:	d1 80       	ldd	r13, Z+1	; 0x01
    2f30:	fc 01       	movw	r30, r24
    2f32:	e6 50       	subi	r30, 0x06	; 6
    2f34:	fb 4f       	sbci	r31, 0xFB	; 251
    2f36:	b0 80       	ld	r11, Z
    2f38:	fc 01       	movw	r30, r24
    2f3a:	e6 51       	subi	r30, 0x16	; 22
    2f3c:	fb 4f       	sbci	r31, 0xFB	; 251
    2f3e:	00 81       	ld	r16, Z
    2f40:	fc 01       	movw	r30, r24
    2f42:	e6 52       	subi	r30, 0x26	; 38
    2f44:	fb 4f       	sbci	r31, 0xFB	; 251
    2f46:	a0 80       	ld	r10, Z
    2f48:	c1 14       	cp	r12, r1
    2f4a:	d1 04       	cpc	r13, r1
    2f4c:	09 f0       	breq	.+2      	; 0x2f50 <M522PcdCmd+0xda>
    2f4e:	bd cf       	rjmp	.-134    	; 0x2eca <M522PcdCmd+0x54>
    2f50:	82 e0       	ldi	r24, 0x02	; 2
    2f52:	21 d4       	rcall	.+2114   	; 0x3796 <RcGetReg>
    2f54:	68 2f       	mov	r22, r24
    2f56:	6b 29       	or	r22, r11
    2f58:	82 e0       	ldi	r24, 0x02	; 2
    2f5a:	0b d4       	rcall	.+2070   	; 0x3772 <RcSetReg>
    2f5c:	83 e0       	ldi	r24, 0x03	; 3
    2f5e:	1b d4       	rcall	.+2102   	; 0x3796 <RcGetReg>
    2f60:	68 2f       	mov	r22, r24
    2f62:	83 e0       	ldi	r24, 0x03	; 3
    2f64:	06 d4       	rcall	.+2060   	; 0x3772 <RcSetReg>
    2f66:	e0 91 31 05 	lds	r30, 0x0531	; 0x800531 <MpIsrInfo>
    2f6a:	f0 91 32 05 	lds	r31, 0x0532	; 0x800532 <MpIsrInfo+0x1>
    2f6e:	83 81       	ldd	r24, Z+3	; 0x03
    2f70:	88 23       	and	r24, r24
    2f72:	79 f0       	breq	.+30     	; 0x2f92 <M522PcdCmd+0x11c>
    2f74:	c0 e0       	ldi	r28, 0x00	; 0
    2f76:	f7 01       	movw	r30, r14
    2f78:	ec 0f       	add	r30, r28
    2f7a:	f1 1d       	adc	r31, r1
    2f7c:	60 81       	ld	r22, Z
    2f7e:	89 e0       	ldi	r24, 0x09	; 9
    2f80:	f8 d3       	rcall	.+2032   	; 0x3772 <RcSetReg>
    2f82:	cf 5f       	subi	r28, 0xFF	; 255
    2f84:	e0 91 31 05 	lds	r30, 0x0531	; 0x800531 <MpIsrInfo>
    2f88:	f0 91 32 05 	lds	r31, 0x0532	; 0x800532 <MpIsrInfo+0x1>
    2f8c:	93 81       	ldd	r25, Z+3	; 0x03
    2f8e:	c9 17       	cp	r28, r25
    2f90:	90 f3       	brcs	.-28     	; 0x2f76 <M522PcdCmd+0x100>
    2f92:	dc 30       	cpi	r29, 0x0C	; 12
    2f94:	09 f4       	brne	.+2      	; 0x2f98 <M522PcdCmd+0x122>
    2f96:	8b c0       	rjmp	.+278    	; 0x30ae <M522PcdCmd+0x238>
    2f98:	81 e0       	ldi	r24, 0x01	; 1
    2f9a:	fd d3       	rcall	.+2042   	; 0x3796 <RcGetReg>
    2f9c:	80 7f       	andi	r24, 0xF0	; 240
    2f9e:	68 2f       	mov	r22, r24
    2fa0:	6d 2b       	or	r22, r29
    2fa2:	81 e0       	ldi	r24, 0x01	; 1
    2fa4:	e6 d3       	rcall	.+1996   	; 0x3772 <RcSetReg>
    2fa6:	00 23       	and	r16, r16
    2fa8:	e1 f0       	breq	.+56     	; 0x2fe2 <M522PcdCmd+0x16c>
    2faa:	84 e0       	ldi	r24, 0x04	; 4
    2fac:	f4 d3       	rcall	.+2024   	; 0x3796 <RcGetReg>
    2fae:	18 2f       	mov	r17, r24
    2fb0:	85 e0       	ldi	r24, 0x05	; 5
    2fb2:	f1 d3       	rcall	.+2018   	; 0x3796 <RcGetReg>
    2fb4:	c0 e0       	ldi	r28, 0x00	; 0
    2fb6:	d1 e0       	ldi	r29, 0x01	; 1
    2fb8:	08 c0       	rjmp	.+16     	; 0x2fca <M522PcdCmd+0x154>
    2fba:	84 e0       	ldi	r24, 0x04	; 4
    2fbc:	ec d3       	rcall	.+2008   	; 0x3796 <RcGetReg>
    2fbe:	18 2f       	mov	r17, r24
    2fc0:	85 e0       	ldi	r24, 0x05	; 5
    2fc2:	e9 d3       	rcall	.+2002   	; 0x3796 <RcGetReg>
    2fc4:	21 97       	sbiw	r28, 0x01	; 1
    2fc6:	09 f4       	brne	.+2      	; 0x2fca <M522PcdCmd+0x154>
    2fc8:	93 c0       	rjmp	.+294    	; 0x30f0 <M522PcdCmd+0x27a>
    2fca:	91 2f       	mov	r25, r17
    2fcc:	90 23       	and	r25, r16
    2fce:	a9 f3       	breq	.-22     	; 0x2fba <M522PcdCmd+0x144>
    2fd0:	81 2f       	mov	r24, r17
    2fd2:	81 70       	andi	r24, 0x01	; 1
    2fd4:	09 2f       	mov	r16, r25
    2fd6:	88 23       	and	r24, r24
    2fd8:	21 f0       	breq	.+8      	; 0x2fe2 <M522PcdCmd+0x16c>
    2fda:	cc 24       	eor	r12, r12
    2fdc:	c3 94       	inc	r12
    2fde:	d1 2c       	mov	r13, r1
    2fe0:	74 cf       	rjmp	.-280    	; 0x2eca <M522PcdCmd+0x54>
    2fe2:	4b 2d       	mov	r20, r11
    2fe4:	60 e0       	ldi	r22, 0x00	; 0
    2fe6:	82 e0       	ldi	r24, 0x02	; 2
    2fe8:	de d3       	rcall	.+1980   	; 0x37a6 <RcModifyReg>
    2fea:	40 e0       	ldi	r20, 0x00	; 0
    2fec:	60 e0       	ldi	r22, 0x00	; 0
    2fee:	83 e0       	ldi	r24, 0x03	; 3
    2ff0:	da d3       	rcall	.+1972   	; 0x37a6 <RcModifyReg>
    2ff2:	aa 20       	and	r10, r10
    2ff4:	09 f4       	brne	.+2      	; 0x2ff8 <M522PcdCmd+0x182>
    2ff6:	71 cf       	rjmp	.-286    	; 0x2eda <M522PcdCmd+0x64>
    2ff8:	c0 91 31 05 	lds	r28, 0x0531	; 0x800531 <MpIsrInfo>
    2ffc:	d0 91 32 05 	lds	r29, 0x0532	; 0x800532 <MpIsrInfo+0x1>
    3000:	8a e0       	ldi	r24, 0x0A	; 10
    3002:	c9 d3       	rcall	.+1938   	; 0x3796 <RcGetReg>
    3004:	8c 83       	std	Y+4, r24	; 0x04
    3006:	8c e0       	ldi	r24, 0x0C	; 12
    3008:	c6 d3       	rcall	.+1932   	; 0x3796 <RcGetReg>
    300a:	e0 91 31 05 	lds	r30, 0x0531	; 0x800531 <MpIsrInfo>
    300e:	f0 91 32 05 	lds	r31, 0x0532	; 0x800532 <MpIsrInfo+0x1>
    3012:	87 70       	andi	r24, 0x07	; 7
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	96 83       	std	Z+6, r25	; 0x06
    3018:	85 83       	std	Z+5, r24	; 0x05
    301a:	86 e0       	ldi	r24, 0x06	; 6
    301c:	bc d3       	rcall	.+1912   	; 0x3796 <RcGetReg>
    301e:	c8 2f       	mov	r28, r24
    3020:	88 23       	and	r24, r24
    3022:	11 f1       	breq	.+68     	; 0x3068 <M522PcdCmd+0x1f2>
    3024:	83 fd       	sbrc	r24, 3
    3026:	48 c0       	rjmp	.+144    	; 0x30b8 <M522PcdCmd+0x242>
    3028:	81 fd       	sbrc	r24, 1
    302a:	5e c0       	rjmp	.+188    	; 0x30e8 <M522PcdCmd+0x272>
    302c:	c0 fd       	sbrc	r28, 0
    302e:	48 c0       	rjmp	.+144    	; 0x30c0 <M522PcdCmd+0x24a>
    3030:	c4 fd       	sbrc	r28, 4
    3032:	56 c0       	rjmp	.+172    	; 0x30e0 <M522PcdCmd+0x26a>
    3034:	c2 ff       	sbrs	r28, 2
    3036:	60 c0       	rjmp	.+192    	; 0x30f8 <M522PcdCmd+0x282>
    3038:	e0 91 31 05 	lds	r30, 0x0531	; 0x800531 <MpIsrInfo>
    303c:	f0 91 32 05 	lds	r31, 0x0532	; 0x800532 <MpIsrInfo+0x1>
    3040:	d4 81       	ldd	r29, Z+4	; 0x04
    3042:	d1 30       	cpi	r29, 0x01	; 1
    3044:	09 f4       	brne	.+2      	; 0x3048 <M522PcdCmd+0x1d2>
    3046:	5f c0       	rjmp	.+190    	; 0x3106 <M522PcdCmd+0x290>
    3048:	92 e0       	ldi	r25, 0x02	; 2
    304a:	c9 2e       	mov	r12, r25
    304c:	d1 2c       	mov	r13, r1
    304e:	3b c0       	rjmp	.+118    	; 0x30c6 <M522PcdCmd+0x250>
    3050:	c7 fd       	sbrc	r28, 7
    3052:	3f c0       	rjmp	.+126    	; 0x30d2 <M522PcdCmd+0x25c>
    3054:	60 e0       	ldi	r22, 0x00	; 0
    3056:	86 e0       	ldi	r24, 0x06	; 6
    3058:	c1 14       	cp	r12, r1
    305a:	d1 04       	cpc	r13, r1
    305c:	09 f0       	breq	.+2      	; 0x3060 <M522PcdCmd+0x1ea>
    305e:	6b c0       	rjmp	.+214    	; 0x3136 <M522PcdCmd+0x2c0>
    3060:	88 d3       	rcall	.+1808   	; 0x3772 <RcSetReg>
    3062:	5c e0       	ldi	r21, 0x0C	; 12
    3064:	c5 2e       	mov	r12, r21
    3066:	d1 2c       	mov	r13, r1
    3068:	e0 91 31 05 	lds	r30, 0x0531	; 0x800531 <MpIsrInfo>
    306c:	f0 91 32 05 	lds	r31, 0x0532	; 0x800532 <MpIsrInfo+0x1>
    3070:	84 81       	ldd	r24, Z+4	; 0x04
    3072:	88 23       	and	r24, r24
    3074:	09 f4       	brne	.+2      	; 0x3078 <M522PcdCmd+0x202>
    3076:	31 cf       	rjmp	.-414    	; 0x2eda <M522PcdCmd+0x64>
    3078:	c0 e0       	ldi	r28, 0x00	; 0
    307a:	57 01       	movw	r10, r14
    307c:	ac 0e       	add	r10, r28
    307e:	b1 1c       	adc	r11, r1
    3080:	89 e0       	ldi	r24, 0x09	; 9
    3082:	89 d3       	rcall	.+1810   	; 0x3796 <RcGetReg>
    3084:	f5 01       	movw	r30, r10
    3086:	80 83       	st	Z, r24
    3088:	cf 5f       	subi	r28, 0xFF	; 255
    308a:	e0 91 31 05 	lds	r30, 0x0531	; 0x800531 <MpIsrInfo>
    308e:	f0 91 32 05 	lds	r31, 0x0532	; 0x800532 <MpIsrInfo+0x1>
    3092:	84 81       	ldd	r24, Z+4	; 0x04
    3094:	c8 17       	cp	r28, r24
    3096:	88 f3       	brcs	.-30     	; 0x307a <M522PcdCmd+0x204>
    3098:	25 81       	ldd	r18, Z+5	; 0x05
    309a:	36 81       	ldd	r19, Z+6	; 0x06
    309c:	23 2b       	or	r18, r19
    309e:	09 f4       	brne	.+2      	; 0x30a2 <M522PcdCmd+0x22c>
    30a0:	1c cf       	rjmp	.-456    	; 0x2eda <M522PcdCmd+0x64>
    30a2:	88 23       	and	r24, r24
    30a4:	09 f4       	brne	.+2      	; 0x30a8 <M522PcdCmd+0x232>
    30a6:	19 cf       	rjmp	.-462    	; 0x2eda <M522PcdCmd+0x64>
    30a8:	81 50       	subi	r24, 0x01	; 1
    30aa:	84 83       	std	Z+4, r24	; 0x04
    30ac:	16 cf       	rjmp	.-468    	; 0x2eda <M522PcdCmd+0x64>
    30ae:	40 e8       	ldi	r20, 0x80	; 128
    30b0:	61 e0       	ldi	r22, 0x01	; 1
    30b2:	8d e0       	ldi	r24, 0x0D	; 13
    30b4:	78 d3       	rcall	.+1776   	; 0x37a6 <RcModifyReg>
    30b6:	77 cf       	rjmp	.-274    	; 0x2fa6 <M522PcdCmd+0x130>
    30b8:	f6 e0       	ldi	r31, 0x06	; 6
    30ba:	cf 2e       	mov	r12, r31
    30bc:	d1 2c       	mov	r13, r1
    30be:	b6 cf       	rjmp	.-148    	; 0x302c <M522PcdCmd+0x1b6>
    30c0:	3b e0       	ldi	r19, 0x0B	; 11
    30c2:	c3 2e       	mov	r12, r19
    30c4:	d1 2c       	mov	r13, r1
    30c6:	c7 fd       	sbrc	r28, 7
    30c8:	04 c0       	rjmp	.+8      	; 0x30d2 <M522PcdCmd+0x25c>
    30ca:	60 e0       	ldi	r22, 0x00	; 0
    30cc:	86 e0       	ldi	r24, 0x06	; 6
    30ce:	51 d3       	rcall	.+1698   	; 0x3772 <RcSetReg>
    30d0:	cb cf       	rjmp	.-106    	; 0x3068 <M522PcdCmd+0x1f2>
    30d2:	60 e0       	ldi	r22, 0x00	; 0
    30d4:	86 e0       	ldi	r24, 0x06	; 6
    30d6:	4d d3       	rcall	.+1690   	; 0x3772 <RcSetReg>
    30d8:	ed e0       	ldi	r30, 0x0D	; 13
    30da:	ce 2e       	mov	r12, r30
    30dc:	d1 2c       	mov	r13, r1
    30de:	c4 cf       	rjmp	.-120    	; 0x3068 <M522PcdCmd+0x1f2>
    30e0:	29 e0       	ldi	r18, 0x09	; 9
    30e2:	c2 2e       	mov	r12, r18
    30e4:	d1 2c       	mov	r13, r1
    30e6:	ef cf       	rjmp	.-34     	; 0x30c6 <M522PcdCmd+0x250>
    30e8:	a3 e0       	ldi	r26, 0x03	; 3
    30ea:	ca 2e       	mov	r12, r26
    30ec:	d1 2c       	mov	r13, r1
    30ee:	9e cf       	rjmp	.-196    	; 0x302c <M522PcdCmd+0x1b6>
    30f0:	81 2f       	mov	r24, r17
    30f2:	81 70       	andi	r24, 0x01	; 1
    30f4:	01 23       	and	r16, r17
    30f6:	6f cf       	rjmp	.-290    	; 0x2fd6 <M522PcdCmd+0x160>
    30f8:	c6 ff       	sbrs	r28, 6
    30fa:	aa cf       	rjmp	.-172    	; 0x3050 <M522PcdCmd+0x1da>
    30fc:	84 e0       	ldi	r24, 0x04	; 4
    30fe:	c8 2e       	mov	r12, r24
    3100:	8e e7       	ldi	r24, 0x7E	; 126
    3102:	d8 2e       	mov	r13, r24
    3104:	e0 cf       	rjmp	.-64     	; 0x30c6 <M522PcdCmd+0x250>
    3106:	85 81       	ldd	r24, Z+5	; 0x05
    3108:	96 81       	ldd	r25, Z+6	; 0x06
    310a:	8b 7f       	andi	r24, 0xFB	; 251
    310c:	89 2b       	or	r24, r25
    310e:	09 f0       	breq	.+2      	; 0x3112 <M522PcdCmd+0x29c>
    3110:	9b cf       	rjmp	.-202    	; 0x3048 <M522PcdCmd+0x1d2>
    3112:	89 e0       	ldi	r24, 0x09	; 9
    3114:	40 d3       	rcall	.+1664   	; 0x3796 <RcGetReg>
    3116:	f7 01       	movw	r30, r14
    3118:	80 83       	st	Z, r24
    311a:	e0 91 31 05 	lds	r30, 0x0531	; 0x800531 <MpIsrInfo>
    311e:	f0 91 32 05 	lds	r31, 0x0532	; 0x800532 <MpIsrInfo+0x1>
    3122:	d4 83       	std	Z+4, r29	; 0x04
    3124:	c7 fd       	sbrc	r28, 7
    3126:	d5 cf       	rjmp	.-86     	; 0x30d2 <M522PcdCmd+0x25c>
    3128:	60 e0       	ldi	r22, 0x00	; 0
    312a:	86 e0       	ldi	r24, 0x06	; 6
    312c:	22 d3       	rcall	.+1604   	; 0x3772 <RcSetReg>
    312e:	42 e0       	ldi	r20, 0x02	; 2
    3130:	c4 2e       	mov	r12, r20
    3132:	dc 2c       	mov	r13, r12
    3134:	d2 ce       	rjmp	.-604    	; 0x2eda <M522PcdCmd+0x64>
    3136:	1d d3       	rcall	.+1594   	; 0x3772 <RcSetReg>
    3138:	97 cf       	rjmp	.-210    	; 0x3068 <M522PcdCmd+0x1f2>

0000313a <Request>:
    313a:	0f 93       	push	r16
    313c:	1f 93       	push	r17
    313e:	cf 93       	push	r28
    3140:	c8 2f       	mov	r28, r24
    3142:	8b 01       	movw	r16, r22
    3144:	48 e0       	ldi	r20, 0x08	; 8
    3146:	60 e0       	ldi	r22, 0x00	; 0
    3148:	88 e0       	ldi	r24, 0x08	; 8
    314a:	2d d3       	rcall	.+1626   	; 0x37a6 <RcModifyReg>
    314c:	60 e8       	ldi	r22, 0x80	; 128
    314e:	8e e0       	ldi	r24, 0x0E	; 14
    3150:	10 d3       	rcall	.+1568   	; 0x3772 <RcSetReg>
    3152:	40 e8       	ldi	r20, 0x80	; 128
    3154:	60 e0       	ldi	r22, 0x00	; 0
    3156:	82 e1       	ldi	r24, 0x12	; 18
    3158:	26 d3       	rcall	.+1612   	; 0x37a6 <RcModifyReg>
    315a:	40 e8       	ldi	r20, 0x80	; 128
    315c:	60 e0       	ldi	r22, 0x00	; 0
    315e:	83 e1       	ldi	r24, 0x13	; 19
    3160:	22 d3       	rcall	.+1604   	; 0x37a6 <RcModifyReg>
    3162:	67 e0       	ldi	r22, 0x07	; 7
    3164:	8d e0       	ldi	r24, 0x0D	; 13
    3166:	05 d3       	rcall	.+1546   	; 0x3772 <RcSetReg>
    3168:	10 92 31 0b 	sts	0x0B31, r1	; 0x800b31 <MInfo>
    316c:	10 92 32 0b 	sts	0x0B32, r1	; 0x800b32 <MInfo+0x1>
    3170:	10 92 33 0b 	sts	0x0B33, r1	; 0x800b33 <MInfo+0x2>
    3174:	10 92 35 0b 	sts	0x0B35, r1	; 0x800b35 <MInfo+0x4>
    3178:	10 92 37 0b 	sts	0x0B37, r1	; 0x800b37 <MInfo+0x6>
    317c:	10 92 36 0b 	sts	0x0B36, r1	; 0x800b36 <MInfo+0x5>
    3180:	10 92 38 0b 	sts	0x0B38, r1	; 0x800b38 <MInfo+0x7>
    3184:	c0 93 1d 0b 	sts	0x0B1D, r28	; 0x800b1d <SerBuffer>
    3188:	81 e0       	ldi	r24, 0x01	; 1
    318a:	80 93 34 0b 	sts	0x0B34, r24	; 0x800b34 <MInfo+0x3>
    318e:	80 e9       	ldi	r24, 0x90	; 144
    3190:	91 e0       	ldi	r25, 0x01	; 1
    3192:	ff dd       	rcall	.-1026   	; 0x2d92 <SetTimeOut>
    3194:	41 e3       	ldi	r20, 0x31	; 49
    3196:	5b e0       	ldi	r21, 0x0B	; 11
    3198:	6d e1       	ldi	r22, 0x1D	; 29
    319a:	7b e0       	ldi	r23, 0x0B	; 11
    319c:	8c e0       	ldi	r24, 0x0C	; 12
    319e:	6b de       	rcall	.-810    	; 0x2e76 <M522PcdCmd>
    31a0:	88 23       	and	r24, r24
    31a2:	51 f0       	breq	.+20     	; 0x31b8 <Request+0x7e>
    31a4:	86 30       	cpi	r24, 0x06	; 6
    31a6:	41 f0       	breq	.+16     	; 0x31b8 <Request+0x7e>
    31a8:	f8 01       	movw	r30, r16
    31aa:	10 82       	st	Z, r1
    31ac:	11 82       	std	Z+1, r1	; 0x01
    31ae:	99 27       	eor	r25, r25
    31b0:	cf 91       	pop	r28
    31b2:	1f 91       	pop	r17
    31b4:	0f 91       	pop	r16
    31b6:	08 95       	ret
    31b8:	20 91 35 0b 	lds	r18, 0x0B35	; 0x800b35 <MInfo+0x4>
    31bc:	22 30       	cpi	r18, 0x02	; 2
    31be:	31 f0       	breq	.+12     	; 0x31cc <Request+0x92>
    31c0:	8b e0       	ldi	r24, 0x0B	; 11
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	cf 91       	pop	r28
    31c6:	1f 91       	pop	r17
    31c8:	0f 91       	pop	r16
    31ca:	08 95       	ret
    31cc:	20 91 36 0b 	lds	r18, 0x0B36	; 0x800b36 <MInfo+0x5>
    31d0:	30 91 37 0b 	lds	r19, 0x0B37	; 0x800b37 <MInfo+0x6>
    31d4:	23 2b       	or	r18, r19
    31d6:	a1 f7       	brne	.-24     	; 0x31c0 <Request+0x86>
    31d8:	20 91 1d 0b 	lds	r18, 0x0B1D	; 0x800b1d <SerBuffer>
    31dc:	30 91 1e 0b 	lds	r19, 0x0B1E	; 0x800b1e <SerBuffer+0x1>
    31e0:	f8 01       	movw	r30, r16
    31e2:	31 83       	std	Z+1, r19	; 0x01
    31e4:	20 83       	st	Z, r18
    31e6:	99 27       	eor	r25, r25
    31e8:	ed cf       	rjmp	.-38     	; 0x31c4 <Request+0x8a>

000031ea <CascAnticoll>:
    31ea:	7f 92       	push	r7
    31ec:	8f 92       	push	r8
    31ee:	9f 92       	push	r9
    31f0:	af 92       	push	r10
    31f2:	bf 92       	push	r11
    31f4:	cf 92       	push	r12
    31f6:	df 92       	push	r13
    31f8:	ef 92       	push	r14
    31fa:	ff 92       	push	r15
    31fc:	0f 93       	push	r16
    31fe:	1f 93       	push	r17
    3200:	cf 93       	push	r28
    3202:	df 93       	push	r29
    3204:	00 d0       	rcall	.+0      	; 0x3206 <CascAnticoll+0x1c>
    3206:	cd b7       	in	r28, 0x3d	; 61
    3208:	de b7       	in	r29, 0x3e	; 62
    320a:	f8 2e       	mov	r15, r24
    320c:	76 2e       	mov	r7, r22
    320e:	8a 01       	movw	r16, r20
    3210:	10 92 1f 0b 	sts	0x0B1F, r1	; 0x800b1f <SerBuffer+0x2>
    3214:	10 92 20 0b 	sts	0x0B20, r1	; 0x800b20 <SerBuffer+0x3>
    3218:	10 92 21 0b 	sts	0x0B21, r1	; 0x800b21 <SerBuffer+0x4>
    321c:	10 92 22 0b 	sts	0x0B22, r1	; 0x800b22 <SerBuffer+0x5>
    3220:	10 92 23 0b 	sts	0x0B23, r1	; 0x800b23 <SerBuffer+0x6>
    3224:	40 e8       	ldi	r20, 0x80	; 128
    3226:	60 e0       	ldi	r22, 0x00	; 0
    3228:	82 e1       	ldi	r24, 0x12	; 18
    322a:	bd d2       	rcall	.+1402   	; 0x37a6 <RcModifyReg>
    322c:	40 e8       	ldi	r20, 0x80	; 128
    322e:	60 e0       	ldi	r22, 0x00	; 0
    3230:	83 e1       	ldi	r24, 0x13	; 19
    3232:	b9 d2       	rcall	.+1394   	; 0x37a6 <RcModifyReg>
    3234:	60 e0       	ldi	r22, 0x00	; 0
    3236:	8e e0       	ldi	r24, 0x0E	; 14
    3238:	9c d2       	rcall	.+1336   	; 0x3772 <RcSetReg>
    323a:	84 e0       	ldi	r24, 0x04	; 4
    323c:	88 2e       	mov	r8, r24
    323e:	91 2c       	mov	r9, r1
    3240:	f0 e2       	ldi	r31, 0x20	; 32
    3242:	f7 15       	cp	r31, r7
    3244:	e8 f4       	brcc	.+58     	; 0x3280 <CascAnticoll+0x96>
    3246:	41 e0       	ldi	r20, 0x01	; 1
    3248:	51 e0       	ldi	r21, 0x01	; 1
    324a:	60 e0       	ldi	r22, 0x00	; 0
    324c:	8d e0       	ldi	r24, 0x0D	; 13
    324e:	49 83       	std	Y+1, r20	; 0x01
    3250:	5a 83       	std	Y+2, r21	; 0x02
    3252:	8f d2       	rcall	.+1310   	; 0x3772 <RcSetReg>
    3254:	60 e8       	ldi	r22, 0x80	; 128
    3256:	8e e0       	ldi	r24, 0x0E	; 14
    3258:	8c d2       	rcall	.+1304   	; 0x3772 <RcSetReg>
    325a:	49 81       	ldd	r20, Y+1	; 0x01
    325c:	5a 81       	ldd	r21, Y+2	; 0x02
    325e:	ca 01       	movw	r24, r20
    3260:	0f 90       	pop	r0
    3262:	0f 90       	pop	r0
    3264:	df 91       	pop	r29
    3266:	cf 91       	pop	r28
    3268:	1f 91       	pop	r17
    326a:	0f 91       	pop	r16
    326c:	ff 90       	pop	r15
    326e:	ef 90       	pop	r14
    3270:	df 90       	pop	r13
    3272:	cf 90       	pop	r12
    3274:	bf 90       	pop	r11
    3276:	af 90       	pop	r10
    3278:	9f 90       	pop	r9
    327a:	8f 90       	pop	r8
    327c:	7f 90       	pop	r7
    327e:	08 95       	ret
    3280:	27 2d       	mov	r18, r7
    3282:	27 70       	andi	r18, 0x07	; 7
    3284:	e2 2e       	mov	r14, r18
    3286:	87 2d       	mov	r24, r7
    3288:	86 95       	lsr	r24
    328a:	86 95       	lsr	r24
    328c:	86 95       	lsr	r24
    328e:	22 23       	and	r18, r18
    3290:	09 f4       	brne	.+2      	; 0x3294 <CascAnticoll+0xaa>
    3292:	a2 c0       	rjmp	.+324    	; 0x33d8 <CascAnticoll+0x1ee>
    3294:	dd 24       	eor	r13, r13
    3296:	d3 94       	inc	r13
    3298:	d8 0e       	add	r13, r24
    329a:	f0 92 1d 0b 	sts	0x0B1D, r15	; 0x800b1d <SerBuffer>
    329e:	90 e2       	ldi	r25, 0x20	; 32
    32a0:	92 0f       	add	r25, r18
    32a2:	e0 e1       	ldi	r30, 0x10	; 16
    32a4:	8e 9f       	mul	r24, r30
    32a6:	90 0d       	add	r25, r0
    32a8:	11 24       	eor	r1, r1
    32aa:	90 93 1e 0b 	sts	0x0B1E, r25	; 0x800b1e <SerBuffer+0x1>
    32ae:	f8 01       	movw	r30, r16
    32b0:	af e1       	ldi	r26, 0x1F	; 31
    32b2:	bb e0       	ldi	r27, 0x0B	; 11
    32b4:	2f ef       	ldi	r18, 0xFF	; 255
    32b6:	2d 0d       	add	r18, r13
    32b8:	30 e0       	ldi	r19, 0x00	; 0
    32ba:	2f 5f       	subi	r18, 0xFF	; 255
    32bc:	3f 4f       	sbci	r19, 0xFF	; 255
    32be:	20 0f       	add	r18, r16
    32c0:	31 1f       	adc	r19, r17
    32c2:	91 91       	ld	r25, Z+
    32c4:	9d 93       	st	X+, r25
    32c6:	e2 17       	cp	r30, r18
    32c8:	f3 07       	cpc	r31, r19
    32ca:	d9 f7       	brne	.-10     	; 0x32c2 <CascAnticoll+0xd8>
    32cc:	f0 e1       	ldi	r31, 0x10	; 16
    32ce:	ef 9e       	mul	r14, r31
    32d0:	b0 01       	movw	r22, r0
    32d2:	11 24       	eor	r1, r1
    32d4:	6e 29       	or	r22, r14
    32d6:	8d e0       	ldi	r24, 0x0D	; 13
    32d8:	4c d2       	rcall	.+1176   	; 0x3772 <RcSetReg>
    32da:	10 92 31 0b 	sts	0x0B31, r1	; 0x800b31 <MInfo>
    32de:	10 92 32 0b 	sts	0x0B32, r1	; 0x800b32 <MInfo+0x1>
    32e2:	10 92 33 0b 	sts	0x0B33, r1	; 0x800b33 <MInfo+0x2>
    32e6:	10 92 35 0b 	sts	0x0B35, r1	; 0x800b35 <MInfo+0x4>
    32ea:	10 92 37 0b 	sts	0x0B37, r1	; 0x800b37 <MInfo+0x6>
    32ee:	10 92 36 0b 	sts	0x0B36, r1	; 0x800b36 <MInfo+0x5>
    32f2:	10 92 38 0b 	sts	0x0B38, r1	; 0x800b38 <MInfo+0x7>
    32f6:	82 e0       	ldi	r24, 0x02	; 2
    32f8:	8d 0d       	add	r24, r13
    32fa:	80 93 34 0b 	sts	0x0B34, r24	; 0x800b34 <MInfo+0x3>
    32fe:	80 e1       	ldi	r24, 0x10	; 16
    3300:	97 e2       	ldi	r25, 0x27	; 39
    3302:	47 dd       	rcall	.-1394   	; 0x2d92 <SetTimeOut>
    3304:	41 e3       	ldi	r20, 0x31	; 49
    3306:	5b e0       	ldi	r21, 0x0B	; 11
    3308:	6d e1       	ldi	r22, 0x1D	; 29
    330a:	7b e0       	ldi	r23, 0x0B	; 11
    330c:	8c e0       	ldi	r24, 0x0C	; 12
    330e:	b3 dd       	rcall	.-1178   	; 0x2e76 <M522PcdCmd>
    3310:	ac 01       	movw	r20, r24
    3312:	86 30       	cpi	r24, 0x06	; 6
    3314:	91 05       	cpc	r25, r1
    3316:	19 f0       	breq	.+6      	; 0x331e <CascAnticoll+0x134>
    3318:	89 2b       	or	r24, r25
    331a:	09 f0       	breq	.+2      	; 0x331e <CascAnticoll+0x134>
    331c:	96 cf       	rjmp	.-212    	; 0x324a <CascAnticoll+0x60>
    331e:	20 91 36 0b 	lds	r18, 0x0B36	; 0x800b36 <MInfo+0x5>
    3322:	30 91 37 0b 	lds	r19, 0x0B37	; 0x800b37 <MInfo+0x6>
    3326:	60 91 35 0b 	lds	r22, 0x0B35	; 0x800b35 <MInfo+0x4>
    332a:	b6 2e       	mov	r11, r22
    332c:	bb 0c       	add	r11, r11
    332e:	bb 0c       	add	r11, r11
    3330:	bb 0c       	add	r11, r11
    3332:	b2 0e       	add	r11, r18
    3334:	be 18       	sub	r11, r14
    3336:	87 2d       	mov	r24, r7
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	8b 0d       	add	r24, r11
    333c:	91 1d       	adc	r25, r1
    333e:	89 97       	sbiw	r24, 0x29	; 41
    3340:	0c f0       	brlt	.+2      	; 0x3344 <CascAnticoll+0x15a>
    3342:	55 c0       	rjmp	.+170    	; 0x33ee <CascAnticoll+0x204>
    3344:	23 2b       	or	r18, r19
    3346:	19 f0       	breq	.+6      	; 0x334e <CascAnticoll+0x164>
    3348:	6f 5f       	subi	r22, 0xFF	; 255
    334a:	60 93 35 0b 	sts	0x0B35, r22	; 0x800b35 <MInfo+0x4>
    334e:	ee 20       	and	r14, r14
    3350:	09 f4       	brne	.+2      	; 0x3354 <CascAnticoll+0x16a>
    3352:	50 c0       	rjmp	.+160    	; 0x33f4 <CascAnticoll+0x20a>
    3354:	ad 2d       	mov	r26, r13
    3356:	b0 e0       	ldi	r27, 0x00	; 0
    3358:	fd 01       	movw	r30, r26
    335a:	31 97       	sbiw	r30, 0x01	; 1
    335c:	e0 0f       	add	r30, r16
    335e:	f1 1f       	adc	r31, r17
    3360:	90 81       	ld	r25, Z
    3362:	80 91 1d 0b 	lds	r24, 0x0B1D	; 0x800b1d <SerBuffer>
    3366:	89 2b       	or	r24, r25
    3368:	80 83       	st	Z, r24
    336a:	aa 24       	eor	r10, r10
    336c:	a3 94       	inc	r10
    336e:	64 01       	movw	r12, r8
    3370:	ca 1a       	sub	r12, r26
    3372:	db 0a       	sbc	r13, r27
    3374:	1c 14       	cp	r1, r12
    3376:	1d 04       	cpc	r1, r13
    3378:	0c f0       	brlt	.+2      	; 0x337c <CascAnticoll+0x192>
    337a:	46 c0       	rjmp	.+140    	; 0x3408 <CascAnticoll+0x21e>
    337c:	6a 2d       	mov	r22, r10
    337e:	70 e0       	ldi	r23, 0x00	; 0
    3380:	20 e0       	ldi	r18, 0x00	; 0
    3382:	30 e0       	ldi	r19, 0x00	; 0
    3384:	80 e0       	ldi	r24, 0x00	; 0
    3386:	63 5e       	subi	r22, 0xE3	; 227
    3388:	74 4f       	sbci	r23, 0xF4	; 244
    338a:	fb 01       	movw	r30, r22
    338c:	e2 0f       	add	r30, r18
    338e:	f3 1f       	adc	r31, r19
    3390:	90 81       	ld	r25, Z
    3392:	20 0f       	add	r18, r16
    3394:	31 1f       	adc	r19, r17
    3396:	f9 01       	movw	r30, r18
    3398:	ea 0f       	add	r30, r26
    339a:	fb 1f       	adc	r31, r27
    339c:	90 83       	st	Z, r25
    339e:	8f 5f       	subi	r24, 0xFF	; 255
    33a0:	28 2f       	mov	r18, r24
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	2c 15       	cp	r18, r12
    33a6:	3d 05       	cpc	r19, r13
    33a8:	84 f3       	brlt	.-32     	; 0x338a <CascAnticoll+0x1a0>
    33aa:	46 30       	cpi	r20, 0x06	; 6
    33ac:	51 05       	cpc	r21, r1
    33ae:	89 f1       	breq	.+98     	; 0x3412 <CascAnticoll+0x228>
    33b0:	f8 01       	movw	r30, r16
    33b2:	91 81       	ldd	r25, Z+1	; 0x01
    33b4:	80 81       	ld	r24, Z
    33b6:	98 27       	eor	r25, r24
    33b8:	82 81       	ldd	r24, Z+2	; 0x02
    33ba:	98 27       	eor	r25, r24
    33bc:	83 81       	ldd	r24, Z+3	; 0x03
    33be:	89 27       	eor	r24, r25
    33c0:	23 5e       	subi	r18, 0xE3	; 227
    33c2:	34 4f       	sbci	r19, 0xF4	; 244
    33c4:	f9 01       	movw	r30, r18
    33c6:	ea 0d       	add	r30, r10
    33c8:	f1 1d       	adc	r31, r1
    33ca:	90 81       	ld	r25, Z
    33cc:	89 17       	cp	r24, r25
    33ce:	09 f4       	brne	.+2      	; 0x33d2 <CascAnticoll+0x1e8>
    33d0:	3c cf       	rjmp	.-392    	; 0x324a <CascAnticoll+0x60>
    33d2:	41 e0       	ldi	r20, 0x01	; 1
    33d4:	55 e0       	ldi	r21, 0x05	; 5
    33d6:	39 cf       	rjmp	.-398    	; 0x324a <CascAnticoll+0x60>
    33d8:	d8 2e       	mov	r13, r24
    33da:	f0 92 1d 0b 	sts	0x0B1D, r15	; 0x800b1d <SerBuffer>
    33de:	82 95       	swap	r24
    33e0:	80 7f       	andi	r24, 0xF0	; 240
    33e2:	80 5e       	subi	r24, 0xE0	; 224
    33e4:	80 93 1e 0b 	sts	0x0B1E, r24	; 0x800b1e <SerBuffer+0x1>
    33e8:	d1 10       	cpse	r13, r1
    33ea:	61 cf       	rjmp	.-318    	; 0x32ae <CascAnticoll+0xc4>
    33ec:	6f cf       	rjmp	.-290    	; 0x32cc <CascAnticoll+0xe2>
    33ee:	44 e0       	ldi	r20, 0x04	; 4
    33f0:	50 e0       	ldi	r21, 0x00	; 0
    33f2:	2b cf       	rjmp	.-426    	; 0x324a <CascAnticoll+0x60>
    33f4:	a1 2c       	mov	r10, r1
    33f6:	ad 2d       	mov	r26, r13
    33f8:	b0 e0       	ldi	r27, 0x00	; 0
    33fa:	64 01       	movw	r12, r8
    33fc:	ca 1a       	sub	r12, r26
    33fe:	db 0a       	sbc	r13, r27
    3400:	1c 14       	cp	r1, r12
    3402:	1d 04       	cpc	r1, r13
    3404:	0c f4       	brge	.+2      	; 0x3408 <CascAnticoll+0x21e>
    3406:	ba cf       	rjmp	.-140    	; 0x337c <CascAnticoll+0x192>
    3408:	20 e0       	ldi	r18, 0x00	; 0
    340a:	30 e0       	ldi	r19, 0x00	; 0
    340c:	46 30       	cpi	r20, 0x06	; 6
    340e:	51 05       	cpc	r21, r1
    3410:	79 f6       	brne	.-98     	; 0x33b0 <CascAnticoll+0x1c6>
    3412:	7b 0c       	add	r7, r11
    3414:	15 cf       	rjmp	.-470    	; 0x3240 <CascAnticoll+0x56>

00003416 <Select>:
    3416:	ff 92       	push	r15
    3418:	0f 93       	push	r16
    341a:	1f 93       	push	r17
    341c:	cf 93       	push	r28
    341e:	df 93       	push	r29
    3420:	f8 2e       	mov	r15, r24
    3422:	eb 01       	movw	r28, r22
    3424:	8a 01       	movw	r16, r20
    3426:	40 e8       	ldi	r20, 0x80	; 128
    3428:	61 e0       	ldi	r22, 0x01	; 1
    342a:	82 e1       	ldi	r24, 0x12	; 18
    342c:	bc d1       	rcall	.+888    	; 0x37a6 <RcModifyReg>
    342e:	40 e8       	ldi	r20, 0x80	; 128
    3430:	61 e0       	ldi	r22, 0x01	; 1
    3432:	83 e1       	ldi	r24, 0x13	; 19
    3434:	b8 d1       	rcall	.+880    	; 0x37a6 <RcModifyReg>
    3436:	f0 92 1d 0b 	sts	0x0B1D, r15	; 0x800b1d <SerBuffer>
    343a:	80 e7       	ldi	r24, 0x70	; 112
    343c:	80 93 1e 0b 	sts	0x0B1E, r24	; 0x800b1e <SerBuffer+0x1>
    3440:	fe 01       	movw	r30, r28
    3442:	af e1       	ldi	r26, 0x1F	; 31
    3444:	bb e0       	ldi	r27, 0x0B	; 11
    3446:	9e 01       	movw	r18, r28
    3448:	2c 5f       	subi	r18, 0xFC	; 252
    344a:	3f 4f       	sbci	r19, 0xFF	; 255
    344c:	81 91       	ld	r24, Z+
    344e:	8d 93       	st	X+, r24
    3450:	e2 17       	cp	r30, r18
    3452:	f3 07       	cpc	r31, r19
    3454:	d9 f7       	brne	.-10     	; 0x344c <Select+0x36>
    3456:	99 81       	ldd	r25, Y+1	; 0x01
    3458:	88 81       	ld	r24, Y
    345a:	89 27       	eor	r24, r25
    345c:	9a 81       	ldd	r25, Y+2	; 0x02
    345e:	89 27       	eor	r24, r25
    3460:	9b 81       	ldd	r25, Y+3	; 0x03
    3462:	89 27       	eor	r24, r25
    3464:	80 93 23 0b 	sts	0x0B23, r24	; 0x800b23 <SerBuffer+0x6>
    3468:	10 92 31 0b 	sts	0x0B31, r1	; 0x800b31 <MInfo>
    346c:	10 92 32 0b 	sts	0x0B32, r1	; 0x800b32 <MInfo+0x1>
    3470:	10 92 33 0b 	sts	0x0B33, r1	; 0x800b33 <MInfo+0x2>
    3474:	10 92 35 0b 	sts	0x0B35, r1	; 0x800b35 <MInfo+0x4>
    3478:	10 92 37 0b 	sts	0x0B37, r1	; 0x800b37 <MInfo+0x6>
    347c:	10 92 36 0b 	sts	0x0B36, r1	; 0x800b36 <MInfo+0x5>
    3480:	10 92 38 0b 	sts	0x0B38, r1	; 0x800b38 <MInfo+0x7>
    3484:	87 e0       	ldi	r24, 0x07	; 7
    3486:	80 93 34 0b 	sts	0x0B34, r24	; 0x800b34 <MInfo+0x3>
    348a:	80 ed       	ldi	r24, 0xD0	; 208
    348c:	97 e0       	ldi	r25, 0x07	; 7
    348e:	81 dc       	rcall	.-1790   	; 0x2d92 <SetTimeOut>
    3490:	41 e3       	ldi	r20, 0x31	; 49
    3492:	5b e0       	ldi	r21, 0x0B	; 11
    3494:	6d e1       	ldi	r22, 0x1D	; 29
    3496:	7b e0       	ldi	r23, 0x0B	; 11
    3498:	8c e0       	ldi	r24, 0x0C	; 12
    349a:	ed dc       	rcall	.-1574   	; 0x2e76 <M522PcdCmd>
    349c:	00 97       	sbiw	r24, 0x00	; 0
    349e:	31 f4       	brne	.+12     	; 0x34ac <Select+0x96>
    34a0:	20 91 35 0b 	lds	r18, 0x0B35	; 0x800b35 <MInfo+0x4>
    34a4:	21 30       	cpi	r18, 0x01	; 1
    34a6:	41 f0       	breq	.+16     	; 0x34b8 <Select+0xa2>
    34a8:	84 e0       	ldi	r24, 0x04	; 4
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	df 91       	pop	r29
    34ae:	cf 91       	pop	r28
    34b0:	1f 91       	pop	r17
    34b2:	0f 91       	pop	r16
    34b4:	ff 90       	pop	r15
    34b6:	08 95       	ret
    34b8:	20 91 36 0b 	lds	r18, 0x0B36	; 0x800b36 <MInfo+0x5>
    34bc:	30 91 37 0b 	lds	r19, 0x0B37	; 0x800b37 <MInfo+0x6>
    34c0:	23 2b       	or	r18, r19
    34c2:	91 f7       	brne	.-28     	; 0x34a8 <Select+0x92>
    34c4:	20 91 1d 0b 	lds	r18, 0x0B1D	; 0x800b1d <SerBuffer>
    34c8:	f8 01       	movw	r30, r16
    34ca:	20 83       	st	Z, r18
    34cc:	ef cf       	rjmp	.-34     	; 0x34ac <Select+0x96>

000034ce <AnticollSelect>:
    34ce:	9f 92       	push	r9
    34d0:	af 92       	push	r10
    34d2:	bf 92       	push	r11
    34d4:	cf 92       	push	r12
    34d6:	df 92       	push	r13
    34d8:	ef 92       	push	r14
    34da:	ff 92       	push	r15
    34dc:	0f 93       	push	r16
    34de:	1f 93       	push	r17
    34e0:	cf 93       	push	r28
    34e2:	df 93       	push	r29
    34e4:	cd b7       	in	r28, 0x3d	; 61
    34e6:	de b7       	in	r29, 0x3e	; 62
    34e8:	2e 97       	sbiw	r28, 0x0e	; 14
    34ea:	0f b6       	in	r0, 0x3f	; 63
    34ec:	f8 94       	cli
    34ee:	de bf       	out	0x3e, r29	; 62
    34f0:	0f be       	out	0x3f, r0	; 63
    34f2:	cd bf       	out	0x3d, r28	; 61
    34f4:	08 2f       	mov	r16, r24
    34f6:	6b 01       	movw	r12, r22
    34f8:	5a 01       	movw	r10, r20
    34fa:	ce 01       	movw	r24, r28
    34fc:	01 96       	adiw	r24, 0x01	; 1
    34fe:	7c 01       	movw	r14, r24
    3500:	80 e0       	ldi	r24, 0x00	; 0
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	10 e0       	ldi	r17, 0x00	; 0
    3506:	00 23       	and	r16, r16
    3508:	09 f4       	brne	.+2      	; 0x350c <AnticollSelect+0x3e>
    350a:	66 c0       	rjmp	.+204    	; 0x35d8 <AnticollSelect+0x10a>
    350c:	01 32       	cpi	r16, 0x21	; 33
    350e:	78 f0       	brcs	.+30     	; 0x352e <AnticollSelect+0x60>
    3510:	20 ee       	ldi	r18, 0xE0	; 224
    3512:	92 2e       	mov	r9, r18
    3514:	90 0e       	add	r9, r16
    3516:	11 30       	cpi	r17, 0x01	; 1
    3518:	09 f4       	brne	.+2      	; 0x351c <AnticollSelect+0x4e>
    351a:	72 c0       	rjmp	.+228    	; 0x3600 <AnticollSelect+0x132>
    351c:	12 30       	cpi	r17, 0x02	; 2
    351e:	09 f0       	breq	.+2      	; 0x3522 <AnticollSelect+0x54>
    3520:	7b c0       	rjmp	.+246    	; 0x3618 <AnticollSelect+0x14a>
    3522:	00 e2       	ldi	r16, 0x20	; 32
    3524:	27 e9       	ldi	r18, 0x97	; 151
    3526:	00 32       	cpi	r16, 0x20	; 32
    3528:	61 f4       	brne	.+24     	; 0x3542 <AnticollSelect+0x74>
    352a:	09 2d       	mov	r16, r9
    352c:	36 c0       	rjmp	.+108    	; 0x359a <AnticollSelect+0xcc>
    352e:	11 30       	cpi	r17, 0x01	; 1
    3530:	09 f4       	brne	.+2      	; 0x3534 <AnticollSelect+0x66>
    3532:	59 c0       	rjmp	.+178    	; 0x35e6 <AnticollSelect+0x118>
    3534:	12 30       	cpi	r17, 0x02	; 2
    3536:	09 f4       	brne	.+2      	; 0x353a <AnticollSelect+0x6c>
    3538:	53 c0       	rjmp	.+166    	; 0x35e0 <AnticollSelect+0x112>
    353a:	91 2c       	mov	r9, r1
    353c:	23 e9       	ldi	r18, 0x93	; 147
    353e:	00 32       	cpi	r16, 0x20	; 32
    3540:	a1 f3       	breq	.-24     	; 0x352a <AnticollSelect+0x5c>
    3542:	00 97       	sbiw	r24, 0x00	; 0
    3544:	19 f1       	breq	.+70     	; 0x358c <AnticollSelect+0xbe>
    3546:	2d 85       	ldd	r18, Y+13	; 0x0d
    3548:	11 30       	cpi	r17, 0x01	; 1
    354a:	09 f4       	brne	.+2      	; 0x354e <AnticollSelect+0x80>
    354c:	5b c0       	rjmp	.+182    	; 0x3604 <AnticollSelect+0x136>
    354e:	12 30       	cpi	r17, 0x02	; 2
    3550:	c9 f5       	brne	.+114    	; 0x35c4 <AnticollSelect+0xf6>
    3552:	4d 81       	ldd	r20, Y+5	; 0x05
    3554:	5e 81       	ldd	r21, Y+6	; 0x06
    3556:	6f 81       	ldd	r22, Y+7	; 0x07
    3558:	78 85       	ldd	r23, Y+8	; 0x08
    355a:	f6 01       	movw	r30, r12
    355c:	46 83       	std	Z+6, r20	; 0x06
    355e:	57 83       	std	Z+7, r21	; 0x07
    3560:	60 87       	std	Z+8, r22	; 0x08
    3562:	71 87       	std	Z+9, r23	; 0x09
    3564:	f5 01       	movw	r30, r10
    3566:	20 83       	st	Z, r18
    3568:	2e 96       	adiw	r28, 0x0e	; 14
    356a:	0f b6       	in	r0, 0x3f	; 63
    356c:	f8 94       	cli
    356e:	de bf       	out	0x3e, r29	; 62
    3570:	0f be       	out	0x3f, r0	; 63
    3572:	cd bf       	out	0x3d, r28	; 61
    3574:	df 91       	pop	r29
    3576:	cf 91       	pop	r28
    3578:	1f 91       	pop	r17
    357a:	0f 91       	pop	r16
    357c:	ff 90       	pop	r15
    357e:	ef 90       	pop	r14
    3580:	df 90       	pop	r13
    3582:	cf 90       	pop	r12
    3584:	bf 90       	pop	r11
    3586:	af 90       	pop	r10
    3588:	9f 90       	pop	r9
    358a:	08 95       	ret
    358c:	a7 01       	movw	r20, r14
    358e:	60 2f       	mov	r22, r16
    3590:	82 2f       	mov	r24, r18
    3592:	2e 87       	std	Y+14, r18	; 0x0e
    3594:	2a de       	rcall	.-940    	; 0x31ea <CascAnticoll>
    3596:	09 2d       	mov	r16, r9
    3598:	2e 85       	ldd	r18, Y+14	; 0x0e
    359a:	00 97       	sbiw	r24, 0x00	; 0
    359c:	a1 f6       	brne	.-88     	; 0x3546 <AnticollSelect+0x78>
    359e:	ae 01       	movw	r20, r28
    35a0:	43 5f       	subi	r20, 0xF3	; 243
    35a2:	5f 4f       	sbci	r21, 0xFF	; 255
    35a4:	b7 01       	movw	r22, r14
    35a6:	82 2f       	mov	r24, r18
    35a8:	36 df       	rcall	.-404    	; 0x3416 <Select>
    35aa:	00 97       	sbiw	r24, 0x00	; 0
    35ac:	19 f4       	brne	.+6      	; 0x35b4 <AnticollSelect+0xe6>
    35ae:	2d 85       	ldd	r18, Y+13	; 0x0d
    35b0:	22 ff       	sbrs	r18, 2
    35b2:	ca cf       	rjmp	.-108    	; 0x3548 <AnticollSelect+0x7a>
    35b4:	1f 5f       	subi	r17, 0xFF	; 255
    35b6:	f4 e0       	ldi	r31, 0x04	; 4
    35b8:	ef 0e       	add	r14, r31
    35ba:	f1 1c       	adc	r15, r1
    35bc:	13 30       	cpi	r17, 0x03	; 3
    35be:	09 f0       	breq	.+2      	; 0x35c2 <AnticollSelect+0xf4>
    35c0:	a2 cf       	rjmp	.-188    	; 0x3506 <AnticollSelect+0x38>
    35c2:	2d 85       	ldd	r18, Y+13	; 0x0d
    35c4:	49 81       	ldd	r20, Y+1	; 0x01
    35c6:	5a 81       	ldd	r21, Y+2	; 0x02
    35c8:	6b 81       	ldd	r22, Y+3	; 0x03
    35ca:	7c 81       	ldd	r23, Y+4	; 0x04
    35cc:	f6 01       	movw	r30, r12
    35ce:	40 83       	st	Z, r20
    35d0:	51 83       	std	Z+1, r21	; 0x01
    35d2:	62 83       	std	Z+2, r22	; 0x02
    35d4:	73 83       	std	Z+3, r23	; 0x03
    35d6:	c6 cf       	rjmp	.-116    	; 0x3564 <AnticollSelect+0x96>
    35d8:	11 30       	cpi	r17, 0x01	; 1
    35da:	29 f0       	breq	.+10     	; 0x35e6 <AnticollSelect+0x118>
    35dc:	12 30       	cpi	r17, 0x02	; 2
    35de:	69 f4       	brne	.+26     	; 0x35fa <AnticollSelect+0x12c>
    35e0:	91 2c       	mov	r9, r1
    35e2:	27 e9       	ldi	r18, 0x97	; 151
    35e4:	a0 cf       	rjmp	.-192    	; 0x3526 <AnticollSelect+0x58>
    35e6:	91 2c       	mov	r9, r1
    35e8:	2a 81       	ldd	r18, Y+2	; 0x02
    35ea:	3b 81       	ldd	r19, Y+3	; 0x03
    35ec:	4c 81       	ldd	r20, Y+4	; 0x04
    35ee:	f6 01       	movw	r30, r12
    35f0:	20 83       	st	Z, r18
    35f2:	31 83       	std	Z+1, r19	; 0x01
    35f4:	42 83       	std	Z+2, r20	; 0x02
    35f6:	25 e9       	ldi	r18, 0x95	; 149
    35f8:	a2 cf       	rjmp	.-188    	; 0x353e <AnticollSelect+0x70>
    35fa:	91 2c       	mov	r9, r1
    35fc:	23 e9       	ldi	r18, 0x93	; 147
    35fe:	a1 cf       	rjmp	.-190    	; 0x3542 <AnticollSelect+0x74>
    3600:	00 e2       	ldi	r16, 0x20	; 32
    3602:	f2 cf       	rjmp	.-28     	; 0x35e8 <AnticollSelect+0x11a>
    3604:	4d 81       	ldd	r20, Y+5	; 0x05
    3606:	5e 81       	ldd	r21, Y+6	; 0x06
    3608:	6f 81       	ldd	r22, Y+7	; 0x07
    360a:	78 85       	ldd	r23, Y+8	; 0x08
    360c:	f6 01       	movw	r30, r12
    360e:	43 83       	std	Z+3, r20	; 0x03
    3610:	54 83       	std	Z+4, r21	; 0x04
    3612:	65 83       	std	Z+5, r22	; 0x05
    3614:	76 83       	std	Z+6, r23	; 0x06
    3616:	a6 cf       	rjmp	.-180    	; 0x3564 <AnticollSelect+0x96>
    3618:	09 2d       	mov	r16, r9
    361a:	23 e9       	ldi	r18, 0x93	; 147
    361c:	be cf       	rjmp	.-132    	; 0x359a <AnticollSelect+0xcc>

0000361e <Authentication>:
    361e:	cf 93       	push	r28
    3620:	df 93       	push	r29
    3622:	10 92 31 0b 	sts	0x0B31, r1	; 0x800b31 <MInfo>
    3626:	10 92 32 0b 	sts	0x0B32, r1	; 0x800b32 <MInfo+0x1>
    362a:	10 92 33 0b 	sts	0x0B33, r1	; 0x800b33 <MInfo+0x2>
    362e:	10 92 34 0b 	sts	0x0B34, r1	; 0x800b34 <MInfo+0x3>
    3632:	10 92 35 0b 	sts	0x0B35, r1	; 0x800b35 <MInfo+0x4>
    3636:	10 92 37 0b 	sts	0x0B37, r1	; 0x800b37 <MInfo+0x6>
    363a:	10 92 36 0b 	sts	0x0B36, r1	; 0x800b36 <MInfo+0x5>
    363e:	10 92 38 0b 	sts	0x0B38, r1	; 0x800b38 <MInfo+0x7>
    3642:	80 93 1d 0b 	sts	0x0B1D, r24	; 0x800b1d <SerBuffer>
    3646:	20 93 1e 0b 	sts	0x0B1E, r18	; 0x800b1e <SerBuffer+0x1>
    364a:	86 e0       	ldi	r24, 0x06	; 6
    364c:	fb 01       	movw	r30, r22
    364e:	af e1       	ldi	r26, 0x1F	; 31
    3650:	bb e0       	ldi	r27, 0x0B	; 11
    3652:	01 90       	ld	r0, Z+
    3654:	0d 92       	st	X+, r0
    3656:	8a 95       	dec	r24
    3658:	e1 f7       	brne	.-8      	; 0x3652 <Authentication+0x34>
    365a:	fa 01       	movw	r30, r20
    365c:	80 81       	ld	r24, Z
    365e:	91 81       	ldd	r25, Z+1	; 0x01
    3660:	a2 81       	ldd	r26, Z+2	; 0x02
    3662:	b3 81       	ldd	r27, Z+3	; 0x03
    3664:	80 93 25 0b 	sts	0x0B25, r24	; 0x800b25 <SerBuffer+0x8>
    3668:	90 93 26 0b 	sts	0x0B26, r25	; 0x800b26 <SerBuffer+0x9>
    366c:	a0 93 27 0b 	sts	0x0B27, r26	; 0x800b27 <SerBuffer+0xa>
    3670:	b0 93 28 0b 	sts	0x0B28, r27	; 0x800b28 <SerBuffer+0xb>
    3674:	8c e0       	ldi	r24, 0x0C	; 12
    3676:	80 93 34 0b 	sts	0x0B34, r24	; 0x800b34 <MInfo+0x3>
    367a:	80 ed       	ldi	r24, 0xD0	; 208
    367c:	97 e0       	ldi	r25, 0x07	; 7
    367e:	89 db       	rcall	.-2286   	; 0x2d92 <SetTimeOut>
    3680:	41 e3       	ldi	r20, 0x31	; 49
    3682:	5b e0       	ldi	r21, 0x0B	; 11
    3684:	6d e1       	ldi	r22, 0x1D	; 29
    3686:	7b e0       	ldi	r23, 0x0B	; 11
    3688:	8e e0       	ldi	r24, 0x0E	; 14
    368a:	f5 db       	rcall	.-2070   	; 0x2e76 <M522PcdCmd>
    368c:	ec 01       	movw	r28, r24
    368e:	89 2b       	or	r24, r25
    3690:	21 f0       	breq	.+8      	; 0x369a <Authentication+0x7c>
    3692:	ce 01       	movw	r24, r28
    3694:	df 91       	pop	r29
    3696:	cf 91       	pop	r28
    3698:	08 95       	ret
    369a:	88 e0       	ldi	r24, 0x08	; 8
    369c:	7c d0       	rcall	.+248    	; 0x3796 <RcGetReg>
    369e:	8f 70       	andi	r24, 0x0F	; 15
    36a0:	88 30       	cpi	r24, 0x08	; 8
    36a2:	b9 f3       	breq	.-18     	; 0x3692 <Authentication+0x74>
    36a4:	c1 e0       	ldi	r28, 0x01	; 1
    36a6:	d2 e0       	ldi	r29, 0x02	; 2
    36a8:	ce 01       	movw	r24, r28
    36aa:	df 91       	pop	r29
    36ac:	cf 91       	pop	r28
    36ae:	08 95       	ret

000036b0 <Read>:
    36b0:	cf 93       	push	r28
    36b2:	df 93       	push	r29
    36b4:	eb 01       	movw	r28, r22
    36b6:	10 92 31 0b 	sts	0x0B31, r1	; 0x800b31 <MInfo>
    36ba:	10 92 32 0b 	sts	0x0B32, r1	; 0x800b32 <MInfo+0x1>
    36be:	10 92 33 0b 	sts	0x0B33, r1	; 0x800b33 <MInfo+0x2>
    36c2:	10 92 35 0b 	sts	0x0B35, r1	; 0x800b35 <MInfo+0x4>
    36c6:	10 92 37 0b 	sts	0x0B37, r1	; 0x800b37 <MInfo+0x6>
    36ca:	10 92 36 0b 	sts	0x0B36, r1	; 0x800b36 <MInfo+0x5>
    36ce:	10 92 38 0b 	sts	0x0B38, r1	; 0x800b38 <MInfo+0x7>
    36d2:	90 e3       	ldi	r25, 0x30	; 48
    36d4:	90 93 1d 0b 	sts	0x0B1D, r25	; 0x800b1d <SerBuffer>
    36d8:	80 93 1e 0b 	sts	0x0B1E, r24	; 0x800b1e <SerBuffer+0x1>
    36dc:	82 e0       	ldi	r24, 0x02	; 2
    36de:	80 93 34 0b 	sts	0x0B34, r24	; 0x800b34 <MInfo+0x3>
    36e2:	80 e1       	ldi	r24, 0x10	; 16
    36e4:	97 e2       	ldi	r25, 0x27	; 39
    36e6:	55 db       	rcall	.-2390   	; 0x2d92 <SetTimeOut>
    36e8:	41 e3       	ldi	r20, 0x31	; 49
    36ea:	5b e0       	ldi	r21, 0x0B	; 11
    36ec:	6d e1       	ldi	r22, 0x1D	; 29
    36ee:	7b e0       	ldi	r23, 0x0B	; 11
    36f0:	8c e0       	ldi	r24, 0x0C	; 12
    36f2:	c1 db       	rcall	.-2174   	; 0x2e76 <M522PcdCmd>
    36f4:	00 97       	sbiw	r24, 0x00	; 0
    36f6:	91 f0       	breq	.+36     	; 0x371c <Read+0x6c>
    36f8:	81 30       	cpi	r24, 0x01	; 1
    36fa:	91 05       	cpc	r25, r1
    36fc:	39 f0       	breq	.+14     	; 0x370c <Read+0x5c>
    36fe:	20 91 36 0b 	lds	r18, 0x0B36	; 0x800b36 <MInfo+0x5>
    3702:	30 91 37 0b 	lds	r19, 0x0B37	; 0x800b37 <MInfo+0x6>
    3706:	24 30       	cpi	r18, 0x04	; 4
    3708:	31 05       	cpc	r19, r1
    370a:	b1 f0       	breq	.+44     	; 0x3738 <Read+0x88>
    370c:	20 e1       	ldi	r18, 0x10	; 16
    370e:	fe 01       	movw	r30, r28
    3710:	11 92       	st	Z+, r1
    3712:	2a 95       	dec	r18
    3714:	e9 f7       	brne	.-6      	; 0x3710 <Read+0x60>
    3716:	df 91       	pop	r29
    3718:	cf 91       	pop	r28
    371a:	08 95       	ret
    371c:	20 91 35 0b 	lds	r18, 0x0B35	; 0x800b35 <MInfo+0x4>
    3720:	20 31       	cpi	r18, 0x10	; 16
    3722:	a9 f0       	breq	.+42     	; 0x374e <Read+0x9e>
    3724:	80 e1       	ldi	r24, 0x10	; 16
    3726:	fe 01       	movw	r30, r28
    3728:	11 92       	st	Z+, r1
    372a:	8a 95       	dec	r24
    372c:	e9 f7       	brne	.-6      	; 0x3728 <Read+0x78>
    372e:	88 e0       	ldi	r24, 0x08	; 8
    3730:	90 e0       	ldi	r25, 0x00	; 0
    3732:	df 91       	pop	r29
    3734:	cf 91       	pop	r28
    3736:	08 95       	ret
    3738:	80 91 1d 0b 	lds	r24, 0x0B1D	; 0x800b1d <SerBuffer>
    373c:	98 2f       	mov	r25, r24
    373e:	9f 70       	andi	r25, 0x0F	; 15
    3740:	90 93 1d 0b 	sts	0x0B1D, r25	; 0x800b1d <SerBuffer>
    3744:	8a 70       	andi	r24, 0x0A	; 10
    3746:	61 f0       	breq	.+24     	; 0x3760 <Read+0xb0>
    3748:	85 e0       	ldi	r24, 0x05	; 5
    374a:	91 e0       	ldi	r25, 0x01	; 1
    374c:	df cf       	rjmp	.-66     	; 0x370c <Read+0x5c>
    374e:	20 e1       	ldi	r18, 0x10	; 16
    3750:	ed e1       	ldi	r30, 0x1D	; 29
    3752:	fb e0       	ldi	r31, 0x0B	; 11
    3754:	de 01       	movw	r26, r28
    3756:	01 90       	ld	r0, Z+
    3758:	0d 92       	st	X+, r0
    375a:	2a 95       	dec	r18
    375c:	e1 f7       	brne	.-8      	; 0x3756 <Read+0xa6>
    375e:	db cf       	rjmp	.-74     	; 0x3716 <Read+0x66>
    3760:	81 e0       	ldi	r24, 0x01	; 1
    3762:	92 e0       	ldi	r25, 0x02	; 2
    3764:	d3 cf       	rjmp	.-90     	; 0x370c <Read+0x5c>

00003766 <readCardID>:

short readCardID(unsigned char cardType, unsigned char *buffer)
{
	unsigned char zone = 4;

	if(cardType == MIFARE_1K)
    3766:	88 30       	cpi	r24, 0x08	; 8
    3768:	11 f0       	breq	.+4      	; 0x376e <readCardID+0x8>
}


short readCardID(unsigned char cardType, unsigned char *buffer)
{
	unsigned char zone = 4;
    376a:	84 e0       	ldi	r24, 0x04	; 4
	{
		zone = 1;
	}
	
	//Read CardID from User Zone
	return(Read(zone, buffer));
    376c:	a1 cf       	rjmp	.-190    	; 0x36b0 <Read>
{
	unsigned char zone = 4;

	if(cardType == MIFARE_1K)
	{
		zone = 1;
    376e:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	//Read CardID from User Zone
	return(Read(zone, buffer));
    3770:	9f cf       	rjmp	.-194    	; 0x36b0 <Read>

00003772 <RcSetReg>:
     RegVal        The value to be written
Return:
     None
**************************************************/
void RcSetReg(unsigned char RegAddr, unsigned char RegVal)
{ 
    3772:	cf 93       	push	r28
    3774:	df 93       	push	r29
    3776:	1f 92       	push	r1
    3778:	cd b7       	in	r28, 0x3d	; 61
    377a:	de b7       	in	r29, 0x3e	; 62

	// shift addr, bits[6:1] defines address
	RegAddr = RegAddr << 1;
    377c:	88 0f       	add	r24, r24
	
	//clear bits 7 and 0 for SPI write address
    RegAddr &= 0x7e;   
	Spi_ss_low;
    377e:	71 98       	cbi	0x0e, 1	; 14
    
	Spi_send(RegAddr);
    3780:	8e 77       	andi	r24, 0x7E	; 126
    3782:	69 83       	std	Y+1, r22	; 0x01
    3784:	49 d0       	rcall	.+146    	; 0x3818 <Spi_send>
	Spi_send(RegVal);
    3786:	69 81       	ldd	r22, Y+1	; 0x01
    3788:	86 2f       	mov	r24, r22
    378a:	46 d0       	rcall	.+140    	; 0x3818 <Spi_send>

	Spi_ss_high;
    378c:	71 9a       	sbi	0x0e, 1	; 14

}
    378e:	0f 90       	pop	r0
    3790:	df 91       	pop	r29
    3792:	cf 91       	pop	r28
    3794:	08 95       	ret

00003796 <RcGetReg>:
{
    unsigned char RegVal;
    //short status;	
	
	// shift addr, bits[6:1] defines address
	RegAddr = RegAddr << 1;
    3796:	88 0f       	add	r24, r24
	
	// for SPI read, clear bit 0 and set bit 
	RegAddr = (RegAddr & 0xfe) | 0x80; 
    3798:	8e 77       	andi	r24, 0x7E	; 126
    
	Spi_ss_low;
    379a:	71 98       	cbi	0x0e, 1	; 14
	
	// send address byte w/ read bit(7) set 
	Spi_send(RegAddr);
    379c:	80 68       	ori	r24, 0x80	; 128
    379e:	3c d0       	rcall	.+120    	; 0x3818 <Spi_send>
	
	// read register value
	RegVal = Spi_receive();
    37a0:	40 d0       	rcall	.+128    	; 0x3822 <Spi_receive>
	
	Spi_ss_high;
    37a2:	71 9a       	sbi	0x0e, 1	; 14
		
    return RegVal;
}
    37a4:	08 95       	ret

000037a6 <RcModifyReg>:
     MaskByte      Only the corresponding bit '1' is valid,
Return:
     None
**************************************************/
void RcModifyReg(unsigned char RegAddr, unsigned char ModifyVal, unsigned char MaskByte)
{
    37a6:	1f 93       	push	r17
    37a8:	cf 93       	push	r28
    37aa:	df 93       	push	r29
    37ac:	00 d0       	rcall	.+0      	; 0x37ae <RcModifyReg+0x8>
    37ae:	cd b7       	in	r28, 0x3d	; 61
    37b0:	de b7       	in	r29, 0x3e	; 62
    37b2:	18 2f       	mov	r17, r24
    unsigned char RegVal;
    RegVal = RcGetReg(RegAddr);
    37b4:	4a 83       	std	Y+2, r20	; 0x02
    37b6:	69 83       	std	Y+1, r22	; 0x01
    37b8:	ee df       	rcall	.-36     	; 0x3796 <RcGetReg>
    if(ModifyVal)
    37ba:	69 81       	ldd	r22, Y+1	; 0x01
    37bc:	4a 81       	ldd	r20, Y+2	; 0x02
    37be:	61 11       	cpse	r22, r1
    37c0:	0a c0       	rjmp	.+20     	; 0x37d6 <RcModifyReg+0x30>
    {
        RegVal |= MaskByte;
    }
    else
    {
        RegVal &= (~MaskByte);
    37c2:	64 2f       	mov	r22, r20
    37c4:	60 95       	com	r22
    37c6:	68 23       	and	r22, r24
    }
    RcSetReg(RegAddr, RegVal);
    37c8:	81 2f       	mov	r24, r17
}
    37ca:	0f 90       	pop	r0
    37cc:	0f 90       	pop	r0
    37ce:	df 91       	pop	r29
    37d0:	cf 91       	pop	r28
    37d2:	1f 91       	pop	r17
    }
    else
    {
        RegVal &= (~MaskByte);
    }
    RcSetReg(RegAddr, RegVal);
    37d4:	ce cf       	rjmp	.-100    	; 0x3772 <RcSetReg>
{
    unsigned char RegVal;
    RegVal = RcGetReg(RegAddr);
    if(ModifyVal)
    {
        RegVal |= MaskByte;
    37d6:	68 2f       	mov	r22, r24
    37d8:	64 2b       	or	r22, r20
    }
    else
    {
        RegVal &= (~MaskByte);
    }
    RcSetReg(RegAddr, RegVal);
    37da:	81 2f       	mov	r24, r17
}
    37dc:	0f 90       	pop	r0
    37de:	0f 90       	pop	r0
    37e0:	df 91       	pop	r29
    37e2:	cf 91       	pop	r28
    37e4:	1f 91       	pop	r17
    }
    else
    {
        RegVal &= (~MaskByte);
    }
    RcSetReg(RegAddr, RegVal);
    37e6:	c5 cf       	rjmp	.-118    	; 0x3772 <RcSetReg>

000037e8 <Spi_initialize>:
    {
        // Wait until Char is sent
    }

    /* Return the received byte*/
    return SPDR;
    37e8:	cf 93       	push	r28
    37ea:	df 93       	push	r29
    37ec:	1f 92       	push	r1
    37ee:	cd b7       	in	r28, 0x3d	; 61
    37f0:	de b7       	in	r29, 0x3e	; 62
    37f2:	84 b1       	in	r24, 0x04	; 4
    37f4:	87 60       	ori	r24, 0x07	; 7
    37f6:	84 b9       	out	0x04, r24	; 4
    37f8:	23 98       	cbi	0x04, 3	; 4
    37fa:	28 9a       	sbi	0x05, 0	; 5
    37fc:	82 e0       	ldi	r24, 0x02	; 2
    37fe:	8d b9       	out	0x0d, r24	; 13
    3800:	71 9a       	sbi	0x0e, 1	; 14
    3802:	29 98       	cbi	0x05, 1	; 5
    3804:	82 e5       	ldi	r24, 0x52	; 82
    3806:	8c bd       	out	0x2c, r24	; 44
    3808:	8d b5       	in	r24, 0x2d	; 45
    380a:	89 83       	std	Y+1, r24	; 0x01
    380c:	8e b5       	in	r24, 0x2e	; 46
    380e:	89 83       	std	Y+1, r24	; 0x01
    3810:	0f 90       	pop	r0
    3812:	df 91       	pop	r29
    3814:	cf 91       	pop	r28
    3816:	08 95       	ret

00003818 <Spi_send>:

void Spi_send ( uint8_t ucData )
{
	
    /* Start transmission */
    SPDR  = ucData ;     // Send Character
    3818:	8e bd       	out	0x2e, r24	; 46

    /* Wait for transmission complete */
    while (!(SPSR & (1 << SPIF)))
    381a:	0d b4       	in	r0, 0x2d	; 45
    381c:	07 fe       	sbrs	r0, 7
    381e:	fd cf       	rjmp	.-6      	; 0x381a <Spi_send+0x2>
    {
        // Wait until Char is sent
    }

}
    3820:	08 95       	ret

00003822 <Spi_receive>:

uint8_t Spi_receive ()
{
	
    /* Start transmission */
    SPDR  = 0xff;     // Send dummy byte
    3822:	8f ef       	ldi	r24, 0xFF	; 255
    3824:	8e bd       	out	0x2e, r24	; 46

    /* Wait for transmission complete */
    while (!(SPSR & (1 << SPIF)))
    3826:	0d b4       	in	r0, 0x2d	; 45
    3828:	07 fe       	sbrs	r0, 7
    382a:	fd cf       	rjmp	.-6      	; 0x3826 <Spi_receive+0x4>
    {
        // Wait until Char is sent
    }

    /* Return the received byte*/
    return SPDR;
    382c:	8e b5       	in	r24, 0x2e	; 46
}
    382e:	08 95       	ret

00003830 <main>:

int main(void){

	
	// SINGLE-CHIP SOLUTION
	cli(); //make sure interrupts are disabled before initialization.
    3830:	f8 94       	cli
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    3832:	0f b6       	in	r0, 0x3f	; 63
    3834:	f8 94       	cli
    3836:	a8 95       	wdr
    3838:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    383c:	88 61       	ori	r24, 0x18	; 24
    383e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3842:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3846:	0f be       	out	0x3f, r0	; 63
	wdt_disable();

	// init serial for PinPointSystem LCD output
	serial_init(NULL);
    3848:	80 e0       	ldi	r24, 0x00	; 0
    384a:	90 e0       	ldi	r25, 0x00	; 0
    384c:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <serial_init>
#ifdef DEBUG_UART
	debugMsgStrConst("\r\nUART TEST\r\n ");
#endif

    // Init the timer system for the MAC
    timerInit();
    3850:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <timerInit>

	InitTimerZero();	//timer for ACA machine comm.
    3854:	24 da       	rcall	.-3000   	; 0x2c9e <InitTimerZero>

    sei();
    3856:	78 94       	sei
	Init the PPOS application on powerup
	get Setup 
	start scanning for a coordinator	
	Initialize ACA Programming data		
	*/
    appInit();
    3858:	0e 94 2d 03 	call	0x65a	; 0x65a <appInit>
*/

/*Initialize the processor and RC522*/
void mifareInit(void)
{
	Spi_initialize();
    385c:	c5 df       	rcall	.-118    	; 0x37e8 <Spi_initialize>
	Rc522Init();	
    385e:	c0 da       	rcall	.-2688   	; 0x2de0 <Rc522Init>
    for(;;)
    {
        // Turn interrupts on if they are off.  They should always be on
        // at this point in the loop, so just turn them on every time, in
        // case interrupts were inadvertently turned off elsewhere.
        sei();
    3860:	78 94       	sei

        // Task functions called from main loop.  Either add your own task loop
        // or edit the example appTask().
		//Reader and machines are initialized
        appTask();
    3862:	0e 94 11 04 	call	0x822	; 0x822 <appTask>
        macTask();
    3866:	cd d6       	rcall	.+3482   	; 0x4602 <macTask>

    }
    3868:	fb cf       	rjmp	.-10     	; 0x3860 <main+0x30>

0000386a <radioInit>:
    {
    }
}

void radioSetModulation(u8 modulation)
{
    386a:	ed ef       	ldi	r30, 0xFD	; 253
    386c:	f3 e0       	ldi	r31, 0x03	; 3
    386e:	df 01       	movw	r26, r30
    3870:	11 97       	sbiw	r26, 0x01	; 1
    3872:	f1 f7       	brne	.-4      	; 0x3870 <radioInit+0x6>
    3874:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    3878:	91 60       	ori	r25, 0x01	; 1
    387a:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    387e:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    3882:	9d 7f       	andi	r25, 0xFD	; 253
    3884:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    3888:	ad e0       	ldi	r26, 0x0D	; 13
    388a:	b0 e0       	ldi	r27, 0x00	; 0
    388c:	11 97       	sbiw	r26, 0x01	; 1
    388e:	f1 f7       	brne	.-4      	; 0x388c <radioInit+0x22>
    3890:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    3894:	9e 7f       	andi	r25, 0xFE	; 254
    3896:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    389a:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    389e:	90 7e       	andi	r25, 0xE0	; 224
    38a0:	93 60       	ori	r25, 0x03	; 3
    38a2:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    38a6:	31 97       	sbiw	r30, 0x01	; 1
    38a8:	f1 f7       	brne	.-4      	; 0x38a6 <radioInit+0x3c>
    38aa:	9c e4       	ldi	r25, 0x4C	; 76
    38ac:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <__TEXT_REGION_LENGTH__+0x7e014e>
    38b0:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x7e0149>
    38b4:	90 7f       	andi	r25, 0xF0	; 240
    38b6:	97 60       	ori	r25, 0x07	; 7
    38b8:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <__TEXT_REGION_LENGTH__+0x7e0149>
    38bc:	81 11       	cpse	r24, r1
    38be:	3c d3       	rcall	.+1656   	; 0x3f38 <calibrate_rc_osc>
    38c0:	80 e4       	ldi	r24, 0x40	; 64
    38c2:	08 95       	ret

000038c4 <radioRxStartEvent>:
    38c4:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__TEXT_REGION_LENGTH__+0x7e0146>
    38c8:	8f 71       	andi	r24, 0x1F	; 31
    38ca:	80 93 34 05 	sts	0x0534, r24	; 0x800534 <rssi_val>
    38ce:	10 92 54 0c 	sts	0x0C54, r1	; 0x800c54 <macConfig+0x17>
    38d2:	08 95       	ret

000038d4 <radioGetSavedRssiValue>:
    38d4:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <radio_part_number.3584>
    38d8:	81 11       	cpse	r24, r1
    38da:	04 c0       	rjmp	.+8      	; 0x38e4 <radioGetSavedRssiValue+0x10>
    38dc:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__TEXT_REGION_LENGTH__+0x7e015c>
    38e0:	80 93 33 05 	sts	0x0533, r24	; 0x800533 <radio_part_number.3584>
    38e4:	82 30       	cpi	r24, 0x02	; 2
    38e6:	19 f0       	breq	.+6      	; 0x38ee <radioGetSavedRssiValue+0x1a>
    38e8:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <rssi_val>
    38ec:	08 95       	ret
    38ee:	86 e1       	ldi	r24, 0x16	; 22
    38f0:	08 95       	ret

000038f2 <radioGetSavedLqiValue>:
    38f2:	80 91 b9 0b 	lds	r24, 0x0BB9	; 0x800bb9 <mac_buffer_rx+0x80>
    38f6:	08 95       	ret

000038f8 <radioSetOperatingChannel>:
    38f8:	95 ef       	ldi	r25, 0xF5	; 245
    38fa:	98 0f       	add	r25, r24
    38fc:	90 31       	cpi	r25, 0x10	; 16
    38fe:	10 f0       	brcs	.+4      	; 0x3904 <radioSetOperatingChannel+0xc>
    3900:	82 e4       	ldi	r24, 0x42	; 66
    3902:	08 95       	ret
    3904:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    3908:	91 fd       	sbrc	r25, 1
    390a:	1b c0       	rjmp	.+54     	; 0x3942 <radioSetOperatingChannel+0x4a>
    390c:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x7e0148>
    3910:	9f 71       	andi	r25, 0x1F	; 31
    3912:	89 17       	cp	r24, r25
    3914:	c1 f0       	breq	.+48     	; 0x3946 <radioSetOperatingChannel+0x4e>
    3916:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x7e0148>
    391a:	90 7e       	andi	r25, 0xE0	; 224
    391c:	28 2f       	mov	r18, r24
    391e:	2f 71       	andi	r18, 0x1F	; 31
    3920:	92 2b       	or	r25, r18
    3922:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <__TEXT_REGION_LENGTH__+0x7e0148>
    3926:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    392a:	9f 71       	andi	r25, 0x1F	; 31
    392c:	96 30       	cpi	r25, 0x06	; 6
    392e:	69 f0       	breq	.+26     	; 0x394a <radioSetOperatingChannel+0x52>
    3930:	99 30       	cpi	r25, 0x09	; 9
    3932:	59 f0       	breq	.+22     	; 0x394a <radioSetOperatingChannel+0x52>
    3934:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x7e0148>
    3938:	9f 71       	andi	r25, 0x1F	; 31
    393a:	89 17       	cp	r24, r25
    393c:	21 f0       	breq	.+8      	; 0x3946 <radioSetOperatingChannel+0x4e>
    393e:	83 e4       	ldi	r24, 0x43	; 67
    3940:	08 95       	ret
    3942:	84 e4       	ldi	r24, 0x44	; 68
    3944:	08 95       	ret
    3946:	80 e4       	ldi	r24, 0x40	; 64
    3948:	08 95       	ret
    394a:	ed e2       	ldi	r30, 0x2D	; 45
    394c:	f1 e0       	ldi	r31, 0x01	; 1
    394e:	31 97       	sbiw	r30, 0x01	; 1
    3950:	f1 f7       	brne	.-4      	; 0x394e <radioSetOperatingChannel+0x56>
    3952:	f0 cf       	rjmp	.-32     	; 0x3934 <radioSetOperatingChannel+0x3c>

00003954 <radioSetClockSpeed>:
    3954:	66 30       	cpi	r22, 0x06	; 6
    3956:	e0 f4       	brcc	.+56     	; 0x3990 <radioSetClockSpeed+0x3c>
    3958:	88 23       	and	r24, r24
    395a:	69 f0       	breq	.+26     	; 0x3976 <radioSetClockSpeed+0x22>
    395c:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    3960:	87 7f       	andi	r24, 0xF7	; 247
    3962:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    3966:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    396a:	88 7f       	andi	r24, 0xF8	; 248
    396c:	68 2b       	or	r22, r24
    396e:	60 93 43 01 	sts	0x0143, r22	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    3972:	80 e4       	ldi	r24, 0x40	; 64
    3974:	08 95       	ret
    3976:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    397a:	88 60       	ori	r24, 0x08	; 8
    397c:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    3980:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    3984:	88 7f       	andi	r24, 0xF8	; 248
    3986:	68 2b       	or	r22, r24
    3988:	60 93 43 01 	sts	0x0143, r22	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    398c:	80 e4       	ldi	r24, 0x40	; 64
    398e:	08 95       	ret
    3990:	82 e4       	ldi	r24, 0x42	; 66
    3992:	08 95       	ret

00003994 <radioGetTrxState>:
    3994:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    3998:	8f 71       	andi	r24, 0x1F	; 31
    399a:	08 95       	ret

0000399c <radioSetTrxState>:
    399c:	cf 93       	push	r28
    399e:	c8 2f       	mov	r28, r24
    39a0:	88 ef       	ldi	r24, 0xF8	; 248
    39a2:	8c 0f       	add	r24, r28
    39a4:	82 30       	cpi	r24, 0x02	; 2
    39a6:	48 f0       	brcs	.+18     	; 0x39ba <radioSetTrxState+0x1e>
    39a8:	8c 2f       	mov	r24, r28
    39aa:	8f 7e       	andi	r24, 0xEF	; 239
    39ac:	86 30       	cpi	r24, 0x06	; 6
    39ae:	29 f0       	breq	.+10     	; 0x39ba <radioSetTrxState+0x1e>
    39b0:	c9 31       	cpi	r28, 0x19	; 25
    39b2:	19 f0       	breq	.+6      	; 0x39ba <radioSetTrxState+0x1e>
    39b4:	82 e4       	ldi	r24, 0x42	; 66
    39b6:	cf 91       	pop	r28
    39b8:	08 95       	ret
    39ba:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    39be:	81 fd       	sbrc	r24, 1
    39c0:	37 c0       	rjmp	.+110    	; 0x3a30 <radioSetTrxState+0x94>
    39c2:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    39c6:	9f 71       	andi	r25, 0x1F	; 31
    39c8:	2f ee       	ldi	r18, 0xEF	; 239
    39ca:	29 0f       	add	r18, r25
    39cc:	22 30       	cpi	r18, 0x02	; 2
    39ce:	c8 f3       	brcs	.-14     	; 0x39c2 <radioSetTrxState+0x26>
    39d0:	92 30       	cpi	r25, 0x02	; 2
    39d2:	b9 f3       	breq	.-18     	; 0x39c2 <radioSetTrxState+0x26>
    39d4:	91 30       	cpi	r25, 0x01	; 1
    39d6:	a9 f3       	breq	.-22     	; 0x39c2 <radioSetTrxState+0x26>
    39d8:	9e 31       	cpi	r25, 0x1E	; 30
    39da:	99 f3       	breq	.-26     	; 0x39c2 <radioSetTrxState+0x26>
    39dc:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <radio_part_number.3584>
    39e0:	88 23       	and	r24, r24
    39e2:	49 f1       	breq	.+82     	; 0x3a36 <radioSetTrxState+0x9a>
    39e4:	82 30       	cpi	r24, 0x02	; 2
    39e6:	09 f4       	brne	.+2      	; 0x39ea <radioSetTrxState+0x4e>
    39e8:	47 c0       	rjmp	.+142    	; 0x3a78 <radioSetTrxState+0xdc>
    39ea:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    39ee:	8f 71       	andi	r24, 0x1F	; 31
    39f0:	c8 17       	cp	r28, r24
    39f2:	31 f1       	breq	.+76     	; 0x3a40 <radioSetTrxState+0xa4>
    39f4:	c8 30       	cpi	r28, 0x08	; 8
    39f6:	61 f1       	breq	.+88     	; 0x3a50 <radioSetTrxState+0xb4>
    39f8:	c9 31       	cpi	r28, 0x19	; 25
    39fa:	09 f4       	brne	.+2      	; 0x39fe <radioSetTrxState+0x62>
    39fc:	4d c0       	rjmp	.+154    	; 0x3a98 <radioSetTrxState+0xfc>
    39fe:	c6 31       	cpi	r28, 0x16	; 22
    3a00:	09 f4       	brne	.+2      	; 0x3a04 <radioSetTrxState+0x68>
    3a02:	5a c0       	rjmp	.+180    	; 0x3ab8 <radioSetTrxState+0x11c>
    3a04:	2c 2f       	mov	r18, r28
    3a06:	2f 71       	andi	r18, 0x1F	; 31
    3a08:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3a0c:	90 7e       	andi	r25, 0xE0	; 224
    3a0e:	92 2b       	or	r25, r18
    3a10:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3a14:	88 30       	cpi	r24, 0x08	; 8
    3a16:	b9 f0       	breq	.+46     	; 0x3a46 <radioSetTrxState+0xaa>
    3a18:	83 e0       	ldi	r24, 0x03	; 3
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	01 97       	sbiw	r24, 0x01	; 1
    3a1e:	f1 f7       	brne	.-4      	; 0x3a1c <radioSetTrxState+0x80>
    3a20:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    3a24:	8f 71       	andi	r24, 0x1F	; 31
    3a26:	c8 17       	cp	r28, r24
    3a28:	59 f0       	breq	.+22     	; 0x3a40 <radioSetTrxState+0xa4>
    3a2a:	83 e4       	ldi	r24, 0x43	; 67
    3a2c:	cf 91       	pop	r28
    3a2e:	08 95       	ret
    3a30:	84 e4       	ldi	r24, 0x44	; 68
    3a32:	cf 91       	pop	r28
    3a34:	08 95       	ret
    3a36:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__TEXT_REGION_LENGTH__+0x7e015c>
    3a3a:	80 93 33 05 	sts	0x0533, r24	; 0x800533 <radio_part_number.3584>
    3a3e:	d2 cf       	rjmp	.-92     	; 0x39e4 <radioSetTrxState+0x48>
    3a40:	80 e4       	ldi	r24, 0x40	; 64
    3a42:	cf 91       	pop	r28
    3a44:	08 95       	ret
    3a46:	89 e6       	ldi	r24, 0x69	; 105
    3a48:	91 e0       	ldi	r25, 0x01	; 1
    3a4a:	01 97       	sbiw	r24, 0x01	; 1
    3a4c:	f1 f7       	brne	.-4      	; 0x3a4a <radioSetTrxState+0xae>
    3a4e:	e8 cf       	rjmp	.-48     	; 0x3a20 <radioSetTrxState+0x84>
    3a50:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    3a54:	8d 7f       	andi	r24, 0xFD	; 253
    3a56:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    3a5a:	8d e0       	ldi	r24, 0x0D	; 13
    3a5c:	90 e0       	ldi	r25, 0x00	; 0
    3a5e:	01 97       	sbiw	r24, 0x01	; 1
    3a60:	f1 f7       	brne	.-4      	; 0x3a5e <radioSetTrxState+0xc2>
    3a62:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3a66:	80 7e       	andi	r24, 0xE0	; 224
    3a68:	83 60       	ori	r24, 0x03	; 3
    3a6a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3a6e:	83 e0       	ldi	r24, 0x03	; 3
    3a70:	90 e0       	ldi	r25, 0x00	; 0
    3a72:	01 97       	sbiw	r24, 0x01	; 1
    3a74:	f1 f7       	brne	.-4      	; 0x3a72 <radioSetTrxState+0xd6>
    3a76:	d4 cf       	rjmp	.-88     	; 0x3a20 <radioSetTrxState+0x84>
    3a78:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <macIsScanning>
    3a7c:	88 23       	and	r24, r24
    3a7e:	09 f4       	brne	.+2      	; 0x3a82 <radioSetTrxState+0xe6>
    3a80:	b4 cf       	rjmp	.-152    	; 0x39ea <radioSetTrxState+0x4e>
    3a82:	c6 31       	cpi	r28, 0x16	; 22
    3a84:	09 f0       	breq	.+2      	; 0x3a88 <radioSetTrxState+0xec>
    3a86:	b1 cf       	rjmp	.-158    	; 0x39ea <radioSetTrxState+0x4e>
    3a88:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    3a8c:	8f 71       	andi	r24, 0x1F	; 31
    3a8e:	86 30       	cpi	r24, 0x06	; 6
    3a90:	b9 f2       	breq	.-82     	; 0x3a40 <radioSetTrxState+0xa4>
    3a92:	26 e0       	ldi	r18, 0x06	; 6
    3a94:	c6 e0       	ldi	r28, 0x06	; 6
    3a96:	b8 cf       	rjmp	.-144    	; 0x3a08 <radioSetTrxState+0x6c>
    3a98:	89 30       	cpi	r24, 0x09	; 9
    3a9a:	11 f1       	breq	.+68     	; 0x3ae0 <radioSetTrxState+0x144>
    3a9c:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3aa0:	90 7e       	andi	r25, 0xE0	; 224
    3aa2:	99 60       	ori	r25, 0x09	; 9
    3aa4:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3aa8:	86 31       	cpi	r24, 0x16	; 22
    3aaa:	b1 f0       	breq	.+44     	; 0x3ad8 <radioSetTrxState+0x13c>
    3aac:	e9 e6       	ldi	r30, 0x69	; 105
    3aae:	f1 e0       	ldi	r31, 0x01	; 1
    3ab0:	31 97       	sbiw	r30, 0x01	; 1
    3ab2:	f1 f7       	brne	.-4      	; 0x3ab0 <radioSetTrxState+0x114>
    3ab4:	29 e1       	ldi	r18, 0x19	; 25
    3ab6:	a8 cf       	rjmp	.-176    	; 0x3a08 <radioSetTrxState+0x6c>
    3ab8:	89 30       	cpi	r24, 0x09	; 9
    3aba:	d9 f0       	breq	.+54     	; 0x3af2 <radioSetTrxState+0x156>
    3abc:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3ac0:	90 7e       	andi	r25, 0xE0	; 224
    3ac2:	99 60       	ori	r25, 0x09	; 9
    3ac4:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3ac8:	89 31       	cpi	r24, 0x19	; 25
    3aca:	31 f0       	breq	.+12     	; 0x3ad8 <radioSetTrxState+0x13c>
    3acc:	e9 e6       	ldi	r30, 0x69	; 105
    3ace:	f1 e0       	ldi	r31, 0x01	; 1
    3ad0:	31 97       	sbiw	r30, 0x01	; 1
    3ad2:	f1 f7       	brne	.-4      	; 0x3ad0 <radioSetTrxState+0x134>
    3ad4:	26 e1       	ldi	r18, 0x16	; 22
    3ad6:	98 cf       	rjmp	.-208    	; 0x3a08 <radioSetTrxState+0x6c>
    3ad8:	83 e0       	ldi	r24, 0x03	; 3
    3ada:	90 e0       	ldi	r25, 0x00	; 0
    3adc:	01 97       	sbiw	r24, 0x01	; 1
    3ade:	f1 f7       	brne	.-4      	; 0x3adc <radioSetTrxState+0x140>
    3ae0:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3ae4:	80 7e       	andi	r24, 0xE0	; 224
    3ae6:	9c 2f       	mov	r25, r28
    3ae8:	9f 71       	andi	r25, 0x1F	; 31
    3aea:	89 2b       	or	r24, r25
    3aec:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3af0:	93 cf       	rjmp	.-218    	; 0x3a18 <radioSetTrxState+0x7c>
    3af2:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3af6:	80 7e       	andi	r24, 0xE0	; 224
    3af8:	86 61       	ori	r24, 0x16	; 22
    3afa:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3afe:	8c cf       	rjmp	.-232    	; 0x3a18 <radioSetTrxState+0x7c>

00003b00 <radioTrxEndEvent>:
    3b00:	cf 93       	push	r28
    3b02:	df 93       	push	r29
    3b04:	00 d0       	rcall	.+0      	; 0x3b06 <radioTrxEndEvent+0x6>
    3b06:	00 d0       	rcall	.+0      	; 0x3b08 <radioTrxEndEvent+0x8>
    3b08:	1f 92       	push	r1
    3b0a:	cd b7       	in	r28, 0x3d	; 61
    3b0c:	de b7       	in	r29, 0x3e	; 62
    3b0e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    3b12:	8f 71       	andi	r24, 0x1F	; 31
    3b14:	8c 83       	std	Y+4, r24	; 0x04
    3b16:	8c 81       	ldd	r24, Y+4	; 0x04
    3b18:	81 31       	cpi	r24, 0x11	; 17
    3b1a:	09 f4       	brne	.+2      	; 0x3b1e <radioTrxEndEvent+0x1e>
    3b1c:	3d c0       	rjmp	.+122    	; 0x3b98 <radioTrxEndEvent+0x98>
    3b1e:	8c 81       	ldd	r24, Y+4	; 0x04
    3b20:	86 30       	cpi	r24, 0x06	; 6
    3b22:	d1 f1       	breq	.+116    	; 0x3b98 <radioTrxEndEvent+0x98>
    3b24:	8c 81       	ldd	r24, Y+4	; 0x04
    3b26:	81 30       	cpi	r24, 0x01	; 1
    3b28:	b9 f1       	breq	.+110    	; 0x3b98 <radioTrxEndEvent+0x98>
    3b2a:	8c 81       	ldd	r24, Y+4	; 0x04
    3b2c:	86 31       	cpi	r24, 0x16	; 22
    3b2e:	a1 f1       	breq	.+104    	; 0x3b98 <radioTrxEndEvent+0x98>
    3b30:	8c 81       	ldd	r24, Y+4	; 0x04
    3b32:	82 30       	cpi	r24, 0x02	; 2
    3b34:	49 f0       	breq	.+18     	; 0x3b48 <radioTrxEndEvent+0x48>
    3b36:	8c 81       	ldd	r24, Y+4	; 0x04
    3b38:	82 31       	cpi	r24, 0x12	; 18
    3b3a:	31 f0       	breq	.+12     	; 0x3b48 <radioTrxEndEvent+0x48>
    3b3c:	8c 81       	ldd	r24, Y+4	; 0x04
    3b3e:	89 31       	cpi	r24, 0x19	; 25
    3b40:	19 f0       	breq	.+6      	; 0x3b48 <radioTrxEndEvent+0x48>
    3b42:	8c 81       	ldd	r24, Y+4	; 0x04
    3b44:	89 30       	cpi	r24, 0x09	; 9
    3b46:	01 f5       	brne	.+64     	; 0x3b88 <radioTrxEndEvent+0x88>
    3b48:	10 92 54 0c 	sts	0x0C54, r1	; 0x800c54 <macConfig+0x17>
    3b4c:	19 82       	std	Y+1, r1	; 0x01
    3b4e:	1b 82       	std	Y+3, r1	; 0x03
    3b50:	1a 82       	std	Y+2, r1	; 0x02
    3b52:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3b56:	82 95       	swap	r24
    3b58:	86 95       	lsr	r24
    3b5a:	87 70       	andi	r24, 0x07	; 7
    3b5c:	8d 83       	std	Y+5, r24	; 0x05
    3b5e:	8d 81       	ldd	r24, Y+5	; 0x05
    3b60:	83 30       	cpi	r24, 0x03	; 3
    3b62:	09 f4       	brne	.+2      	; 0x3b66 <radioTrxEndEvent+0x66>
    3b64:	77 c0       	rjmp	.+238    	; 0x3c54 <radioTrxEndEvent+0x154>
    3b66:	08 f0       	brcs	.+2      	; 0x3b6a <radioTrxEndEvent+0x6a>
    3b68:	7e c0       	rjmp	.+252    	; 0x3c66 <radioTrxEndEvent+0x166>
    3b6a:	82 30       	cpi	r24, 0x02	; 2
    3b6c:	28 f4       	brcc	.+10     	; 0x3b78 <radioTrxEndEvent+0x78>
    3b6e:	81 e1       	ldi	r24, 0x11	; 17
    3b70:	89 83       	std	Y+1, r24	; 0x01
    3b72:	ce 01       	movw	r24, r28
    3b74:	01 96       	adiw	r24, 0x01	; 1
    3b76:	19 d5       	rcall	.+2610   	; 0x45aa <mac_put_event>
    3b78:	86 e1       	ldi	r24, 0x16	; 22
    3b7a:	10 df       	rcall	.-480    	; 0x399c <radioSetTrxState>
    3b7c:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
    3b80:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    3b84:	0e 94 e5 30 	call	0x61ca	; 0x61ca <srand>
    3b88:	0f 90       	pop	r0
    3b8a:	0f 90       	pop	r0
    3b8c:	0f 90       	pop	r0
    3b8e:	0f 90       	pop	r0
    3b90:	0f 90       	pop	r0
    3b92:	df 91       	pop	r29
    3b94:	cf 91       	pop	r28
    3b96:	08 95       	ret
    3b98:	40 91 7b 01 	lds	r20, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7e017b>
    3b9c:	50 e0       	ldi	r21, 0x00	; 0
    3b9e:	60 e8       	ldi	r22, 0x80	; 128
    3ba0:	71 e0       	ldi	r23, 0x01	; 1
    3ba2:	8a e3       	ldi	r24, 0x3A	; 58
    3ba4:	9b e0       	ldi	r25, 0x0B	; 11
    3ba6:	0e 94 3d 33 	call	0x667a	; 0x667a <memcpy>
    3baa:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7e017b>
    3bae:	80 93 39 0b 	sts	0x0B39, r24	; 0x800b39 <mac_buffer_rx>
    3bb2:	e0 91 7b 01 	lds	r30, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7e017b>
    3bb6:	f0 e0       	ldi	r31, 0x00	; 0
    3bb8:	e7 5c       	subi	r30, 0xC7	; 199
    3bba:	f4 4f       	sbci	r31, 0xF4	; 244
    3bbc:	80 81       	ld	r24, Z
    3bbe:	80 93 b9 0b 	sts	0x0BB9, r24	; 0x800bb9 <mac_buffer_rx+0x80>
    3bc2:	19 82       	std	Y+1, r1	; 0x01
    3bc4:	1b 82       	std	Y+3, r1	; 0x03
    3bc6:	1a 82       	std	Y+2, r1	; 0x02
    3bc8:	20 91 3a 0b 	lds	r18, 0x0B3A	; 0x800b3a <mac_buffer_rx+0x1>
    3bcc:	80 91 3b 0b 	lds	r24, 0x0B3B	; 0x800b3b <mac_buffer_rx+0x2>
    3bd0:	90 e0       	ldi	r25, 0x00	; 0
    3bd2:	98 2f       	mov	r25, r24
    3bd4:	88 27       	eor	r24, r24
    3bd6:	82 0f       	add	r24, r18
    3bd8:	91 1d       	adc	r25, r1
    3bda:	90 93 3b 0b 	sts	0x0B3B, r25	; 0x800b3b <mac_buffer_rx+0x2>
    3bde:	80 93 3a 0b 	sts	0x0B3A, r24	; 0x800b3a <mac_buffer_rx+0x1>
    3be2:	81 36       	cpi	r24, 0x61	; 97
    3be4:	28 e8       	ldi	r18, 0x88	; 136
    3be6:	92 07       	cpc	r25, r18
    3be8:	d9 f1       	breq	.+118    	; 0x3c60 <radioTrxEndEvent+0x160>
    3bea:	b0 f0       	brcs	.+44     	; 0x3c18 <radioTrxEndEvent+0x118>
    3bec:	83 36       	cpi	r24, 0x63	; 99
    3bee:	2c e8       	ldi	r18, 0x8C	; 140
    3bf0:	92 07       	cpc	r25, r18
    3bf2:	99 f1       	breq	.+102    	; 0x3c5a <radioTrxEndEvent+0x15a>
    3bf4:	83 36       	cpi	r24, 0x63	; 99
    3bf6:	28 ec       	ldi	r18, 0xC8	; 200
    3bf8:	92 07       	cpc	r25, r18
    3bfa:	59 f0       	breq	.+22     	; 0x3c12 <radioTrxEndEvent+0x112>
    3bfc:	83 36       	cpi	r24, 0x63	; 99
    3bfe:	98 48       	sbci	r25, 0x88	; 136
    3c00:	b9 f4       	brne	.+46     	; 0x3c30 <radioTrxEndEvent+0x130>
    3c02:	80 91 43 0b 	lds	r24, 0x0B43	; 0x800b43 <mac_buffer_rx+0xa>
    3c06:	82 30       	cpi	r24, 0x02	; 2
    3c08:	41 f1       	breq	.+80     	; 0x3c5a <radioTrxEndEvent+0x15a>
    3c0a:	8b 3b       	cpi	r24, 0xBB	; 187
    3c0c:	91 f1       	breq	.+100    	; 0x3c72 <radioTrxEndEvent+0x172>
    3c0e:	81 30       	cpi	r24, 0x01	; 1
    3c10:	79 f4       	brne	.+30     	; 0x3c30 <radioTrxEndEvent+0x130>
    3c12:	87 e1       	ldi	r24, 0x17	; 23
    3c14:	89 83       	std	Y+1, r24	; 0x01
    3c16:	0c c0       	rjmp	.+24     	; 0x3c30 <radioTrxEndEvent+0x130>
    3c18:	83 30       	cpi	r24, 0x03	; 3
    3c1a:	28 e0       	ldi	r18, 0x08	; 8
    3c1c:	92 07       	cpc	r25, r18
    3c1e:	99 f0       	breq	.+38     	; 0x3c46 <radioTrxEndEvent+0x146>
    3c20:	81 15       	cp	r24, r1
    3c22:	90 48       	sbci	r25, 0x80	; 128
    3c24:	29 f4       	brne	.+10     	; 0x3c30 <radioTrxEndEvent+0x130>
    3c26:	be d7       	rcall	.+3964   	; 0x4ba4 <macIsScanning>
    3c28:	88 23       	and	r24, r24
    3c2a:	11 f0       	breq	.+4      	; 0x3c30 <radioTrxEndEvent+0x130>
    3c2c:	84 e1       	ldi	r24, 0x14	; 20
    3c2e:	89 83       	std	Y+1, r24	; 0x01
    3c30:	ce 01       	movw	r24, r28
    3c32:	01 96       	adiw	r24, 0x01	; 1
    3c34:	ba d4       	rcall	.+2420   	; 0x45aa <mac_put_event>
    3c36:	0f 90       	pop	r0
    3c38:	0f 90       	pop	r0
    3c3a:	0f 90       	pop	r0
    3c3c:	0f 90       	pop	r0
    3c3e:	0f 90       	pop	r0
    3c40:	df 91       	pop	r29
    3c42:	cf 91       	pop	r28
    3c44:	08 95       	ret
    3c46:	80 91 45 0c 	lds	r24, 0x0C45	; 0x800c45 <macConfig+0x8>
    3c4a:	88 23       	and	r24, r24
    3c4c:	89 f3       	breq	.-30     	; 0x3c30 <radioTrxEndEvent+0x130>
    3c4e:	85 e1       	ldi	r24, 0x15	; 21
    3c50:	89 83       	std	Y+1, r24	; 0x01
    3c52:	ee cf       	rjmp	.-36     	; 0x3c30 <radioTrxEndEvent+0x130>
    3c54:	83 e1       	ldi	r24, 0x13	; 19
    3c56:	89 83       	std	Y+1, r24	; 0x01
    3c58:	8c cf       	rjmp	.-232    	; 0x3b72 <radioTrxEndEvent+0x72>
    3c5a:	88 e1       	ldi	r24, 0x18	; 24
    3c5c:	89 83       	std	Y+1, r24	; 0x01
    3c5e:	e8 cf       	rjmp	.-48     	; 0x3c30 <radioTrxEndEvent+0x130>
    3c60:	80 e1       	ldi	r24, 0x10	; 16
    3c62:	89 83       	std	Y+1, r24	; 0x01
    3c64:	e5 cf       	rjmp	.-54     	; 0x3c30 <radioTrxEndEvent+0x130>
    3c66:	85 30       	cpi	r24, 0x05	; 5
    3c68:	09 f0       	breq	.+2      	; 0x3c6c <radioTrxEndEvent+0x16c>
    3c6a:	86 cf       	rjmp	.-244    	; 0x3b78 <radioTrxEndEvent+0x78>
    3c6c:	82 e1       	ldi	r24, 0x12	; 18
    3c6e:	89 83       	std	Y+1, r24	; 0x01
    3c70:	80 cf       	rjmp	.-256    	; 0x3b72 <radioTrxEndEvent+0x72>
    3c72:	89 e1       	ldi	r24, 0x19	; 25
    3c74:	89 83       	std	Y+1, r24	; 0x01
    3c76:	dc cf       	rjmp	.-72     	; 0x3c30 <radioTrxEndEvent+0x130>

00003c78 <radioUseAutoTxCrc>:
    3c78:	90 91 33 05 	lds	r25, 0x0533	; 0x800533 <radio_part_number.3584>
    3c7c:	91 11       	cpse	r25, r1
    3c7e:	0f c0       	rjmp	.+30     	; 0x3c9e <radioUseAutoTxCrc+0x26>
    3c80:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <__TEXT_REGION_LENGTH__+0x7e015c>
    3c84:	90 93 33 05 	sts	0x0533, r25	; 0x800533 <radio_part_number.3584>
    3c88:	92 30       	cpi	r25, 0x02	; 2
    3c8a:	59 f0       	breq	.+22     	; 0x3ca2 <radioUseAutoTxCrc+0x2a>
    3c8c:	91 11       	cpse	r25, r1
    3c8e:	04 c0       	rjmp	.+8      	; 0x3c98 <radioUseAutoTxCrc+0x20>
    3c90:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <__TEXT_REGION_LENGTH__+0x7e015c>
    3c94:	90 93 33 05 	sts	0x0533, r25	; 0x800533 <radio_part_number.3584>
    3c98:	93 30       	cpi	r25, 0x03	; 3
    3c9a:	61 f0       	breq	.+24     	; 0x3cb4 <radioUseAutoTxCrc+0x3c>
    3c9c:	08 95       	ret
    3c9e:	92 30       	cpi	r25, 0x02	; 2
    3ca0:	d9 f7       	brne	.-10     	; 0x3c98 <radioUseAutoTxCrc+0x20>
    3ca2:	90 91 05 00 	lds	r25, 0x0005	; 0x800005 <__TEXT_REGION_LENGTH__+0x7e0005>
    3ca6:	80 fb       	bst	r24, 0
    3ca8:	97 f9       	bld	r25, 7
    3caa:	90 93 05 00 	sts	0x0005, r25	; 0x800005 <__TEXT_REGION_LENGTH__+0x7e0005>
    3cae:	90 91 33 05 	lds	r25, 0x0533	; 0x800533 <radio_part_number.3584>
    3cb2:	ec cf       	rjmp	.-40     	; 0x3c8c <radioUseAutoTxCrc+0x14>
    3cb4:	90 91 04 00 	lds	r25, 0x0004	; 0x800004 <__TEXT_REGION_LENGTH__+0x7e0004>
    3cb8:	80 fb       	bst	r24, 0
    3cba:	95 f9       	bld	r25, 5
    3cbc:	90 93 04 00 	sts	0x0004, r25	; 0x800004 <__TEXT_REGION_LENGTH__+0x7e0004>
    3cc0:	08 95       	ret

00003cc2 <radioSendData>:
    3cc2:	0f 93       	push	r16
    3cc4:	1f 93       	push	r17
    3cc6:	cf 93       	push	r28
    3cc8:	c8 2f       	mov	r28, r24
    3cca:	8b 01       	movw	r16, r22
    3ccc:	87 fd       	sbrc	r24, 7
    3cce:	36 c0       	rjmp	.+108    	; 0x3d3c <radioSendData+0x7a>
    3cd0:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    3cd4:	9f 71       	andi	r25, 0x1F	; 31
    3cd6:	2f ee       	ldi	r18, 0xEF	; 239
    3cd8:	29 0f       	add	r18, r25
    3cda:	22 30       	cpi	r18, 0x02	; 2
    3cdc:	c8 f3       	brcs	.-14     	; 0x3cd0 <radioSendData+0xe>
    3cde:	2f ef       	ldi	r18, 0xFF	; 255
    3ce0:	29 0f       	add	r18, r25
    3ce2:	22 30       	cpi	r18, 0x02	; 2
    3ce4:	a8 f3       	brcs	.-22     	; 0x3cd0 <radioSendData+0xe>
    3ce6:	9e 31       	cpi	r25, 0x1E	; 30
    3ce8:	99 f3       	breq	.-26     	; 0x3cd0 <radioSendData+0xe>
    3cea:	89 e1       	ldi	r24, 0x19	; 25
    3cec:	57 de       	rcall	.-850    	; 0x399c <radioSetTrxState>
    3cee:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    3cf2:	9f 71       	andi	r25, 0x1F	; 31
    3cf4:	99 31       	cpi	r25, 0x19	; 25
    3cf6:	c9 f7       	brne	.-14     	; 0x3cea <radioSendData+0x28>
    3cf8:	f8 01       	movw	r30, r16
    3cfa:	85 81       	ldd	r24, Z+5	; 0x05
    3cfc:	96 81       	ldd	r25, Z+6	; 0x06
    3cfe:	90 93 53 0c 	sts	0x0C53, r25	; 0x800c53 <macConfig+0x16>
    3d02:	80 93 52 0c 	sts	0x0C52, r24	; 0x800c52 <macConfig+0x15>
    3d06:	4c 2f       	mov	r20, r28
    3d08:	50 e0       	ldi	r21, 0x00	; 0
    3d0a:	4e 5f       	subi	r20, 0xFE	; 254
    3d0c:	5f 4f       	sbci	r21, 0xFF	; 255
    3d0e:	b8 01       	movw	r22, r16
    3d10:	81 e8       	ldi	r24, 0x81	; 129
    3d12:	91 e0       	ldi	r25, 0x01	; 1
    3d14:	0e 94 3d 33 	call	0x667a	; 0x667a <memcpy>
    3d18:	ce 5f       	subi	r28, 0xFE	; 254
    3d1a:	c0 93 80 01 	sts	0x0180, r28	; 0x800180 <__TEXT_REGION_LENGTH__+0x7e0180>
    3d1e:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    3d22:	82 60       	ori	r24, 0x02	; 2
    3d24:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    3d28:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    3d2c:	8d 7f       	andi	r24, 0xFD	; 253
    3d2e:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    3d32:	80 e4       	ldi	r24, 0x40	; 64
    3d34:	cf 91       	pop	r28
    3d36:	1f 91       	pop	r17
    3d38:	0f 91       	pop	r16
    3d3a:	08 95       	ret
    3d3c:	82 e4       	ldi	r24, 0x42	; 66
    3d3e:	cf 91       	pop	r28
    3d40:	1f 91       	pop	r17
    3d42:	0f 91       	pop	r16
    3d44:	08 95       	ret

00003d46 <radioSetDeviceRole>:
    3d46:	ee e6       	ldi	r30, 0x6E	; 110
    3d48:	f1 e0       	ldi	r31, 0x01	; 1
    3d4a:	90 81       	ld	r25, Z
    3d4c:	80 fb       	bst	r24, 0
    3d4e:	93 f9       	bld	r25, 3
    3d50:	90 83       	st	Z, r25
    3d52:	08 95       	ret

00003d54 <radioSetPanId>:
    3d54:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7e0162>
    3d58:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <__TEXT_REGION_LENGTH__+0x7e0163>
    3d5c:	08 95       	ret

00003d5e <radioSetShortAddress>:
    3d5e:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7e0160>
    3d62:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <__TEXT_REGION_LENGTH__+0x7e0161>
    3d66:	08 95       	ret

00003d68 <radioSetExtendedAddress>:
    3d68:	dc 01       	movw	r26, r24
    3d6a:	e4 e6       	ldi	r30, 0x64	; 100
    3d6c:	f1 e0       	ldi	r31, 0x01	; 1
    3d6e:	8d 91       	ld	r24, X+
    3d70:	81 93       	st	Z+, r24
    3d72:	ec 36       	cpi	r30, 0x6C	; 108
    3d74:	81 e0       	ldi	r24, 0x01	; 1
    3d76:	f8 07       	cpc	r31, r24
    3d78:	d1 f7       	brne	.-12     	; 0x3d6e <radioSetExtendedAddress+0x6>
    3d7a:	08 95       	ret

00003d7c <radioRandom>:
    3d7c:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    3d80:	90 91 33 05 	lds	r25, 0x0533	; 0x800533 <radio_part_number.3584>
    3d84:	91 11       	cpse	r25, r1
    3d86:	19 c0       	rjmp	.+50     	; 0x3dba <radioRandom+0x3e>
    3d88:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <__TEXT_REGION_LENGTH__+0x7e015c>
    3d8c:	90 93 33 05 	sts	0x0533, r25	; 0x800533 <radio_part_number.3584>
    3d90:	93 30       	cpi	r25, 0x03	; 3
    3d92:	c9 f0       	breq	.+50     	; 0x3dc6 <radioRandom+0x4a>
    3d94:	91 11       	cpse	r25, r1
    3d96:	13 c0       	rjmp	.+38     	; 0x3dbe <radioRandom+0x42>
    3d98:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <__TEXT_REGION_LENGTH__+0x7e015c>
    3d9c:	90 93 33 05 	sts	0x0533, r25	; 0x800533 <radio_part_number.3584>
    3da0:	93 38       	cpi	r25, 0x83	; 131
    3da2:	89 f0       	breq	.+34     	; 0x3dc6 <radioRandom+0x4a>
    3da4:	91 11       	cpse	r25, r1
    3da6:	0d c0       	rjmp	.+26     	; 0x3dc2 <radioRandom+0x46>
    3da8:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <__TEXT_REGION_LENGTH__+0x7e015c>
    3dac:	90 93 33 05 	sts	0x0533, r25	; 0x800533 <radio_part_number.3584>
    3db0:	97 30       	cpi	r25, 0x07	; 7
    3db2:	49 f0       	breq	.+18     	; 0x3dc6 <radioRandom+0x4a>
    3db4:	0c 94 e2 30 	jmp	0x61c4	; 0x61c4 <rand>
    3db8:	08 95       	ret
    3dba:	93 30       	cpi	r25, 0x03	; 3
    3dbc:	21 f0       	breq	.+8      	; 0x3dc6 <radioRandom+0x4a>
    3dbe:	93 38       	cpi	r25, 0x83	; 131
    3dc0:	11 f0       	breq	.+4      	; 0x3dc6 <radioRandom+0x4a>
    3dc2:	97 30       	cpi	r25, 0x07	; 7
    3dc4:	b9 f7       	brne	.-18     	; 0x3db4 <radioRandom+0x38>
    3dc6:	2f 70       	andi	r18, 0x0F	; 15
    3dc8:	26 30       	cpi	r18, 0x06	; 6
    3dca:	a1 f7       	brne	.-24     	; 0x3db4 <radioRandom+0x38>
    3dcc:	38 2f       	mov	r19, r24
    3dce:	36 95       	lsr	r19
    3dd0:	79 f0       	breq	.+30     	; 0x3df0 <radioRandom+0x74>
    3dd2:	20 e0       	ldi	r18, 0x00	; 0
    3dd4:	80 e0       	ldi	r24, 0x00	; 0
    3dd6:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <__TEXT_REGION_LENGTH__+0x7e0146>
    3dda:	90 76       	andi	r25, 0x60	; 96
    3ddc:	92 95       	swap	r25
    3dde:	96 95       	lsr	r25
    3de0:	97 70       	andi	r25, 0x07	; 7
    3de2:	88 0f       	add	r24, r24
    3de4:	88 0f       	add	r24, r24
    3de6:	89 2b       	or	r24, r25
    3de8:	2f 5f       	subi	r18, 0xFF	; 255
    3dea:	23 13       	cpse	r18, r19
    3dec:	f4 cf       	rjmp	.-24     	; 0x3dd6 <radioRandom+0x5a>
    3dee:	08 95       	ret
    3df0:	80 e0       	ldi	r24, 0x00	; 0
    3df2:	08 95       	ret

00003df4 <radioSetup900>:
    {
    }
}

void radioSetup900(void)
{
    3df4:	08 95       	ret

00003df6 <__vector_59>:
	/*! \brief ISR for the Radio RX_START event.
	 */
	void TRX24_RX_START_vect(void);
	#else  /* !DOXYGEN */
	ISR(TRX24_RX_START_vect)
	{
    3df6:	1f 92       	push	r1
    3df8:	0f 92       	push	r0
    3dfa:	0f b6       	in	r0, 0x3f	; 63
    3dfc:	0f 92       	push	r0
    3dfe:	11 24       	eor	r1, r1
    3e00:	0b b6       	in	r0, 0x3b	; 59
    3e02:	0f 92       	push	r0
    3e04:	2f 93       	push	r18
    3e06:	3f 93       	push	r19
    3e08:	4f 93       	push	r20
    3e0a:	5f 93       	push	r21
    3e0c:	6f 93       	push	r22
    3e0e:	7f 93       	push	r23
    3e10:	8f 93       	push	r24
    3e12:	9f 93       	push	r25
    3e14:	af 93       	push	r26
    3e16:	bf 93       	push	r27
    3e18:	ef 93       	push	r30
    3e1a:	ff 93       	push	r31
	    //    debugMsgStr("rxstart");
	    radioRxStartEvent();
    3e1c:	53 dd       	rcall	.-1370   	; 0x38c4 <radioRxStartEvent>
	}
    3e1e:	ff 91       	pop	r31
    3e20:	ef 91       	pop	r30
    3e22:	bf 91       	pop	r27
    3e24:	af 91       	pop	r26
    3e26:	9f 91       	pop	r25
    3e28:	8f 91       	pop	r24
    3e2a:	7f 91       	pop	r23
    3e2c:	6f 91       	pop	r22
    3e2e:	5f 91       	pop	r21
    3e30:	4f 91       	pop	r20
    3e32:	3f 91       	pop	r19
    3e34:	2f 91       	pop	r18
    3e36:	0f 90       	pop	r0
    3e38:	0b be       	out	0x3b, r0	; 59
    3e3a:	0f 90       	pop	r0
    3e3c:	0f be       	out	0x3f, r0	; 63
    3e3e:	0f 90       	pop	r0
    3e40:	1f 90       	pop	r1
    3e42:	18 95       	reti

00003e44 <__vector_60>:
/*! \brief ISR for the Radio RX_START event.
 */
void TRX24_RX_END_vect(void);
#else  /* !DOXYGEN */
	ISR(TRX24_RX_END_vect)
	{
    3e44:	1f 92       	push	r1
    3e46:	0f 92       	push	r0
    3e48:	0f b6       	in	r0, 0x3f	; 63
    3e4a:	0f 92       	push	r0
    3e4c:	11 24       	eor	r1, r1
    3e4e:	0b b6       	in	r0, 0x3b	; 59
    3e50:	0f 92       	push	r0
    3e52:	2f 93       	push	r18
    3e54:	3f 93       	push	r19
    3e56:	4f 93       	push	r20
    3e58:	5f 93       	push	r21
    3e5a:	6f 93       	push	r22
    3e5c:	7f 93       	push	r23
    3e5e:	8f 93       	push	r24
    3e60:	9f 93       	push	r25
    3e62:	af 93       	push	r26
    3e64:	bf 93       	push	r27
    3e66:	ef 93       	push	r30
    3e68:	ff 93       	push	r31
	    //debugMsgStr("rxend");
	    radioTrxEndEvent();
    3e6a:	4a de       	rcall	.-876    	; 0x3b00 <radioTrxEndEvent>
	}
    3e6c:	ff 91       	pop	r31
    3e6e:	ef 91       	pop	r30
    3e70:	bf 91       	pop	r27
    3e72:	af 91       	pop	r26
    3e74:	9f 91       	pop	r25
    3e76:	8f 91       	pop	r24
    3e78:	7f 91       	pop	r23
    3e7a:	6f 91       	pop	r22
    3e7c:	5f 91       	pop	r21
    3e7e:	4f 91       	pop	r20
    3e80:	3f 91       	pop	r19
    3e82:	2f 91       	pop	r18
    3e84:	0f 90       	pop	r0
    3e86:	0b be       	out	0x3b, r0	; 59
    3e88:	0f 90       	pop	r0
    3e8a:	0f be       	out	0x3f, r0	; 63
    3e8c:	0f 90       	pop	r0
    3e8e:	1f 90       	pop	r1
    3e90:	18 95       	reti

00003e92 <__vector_63>:
/*! \brief ISR for the Radio RX_START event.
 */
void TRX24_TX_END_vect(void);
#else  /* !DOXYGEN */
ISR(TRX24_TX_END_vect)
{
    3e92:	1f 92       	push	r1
    3e94:	0f 92       	push	r0
    3e96:	0f b6       	in	r0, 0x3f	; 63
    3e98:	0f 92       	push	r0
    3e9a:	11 24       	eor	r1, r1
    3e9c:	0b b6       	in	r0, 0x3b	; 59
    3e9e:	0f 92       	push	r0
    3ea0:	2f 93       	push	r18
    3ea2:	3f 93       	push	r19
    3ea4:	4f 93       	push	r20
    3ea6:	5f 93       	push	r21
    3ea8:	6f 93       	push	r22
    3eaa:	7f 93       	push	r23
    3eac:	8f 93       	push	r24
    3eae:	9f 93       	push	r25
    3eb0:	af 93       	push	r26
    3eb2:	bf 93       	push	r27
    3eb4:	ef 93       	push	r30
    3eb6:	ff 93       	push	r31
    //    debugMsgStr("txend");
    //    debugMsgHex(hal_subregister_read(SR_TRX_STATUS));

    /// @todo fix this - this interrupt should never occur!!
    if (hal_subregister_read(SR_TRX_STATUS) != 0x16)
    3eb8:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    3ebc:	8f 71       	andi	r24, 0x1F	; 31
    3ebe:	86 31       	cpi	r24, 0x16	; 22
    3ec0:	09 f0       	breq	.+2      	; 0x3ec4 <__vector_63+0x32>
        radioTrxEndEvent();
    3ec2:	1e de       	rcall	.-964    	; 0x3b00 <radioTrxEndEvent>
}
    3ec4:	ff 91       	pop	r31
    3ec6:	ef 91       	pop	r30
    3ec8:	bf 91       	pop	r27
    3eca:	af 91       	pop	r26
    3ecc:	9f 91       	pop	r25
    3ece:	8f 91       	pop	r24
    3ed0:	7f 91       	pop	r23
    3ed2:	6f 91       	pop	r22
    3ed4:	5f 91       	pop	r21
    3ed6:	4f 91       	pop	r20
    3ed8:	3f 91       	pop	r19
    3eda:	2f 91       	pop	r18
    3edc:	0f 90       	pop	r0
    3ede:	0b be       	out	0x3b, r0	; 59
    3ee0:	0f 90       	pop	r0
    3ee2:	0f be       	out	0x3f, r0	; 63
    3ee4:	0f 90       	pop	r0
    3ee6:	1f 90       	pop	r1
    3ee8:	18 95       	reti

00003eea <__vector_61>:
	#ifndef TRX24_CCA_ED_READY_vect
	  #define TRX24_CCA_ED_READY_vect TRX24_CCA_ED_DONE_vect
	#endif

	ISR(TRX24_CCA_ED_READY_vect)
	{
    3eea:	1f 92       	push	r1
    3eec:	0f 92       	push	r0
    3eee:	0f b6       	in	r0, 0x3f	; 63
    3ef0:	0f 92       	push	r0
    3ef2:	11 24       	eor	r1, r1
    3ef4:	0b b6       	in	r0, 0x3b	; 59
    3ef6:	0f 92       	push	r0
    3ef8:	2f 93       	push	r18
    3efa:	3f 93       	push	r19
    3efc:	4f 93       	push	r20
    3efe:	5f 93       	push	r21
    3f00:	6f 93       	push	r22
    3f02:	7f 93       	push	r23
    3f04:	8f 93       	push	r24
    3f06:	9f 93       	push	r25
    3f08:	af 93       	push	r26
    3f0a:	bf 93       	push	r27
    3f0c:	ef 93       	push	r30
    3f0e:	ff 93       	push	r31
	    //    debugMsgStr("ccaend");

	    macEdCallback();
    3f10:	06 d7       	rcall	.+3596   	; 0x4d1e <macEdCallback>
	}
    3f12:	ff 91       	pop	r31
    3f14:	ef 91       	pop	r30
    3f16:	bf 91       	pop	r27
    3f18:	af 91       	pop	r26
    3f1a:	9f 91       	pop	r25
    3f1c:	8f 91       	pop	r24
    3f1e:	7f 91       	pop	r23
    3f20:	6f 91       	pop	r22
    3f22:	5f 91       	pop	r21
    3f24:	4f 91       	pop	r20
    3f26:	3f 91       	pop	r19
    3f28:	2f 91       	pop	r18
    3f2a:	0f 90       	pop	r0
    3f2c:	0b be       	out	0x3b, r0	; 59
    3f2e:	0f 90       	pop	r0
    3f30:	0f be       	out	0x3f, r0	; 63
    3f32:	0f 90       	pop	r0
    3f34:	1f 90       	pop	r1
    3f36:	18 95       	reti

00003f38 <calibrate_rc_osc>:
    and monitor the CPU clock on an I/O pin.

    @return TRUE if calibrate passed; FALSE if calibrate failed.
*/
bool calibrate_rc_osc(void)
{
    3f38:	df 92       	push	r13
    3f3a:	ef 92       	push	r14
    3f3c:	ff 92       	push	r15
    3f3e:	0f 93       	push	r16
    3f40:	1f 93       	push	r17
    3f42:	cf 93       	push	r28
    3f44:	df 93       	push	r29
    3f46:	00 d0       	rcall	.+0      	; 0x3f48 <calibrate_rc_osc+0x10>
    3f48:	cd b7       	in	r28, 0x3d	; 61
    3f4a:	de b7       	in	r29, 0x3e	; 62
    if (SERIAL && F_CPU >= 2000000UL) // only need for making serial port work
    {
        bool success = false;
        static bool once=0;

        if (once)
    3f4c:	d0 90 35 05 	lds	r13, 0x0535	; 0x800535 <once.3484>
    3f50:	dd 20       	and	r13, r13
    3f52:	59 f0       	breq	.+22     	; 0x3f6a <calibrate_rc_osc+0x32>

        return success;
    }
    else
        return 0;
}
    3f54:	8d 2d       	mov	r24, r13
    3f56:	0f 90       	pop	r0
    3f58:	0f 90       	pop	r0
    3f5a:	df 91       	pop	r29
    3f5c:	cf 91       	pop	r28
    3f5e:	1f 91       	pop	r17
    3f60:	0f 91       	pop	r16
    3f62:	ff 90       	pop	r15
    3f64:	ef 90       	pop	r14
    3f66:	df 90       	pop	r13
    3f68:	08 95       	ret

        if (once)
            // Only calibrate once
            return true;

        once = true;
    3f6a:	81 e0       	ldi	r24, 0x01	; 1
    3f6c:	80 93 35 05 	sts	0x0535, r24	; 0x800535 <once.3484>
        //   timer2 to overflow
        // Timer 2 (8-bit) is run from the main CPU clock divided by
        //   32.  This means the clock is 31250Hz at 1MHz, or 250KHz at 8MHz.
        //   Target time is 1024uS (8MHz) or 8192uS (1MHz).

        osccal_saved = OSCCAL;
    3f70:	e0 90 66 00 	lds	r14, 0x0066	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>
        cli();
    3f74:	f8 94       	cli

        radioSetClockSpeed(true, CLKM_1MHz);
    3f76:	61 e0       	ldi	r22, 0x01	; 1
    3f78:	ed dc       	rcall	.-1574   	; 0x3954 <radioSetClockSpeed>

        // Save current values of timer status.
        tccr2b = TCCR2B;
    3f7a:	f0 90 b1 00 	lds	r15, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
        tccr1b = TCCR1B;
    3f7e:	00 91 81 00 	lds	r16, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        tccr1a = TCCR1A;
    3f82:	10 91 80 00 	lds	r17, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>

        // Stop timers 1 and 2.
        // Set timer 1 to normal mode (no CTC, no PWM, just count).
        TCCR2B = 0;
    3f86:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
        TCCR1B = 0;
    3f8a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        TCCR1A = 0;
    3f8e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3f92:	28 ee       	ldi	r18, 0xE8	; 232
    3f94:	33 e0       	ldi	r19, 0x03	; 3

        for (counter = 0; counter < 1000;  counter++)
        {
            // Timer 2 driven from clock divided by 32
            TCCR2B = (1 << CS21) | (1 << CS20);
    3f96:	73 e0       	ldi	r23, 0x03	; 3
            // Timer 1 driven with external clock
            TCCR1B = (1 << CS12) | (1 << CS11);
    3f98:	66 e0       	ldi	r22, 0x06	; 6

            // Clear pending timer 1 and 2 interrupts, and clear the
            // counters.
            TCNT2 = 0;
            TCNT1 = 0;
            TIFR1 = 0xFF;
    3f9a:	9f ef       	ldi	r25, 0xFF	; 255
        TCCR1A = 0;

        for (counter = 0; counter < 1000;  counter++)
        {
            // Timer 2 driven from clock divided by 32
            TCCR2B = (1 << CS21) | (1 << CS20);
    3f9c:	70 93 b1 00 	sts	0x00B1, r23	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
            // Timer 1 driven with external clock
            TCCR1B = (1 << CS12) | (1 << CS11);
    3fa0:	60 93 81 00 	sts	0x0081, r22	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

            // Clear pending timer 1 and 2 interrupts, and clear the
            // counters.
            TCNT2 = 0;
    3fa4:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
            TCNT1 = 0;
    3fa8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    3fac:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
            TIFR1 = 0xFF;
    3fb0:	96 bb       	out	0x16, r25	; 22
            TIFR2 = 0xFF;
    3fb2:	97 bb       	out	0x17, r25	; 23

            // Wait for timer 2 to overflow.
            while (!(TIFR2 & (1 << TOV2)))
    3fb4:	b8 9b       	sbis	0x17, 0	; 23
    3fb6:	fe cf       	rjmp	.-4      	; 0x3fb4 <calibrate_rc_osc+0x7c>
                ;

            temp = TCNT1;
    3fb8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    3fbc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    3fc0:	5a 83       	std	Y+2, r21	; 0x02
    3fc2:	49 83       	std	Y+1, r20	; 0x01


            // Stop timer 1.  Now, TCNT1 contains the number of 1MHz RF2xx cycles
            // counted while timer 2 was counting CPU cycles
            TCCR1B = 0;
    3fc4:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
            TCCR2B = 0;
    3fc8:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>

            if (temp < (u16)(0.995 * TARGETVAL))
    3fcc:	49 81       	ldd	r20, Y+1	; 0x01
    3fce:	5a 81       	ldd	r21, Y+2	; 0x02
    3fd0:	4d 3f       	cpi	r20, 0xFD	; 253
    3fd2:	51 40       	sbci	r21, 0x01	; 1
    3fd4:	a0 f4       	brcc	.+40     	; 0x3ffe <calibrate_rc_osc+0xc6>
            {
                // Too fast, slow down
                OSCCAL--;
    3fd6:	40 91 66 00 	lds	r20, 0x0066	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>
    3fda:	41 50       	subi	r20, 0x01	; 1
    3fdc:	40 93 66 00 	sts	0x0066, r20	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>
    3fe0:	21 50       	subi	r18, 0x01	; 1
    3fe2:	31 09       	sbc	r19, r1
        // Set timer 1 to normal mode (no CTC, no PWM, just count).
        TCCR2B = 0;
        TCCR1B = 0;
        TCCR1A = 0;

        for (counter = 0; counter < 1000;  counter++)
    3fe4:	d9 f6       	brne	.-74     	; 0x3f9c <calibrate_rc_osc+0x64>
                success = true;
                break;
            }
        }

        radioSetClockSpeed(true, CLKM_DISABLED);
    3fe6:	60 e0       	ldi	r22, 0x00	; 0
    3fe8:	81 e0       	ldi	r24, 0x01	; 1
    3fea:	b4 dc       	rcall	.-1688   	; 0x3954 <radioSetClockSpeed>

        // restore timer status regs
        TCCR2B = tccr2b;
    3fec:	f0 92 b1 00 	sts	0x00B1, r15	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
        TCCR1B = tccr1b;
    3ff0:	00 93 81 00 	sts	0x0081, r16	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        TCCR1A = tccr1a;
    3ff4:	10 93 80 00 	sts	0x0080, r17	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
        if (!success)
        {
            // We failed, therefore restore previous OSCCAL value.
            OSCCAL = osccal_saved;
    3ff8:	e0 92 66 00 	sts	0x0066, r14	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>
    3ffc:	ab cf       	rjmp	.-170    	; 0x3f54 <calibrate_rc_osc+0x1c>
            if (temp < (u16)(0.995 * TARGETVAL))
            {
                // Too fast, slow down
                OSCCAL--;
            }
            else if (temp > (u16)(1.005 * TARGETVAL))
    3ffe:	49 81       	ldd	r20, Y+1	; 0x01
    4000:	5a 81       	ldd	r21, Y+2	; 0x02
    4002:	43 30       	cpi	r20, 0x03	; 3
    4004:	52 40       	sbci	r21, 0x02	; 2
    4006:	30 f0       	brcs	.+12     	; 0x4014 <__stack+0x14>
            {
                // Too slow, speed up
                OSCCAL++;
    4008:	40 91 66 00 	lds	r20, 0x0066	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>
    400c:	4f 5f       	subi	r20, 0xFF	; 255
    400e:	40 93 66 00 	sts	0x0066, r20	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>
    4012:	e6 cf       	rjmp	.-52     	; 0x3fe0 <calibrate_rc_osc+0xa8>
                success = true;
                break;
            }
        }

        radioSetClockSpeed(true, CLKM_DISABLED);
    4014:	60 e0       	ldi	r22, 0x00	; 0
    4016:	81 e0       	ldi	r24, 0x01	; 1
    4018:	9d dc       	rcall	.-1734   	; 0x3954 <radioSetClockSpeed>

        // restore timer status regs
        TCCR2B = tccr2b;
    401a:	f0 92 b1 00 	sts	0x00B1, r15	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
        TCCR1B = tccr1b;
    401e:	00 93 81 00 	sts	0x0081, r16	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        TCCR1A = tccr1a;
    4022:	10 93 80 00 	sts	0x0080, r17	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    4026:	dd 24       	eor	r13, r13
    4028:	d3 94       	inc	r13
    402a:	94 cf       	rjmp	.-216    	; 0x3f54 <calibrate_rc_osc+0x1c>

0000402c <halGetEeprom>:
   @param offset The offset in EEPROM of the start of the data block
   @param length The length in bytes of the data block
   @param dest  Pointer to the area in memory to place the data block
*/
void halGetEeprom(void *addr, u8 length, u8 *dest)
{
    402c:	cf 93       	push	r28
    402e:	df 93       	push	r29
    4030:	1f 92       	push	r1
    4032:	cd b7       	in	r28, 0x3d	; 61
    4034:	de b7       	in	r29, 0x3e	; 62
    4036:	fc 01       	movw	r30, r24
    4038:	ca 01       	movw	r24, r20
    AVR_ENTER_CRITICAL_REGION();
    403a:	3f b7       	in	r19, 0x3f	; 63
    403c:	39 83       	std	Y+1, r19	; 0x01
    403e:	f8 94       	cli
    eeprom_read_block (dest, addr, length);
    4040:	46 2f       	mov	r20, r22
    4042:	50 e0       	ldi	r21, 0x00	; 0
    4044:	bf 01       	movw	r22, r30
    4046:	0e 94 a0 36 	call	0x6d40	; 0x6d40 <eeprom_read_block>
    AVR_LEAVE_CRITICAL_REGION();
    404a:	89 81       	ldd	r24, Y+1	; 0x01
    404c:	8f bf       	out	0x3f, r24	; 63
}
    404e:	0f 90       	pop	r0
    4050:	df 91       	pop	r29
    4052:	cf 91       	pop	r28
    4054:	08 95       	ret

00004056 <halPutEeprom>:
   @param offset The offset in EEPROM of the start of the data block
   @param length The length in bytes of the data block
   @param src  Pointer to the area in memory which contains the data block
*/
void halPutEeprom(void *addr, u8 length, u8 *src)
{
    4056:	cf 93       	push	r28
    4058:	df 93       	push	r29
    405a:	1f 92       	push	r1
    405c:	cd b7       	in	r28, 0x3d	; 61
    405e:	de b7       	in	r29, 0x3e	; 62
    4060:	fc 01       	movw	r30, r24
    4062:	ca 01       	movw	r24, r20
    AVR_ENTER_CRITICAL_REGION();
    4064:	3f b7       	in	r19, 0x3f	; 63
    4066:	39 83       	std	Y+1, r19	; 0x01
    4068:	f8 94       	cli
    eeprom_write_block (src, addr, length);
    406a:	46 2f       	mov	r20, r22
    406c:	50 e0       	ldi	r21, 0x00	; 0
    406e:	bf 01       	movw	r22, r30
    4070:	0e 94 c2 36 	call	0x6d84	; 0x6d84 <eeprom_write_block>
    AVR_LEAVE_CRITICAL_REGION();
    4074:	89 81       	ldd	r24, Y+1	; 0x01
    4076:	8f bf       	out	0x3f, r24	; 63
}
    4078:	0f 90       	pop	r0
    407a:	df 91       	pop	r29
    407c:	cf 91       	pop	r28
    407e:	08 95       	ret

00004080 <macInit>:

   @param Channel Sets the channel to use for the MAC.  Use 0xff for
   non-coordinator nodes.
*/
void macInit(u8 Channel)
{
    4080:	1f 93       	push	r17
    4082:	cf 93       	push	r28
    4084:	df 93       	push	r29
    4086:	cd b7       	in	r28, 0x3d	; 61
    4088:	de b7       	in	r29, 0x3e	; 62
    408a:	28 97       	sbiw	r28, 0x08	; 8
    408c:	0f b6       	in	r0, 0x3f	; 63
    408e:	f8 94       	cli
    4090:	de bf       	out	0x3e, r29	; 62
    4092:	0f be       	out	0x3f, r0	; 63
    4094:	cd bf       	out	0x3d, r28	; 61
    4096:	18 2f       	mov	r17, r24
    // ETG DEBUG
    // Base address of the GPIO modules.
  //  volatile avr32_gpio_t * myGpio = &AVR32_GPIO;
#endif

    macConfig.panId = BROADCASTPANID;
    4098:	2f ef       	ldi	r18, 0xFF	; 255
    409a:	3f ef       	ldi	r19, 0xFF	; 255
    409c:	30 93 49 0c 	sts	0x0C49, r19	; 0x800c49 <macConfig+0xc>
    40a0:	20 93 48 0c 	sts	0x0C48, r18	; 0x800c48 <macConfig+0xb>
    macConfig.shortAddress = BROADCASTADDR;
    40a4:	30 93 4b 0c 	sts	0x0C4B, r19	; 0x800c4b <macConfig+0xe>
    40a8:	20 93 4a 0c 	sts	0x0C4A, r18	; 0x800c4a <macConfig+0xd>
    macConfig.associated = false;
    40ac:	10 92 45 0c 	sts	0x0C45, r1	; 0x800c45 <macConfig+0x8>

    macConfig.parentShortAddress = BROADCASTADDR;
    40b0:	30 93 4d 0c 	sts	0x0C4D, r19	; 0x800c4d <macConfig+0x10>
    40b4:	20 93 4c 0c 	sts	0x0C4C, r18	; 0x800c4c <macConfig+0xf>
    macConfig.lastRoute = BROADCASTADDR;
    40b8:	30 93 4f 0c 	sts	0x0C4F, r19	; 0x800c4f <macConfig+0x12>
    40bc:	20 93 4e 0c 	sts	0x0C4E, r18	; 0x800c4e <macConfig+0x11>
    macConfig.hopsToCoord = 0;
    40c0:	10 92 50 0c 	sts	0x0C50, r1	; 0x800c50 <macConfig+0x13>
    macConfig.busy = 0;
    40c4:	10 92 54 0c 	sts	0x0C54, r1	; 0x800c54 <macConfig+0x17>
    macConfig.sleeping = 1; // Assume sleeping state initially
    40c8:	81 e0       	ldi	r24, 0x01	; 1
    40ca:	80 93 55 0c 	sts	0x0C55, r24	; 0x800c55 <macConfig+0x18>

    // Init radio
    radioInit(SERIAL ? true : false);
    40ce:	cd db       	rcall	.-2150   	; 0x386a <radioInit>

    // Set the channel
    macConfig.currentChannel = Channel;
    40d0:	10 93 51 0c 	sts	0x0C51, r17	; 0x800c51 <macConfig+0x14>
    if (Channel != 0xff)
    40d4:	1f 3f       	cpi	r17, 0xFF	; 255
    40d6:	11 f0       	breq	.+4      	; 0x40dc <macInit+0x5c>
        radioSetOperatingChannel(Channel);
    40d8:	81 2f       	mov	r24, r17
    40da:	0e dc       	rcall	.-2020   	; 0x38f8 <radioSetOperatingChannel>

    radioUseAutoTxCrc(true);
    40dc:	81 e0       	ldi	r24, 0x01	; 1
    40de:	cc dd       	rcall	.-1128   	; 0x3c78 <radioUseAutoTxCrc>
    radioSetTrxState(TRX_OFF);
    40e0:	88 e0       	ldi	r24, 0x08	; 8
    40e2:	5c dc       	rcall	.-1864   	; 0x399c <radioSetTrxState>

    // Set RF212 to 250KB mode.
    radioSetup900();
    40e4:	87 de       	rcall	.-754    	; 0x3df4 <radioSetup900>

    // Set ack times shorter
   /// hal_subregister_write(SR_AACK_ACK_TIME, 1); //longer ack response time seems to work better, pb

    radioSetTrxState(RX_AACK_ON);
    40e6:	86 e1       	ldi	r24, 0x16	; 22
    40e8:	59 dc       	rcall	.-1870   	; 0x399c <radioSetTrxState>
    // DEBUG
//    myGpio->port[0].ovr &= ~(1<<0);
#endif

    // Setup the address of this device by reading a stored address from eeprom.
    halGetMacAddr((u8*)&(macConfig.longAddr));
    40ea:	4d e3       	ldi	r20, 0x3D	; 61
    40ec:	5c e0       	ldi	r21, 0x0C	; 12
    40ee:	68 e0       	ldi	r22, 0x08	; 8
    40f0:	80 e0       	ldi	r24, 0x00	; 0
    40f2:	90 e0       	ldi	r25, 0x00	; 0
    40f4:	9b df       	rcall	.-202    	; 0x402c <halGetEeprom>

    // Set up radio's coordinator flag
    radioSetDeviceRole(NODETYPE == COORD);
    40f6:	80 e0       	ldi	r24, 0x00	; 0
    40f8:	26 de       	rcall	.-948    	; 0x3d46 <radioSetDeviceRole>

    // Setup radio's short addess
    radioSetShortAddress(BROADCASTADDR);
    40fa:	8f ef       	ldi	r24, 0xFF	; 255
    40fc:	9f ef       	ldi	r25, 0xFF	; 255
    40fe:	2f de       	rcall	.-930    	; 0x3d5e <radioSetShortAddress>

    // Setup radio's PANID
    radioSetPanId(BROADCASTPANID);
    4100:	8f ef       	ldi	r24, 0xFF	; 255
    4102:	9f ef       	ldi	r25, 0xFF	; 255
    4104:	27 de       	rcall	.-946    	; 0x3d54 <radioSetPanId>

    // Set up the radio for auto mode operation.
    hal_subregister_write( SR_MAX_FRAME_RETRIES, 2 );
    4106:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <__TEXT_REGION_LENGTH__+0x7e016c>
    410a:	8f 70       	andi	r24, 0x0F	; 15
    410c:	80 62       	ori	r24, 0x20	; 32
    410e:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <__TEXT_REGION_LENGTH__+0x7e016c>

    // Load the long address into the radio. Needed for auto modes.
// ETG
    u64 longAddr = htons_64(macConfig.longAddr);
    4112:	80 91 3d 0c 	lds	r24, 0x0C3D	; 0x800c3d <macConfig>
    4116:	89 83       	std	Y+1, r24	; 0x01
    4118:	80 91 3e 0c 	lds	r24, 0x0C3E	; 0x800c3e <macConfig+0x1>
    411c:	8a 83       	std	Y+2, r24	; 0x02
    411e:	80 91 3f 0c 	lds	r24, 0x0C3F	; 0x800c3f <macConfig+0x2>
    4122:	8b 83       	std	Y+3, r24	; 0x03
    4124:	80 91 40 0c 	lds	r24, 0x0C40	; 0x800c40 <macConfig+0x3>
    4128:	8c 83       	std	Y+4, r24	; 0x04
    412a:	80 91 41 0c 	lds	r24, 0x0C41	; 0x800c41 <macConfig+0x4>
    412e:	8d 83       	std	Y+5, r24	; 0x05
    4130:	80 91 42 0c 	lds	r24, 0x0C42	; 0x800c42 <macConfig+0x5>
    4134:	8e 83       	std	Y+6, r24	; 0x06
    4136:	80 91 43 0c 	lds	r24, 0x0C43	; 0x800c43 <macConfig+0x6>
    413a:	8f 83       	std	Y+7, r24	; 0x07
    413c:	80 91 44 0c 	lds	r24, 0x0C44	; 0x800c44 <macConfig+0x7>
    4140:	88 87       	std	Y+8, r24	; 0x08
// ETG    radioSetExtendedAddress((uint8_t *)&macConfig.longAddr);
    radioSetExtendedAddress((uint8_t *)&longAddr);
    4142:	ce 01       	movw	r24, r28
    4144:	01 96       	adiw	r24, 0x01	; 1
    4146:	10 de       	rcall	.-992    	; 0x3d68 <radioSetExtendedAddress>

    // Initialize the array of nodes (coordinator only)
    macInitNodes();
    4148:	d7 d0       	rcall	.+430    	; 0x42f8 <macInitNodes>
}
    414a:	28 96       	adiw	r28, 0x08	; 8
    414c:	0f b6       	in	r0, 0x3f	; 63
    414e:	f8 94       	cli
    4150:	de bf       	out	0x3e, r29	; 62
    4152:	0f be       	out	0x3f, r0	; 63
    4154:	cd bf       	out	0x3d, r28	; 61
    4156:	df 91       	pop	r29
    4158:	cf 91       	pop	r28
    415a:	1f 91       	pop	r17
    415c:	08 95       	ret

0000415e <macSetOperatingChannel>:
   @param channel The channel number to use for radio communication.
*/
void macSetOperatingChannel(u8 channel)
{
    // Set the channel
    macConfig.currentChannel = channel;
    415e:	80 93 51 0c 	sts	0x0C51, r24	; 0x800c51 <macConfig+0x14>
    radioSetOperatingChannel(channel);
    4162:	ca cb       	rjmp	.-2156   	; 0x38f8 <radioSetOperatingChannel>

00004164 <macAssociationConfirm>:
   parent.

   @param addr The short address of the child node that has woken up.
*/
void macClearChildWakeFlag(u16 addr)
{
    4164:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <associationTimer>
    4168:	c8 d6       	rcall	.+3472   	; 0x4efa <macTimerEnd>
    416a:	90 91 45 0c 	lds	r25, 0x0C45	; 0x800c45 <macConfig+0x8>
    416e:	81 e0       	ldi	r24, 0x01	; 1
    4170:	89 27       	eor	r24, r25
    4172:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <appAssociateConfirm>

00004176 <macAssociate>:
    4176:	cf 93       	push	r28
    4178:	df 93       	push	r29
    417a:	ec 01       	movw	r28, r24
    417c:	86 2f       	mov	r24, r22
    417e:	ef df       	rcall	.-34     	; 0x415e <macSetOperatingChannel>
    4180:	eb eb       	ldi	r30, 0xBB	; 187
    4182:	fb e0       	ldi	r31, 0x0B	; 11
    4184:	83 e6       	ldi	r24, 0x63	; 99
    4186:	98 ec       	ldi	r25, 0xC8	; 200
    4188:	92 83       	std	Z+2, r25	; 0x02
    418a:	81 83       	std	Z+1, r24	; 0x01
    418c:	ad e3       	ldi	r26, 0x3D	; 61
    418e:	bc e0       	ldi	r27, 0x0C	; 12
    4190:	1a 96       	adiw	r26, 0x0a	; 10
    4192:	8c 91       	ld	r24, X
    4194:	1a 97       	sbiw	r26, 0x0a	; 10
    4196:	91 e0       	ldi	r25, 0x01	; 1
    4198:	98 0f       	add	r25, r24
    419a:	1a 96       	adiw	r26, 0x0a	; 10
    419c:	9c 93       	st	X, r25
    419e:	1a 97       	sbiw	r26, 0x0a	; 10
    41a0:	83 83       	std	Z+3, r24	; 0x03
    41a2:	1b 96       	adiw	r26, 0x0b	; 11
    41a4:	8d 91       	ld	r24, X+
    41a6:	9c 91       	ld	r25, X
    41a8:	1c 97       	sbiw	r26, 0x0c	; 12
    41aa:	95 83       	std	Z+5, r25	; 0x05
    41ac:	84 83       	std	Z+4, r24	; 0x04
    41ae:	d7 83       	std	Z+7, r29	; 0x07
    41b0:	c6 83       	std	Z+6, r28	; 0x06
    41b2:	8c 91       	ld	r24, X
    41b4:	80 87       	std	Z+8, r24	; 0x08
    41b6:	11 96       	adiw	r26, 0x01	; 1
    41b8:	8c 91       	ld	r24, X
    41ba:	11 97       	sbiw	r26, 0x01	; 1
    41bc:	81 87       	std	Z+9, r24	; 0x09
    41be:	12 96       	adiw	r26, 0x02	; 2
    41c0:	8c 91       	ld	r24, X
    41c2:	12 97       	sbiw	r26, 0x02	; 2
    41c4:	82 87       	std	Z+10, r24	; 0x0a
    41c6:	13 96       	adiw	r26, 0x03	; 3
    41c8:	8c 91       	ld	r24, X
    41ca:	13 97       	sbiw	r26, 0x03	; 3
    41cc:	83 87       	std	Z+11, r24	; 0x0b
    41ce:	14 96       	adiw	r26, 0x04	; 4
    41d0:	8c 91       	ld	r24, X
    41d2:	14 97       	sbiw	r26, 0x04	; 4
    41d4:	84 87       	std	Z+12, r24	; 0x0c
    41d6:	15 96       	adiw	r26, 0x05	; 5
    41d8:	8c 91       	ld	r24, X
    41da:	15 97       	sbiw	r26, 0x05	; 5
    41dc:	85 87       	std	Z+13, r24	; 0x0d
    41de:	16 96       	adiw	r26, 0x06	; 6
    41e0:	8c 91       	ld	r24, X
    41e2:	16 97       	sbiw	r26, 0x06	; 6
    41e4:	86 87       	std	Z+14, r24	; 0x0e
    41e6:	17 96       	adiw	r26, 0x07	; 7
    41e8:	8c 91       	ld	r24, X
    41ea:	87 87       	std	Z+15, r24	; 0x0f
    41ec:	81 e0       	ldi	r24, 0x01	; 1
    41ee:	80 8b       	std	Z+16, r24	; 0x10
    41f0:	d2 8b       	std	Z+18, r29	; 0x12
    41f2:	c1 8b       	std	Z+17, r28	; 0x11
    41f4:	82 e0       	ldi	r24, 0x02	; 2
    41f6:	83 8b       	std	Z+19, r24	; 0x13
    41f8:	6c eb       	ldi	r22, 0xBC	; 188
    41fa:	7b e0       	ldi	r23, 0x0B	; 11
    41fc:	83 e1       	ldi	r24, 0x13	; 19
    41fe:	61 dd       	rcall	.-1342   	; 0x3cc2 <radioSendData>
    4200:	62 eb       	ldi	r22, 0xB2	; 178
    4202:	70 e2       	ldi	r23, 0x20	; 32
    4204:	84 e6       	ldi	r24, 0x64	; 100
    4206:	90 e0       	ldi	r25, 0x00	; 0
    4208:	b8 d5       	rcall	.+2928   	; 0x4d7a <macSetAlarm>
    420a:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <associationTimer>
    420e:	df 91       	pop	r29
    4210:	cf 91       	pop	r28
    4212:	08 95       	ret

00004214 <macIsChild>:
    4214:	00 97       	sbiw	r24, 0x00	; 0
    4216:	79 f0       	breq	.+30     	; 0x4236 <macIsChild+0x22>
    4218:	e6 e3       	ldi	r30, 0x36	; 54
    421a:	f5 e0       	ldi	r31, 0x05	; 5
    421c:	05 c0       	rjmp	.+10     	; 0x4228 <macIsChild+0x14>
    421e:	33 96       	adiw	r30, 0x03	; 3
    4220:	26 e0       	ldi	r18, 0x06	; 6
    4222:	e2 36       	cpi	r30, 0x62	; 98
    4224:	f2 07       	cpc	r31, r18
    4226:	39 f0       	breq	.+14     	; 0x4236 <macIsChild+0x22>
    4228:	20 81       	ld	r18, Z
    422a:	31 81       	ldd	r19, Z+1	; 0x01
    422c:	28 17       	cp	r18, r24
    422e:	39 07       	cpc	r19, r25
    4230:	b1 f7       	brne	.-20     	; 0x421e <macIsChild+0xa>
    4232:	81 e0       	ldi	r24, 0x01	; 1
    4234:	08 95       	ret
    4236:	80 e0       	ldi	r24, 0x00	; 0
    4238:	08 95       	ret

0000423a <macAddChild>:
    423a:	a6 e3       	ldi	r26, 0x36	; 54
    423c:	b5 e0       	ldi	r27, 0x05	; 5
    423e:	fd 01       	movw	r30, r26
    4240:	20 e0       	ldi	r18, 0x00	; 0
    4242:	30 e0       	ldi	r19, 0x00	; 0
    4244:	06 c0       	rjmp	.+12     	; 0x4252 <macAddChild+0x18>
    4246:	2f 5f       	subi	r18, 0xFF	; 255
    4248:	3f 4f       	sbci	r19, 0xFF	; 255
    424a:	33 96       	adiw	r30, 0x03	; 3
    424c:	24 36       	cpi	r18, 0x64	; 100
    424e:	31 05       	cpc	r19, r1
    4250:	91 f0       	breq	.+36     	; 0x4276 <macAddChild+0x3c>
    4252:	40 81       	ld	r20, Z
    4254:	51 81       	ldd	r21, Z+1	; 0x01
    4256:	48 17       	cp	r20, r24
    4258:	59 07       	cpc	r21, r25
    425a:	a9 f7       	brne	.-22     	; 0x4246 <macAddChild+0xc>
    425c:	f9 01       	movw	r30, r18
    425e:	ee 0f       	add	r30, r30
    4260:	ff 1f       	adc	r31, r31
    4262:	2e 0f       	add	r18, r30
    4264:	3f 1f       	adc	r19, r31
    4266:	f9 01       	movw	r30, r18
    4268:	e8 5c       	subi	r30, 0xC8	; 200
    426a:	fa 4f       	sbci	r31, 0xFA	; 250
    426c:	80 81       	ld	r24, Z
    426e:	8e 7f       	andi	r24, 0xFE	; 254
    4270:	8d 7f       	andi	r24, 0xFD	; 253
    4272:	80 83       	st	Z, r24
    4274:	08 95       	ret
    4276:	20 e0       	ldi	r18, 0x00	; 0
    4278:	30 e0       	ldi	r19, 0x00	; 0
    427a:	06 c0       	rjmp	.+12     	; 0x4288 <macAddChild+0x4e>
    427c:	2f 5f       	subi	r18, 0xFF	; 255
    427e:	3f 4f       	sbci	r19, 0xFF	; 255
    4280:	13 96       	adiw	r26, 0x03	; 3
    4282:	24 36       	cpi	r18, 0x64	; 100
    4284:	31 05       	cpc	r19, r1
    4286:	d9 f0       	breq	.+54     	; 0x42be <macAddChild+0x84>
    4288:	62 2f       	mov	r22, r18
    428a:	4d 91       	ld	r20, X+
    428c:	5c 91       	ld	r21, X
    428e:	11 97       	sbiw	r26, 0x01	; 1
    4290:	45 2b       	or	r20, r21
    4292:	a1 f7       	brne	.-24     	; 0x427c <macAddChild+0x42>
    4294:	f9 01       	movw	r30, r18
    4296:	ee 0f       	add	r30, r30
    4298:	ff 1f       	adc	r31, r31
    429a:	2e 0f       	add	r18, r30
    429c:	3f 1f       	adc	r19, r31
    429e:	f9 01       	movw	r30, r18
    42a0:	ea 5c       	subi	r30, 0xCA	; 202
    42a2:	fa 4f       	sbci	r31, 0xFA	; 250
    42a4:	91 83       	std	Z+1, r25	; 0x01
    42a6:	80 83       	st	Z, r24
    42a8:	f9 01       	movw	r30, r18
    42aa:	e8 5c       	subi	r30, 0xC8	; 200
    42ac:	fa 4f       	sbci	r31, 0xFA	; 250
    42ae:	80 81       	ld	r24, Z
    42b0:	8e 7f       	andi	r24, 0xFE	; 254
    42b2:	8d 7f       	andi	r24, 0xFD	; 253
    42b4:	80 83       	st	Z, r24
    42b6:	86 2f       	mov	r24, r22
    42b8:	90 e0       	ldi	r25, 0x00	; 0
    42ba:	0c 94 65 02 	jmp	0x4ca	; 0x4ca <appChildAssociated>
    42be:	08 95       	ret

000042c0 <macRemoveChild>:
    42c0:	e6 e3       	ldi	r30, 0x36	; 54
    42c2:	f5 e0       	ldi	r31, 0x05	; 5
    42c4:	20 e0       	ldi	r18, 0x00	; 0
    42c6:	30 e0       	ldi	r19, 0x00	; 0
    42c8:	06 c0       	rjmp	.+12     	; 0x42d6 <macRemoveChild+0x16>
    42ca:	2f 5f       	subi	r18, 0xFF	; 255
    42cc:	3f 4f       	sbci	r19, 0xFF	; 255
    42ce:	33 96       	adiw	r30, 0x03	; 3
    42d0:	24 36       	cpi	r18, 0x64	; 100
    42d2:	31 05       	cpc	r19, r1
    42d4:	81 f0       	breq	.+32     	; 0x42f6 <macRemoveChild+0x36>
    42d6:	40 81       	ld	r20, Z
    42d8:	51 81       	ldd	r21, Z+1	; 0x01
    42da:	48 17       	cp	r20, r24
    42dc:	59 07       	cpc	r21, r25
    42de:	a9 f7       	brne	.-22     	; 0x42ca <macRemoveChild+0xa>
    42e0:	f9 01       	movw	r30, r18
    42e2:	ee 0f       	add	r30, r30
    42e4:	ff 1f       	adc	r31, r31
    42e6:	2e 0f       	add	r18, r30
    42e8:	3f 1f       	adc	r19, r31
    42ea:	f9 01       	movw	r30, r18
    42ec:	ea 5c       	subi	r30, 0xCA	; 202
    42ee:	fa 4f       	sbci	r31, 0xFA	; 250
    42f0:	11 82       	std	Z+1, r1	; 0x01
    42f2:	10 82       	st	Z, r1
    42f4:	08 95       	ret
    42f6:	08 95       	ret

000042f8 <macInitNodes>:
    42f8:	08 95       	ret

000042fa <macWakeChildNode>:
    42fa:	08 95       	ret

000042fc <macChildIsAwake>:
   This function is called on the receipt of every packet.

   @param frame Pointer to ftData struct, the received packet.
*/
void macChildIsAwake(ftData *frame)
{
    42fc:	fc 01       	movw	r30, r24
            if (RUMSLEEP)
                macSendStoredFrame(addr);
        }
    }
    // Reset the sleeping bit in the frame.
    frame->type &= ~0x80;
    42fe:	95 85       	ldd	r25, Z+13	; 0x0d
    4300:	9f 77       	andi	r25, 0x7F	; 127
    4302:	95 87       	std	Z+13, r25	; 0x0d
    4304:	08 95       	ret

00004306 <sendBeaconFrame>:
{
    if (NODETYPE != ENDDEVICE)
    {
        ftBeacon* data_frame = (ftBeacon*)(mac_buffer_tx+1);

        data_frame->fcf   = htons_16(FCF_BEACON);
    4306:	eb eb       	ldi	r30, 0xBB	; 187
    4308:	fb e0       	ldi	r31, 0x0B	; 11
    430a:	80 e0       	ldi	r24, 0x00	; 0
    430c:	90 e8       	ldi	r25, 0x80	; 128
    430e:	92 83       	std	Z+2, r25	; 0x02
    4310:	81 83       	std	Z+1, r24	; 0x01
        data_frame->seq   = macConfig.bsn++;
    4312:	ad e3       	ldi	r26, 0x3D	; 61
    4314:	bc e0       	ldi	r27, 0x0C	; 12
    4316:	19 96       	adiw	r26, 0x09	; 9
    4318:	8c 91       	ld	r24, X
    431a:	19 97       	sbiw	r26, 0x09	; 9
    431c:	91 e0       	ldi	r25, 0x01	; 1
    431e:	98 0f       	add	r25, r24
    4320:	19 96       	adiw	r26, 0x09	; 9
    4322:	9c 93       	st	X, r25
    4324:	19 97       	sbiw	r26, 0x09	; 9
    4326:	83 83       	std	Z+3, r24	; 0x03
        data_frame->panid = htons_16(macConfig.panId);
    4328:	1b 96       	adiw	r26, 0x0b	; 11
    432a:	8d 91       	ld	r24, X+
    432c:	9c 91       	ld	r25, X
    432e:	1c 97       	sbiw	r26, 0x0c	; 12
    4330:	95 83       	std	Z+5, r25	; 0x05
    4332:	84 83       	std	Z+4, r24	; 0x04
        data_frame->addr  = htons_16(macConfig.shortAddress);
    4334:	1d 96       	adiw	r26, 0x0d	; 13
    4336:	8d 91       	ld	r24, X+
    4338:	9c 91       	ld	r25, X
    433a:	1e 97       	sbiw	r26, 0x0e	; 14
    433c:	97 83       	std	Z+7, r25	; 0x07
    433e:	86 83       	std	Z+6, r24	; 0x06

        if (NODETYPE == ROUTER)
            data_frame->superFrame = htons_16(ROUTER_SUPERFRAME);
    4340:	8f ef       	ldi	r24, 0xFF	; 255
    4342:	90 e0       	ldi	r25, 0x00	; 0
    4344:	91 87       	std	Z+9, r25	; 0x09
    4346:	80 87       	std	Z+8, r24	; 0x08
        else
            data_frame->superFrame = htons_16(COORD_SUPERFRAME);

        data_frame->netID = 0x06;
    4348:	86 e0       	ldi	r24, 0x06	; 6
    434a:	82 87       	std	Z+10, r24	; 0x0a
        data_frame->hops = macConfig.hopsToCoord;
    434c:	53 96       	adiw	r26, 0x13	; 19
    434e:	8c 91       	ld	r24, X
    4350:	83 87       	std	Z+11, r24	; 0x0b

        // send data to radio.
        radioSendData(sizeof(ftBeacon), (u8 *)data_frame);
    4352:	6c eb       	ldi	r22, 0xBC	; 188
    4354:	7b e0       	ldi	r23, 0x0B	; 11
    4356:	8b e0       	ldi	r24, 0x0B	; 11
    4358:	b4 cc       	rjmp	.-1688   	; 0x3cc2 <radioSendData>

0000435a <mdr_timer>:
    @param data Pointer to the data to be sent.

    @ingroup avr6lowpan
*/
void macsixlowpanDataRequest(u16 addr, u8 len, u8 * data)
{
    435a:	6c eb       	ldi	r22, 0xBC	; 188
    435c:	7b e0       	ldi	r23, 0x0B	; 11
    435e:	80 91 bb 0b 	lds	r24, 0x0BBB	; 0x800bbb <mac_buffer_tx>
    4362:	af cc       	rjmp	.-1698   	; 0x3cc2 <radioSendData>

00004364 <macDataRequestInt>:
    4364:	ef 92       	push	r14
    4366:	ff 92       	push	r15
    4368:	0f 93       	push	r16
    436a:	1f 93       	push	r17
    436c:	cf 93       	push	r28
    436e:	df 93       	push	r29
    4370:	e0 91 4a 0c 	lds	r30, 0x0C4A	; 0x800c4a <macConfig+0xd>
    4374:	f0 91 4b 0c 	lds	r31, 0x0C4B	; 0x800c4b <macConfig+0xe>
    4378:	e8 17       	cp	r30, r24
    437a:	f9 07       	cpc	r31, r25
    437c:	41 f0       	breq	.+16     	; 0x438e <macDataRequestInt+0x2a>
    437e:	8f 3f       	cpi	r24, 0xFF	; 255
    4380:	3f ef       	ldi	r19, 0xFF	; 255
    4382:	93 07       	cpc	r25, r19
    4384:	21 f0       	breq	.+8      	; 0x438e <macDataRequestInt+0x2a>
    4386:	30 91 45 0c 	lds	r19, 0x0C45	; 0x800c45 <macConfig+0x8>
    438a:	31 11       	cpse	r19, r1
    438c:	07 c0       	rjmp	.+14     	; 0x439c <macDataRequestInt+0x38>
    438e:	df 91       	pop	r29
    4390:	cf 91       	pop	r28
    4392:	1f 91       	pop	r17
    4394:	0f 91       	pop	r16
    4396:	ff 90       	pop	r15
    4398:	ef 90       	pop	r14
    439a:	08 95       	ret
    439c:	12 2f       	mov	r17, r18
    439e:	e5 2e       	mov	r14, r21
    43a0:	f4 2e       	mov	r15, r20
    43a2:	06 2f       	mov	r16, r22
    43a4:	ec 01       	movw	r28, r24
    43a6:	81 e6       	ldi	r24, 0x61	; 97
    43a8:	98 e8       	ldi	r25, 0x88	; 136
    43aa:	90 93 bd 0b 	sts	0x0BBD, r25	; 0x800bbd <mac_buffer_tx+0x2>
    43ae:	80 93 bc 0b 	sts	0x0BBC, r24	; 0x800bbc <mac_buffer_tx+0x1>
    43b2:	80 91 47 0c 	lds	r24, 0x0C47	; 0x800c47 <macConfig+0xa>
    43b6:	91 e0       	ldi	r25, 0x01	; 1
    43b8:	98 0f       	add	r25, r24
    43ba:	90 93 47 0c 	sts	0x0C47, r25	; 0x800c47 <macConfig+0xa>
    43be:	80 93 be 0b 	sts	0x0BBE, r24	; 0x800bbe <mac_buffer_tx+0x3>
    43c2:	80 91 48 0c 	lds	r24, 0x0C48	; 0x800c48 <macConfig+0xb>
    43c6:	90 91 49 0c 	lds	r25, 0x0C49	; 0x800c49 <macConfig+0xc>
    43ca:	90 93 c0 0b 	sts	0x0BC0, r25	; 0x800bc0 <mac_buffer_tx+0x5>
    43ce:	80 93 bf 0b 	sts	0x0BBF, r24	; 0x800bbf <mac_buffer_tx+0x4>
    43d2:	f0 93 c4 0b 	sts	0x0BC4, r31	; 0x800bc4 <mac_buffer_tx+0x9>
    43d6:	e0 93 c3 0b 	sts	0x0BC3, r30	; 0x800bc3 <mac_buffer_tx+0x8>
    43da:	d0 93 c6 0b 	sts	0x0BC6, r29	; 0x800bc6 <mac_buffer_tx+0xb>
    43de:	c0 93 c5 0b 	sts	0x0BC5, r28	; 0x800bc5 <mac_buffer_tx+0xa>
    43e2:	f0 93 c8 0b 	sts	0x0BC8, r31	; 0x800bc8 <mac_buffer_tx+0xd>
    43e6:	e0 93 c7 0b 	sts	0x0BC7, r30	; 0x800bc7 <mac_buffer_tx+0xc>
    43ea:	ce 01       	movw	r24, r28
    43ec:	b3 d3       	rcall	.+1894   	; 0x4b54 <macSendRoutingPacket>
    43ee:	16 30       	cpi	r17, 0x06	; 6
    43f0:	21 f0       	breq	.+8      	; 0x43fa <macDataRequestInt+0x96>
    43f2:	c0 91 4c 0c 	lds	r28, 0x0C4C	; 0x800c4c <macConfig+0xf>
    43f6:	d0 91 4d 0c 	lds	r29, 0x0C4D	; 0x800c4d <macConfig+0x10>
    43fa:	d0 93 c2 0b 	sts	0x0BC2, r29	; 0x800bc2 <mac_buffer_tx+0x7>
    43fe:	c0 93 c1 0b 	sts	0x0BC1, r28	; 0x800bc1 <mac_buffer_tx+0x6>
    4402:	10 93 c9 0b 	sts	0x0BC9, r17	; 0x800bc9 <mac_buffer_tx+0xe>
    4406:	00 23       	and	r16, r16
    4408:	71 f0       	breq	.+28     	; 0x4426 <macDataRequestInt+0xc2>
    440a:	af 2d       	mov	r26, r15
    440c:	be 2d       	mov	r27, r14
    440e:	ea ec       	ldi	r30, 0xCA	; 202
    4410:	fb e0       	ldi	r31, 0x0B	; 11
    4412:	4f ef       	ldi	r20, 0xFF	; 255
    4414:	40 0f       	add	r20, r16
    4416:	50 e0       	ldi	r21, 0x00	; 0
    4418:	45 53       	subi	r20, 0x35	; 53
    441a:	54 4f       	sbci	r21, 0xF4	; 244
    441c:	8d 91       	ld	r24, X+
    441e:	81 93       	st	Z+, r24
    4420:	e4 17       	cp	r30, r20
    4422:	f5 07       	cpc	r31, r21
    4424:	d9 f7       	brne	.-10     	; 0x441c <macDataRequestInt+0xb8>
    4426:	80 91 4a 0c 	lds	r24, 0x0C4A	; 0x800c4a <macConfig+0xd>
    442a:	90 91 4b 0c 	lds	r25, 0x0C4B	; 0x800c4b <macConfig+0xe>
    442e:	c8 17       	cp	r28, r24
    4430:	d9 07       	cpc	r29, r25
    4432:	09 f4       	brne	.+2      	; 0x4436 <macDataRequestInt+0xd2>
    4434:	ac cf       	rjmp	.-168    	; 0x438e <macDataRequestInt+0x2a>
    4436:	21 96       	adiw	r28, 0x01	; 1
    4438:	09 f4       	brne	.+2      	; 0x443c <macDataRequestInt+0xd8>
    443a:	a9 cf       	rjmp	.-174    	; 0x438e <macDataRequestInt+0x2a>
    443c:	6e e0       	ldi	r22, 0x0E	; 14
    443e:	60 0f       	add	r22, r16
    4440:	60 93 bb 0b 	sts	0x0BBB, r22	; 0x800bbb <mac_buffer_tx>
    4444:	16 50       	subi	r17, 0x06	; 6
    4446:	12 30       	cpi	r17, 0x02	; 2
    4448:	78 f0       	brcs	.+30     	; 0x4468 <macDataRequestInt+0x104>
    444a:	87 e0       	ldi	r24, 0x07	; 7
    444c:	90 e0       	ldi	r25, 0x00	; 0
    444e:	6d ea       	ldi	r22, 0xAD	; 173
    4450:	71 e2       	ldi	r23, 0x21	; 33
    4452:	93 d4       	rcall	.+2342   	; 0x4d7a <macSetAlarm>
    4454:	81 e0       	ldi	r24, 0x01	; 1
    4456:	80 93 54 0c 	sts	0x0C54, r24	; 0x800c54 <macConfig+0x17>
    445a:	df 91       	pop	r29
    445c:	cf 91       	pop	r28
    445e:	1f 91       	pop	r17
    4460:	0f 91       	pop	r16
    4462:	ff 90       	pop	r15
    4464:	ef 90       	pop	r14
    4466:	08 95       	ret
    4468:	80 e0       	ldi	r24, 0x00	; 0
    446a:	90 e0       	ldi	r25, 0x00	; 0
    446c:	f0 cf       	rjmp	.-32     	; 0x444e <macDataRequestInt+0xea>

0000446e <macDataRequest>:
    446e:	21 e0       	ldi	r18, 0x01	; 1
    4470:	79 cf       	rjmp	.-270    	; 0x4364 <macDataRequestInt>

00004472 <macDataIndication>:
                fnDebugMsg("\r\nData indication buffer problem");
        }
    }
#endif

    switch (frame->type & 0x7f)  // Mask high bit just in case it was somehow missed
    4472:	80 91 47 0b 	lds	r24, 0x0B47	; 0x800b47 <mac_buffer_rx+0xe>
    4476:	8f 77       	andi	r24, 0x7F	; 127
    4478:	83 30       	cpi	r24, 0x03	; 3
    447a:	41 f1       	breq	.+80     	; 0x44cc <macDataIndication+0x5a>
    447c:	50 f4       	brcc	.+20     	; 0x4492 <macDataIndication+0x20>
    447e:	81 30       	cpi	r24, 0x01	; 1
    4480:	19 f1       	breq	.+70     	; 0x44c8 <macDataIndication+0x56>
    4482:	82 30       	cpi	r24, 0x02	; 2
    4484:	d9 f4       	brne	.+54     	; 0x44bc <macDataIndication+0x4a>
            debugMsgStrConst("\r\nAwake");
        }
        break;
    case PING_REQ_FRAME:
        // We got a ping request, let the app handle that
        appPingReq(frame->originAddr);
    4486:	80 91 45 0b 	lds	r24, 0x0B45	; 0x800b45 <mac_buffer_rx+0xc>
    448a:	90 91 46 0b 	lds	r25, 0x0B46	; 0x800b46 <mac_buffer_rx+0xd>
    448e:	0c 94 ce 01 	jmp	0x39c	; 0x39c <appPingReq>
                fnDebugMsg("\r\nData indication buffer problem");
        }
    }
#endif

    switch (frame->type & 0x7f)  // Mask high bit just in case it was somehow missed
    4492:	84 30       	cpi	r24, 0x04	; 4
    4494:	a1 f0       	breq	.+40     	; 0x44be <macDataIndication+0x4c>
    4496:	86 30       	cpi	r24, 0x06	; 6
    4498:	81 f4       	brne	.+32     	; 0x44ba <macDataIndication+0x48>
        break;
    case WAKE_NODE:
        // Wake up the end node.
        if (NODETYPE == ROUTER)
        {
            u8 addr = ((ftWake*)frame)->addr;
    449a:	80 91 48 0b 	lds	r24, 0x0B48	; 0x800b48 <mac_buffer_rx+0xf>
    449e:	90 91 49 0b 	lds	r25, 0x0B49	; 0x800b49 <mac_buffer_rx+0x10>
            // See if this is from parent or child
            if ((((ftWake*)frame)->srcAddr) == macConfig.parentShortAddress)
    44a2:	40 91 41 0b 	lds	r20, 0x0B41	; 0x800b41 <mac_buffer_rx+0x8>
    44a6:	50 91 42 0b 	lds	r21, 0x0B42	; 0x800b42 <mac_buffer_rx+0x9>
    44aa:	20 91 4c 0c 	lds	r18, 0x0C4C	; 0x800c4c <macConfig+0xf>
    44ae:	30 91 4d 0c 	lds	r19, 0x0C4D	; 0x800c4d <macConfig+0x10>
    44b2:	42 17       	cp	r20, r18
    44b4:	53 07       	cpc	r21, r19
    44b6:	81 f0       	breq	.+32     	; 0x44d8 <macDataIndication+0x66>
    44b8:	08 95       	ret
    44ba:	08 95       	ret
    44bc:	08 95       	ret
        appPingRsp(frame->originAddr);
        break;
    case DROP_CHILD_FRAME:
        // Coordinator is telling us to drop a child
        if (NODETYPE == ROUTER)
            macRemoveChild(*(u16*)(&frame->payload));
    44be:	80 91 48 0b 	lds	r24, 0x0B48	; 0x800b48 <mac_buffer_rx+0xf>
    44c2:	90 91 49 0b 	lds	r25, 0x0B49	; 0x800b49 <mac_buffer_rx+0x10>
    44c6:	fc ce       	rjmp	.-520    	; 0x42c0 <macRemoveChild>

    switch (frame->type & 0x7f)  // Mask high bit just in case it was somehow missed
    {
    case DATA_FRAME:
        // Plain old data, send it up the chain
        appDataIndication();
    44c8:	0c 94 37 02 	jmp	0x46e	; 0x46e <appDataIndication>
        // We got a ping request, let the app handle that
        appPingReq(frame->originAddr);
        break;
    case PING_RSP_FRAME:
        // We got a ping response, app will handle it
        appPingRsp(frame->originAddr);
    44cc:	80 91 45 0b 	lds	r24, 0x0B45	; 0x800b45 <mac_buffer_rx+0xc>
    44d0:	90 91 46 0b 	lds	r25, 0x0B46	; 0x800b46 <mac_buffer_rx+0xd>
    44d4:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <appPingRsp>
        {
            u8 addr = ((ftWake*)frame)->addr;
            // See if this is from parent or child
            if ((((ftWake*)frame)->srcAddr) == macConfig.parentShortAddress)
                // Set the flag to wake up the end node when it sends a packet
                macWakeChildNode(addr);
    44d8:	99 27       	eor	r25, r25
    44da:	0f cf       	rjmp	.-482    	; 0x42fa <macWakeChildNode>

000044dc <mp>:
    }
}

// Target function to timer, sends ping packet after a delay
void mp(void)
{
    44dc:	0f 93       	push	r16
    44de:	1f 93       	push	r17
    44e0:	cf 93       	push	r28
    44e2:	df 93       	push	r29
    44e4:	cd b7       	in	r28, 0x3d	; 61
    44e6:	de b7       	in	r29, 0x3e	; 62
    44e8:	60 97       	sbiw	r28, 0x10	; 16
    44ea:	0f b6       	in	r0, 0x3f	; 63
    44ec:	f8 94       	cli
    44ee:	de bf       	out	0x3e, r29	; 62
    44f0:	0f be       	out	0x3f, r0	; 63
    44f2:	cd bf       	out	0x3d, r28	; 61
    ftPing frame;

    frame.fcf = htons_16(FCF_DATA);
    44f4:	81 e6       	ldi	r24, 0x61	; 97
    44f6:	98 e8       	ldi	r25, 0x88	; 136
    44f8:	9a 83       	std	Y+2, r25	; 0x02
    44fa:	89 83       	std	Y+1, r24	; 0x01
    frame.seq = macConfig.dsn++;
    44fc:	0d e3       	ldi	r16, 0x3D	; 61
    44fe:	1c e0       	ldi	r17, 0x0C	; 12
    4500:	f8 01       	movw	r30, r16
    4502:	82 85       	ldd	r24, Z+10	; 0x0a
    4504:	91 e0       	ldi	r25, 0x01	; 1
    4506:	98 0f       	add	r25, r24
    4508:	92 87       	std	Z+10, r25	; 0x0a
    450a:	8b 83       	std	Y+3, r24	; 0x03
    frame.panid = htons_16(macConfig.panId);
    450c:	83 85       	ldd	r24, Z+11	; 0x0b
    450e:	94 85       	ldd	r25, Z+12	; 0x0c
    4510:	9d 83       	std	Y+5, r25	; 0x05
    4512:	8c 83       	std	Y+4, r24	; 0x04
    frame.srcAddr = htons_16(macConfig.shortAddress);
    4514:	85 85       	ldd	r24, Z+13	; 0x0d
    4516:	96 85       	ldd	r25, Z+14	; 0x0e
    4518:	99 87       	std	Y+9, r25	; 0x09
    451a:	88 87       	std	Y+8, r24	; 0x08
    frame.originAddr = htons_16(macConfig.shortAddress);
    451c:	9d 87       	std	Y+13, r25	; 0x0d
    451e:	8c 87       	std	Y+12, r24	; 0x0c
    frame.finalDestAddr = htons_16(pingAddr);
    4520:	80 91 65 06 	lds	r24, 0x0665	; 0x800665 <pingAddr>
    4524:	90 91 66 06 	lds	r25, 0x0666	; 0x800666 <pingAddr+0x1>
    4528:	9b 87       	std	Y+11, r25	; 0x0b
    452a:	8a 87       	std	Y+10, r24	; 0x0a
    frame.type = pingType;
    452c:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <pingType>
    4530:	8e 87       	std	Y+14, r24	; 0x0e
    frame.rssi = radioGetSavedRssiValue();
    4532:	d0 d9       	rcall	.-3168   	; 0x38d4 <radioGetSavedRssiValue>
    4534:	8f 87       	std	Y+15, r24	; 0x0f
    frame.lqi = radioGetSavedLqiValue();
    4536:	dd d9       	rcall	.-3142   	; 0x38f2 <radioGetSavedLqiValue>
    4538:	88 8b       	std	Y+16, r24	; 0x10
            return;
        }
    }
    else
        // End/router nodes
        frame.destAddr = htons_16(macConfig.parentShortAddress);
    453a:	f8 01       	movw	r30, r16
    453c:	87 85       	ldd	r24, Z+15	; 0x0f
    453e:	90 89       	ldd	r25, Z+16	; 0x10
    4540:	9f 83       	std	Y+7, r25	; 0x07
    4542:	8e 83       	std	Y+6, r24	; 0x06


    radioSendData(sizeof(ftPing), (u8*)&frame);
    4544:	be 01       	movw	r22, r28
    4546:	6f 5f       	subi	r22, 0xFF	; 255
    4548:	7f 4f       	sbci	r23, 0xFF	; 255
    454a:	80 e1       	ldi	r24, 0x10	; 16
    454c:	ba db       	rcall	.-2188   	; 0x3cc2 <radioSendData>
}
    454e:	60 96       	adiw	r28, 0x10	; 16
    4550:	0f b6       	in	r0, 0x3f	; 63
    4552:	f8 94       	cli
    4554:	de bf       	out	0x3e, r29	; 62
    4556:	0f be       	out	0x3f, r0	; 63
    4558:	cd bf       	out	0x3d, r28	; 61
    455a:	df 91       	pop	r29
    455c:	cf 91       	pop	r28
    455e:	1f 91       	pop	r17
    4560:	0f 91       	pop	r16
    4562:	08 95       	ret

00004564 <macPing>:

   @param addr Short address of node to send ping
*/
void macPing(u8 pingTypeArg, u16 addr)
{
    if (addr == macConfig.shortAddress)
    4564:	20 91 4a 0c 	lds	r18, 0x0C4A	; 0x800c4a <macConfig+0xd>
    4568:	30 91 4b 0c 	lds	r19, 0x0C4B	; 0x800c4b <macConfig+0xe>
    456c:	26 17       	cp	r18, r22
    456e:	37 07       	cpc	r19, r23
    4570:	21 f0       	breq	.+8      	; 0x457a <macPing+0x16>
        // Don't send to self
        return;

    if (!macConfig.associated)
    4572:	90 91 45 0c 	lds	r25, 0x0C45	; 0x800c45 <macConfig+0x8>
    4576:	91 11       	cpse	r25, r1
    4578:	01 c0       	rjmp	.+2      	; 0x457c <macPing+0x18>
    457a:	08 95       	ret
        // Broadcast addr
        return;

    pingAddr = addr;
    457c:	70 93 66 06 	sts	0x0666, r23	; 0x800666 <pingAddr+0x1>
    4580:	60 93 65 06 	sts	0x0665, r22	; 0x800665 <pingAddr>
    pingType = pingTypeArg;
    4584:	90 e0       	ldi	r25, 0x00	; 0
    4586:	90 93 64 06 	sts	0x0664, r25	; 0x800664 <pingType+0x1>
    458a:	80 93 63 06 	sts	0x0663, r24	; 0x800663 <pingType>
        macConfig.busy = true;
    }
    else
    {
        // End/router nodes
        mp();
    458e:	a6 df       	rcall	.-180    	; 0x44dc <mp>
        macConfig.busy = true;
    4590:	81 e0       	ldi	r24, 0x01	; 1
    4592:	80 93 54 0c 	sts	0x0C54, r24	; 0x800c54 <macConfig+0x17>
    4596:	08 95       	ret

00004598 <mac_event_pending>:
	newtail = 0;

	event_queue.tail = newtail;

	return(object);
}
    4598:	90 91 56 0c 	lds	r25, 0x0C56	; 0x800c56 <event_queue>
    459c:	20 91 57 0c 	lds	r18, 0x0C57	; 0x800c57 <event_queue+0x1>
    45a0:	81 e0       	ldi	r24, 0x01	; 1
    45a2:	29 13       	cpse	r18, r25
    45a4:	08 95       	ret
    45a6:	80 e0       	ldi	r24, 0x00	; 0
    45a8:	08 95       	ret

000045aa <mac_put_event>:
    45aa:	cf 93       	push	r28
    45ac:	df 93       	push	r29
    45ae:	ec 01       	movw	r28, r24
    45b0:	40 91 56 0c 	lds	r20, 0x0C56	; 0x800c56 <event_queue>
    45b4:	24 2f       	mov	r18, r20
    45b6:	30 e0       	ldi	r19, 0x00	; 0
    45b8:	e0 91 57 0c 	lds	r30, 0x0C57	; 0x800c57 <event_queue+0x1>
    45bc:	c9 01       	movw	r24, r18
    45be:	01 96       	adiw	r24, 0x01	; 1
    45c0:	6e e1       	ldi	r22, 0x1E	; 30
    45c2:	70 e0       	ldi	r23, 0x00	; 0
    45c4:	0e 94 ef 2e 	call	0x5dde	; 0x5dde <__divmodhi4>
    45c8:	6e 2f       	mov	r22, r30
    45ca:	70 e0       	ldi	r23, 0x00	; 0
    45cc:	86 17       	cp	r24, r22
    45ce:	97 07       	cpc	r25, r23
    45d0:	99 f0       	breq	.+38     	; 0x45f8 <mac_put_event+0x4e>
    45d2:	f9 01       	movw	r30, r18
    45d4:	ee 0f       	add	r30, r30
    45d6:	ff 1f       	adc	r31, r31
    45d8:	2e 0f       	add	r18, r30
    45da:	3f 1f       	adc	r19, r31
    45dc:	f9 01       	movw	r30, r18
    45de:	ea 5a       	subi	r30, 0xAA	; 170
    45e0:	f3 4f       	sbci	r31, 0xF3	; 243
    45e2:	88 81       	ld	r24, Y
    45e4:	99 81       	ldd	r25, Y+1	; 0x01
    45e6:	aa 81       	ldd	r26, Y+2	; 0x02
    45e8:	82 83       	std	Z+2, r24	; 0x02
    45ea:	93 83       	std	Z+3, r25	; 0x03
    45ec:	a4 83       	std	Z+4, r26	; 0x04
    45ee:	4f 5f       	subi	r20, 0xFF	; 255
    45f0:	4e 31       	cpi	r20, 0x1E	; 30
    45f2:	28 f4       	brcc	.+10     	; 0x45fe <mac_put_event+0x54>
    45f4:	40 93 56 0c 	sts	0x0C56, r20	; 0x800c56 <event_queue>
    45f8:	df 91       	pop	r29
    45fa:	cf 91       	pop	r28
    45fc:	08 95       	ret
    45fe:	40 e0       	ldi	r20, 0x00	; 0
    4600:	f9 cf       	rjmp	.-14     	; 0x45f4 <mac_put_event+0x4a>

00004602 <macTask>:
"forever" loop or by an OS task or thread.  This function processes
interrupt events that are stored in the event queue by the radio or
timer.
*/
void macTask(void)
{
    4602:	1f 93       	push	r17
    4604:	cf 93       	push	r28
    4606:	df 93       	push	r29
    4608:	1f 92       	push	r1
    460a:	cd b7       	in	r28, 0x3d	; 61
    460c:	de b7       	in	r29, 0x3e	; 62
				//   if (*((u16*)(mac_buffer_rx+1)) == FCF_ASSOC_RESP_DIRECT) // Direct to MAC Addr?
				if ((mac_buffer_rx[2] == (htons_16(FCF_ASSOC_RESP_DIRECT) >> 8)) &&
				(mac_buffer_rx[1] == (htons_16(FCF_ASSOC_RESP_DIRECT) & 0xff)))
				{
					// this is a new node, do the association thing
					macConfig.associated = true;
    460e:	11 e0       	ldi	r17, 0x01	; 1

@return True if there is a pending event, else false.
*/
u8 mac_event_pending(void)
{
	u8 head = event_queue.head;
    4610:	90 91 56 0c 	lds	r25, 0x0C56	; 0x800c56 <event_queue>
	return (head != event_queue.tail);
    4614:	80 91 57 0c 	lds	r24, 0x0C57	; 0x800c57 <event_queue+0x1>
void macTask(void)
{
	event_object_t *event;

	event = 0;
	while(mac_event_pending())
    4618:	98 17       	cp	r25, r24
    461a:	91 f1       	breq	.+100    	; 0x4680 <macTask+0x7e>
event_object_t * mac_get_event(void)
{
	event_object_t *object = NULL;
	volatile u8 newtail;

	newtail = event_queue.tail;
    461c:	80 91 57 0c 	lds	r24, 0x0C57	; 0x800c57 <event_queue+0x1>
    4620:	89 83       	std	Y+1, r24	; 0x01

	object = &(event_queue.event_object[newtail]);
    4622:	29 81       	ldd	r18, Y+1	; 0x01
    4624:	30 e0       	ldi	r19, 0x00	; 0

	// calculate new tail
	newtail++;
    4626:	89 81       	ldd	r24, Y+1	; 0x01
    4628:	8f 5f       	subi	r24, 0xFF	; 255
    462a:	89 83       	std	Y+1, r24	; 0x01
	if (newtail >= MAX_EVENTS)
    462c:	89 81       	ldd	r24, Y+1	; 0x01
    462e:	8e 31       	cpi	r24, 0x1E	; 30
    4630:	08 f0       	brcs	.+2      	; 0x4634 <macTask+0x32>
	newtail = 0;
    4632:	19 82       	std	Y+1, r1	; 0x01

	event_queue.tail = newtail;
    4634:	89 81       	ldd	r24, Y+1	; 0x01
    4636:	80 93 57 0c 	sts	0x0C57, r24	; 0x800c57 <event_queue+0x1>

	event = 0;
	while(mac_event_pending())
	{
		event = mac_get_event();
		switch (event->event)
    463a:	f9 01       	movw	r30, r18
    463c:	ee 0f       	add	r30, r30
    463e:	ff 1f       	adc	r31, r31
    4640:	e2 0f       	add	r30, r18
    4642:	f3 1f       	adc	r31, r19
    4644:	ea 5a       	subi	r30, 0xAA	; 170
    4646:	f3 4f       	sbci	r31, 0xF3	; 243
    4648:	e2 81       	ldd	r30, Z+2	; 0x02
    464a:	8e 2f       	mov	r24, r30
    464c:	90 e0       	ldi	r25, 0x00	; 0
    464e:	fc 01       	movw	r30, r24
    4650:	70 97       	sbiw	r30, 0x10	; 16
    4652:	ea 30       	cpi	r30, 0x0A	; 10
    4654:	f1 05       	cpc	r31, r1
    4656:	e0 f6       	brcc	.-72     	; 0x4610 <macTask+0xe>
    4658:	e4 52       	subi	r30, 0x24	; 36
    465a:	ff 4f       	sbci	r31, 0xFF	; 255
    465c:	0c 94 24 2f 	jmp	0x5e48	; 0x5e48 <__tablejump2__>
			case MAC_EVENT_ASSOCIATION_RESPONSE:
			// End device has received this response.
			if (NODETYPE != COORD)
			{
				//   if (*((u16*)(mac_buffer_rx+1)) == FCF_ASSOC_RESP_DIRECT) // Direct to MAC Addr?
				if ((mac_buffer_rx[2] == (htons_16(FCF_ASSOC_RESP_DIRECT) >> 8)) &&
    4660:	80 91 3b 0b 	lds	r24, 0x0B3B	; 0x800b3b <mac_buffer_rx+0x2>
    4664:	8c 38       	cpi	r24, 0x8C	; 140
    4666:	09 f4       	brne	.+2      	; 0x466a <macTask+0x68>
    4668:	5c c0       	rjmp	.+184    	; 0x4722 <macTask+0x120>
					macAssociationConfirm();
				}
				else
				{
					// we are indirect, so just send this packet along.
					if (NODETYPE == ROUTER && macConfig.associated)
    466a:	80 91 45 0c 	lds	r24, 0x0C45	; 0x800c45 <macConfig+0x8>
    466e:	88 23       	and	r24, r24
    4670:	79 f2       	breq	.-98     	; 0x4610 <macTask+0xe>
						frame->srcAddr = ntohs_16(frame->srcAddr);
						frame->parentAddr = ntohs_16(frame->parentAddr);
						frame->shortAddr = ntohs_16(frame->shortAddr);
						frame->macAddr = ntohs_64(frame->macAddr);
						// Route the packet
						macRouteAssociateResponse();
    4672:	be d0       	rcall	.+380    	; 0x47f0 <macRouteAssociateResponse>

@return True if there is a pending event, else false.
*/
u8 mac_event_pending(void)
{
	u8 head = event_queue.head;
    4674:	90 91 56 0c 	lds	r25, 0x0C56	; 0x800c56 <event_queue>
	return (head != event_queue.tail);
    4678:	80 91 57 0c 	lds	r24, 0x0C57	; 0x800c57 <event_queue+0x1>
void macTask(void)
{
	event_object_t *event;

	event = 0;
	while(mac_event_pending())
    467c:	98 13       	cpse	r25, r24
    467e:	ce cf       	rjmp	.-100    	; 0x461c <macTask+0x1a>
			break;
			default:
			break;
		}
	}
}
    4680:	0f 90       	pop	r0
    4682:	df 91       	pop	r29
    4684:	cf 91       	pop	r28
    4686:	1f 91       	pop	r17
    4688:	08 95       	ret
				break;
			}
			if (NODETYPE == COORD)
			// Pan Coord has received this request.
			macAssociationResponse();
			if (NODETYPE == ROUTER && macConfig.associated)
    468a:	80 91 45 0c 	lds	r24, 0x0C45	; 0x800c45 <macConfig+0x8>
    468e:	88 23       	and	r24, r24
    4690:	09 f4       	brne	.+2      	; 0x4694 <macTask+0x92>
    4692:	be cf       	rjmp	.-132    	; 0x4610 <macTask+0xe>
			{
				// Send this packet along to parent
				macRouteAssociateRequest();
    4694:	37 d1       	rcall	.+622    	; 0x4904 <macRouteAssociateRequest>
    4696:	bc cf       	rjmp	.-136    	; 0x4610 <macTask+0xe>
			break;
			// ETG #if __AVR__ || __AVR32__
			#if __AVR__ || __AVR32__
			case MAC_EVENT_TIMER:
			// Timer has expired, just callback the stored function pointer
			((void (*)(void))event->data)();  // cast data to function pointer
    4698:	2f 5f       	subi	r18, 0xFF	; 255
    469a:	3f 4f       	sbci	r19, 0xFF	; 255
    469c:	f9 01       	movw	r30, r18
    469e:	ee 0f       	add	r30, r30
    46a0:	ff 1f       	adc	r31, r31
    46a2:	2e 0f       	add	r18, r30
    46a4:	3f 1f       	adc	r19, r31
    46a6:	f9 01       	movw	r30, r18
    46a8:	ea 5a       	subi	r30, 0xAA	; 170
    46aa:	f3 4f       	sbci	r31, 0xF3	; 243
    46ac:	01 90       	ld	r0, Z+
    46ae:	f0 81       	ld	r31, Z
    46b0:	e0 2d       	mov	r30, r0
    46b2:	09 95       	icall
			break;
    46b4:	ad cf       	rjmp	.-166    	; 0x4610 <macTask+0xe>
			{
				ftBeaconReq *frame = (ftBeaconReq*)(mac_buffer_rx+1);
				frame->panid = ntohs_16(frame->panid);
				
				// Generate and send the beacon.
				if (NODETYPE == ROUTER && macConfig.associated)
    46b6:	80 91 45 0c 	lds	r24, 0x0C45	; 0x800c45 <macConfig+0x8>
    46ba:	88 23       	and	r24, r24
    46bc:	09 f4       	brne	.+2      	; 0x46c0 <macTask+0xbe>
    46be:	a8 cf       	rjmp	.-176    	; 0x4610 <macTask+0xe>
				macSetAlarm(1, sendBeaconFrame);
    46c0:	63 e8       	ldi	r22, 0x83	; 131
    46c2:	71 e2       	ldi	r23, 0x21	; 33
    46c4:	81 e0       	ldi	r24, 0x01	; 1
    46c6:	90 e0       	ldi	r25, 0x00	; 0
    46c8:	58 d3       	rcall	.+1712   	; 0x4d7a <macSetAlarm>
    46ca:	a2 cf       	rjmp	.-188    	; 0x4610 <macTask+0xe>
		{
			case MAC_EVENT_SCAN:
			// A beacon has been received as a result of an active scan.
			// Record the pan descriptor and store it until the scan has
			// completed.
			if (!macConfig.associated)
    46cc:	80 91 45 0c 	lds	r24, 0x0C45	; 0x800c45 <macConfig+0x8>
    46d0:	81 11       	cpse	r24, r1
    46d2:	9e cf       	rjmp	.-196    	; 0x4610 <macTask+0xe>
			mac_logPanDescriptors();
    46d4:	6a d2       	rcall	.+1236   	; 0x4baa <mac_logPanDescriptors>
    46d6:	9c cf       	rjmp	.-200    	; 0x4610 <macTask+0xe>
			if (NODETYPE == ROUTER && macConfig.associated)
			macForwardRoutingPacket();
			break;
			case MAC_EVENT_ACCESS:
			// Channel access failure
			appPacketSendAccessFail();
    46d8:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <appPacketSendAccessFail>
			break;
    46dc:	99 cf       	rjmp	.-206    	; 0x4610 <macTask+0xe>
			case MAC_EVENT_NACK:
			// Packet failed to be sent, alert application
			appPacketSendFailed();
    46de:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <appPacketSendFailed>
			break;
    46e2:	96 cf       	rjmp	.-212    	; 0x4610 <macTask+0xe>
			case MAC_EVENT_ACK:
			// Packet got through, alert application
			appPacketSendSucceed();
    46e4:	0e 94 da 01 	call	0x3b4	; 0x3b4 <appPacketSendSucceed>
			break;
    46e8:	93 cf       	rjmp	.-218    	; 0x4610 <macTask+0xe>
			// Timer has expired, just callback the stored function pointer
			((void (*)(void))event->data)();  // cast data to function pointer
			break;
			#endif
			case MAC_EVENT_RX:
			if (macConfig.associated)
    46ea:	80 91 45 0c 	lds	r24, 0x0C45	; 0x800c45 <macConfig+0x8>
    46ee:	88 23       	and	r24, r24
    46f0:	09 f4       	brne	.+2      	; 0x46f4 <macTask+0xf2>
    46f2:	8e cf       	rjmp	.-228    	; 0x4610 <macTask+0xe>
				frame->finalDestAddr = ntohs_16(frame->finalDestAddr);
				frame->originAddr = ntohs_16(frame->originAddr);

				// Wake up
				if (NODETYPE != ENDDEVICE)
				macChildIsAwake((ftData*)(mac_buffer_rx+1));
    46f4:	8a e3       	ldi	r24, 0x3A	; 58
    46f6:	9b e0       	ldi	r25, 0x0B	; 11
    46f8:	01 de       	rcall	.-1022   	; 0x42fc <macChildIsAwake>
				// Received a data frame, process it or route it
				if (((ftData*)(mac_buffer_rx+1))->finalDestAddr == macConfig.shortAddress)
    46fa:	20 91 43 0b 	lds	r18, 0x0B43	; 0x800b43 <mac_buffer_rx+0xa>
    46fe:	30 91 44 0b 	lds	r19, 0x0B44	; 0x800b44 <mac_buffer_rx+0xb>
    4702:	80 91 4a 0c 	lds	r24, 0x0C4A	; 0x800c4a <macConfig+0xd>
    4706:	90 91 4b 0c 	lds	r25, 0x0C4B	; 0x800c4b <macConfig+0xe>
    470a:	28 17       	cp	r18, r24
    470c:	39 07       	cpc	r19, r25
    470e:	19 f1       	breq	.+70     	; 0x4756 <macTask+0x154>
				// This data frame is for this node
				macDataIndication();
				else
				// Route the packet up/down stream
				if (NODETYPE != ENDDEVICE)
				macRouteData();
    4710:	b0 d1       	rcall	.+864    	; 0x4a72 <macRouteData>
    4712:	7e cf       	rjmp	.-260    	; 0x4610 <macTask+0xe>
				}
			}
			break;
			case MAC_EVENT_ROUTE:
			// Routing packet received, forward it
			if (NODETYPE == ROUTER && macConfig.associated)
    4714:	80 91 45 0c 	lds	r24, 0x0C45	; 0x800c45 <macConfig+0x8>
    4718:	88 23       	and	r24, r24
    471a:	09 f4       	brne	.+2      	; 0x471e <macTask+0x11c>
    471c:	79 cf       	rjmp	.-270    	; 0x4610 <macTask+0xe>
			macForwardRoutingPacket();
    471e:	1d d0       	rcall	.+58     	; 0x475a <macForwardRoutingPacket>
    4720:	77 cf       	rjmp	.-274    	; 0x4610 <macTask+0xe>
			case MAC_EVENT_ASSOCIATION_RESPONSE:
			// End device has received this response.
			if (NODETYPE != COORD)
			{
				//   if (*((u16*)(mac_buffer_rx+1)) == FCF_ASSOC_RESP_DIRECT) // Direct to MAC Addr?
				if ((mac_buffer_rx[2] == (htons_16(FCF_ASSOC_RESP_DIRECT) >> 8)) &&
    4722:	80 91 3a 0b 	lds	r24, 0x0B3A	; 0x800b3a <mac_buffer_rx+0x1>
    4726:	83 36       	cpi	r24, 0x63	; 99
    4728:	09 f0       	breq	.+2      	; 0x472c <macTask+0x12a>
    472a:	9f cf       	rjmp	.-194    	; 0x466a <macTask+0x68>
				(mac_buffer_rx[1] == (htons_16(FCF_ASSOC_RESP_DIRECT) & 0xff)))
				{
					// this is a new node, do the association thing
					macConfig.associated = true;
    472c:	10 93 45 0c 	sts	0x0C45, r17	; 0x800c45 <macConfig+0x8>
					macConfig.parentShortAddress = ntohs_16(((ftAssocRespDirect*)(mac_buffer_rx+1))->srcAddr);
    4730:	80 91 47 0b 	lds	r24, 0x0B47	; 0x800b47 <mac_buffer_rx+0xe>
    4734:	90 91 48 0b 	lds	r25, 0x0B48	; 0x800b48 <mac_buffer_rx+0xf>
    4738:	90 93 4d 0c 	sts	0x0C4D, r25	; 0x800c4d <macConfig+0x10>
    473c:	80 93 4c 0c 	sts	0x0C4C, r24	; 0x800c4c <macConfig+0xf>
					macConfig.shortAddress = ntohs_16(((ftAssocRespDirect*)(mac_buffer_rx+1))->shortAddr);
    4740:	80 91 4a 0b 	lds	r24, 0x0B4A	; 0x800b4a <mac_buffer_rx+0x11>
    4744:	90 91 4b 0b 	lds	r25, 0x0B4B	; 0x800b4b <mac_buffer_rx+0x12>
    4748:	90 93 4b 0c 	sts	0x0C4B, r25	; 0x800c4b <macConfig+0xe>
    474c:	80 93 4a 0c 	sts	0x0C4A, r24	; 0x800c4a <macConfig+0xd>

					radioSetShortAddress(macConfig.shortAddress);
    4750:	06 db       	rcall	.-2548   	; 0x3d5e <radioSetShortAddress>
					macAssociationConfirm();
    4752:	08 dd       	rcall	.-1520   	; 0x4164 <macAssociationConfirm>
    4754:	5d cf       	rjmp	.-326    	; 0x4610 <macTask+0xe>
				if (NODETYPE != ENDDEVICE)
				macChildIsAwake((ftData*)(mac_buffer_rx+1));
				// Received a data frame, process it or route it
				if (((ftData*)(mac_buffer_rx+1))->finalDestAddr == macConfig.shortAddress)
				// This data frame is for this node
				macDataIndication();
    4756:	8d de       	rcall	.-742    	; 0x4472 <macDataIndication>
    4758:	5b cf       	rjmp	.-330    	; 0x4610 <macTask+0xe>

0000475a <macForwardRoutingPacket>:
        }
    }
}

void mrd(void)
{
    475a:	80 91 39 0b 	lds	r24, 0x0B39	; 0x800b39 <mac_buffer_rx>
    475e:	92 e8       	ldi	r25, 0x82	; 130
    4760:	e9 e3       	ldi	r30, 0x39	; 57
    4762:	fb e0       	ldi	r31, 0x0B	; 11
    4764:	ab eb       	ldi	r26, 0xBB	; 187
    4766:	bb e0       	ldi	r27, 0x0B	; 11
    4768:	01 90       	ld	r0, Z+
    476a:	0d 92       	st	X+, r0
    476c:	9a 95       	dec	r25
    476e:	e1 f7       	brne	.-8      	; 0x4768 <macForwardRoutingPacket+0xe>
    4770:	90 91 45 0c 	lds	r25, 0x0C45	; 0x800c45 <macConfig+0x8>
    4774:	99 23       	and	r25, r25
    4776:	d9 f1       	breq	.+118    	; 0x47ee <macForwardRoutingPacket+0x94>
    4778:	8c 50       	subi	r24, 0x0C	; 12
    477a:	86 95       	lsr	r24
    477c:	e8 2f       	mov	r30, r24
    477e:	f0 e0       	ldi	r31, 0x00	; 0
    4780:	ee 0f       	add	r30, r30
    4782:	ff 1f       	adc	r31, r31
    4784:	ec 53       	subi	r30, 0x3C	; 60
    4786:	f4 4f       	sbci	r31, 0xF4	; 244
    4788:	20 81       	ld	r18, Z
    478a:	31 81       	ldd	r19, Z+1	; 0x01
    478c:	30 93 4f 0c 	sts	0x0C4F, r19	; 0x800c4f <macConfig+0x12>
    4790:	20 93 4e 0c 	sts	0x0C4E, r18	; 0x800c4e <macConfig+0x11>
    4794:	82 30       	cpi	r24, 0x02	; 2
    4796:	58 f1       	brcs	.+86     	; 0x47ee <macForwardRoutingPacket+0x94>
    4798:	81 50       	subi	r24, 0x01	; 1
    479a:	23 e6       	ldi	r18, 0x63	; 99
    479c:	38 e8       	ldi	r19, 0x88	; 136
    479e:	30 93 bd 0b 	sts	0x0BBD, r19	; 0x800bbd <mac_buffer_tx+0x2>
    47a2:	20 93 bc 0b 	sts	0x0BBC, r18	; 0x800bbc <mac_buffer_tx+0x1>
    47a6:	90 91 47 0c 	lds	r25, 0x0C47	; 0x800c47 <macConfig+0xa>
    47aa:	21 e0       	ldi	r18, 0x01	; 1
    47ac:	29 0f       	add	r18, r25
    47ae:	20 93 47 0c 	sts	0x0C47, r18	; 0x800c47 <macConfig+0xa>
    47b2:	90 93 be 0b 	sts	0x0BBE, r25	; 0x800bbe <mac_buffer_tx+0x3>
    47b6:	90 e0       	ldi	r25, 0x00	; 0
    47b8:	fc 01       	movw	r30, r24
    47ba:	ee 0f       	add	r30, r30
    47bc:	ff 1f       	adc	r31, r31
    47be:	ea 53       	subi	r30, 0x3A	; 58
    47c0:	f4 4f       	sbci	r31, 0xF4	; 244
    47c2:	20 81       	ld	r18, Z
    47c4:	31 81       	ldd	r19, Z+1	; 0x01
    47c6:	30 93 c2 0b 	sts	0x0BC2, r19	; 0x800bc2 <mac_buffer_tx+0x7>
    47ca:	20 93 c1 0b 	sts	0x0BC1, r18	; 0x800bc1 <mac_buffer_tx+0x6>
    47ce:	20 91 4a 0c 	lds	r18, 0x0C4A	; 0x800c4a <macConfig+0xd>
    47d2:	30 91 4b 0c 	lds	r19, 0x0C4B	; 0x800c4b <macConfig+0xe>
    47d6:	30 93 c4 0b 	sts	0x0BC4, r19	; 0x800bc4 <mac_buffer_tx+0x9>
    47da:	20 93 c3 0b 	sts	0x0BC3, r18	; 0x800bc3 <mac_buffer_tx+0x8>
    47de:	9b eb       	ldi	r25, 0xBB	; 187
    47e0:	90 93 c5 0b 	sts	0x0BC5, r25	; 0x800bc5 <mac_buffer_tx+0xa>
    47e4:	8b 5f       	subi	r24, 0xFB	; 251
    47e6:	6c eb       	ldi	r22, 0xBC	; 188
    47e8:	7b e0       	ldi	r23, 0x0B	; 11
    47ea:	88 0f       	add	r24, r24
    47ec:	6a ca       	rjmp	.-2860   	; 0x3cc2 <radioSendData>
    47ee:	08 95       	ret

000047f0 <macRouteAssociateResponse>:
    47f0:	80 91 45 0c 	lds	r24, 0x0C45	; 0x800c45 <macConfig+0x8>
    47f4:	88 23       	and	r24, r24
    47f6:	d9 f1       	breq	.+118    	; 0x486e <macRouteAssociateResponse+0x7e>
    47f8:	20 91 44 0b 	lds	r18, 0x0B44	; 0x800b44 <mac_buffer_rx+0xb>
    47fc:	30 91 45 0b 	lds	r19, 0x0B45	; 0x800b45 <mac_buffer_rx+0xc>
    4800:	80 91 4a 0c 	lds	r24, 0x0C4A	; 0x800c4a <macConfig+0xd>
    4804:	90 91 4b 0c 	lds	r25, 0x0C4B	; 0x800c4b <macConfig+0xe>
    4808:	28 17       	cp	r18, r24
    480a:	39 07       	cpc	r19, r25
    480c:	89 f1       	breq	.+98     	; 0x4870 <macRouteAssociateResponse+0x80>
    480e:	22 e8       	ldi	r18, 0x82	; 130
    4810:	e9 e3       	ldi	r30, 0x39	; 57
    4812:	fb e0       	ldi	r31, 0x0B	; 11
    4814:	ab eb       	ldi	r26, 0xBB	; 187
    4816:	bb e0       	ldi	r27, 0x0B	; 11
    4818:	01 90       	ld	r0, Z+
    481a:	0d 92       	st	X+, r0
    481c:	2a 95       	dec	r18
    481e:	e1 f7       	brne	.-8      	; 0x4818 <macRouteAssociateResponse+0x28>
    4820:	20 91 47 0c 	lds	r18, 0x0C47	; 0x800c47 <macConfig+0xa>
    4824:	31 e0       	ldi	r19, 0x01	; 1
    4826:	32 0f       	add	r19, r18
    4828:	30 93 47 0c 	sts	0x0C47, r19	; 0x800c47 <macConfig+0xa>
    482c:	20 93 be 0b 	sts	0x0BBE, r18	; 0x800bbe <mac_buffer_tx+0x3>
    4830:	20 91 4e 0c 	lds	r18, 0x0C4E	; 0x800c4e <macConfig+0x11>
    4834:	30 91 4f 0c 	lds	r19, 0x0C4F	; 0x800c4f <macConfig+0x12>
    4838:	30 93 c2 0b 	sts	0x0BC2, r19	; 0x800bc2 <mac_buffer_tx+0x7>
    483c:	20 93 c1 0b 	sts	0x0BC1, r18	; 0x800bc1 <mac_buffer_tx+0x6>
    4840:	90 93 c4 0b 	sts	0x0BC4, r25	; 0x800bc4 <mac_buffer_tx+0x9>
    4844:	80 93 c3 0b 	sts	0x0BC3, r24	; 0x800bc3 <mac_buffer_tx+0x8>
    4848:	80 91 c6 0b 	lds	r24, 0x0BC6	; 0x800bc6 <mac_buffer_tx+0xb>
    484c:	90 91 c7 0b 	lds	r25, 0x0BC7	; 0x800bc7 <mac_buffer_tx+0xc>
    4850:	e1 dc       	rcall	.-1598   	; 0x4214 <macIsChild>
    4852:	88 23       	and	r24, r24
    4854:	41 f0       	breq	.+16     	; 0x4866 <macRouteAssociateResponse+0x76>
    4856:	80 91 c6 0b 	lds	r24, 0x0BC6	; 0x800bc6 <mac_buffer_tx+0xb>
    485a:	90 91 c7 0b 	lds	r25, 0x0BC7	; 0x800bc7 <mac_buffer_tx+0xc>
    485e:	90 93 c2 0b 	sts	0x0BC2, r25	; 0x800bc2 <mac_buffer_tx+0x7>
    4862:	80 93 c1 0b 	sts	0x0BC1, r24	; 0x800bc1 <mac_buffer_tx+0x6>
    4866:	6c eb       	ldi	r22, 0xBC	; 188
    4868:	7b e0       	ldi	r23, 0x0B	; 11
    486a:	86 e1       	ldi	r24, 0x16	; 22
    486c:	2a ca       	rjmp	.-2988   	; 0x3cc2 <radioSendData>
    486e:	08 95       	ret
    4870:	83 e6       	ldi	r24, 0x63	; 99
    4872:	9c e8       	ldi	r25, 0x8C	; 140
    4874:	90 93 bc 0b 	sts	0x0BBC, r25	; 0x800bbc <mac_buffer_tx+0x1>
    4878:	80 93 bb 0b 	sts	0x0BBB, r24	; 0x800bbb <mac_buffer_tx>
    487c:	80 91 47 0c 	lds	r24, 0x0C47	; 0x800c47 <macConfig+0xa>
    4880:	91 e0       	ldi	r25, 0x01	; 1
    4882:	98 0f       	add	r25, r24
    4884:	90 93 47 0c 	sts	0x0C47, r25	; 0x800c47 <macConfig+0xa>
    4888:	80 93 bd 0b 	sts	0x0BBD, r24	; 0x800bbd <mac_buffer_tx+0x2>
    488c:	80 91 48 0c 	lds	r24, 0x0C48	; 0x800c48 <macConfig+0xb>
    4890:	90 91 49 0c 	lds	r25, 0x0C49	; 0x800c49 <macConfig+0xc>
    4894:	90 93 bf 0b 	sts	0x0BBF, r25	; 0x800bbf <mac_buffer_tx+0x4>
    4898:	80 93 be 0b 	sts	0x0BBE, r24	; 0x800bbe <mac_buffer_tx+0x3>
    489c:	80 91 46 0b 	lds	r24, 0x0B46	; 0x800b46 <mac_buffer_rx+0xd>
    48a0:	80 93 c0 0b 	sts	0x0BC0, r24	; 0x800bc0 <mac_buffer_tx+0x5>
    48a4:	80 91 47 0b 	lds	r24, 0x0B47	; 0x800b47 <mac_buffer_rx+0xe>
    48a8:	80 93 c1 0b 	sts	0x0BC1, r24	; 0x800bc1 <mac_buffer_tx+0x6>
    48ac:	80 91 48 0b 	lds	r24, 0x0B48	; 0x800b48 <mac_buffer_rx+0xf>
    48b0:	80 93 c2 0b 	sts	0x0BC2, r24	; 0x800bc2 <mac_buffer_tx+0x7>
    48b4:	80 91 49 0b 	lds	r24, 0x0B49	; 0x800b49 <mac_buffer_rx+0x10>
    48b8:	80 93 c3 0b 	sts	0x0BC3, r24	; 0x800bc3 <mac_buffer_tx+0x8>
    48bc:	80 91 4a 0b 	lds	r24, 0x0B4A	; 0x800b4a <mac_buffer_rx+0x11>
    48c0:	80 93 c4 0b 	sts	0x0BC4, r24	; 0x800bc4 <mac_buffer_tx+0x9>
    48c4:	80 91 4b 0b 	lds	r24, 0x0B4B	; 0x800b4b <mac_buffer_rx+0x12>
    48c8:	80 93 c5 0b 	sts	0x0BC5, r24	; 0x800bc5 <mac_buffer_tx+0xa>
    48cc:	80 91 4c 0b 	lds	r24, 0x0B4C	; 0x800b4c <mac_buffer_rx+0x13>
    48d0:	80 93 c6 0b 	sts	0x0BC6, r24	; 0x800bc6 <mac_buffer_tx+0xb>
    48d4:	80 91 4d 0b 	lds	r24, 0x0B4D	; 0x800b4d <mac_buffer_rx+0x14>
    48d8:	80 93 c7 0b 	sts	0x0BC7, r24	; 0x800bc7 <mac_buffer_tx+0xc>
    48dc:	30 93 c9 0b 	sts	0x0BC9, r19	; 0x800bc9 <mac_buffer_tx+0xe>
    48e0:	20 93 c8 0b 	sts	0x0BC8, r18	; 0x800bc8 <mac_buffer_tx+0xd>
    48e4:	82 e0       	ldi	r24, 0x02	; 2
    48e6:	80 93 ca 0b 	sts	0x0BCA, r24	; 0x800bca <mac_buffer_tx+0xf>
    48ea:	80 91 4e 0b 	lds	r24, 0x0B4E	; 0x800b4e <mac_buffer_rx+0x15>
    48ee:	90 91 4f 0b 	lds	r25, 0x0B4F	; 0x800b4f <mac_buffer_rx+0x16>
    48f2:	90 93 cc 0b 	sts	0x0BCC, r25	; 0x800bcc <mac_buffer_tx+0x11>
    48f6:	80 93 cb 0b 	sts	0x0BCB, r24	; 0x800bcb <mac_buffer_tx+0x10>
    48fa:	9f dc       	rcall	.-1730   	; 0x423a <macAddChild>
    48fc:	6b eb       	ldi	r22, 0xBB	; 187
    48fe:	7b e0       	ldi	r23, 0x0B	; 11
    4900:	82 e1       	ldi	r24, 0x12	; 18
    4902:	df c9       	rjmp	.-3138   	; 0x3cc2 <radioSendData>

00004904 <macRouteAssociateRequest>:
    4904:	cf 93       	push	r28
    4906:	df 93       	push	r29
    4908:	cd b7       	in	r28, 0x3d	; 61
    490a:	de b7       	in	r29, 0x3e	; 62
    490c:	65 97       	sbiw	r28, 0x15	; 21
    490e:	0f b6       	in	r0, 0x3f	; 63
    4910:	f8 94       	cli
    4912:	de bf       	out	0x3e, r29	; 62
    4914:	0f be       	out	0x3f, r0	; 63
    4916:	cd bf       	out	0x3d, r28	; 61
    4918:	80 91 3b 0b 	lds	r24, 0x0B3B	; 0x800b3b <mac_buffer_rx+0x2>
    491c:	88 3c       	cpi	r24, 0xC8	; 200
    491e:	09 f4       	brne	.+2      	; 0x4922 <macRouteAssociateRequest+0x1e>
    4920:	62 c0       	rjmp	.+196    	; 0x49e6 <macRouteAssociateRequest+0xe2>
    4922:	83 e6       	ldi	r24, 0x63	; 99
    4924:	98 e8       	ldi	r25, 0x88	; 136
    4926:	90 93 bc 0b 	sts	0x0BBC, r25	; 0x800bbc <mac_buffer_tx+0x1>
    492a:	80 93 bb 0b 	sts	0x0BBB, r24	; 0x800bbb <mac_buffer_tx>
    492e:	80 91 47 0c 	lds	r24, 0x0C47	; 0x800c47 <macConfig+0xa>
    4932:	91 e0       	ldi	r25, 0x01	; 1
    4934:	98 0f       	add	r25, r24
    4936:	90 93 47 0c 	sts	0x0C47, r25	; 0x800c47 <macConfig+0xa>
    493a:	80 93 bd 0b 	sts	0x0BBD, r24	; 0x800bbd <mac_buffer_tx+0x2>
    493e:	80 91 48 0c 	lds	r24, 0x0C48	; 0x800c48 <macConfig+0xb>
    4942:	90 91 49 0c 	lds	r25, 0x0C49	; 0x800c49 <macConfig+0xc>
    4946:	90 93 bf 0b 	sts	0x0BBF, r25	; 0x800bbf <mac_buffer_tx+0x4>
    494a:	80 93 be 0b 	sts	0x0BBE, r24	; 0x800bbe <mac_buffer_tx+0x3>
    494e:	80 91 4c 0c 	lds	r24, 0x0C4C	; 0x800c4c <macConfig+0xf>
    4952:	90 91 4d 0c 	lds	r25, 0x0C4D	; 0x800c4d <macConfig+0x10>
    4956:	90 93 c1 0b 	sts	0x0BC1, r25	; 0x800bc1 <mac_buffer_tx+0x6>
    495a:	80 93 c0 0b 	sts	0x0BC0, r24	; 0x800bc0 <mac_buffer_tx+0x5>
    495e:	80 91 4a 0c 	lds	r24, 0x0C4A	; 0x800c4a <macConfig+0xd>
    4962:	90 91 4b 0c 	lds	r25, 0x0C4B	; 0x800c4b <macConfig+0xe>
    4966:	90 93 c3 0b 	sts	0x0BC3, r25	; 0x800bc3 <mac_buffer_tx+0x8>
    496a:	80 93 c2 0b 	sts	0x0BC2, r24	; 0x800bc2 <mac_buffer_tx+0x7>
    496e:	81 e0       	ldi	r24, 0x01	; 1
    4970:	80 93 c4 0b 	sts	0x0BC4, r24	; 0x800bc4 <mac_buffer_tx+0x9>
    4974:	80 91 44 0b 	lds	r24, 0x0B44	; 0x800b44 <mac_buffer_rx+0xb>
    4978:	90 91 45 0b 	lds	r25, 0x0B45	; 0x800b45 <mac_buffer_rx+0xc>
    497c:	90 93 c6 0b 	sts	0x0BC6, r25	; 0x800bc6 <mac_buffer_tx+0xb>
    4980:	80 93 c5 0b 	sts	0x0BC5, r24	; 0x800bc5 <mac_buffer_tx+0xa>
    4984:	80 91 46 0b 	lds	r24, 0x0B46	; 0x800b46 <mac_buffer_rx+0xd>
    4988:	80 93 c7 0b 	sts	0x0BC7, r24	; 0x800bc7 <mac_buffer_tx+0xc>
    498c:	80 91 47 0b 	lds	r24, 0x0B47	; 0x800b47 <mac_buffer_rx+0xe>
    4990:	80 93 c8 0b 	sts	0x0BC8, r24	; 0x800bc8 <mac_buffer_tx+0xd>
    4994:	80 91 48 0b 	lds	r24, 0x0B48	; 0x800b48 <mac_buffer_rx+0xf>
    4998:	80 93 c9 0b 	sts	0x0BC9, r24	; 0x800bc9 <mac_buffer_tx+0xe>
    499c:	80 91 49 0b 	lds	r24, 0x0B49	; 0x800b49 <mac_buffer_rx+0x10>
    49a0:	80 93 ca 0b 	sts	0x0BCA, r24	; 0x800bca <mac_buffer_tx+0xf>
    49a4:	80 91 4a 0b 	lds	r24, 0x0B4A	; 0x800b4a <mac_buffer_rx+0x11>
    49a8:	80 93 cb 0b 	sts	0x0BCB, r24	; 0x800bcb <mac_buffer_tx+0x10>
    49ac:	80 91 4b 0b 	lds	r24, 0x0B4B	; 0x800b4b <mac_buffer_rx+0x12>
    49b0:	80 93 cc 0b 	sts	0x0BCC, r24	; 0x800bcc <mac_buffer_tx+0x11>
    49b4:	80 91 4c 0b 	lds	r24, 0x0B4C	; 0x800b4c <mac_buffer_rx+0x13>
    49b8:	80 93 cd 0b 	sts	0x0BCD, r24	; 0x800bcd <mac_buffer_tx+0x12>
    49bc:	80 91 4d 0b 	lds	r24, 0x0B4D	; 0x800b4d <mac_buffer_rx+0x14>
    49c0:	80 93 ce 0b 	sts	0x0BCE, r24	; 0x800bce <mac_buffer_tx+0x13>
    49c4:	80 91 4e 0b 	lds	r24, 0x0B4E	; 0x800b4e <mac_buffer_rx+0x15>
    49c8:	80 93 cf 0b 	sts	0x0BCF, r24	; 0x800bcf <mac_buffer_tx+0x14>
    49cc:	6b eb       	ldi	r22, 0xBB	; 187
    49ce:	7b e0       	ldi	r23, 0x0B	; 11
    49d0:	85 e1       	ldi	r24, 0x15	; 21
    49d2:	77 d9       	rcall	.-3346   	; 0x3cc2 <radioSendData>
    49d4:	65 96       	adiw	r28, 0x15	; 21
    49d6:	0f b6       	in	r0, 0x3f	; 63
    49d8:	f8 94       	cli
    49da:	de bf       	out	0x3e, r29	; 62
    49dc:	0f be       	out	0x3f, r0	; 63
    49de:	cd bf       	out	0x3d, r28	; 61
    49e0:	df 91       	pop	r29
    49e2:	cf 91       	pop	r28
    49e4:	08 95       	ret
    49e6:	83 e6       	ldi	r24, 0x63	; 99
    49e8:	98 e8       	ldi	r25, 0x88	; 136
    49ea:	9a 83       	std	Y+2, r25	; 0x02
    49ec:	89 83       	std	Y+1, r24	; 0x01
    49ee:	80 91 47 0c 	lds	r24, 0x0C47	; 0x800c47 <macConfig+0xa>
    49f2:	91 e0       	ldi	r25, 0x01	; 1
    49f4:	98 0f       	add	r25, r24
    49f6:	90 93 47 0c 	sts	0x0C47, r25	; 0x800c47 <macConfig+0xa>
    49fa:	8b 83       	std	Y+3, r24	; 0x03
    49fc:	80 91 48 0c 	lds	r24, 0x0C48	; 0x800c48 <macConfig+0xb>
    4a00:	90 91 49 0c 	lds	r25, 0x0C49	; 0x800c49 <macConfig+0xc>
    4a04:	9d 83       	std	Y+5, r25	; 0x05
    4a06:	8c 83       	std	Y+4, r24	; 0x04
    4a08:	80 91 4c 0c 	lds	r24, 0x0C4C	; 0x800c4c <macConfig+0xf>
    4a0c:	90 91 4d 0c 	lds	r25, 0x0C4D	; 0x800c4d <macConfig+0x10>
    4a10:	9f 83       	std	Y+7, r25	; 0x07
    4a12:	8e 83       	std	Y+6, r24	; 0x06
    4a14:	80 91 4a 0c 	lds	r24, 0x0C4A	; 0x800c4a <macConfig+0xd>
    4a18:	90 91 4b 0c 	lds	r25, 0x0C4B	; 0x800c4b <macConfig+0xe>
    4a1c:	99 87       	std	Y+9, r25	; 0x09
    4a1e:	88 87       	std	Y+8, r24	; 0x08
    4a20:	81 e0       	ldi	r24, 0x01	; 1
    4a22:	8a 87       	std	Y+10, r24	; 0x0a
    4a24:	80 91 4a 0b 	lds	r24, 0x0B4A	; 0x800b4a <mac_buffer_rx+0x11>
    4a28:	90 91 4b 0b 	lds	r25, 0x0B4B	; 0x800b4b <mac_buffer_rx+0x12>
    4a2c:	9c 87       	std	Y+12, r25	; 0x0c
    4a2e:	8b 87       	std	Y+11, r24	; 0x0b
    4a30:	80 91 41 0b 	lds	r24, 0x0B41	; 0x800b41 <mac_buffer_rx+0x8>
    4a34:	8d 87       	std	Y+13, r24	; 0x0d
    4a36:	80 91 42 0b 	lds	r24, 0x0B42	; 0x800b42 <mac_buffer_rx+0x9>
    4a3a:	8e 87       	std	Y+14, r24	; 0x0e
    4a3c:	80 91 43 0b 	lds	r24, 0x0B43	; 0x800b43 <mac_buffer_rx+0xa>
    4a40:	8f 87       	std	Y+15, r24	; 0x0f
    4a42:	80 91 44 0b 	lds	r24, 0x0B44	; 0x800b44 <mac_buffer_rx+0xb>
    4a46:	88 8b       	std	Y+16, r24	; 0x10
    4a48:	80 91 45 0b 	lds	r24, 0x0B45	; 0x800b45 <mac_buffer_rx+0xc>
    4a4c:	89 8b       	std	Y+17, r24	; 0x11
    4a4e:	80 91 46 0b 	lds	r24, 0x0B46	; 0x800b46 <mac_buffer_rx+0xd>
    4a52:	8a 8b       	std	Y+18, r24	; 0x12
    4a54:	80 91 47 0b 	lds	r24, 0x0B47	; 0x800b47 <mac_buffer_rx+0xe>
    4a58:	8b 8b       	std	Y+19, r24	; 0x13
    4a5a:	80 91 48 0b 	lds	r24, 0x0B48	; 0x800b48 <mac_buffer_rx+0xf>
    4a5e:	8c 8b       	std	Y+20, r24	; 0x14
    4a60:	80 91 4c 0b 	lds	r24, 0x0B4C	; 0x800b4c <mac_buffer_rx+0x13>
    4a64:	8d 8b       	std	Y+21, r24	; 0x15
    4a66:	be 01       	movw	r22, r28
    4a68:	6f 5f       	subi	r22, 0xFF	; 255
    4a6a:	7f 4f       	sbci	r23, 0xFF	; 255
    4a6c:	85 e1       	ldi	r24, 0x15	; 21
    4a6e:	29 d9       	rcall	.-3502   	; 0x3cc2 <radioSendData>
    4a70:	b1 cf       	rjmp	.-158    	; 0x49d4 <macRouteAssociateRequest+0xd0>

00004a72 <macRouteData>:
    {
        ftData *frame = (ftData *)(mac_buffer_tx+1);
        u8 holdFlag=0;

        // Copy RX to TX buffer
        macCopyRxToTx();
    4a72:	82 e8       	ldi	r24, 0x82	; 130
    4a74:	e9 e3       	ldi	r30, 0x39	; 57
    4a76:	fb e0       	ldi	r31, 0x0B	; 11
    4a78:	ab eb       	ldi	r26, 0xBB	; 187
    4a7a:	bb e0       	ldi	r27, 0x0B	; 11
    4a7c:	01 90       	ld	r0, Z+
    4a7e:	0d 92       	st	X+, r0
    4a80:	8a 95       	dec	r24
    4a82:	e1 f7       	brne	.-8      	; 0x4a7c <macRouteData+0xa>

        Led1_on();
    4a84:	a0 9a       	sbi	0x14, 0	; 20
        macSetAlarm(LED_DELAY,ledoff1);
    4a86:	65 ea       	ldi	r22, 0xA5	; 165
    4a88:	71 e0       	ldi	r23, 0x01	; 1
    4a8a:	8a e0       	ldi	r24, 0x0A	; 10
    4a8c:	90 e0       	ldi	r25, 0x00	; 0
    4a8e:	75 d1       	rcall	.+746    	; 0x4d7a <macSetAlarm>

        // See if this frame is in the child table
        if (macIsChild(frame->finalDestAddr))
    4a90:	80 91 c5 0b 	lds	r24, 0x0BC5	; 0x800bc5 <mac_buffer_tx+0xa>
    4a94:	90 91 c6 0b 	lds	r25, 0x0BC6	; 0x800bc6 <mac_buffer_tx+0xb>
    4a98:	bd db       	rcall	.-2182   	; 0x4214 <macIsChild>
    4a9a:	88 23       	and	r24, r24
    4a9c:	01 f1       	breq	.+64     	; 0x4ade <macRouteData+0x6c>
        {
            // send frame to child
            frame->seq = macConfig.dsn++;
    4a9e:	80 91 47 0c 	lds	r24, 0x0C47	; 0x800c47 <macConfig+0xa>
    4aa2:	91 e0       	ldi	r25, 0x01	; 1
    4aa4:	98 0f       	add	r25, r24
    4aa6:	90 93 47 0c 	sts	0x0C47, r25	; 0x800c47 <macConfig+0xa>
    4aaa:	80 93 be 0b 	sts	0x0BBE, r24	; 0x800bbe <mac_buffer_tx+0x3>
            frame->destAddr = frame->finalDestAddr;
    4aae:	80 91 c5 0b 	lds	r24, 0x0BC5	; 0x800bc5 <mac_buffer_tx+0xa>
    4ab2:	90 91 c6 0b 	lds	r25, 0x0BC6	; 0x800bc6 <mac_buffer_tx+0xb>
    4ab6:	90 93 c2 0b 	sts	0x0BC2, r25	; 0x800bc2 <mac_buffer_tx+0x7>
    4aba:	80 93 c1 0b 	sts	0x0BC1, r24	; 0x800bc1 <mac_buffer_tx+0x6>
            frame->srcAddr = macConfig.shortAddress;
    4abe:	20 91 4a 0c 	lds	r18, 0x0C4A	; 0x800c4a <macConfig+0xd>
    4ac2:	30 91 4b 0c 	lds	r19, 0x0C4B	; 0x800c4b <macConfig+0xe>
    4ac6:	30 93 c4 0b 	sts	0x0BC4, r19	; 0x800bc4 <mac_buffer_tx+0x9>
    4aca:	20 93 c3 0b 	sts	0x0BC3, r18	; 0x800bc3 <mac_buffer_tx+0x8>
        if (holdFlag)
                macHoldFrame(frame->finalDestAddr, (u8*)frame, (u8)*mac_buffer_tx - 2);
        else
        {
            // Make sure we're not broadcasting frames
            if (frame->destAddr != BROADCASTADDR)
    4ace:	01 96       	adiw	r24, 0x01	; 1
    4ad0:	39 f1       	breq	.+78     	; 0x4b20 <macRouteData+0xae>
                // Send the frame along (subtract 2 bytes from length for checksum length)
                radioSendData(*mac_buffer_tx - 2, (u8*)frame);
    4ad2:	80 91 bb 0b 	lds	r24, 0x0BBB	; 0x800bbb <mac_buffer_tx>
    4ad6:	6c eb       	ldi	r22, 0xBC	; 188
    4ad8:	7b e0       	ldi	r23, 0x0B	; 11
    4ada:	82 50       	subi	r24, 0x02	; 2
    4adc:	f2 c8       	rjmp	.-3612   	; 0x3cc2 <radioSendData>
                }
            }
            else if (NODETYPE == ROUTER)
            {
                // See if we should route up or down
                if (frame->srcAddr == macConfig.parentShortAddress)
    4ade:	80 91 4c 0c 	lds	r24, 0x0C4C	; 0x800c4c <macConfig+0xf>
    4ae2:	90 91 4d 0c 	lds	r25, 0x0C4D	; 0x800c4d <macConfig+0x10>
    4ae6:	20 91 c3 0b 	lds	r18, 0x0BC3	; 0x800bc3 <mac_buffer_tx+0x8>
    4aea:	30 91 c4 0b 	lds	r19, 0x0BC4	; 0x800bc4 <mac_buffer_tx+0x9>
    4aee:	28 17       	cp	r18, r24
    4af0:	39 07       	cpc	r19, r25
    4af2:	b9 f0       	breq	.+46     	; 0x4b22 <macRouteData+0xb0>
                    debugMsgHex(macConfig.lastRoute);
                }
                else
                {
                    // this frame is from child, send up the chain
                    frame->seq = macConfig.dsn++;
    4af4:	20 91 47 0c 	lds	r18, 0x0C47	; 0x800c47 <macConfig+0xa>
    4af8:	31 e0       	ldi	r19, 0x01	; 1
    4afa:	32 0f       	add	r19, r18
    4afc:	30 93 47 0c 	sts	0x0C47, r19	; 0x800c47 <macConfig+0xa>
    4b00:	20 93 be 0b 	sts	0x0BBE, r18	; 0x800bbe <mac_buffer_tx+0x3>
                    frame->destAddr = macConfig.parentShortAddress;
    4b04:	90 93 c2 0b 	sts	0x0BC2, r25	; 0x800bc2 <mac_buffer_tx+0x7>
    4b08:	80 93 c1 0b 	sts	0x0BC1, r24	; 0x800bc1 <mac_buffer_tx+0x6>
                    frame->srcAddr = macConfig.shortAddress;
    4b0c:	20 91 4a 0c 	lds	r18, 0x0C4A	; 0x800c4a <macConfig+0xd>
    4b10:	30 91 4b 0c 	lds	r19, 0x0C4B	; 0x800c4b <macConfig+0xe>
    4b14:	30 93 c4 0b 	sts	0x0BC4, r19	; 0x800bc4 <mac_buffer_tx+0x9>
    4b18:	20 93 c3 0b 	sts	0x0BC3, r18	; 0x800bc3 <mac_buffer_tx+0x8>
        if (holdFlag)
                macHoldFrame(frame->finalDestAddr, (u8*)frame, (u8)*mac_buffer_tx - 2);
        else
        {
            // Make sure we're not broadcasting frames
            if (frame->destAddr != BROADCASTADDR)
    4b1c:	01 96       	adiw	r24, 0x01	; 1
    4b1e:	c9 f6       	brne	.-78     	; 0x4ad2 <macRouteData+0x60>
    4b20:	08 95       	ret
            {
                // See if we should route up or down
                if (frame->srcAddr == macConfig.parentShortAddress)
                {
                    // this frame is from parent, send it down default route
                    frame->seq = macConfig.dsn++;
    4b22:	80 91 47 0c 	lds	r24, 0x0C47	; 0x800c47 <macConfig+0xa>
    4b26:	91 e0       	ldi	r25, 0x01	; 1
    4b28:	98 0f       	add	r25, r24
    4b2a:	90 93 47 0c 	sts	0x0C47, r25	; 0x800c47 <macConfig+0xa>
    4b2e:	80 93 be 0b 	sts	0x0BBE, r24	; 0x800bbe <mac_buffer_tx+0x3>
                    frame->destAddr = macConfig.lastRoute;
    4b32:	80 91 4e 0c 	lds	r24, 0x0C4E	; 0x800c4e <macConfig+0x11>
    4b36:	90 91 4f 0c 	lds	r25, 0x0C4F	; 0x800c4f <macConfig+0x12>
    4b3a:	90 93 c2 0b 	sts	0x0BC2, r25	; 0x800bc2 <mac_buffer_tx+0x7>
    4b3e:	80 93 c1 0b 	sts	0x0BC1, r24	; 0x800bc1 <mac_buffer_tx+0x6>
                    frame->srcAddr = macConfig.shortAddress;
    4b42:	20 91 4a 0c 	lds	r18, 0x0C4A	; 0x800c4a <macConfig+0xd>
    4b46:	30 91 4b 0c 	lds	r19, 0x0C4B	; 0x800c4b <macConfig+0xe>
    4b4a:	30 93 c4 0b 	sts	0x0BC4, r19	; 0x800bc4 <mac_buffer_tx+0x9>
    4b4e:	20 93 c3 0b 	sts	0x0BC3, r18	; 0x800bc3 <mac_buffer_tx+0x8>
    4b52:	bd cf       	rjmp	.-134    	; 0x4ace <macRouteData+0x5c>

00004b54 <macSendRoutingPacket>:

        // Set the flag to say we sent a routing packet.
        return 1;
    }
    return 0;
}
    4b54:	80 e0       	ldi	r24, 0x00	; 0
    4b56:	08 95       	ret

00004b58 <store_pandescriptors>:
   @return The channel set by @ref macSetScanChannel().
*/
u8 macGetScanChannel(void)
{
    return scanChannel;
}
    4b58:	cf 93       	push	r28
    4b5a:	df 93       	push	r29
    4b5c:	e9 e3       	ldi	r30, 0x39	; 57
    4b5e:	fb e0       	ldi	r31, 0x0B	; 11
    4b60:	20 91 b9 0b 	lds	r18, 0x0BB9	; 0x800bb9 <mac_buffer_rx+0x80>
    4b64:	c2 eb       	ldi	r28, 0xB2	; 178
    4b66:	dc e0       	ldi	r29, 0x0C	; 12
    4b68:	81 81       	ldd	r24, Z+1	; 0x01
    4b6a:	92 81       	ldd	r25, Z+2	; 0x02
    4b6c:	84 e0       	ldi	r24, 0x04	; 4
    4b6e:	98 9f       	mul	r25, r24
    4b70:	81 2d       	mov	r24, r1
    4b72:	99 27       	eor	r25, r25
    4b74:	11 24       	eor	r1, r1
    4b76:	88 83       	st	Y, r24
    4b78:	84 81       	ldd	r24, Z+4	; 0x04
    4b7a:	95 81       	ldd	r25, Z+5	; 0x05
    4b7c:	9a 83       	std	Y+2, r25	; 0x02
    4b7e:	89 83       	std	Y+1, r24	; 0x01
    4b80:	86 81       	ldd	r24, Z+6	; 0x06
    4b82:	97 81       	ldd	r25, Z+7	; 0x07
    4b84:	9c 83       	std	Y+4, r25	; 0x04
    4b86:	8b 83       	std	Y+3, r24	; 0x03
    4b88:	83 85       	ldd	r24, Z+11	; 0x0b
    4b8a:	89 87       	std	Y+9, r24	; 0x09
    4b8c:	80 91 51 0c 	lds	r24, 0x0C51	; 0x800c51 <macConfig+0x14>
    4b90:	81 50       	subi	r24, 0x01	; 1
    4b92:	8d 83       	std	Y+5, r24	; 0x05
    4b94:	1e 82       	std	Y+6, r1	; 0x06
    4b96:	2a 87       	std	Y+10, r18	; 0x0a
    4b98:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <radioGetSavedRssiValue>
    4b9c:	8b 87       	std	Y+11, r24	; 0x0b
    4b9e:	df 91       	pop	r29
    4ba0:	cf 91       	pop	r28
    4ba2:	08 95       	ret

00004ba4 <macIsScanning>:
    4ba4:	80 91 67 06 	lds	r24, 0x0667	; 0x800667 <scanInProcess>
    4ba8:	08 95       	ret

00004baa <mac_logPanDescriptors>:
    In @ref DEMO mode, the only criteria used is to pick the parent
    with the lowest RSSI reading.  This is done to encourage the
    formation of a multi-hop network for test and demo purposes.
*/
void mac_logPanDescriptors(void)
{
    4baa:	cf 93       	push	r28
    ftBeacon *frame = (ftBeacon *)(mac_buffer_rx+1);
    u8 lqi = ((rx_frame_t *)mac_buffer_rx)->lqi;
    4bac:	90 91 b9 0b 	lds	r25, 0x0BB9	; 0x800bb9 <mac_buffer_rx+0x80>

    // Swap frame
    frame->panid = ntohs_16(frame->panid);
    frame->addr = ntohs_16(frame->addr);
    frame->superFrame = ntohs_16(frame->superFrame);
    4bb0:	20 91 41 0b 	lds	r18, 0x0B41	; 0x800b41 <mac_buffer_rx+0x8>
    4bb4:	30 91 42 0b 	lds	r19, 0x0B42	; 0x800b42 <mac_buffer_rx+0x9>


    if (!scanInProcess)
    4bb8:	80 91 67 06 	lds	r24, 0x0667	; 0x800667 <scanInProcess>
    4bbc:	88 23       	and	r24, r24
    4bbe:	21 f0       	breq	.+8      	; 0x4bc8 <mac_logPanDescriptors+0x1e>
        return;
    if (frame->netID != 6)
    4bc0:	80 91 43 0b 	lds	r24, 0x0B43	; 0x800b43 <mac_buffer_rx+0xa>
    4bc4:	86 30       	cpi	r24, 0x06	; 6
    4bc6:	11 f0       	breq	.+4      	; 0x4bcc <mac_logPanDescriptors+0x22>
            {
                store_pandescriptors();
            }
        }
    }
}
    4bc8:	cf 91       	pop	r28
    4bca:	08 95       	ret
        energy.energy[energy.currentChannel] += 500;
    }
    else  // Router and end nodes
    {
        // Check the Beacon frame Superframe spec value.
        u16 previous_superframe = panDescriptor.superFrameSpec.superframe_data;
    4bcc:	40 91 b9 0c 	lds	r20, 0x0CB9	; 0x800cb9 <panDescriptor+0x7>
    4bd0:	50 91 ba 0c 	lds	r21, 0x0CBA	; 0x800cba <panDescriptor+0x8>
        panDescriptor.superFrameSpec.superframe_data = htons_16(frame->superFrame);
    4bd4:	30 93 ba 0c 	sts	0x0CBA, r19	; 0x800cba <panDescriptor+0x8>
    4bd8:	20 93 b9 0c 	sts	0x0CB9, r18	; 0x800cb9 <panDescriptor+0x7>

        // Determine if association permit is true. We're looking for false.
        if(panDescriptor.superFrameSpec.superframe_struct.association_permit)
    4bdc:	80 91 ba 0c 	lds	r24, 0x0CBA	; 0x800cba <panDescriptor+0x8>
    4be0:	87 fd       	sbrc	r24, 7
    4be2:	16 c0       	rjmp	.+44     	; 0x4c10 <mac_logPanDescriptors+0x66>
            }
        }
        else
        {
            // Determine if the Beacon LQI value is stronger than the previous scan.
            if(panDescriptor.lqi < lqi)
    4be4:	80 91 bc 0c 	lds	r24, 0x0CBC	; 0x800cbc <panDescriptor+0xa>
    4be8:	89 17       	cp	r24, r25
    4bea:	80 f0       	brcs	.+32     	; 0x4c0c <mac_logPanDescriptors+0x62>
            {
                store_pandescriptors();
            }
            // If LQI is equal to previous stored, check for the least amount of hops to the coord.
            else if((panDescriptor.lqi == lqi)
    4bec:	98 13       	cpse	r25, r24
    4bee:	ec cf       	rjmp	.-40     	; 0x4bc8 <mac_logPanDescriptors+0x1e>
                    && (panDescriptor.hopsToCoord > frame->hops))
    4bf0:	90 91 bb 0c 	lds	r25, 0x0CBB	; 0x800cbb <panDescriptor+0x9>
    4bf4:	80 91 44 0b 	lds	r24, 0x0B44	; 0x800b44 <mac_buffer_rx+0xb>
    4bf8:	89 17       	cp	r24, r25
    4bfa:	40 f0       	brcs	.+16     	; 0x4c0c <mac_logPanDescriptors+0x62>
            {
                store_pandescriptors();
            }
            // If LQI and hops are equal to the previous stored, check for the best RSSI value.
            else if((panDescriptor.lqi == lqi)
                    && (panDescriptor.hopsToCoord == frame->hops)
    4bfc:	98 13       	cpse	r25, r24
    4bfe:	e4 cf       	rjmp	.-56     	; 0x4bc8 <mac_logPanDescriptors+0x1e>
                    && (panDescriptor.rssi < radioGetSavedRssiValue()))
    4c00:	c0 91 bd 0c 	lds	r28, 0x0CBD	; 0x800cbd <panDescriptor+0xb>
    4c04:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <radioGetSavedRssiValue>
    4c08:	c8 17       	cp	r28, r24
    4c0a:	f0 f6       	brcc	.-68     	; 0x4bc8 <mac_logPanDescriptors+0x1e>
            {
                store_pandescriptors();
            }
        }
    }
}
    4c0c:	cf 91       	pop	r28
        else
        {
            // Determine if the Beacon LQI value is stronger than the previous scan.
            if(panDescriptor.lqi < lqi)
            {
                store_pandescriptors();
    4c0e:	a4 cf       	rjmp	.-184    	; 0x4b58 <store_pandescriptors>
        panDescriptor.superFrameSpec.superframe_data = htons_16(frame->superFrame);

        // Determine if association permit is true. We're looking for false.
        if(panDescriptor.superFrameSpec.superframe_struct.association_permit)
        {
            panDescriptor.superFrameSpec.superframe_data = previous_superframe;
    4c10:	50 93 ba 0c 	sts	0x0CBA, r21	; 0x800cba <panDescriptor+0x8>
    4c14:	40 93 b9 0c 	sts	0x0CB9, r20	; 0x800cb9 <panDescriptor+0x7>
            return;
    4c18:	d7 cf       	rjmp	.-82     	; 0x4bc8 <mac_logPanDescriptors+0x1e>

00004c1a <mac_scanConfirm>:
    @brief Trigger a call to @ref appScanConfirm(), since the scanning
    process is done.  If at least one valid beacon was received, then signal that
    success to the application.
*/
void mac_scanConfirm(void)
{
    4c1a:	cf 93       	push	r28
    // logicalChannel is used as flag to show that we received a valid beacon
    u8 gotbeacon = (panDescriptor.logicalChannel != 0xff);
    4c1c:	c1 e0       	ldi	r28, 0x01	; 1
    4c1e:	80 91 b7 0c 	lds	r24, 0x0CB7	; 0x800cb7 <panDescriptor+0x5>
    4c22:	8f 3f       	cpi	r24, 0xFF	; 255
    4c24:	e9 f0       	breq	.+58     	; 0x4c60 <mac_scanConfirm+0x46>

    if (gotbeacon)
    {
        // Save the panDescriptor data to the PIB's.
        macConfig.panId = panDescriptor.coorPANId;
    4c26:	80 91 b3 0c 	lds	r24, 0x0CB3	; 0x800cb3 <panDescriptor+0x1>
    4c2a:	90 91 b4 0c 	lds	r25, 0x0CB4	; 0x800cb4 <panDescriptor+0x2>
    4c2e:	90 93 49 0c 	sts	0x0C49, r25	; 0x800c49 <macConfig+0xc>
    4c32:	80 93 48 0c 	sts	0x0C48, r24	; 0x800c48 <macConfig+0xb>
        macConfig.parentShortAddress = panDescriptor.coordAddr;
    4c36:	20 91 b5 0c 	lds	r18, 0x0CB5	; 0x800cb5 <panDescriptor+0x3>
    4c3a:	30 91 b6 0c 	lds	r19, 0x0CB6	; 0x800cb6 <panDescriptor+0x4>
    4c3e:	30 93 4d 0c 	sts	0x0C4D, r19	; 0x800c4d <macConfig+0x10>
    4c42:	20 93 4c 0c 	sts	0x0C4C, r18	; 0x800c4c <macConfig+0xf>

        // Need to reset the PAN ID in the radio.
        radioSetPanId(macConfig.panId);
    4c46:	86 d8       	rcall	.-3828   	; 0x3d54 <radioSetPanId>

        macSetOperatingChannel(panDescriptor.logicalChannel);
    4c48:	80 91 b7 0c 	lds	r24, 0x0CB7	; 0x800cb7 <panDescriptor+0x5>
    4c4c:	88 da       	rcall	.-2800   	; 0x415e <macSetOperatingChannel>

        // We are one hop more than our (prospective) parent
        macConfig.hopsToCoord = panDescriptor.hopsToCoord + 1;
    4c4e:	80 91 bb 0c 	lds	r24, 0x0CBB	; 0x800cbb <panDescriptor+0x9>
    4c52:	8f 5f       	subi	r24, 0xFF	; 255
    4c54:	80 93 50 0c 	sts	0x0C50, r24	; 0x800c50 <macConfig+0x13>
    }
    // Confirm the scan, only if we have a valid coordinator
    appScanConfirm(gotbeacon);
    4c58:	8c 2f       	mov	r24, r28
}
    4c5a:	cf 91       	pop	r28

        // We are one hop more than our (prospective) parent
        macConfig.hopsToCoord = panDescriptor.hopsToCoord + 1;
    }
    // Confirm the scan, only if we have a valid coordinator
    appScanConfirm(gotbeacon);
    4c5c:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <appScanConfirm>
    success to the application.
*/
void mac_scanConfirm(void)
{
    // logicalChannel is used as flag to show that we received a valid beacon
    u8 gotbeacon = (panDescriptor.logicalChannel != 0xff);
    4c60:	c0 e0       	ldi	r28, 0x00	; 0

        // We are one hop more than our (prospective) parent
        macConfig.hopsToCoord = panDescriptor.hopsToCoord + 1;
    }
    // Confirm the scan, only if we have a valid coordinator
    appScanConfirm(gotbeacon);
    4c62:	8c 2f       	mov	r24, r28
}
    4c64:	cf 91       	pop	r28

        // We are one hop more than our (prospective) parent
        macConfig.hopsToCoord = panDescriptor.hopsToCoord + 1;
    }
    // Confirm the scan, only if we have a valid coordinator
    appScanConfirm(gotbeacon);
    4c66:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <appScanConfirm>

00004c6a <macScan>:
    // Check for fixed channel
    if (PAN_CHANNEL != CHANNEL255)
        macSetScanChannel(PAN_CHANNEL);

    // Set up some varibles on the initial call to macScan()
    if (0xFF == macConfig.currentChannel)
    4c6a:	80 91 51 0c 	lds	r24, 0x0C51	; 0x800c51 <macConfig+0x14>
    4c6e:	8f 3f       	cpi	r24, 0xFF	; 255
    4c70:	09 f4       	brne	.+2      	; 0x4c74 <macScan+0xa>
    4c72:	3d c0       	rjmp	.+122    	; 0x4cee <macScan+0x84>
        // Not first time through, must sleep very low power nodes.
        #if (VLP && (NODETYPE == ENDDEVICE))
            nodeSleep(SCAN_SLEEP_TIME);
		#endif
    // See if we're done scanning
    if(macConfig.currentChannel > (CHINA_MODE ? 4 : MAX_CHANNEL) ||
    4c74:	8b 31       	cpi	r24, 0x1B	; 27
    4c76:	a8 f5       	brcc	.+106    	; 0x4ce2 <macScan+0x78>
       macConfig.currentChannel == scanChannel + 1)
    4c78:	48 2f       	mov	r20, r24
    4c7a:	50 e0       	ldi	r21, 0x00	; 0
    4c7c:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <scanChannel>
    4c80:	30 e0       	ldi	r19, 0x00	; 0
    4c82:	2f 5f       	subi	r18, 0xFF	; 255
    4c84:	3f 4f       	sbci	r19, 0xFF	; 255
        // Not first time through, must sleep very low power nodes.
        #if (VLP && (NODETYPE == ENDDEVICE))
            nodeSleep(SCAN_SLEEP_TIME);
		#endif
    // See if we're done scanning
    if(macConfig.currentChannel > (CHINA_MODE ? 4 : MAX_CHANNEL) ||
    4c86:	42 17       	cp	r20, r18
    4c88:	53 07       	cpc	r21, r19
    4c8a:	59 f1       	breq	.+86     	; 0x4ce2 <macScan+0x78>
            mac_scanConfirm();
            return;
        }

    // Set the channel.
    macSetOperatingChannel(macConfig.currentChannel);
    4c8c:	68 da       	rcall	.-2864   	; 0x415e <macSetOperatingChannel>
{
    // Create a struct pointer to the global variable...
    volatile ftBeaconReq* brFrame = (ftBeaconReq*)(mac_buffer_tx+1);

    // Fill in beacon request frame
    brFrame->fcf = htons_16(FCF_BEACONREQ);
    4c8e:	83 e0       	ldi	r24, 0x03	; 3
    4c90:	98 e0       	ldi	r25, 0x08	; 8
    4c92:	90 93 bd 0b 	sts	0x0BBD, r25	; 0x800bbd <mac_buffer_tx+0x2>
    4c96:	80 93 bc 0b 	sts	0x0BBC, r24	; 0x800bbc <mac_buffer_tx+0x1>
    brFrame->seq = macConfig.bsn++;
    4c9a:	80 91 46 0c 	lds	r24, 0x0C46	; 0x800c46 <macConfig+0x9>
    4c9e:	91 e0       	ldi	r25, 0x01	; 1
    4ca0:	98 0f       	add	r25, r24
    4ca2:	90 93 46 0c 	sts	0x0C46, r25	; 0x800c46 <macConfig+0x9>
    4ca6:	80 93 be 0b 	sts	0x0BBE, r24	; 0x800bbe <mac_buffer_tx+0x3>
    brFrame->panid = htons_16(PAN_ID);
    4caa:	8f ef       	ldi	r24, 0xFF	; 255
    4cac:	9f ef       	ldi	r25, 0xFF	; 255
    4cae:	90 93 c0 0b 	sts	0x0BC0, r25	; 0x800bc0 <mac_buffer_tx+0x5>
    4cb2:	80 93 bf 0b 	sts	0x0BBF, r24	; 0x800bbf <mac_buffer_tx+0x4>
    brFrame->broadcastAddr = BROADCASTADDR;
    4cb6:	90 93 c2 0b 	sts	0x0BC2, r25	; 0x800bc2 <mac_buffer_tx+0x7>
    4cba:	80 93 c1 0b 	sts	0x0BC1, r24	; 0x800bc1 <mac_buffer_tx+0x6>
    brFrame->cmd = BEACON_REQUEST;
    4cbe:	87 e0       	ldi	r24, 0x07	; 7
    4cc0:	80 93 c3 0b 	sts	0x0BC3, r24	; 0x800bc3 <mac_buffer_tx+0x8>

    // Send the frame via radio
    radioSendData(sizeof(ftBeaconReq), (u8*)brFrame);
    4cc4:	6c eb       	ldi	r22, 0xBC	; 188
    4cc6:	7b e0       	ldi	r23, 0x0B	; 11
    4cc8:	88 e0       	ldi	r24, 0x08	; 8
    4cca:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <radioSendData>

    // Send the beacon request
    sendBeaconRequest();

    // Beacon was send, increment channel to prepare for the next one.
    macConfig.currentChannel++;
    4cce:	80 91 51 0c 	lds	r24, 0x0C51	; 0x800c51 <macConfig+0x14>
    4cd2:	8f 5f       	subi	r24, 0xFF	; 255
    4cd4:	80 93 51 0c 	sts	0x0C51, r24	; 0x800c51 <macConfig+0x14>

    // Set the scan duration timer.
    macSetAlarm(SCANDURATION, macScan);
    4cd8:	65 e3       	ldi	r22, 0x35	; 53
    4cda:	76 e2       	ldi	r23, 0x26	; 38
    4cdc:	84 e1       	ldi	r24, 0x14	; 20
    4cde:	90 e0       	ldi	r25, 0x00	; 0
    4ce0:	4c c0       	rjmp	.+152    	; 0x4d7a <macSetAlarm>
    // See if we're done scanning
    if(macConfig.currentChannel > (CHINA_MODE ? 4 : MAX_CHANNEL) ||
       macConfig.currentChannel == scanChannel + 1)
        {
            // done scanning
            scanInProcess = false;
    4ce2:	10 92 67 06 	sts	0x0667, r1	; 0x800667 <scanInProcess>
            macConfig.currentChannel = 0xFF;
    4ce6:	8f ef       	ldi	r24, 0xFF	; 255
    4ce8:	80 93 51 0c 	sts	0x0C51, r24	; 0x800c51 <macConfig+0x14>

            mac_scanConfirm();
    4cec:	96 cf       	rjmp	.-212    	; 0x4c1a <mac_scanConfirm>
        macSetScanChannel(PAN_CHANNEL);

    // Set up some varibles on the initial call to macScan()
    if (0xFF == macConfig.currentChannel)
    {
        scanInProcess = true;
    4cee:	91 e0       	ldi	r25, 0x01	; 1
    4cf0:	90 93 67 06 	sts	0x0667, r25	; 0x800667 <scanInProcess>

        // Reset the variables.
        memset(&panDescriptor, 0, sizeof(panDescriptor_t));
    4cf4:	96 e1       	ldi	r25, 0x16	; 22
    4cf6:	e2 eb       	ldi	r30, 0xB2	; 178
    4cf8:	fc e0       	ldi	r31, 0x0C	; 12
    4cfa:	df 01       	movw	r26, r30
    4cfc:	1d 92       	st	X+, r1
    4cfe:	9a 95       	dec	r25
    4d00:	e9 f7       	brne	.-6      	; 0x4cfc <macScan+0x92>

        // logicalChannel is used as flag to show that we received a valid beacon
        panDescriptor.logicalChannel = 0xff;
    4d02:	80 93 b7 0c 	sts	0x0CB7, r24	; 0x800cb7 <panDescriptor+0x5>

        macConfig.currentChannel = MIN_CHANNEL; // First possible channel for RF23x
    4d06:	8b e0       	ldi	r24, 0x0B	; 11
    4d08:	80 93 51 0c 	sts	0x0C51, r24	; 0x800c51 <macConfig+0x14>

        // Check for a single pre-defined channel to scan.
        if (scanChannel != ALL_CHANNELS)
    4d0c:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <scanChannel>
    4d10:	80 38       	cpi	r24, 0x80	; 128
    4d12:	19 f0       	breq	.+6      	; 0x4d1a <macScan+0xb0>
            macConfig.currentChannel = scanChannel;
    4d14:	80 93 51 0c 	sts	0x0C51, r24	; 0x800c51 <macConfig+0x14>
    4d18:	b9 cf       	rjmp	.-142    	; 0x4c8c <macScan+0x22>
    4d1a:	8b e0       	ldi	r24, 0x0B	; 11
    4d1c:	b7 cf       	rjmp	.-146    	; 0x4c8c <macScan+0x22>

00004d1e <macEdCallback>:
   @brief Callback function, called by the radio ISR function when the
   radio issues an energy measurement interrupt.  This function stores
   the energy measurement for later use.
 */
void macEdCallback(void)
{
    4d1e:	08 95       	ret

00004d20 <getUniqueID>:
    localtime = tickTimer;
    AVR_LEAVE_CRITICAL_REGION();

    return localtime;

}
    4d20:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <currentTimerID.3607>
    4d24:	8f 5f       	subi	r24, 0xFF	; 255
    4d26:	09 f4       	brne	.+2      	; 0x4d2a <getUniqueID+0xa>
    4d28:	81 e0       	ldi	r24, 0x01	; 1
    4d2a:	e2 ed       	ldi	r30, 0xD2	; 210
    4d2c:	f6 e0       	ldi	r31, 0x06	; 6
    4d2e:	21 e0       	ldi	r18, 0x01	; 1
    4d30:	05 c0       	rjmp	.+10     	; 0x4d3c <getUniqueID+0x1c>
    4d32:	35 96       	adiw	r30, 0x05	; 5
    4d34:	97 e0       	ldi	r25, 0x07	; 7
    4d36:	e6 33       	cpi	r30, 0x36	; 54
    4d38:	f9 07       	cpc	r31, r25
    4d3a:	49 f0       	breq	.+18     	; 0x4d4e <getUniqueID+0x2e>
    4d3c:	90 81       	ld	r25, Z
    4d3e:	89 13       	cpse	r24, r25
    4d40:	f8 cf       	rjmp	.-16     	; 0x4d32 <getUniqueID+0x12>
    4d42:	20 e0       	ldi	r18, 0x00	; 0
    4d44:	35 96       	adiw	r30, 0x05	; 5
    4d46:	97 e0       	ldi	r25, 0x07	; 7
    4d48:	e6 33       	cpi	r30, 0x36	; 54
    4d4a:	f9 07       	cpc	r31, r25
    4d4c:	b9 f7       	brne	.-18     	; 0x4d3c <getUniqueID+0x1c>
    4d4e:	ee e6       	ldi	r30, 0x6E	; 110
    4d50:	f6 e0       	ldi	r31, 0x06	; 6
    4d52:	05 c0       	rjmp	.+10     	; 0x4d5e <getUniqueID+0x3e>
    4d54:	35 96       	adiw	r30, 0x05	; 5
    4d56:	96 e0       	ldi	r25, 0x06	; 6
    4d58:	e2 3d       	cpi	r30, 0xD2	; 210
    4d5a:	f9 07       	cpc	r31, r25
    4d5c:	49 f0       	breq	.+18     	; 0x4d70 <getUniqueID+0x50>
    4d5e:	90 81       	ld	r25, Z
    4d60:	89 13       	cpse	r24, r25
    4d62:	f8 cf       	rjmp	.-16     	; 0x4d54 <getUniqueID+0x34>
    4d64:	20 e0       	ldi	r18, 0x00	; 0
    4d66:	35 96       	adiw	r30, 0x05	; 5
    4d68:	96 e0       	ldi	r25, 0x06	; 6
    4d6a:	e2 3d       	cpi	r30, 0xD2	; 210
    4d6c:	f9 07       	cpc	r31, r25
    4d6e:	b9 f7       	brne	.-18     	; 0x4d5e <getUniqueID+0x3e>
    4d70:	22 23       	and	r18, r18
    4d72:	c1 f2       	breq	.-80     	; 0x4d24 <getUniqueID+0x4>
    4d74:	80 93 68 06 	sts	0x0668, r24	; 0x800668 <currentTimerID.3607>
    4d78:	08 95       	ret

00004d7a <macSetAlarm>:
   return nothing.

   @return Handle to timer.  Can be used to call macTimerEnd().
*/
u8 macSetAlarm(u16 time, void(*callback)(void))
{
    4d7a:	cf 92       	push	r12
    4d7c:	df 92       	push	r13
    4d7e:	ef 92       	push	r14
    4d80:	ff 92       	push	r15
    4d82:	0f 93       	push	r16
    4d84:	1f 93       	push	r17
    4d86:	cf 93       	push	r28
    4d88:	df 93       	push	r29
    4d8a:	1f 92       	push	r1
    4d8c:	cd b7       	in	r28, 0x3d	; 61
    4d8e:	de b7       	in	r29, 0x3e	; 62
    u8 i;
    u16 ticks;

    if (!time)
    4d90:	00 97       	sbiw	r24, 0x00	; 0
    4d92:	09 f4       	brne	.+2      	; 0x4d96 <macSetAlarm+0x1c>
    4d94:	45 c0       	rjmp	.+138    	; 0x4e20 <macSetAlarm+0xa6>

    // Store the timer details in the array
    ticks = max(time, 1);  // At least one tick

    // Protect this section from an ISR that will add an alarm
    AVR_ENTER_CRITICAL_REGION();
    4d96:	2f b7       	in	r18, 0x3f	; 63
    4d98:	29 83       	std	Y+1, r18	; 0x01
    4d9a:	f8 94       	cli
    4d9c:	a0 ed       	ldi	r26, 0xD0	; 208
    4d9e:	b6 e0       	ldi	r27, 0x06	; 6
    4da0:	00 e0       	ldi	r16, 0x00	; 0
    4da2:	10 e0       	ldi	r17, 0x00	; 0
    // search for free event structure
    for (i=0;i<TIMER_EVENTS_MAX;i++)
        if (!timerEvents[i].time)
    4da4:	2d 91       	ld	r18, X+
    4da6:	3c 91       	ld	r19, X
    4da8:	11 97       	sbiw	r26, 0x01	; 1
    4daa:	23 2b       	or	r18, r19
    4dac:	89 f0       	breq	.+34     	; 0x4dd0 <macSetAlarm+0x56>
    4dae:	0f 5f       	subi	r16, 0xFF	; 255
    4db0:	1f 4f       	sbci	r17, 0xFF	; 255
    4db2:	15 96       	adiw	r26, 0x05	; 5
    ticks = max(time, 1);  // At least one tick

    // Protect this section from an ISR that will add an alarm
    AVR_ENTER_CRITICAL_REGION();
    // search for free event structure
    for (i=0;i<TIMER_EVENTS_MAX;i++)
    4db4:	04 31       	cpi	r16, 0x14	; 20
    4db6:	11 05       	cpc	r17, r1
    4db8:	a9 f7       	brne	.-22     	; 0x4da4 <macSetAlarm+0x2a>
            // free, use this one
            break;

    if (i >= TIMER_EVENTS_MAX)
        // Out of timers to use, just quit
        return 0;
    4dba:	80 e0       	ldi	r24, 0x00	; 0
    // start timer running, since we have at least one timer running
    timerStart();
    AVR_LEAVE_CRITICAL_REGION();

    return timerEvents[i].timerID;
}
    4dbc:	0f 90       	pop	r0
    4dbe:	df 91       	pop	r29
    4dc0:	cf 91       	pop	r28
    4dc2:	1f 91       	pop	r17
    4dc4:	0f 91       	pop	r16
    4dc6:	ff 90       	pop	r15
    4dc8:	ef 90       	pop	r14
    4dca:	df 90       	pop	r13
    4dcc:	cf 90       	pop	r12
    4dce:	08 95       	ret

    if (i >= TIMER_EVENTS_MAX)
        // Out of timers to use, just quit
        return 0;

    timerEvents[i].time = ticks;
    4dd0:	78 01       	movw	r14, r16
    4dd2:	ee 0c       	add	r14, r14
    4dd4:	ff 1c       	adc	r15, r15
    4dd6:	ee 0c       	add	r14, r14
    4dd8:	ff 1c       	adc	r15, r15
    4dda:	f7 01       	movw	r30, r14
    4ddc:	e0 0f       	add	r30, r16
    4dde:	f1 1f       	adc	r31, r17
    4de0:	e0 53       	subi	r30, 0x30	; 48
    4de2:	f9 4f       	sbci	r31, 0xF9	; 249
        callback();
        return 0;
    }

    // Store the timer details in the array
    ticks = max(time, 1);  // At least one tick
    4de4:	00 97       	sbiw	r24, 0x00	; 0
    4de6:	01 f1       	breq	.+64     	; 0x4e28 <macSetAlarm+0xae>

    if (i >= TIMER_EVENTS_MAX)
        // Out of timers to use, just quit
        return 0;

    timerEvents[i].time = ticks;
    4de8:	91 83       	std	Z+1, r25	; 0x01
    4dea:	80 83       	st	Z, r24
    timerEvents[i].callback = callback;
    4dec:	c7 01       	movw	r24, r14
    4dee:	80 0f       	add	r24, r16
    4df0:	91 1f       	adc	r25, r17
    4df2:	9c 01       	movw	r18, r24
    4df4:	20 53       	subi	r18, 0x30	; 48
    4df6:	39 4f       	sbci	r19, 0xF9	; 249
    4df8:	69 01       	movw	r12, r18
    4dfa:	f9 01       	movw	r30, r18
    4dfc:	74 83       	std	Z+4, r23	; 0x04
    4dfe:	63 83       	std	Z+3, r22	; 0x03
    // don't return zero as a timer ID
    timerEvents[i].timerID = getUniqueID();
    4e00:	8f df       	rcall	.-226    	; 0x4d20 <getUniqueID>
    4e02:	f6 01       	movw	r30, r12
    4e04:	82 83       	std	Z+2, r24	; 0x02
/**
    @brief Start the hardware timer running.
*/
static void timerStart(void)
{
    if (!timerRunning)
    4e06:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <timerRunning>
    4e0a:	88 23       	and	r24, r24
    4e0c:	81 f0       	breq	.+32     	; 0x4e2e <macSetAlarm+0xb4>
    // don't return zero as a timer ID
    timerEvents[i].timerID = getUniqueID();

    // start timer running, since we have at least one timer running
    timerStart();
    AVR_LEAVE_CRITICAL_REGION();
    4e0e:	89 81       	ldd	r24, Y+1	; 0x01
    4e10:	8f bf       	out	0x3f, r24	; 63

    return timerEvents[i].timerID;
    4e12:	0e 0d       	add	r16, r14
    4e14:	1f 1d       	adc	r17, r15
    4e16:	f8 01       	movw	r30, r16
    4e18:	e0 53       	subi	r30, 0x30	; 48
    4e1a:	f9 4f       	sbci	r31, 0xF9	; 249
    4e1c:	82 81       	ldd	r24, Z+2	; 0x02
    4e1e:	ce cf       	rjmp	.-100    	; 0x4dbc <macSetAlarm+0x42>
    u16 ticks;

    if (!time)
    {
        // Don't delay, just call it
        callback();
    4e20:	fb 01       	movw	r30, r22
    4e22:	09 95       	icall
        return 0;
    4e24:	80 e0       	ldi	r24, 0x00	; 0
    4e26:	ca cf       	rjmp	.-108    	; 0x4dbc <macSetAlarm+0x42>
    }

    // Store the timer details in the array
    ticks = max(time, 1);  // At least one tick
    4e28:	81 e0       	ldi	r24, 0x01	; 1
    4e2a:	90 e0       	ldi	r25, 0x00	; 0
    4e2c:	dd cf       	rjmp	.-70     	; 0x4de8 <macSetAlarm+0x6e>
static void timerStart(void)
{
    if (!timerRunning)
    {
        // Clear timer counter value.
        TIMER_CLEAR();
    4e2e:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    4e32:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>

        // Enable TIMER3 output compare interrupt.
        TIMER_ENABLE();
    4e36:	82 e0       	ldi	r24, 0x02	; 2
    4e38:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
        timerRunning = 1;
    4e3c:	81 e0       	ldi	r24, 0x01	; 1
    4e3e:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <timerRunning>
    4e42:	e5 cf       	rjmp	.-54     	; 0x4e0e <macSetAlarm+0x94>

00004e44 <macSetLongAlarm>:
   hours.

   @return Handle to timer.  Can be used to call macTimerEnd().
*/
u8 macSetLongAlarm(u16 seconds, void(*callback)(void))
{
    4e44:	cf 92       	push	r12
    4e46:	df 92       	push	r13
    4e48:	ef 92       	push	r14
    4e4a:	ff 92       	push	r15
    4e4c:	0f 93       	push	r16
    4e4e:	1f 93       	push	r17
    4e50:	cf 93       	push	r28
    4e52:	df 93       	push	r29
    4e54:	1f 92       	push	r1
    4e56:	cd b7       	in	r28, 0x3d	; 61
    4e58:	de b7       	in	r29, 0x3e	; 62
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        // Find a free timer
        u8 i;
        
        if (!seconds)
    4e5a:	00 97       	sbiw	r24, 0x00	; 0
    4e5c:	09 f4       	brne	.+2      	; 0x4e60 <macSetLongAlarm+0x1c>
    4e5e:	3e c0       	rjmp	.+124    	; 0x4edc <macSetLongAlarm+0x98>
    4e60:	ac e6       	ldi	r26, 0x6C	; 108
    4e62:	b6 e0       	ldi	r27, 0x06	; 6
    4e64:	00 e0       	ldi	r16, 0x00	; 0
    4e66:	10 e0       	ldi	r17, 0x00	; 0
            callback();
            return 0;
        }
        
        for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
            if (!longTimerEvents[i].time)
    4e68:	2d 91       	ld	r18, X+
    4e6a:	3c 91       	ld	r19, X
    4e6c:	11 97       	sbiw	r26, 0x01	; 1
    4e6e:	23 2b       	or	r18, r19
    4e70:	89 f0       	breq	.+34     	; 0x4e94 <macSetLongAlarm+0x50>
    4e72:	0f 5f       	subi	r16, 0xFF	; 255
    4e74:	1f 4f       	sbci	r17, 0xFF	; 255
    4e76:	15 96       	adiw	r26, 0x05	; 5
            // Just go right now
            callback();
            return 0;
        }
        
        for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
    4e78:	04 31       	cpi	r16, 0x14	; 20
    4e7a:	11 05       	cpc	r17, r1
    4e7c:	a9 f7       	brne	.-22     	; 0x4e68 <macSetLongAlarm+0x24>
                // free, use this one
                break;

        if (i >= LONG_TIMER_EVENTS_MAX)
            // No more timers, just quit
            return 0;
    4e7e:	80 e0       	ldi	r24, 0x00	; 0
        AVR_LEAVE_CRITICAL_REGION();
        
        return longTimerEvents[i].timerID;
    }
    return 0;
}
    4e80:	0f 90       	pop	r0
    4e82:	df 91       	pop	r29
    4e84:	cf 91       	pop	r28
    4e86:	1f 91       	pop	r17
    4e88:	0f 91       	pop	r16
    4e8a:	ff 90       	pop	r15
    4e8c:	ef 90       	pop	r14
    4e8e:	df 90       	pop	r13
    4e90:	cf 90       	pop	r12
    4e92:	08 95       	ret
        if (i >= LONG_TIMER_EVENTS_MAX)
            // No more timers, just quit
            return 0;
        
        // Store the time and callback into free timer
        longTimerEvents[i].time = seconds;
    4e94:	78 01       	movw	r14, r16
    4e96:	ee 0c       	add	r14, r14
    4e98:	ff 1c       	adc	r15, r15
    4e9a:	ee 0c       	add	r14, r14
    4e9c:	ff 1c       	adc	r15, r15
    4e9e:	97 01       	movw	r18, r14
    4ea0:	20 0f       	add	r18, r16
    4ea2:	31 1f       	adc	r19, r17
    4ea4:	a9 01       	movw	r20, r18
    4ea6:	44 59       	subi	r20, 0x94	; 148
    4ea8:	59 4f       	sbci	r21, 0xF9	; 249
    4eaa:	6a 01       	movw	r12, r20
    4eac:	fa 01       	movw	r30, r20
    4eae:	91 83       	std	Z+1, r25	; 0x01
    4eb0:	80 83       	st	Z, r24
        longTimerEvents[i].callback = callback;
    4eb2:	74 83       	std	Z+4, r23	; 0x04
    4eb4:	63 83       	std	Z+3, r22	; 0x03
        longTimerEvents[i].timerID = getUniqueID();
    4eb6:	34 df       	rcall	.-408    	; 0x4d20 <getUniqueID>
    4eb8:	f6 01       	movw	r30, r12
    4eba:	82 83       	std	Z+2, r24	; 0x02
        
        // start timer running, since we have at least one timer running
        AVR_ENTER_CRITICAL_REGION();
    4ebc:	8f b7       	in	r24, 0x3f	; 63
    4ebe:	89 83       	std	Y+1, r24	; 0x01
    4ec0:	f8 94       	cli
/**
    @brief Start the hardware timer running.
*/
static void timerStart(void)
{
    if (!timerRunning)
    4ec2:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <timerRunning>
    4ec6:	88 23       	and	r24, r24
    4ec8:	69 f0       	breq	.+26     	; 0x4ee4 <macSetLongAlarm+0xa0>
        longTimerEvents[i].timerID = getUniqueID();
        
        // start timer running, since we have at least one timer running
        AVR_ENTER_CRITICAL_REGION();
        timerStart();
        AVR_LEAVE_CRITICAL_REGION();
    4eca:	89 81       	ldd	r24, Y+1	; 0x01
    4ecc:	8f bf       	out	0x3f, r24	; 63
        
        return longTimerEvents[i].timerID;
    4ece:	0e 0d       	add	r16, r14
    4ed0:	1f 1d       	adc	r17, r15
    4ed2:	f8 01       	movw	r30, r16
    4ed4:	e4 59       	subi	r30, 0x94	; 148
    4ed6:	f9 4f       	sbci	r31, 0xF9	; 249
    4ed8:	82 81       	ldd	r24, Z+2	; 0x02
    4eda:	d2 cf       	rjmp	.-92     	; 0x4e80 <macSetLongAlarm+0x3c>
        u8 i;
        
        if (!seconds)
        {
            // Just go right now
            callback();
    4edc:	fb 01       	movw	r30, r22
    4ede:	09 95       	icall
            return 0;
    4ee0:	80 e0       	ldi	r24, 0x00	; 0
    4ee2:	ce cf       	rjmp	.-100    	; 0x4e80 <macSetLongAlarm+0x3c>
static void timerStart(void)
{
    if (!timerRunning)
    {
        // Clear timer counter value.
        TIMER_CLEAR();
    4ee4:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    4ee8:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>

        // Enable TIMER3 output compare interrupt.
        TIMER_ENABLE();
    4eec:	82 e0       	ldi	r24, 0x02	; 2
    4eee:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
        timerRunning = 1;
    4ef2:	81 e0       	ldi	r24, 0x01	; 1
    4ef4:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <timerRunning>
    4ef8:	e8 cf       	rjmp	.-48     	; 0x4eca <macSetLongAlarm+0x86>

00004efa <macTimerEnd>:

   @param timerID The value returned from macSetAlarm when the alarm
   was set.
*/
void macTimerEnd(u8 timerID)
{
    4efa:	e2 ed       	ldi	r30, 0xD2	; 210
    4efc:	f6 e0       	ldi	r31, 0x06	; 6
    4efe:	20 e0       	ldi	r18, 0x00	; 0
    4f00:	30 e0       	ldi	r19, 0x00	; 0
    u8 i;

    // search for timer with timerID
    for (i=0;i<TIMER_EVENTS_MAX;i++)
        if (timerEvents[i].timerID == timerID)
    4f02:	90 81       	ld	r25, Z
    4f04:	98 17       	cp	r25, r24
    4f06:	a1 f0       	breq	.+40     	; 0x4f30 <macTimerEnd+0x36>
    4f08:	2f 5f       	subi	r18, 0xFF	; 255
    4f0a:	3f 4f       	sbci	r19, 0xFF	; 255
    4f0c:	35 96       	adiw	r30, 0x05	; 5
void macTimerEnd(u8 timerID)
{
    u8 i;

    // search for timer with timerID
    for (i=0;i<TIMER_EVENTS_MAX;i++)
    4f0e:	24 31       	cpi	r18, 0x14	; 20
    4f10:	31 05       	cpc	r19, r1
    4f12:	b9 f7       	brne	.-18     	; 0x4f02 <macTimerEnd+0x8>
    4f14:	ee e6       	ldi	r30, 0x6E	; 110
    4f16:	f6 e0       	ldi	r31, 0x06	; 6
    4f18:	20 e0       	ldi	r18, 0x00	; 0
    4f1a:	30 e0       	ldi	r19, 0x00	; 0

    // search for long timer with timerID
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
            if (longTimerEvents[i].timerID == timerID)
    4f1c:	90 81       	ld	r25, Z
    4f1e:	98 17       	cp	r25, r24
    4f20:	a9 f0       	breq	.+42     	; 0x4f4c <macTimerEnd+0x52>
    4f22:	2f 5f       	subi	r18, 0xFF	; 255
    4f24:	3f 4f       	sbci	r19, 0xFF	; 255
    4f26:	35 96       	adiw	r30, 0x05	; 5
        }

    // search for long timer with timerID
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
    4f28:	24 31       	cpi	r18, 0x14	; 20
    4f2a:	31 05       	cpc	r19, r1
    4f2c:	b9 f7       	brne	.-18     	; 0x4f1c <macTimerEnd+0x22>
    4f2e:	08 95       	ret
    // search for timer with timerID
    for (i=0;i<TIMER_EVENTS_MAX;i++)
        if (timerEvents[i].timerID == timerID)
        {
            // kill this timer
            timerEvents[i].time = 0;
    4f30:	f9 01       	movw	r30, r18
    4f32:	ee 0f       	add	r30, r30
    4f34:	ff 1f       	adc	r31, r31
    4f36:	ee 0f       	add	r30, r30
    4f38:	ff 1f       	adc	r31, r31
    4f3a:	2e 0f       	add	r18, r30
    4f3c:	3f 1f       	adc	r19, r31
    4f3e:	f9 01       	movw	r30, r18
    4f40:	e0 53       	subi	r30, 0x30	; 48
    4f42:	f9 4f       	sbci	r31, 0xF9	; 249
    4f44:	11 82       	std	Z+1, r1	; 0x01
    4f46:	10 82       	st	Z, r1
            timerEvents[i].timerID = 0;
    4f48:	12 82       	std	Z+2, r1	; 0x02
            return;
    4f4a:	08 95       	ret
    {
        for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
            if (longTimerEvents[i].timerID == timerID)
            {
                // kill this timer
                longTimerEvents[i].time = 0;
    4f4c:	f9 01       	movw	r30, r18
    4f4e:	ee 0f       	add	r30, r30
    4f50:	ff 1f       	adc	r31, r31
    4f52:	ee 0f       	add	r30, r30
    4f54:	ff 1f       	adc	r31, r31
    4f56:	2e 0f       	add	r18, r30
    4f58:	3f 1f       	adc	r19, r31
    4f5a:	f9 01       	movw	r30, r18
    4f5c:	e4 59       	subi	r30, 0x94	; 148
    4f5e:	f9 4f       	sbci	r31, 0xF9	; 249
    4f60:	11 82       	std	Z+1, r1	; 0x01
    4f62:	10 82       	st	Z, r1
                longTimerEvents[i].timerID = 0;
    4f64:	12 82       	std	Z+2, r1	; 0x02
                return;
    4f66:	08 95       	ret

00004f68 <timerInit>:
   want to clear all timers.  Sets the timeout for each tick of the
   system clock.
 */
void timerInit(void)
{
    TIMER_INIT();
    4f68:	e1 e9       	ldi	r30, 0x91	; 145
    4f6a:	f0 e0       	ldi	r31, 0x00	; 0
    4f6c:	80 81       	ld	r24, Z
    4f6e:	8a 60       	ori	r24, 0x0A	; 10
    4f70:	80 83       	st	Z, r24
    4f72:	80 ed       	ldi	r24, 0xD0	; 208
    4f74:	97 e0       	ldi	r25, 0x07	; 7
    4f76:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    4f7a:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>

#if __AVR__
    // Init the PRNG
    if (NODETYPE != ENDDEVICE)
        srand(TCNT(TICKTIMER));
    4f7e:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
    4f82:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    4f86:	0c 94 e5 30 	jmp	0x61ca	; 0x61ca <srand>

00004f8a <__vector_32>:
#if __AVR__
/**
   @brief Timer interrupt service routine.
*/
ISR(TICKVECT)
{
    4f8a:	1f 92       	push	r1
    4f8c:	0f 92       	push	r0
    4f8e:	0f b6       	in	r0, 0x3f	; 63
    4f90:	0f 92       	push	r0
    4f92:	11 24       	eor	r1, r1
    4f94:	0b b6       	in	r0, 0x3b	; 59
    4f96:	0f 92       	push	r0
    4f98:	ff 92       	push	r15
    4f9a:	0f 93       	push	r16
    4f9c:	1f 93       	push	r17
    4f9e:	2f 93       	push	r18
    4fa0:	3f 93       	push	r19
    4fa2:	4f 93       	push	r20
    4fa4:	5f 93       	push	r21
    4fa6:	6f 93       	push	r22
    4fa8:	7f 93       	push	r23
    4faa:	8f 93       	push	r24
    4fac:	9f 93       	push	r25
    4fae:	af 93       	push	r26
    4fb0:	bf 93       	push	r27
    4fb2:	ef 93       	push	r30
    4fb4:	ff 93       	push	r31
    4fb6:	cf 93       	push	r28
    4fb8:	df 93       	push	r29
    4fba:	00 d0       	rcall	.+0      	; 0x4fbc <__vector_32+0x32>
    4fbc:	1f 92       	push	r1
    4fbe:	cd b7       	in	r28, 0x3d	; 61
    4fc0:	de b7       	in	r29, 0x3e	; 62
    u8 i;
    event_object_t event;

    tickTimer++;
    4fc2:	80 91 69 06 	lds	r24, 0x0669	; 0x800669 <tickTimer>
    4fc6:	90 91 6a 06 	lds	r25, 0x066A	; 0x80066a <tickTimer+0x1>
    4fca:	01 96       	adiw	r24, 0x01	; 1
    4fcc:	90 93 6a 06 	sts	0x066A, r25	; 0x80066a <tickTimer+0x1>
    4fd0:	80 93 69 06 	sts	0x0669, r24	; 0x800669 <tickTimer>
#endif
    
    // Decrement second timer
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        if (!--secondTimer)
    4fd4:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <secondTimer>
    4fd8:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <secondTimer+0x1>
    4fdc:	01 97       	sbiw	r24, 0x01	; 1
    4fde:	09 f4       	brne	.+2      	; 0x4fe2 <__vector_32+0x58>
    4fe0:	42 c0       	rjmp	.+132    	; 0x5066 <__vector_32+0xdc>
    4fe2:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <secondTimer+0x1>
    4fe6:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <secondTimer>
    4fea:	00 ed       	ldi	r16, 0xD0	; 208
    4fec:	16 e0       	ldi	r17, 0x06	; 6
        {
            // this timer event is live, check for expiration
            if (!--timerEvents[i].time)
            {
                // Timer expired, queue the associated callback
                event.event = MAC_EVENT_TIMER;  // Event type, see event_t for details.
    4fee:	96 e1       	ldi	r25, 0x16	; 22
    4ff0:	f9 2e       	mov	r15, r25
    4ff2:	06 c0       	rjmp	.+12     	; 0x5000 <__vector_32+0x76>
    4ff4:	0b 5f       	subi	r16, 0xFB	; 251
    4ff6:	1f 4f       	sbci	r17, 0xFF	; 255
            }
        }
    }

    // check for pending events
    for (i=0;i<TIMER_EVENTS_MAX;i++)
    4ff8:	f7 e0       	ldi	r31, 0x07	; 7
    4ffa:	04 33       	cpi	r16, 0x34	; 52
    4ffc:	1f 07       	cpc	r17, r31
    4ffe:	c1 f0       	breq	.+48     	; 0x5030 <__vector_32+0xa6>
    {
        if (timerEvents[i].time)
    5000:	f8 01       	movw	r30, r16
    5002:	80 81       	ld	r24, Z
    5004:	91 81       	ldd	r25, Z+1	; 0x01
    5006:	00 97       	sbiw	r24, 0x00	; 0
    5008:	a9 f3       	breq	.-22     	; 0x4ff4 <__vector_32+0x6a>
        {
            // this timer event is live, check for expiration
            if (!--timerEvents[i].time)
    500a:	01 97       	sbiw	r24, 0x01	; 1
    500c:	91 83       	std	Z+1, r25	; 0x01
    500e:	80 83       	st	Z, r24
    5010:	89 2b       	or	r24, r25
    5012:	81 f7       	brne	.-32     	; 0x4ff4 <__vector_32+0x6a>
            {
                // Timer expired, queue the associated callback
                event.event = MAC_EVENT_TIMER;  // Event type, see event_t for details.
    5014:	f9 82       	std	Y+1, r15	; 0x01
                event.data = (void (*)(void))(timerEvents[i].callback);
    5016:	83 81       	ldd	r24, Z+3	; 0x03
    5018:	94 81       	ldd	r25, Z+4	; 0x04
    501a:	9b 83       	std	Y+3, r25	; 0x03
    501c:	8a 83       	std	Y+2, r24	; 0x02
                mac_put_event(&event);
    501e:	ce 01       	movw	r24, r28
    5020:	01 96       	adiw	r24, 0x01	; 1
    5022:	c3 da       	rcall	.-2682   	; 0x45aa <mac_put_event>
    5024:	0b 5f       	subi	r16, 0xFB	; 251
    5026:	1f 4f       	sbci	r17, 0xFF	; 255
            }
        }
    }

    // check for pending events
    for (i=0;i<TIMER_EVENTS_MAX;i++)
    5028:	f7 e0       	ldi	r31, 0x07	; 7
    502a:	04 33       	cpi	r16, 0x34	; 52
    502c:	1f 07       	cpc	r17, r31
    502e:	41 f7       	brne	.-48     	; 0x5000 <__vector_32+0x76>
                event.data = (void (*)(void))(timerEvents[i].callback);
                mac_put_event(&event);
            }
        }
    }
}
    5030:	0f 90       	pop	r0
    5032:	0f 90       	pop	r0
    5034:	0f 90       	pop	r0
    5036:	df 91       	pop	r29
    5038:	cf 91       	pop	r28
    503a:	ff 91       	pop	r31
    503c:	ef 91       	pop	r30
    503e:	bf 91       	pop	r27
    5040:	af 91       	pop	r26
    5042:	9f 91       	pop	r25
    5044:	8f 91       	pop	r24
    5046:	7f 91       	pop	r23
    5048:	6f 91       	pop	r22
    504a:	5f 91       	pop	r21
    504c:	4f 91       	pop	r20
    504e:	3f 91       	pop	r19
    5050:	2f 91       	pop	r18
    5052:	1f 91       	pop	r17
    5054:	0f 91       	pop	r16
    5056:	ff 90       	pop	r15
    5058:	0f 90       	pop	r0
    505a:	0b be       	out	0x3b, r0	; 59
    505c:	0f 90       	pop	r0
    505e:	0f be       	out	0x3f, r0	; 63
    5060:	0f 90       	pop	r0
    5062:	1f 90       	pop	r1
    5064:	18 95       	reti
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        if (!--secondTimer)
        {
            // Reset one second timer
            secondTimer = 1000/MS_PER_TICK;
    5066:	84 ef       	ldi	r24, 0xF4	; 244
    5068:	91 e0       	ldi	r25, 0x01	; 1
    506a:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <secondTimer+0x1>
    506e:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <secondTimer>
    5072:	0c e6       	ldi	r16, 0x6C	; 108
    5074:	16 e0       	ldi	r17, 0x06	; 6
                {
                    // This timer is active, check for expiration
                    if (!--longTimerEvents[i].time)
                    {
                        // Timer expired, queue the associated callback
                        event.event = MAC_EVENT_TIMER;  // Event type, see event_t for details.
    5076:	86 e1       	ldi	r24, 0x16	; 22
    5078:	f8 2e       	mov	r15, r24
    507a:	07 c0       	rjmp	.+14     	; 0x508a <__vector_32+0x100>
    507c:	0b 5f       	subi	r16, 0xFB	; 251
    507e:	1f 4f       	sbci	r17, 0xFF	; 255
        if (!--secondTimer)
        {
            // Reset one second timer
            secondTimer = 1000/MS_PER_TICK;
            // Handle the one-second timers
            for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
    5080:	f6 e0       	ldi	r31, 0x06	; 6
    5082:	00 3d       	cpi	r16, 0xD0	; 208
    5084:	1f 07       	cpc	r17, r31
    5086:	09 f4       	brne	.+2      	; 0x508a <__vector_32+0x100>
    5088:	b0 cf       	rjmp	.-160    	; 0x4fea <__vector_32+0x60>
            {
                if (longTimerEvents[i].time)
    508a:	f8 01       	movw	r30, r16
    508c:	80 81       	ld	r24, Z
    508e:	91 81       	ldd	r25, Z+1	; 0x01
    5090:	00 97       	sbiw	r24, 0x00	; 0
    5092:	a1 f3       	breq	.-24     	; 0x507c <__vector_32+0xf2>
                {
                    // This timer is active, check for expiration
                    if (!--longTimerEvents[i].time)
    5094:	01 97       	sbiw	r24, 0x01	; 1
    5096:	91 83       	std	Z+1, r25	; 0x01
    5098:	80 83       	st	Z, r24
    509a:	89 2b       	or	r24, r25
    509c:	79 f7       	brne	.-34     	; 0x507c <__vector_32+0xf2>
                    {
                        // Timer expired, queue the associated callback
                        event.event = MAC_EVENT_TIMER;  // Event type, see event_t for details.
    509e:	f9 82       	std	Y+1, r15	; 0x01
                        event.data = (void(*)(void))longTimerEvents[i].callback;
    50a0:	83 81       	ldd	r24, Z+3	; 0x03
    50a2:	94 81       	ldd	r25, Z+4	; 0x04
    50a4:	9b 83       	std	Y+3, r25	; 0x03
    50a6:	8a 83       	std	Y+2, r24	; 0x02
                        mac_put_event(&event);
    50a8:	ce 01       	movw	r24, r28
    50aa:	01 96       	adiw	r24, 0x01	; 1
    50ac:	7e da       	rcall	.-2820   	; 0x45aa <mac_put_event>
    50ae:	e6 cf       	rjmp	.-52     	; 0x507c <__vector_32+0xf2>

000050b0 <__vector_35>:

    for(i = 0; i < uiDelay; i++)
    {
        Timer_delay_us ( 1000 );
    }
}
    50b0:	1f 92       	push	r1
    50b2:	0f 92       	push	r0
    50b4:	0f b6       	in	r0, 0x3f	; 63
    50b6:	0f 92       	push	r0
    50b8:	11 24       	eor	r1, r1
    50ba:	8f 93       	push	r24
    50bc:	82 e0       	ldi	r24, 0x02	; 2
    50be:	80 93 35 07 	sts	0x0735, r24	; 0x800735 <GenericTimerFlag>
    50c2:	8f 91       	pop	r24
    50c4:	0f 90       	pop	r0
    50c6:	0f be       	out	0x3f, r0	; 63
    50c8:	0f 90       	pop	r0
    50ca:	1f 90       	pop	r1
    50cc:	18 95       	reti

000050ce <__vector_12>:

/** \brief Watchdog Timer Interrupt Service Routine.
 */
ISR ( WDT_vect )
{    
    50ce:	1f 92       	push	r1
    50d0:	0f 92       	push	r0
    50d2:	0f b6       	in	r0, 0x3f	; 63
    50d4:	0f 92       	push	r0
    50d6:	11 24       	eor	r1, r1
    50d8:	8f 93       	push	r24
    WDTFlag = 1;
    50da:	81 e0       	ldi	r24, 0x01	; 1
    50dc:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <WDTFlag>
}
    50e0:	8f 91       	pop	r24
    50e2:	0f 90       	pop	r0
    50e4:	0f be       	out	0x3f, r0	; 63
    50e6:	0f 90       	pop	r0
    50e8:	1f 90       	pop	r1
    50ea:	18 95       	reti

000050ec <init_rx_buf>:
    ucTemp = ucData >> 4;
    ucTemp = Nible_to_ascii ( ucTemp );
    serial_putchar ( ucTemp );

    ucTemp = Nible_to_ascii ( ucData );
    serial_putchar ( ucTemp );
    50ec:	ea e3       	ldi	r30, 0x3A	; 58
    50ee:	f7 e0       	ldi	r31, 0x07	; 7
    50f0:	11 82       	std	Z+1, r1	; 0x01
    50f2:	10 82       	st	Z, r1
    50f4:	08 95       	ret

000050f6 <serial_init>:
    50f6:	ea e3       	ldi	r30, 0x3A	; 58
    50f8:	f7 e0       	ldi	r31, 0x07	; 7
    50fa:	11 82       	std	Z+1, r1	; 0x01
    50fc:	10 82       	st	Z, r1
    50fe:	ec eb       	ldi	r30, 0xBC	; 188
    5100:	f7 e0       	ldi	r31, 0x07	; 7
    5102:	11 82       	std	Z+1, r1	; 0x01
    5104:	10 82       	st	Z, r1
    5106:	28 e9       	ldi	r18, 0x98	; 152
    5108:	20 93 c9 00 	sts	0x00C9, r18	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    510c:	26 e0       	ldi	r18, 0x06	; 6
    510e:	20 93 ca 00 	sts	0x00CA, r18	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
    5112:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    5116:	27 e6       	ldi	r18, 0x67	; 103
    5118:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    511c:	90 93 39 07 	sts	0x0739, r25	; 0x800739 <rx_handler+0x1>
    5120:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <rx_handler>
    5124:	08 95       	ret

00005126 <serial_putchar>:
    5126:	90 91 36 07 	lds	r25, 0x0736	; 0x800736 <pause>
    512a:	91 11       	cpse	r25, r1
    512c:	37 c0       	rjmp	.+110    	; 0x519c <serial_putchar+0x76>
    512e:	78 94       	sei
    5130:	20 91 bc 07 	lds	r18, 0x07BC	; 0x8007bc <txbuf>
    5134:	2f 5f       	subi	r18, 0xFF	; 255
    5136:	27 fd       	sbrc	r18, 7
    5138:	32 c0       	rjmp	.+100    	; 0x519e <serial_putchar+0x78>
    513a:	30 91 37 07 	lds	r19, 0x0737	; 0x800737 <rx>
    513e:	02 c0       	rjmp	.+4      	; 0x5144 <serial_putchar+0x1e>
    5140:	31 11       	cpse	r19, r1
    5142:	0c c0       	rjmp	.+24     	; 0x515c <serial_putchar+0x36>
    5144:	90 91 bd 07 	lds	r25, 0x07BD	; 0x8007bd <txbuf+0x1>
    5148:	92 17       	cp	r25, r18
    514a:	d1 f3       	breq	.-12     	; 0x5140 <serial_putchar+0x1a>
    514c:	e0 91 bc 07 	lds	r30, 0x07BC	; 0x8007bc <txbuf>
    5150:	f0 e0       	ldi	r31, 0x00	; 0
    5152:	e4 54       	subi	r30, 0x44	; 68
    5154:	f8 4f       	sbci	r31, 0xF8	; 248
    5156:	82 83       	std	Z+2, r24	; 0x02
    5158:	20 93 bc 07 	sts	0x07BC, r18	; 0x8007bc <txbuf>
    515c:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    5160:	85 fd       	sbrc	r24, 5
    5162:	1c c0       	rjmp	.+56     	; 0x519c <serial_putchar+0x76>
    5164:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    5168:	85 ff       	sbrs	r24, 5
    516a:	fc cf       	rjmp	.-8      	; 0x5164 <serial_putchar+0x3e>
    516c:	80 91 bd 07 	lds	r24, 0x07BD	; 0x8007bd <txbuf+0x1>
    5170:	e8 2f       	mov	r30, r24
    5172:	f0 e0       	ldi	r31, 0x00	; 0
    5174:	e4 54       	subi	r30, 0x44	; 68
    5176:	f8 4f       	sbci	r31, 0xF8	; 248
    5178:	92 81       	ldd	r25, Z+2	; 0x02
    517a:	20 91 bc 07 	lds	r18, 0x07BC	; 0x8007bc <txbuf>
    517e:	82 17       	cp	r24, r18
    5180:	91 f0       	breq	.+36     	; 0x51a6 <serial_putchar+0x80>
    5182:	8f 5f       	subi	r24, 0xFF	; 255
    5184:	87 fd       	sbrc	r24, 7
    5186:	0d c0       	rjmp	.+26     	; 0x51a2 <serial_putchar+0x7c>
    5188:	80 93 bd 07 	sts	0x07BD, r24	; 0x8007bd <txbuf+0x1>
    518c:	89 2f       	mov	r24, r25
    518e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    5192:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    5196:	80 62       	ori	r24, 0x20	; 32
    5198:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    519c:	08 95       	ret
    519e:	20 e0       	ldi	r18, 0x00	; 0
    51a0:	cc cf       	rjmp	.-104    	; 0x513a <serial_putchar+0x14>
    51a2:	80 e0       	ldi	r24, 0x00	; 0
    51a4:	f1 cf       	rjmp	.-30     	; 0x5188 <serial_putchar+0x62>
    51a6:	8f ef       	ldi	r24, 0xFF	; 255
    51a8:	f2 cf       	rjmp	.-28     	; 0x518e <serial_putchar+0x68>

000051aa <rx_buf_count>:
    51aa:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <rxbuf>
    51ae:	90 e0       	ldi	r25, 0x00	; 0
    51b0:	20 91 3b 07 	lds	r18, 0x073B	; 0x80073b <rxbuf+0x1>
    51b4:	82 1b       	sub	r24, r18
    51b6:	91 09       	sbc	r25, r1
    51b8:	97 ff       	sbrs	r25, 7
    51ba:	08 95       	ret
    51bc:	80 58       	subi	r24, 0x80	; 128
    51be:	9f 4f       	sbci	r25, 0xFF	; 255
    51c0:	08 95       	ret

000051c2 <serial_getchar>:
    51c2:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <rxbuf>
    51c6:	90 e0       	ldi	r25, 0x00	; 0
    51c8:	20 91 3b 07 	lds	r18, 0x073B	; 0x80073b <rxbuf+0x1>
    51cc:	82 1b       	sub	r24, r18
    51ce:	91 09       	sbc	r25, r1
    51d0:	97 fd       	sbrc	r25, 7
    51d2:	13 c0       	rjmp	.+38     	; 0x51fa <serial_getchar+0x38>
    51d4:	88 23       	and	r24, r24
    51d6:	a9 f3       	breq	.-22     	; 0x51c2 <serial_getchar>
    51d8:	90 91 3b 07 	lds	r25, 0x073B	; 0x80073b <rxbuf+0x1>
    51dc:	e9 2f       	mov	r30, r25
    51de:	f0 e0       	ldi	r31, 0x00	; 0
    51e0:	e6 5c       	subi	r30, 0xC6	; 198
    51e2:	f8 4f       	sbci	r31, 0xF8	; 248
    51e4:	82 81       	ldd	r24, Z+2	; 0x02
    51e6:	20 91 3a 07 	lds	r18, 0x073A	; 0x80073a <rxbuf>
    51ea:	92 17       	cp	r25, r18
    51ec:	59 f0       	breq	.+22     	; 0x5204 <serial_getchar+0x42>
    51ee:	9f 5f       	subi	r25, 0xFF	; 255
    51f0:	97 fd       	sbrc	r25, 7
    51f2:	06 c0       	rjmp	.+12     	; 0x5200 <serial_getchar+0x3e>
    51f4:	90 93 3b 07 	sts	0x073B, r25	; 0x80073b <rxbuf+0x1>
    51f8:	08 95       	ret
    51fa:	80 58       	subi	r24, 0x80	; 128
    51fc:	9f 4f       	sbci	r25, 0xFF	; 255
    51fe:	ea cf       	rjmp	.-44     	; 0x51d4 <serial_getchar+0x12>
    5200:	90 e0       	ldi	r25, 0x00	; 0
    5202:	f8 cf       	rjmp	.-16     	; 0x51f4 <serial_getchar+0x32>
    5204:	8f ef       	ldi	r24, 0xFF	; 255
    5206:	08 95       	ret

00005208 <__vector_36>:
    5208:	1f 92       	push	r1
    520a:	0f 92       	push	r0
    520c:	0f b6       	in	r0, 0x3f	; 63
    520e:	0f 92       	push	r0
    5210:	11 24       	eor	r1, r1
    5212:	0b b6       	in	r0, 0x3b	; 59
    5214:	0f 92       	push	r0
    5216:	2f 93       	push	r18
    5218:	3f 93       	push	r19
    521a:	4f 93       	push	r20
    521c:	5f 93       	push	r21
    521e:	6f 93       	push	r22
    5220:	7f 93       	push	r23
    5222:	8f 93       	push	r24
    5224:	9f 93       	push	r25
    5226:	af 93       	push	r26
    5228:	bf 93       	push	r27
    522a:	ef 93       	push	r30
    522c:	ff 93       	push	r31
    522e:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    5232:	91 e0       	ldi	r25, 0x01	; 1
    5234:	90 93 37 07 	sts	0x0737, r25	; 0x800737 <rx>
    5238:	90 91 3a 07 	lds	r25, 0x073A	; 0x80073a <rxbuf>
    523c:	9f 5f       	subi	r25, 0xFF	; 255
    523e:	97 fd       	sbrc	r25, 7
    5240:	28 c0       	rjmp	.+80     	; 0x5292 <__vector_36+0x8a>
    5242:	20 91 3b 07 	lds	r18, 0x073B	; 0x80073b <rxbuf+0x1>
    5246:	29 17       	cp	r18, r25
    5248:	41 f0       	breq	.+16     	; 0x525a <__vector_36+0x52>
    524a:	e0 91 3a 07 	lds	r30, 0x073A	; 0x80073a <rxbuf>
    524e:	f0 e0       	ldi	r31, 0x00	; 0
    5250:	e6 5c       	subi	r30, 0xC6	; 198
    5252:	f8 4f       	sbci	r31, 0xF8	; 248
    5254:	82 83       	std	Z+2, r24	; 0x02
    5256:	90 93 3a 07 	sts	0x073A, r25	; 0x80073a <rxbuf>
    525a:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <rx>
    525e:	e0 91 38 07 	lds	r30, 0x0738	; 0x800738 <rx_handler>
    5262:	f0 91 39 07 	lds	r31, 0x0739	; 0x800739 <rx_handler+0x1>
    5266:	30 97       	sbiw	r30, 0x00	; 0
    5268:	09 f0       	breq	.+2      	; 0x526c <__vector_36+0x64>
    526a:	09 95       	icall
    526c:	ff 91       	pop	r31
    526e:	ef 91       	pop	r30
    5270:	bf 91       	pop	r27
    5272:	af 91       	pop	r26
    5274:	9f 91       	pop	r25
    5276:	8f 91       	pop	r24
    5278:	7f 91       	pop	r23
    527a:	6f 91       	pop	r22
    527c:	5f 91       	pop	r21
    527e:	4f 91       	pop	r20
    5280:	3f 91       	pop	r19
    5282:	2f 91       	pop	r18
    5284:	0f 90       	pop	r0
    5286:	0b be       	out	0x3b, r0	; 59
    5288:	0f 90       	pop	r0
    528a:	0f be       	out	0x3f, r0	; 63
    528c:	0f 90       	pop	r0
    528e:	1f 90       	pop	r1
    5290:	18 95       	reti
    5292:	90 e0       	ldi	r25, 0x00	; 0
    5294:	d6 cf       	rjmp	.-84     	; 0x5242 <__vector_36+0x3a>

00005296 <__vector_37>:
    5296:	1f 92       	push	r1
    5298:	0f 92       	push	r0
    529a:	0f b6       	in	r0, 0x3f	; 63
    529c:	0f 92       	push	r0
    529e:	11 24       	eor	r1, r1
    52a0:	0b b6       	in	r0, 0x3b	; 59
    52a2:	0f 92       	push	r0
    52a4:	2f 93       	push	r18
    52a6:	8f 93       	push	r24
    52a8:	9f 93       	push	r25
    52aa:	ef 93       	push	r30
    52ac:	ff 93       	push	r31
    52ae:	90 91 bc 07 	lds	r25, 0x07BC	; 0x8007bc <txbuf>
    52b2:	80 91 bd 07 	lds	r24, 0x07BD	; 0x8007bd <txbuf+0x1>
    52b6:	98 17       	cp	r25, r24
    52b8:	f9 f0       	breq	.+62     	; 0x52f8 <__vector_37+0x62>
    52ba:	80 91 bd 07 	lds	r24, 0x07BD	; 0x8007bd <txbuf+0x1>
    52be:	e8 2f       	mov	r30, r24
    52c0:	f0 e0       	ldi	r31, 0x00	; 0
    52c2:	e4 54       	subi	r30, 0x44	; 68
    52c4:	f8 4f       	sbci	r31, 0xF8	; 248
    52c6:	92 81       	ldd	r25, Z+2	; 0x02
    52c8:	20 91 bc 07 	lds	r18, 0x07BC	; 0x8007bc <txbuf>
    52cc:	82 17       	cp	r24, r18
    52ce:	e1 f0       	breq	.+56     	; 0x5308 <__vector_37+0x72>
    52d0:	8f 5f       	subi	r24, 0xFF	; 255
    52d2:	87 fd       	sbrc	r24, 7
    52d4:	17 c0       	rjmp	.+46     	; 0x5304 <__vector_37+0x6e>
    52d6:	80 93 bd 07 	sts	0x07BD, r24	; 0x8007bd <txbuf+0x1>
    52da:	89 2f       	mov	r24, r25
    52dc:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    52e0:	ff 91       	pop	r31
    52e2:	ef 91       	pop	r30
    52e4:	9f 91       	pop	r25
    52e6:	8f 91       	pop	r24
    52e8:	2f 91       	pop	r18
    52ea:	0f 90       	pop	r0
    52ec:	0b be       	out	0x3b, r0	; 59
    52ee:	0f 90       	pop	r0
    52f0:	0f be       	out	0x3f, r0	; 63
    52f2:	0f 90       	pop	r0
    52f4:	1f 90       	pop	r1
    52f6:	18 95       	reti
    52f8:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    52fc:	8f 7d       	andi	r24, 0xDF	; 223
    52fe:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    5302:	ee cf       	rjmp	.-36     	; 0x52e0 <__vector_37+0x4a>
    5304:	80 e0       	ldi	r24, 0x00	; 0
    5306:	e7 cf       	rjmp	.-50     	; 0x52d6 <__vector_37+0x40>
    5308:	8f ef       	ldi	r24, 0xFF	; 255
    530a:	e8 cf       	rjmp	.-48     	; 0x52dc <__vector_37+0x46>

0000530c <Ascii_to_nible>:
    530c:	98 2f       	mov	r25, r24
    530e:	80 ed       	ldi	r24, 0xD0	; 208
    5310:	89 0f       	add	r24, r25
    5312:	8a 30       	cpi	r24, 0x0A	; 10
    5314:	60 f0       	brcs	.+24     	; 0x532e <Ascii_to_nible+0x22>
    5316:	8f eb       	ldi	r24, 0xBF	; 191
    5318:	89 0f       	add	r24, r25
    531a:	86 30       	cpi	r24, 0x06	; 6
    531c:	48 f0       	brcs	.+18     	; 0x5330 <Ascii_to_nible+0x24>
    531e:	8f e9       	ldi	r24, 0x9F	; 159
    5320:	89 0f       	add	r24, r25
    5322:	86 30       	cpi	r24, 0x06	; 6
    5324:	18 f4       	brcc	.+6      	; 0x532c <Ascii_to_nible+0x20>
    5326:	89 ea       	ldi	r24, 0xA9	; 169
    5328:	89 0f       	add	r24, r25
    532a:	08 95       	ret
    532c:	80 e0       	ldi	r24, 0x00	; 0
    532e:	08 95       	ret
    5330:	89 ec       	ldi	r24, 0xC9	; 201
    5332:	89 0f       	add	r24, r25
    5334:	08 95       	ret

00005336 <asciiStringToNibble>:
param inStr is the ASCII value to be converted.

return outStr is the nibble value with number of characters received.
*/
u8 asciiStringToNibble( char *inStr, char *outStr)
{
    5336:	9f 92       	push	r9
    5338:	af 92       	push	r10
    533a:	bf 92       	push	r11
    533c:	cf 92       	push	r12
    533e:	df 92       	push	r13
    5340:	ef 92       	push	r14
    5342:	ff 92       	push	r15
    5344:	0f 93       	push	r16
    5346:	1f 93       	push	r17
    5348:	cf 93       	push	r28
    534a:	df 93       	push	r29
    534c:	6c 01       	movw	r12, r24
    534e:	7b 01       	movw	r14, r22
	u8 n, k;
	n = strlen(inStr);
    5350:	fc 01       	movw	r30, r24
    5352:	01 90       	ld	r0, Z+
    5354:	00 20       	and	r0, r0
    5356:	e9 f7       	brne	.-6      	; 0x5352 <asciiStringToNibble+0x1c>
    5358:	31 97       	sbiw	r30, 0x01	; 1
    535a:	5f 01       	movw	r10, r30
    535c:	a8 1a       	sub	r10, r24
    535e:	b9 0a       	sbc	r11, r25
    5360:	9a 2c       	mov	r9, r10
	k = 0;
	while (k < n)
    5362:	aa 20       	and	r10, r10
    5364:	a9 f0       	breq	.+42     	; 0x5390 <asciiStringToNibble+0x5a>
    5366:	c0 e0       	ldi	r28, 0x00	; 0
	{
		*outStr = (Ascii_to_nible ( *(inStr+k) ) * 16)
    5368:	86 01       	movw	r16, r12
    536a:	0c 0f       	add	r16, r28
    536c:	11 1d       	adc	r17, r1
    536e:	f8 01       	movw	r30, r16
    5370:	80 81       	ld	r24, Z
    5372:	cc df       	rcall	.-104    	; 0x530c <Ascii_to_nible>
    5374:	d8 2f       	mov	r29, r24
		+  Ascii_to_nible ( *(inStr+k+1));
    5376:	f8 01       	movw	r30, r16
    5378:	81 81       	ldd	r24, Z+1	; 0x01
    537a:	c8 df       	rcall	.-112    	; 0x530c <Ascii_to_nible>
	u8 n, k;
	n = strlen(inStr);
	k = 0;
	while (k < n)
	{
		*outStr = (Ascii_to_nible ( *(inStr+k) ) * 16)
    537c:	f0 e1       	ldi	r31, 0x10	; 16
    537e:	df 9f       	mul	r29, r31
    5380:	80 0d       	add	r24, r0
    5382:	11 24       	eor	r1, r1
    5384:	f7 01       	movw	r30, r14
    5386:	81 93       	st	Z+, r24
    5388:	7f 01       	movw	r14, r30
		+  Ascii_to_nible ( *(inStr+k+1));
		k += 2;
    538a:	ce 5f       	subi	r28, 0xFE	; 254
u8 asciiStringToNibble( char *inStr, char *outStr)
{
	u8 n, k;
	n = strlen(inStr);
	k = 0;
	while (k < n)
    538c:	c9 15       	cp	r28, r9
    538e:	60 f3       	brcs	.-40     	; 0x5368 <asciiStringToNibble+0x32>
		*outStr = (Ascii_to_nible ( *(inStr+k) ) * 16)
		+  Ascii_to_nible ( *(inStr+k+1));
		k += 2;
		outStr++;
	}
	return n/2;
    5390:	8a 2d       	mov	r24, r10
    5392:	86 95       	lsr	r24
}
    5394:	df 91       	pop	r29
    5396:	cf 91       	pop	r28
    5398:	1f 91       	pop	r17
    539a:	0f 91       	pop	r16
    539c:	ff 90       	pop	r15
    539e:	ef 90       	pop	r14
    53a0:	df 90       	pop	r13
    53a2:	cf 90       	pop	r12
    53a4:	bf 90       	pop	r11
    53a6:	af 90       	pop	r10
    53a8:	9f 90       	pop	r9
    53aa:	08 95       	ret

000053ac <vfprintf>:
    53ac:	2f 92       	push	r2
    53ae:	3f 92       	push	r3
    53b0:	4f 92       	push	r4
    53b2:	5f 92       	push	r5
    53b4:	6f 92       	push	r6
    53b6:	7f 92       	push	r7
    53b8:	8f 92       	push	r8
    53ba:	9f 92       	push	r9
    53bc:	af 92       	push	r10
    53be:	bf 92       	push	r11
    53c0:	cf 92       	push	r12
    53c2:	df 92       	push	r13
    53c4:	ef 92       	push	r14
    53c6:	ff 92       	push	r15
    53c8:	0f 93       	push	r16
    53ca:	1f 93       	push	r17
    53cc:	cf 93       	push	r28
    53ce:	df 93       	push	r29
    53d0:	cd b7       	in	r28, 0x3d	; 61
    53d2:	de b7       	in	r29, 0x3e	; 62
    53d4:	63 97       	sbiw	r28, 0x13	; 19
    53d6:	0f b6       	in	r0, 0x3f	; 63
    53d8:	f8 94       	cli
    53da:	de bf       	out	0x3e, r29	; 62
    53dc:	0f be       	out	0x3f, r0	; 63
    53de:	cd bf       	out	0x3d, r28	; 61
    53e0:	6c 01       	movw	r12, r24
    53e2:	4b 01       	movw	r8, r22
    53e4:	2a 01       	movw	r4, r20
    53e6:	fc 01       	movw	r30, r24
    53e8:	17 82       	std	Z+7, r1	; 0x07
    53ea:	16 82       	std	Z+6, r1	; 0x06
    53ec:	83 81       	ldd	r24, Z+3	; 0x03
    53ee:	81 ff       	sbrs	r24, 1
    53f0:	33 c3       	rjmp	.+1638   	; 0x5a58 <vfprintf+0x6ac>
    53f2:	ae 01       	movw	r20, r28
    53f4:	4f 5f       	subi	r20, 0xFF	; 255
    53f6:	5f 4f       	sbci	r21, 0xFF	; 255
    53f8:	3a 01       	movw	r6, r20
    53fa:	f6 01       	movw	r30, r12
    53fc:	93 81       	ldd	r25, Z+3	; 0x03
    53fe:	f4 01       	movw	r30, r8
    5400:	93 fd       	sbrc	r25, 3
    5402:	85 91       	lpm	r24, Z+
    5404:	93 ff       	sbrs	r25, 3
    5406:	81 91       	ld	r24, Z+
    5408:	4f 01       	movw	r8, r30
    540a:	88 23       	and	r24, r24
    540c:	09 f4       	brne	.+2      	; 0x5410 <vfprintf+0x64>
    540e:	20 c3       	rjmp	.+1600   	; 0x5a50 <vfprintf+0x6a4>
    5410:	85 32       	cpi	r24, 0x25	; 37
    5412:	39 f4       	brne	.+14     	; 0x5422 <vfprintf+0x76>
    5414:	93 fd       	sbrc	r25, 3
    5416:	85 91       	lpm	r24, Z+
    5418:	93 ff       	sbrs	r25, 3
    541a:	81 91       	ld	r24, Z+
    541c:	4f 01       	movw	r8, r30
    541e:	85 32       	cpi	r24, 0x25	; 37
    5420:	39 f4       	brne	.+14     	; 0x5430 <vfprintf+0x84>
    5422:	b6 01       	movw	r22, r12
    5424:	90 e0       	ldi	r25, 0x00	; 0
    5426:	0e 94 be 33 	call	0x677c	; 0x677c <fputc>
    542a:	52 01       	movw	r10, r4
    542c:	25 01       	movw	r4, r10
    542e:	e5 cf       	rjmp	.-54     	; 0x53fa <vfprintf+0x4e>
    5430:	10 e0       	ldi	r17, 0x00	; 0
    5432:	f1 2c       	mov	r15, r1
    5434:	20 e0       	ldi	r18, 0x00	; 0
    5436:	20 32       	cpi	r18, 0x20	; 32
    5438:	a0 f4       	brcc	.+40     	; 0x5462 <vfprintf+0xb6>
    543a:	8b 32       	cpi	r24, 0x2B	; 43
    543c:	69 f0       	breq	.+26     	; 0x5458 <vfprintf+0xac>
    543e:	30 f4       	brcc	.+12     	; 0x544c <vfprintf+0xa0>
    5440:	80 32       	cpi	r24, 0x20	; 32
    5442:	59 f0       	breq	.+22     	; 0x545a <vfprintf+0xae>
    5444:	83 32       	cpi	r24, 0x23	; 35
    5446:	69 f4       	brne	.+26     	; 0x5462 <vfprintf+0xb6>
    5448:	20 61       	ori	r18, 0x10	; 16
    544a:	2c c0       	rjmp	.+88     	; 0x54a4 <vfprintf+0xf8>
    544c:	8d 32       	cpi	r24, 0x2D	; 45
    544e:	39 f0       	breq	.+14     	; 0x545e <vfprintf+0xb2>
    5450:	80 33       	cpi	r24, 0x30	; 48
    5452:	39 f4       	brne	.+14     	; 0x5462 <vfprintf+0xb6>
    5454:	21 60       	ori	r18, 0x01	; 1
    5456:	26 c0       	rjmp	.+76     	; 0x54a4 <vfprintf+0xf8>
    5458:	22 60       	ori	r18, 0x02	; 2
    545a:	24 60       	ori	r18, 0x04	; 4
    545c:	23 c0       	rjmp	.+70     	; 0x54a4 <vfprintf+0xf8>
    545e:	28 60       	ori	r18, 0x08	; 8
    5460:	21 c0       	rjmp	.+66     	; 0x54a4 <vfprintf+0xf8>
    5462:	27 fd       	sbrc	r18, 7
    5464:	27 c0       	rjmp	.+78     	; 0x54b4 <vfprintf+0x108>
    5466:	30 ed       	ldi	r19, 0xD0	; 208
    5468:	38 0f       	add	r19, r24
    546a:	3a 30       	cpi	r19, 0x0A	; 10
    546c:	78 f4       	brcc	.+30     	; 0x548c <vfprintf+0xe0>
    546e:	26 ff       	sbrs	r18, 6
    5470:	06 c0       	rjmp	.+12     	; 0x547e <vfprintf+0xd2>
    5472:	fa e0       	ldi	r31, 0x0A	; 10
    5474:	1f 9f       	mul	r17, r31
    5476:	30 0d       	add	r19, r0
    5478:	11 24       	eor	r1, r1
    547a:	13 2f       	mov	r17, r19
    547c:	13 c0       	rjmp	.+38     	; 0x54a4 <vfprintf+0xf8>
    547e:	4a e0       	ldi	r20, 0x0A	; 10
    5480:	f4 9e       	mul	r15, r20
    5482:	30 0d       	add	r19, r0
    5484:	11 24       	eor	r1, r1
    5486:	f3 2e       	mov	r15, r19
    5488:	20 62       	ori	r18, 0x20	; 32
    548a:	0c c0       	rjmp	.+24     	; 0x54a4 <vfprintf+0xf8>
    548c:	8e 32       	cpi	r24, 0x2E	; 46
    548e:	21 f4       	brne	.+8      	; 0x5498 <vfprintf+0xec>
    5490:	26 fd       	sbrc	r18, 6
    5492:	de c2       	rjmp	.+1468   	; 0x5a50 <vfprintf+0x6a4>
    5494:	20 64       	ori	r18, 0x40	; 64
    5496:	06 c0       	rjmp	.+12     	; 0x54a4 <vfprintf+0xf8>
    5498:	8c 36       	cpi	r24, 0x6C	; 108
    549a:	11 f4       	brne	.+4      	; 0x54a0 <vfprintf+0xf4>
    549c:	20 68       	ori	r18, 0x80	; 128
    549e:	02 c0       	rjmp	.+4      	; 0x54a4 <vfprintf+0xf8>
    54a0:	88 36       	cpi	r24, 0x68	; 104
    54a2:	41 f4       	brne	.+16     	; 0x54b4 <vfprintf+0x108>
    54a4:	f4 01       	movw	r30, r8
    54a6:	93 fd       	sbrc	r25, 3
    54a8:	85 91       	lpm	r24, Z+
    54aa:	93 ff       	sbrs	r25, 3
    54ac:	81 91       	ld	r24, Z+
    54ae:	4f 01       	movw	r8, r30
    54b0:	81 11       	cpse	r24, r1
    54b2:	c1 cf       	rjmp	.-126    	; 0x5436 <vfprintf+0x8a>
    54b4:	9b eb       	ldi	r25, 0xBB	; 187
    54b6:	98 0f       	add	r25, r24
    54b8:	93 30       	cpi	r25, 0x03	; 3
    54ba:	18 f4       	brcc	.+6      	; 0x54c2 <vfprintf+0x116>
    54bc:	20 61       	ori	r18, 0x10	; 16
    54be:	80 5e       	subi	r24, 0xE0	; 224
    54c0:	06 c0       	rjmp	.+12     	; 0x54ce <vfprintf+0x122>
    54c2:	9b e9       	ldi	r25, 0x9B	; 155
    54c4:	98 0f       	add	r25, r24
    54c6:	93 30       	cpi	r25, 0x03	; 3
    54c8:	08 f0       	brcs	.+2      	; 0x54cc <vfprintf+0x120>
    54ca:	6d c1       	rjmp	.+730    	; 0x57a6 <vfprintf+0x3fa>
    54cc:	2f 7e       	andi	r18, 0xEF	; 239
    54ce:	26 ff       	sbrs	r18, 6
    54d0:	16 e0       	ldi	r17, 0x06	; 6
    54d2:	2f 73       	andi	r18, 0x3F	; 63
    54d4:	32 2e       	mov	r3, r18
    54d6:	85 36       	cpi	r24, 0x65	; 101
    54d8:	19 f4       	brne	.+6      	; 0x54e0 <vfprintf+0x134>
    54da:	20 64       	ori	r18, 0x40	; 64
    54dc:	32 2e       	mov	r3, r18
    54de:	08 c0       	rjmp	.+16     	; 0x54f0 <vfprintf+0x144>
    54e0:	86 36       	cpi	r24, 0x66	; 102
    54e2:	21 f4       	brne	.+8      	; 0x54ec <vfprintf+0x140>
    54e4:	f2 2f       	mov	r31, r18
    54e6:	f0 68       	ori	r31, 0x80	; 128
    54e8:	3f 2e       	mov	r3, r31
    54ea:	02 c0       	rjmp	.+4      	; 0x54f0 <vfprintf+0x144>
    54ec:	11 11       	cpse	r17, r1
    54ee:	11 50       	subi	r17, 0x01	; 1
    54f0:	37 fe       	sbrs	r3, 7
    54f2:	07 c0       	rjmp	.+14     	; 0x5502 <vfprintf+0x156>
    54f4:	1c 33       	cpi	r17, 0x3C	; 60
    54f6:	50 f4       	brcc	.+20     	; 0x550c <vfprintf+0x160>
    54f8:	ee 24       	eor	r14, r14
    54fa:	e3 94       	inc	r14
    54fc:	e1 0e       	add	r14, r17
    54fe:	27 e0       	ldi	r18, 0x07	; 7
    5500:	0b c0       	rjmp	.+22     	; 0x5518 <vfprintf+0x16c>
    5502:	18 30       	cpi	r17, 0x08	; 8
    5504:	38 f0       	brcs	.+14     	; 0x5514 <vfprintf+0x168>
    5506:	27 e0       	ldi	r18, 0x07	; 7
    5508:	17 e0       	ldi	r17, 0x07	; 7
    550a:	05 c0       	rjmp	.+10     	; 0x5516 <vfprintf+0x16a>
    550c:	27 e0       	ldi	r18, 0x07	; 7
    550e:	4c e3       	ldi	r20, 0x3C	; 60
    5510:	e4 2e       	mov	r14, r20
    5512:	02 c0       	rjmp	.+4      	; 0x5518 <vfprintf+0x16c>
    5514:	21 2f       	mov	r18, r17
    5516:	e1 2c       	mov	r14, r1
    5518:	52 01       	movw	r10, r4
    551a:	44 e0       	ldi	r20, 0x04	; 4
    551c:	a4 0e       	add	r10, r20
    551e:	b1 1c       	adc	r11, r1
    5520:	f2 01       	movw	r30, r4
    5522:	60 81       	ld	r22, Z
    5524:	71 81       	ldd	r23, Z+1	; 0x01
    5526:	82 81       	ldd	r24, Z+2	; 0x02
    5528:	93 81       	ldd	r25, Z+3	; 0x03
    552a:	0e 2d       	mov	r16, r14
    552c:	a3 01       	movw	r20, r6
    552e:	ad d7       	rcall	.+3930   	; 0x648a <__ftoa_engine>
    5530:	2c 01       	movw	r4, r24
    5532:	09 81       	ldd	r16, Y+1	; 0x01
    5534:	00 ff       	sbrs	r16, 0
    5536:	02 c0       	rjmp	.+4      	; 0x553c <vfprintf+0x190>
    5538:	03 ff       	sbrs	r16, 3
    553a:	07 c0       	rjmp	.+14     	; 0x554a <vfprintf+0x19e>
    553c:	31 fc       	sbrc	r3, 1
    553e:	08 c0       	rjmp	.+16     	; 0x5550 <vfprintf+0x1a4>
    5540:	32 fe       	sbrs	r3, 2
    5542:	09 c0       	rjmp	.+18     	; 0x5556 <vfprintf+0x1aa>
    5544:	30 e2       	ldi	r19, 0x20	; 32
    5546:	23 2e       	mov	r2, r19
    5548:	07 c0       	rjmp	.+14     	; 0x5558 <vfprintf+0x1ac>
    554a:	2d e2       	ldi	r18, 0x2D	; 45
    554c:	22 2e       	mov	r2, r18
    554e:	04 c0       	rjmp	.+8      	; 0x5558 <vfprintf+0x1ac>
    5550:	9b e2       	ldi	r25, 0x2B	; 43
    5552:	29 2e       	mov	r2, r25
    5554:	01 c0       	rjmp	.+2      	; 0x5558 <vfprintf+0x1ac>
    5556:	21 2c       	mov	r2, r1
    5558:	80 2f       	mov	r24, r16
    555a:	8c 70       	andi	r24, 0x0C	; 12
    555c:	19 f0       	breq	.+6      	; 0x5564 <vfprintf+0x1b8>
    555e:	21 10       	cpse	r2, r1
    5560:	5a c2       	rjmp	.+1204   	; 0x5a16 <vfprintf+0x66a>
    5562:	96 c2       	rjmp	.+1324   	; 0x5a90 <vfprintf+0x6e4>
    5564:	37 fe       	sbrs	r3, 7
    5566:	0f c0       	rjmp	.+30     	; 0x5586 <vfprintf+0x1da>
    5568:	e4 0c       	add	r14, r4
    556a:	04 ff       	sbrs	r16, 4
    556c:	04 c0       	rjmp	.+8      	; 0x5576 <vfprintf+0x1ca>
    556e:	8a 81       	ldd	r24, Y+2	; 0x02
    5570:	81 33       	cpi	r24, 0x31	; 49
    5572:	09 f4       	brne	.+2      	; 0x5576 <vfprintf+0x1ca>
    5574:	ea 94       	dec	r14
    5576:	1e 14       	cp	r1, r14
    5578:	74 f5       	brge	.+92     	; 0x55d6 <vfprintf+0x22a>
    557a:	f8 e0       	ldi	r31, 0x08	; 8
    557c:	fe 15       	cp	r31, r14
    557e:	78 f5       	brcc	.+94     	; 0x55de <vfprintf+0x232>
    5580:	88 e0       	ldi	r24, 0x08	; 8
    5582:	e8 2e       	mov	r14, r24
    5584:	2c c0       	rjmp	.+88     	; 0x55de <vfprintf+0x232>
    5586:	36 fc       	sbrc	r3, 6
    5588:	2a c0       	rjmp	.+84     	; 0x55de <vfprintf+0x232>
    558a:	81 2f       	mov	r24, r17
    558c:	90 e0       	ldi	r25, 0x00	; 0
    558e:	84 15       	cp	r24, r4
    5590:	95 05       	cpc	r25, r5
    5592:	9c f0       	brlt	.+38     	; 0x55ba <vfprintf+0x20e>
    5594:	2c ef       	ldi	r18, 0xFC	; 252
    5596:	42 16       	cp	r4, r18
    5598:	2f ef       	ldi	r18, 0xFF	; 255
    559a:	52 06       	cpc	r5, r18
    559c:	74 f0       	brlt	.+28     	; 0x55ba <vfprintf+0x20e>
    559e:	43 2d       	mov	r20, r3
    55a0:	40 68       	ori	r20, 0x80	; 128
    55a2:	34 2e       	mov	r3, r20
    55a4:	0a c0       	rjmp	.+20     	; 0x55ba <vfprintf+0x20e>
    55a6:	e2 e0       	ldi	r30, 0x02	; 2
    55a8:	f0 e0       	ldi	r31, 0x00	; 0
    55aa:	ec 0f       	add	r30, r28
    55ac:	fd 1f       	adc	r31, r29
    55ae:	e1 0f       	add	r30, r17
    55b0:	f1 1d       	adc	r31, r1
    55b2:	80 81       	ld	r24, Z
    55b4:	80 33       	cpi	r24, 0x30	; 48
    55b6:	19 f4       	brne	.+6      	; 0x55be <vfprintf+0x212>
    55b8:	11 50       	subi	r17, 0x01	; 1
    55ba:	11 11       	cpse	r17, r1
    55bc:	f4 cf       	rjmp	.-24     	; 0x55a6 <vfprintf+0x1fa>
    55be:	37 fe       	sbrs	r3, 7
    55c0:	0e c0       	rjmp	.+28     	; 0x55de <vfprintf+0x232>
    55c2:	ee 24       	eor	r14, r14
    55c4:	e3 94       	inc	r14
    55c6:	e1 0e       	add	r14, r17
    55c8:	81 2f       	mov	r24, r17
    55ca:	90 e0       	ldi	r25, 0x00	; 0
    55cc:	48 16       	cp	r4, r24
    55ce:	59 06       	cpc	r5, r25
    55d0:	2c f4       	brge	.+10     	; 0x55dc <vfprintf+0x230>
    55d2:	14 19       	sub	r17, r4
    55d4:	04 c0       	rjmp	.+8      	; 0x55de <vfprintf+0x232>
    55d6:	ee 24       	eor	r14, r14
    55d8:	e3 94       	inc	r14
    55da:	01 c0       	rjmp	.+2      	; 0x55de <vfprintf+0x232>
    55dc:	10 e0       	ldi	r17, 0x00	; 0
    55de:	37 fe       	sbrs	r3, 7
    55e0:	06 c0       	rjmp	.+12     	; 0x55ee <vfprintf+0x242>
    55e2:	14 14       	cp	r1, r4
    55e4:	15 04       	cpc	r1, r5
    55e6:	34 f4       	brge	.+12     	; 0x55f4 <vfprintf+0x248>
    55e8:	c2 01       	movw	r24, r4
    55ea:	01 96       	adiw	r24, 0x01	; 1
    55ec:	05 c0       	rjmp	.+10     	; 0x55f8 <vfprintf+0x24c>
    55ee:	85 e0       	ldi	r24, 0x05	; 5
    55f0:	90 e0       	ldi	r25, 0x00	; 0
    55f2:	02 c0       	rjmp	.+4      	; 0x55f8 <vfprintf+0x24c>
    55f4:	81 e0       	ldi	r24, 0x01	; 1
    55f6:	90 e0       	ldi	r25, 0x00	; 0
    55f8:	21 10       	cpse	r2, r1
    55fa:	01 96       	adiw	r24, 0x01	; 1
    55fc:	11 23       	and	r17, r17
    55fe:	31 f0       	breq	.+12     	; 0x560c <vfprintf+0x260>
    5600:	21 2f       	mov	r18, r17
    5602:	30 e0       	ldi	r19, 0x00	; 0
    5604:	2f 5f       	subi	r18, 0xFF	; 255
    5606:	3f 4f       	sbci	r19, 0xFF	; 255
    5608:	82 0f       	add	r24, r18
    560a:	93 1f       	adc	r25, r19
    560c:	2f 2d       	mov	r18, r15
    560e:	30 e0       	ldi	r19, 0x00	; 0
    5610:	82 17       	cp	r24, r18
    5612:	93 07       	cpc	r25, r19
    5614:	14 f4       	brge	.+4      	; 0x561a <vfprintf+0x26e>
    5616:	f8 1a       	sub	r15, r24
    5618:	01 c0       	rjmp	.+2      	; 0x561c <vfprintf+0x270>
    561a:	f1 2c       	mov	r15, r1
    561c:	83 2d       	mov	r24, r3
    561e:	89 70       	andi	r24, 0x09	; 9
    5620:	49 f4       	brne	.+18     	; 0x5634 <vfprintf+0x288>
    5622:	ff 20       	and	r15, r15
    5624:	39 f0       	breq	.+14     	; 0x5634 <vfprintf+0x288>
    5626:	b6 01       	movw	r22, r12
    5628:	80 e2       	ldi	r24, 0x20	; 32
    562a:	90 e0       	ldi	r25, 0x00	; 0
    562c:	0e 94 be 33 	call	0x677c	; 0x677c <fputc>
    5630:	fa 94       	dec	r15
    5632:	f7 cf       	rjmp	.-18     	; 0x5622 <vfprintf+0x276>
    5634:	22 20       	and	r2, r2
    5636:	29 f0       	breq	.+10     	; 0x5642 <vfprintf+0x296>
    5638:	b6 01       	movw	r22, r12
    563a:	82 2d       	mov	r24, r2
    563c:	90 e0       	ldi	r25, 0x00	; 0
    563e:	0e 94 be 33 	call	0x677c	; 0x677c <fputc>
    5642:	33 fc       	sbrc	r3, 3
    5644:	09 c0       	rjmp	.+18     	; 0x5658 <vfprintf+0x2ac>
    5646:	ff 20       	and	r15, r15
    5648:	39 f0       	breq	.+14     	; 0x5658 <vfprintf+0x2ac>
    564a:	b6 01       	movw	r22, r12
    564c:	80 e3       	ldi	r24, 0x30	; 48
    564e:	90 e0       	ldi	r25, 0x00	; 0
    5650:	0e 94 be 33 	call	0x677c	; 0x677c <fputc>
    5654:	fa 94       	dec	r15
    5656:	f7 cf       	rjmp	.-18     	; 0x5646 <vfprintf+0x29a>
    5658:	37 fe       	sbrs	r3, 7
    565a:	5a c0       	rjmp	.+180    	; 0x5710 <vfprintf+0x364>
    565c:	94 2d       	mov	r25, r4
    565e:	85 2d       	mov	r24, r5
    5660:	57 fe       	sbrs	r5, 7
    5662:	02 c0       	rjmp	.+4      	; 0x5668 <vfprintf+0x2bc>
    5664:	90 e0       	ldi	r25, 0x00	; 0
    5666:	80 e0       	ldi	r24, 0x00	; 0
    5668:	29 2e       	mov	r2, r25
    566a:	38 2e       	mov	r3, r24
    566c:	20 e0       	ldi	r18, 0x00	; 0
    566e:	30 e0       	ldi	r19, 0x00	; 0
    5670:	a2 01       	movw	r20, r4
    5672:	4e 19       	sub	r20, r14
    5674:	51 09       	sbc	r21, r1
    5676:	5d 87       	std	Y+13, r21	; 0x0d
    5678:	4c 87       	std	Y+12, r20	; 0x0c
    567a:	a2 01       	movw	r20, r4
    567c:	42 19       	sub	r20, r2
    567e:	53 09       	sbc	r21, r3
    5680:	5f 87       	std	Y+15, r21	; 0x0f
    5682:	4e 87       	std	Y+14, r20	; 0x0e
    5684:	61 2f       	mov	r22, r17
    5686:	70 e0       	ldi	r23, 0x00	; 0
    5688:	44 27       	eor	r20, r20
    568a:	55 27       	eor	r21, r21
    568c:	46 1b       	sub	r20, r22
    568e:	57 0b       	sbc	r21, r23
    5690:	59 8b       	std	Y+17, r21	; 0x11
    5692:	48 8b       	std	Y+16, r20	; 0x10
    5694:	5f ef       	ldi	r21, 0xFF	; 255
    5696:	25 16       	cp	r2, r21
    5698:	35 06       	cpc	r3, r21
    569a:	49 f4       	brne	.+18     	; 0x56ae <vfprintf+0x302>
    569c:	b6 01       	movw	r22, r12
    569e:	8e e2       	ldi	r24, 0x2E	; 46
    56a0:	90 e0       	ldi	r25, 0x00	; 0
    56a2:	2a 8b       	std	Y+18, r18	; 0x12
    56a4:	3b 8b       	std	Y+19, r19	; 0x13
    56a6:	0e 94 be 33 	call	0x677c	; 0x677c <fputc>
    56aa:	3b 89       	ldd	r19, Y+19	; 0x13
    56ac:	2a 89       	ldd	r18, Y+18	; 0x12
    56ae:	42 14       	cp	r4, r2
    56b0:	53 04       	cpc	r5, r3
    56b2:	6c f0       	brlt	.+26     	; 0x56ce <vfprintf+0x322>
    56b4:	4c 85       	ldd	r20, Y+12	; 0x0c
    56b6:	5d 85       	ldd	r21, Y+13	; 0x0d
    56b8:	42 15       	cp	r20, r2
    56ba:	53 05       	cpc	r21, r3
    56bc:	44 f4       	brge	.+16     	; 0x56ce <vfprintf+0x322>
    56be:	ee 85       	ldd	r30, Y+14	; 0x0e
    56c0:	ff 85       	ldd	r31, Y+15	; 0x0f
    56c2:	e2 0f       	add	r30, r18
    56c4:	f3 1f       	adc	r31, r19
    56c6:	e6 0d       	add	r30, r6
    56c8:	f7 1d       	adc	r31, r7
    56ca:	81 81       	ldd	r24, Z+1	; 0x01
    56cc:	01 c0       	rjmp	.+2      	; 0x56d0 <vfprintf+0x324>
    56ce:	80 e3       	ldi	r24, 0x30	; 48
    56d0:	51 e0       	ldi	r21, 0x01	; 1
    56d2:	25 1a       	sub	r2, r21
    56d4:	31 08       	sbc	r3, r1
    56d6:	2f 5f       	subi	r18, 0xFF	; 255
    56d8:	3f 4f       	sbci	r19, 0xFF	; 255
    56da:	48 89       	ldd	r20, Y+16	; 0x10
    56dc:	59 89       	ldd	r21, Y+17	; 0x11
    56de:	24 16       	cp	r2, r20
    56e0:	35 06       	cpc	r3, r21
    56e2:	4c f0       	brlt	.+18     	; 0x56f6 <vfprintf+0x34a>
    56e4:	b6 01       	movw	r22, r12
    56e6:	90 e0       	ldi	r25, 0x00	; 0
    56e8:	2a 8b       	std	Y+18, r18	; 0x12
    56ea:	3b 8b       	std	Y+19, r19	; 0x13
    56ec:	0e 94 be 33 	call	0x677c	; 0x677c <fputc>
    56f0:	2a 89       	ldd	r18, Y+18	; 0x12
    56f2:	3b 89       	ldd	r19, Y+19	; 0x13
    56f4:	cf cf       	rjmp	.-98     	; 0x5694 <vfprintf+0x2e8>
    56f6:	24 14       	cp	r2, r4
    56f8:	35 04       	cpc	r3, r5
    56fa:	39 f4       	brne	.+14     	; 0x570a <vfprintf+0x35e>
    56fc:	9a 81       	ldd	r25, Y+2	; 0x02
    56fe:	96 33       	cpi	r25, 0x36	; 54
    5700:	18 f4       	brcc	.+6      	; 0x5708 <vfprintf+0x35c>
    5702:	95 33       	cpi	r25, 0x35	; 53
    5704:	11 f4       	brne	.+4      	; 0x570a <vfprintf+0x35e>
    5706:	04 ff       	sbrs	r16, 4
    5708:	81 e3       	ldi	r24, 0x31	; 49
    570a:	b6 01       	movw	r22, r12
    570c:	90 e0       	ldi	r25, 0x00	; 0
    570e:	49 c0       	rjmp	.+146    	; 0x57a2 <vfprintf+0x3f6>
    5710:	8a 81       	ldd	r24, Y+2	; 0x02
    5712:	81 33       	cpi	r24, 0x31	; 49
    5714:	09 f0       	breq	.+2      	; 0x5718 <vfprintf+0x36c>
    5716:	0f 7e       	andi	r16, 0xEF	; 239
    5718:	b6 01       	movw	r22, r12
    571a:	90 e0       	ldi	r25, 0x00	; 0
    571c:	0e 94 be 33 	call	0x677c	; 0x677c <fputc>
    5720:	11 11       	cpse	r17, r1
    5722:	05 c0       	rjmp	.+10     	; 0x572e <vfprintf+0x382>
    5724:	34 fc       	sbrc	r3, 4
    5726:	18 c0       	rjmp	.+48     	; 0x5758 <vfprintf+0x3ac>
    5728:	85 e6       	ldi	r24, 0x65	; 101
    572a:	90 e0       	ldi	r25, 0x00	; 0
    572c:	17 c0       	rjmp	.+46     	; 0x575c <vfprintf+0x3b0>
    572e:	b6 01       	movw	r22, r12
    5730:	8e e2       	ldi	r24, 0x2E	; 46
    5732:	90 e0       	ldi	r25, 0x00	; 0
    5734:	0e 94 be 33 	call	0x677c	; 0x677c <fputc>
    5738:	82 e0       	ldi	r24, 0x02	; 2
    573a:	ee 24       	eor	r14, r14
    573c:	e3 94       	inc	r14
    573e:	e8 0e       	add	r14, r24
    5740:	f3 01       	movw	r30, r6
    5742:	e8 0f       	add	r30, r24
    5744:	f1 1d       	adc	r31, r1
    5746:	80 81       	ld	r24, Z
    5748:	b6 01       	movw	r22, r12
    574a:	90 e0       	ldi	r25, 0x00	; 0
    574c:	0e 94 be 33 	call	0x677c	; 0x677c <fputc>
    5750:	11 50       	subi	r17, 0x01	; 1
    5752:	8e 2d       	mov	r24, r14
    5754:	91 f7       	brne	.-28     	; 0x573a <vfprintf+0x38e>
    5756:	e6 cf       	rjmp	.-52     	; 0x5724 <vfprintf+0x378>
    5758:	85 e4       	ldi	r24, 0x45	; 69
    575a:	90 e0       	ldi	r25, 0x00	; 0
    575c:	b6 01       	movw	r22, r12
    575e:	0e 94 be 33 	call	0x677c	; 0x677c <fputc>
    5762:	57 fc       	sbrc	r5, 7
    5764:	05 c0       	rjmp	.+10     	; 0x5770 <vfprintf+0x3c4>
    5766:	41 14       	cp	r4, r1
    5768:	51 04       	cpc	r5, r1
    576a:	39 f4       	brne	.+14     	; 0x577a <vfprintf+0x3ce>
    576c:	04 ff       	sbrs	r16, 4
    576e:	05 c0       	rjmp	.+10     	; 0x577a <vfprintf+0x3ce>
    5770:	51 94       	neg	r5
    5772:	41 94       	neg	r4
    5774:	51 08       	sbc	r5, r1
    5776:	8d e2       	ldi	r24, 0x2D	; 45
    5778:	01 c0       	rjmp	.+2      	; 0x577c <vfprintf+0x3d0>
    577a:	8b e2       	ldi	r24, 0x2B	; 43
    577c:	b6 01       	movw	r22, r12
    577e:	90 e0       	ldi	r25, 0x00	; 0
    5780:	fd d7       	rcall	.+4090   	; 0x677c <fputc>
    5782:	80 e3       	ldi	r24, 0x30	; 48
    5784:	9a e0       	ldi	r25, 0x0A	; 10
    5786:	49 16       	cp	r4, r25
    5788:	51 04       	cpc	r5, r1
    578a:	2c f0       	brlt	.+10     	; 0x5796 <vfprintf+0x3ea>
    578c:	8f 5f       	subi	r24, 0xFF	; 255
    578e:	5a e0       	ldi	r21, 0x0A	; 10
    5790:	45 1a       	sub	r4, r21
    5792:	51 08       	sbc	r5, r1
    5794:	f7 cf       	rjmp	.-18     	; 0x5784 <vfprintf+0x3d8>
    5796:	b6 01       	movw	r22, r12
    5798:	90 e0       	ldi	r25, 0x00	; 0
    579a:	f0 d7       	rcall	.+4064   	; 0x677c <fputc>
    579c:	b6 01       	movw	r22, r12
    579e:	c2 01       	movw	r24, r4
    57a0:	c0 96       	adiw	r24, 0x30	; 48
    57a2:	ec d7       	rcall	.+4056   	; 0x677c <fputc>
    57a4:	4c c1       	rjmp	.+664    	; 0x5a3e <vfprintf+0x692>
    57a6:	83 36       	cpi	r24, 0x63	; 99
    57a8:	31 f0       	breq	.+12     	; 0x57b6 <vfprintf+0x40a>
    57aa:	83 37       	cpi	r24, 0x73	; 115
    57ac:	79 f0       	breq	.+30     	; 0x57cc <vfprintf+0x420>
    57ae:	83 35       	cpi	r24, 0x53	; 83
    57b0:	09 f0       	breq	.+2      	; 0x57b4 <vfprintf+0x408>
    57b2:	54 c0       	rjmp	.+168    	; 0x585c <vfprintf+0x4b0>
    57b4:	20 c0       	rjmp	.+64     	; 0x57f6 <vfprintf+0x44a>
    57b6:	52 01       	movw	r10, r4
    57b8:	e2 e0       	ldi	r30, 0x02	; 2
    57ba:	ae 0e       	add	r10, r30
    57bc:	b1 1c       	adc	r11, r1
    57be:	f2 01       	movw	r30, r4
    57c0:	80 81       	ld	r24, Z
    57c2:	89 83       	std	Y+1, r24	; 0x01
    57c4:	01 e0       	ldi	r16, 0x01	; 1
    57c6:	10 e0       	ldi	r17, 0x00	; 0
    57c8:	23 01       	movw	r4, r6
    57ca:	13 c0       	rjmp	.+38     	; 0x57f2 <vfprintf+0x446>
    57cc:	52 01       	movw	r10, r4
    57ce:	f2 e0       	ldi	r31, 0x02	; 2
    57d0:	af 0e       	add	r10, r31
    57d2:	b1 1c       	adc	r11, r1
    57d4:	f2 01       	movw	r30, r4
    57d6:	40 80       	ld	r4, Z
    57d8:	51 80       	ldd	r5, Z+1	; 0x01
    57da:	26 ff       	sbrs	r18, 6
    57dc:	03 c0       	rjmp	.+6      	; 0x57e4 <vfprintf+0x438>
    57de:	61 2f       	mov	r22, r17
    57e0:	70 e0       	ldi	r23, 0x00	; 0
    57e2:	02 c0       	rjmp	.+4      	; 0x57e8 <vfprintf+0x43c>
    57e4:	6f ef       	ldi	r22, 0xFF	; 255
    57e6:	7f ef       	ldi	r23, 0xFF	; 255
    57e8:	c2 01       	movw	r24, r4
    57ea:	2a 8b       	std	Y+18, r18	; 0x12
    57ec:	79 d7       	rcall	.+3826   	; 0x66e0 <strnlen>
    57ee:	8c 01       	movw	r16, r24
    57f0:	2a 89       	ldd	r18, Y+18	; 0x12
    57f2:	2f 77       	andi	r18, 0x7F	; 127
    57f4:	14 c0       	rjmp	.+40     	; 0x581e <vfprintf+0x472>
    57f6:	52 01       	movw	r10, r4
    57f8:	f2 e0       	ldi	r31, 0x02	; 2
    57fa:	af 0e       	add	r10, r31
    57fc:	b1 1c       	adc	r11, r1
    57fe:	f2 01       	movw	r30, r4
    5800:	40 80       	ld	r4, Z
    5802:	51 80       	ldd	r5, Z+1	; 0x01
    5804:	26 ff       	sbrs	r18, 6
    5806:	03 c0       	rjmp	.+6      	; 0x580e <vfprintf+0x462>
    5808:	61 2f       	mov	r22, r17
    580a:	70 e0       	ldi	r23, 0x00	; 0
    580c:	02 c0       	rjmp	.+4      	; 0x5812 <vfprintf+0x466>
    580e:	6f ef       	ldi	r22, 0xFF	; 255
    5810:	7f ef       	ldi	r23, 0xFF	; 255
    5812:	c2 01       	movw	r24, r4
    5814:	2a 8b       	std	Y+18, r18	; 0x12
    5816:	19 d7       	rcall	.+3634   	; 0x664a <strnlen_P>
    5818:	8c 01       	movw	r16, r24
    581a:	2a 89       	ldd	r18, Y+18	; 0x12
    581c:	20 68       	ori	r18, 0x80	; 128
    581e:	32 2e       	mov	r3, r18
    5820:	23 fd       	sbrc	r18, 3
    5822:	18 c0       	rjmp	.+48     	; 0x5854 <vfprintf+0x4a8>
    5824:	8f 2d       	mov	r24, r15
    5826:	90 e0       	ldi	r25, 0x00	; 0
    5828:	08 17       	cp	r16, r24
    582a:	19 07       	cpc	r17, r25
    582c:	98 f4       	brcc	.+38     	; 0x5854 <vfprintf+0x4a8>
    582e:	b6 01       	movw	r22, r12
    5830:	80 e2       	ldi	r24, 0x20	; 32
    5832:	90 e0       	ldi	r25, 0x00	; 0
    5834:	a3 d7       	rcall	.+3910   	; 0x677c <fputc>
    5836:	fa 94       	dec	r15
    5838:	f5 cf       	rjmp	.-22     	; 0x5824 <vfprintf+0x478>
    583a:	f2 01       	movw	r30, r4
    583c:	37 fc       	sbrc	r3, 7
    583e:	85 91       	lpm	r24, Z+
    5840:	37 fe       	sbrs	r3, 7
    5842:	81 91       	ld	r24, Z+
    5844:	2f 01       	movw	r4, r30
    5846:	b6 01       	movw	r22, r12
    5848:	90 e0       	ldi	r25, 0x00	; 0
    584a:	98 d7       	rcall	.+3888   	; 0x677c <fputc>
    584c:	f1 10       	cpse	r15, r1
    584e:	fa 94       	dec	r15
    5850:	01 50       	subi	r16, 0x01	; 1
    5852:	11 09       	sbc	r17, r1
    5854:	01 15       	cp	r16, r1
    5856:	11 05       	cpc	r17, r1
    5858:	81 f7       	brne	.-32     	; 0x583a <vfprintf+0x48e>
    585a:	f1 c0       	rjmp	.+482    	; 0x5a3e <vfprintf+0x692>
    585c:	84 36       	cpi	r24, 0x64	; 100
    585e:	11 f0       	breq	.+4      	; 0x5864 <vfprintf+0x4b8>
    5860:	89 36       	cpi	r24, 0x69	; 105
    5862:	51 f5       	brne	.+84     	; 0x58b8 <vfprintf+0x50c>
    5864:	52 01       	movw	r10, r4
    5866:	27 ff       	sbrs	r18, 7
    5868:	09 c0       	rjmp	.+18     	; 0x587c <vfprintf+0x4d0>
    586a:	f4 e0       	ldi	r31, 0x04	; 4
    586c:	af 0e       	add	r10, r31
    586e:	b1 1c       	adc	r11, r1
    5870:	f2 01       	movw	r30, r4
    5872:	60 81       	ld	r22, Z
    5874:	71 81       	ldd	r23, Z+1	; 0x01
    5876:	82 81       	ldd	r24, Z+2	; 0x02
    5878:	93 81       	ldd	r25, Z+3	; 0x03
    587a:	0a c0       	rjmp	.+20     	; 0x5890 <vfprintf+0x4e4>
    587c:	f2 e0       	ldi	r31, 0x02	; 2
    587e:	af 0e       	add	r10, r31
    5880:	b1 1c       	adc	r11, r1
    5882:	f2 01       	movw	r30, r4
    5884:	60 81       	ld	r22, Z
    5886:	71 81       	ldd	r23, Z+1	; 0x01
    5888:	07 2e       	mov	r0, r23
    588a:	00 0c       	add	r0, r0
    588c:	88 0b       	sbc	r24, r24
    588e:	99 0b       	sbc	r25, r25
    5890:	2f 76       	andi	r18, 0x6F	; 111
    5892:	32 2e       	mov	r3, r18
    5894:	97 ff       	sbrs	r25, 7
    5896:	09 c0       	rjmp	.+18     	; 0x58aa <vfprintf+0x4fe>
    5898:	90 95       	com	r25
    589a:	80 95       	com	r24
    589c:	70 95       	com	r23
    589e:	61 95       	neg	r22
    58a0:	7f 4f       	sbci	r23, 0xFF	; 255
    58a2:	8f 4f       	sbci	r24, 0xFF	; 255
    58a4:	9f 4f       	sbci	r25, 0xFF	; 255
    58a6:	20 68       	ori	r18, 0x80	; 128
    58a8:	32 2e       	mov	r3, r18
    58aa:	2a e0       	ldi	r18, 0x0A	; 10
    58ac:	30 e0       	ldi	r19, 0x00	; 0
    58ae:	a3 01       	movw	r20, r6
    58b0:	cd d7       	rcall	.+3994   	; 0x684c <__ultoa_invert>
    58b2:	e8 2e       	mov	r14, r24
    58b4:	e6 18       	sub	r14, r6
    58b6:	3e c0       	rjmp	.+124    	; 0x5934 <vfprintf+0x588>
    58b8:	02 2f       	mov	r16, r18
    58ba:	85 37       	cpi	r24, 0x75	; 117
    58bc:	21 f4       	brne	.+8      	; 0x58c6 <vfprintf+0x51a>
    58be:	0f 7e       	andi	r16, 0xEF	; 239
    58c0:	2a e0       	ldi	r18, 0x0A	; 10
    58c2:	30 e0       	ldi	r19, 0x00	; 0
    58c4:	1d c0       	rjmp	.+58     	; 0x5900 <vfprintf+0x554>
    58c6:	09 7f       	andi	r16, 0xF9	; 249
    58c8:	8f 36       	cpi	r24, 0x6F	; 111
    58ca:	91 f0       	breq	.+36     	; 0x58f0 <vfprintf+0x544>
    58cc:	18 f4       	brcc	.+6      	; 0x58d4 <vfprintf+0x528>
    58ce:	88 35       	cpi	r24, 0x58	; 88
    58d0:	59 f0       	breq	.+22     	; 0x58e8 <vfprintf+0x53c>
    58d2:	be c0       	rjmp	.+380    	; 0x5a50 <vfprintf+0x6a4>
    58d4:	80 37       	cpi	r24, 0x70	; 112
    58d6:	19 f0       	breq	.+6      	; 0x58de <vfprintf+0x532>
    58d8:	88 37       	cpi	r24, 0x78	; 120
    58da:	11 f0       	breq	.+4      	; 0x58e0 <vfprintf+0x534>
    58dc:	b9 c0       	rjmp	.+370    	; 0x5a50 <vfprintf+0x6a4>
    58de:	00 61       	ori	r16, 0x10	; 16
    58e0:	04 ff       	sbrs	r16, 4
    58e2:	09 c0       	rjmp	.+18     	; 0x58f6 <vfprintf+0x54a>
    58e4:	04 60       	ori	r16, 0x04	; 4
    58e6:	07 c0       	rjmp	.+14     	; 0x58f6 <vfprintf+0x54a>
    58e8:	24 ff       	sbrs	r18, 4
    58ea:	08 c0       	rjmp	.+16     	; 0x58fc <vfprintf+0x550>
    58ec:	06 60       	ori	r16, 0x06	; 6
    58ee:	06 c0       	rjmp	.+12     	; 0x58fc <vfprintf+0x550>
    58f0:	28 e0       	ldi	r18, 0x08	; 8
    58f2:	30 e0       	ldi	r19, 0x00	; 0
    58f4:	05 c0       	rjmp	.+10     	; 0x5900 <vfprintf+0x554>
    58f6:	20 e1       	ldi	r18, 0x10	; 16
    58f8:	30 e0       	ldi	r19, 0x00	; 0
    58fa:	02 c0       	rjmp	.+4      	; 0x5900 <vfprintf+0x554>
    58fc:	20 e1       	ldi	r18, 0x10	; 16
    58fe:	32 e0       	ldi	r19, 0x02	; 2
    5900:	52 01       	movw	r10, r4
    5902:	07 ff       	sbrs	r16, 7
    5904:	09 c0       	rjmp	.+18     	; 0x5918 <vfprintf+0x56c>
    5906:	f4 e0       	ldi	r31, 0x04	; 4
    5908:	af 0e       	add	r10, r31
    590a:	b1 1c       	adc	r11, r1
    590c:	f2 01       	movw	r30, r4
    590e:	60 81       	ld	r22, Z
    5910:	71 81       	ldd	r23, Z+1	; 0x01
    5912:	82 81       	ldd	r24, Z+2	; 0x02
    5914:	93 81       	ldd	r25, Z+3	; 0x03
    5916:	08 c0       	rjmp	.+16     	; 0x5928 <vfprintf+0x57c>
    5918:	f2 e0       	ldi	r31, 0x02	; 2
    591a:	af 0e       	add	r10, r31
    591c:	b1 1c       	adc	r11, r1
    591e:	f2 01       	movw	r30, r4
    5920:	60 81       	ld	r22, Z
    5922:	71 81       	ldd	r23, Z+1	; 0x01
    5924:	80 e0       	ldi	r24, 0x00	; 0
    5926:	90 e0       	ldi	r25, 0x00	; 0
    5928:	a3 01       	movw	r20, r6
    592a:	90 d7       	rcall	.+3872   	; 0x684c <__ultoa_invert>
    592c:	e8 2e       	mov	r14, r24
    592e:	e6 18       	sub	r14, r6
    5930:	0f 77       	andi	r16, 0x7F	; 127
    5932:	30 2e       	mov	r3, r16
    5934:	36 fe       	sbrs	r3, 6
    5936:	0b c0       	rjmp	.+22     	; 0x594e <vfprintf+0x5a2>
    5938:	33 2d       	mov	r19, r3
    593a:	3e 7f       	andi	r19, 0xFE	; 254
    593c:	e1 16       	cp	r14, r17
    593e:	50 f4       	brcc	.+20     	; 0x5954 <vfprintf+0x5a8>
    5940:	34 fe       	sbrs	r3, 4
    5942:	0a c0       	rjmp	.+20     	; 0x5958 <vfprintf+0x5ac>
    5944:	32 fc       	sbrc	r3, 2
    5946:	08 c0       	rjmp	.+16     	; 0x5958 <vfprintf+0x5ac>
    5948:	33 2d       	mov	r19, r3
    594a:	3e 7e       	andi	r19, 0xEE	; 238
    594c:	05 c0       	rjmp	.+10     	; 0x5958 <vfprintf+0x5ac>
    594e:	0e 2d       	mov	r16, r14
    5950:	33 2d       	mov	r19, r3
    5952:	03 c0       	rjmp	.+6      	; 0x595a <vfprintf+0x5ae>
    5954:	0e 2d       	mov	r16, r14
    5956:	01 c0       	rjmp	.+2      	; 0x595a <vfprintf+0x5ae>
    5958:	01 2f       	mov	r16, r17
    595a:	34 ff       	sbrs	r19, 4
    595c:	0c c0       	rjmp	.+24     	; 0x5976 <vfprintf+0x5ca>
    595e:	fe 01       	movw	r30, r28
    5960:	ee 0d       	add	r30, r14
    5962:	f1 1d       	adc	r31, r1
    5964:	80 81       	ld	r24, Z
    5966:	80 33       	cpi	r24, 0x30	; 48
    5968:	11 f4       	brne	.+4      	; 0x596e <vfprintf+0x5c2>
    596a:	39 7e       	andi	r19, 0xE9	; 233
    596c:	08 c0       	rjmp	.+16     	; 0x597e <vfprintf+0x5d2>
    596e:	32 ff       	sbrs	r19, 2
    5970:	05 c0       	rjmp	.+10     	; 0x597c <vfprintf+0x5d0>
    5972:	0e 5f       	subi	r16, 0xFE	; 254
    5974:	04 c0       	rjmp	.+8      	; 0x597e <vfprintf+0x5d2>
    5976:	83 2f       	mov	r24, r19
    5978:	86 78       	andi	r24, 0x86	; 134
    597a:	09 f0       	breq	.+2      	; 0x597e <vfprintf+0x5d2>
    597c:	0f 5f       	subi	r16, 0xFF	; 255
    597e:	33 fd       	sbrc	r19, 3
    5980:	12 c0       	rjmp	.+36     	; 0x59a6 <vfprintf+0x5fa>
    5982:	30 ff       	sbrs	r19, 0
    5984:	06 c0       	rjmp	.+12     	; 0x5992 <vfprintf+0x5e6>
    5986:	1e 2d       	mov	r17, r14
    5988:	0f 15       	cp	r16, r15
    598a:	18 f4       	brcc	.+6      	; 0x5992 <vfprintf+0x5e6>
    598c:	1f 0d       	add	r17, r15
    598e:	10 1b       	sub	r17, r16
    5990:	0f 2d       	mov	r16, r15
    5992:	0f 15       	cp	r16, r15
    5994:	60 f4       	brcc	.+24     	; 0x59ae <vfprintf+0x602>
    5996:	b6 01       	movw	r22, r12
    5998:	80 e2       	ldi	r24, 0x20	; 32
    599a:	90 e0       	ldi	r25, 0x00	; 0
    599c:	3b 8b       	std	Y+19, r19	; 0x13
    599e:	ee d6       	rcall	.+3548   	; 0x677c <fputc>
    59a0:	0f 5f       	subi	r16, 0xFF	; 255
    59a2:	3b 89       	ldd	r19, Y+19	; 0x13
    59a4:	f6 cf       	rjmp	.-20     	; 0x5992 <vfprintf+0x5e6>
    59a6:	0f 15       	cp	r16, r15
    59a8:	10 f4       	brcc	.+4      	; 0x59ae <vfprintf+0x602>
    59aa:	f0 1a       	sub	r15, r16
    59ac:	01 c0       	rjmp	.+2      	; 0x59b0 <vfprintf+0x604>
    59ae:	f1 2c       	mov	r15, r1
    59b0:	34 ff       	sbrs	r19, 4
    59b2:	11 c0       	rjmp	.+34     	; 0x59d6 <vfprintf+0x62a>
    59b4:	b6 01       	movw	r22, r12
    59b6:	80 e3       	ldi	r24, 0x30	; 48
    59b8:	90 e0       	ldi	r25, 0x00	; 0
    59ba:	3b 8b       	std	Y+19, r19	; 0x13
    59bc:	df d6       	rcall	.+3518   	; 0x677c <fputc>
    59be:	3b 89       	ldd	r19, Y+19	; 0x13
    59c0:	32 ff       	sbrs	r19, 2
    59c2:	16 c0       	rjmp	.+44     	; 0x59f0 <vfprintf+0x644>
    59c4:	31 fd       	sbrc	r19, 1
    59c6:	03 c0       	rjmp	.+6      	; 0x59ce <vfprintf+0x622>
    59c8:	88 e7       	ldi	r24, 0x78	; 120
    59ca:	90 e0       	ldi	r25, 0x00	; 0
    59cc:	02 c0       	rjmp	.+4      	; 0x59d2 <vfprintf+0x626>
    59ce:	88 e5       	ldi	r24, 0x58	; 88
    59d0:	90 e0       	ldi	r25, 0x00	; 0
    59d2:	b6 01       	movw	r22, r12
    59d4:	0c c0       	rjmp	.+24     	; 0x59ee <vfprintf+0x642>
    59d6:	83 2f       	mov	r24, r19
    59d8:	86 78       	andi	r24, 0x86	; 134
    59da:	51 f0       	breq	.+20     	; 0x59f0 <vfprintf+0x644>
    59dc:	31 ff       	sbrs	r19, 1
    59de:	02 c0       	rjmp	.+4      	; 0x59e4 <vfprintf+0x638>
    59e0:	8b e2       	ldi	r24, 0x2B	; 43
    59e2:	01 c0       	rjmp	.+2      	; 0x59e6 <vfprintf+0x63a>
    59e4:	80 e2       	ldi	r24, 0x20	; 32
    59e6:	37 fd       	sbrc	r19, 7
    59e8:	8d e2       	ldi	r24, 0x2D	; 45
    59ea:	b6 01       	movw	r22, r12
    59ec:	90 e0       	ldi	r25, 0x00	; 0
    59ee:	c6 d6       	rcall	.+3468   	; 0x677c <fputc>
    59f0:	e1 16       	cp	r14, r17
    59f2:	30 f4       	brcc	.+12     	; 0x5a00 <vfprintf+0x654>
    59f4:	b6 01       	movw	r22, r12
    59f6:	80 e3       	ldi	r24, 0x30	; 48
    59f8:	90 e0       	ldi	r25, 0x00	; 0
    59fa:	c0 d6       	rcall	.+3456   	; 0x677c <fputc>
    59fc:	11 50       	subi	r17, 0x01	; 1
    59fe:	f8 cf       	rjmp	.-16     	; 0x59f0 <vfprintf+0x644>
    5a00:	ea 94       	dec	r14
    5a02:	f3 01       	movw	r30, r6
    5a04:	ee 0d       	add	r30, r14
    5a06:	f1 1d       	adc	r31, r1
    5a08:	80 81       	ld	r24, Z
    5a0a:	b6 01       	movw	r22, r12
    5a0c:	90 e0       	ldi	r25, 0x00	; 0
    5a0e:	b6 d6       	rcall	.+3436   	; 0x677c <fputc>
    5a10:	e1 10       	cpse	r14, r1
    5a12:	f6 cf       	rjmp	.-20     	; 0x5a00 <vfprintf+0x654>
    5a14:	14 c0       	rjmp	.+40     	; 0x5a3e <vfprintf+0x692>
    5a16:	f4 e0       	ldi	r31, 0x04	; 4
    5a18:	ff 15       	cp	r31, r15
    5a1a:	48 f5       	brcc	.+82     	; 0x5a6e <vfprintf+0x6c2>
    5a1c:	84 e0       	ldi	r24, 0x04	; 4
    5a1e:	f8 1a       	sub	r15, r24
    5a20:	33 fe       	sbrs	r3, 3
    5a22:	1d c0       	rjmp	.+58     	; 0x5a5e <vfprintf+0x6b2>
    5a24:	21 10       	cpse	r2, r1
    5a26:	24 c0       	rjmp	.+72     	; 0x5a70 <vfprintf+0x6c4>
    5a28:	03 ff       	sbrs	r16, 3
    5a2a:	27 c0       	rjmp	.+78     	; 0x5a7a <vfprintf+0x6ce>
    5a2c:	0c ec       	ldi	r16, 0xCC	; 204
    5a2e:	11 e0       	ldi	r17, 0x01	; 1
    5a30:	f3 2d       	mov	r31, r3
    5a32:	f0 71       	andi	r31, 0x10	; 16
    5a34:	3f 2e       	mov	r3, r31
    5a36:	f8 01       	movw	r30, r16
    5a38:	84 91       	lpm	r24, Z
    5a3a:	81 11       	cpse	r24, r1
    5a3c:	21 c0       	rjmp	.+66     	; 0x5a80 <vfprintf+0x6d4>
    5a3e:	ff 20       	and	r15, r15
    5a40:	09 f4       	brne	.+2      	; 0x5a44 <vfprintf+0x698>
    5a42:	f4 cc       	rjmp	.-1560   	; 0x542c <vfprintf+0x80>
    5a44:	b6 01       	movw	r22, r12
    5a46:	80 e2       	ldi	r24, 0x20	; 32
    5a48:	90 e0       	ldi	r25, 0x00	; 0
    5a4a:	98 d6       	rcall	.+3376   	; 0x677c <fputc>
    5a4c:	fa 94       	dec	r15
    5a4e:	f7 cf       	rjmp	.-18     	; 0x5a3e <vfprintf+0x692>
    5a50:	f6 01       	movw	r30, r12
    5a52:	86 81       	ldd	r24, Z+6	; 0x06
    5a54:	97 81       	ldd	r25, Z+7	; 0x07
    5a56:	23 c0       	rjmp	.+70     	; 0x5a9e <vfprintf+0x6f2>
    5a58:	8f ef       	ldi	r24, 0xFF	; 255
    5a5a:	9f ef       	ldi	r25, 0xFF	; 255
    5a5c:	20 c0       	rjmp	.+64     	; 0x5a9e <vfprintf+0x6f2>
    5a5e:	b6 01       	movw	r22, r12
    5a60:	80 e2       	ldi	r24, 0x20	; 32
    5a62:	90 e0       	ldi	r25, 0x00	; 0
    5a64:	8b d6       	rcall	.+3350   	; 0x677c <fputc>
    5a66:	fa 94       	dec	r15
    5a68:	f1 10       	cpse	r15, r1
    5a6a:	f9 cf       	rjmp	.-14     	; 0x5a5e <vfprintf+0x6b2>
    5a6c:	db cf       	rjmp	.-74     	; 0x5a24 <vfprintf+0x678>
    5a6e:	f1 2c       	mov	r15, r1
    5a70:	b6 01       	movw	r22, r12
    5a72:	82 2d       	mov	r24, r2
    5a74:	90 e0       	ldi	r25, 0x00	; 0
    5a76:	82 d6       	rcall	.+3332   	; 0x677c <fputc>
    5a78:	d7 cf       	rjmp	.-82     	; 0x5a28 <vfprintf+0x67c>
    5a7a:	00 ed       	ldi	r16, 0xD0	; 208
    5a7c:	11 e0       	ldi	r17, 0x01	; 1
    5a7e:	d8 cf       	rjmp	.-80     	; 0x5a30 <vfprintf+0x684>
    5a80:	31 10       	cpse	r3, r1
    5a82:	80 52       	subi	r24, 0x20	; 32
    5a84:	b6 01       	movw	r22, r12
    5a86:	90 e0       	ldi	r25, 0x00	; 0
    5a88:	79 d6       	rcall	.+3314   	; 0x677c <fputc>
    5a8a:	0f 5f       	subi	r16, 0xFF	; 255
    5a8c:	1f 4f       	sbci	r17, 0xFF	; 255
    5a8e:	d3 cf       	rjmp	.-90     	; 0x5a36 <vfprintf+0x68a>
    5a90:	23 e0       	ldi	r18, 0x03	; 3
    5a92:	2f 15       	cp	r18, r15
    5a94:	10 f4       	brcc	.+4      	; 0x5a9a <vfprintf+0x6ee>
    5a96:	83 e0       	ldi	r24, 0x03	; 3
    5a98:	c2 cf       	rjmp	.-124    	; 0x5a1e <vfprintf+0x672>
    5a9a:	f1 2c       	mov	r15, r1
    5a9c:	c5 cf       	rjmp	.-118    	; 0x5a28 <vfprintf+0x67c>
    5a9e:	63 96       	adiw	r28, 0x13	; 19
    5aa0:	0f b6       	in	r0, 0x3f	; 63
    5aa2:	f8 94       	cli
    5aa4:	de bf       	out	0x3e, r29	; 62
    5aa6:	0f be       	out	0x3f, r0	; 63
    5aa8:	cd bf       	out	0x3d, r28	; 61
    5aaa:	df 91       	pop	r29
    5aac:	cf 91       	pop	r28
    5aae:	1f 91       	pop	r17
    5ab0:	0f 91       	pop	r16
    5ab2:	ff 90       	pop	r15
    5ab4:	ef 90       	pop	r14
    5ab6:	df 90       	pop	r13
    5ab8:	cf 90       	pop	r12
    5aba:	bf 90       	pop	r11
    5abc:	af 90       	pop	r10
    5abe:	9f 90       	pop	r9
    5ac0:	8f 90       	pop	r8
    5ac2:	7f 90       	pop	r7
    5ac4:	6f 90       	pop	r6
    5ac6:	5f 90       	pop	r5
    5ac8:	4f 90       	pop	r4
    5aca:	3f 90       	pop	r3
    5acc:	2f 90       	pop	r2
    5ace:	08 95       	ret

00005ad0 <__subsf3>:
    5ad0:	50 58       	subi	r21, 0x80	; 128

00005ad2 <__addsf3>:
    5ad2:	bb 27       	eor	r27, r27
    5ad4:	aa 27       	eor	r26, r26
    5ad6:	0e d0       	rcall	.+28     	; 0x5af4 <__addsf3x>
    5ad8:	48 c1       	rjmp	.+656    	; 0x5d6a <__fp_round>
    5ada:	39 d1       	rcall	.+626    	; 0x5d4e <__fp_pscA>
    5adc:	30 f0       	brcs	.+12     	; 0x5aea <__addsf3+0x18>
    5ade:	3e d1       	rcall	.+636    	; 0x5d5c <__fp_pscB>
    5ae0:	20 f0       	brcs	.+8      	; 0x5aea <__addsf3+0x18>
    5ae2:	31 f4       	brne	.+12     	; 0x5af0 <__addsf3+0x1e>
    5ae4:	9f 3f       	cpi	r25, 0xFF	; 255
    5ae6:	11 f4       	brne	.+4      	; 0x5aec <__addsf3+0x1a>
    5ae8:	1e f4       	brtc	.+6      	; 0x5af0 <__addsf3+0x1e>
    5aea:	2e c1       	rjmp	.+604    	; 0x5d48 <__fp_nan>
    5aec:	0e f4       	brtc	.+2      	; 0x5af0 <__addsf3+0x1e>
    5aee:	e0 95       	com	r30
    5af0:	e7 fb       	bst	r30, 7
    5af2:	24 c1       	rjmp	.+584    	; 0x5d3c <__fp_inf>

00005af4 <__addsf3x>:
    5af4:	e9 2f       	mov	r30, r25
    5af6:	4a d1       	rcall	.+660    	; 0x5d8c <__fp_split3>
    5af8:	80 f3       	brcs	.-32     	; 0x5ada <__addsf3+0x8>
    5afa:	ba 17       	cp	r27, r26
    5afc:	62 07       	cpc	r22, r18
    5afe:	73 07       	cpc	r23, r19
    5b00:	84 07       	cpc	r24, r20
    5b02:	95 07       	cpc	r25, r21
    5b04:	18 f0       	brcs	.+6      	; 0x5b0c <__addsf3x+0x18>
    5b06:	71 f4       	brne	.+28     	; 0x5b24 <__addsf3x+0x30>
    5b08:	9e f5       	brtc	.+102    	; 0x5b70 <__addsf3x+0x7c>
    5b0a:	62 c1       	rjmp	.+708    	; 0x5dd0 <__fp_zero>
    5b0c:	0e f4       	brtc	.+2      	; 0x5b10 <__addsf3x+0x1c>
    5b0e:	e0 95       	com	r30
    5b10:	0b 2e       	mov	r0, r27
    5b12:	ba 2f       	mov	r27, r26
    5b14:	a0 2d       	mov	r26, r0
    5b16:	0b 01       	movw	r0, r22
    5b18:	b9 01       	movw	r22, r18
    5b1a:	90 01       	movw	r18, r0
    5b1c:	0c 01       	movw	r0, r24
    5b1e:	ca 01       	movw	r24, r20
    5b20:	a0 01       	movw	r20, r0
    5b22:	11 24       	eor	r1, r1
    5b24:	ff 27       	eor	r31, r31
    5b26:	59 1b       	sub	r21, r25
    5b28:	99 f0       	breq	.+38     	; 0x5b50 <__addsf3x+0x5c>
    5b2a:	59 3f       	cpi	r21, 0xF9	; 249
    5b2c:	50 f4       	brcc	.+20     	; 0x5b42 <__addsf3x+0x4e>
    5b2e:	50 3e       	cpi	r21, 0xE0	; 224
    5b30:	68 f1       	brcs	.+90     	; 0x5b8c <__addsf3x+0x98>
    5b32:	1a 16       	cp	r1, r26
    5b34:	f0 40       	sbci	r31, 0x00	; 0
    5b36:	a2 2f       	mov	r26, r18
    5b38:	23 2f       	mov	r18, r19
    5b3a:	34 2f       	mov	r19, r20
    5b3c:	44 27       	eor	r20, r20
    5b3e:	58 5f       	subi	r21, 0xF8	; 248
    5b40:	f3 cf       	rjmp	.-26     	; 0x5b28 <__addsf3x+0x34>
    5b42:	46 95       	lsr	r20
    5b44:	37 95       	ror	r19
    5b46:	27 95       	ror	r18
    5b48:	a7 95       	ror	r26
    5b4a:	f0 40       	sbci	r31, 0x00	; 0
    5b4c:	53 95       	inc	r21
    5b4e:	c9 f7       	brne	.-14     	; 0x5b42 <__addsf3x+0x4e>
    5b50:	7e f4       	brtc	.+30     	; 0x5b70 <__addsf3x+0x7c>
    5b52:	1f 16       	cp	r1, r31
    5b54:	ba 0b       	sbc	r27, r26
    5b56:	62 0b       	sbc	r22, r18
    5b58:	73 0b       	sbc	r23, r19
    5b5a:	84 0b       	sbc	r24, r20
    5b5c:	ba f0       	brmi	.+46     	; 0x5b8c <__addsf3x+0x98>
    5b5e:	91 50       	subi	r25, 0x01	; 1
    5b60:	a1 f0       	breq	.+40     	; 0x5b8a <__addsf3x+0x96>
    5b62:	ff 0f       	add	r31, r31
    5b64:	bb 1f       	adc	r27, r27
    5b66:	66 1f       	adc	r22, r22
    5b68:	77 1f       	adc	r23, r23
    5b6a:	88 1f       	adc	r24, r24
    5b6c:	c2 f7       	brpl	.-16     	; 0x5b5e <__addsf3x+0x6a>
    5b6e:	0e c0       	rjmp	.+28     	; 0x5b8c <__addsf3x+0x98>
    5b70:	ba 0f       	add	r27, r26
    5b72:	62 1f       	adc	r22, r18
    5b74:	73 1f       	adc	r23, r19
    5b76:	84 1f       	adc	r24, r20
    5b78:	48 f4       	brcc	.+18     	; 0x5b8c <__addsf3x+0x98>
    5b7a:	87 95       	ror	r24
    5b7c:	77 95       	ror	r23
    5b7e:	67 95       	ror	r22
    5b80:	b7 95       	ror	r27
    5b82:	f7 95       	ror	r31
    5b84:	9e 3f       	cpi	r25, 0xFE	; 254
    5b86:	08 f0       	brcs	.+2      	; 0x5b8a <__addsf3x+0x96>
    5b88:	b3 cf       	rjmp	.-154    	; 0x5af0 <__addsf3+0x1e>
    5b8a:	93 95       	inc	r25
    5b8c:	88 0f       	add	r24, r24
    5b8e:	08 f0       	brcs	.+2      	; 0x5b92 <__addsf3x+0x9e>
    5b90:	99 27       	eor	r25, r25
    5b92:	ee 0f       	add	r30, r30
    5b94:	97 95       	ror	r25
    5b96:	87 95       	ror	r24
    5b98:	08 95       	ret

00005b9a <__divsf3>:
    5b9a:	0c d0       	rcall	.+24     	; 0x5bb4 <__divsf3x>
    5b9c:	e6 c0       	rjmp	.+460    	; 0x5d6a <__fp_round>
    5b9e:	de d0       	rcall	.+444    	; 0x5d5c <__fp_pscB>
    5ba0:	40 f0       	brcs	.+16     	; 0x5bb2 <__divsf3+0x18>
    5ba2:	d5 d0       	rcall	.+426    	; 0x5d4e <__fp_pscA>
    5ba4:	30 f0       	brcs	.+12     	; 0x5bb2 <__divsf3+0x18>
    5ba6:	21 f4       	brne	.+8      	; 0x5bb0 <__divsf3+0x16>
    5ba8:	5f 3f       	cpi	r21, 0xFF	; 255
    5baa:	19 f0       	breq	.+6      	; 0x5bb2 <__divsf3+0x18>
    5bac:	c7 c0       	rjmp	.+398    	; 0x5d3c <__fp_inf>
    5bae:	51 11       	cpse	r21, r1
    5bb0:	10 c1       	rjmp	.+544    	; 0x5dd2 <__fp_szero>
    5bb2:	ca c0       	rjmp	.+404    	; 0x5d48 <__fp_nan>

00005bb4 <__divsf3x>:
    5bb4:	eb d0       	rcall	.+470    	; 0x5d8c <__fp_split3>
    5bb6:	98 f3       	brcs	.-26     	; 0x5b9e <__divsf3+0x4>

00005bb8 <__divsf3_pse>:
    5bb8:	99 23       	and	r25, r25
    5bba:	c9 f3       	breq	.-14     	; 0x5bae <__divsf3+0x14>
    5bbc:	55 23       	and	r21, r21
    5bbe:	b1 f3       	breq	.-20     	; 0x5bac <__divsf3+0x12>
    5bc0:	95 1b       	sub	r25, r21
    5bc2:	55 0b       	sbc	r21, r21
    5bc4:	bb 27       	eor	r27, r27
    5bc6:	aa 27       	eor	r26, r26
    5bc8:	62 17       	cp	r22, r18
    5bca:	73 07       	cpc	r23, r19
    5bcc:	84 07       	cpc	r24, r20
    5bce:	38 f0       	brcs	.+14     	; 0x5bde <__divsf3_pse+0x26>
    5bd0:	9f 5f       	subi	r25, 0xFF	; 255
    5bd2:	5f 4f       	sbci	r21, 0xFF	; 255
    5bd4:	22 0f       	add	r18, r18
    5bd6:	33 1f       	adc	r19, r19
    5bd8:	44 1f       	adc	r20, r20
    5bda:	aa 1f       	adc	r26, r26
    5bdc:	a9 f3       	breq	.-22     	; 0x5bc8 <__divsf3_pse+0x10>
    5bde:	33 d0       	rcall	.+102    	; 0x5c46 <__divsf3_pse+0x8e>
    5be0:	0e 2e       	mov	r0, r30
    5be2:	3a f0       	brmi	.+14     	; 0x5bf2 <__divsf3_pse+0x3a>
    5be4:	e0 e8       	ldi	r30, 0x80	; 128
    5be6:	30 d0       	rcall	.+96     	; 0x5c48 <__divsf3_pse+0x90>
    5be8:	91 50       	subi	r25, 0x01	; 1
    5bea:	50 40       	sbci	r21, 0x00	; 0
    5bec:	e6 95       	lsr	r30
    5bee:	00 1c       	adc	r0, r0
    5bf0:	ca f7       	brpl	.-14     	; 0x5be4 <__divsf3_pse+0x2c>
    5bf2:	29 d0       	rcall	.+82     	; 0x5c46 <__divsf3_pse+0x8e>
    5bf4:	fe 2f       	mov	r31, r30
    5bf6:	27 d0       	rcall	.+78     	; 0x5c46 <__divsf3_pse+0x8e>
    5bf8:	66 0f       	add	r22, r22
    5bfa:	77 1f       	adc	r23, r23
    5bfc:	88 1f       	adc	r24, r24
    5bfe:	bb 1f       	adc	r27, r27
    5c00:	26 17       	cp	r18, r22
    5c02:	37 07       	cpc	r19, r23
    5c04:	48 07       	cpc	r20, r24
    5c06:	ab 07       	cpc	r26, r27
    5c08:	b0 e8       	ldi	r27, 0x80	; 128
    5c0a:	09 f0       	breq	.+2      	; 0x5c0e <__divsf3_pse+0x56>
    5c0c:	bb 0b       	sbc	r27, r27
    5c0e:	80 2d       	mov	r24, r0
    5c10:	bf 01       	movw	r22, r30
    5c12:	ff 27       	eor	r31, r31
    5c14:	93 58       	subi	r25, 0x83	; 131
    5c16:	5f 4f       	sbci	r21, 0xFF	; 255
    5c18:	2a f0       	brmi	.+10     	; 0x5c24 <__divsf3_pse+0x6c>
    5c1a:	9e 3f       	cpi	r25, 0xFE	; 254
    5c1c:	51 05       	cpc	r21, r1
    5c1e:	68 f0       	brcs	.+26     	; 0x5c3a <__divsf3_pse+0x82>
    5c20:	8d c0       	rjmp	.+282    	; 0x5d3c <__fp_inf>
    5c22:	d7 c0       	rjmp	.+430    	; 0x5dd2 <__fp_szero>
    5c24:	5f 3f       	cpi	r21, 0xFF	; 255
    5c26:	ec f3       	brlt	.-6      	; 0x5c22 <__divsf3_pse+0x6a>
    5c28:	98 3e       	cpi	r25, 0xE8	; 232
    5c2a:	dc f3       	brlt	.-10     	; 0x5c22 <__divsf3_pse+0x6a>
    5c2c:	86 95       	lsr	r24
    5c2e:	77 95       	ror	r23
    5c30:	67 95       	ror	r22
    5c32:	b7 95       	ror	r27
    5c34:	f7 95       	ror	r31
    5c36:	9f 5f       	subi	r25, 0xFF	; 255
    5c38:	c9 f7       	brne	.-14     	; 0x5c2c <__divsf3_pse+0x74>
    5c3a:	88 0f       	add	r24, r24
    5c3c:	91 1d       	adc	r25, r1
    5c3e:	96 95       	lsr	r25
    5c40:	87 95       	ror	r24
    5c42:	97 f9       	bld	r25, 7
    5c44:	08 95       	ret
    5c46:	e1 e0       	ldi	r30, 0x01	; 1
    5c48:	66 0f       	add	r22, r22
    5c4a:	77 1f       	adc	r23, r23
    5c4c:	88 1f       	adc	r24, r24
    5c4e:	bb 1f       	adc	r27, r27
    5c50:	62 17       	cp	r22, r18
    5c52:	73 07       	cpc	r23, r19
    5c54:	84 07       	cpc	r24, r20
    5c56:	ba 07       	cpc	r27, r26
    5c58:	20 f0       	brcs	.+8      	; 0x5c62 <__divsf3_pse+0xaa>
    5c5a:	62 1b       	sub	r22, r18
    5c5c:	73 0b       	sbc	r23, r19
    5c5e:	84 0b       	sbc	r24, r20
    5c60:	ba 0b       	sbc	r27, r26
    5c62:	ee 1f       	adc	r30, r30
    5c64:	88 f7       	brcc	.-30     	; 0x5c48 <__divsf3_pse+0x90>
    5c66:	e0 95       	com	r30
    5c68:	08 95       	ret

00005c6a <__fixunssfsi>:
    5c6a:	98 d0       	rcall	.+304    	; 0x5d9c <__fp_splitA>
    5c6c:	88 f0       	brcs	.+34     	; 0x5c90 <__fixunssfsi+0x26>
    5c6e:	9f 57       	subi	r25, 0x7F	; 127
    5c70:	90 f0       	brcs	.+36     	; 0x5c96 <__fixunssfsi+0x2c>
    5c72:	b9 2f       	mov	r27, r25
    5c74:	99 27       	eor	r25, r25
    5c76:	b7 51       	subi	r27, 0x17	; 23
    5c78:	a0 f0       	brcs	.+40     	; 0x5ca2 <__fixunssfsi+0x38>
    5c7a:	d1 f0       	breq	.+52     	; 0x5cb0 <__fixunssfsi+0x46>
    5c7c:	66 0f       	add	r22, r22
    5c7e:	77 1f       	adc	r23, r23
    5c80:	88 1f       	adc	r24, r24
    5c82:	99 1f       	adc	r25, r25
    5c84:	1a f0       	brmi	.+6      	; 0x5c8c <__fixunssfsi+0x22>
    5c86:	ba 95       	dec	r27
    5c88:	c9 f7       	brne	.-14     	; 0x5c7c <__fixunssfsi+0x12>
    5c8a:	12 c0       	rjmp	.+36     	; 0x5cb0 <__fixunssfsi+0x46>
    5c8c:	b1 30       	cpi	r27, 0x01	; 1
    5c8e:	81 f0       	breq	.+32     	; 0x5cb0 <__fixunssfsi+0x46>
    5c90:	9f d0       	rcall	.+318    	; 0x5dd0 <__fp_zero>
    5c92:	b1 e0       	ldi	r27, 0x01	; 1
    5c94:	08 95       	ret
    5c96:	9c c0       	rjmp	.+312    	; 0x5dd0 <__fp_zero>
    5c98:	67 2f       	mov	r22, r23
    5c9a:	78 2f       	mov	r23, r24
    5c9c:	88 27       	eor	r24, r24
    5c9e:	b8 5f       	subi	r27, 0xF8	; 248
    5ca0:	39 f0       	breq	.+14     	; 0x5cb0 <__fixunssfsi+0x46>
    5ca2:	b9 3f       	cpi	r27, 0xF9	; 249
    5ca4:	cc f3       	brlt	.-14     	; 0x5c98 <__fixunssfsi+0x2e>
    5ca6:	86 95       	lsr	r24
    5ca8:	77 95       	ror	r23
    5caa:	67 95       	ror	r22
    5cac:	b3 95       	inc	r27
    5cae:	d9 f7       	brne	.-10     	; 0x5ca6 <__fixunssfsi+0x3c>
    5cb0:	3e f4       	brtc	.+14     	; 0x5cc0 <__fixunssfsi+0x56>
    5cb2:	90 95       	com	r25
    5cb4:	80 95       	com	r24
    5cb6:	70 95       	com	r23
    5cb8:	61 95       	neg	r22
    5cba:	7f 4f       	sbci	r23, 0xFF	; 255
    5cbc:	8f 4f       	sbci	r24, 0xFF	; 255
    5cbe:	9f 4f       	sbci	r25, 0xFF	; 255
    5cc0:	08 95       	ret

00005cc2 <__floatunsisf>:
    5cc2:	e8 94       	clt
    5cc4:	09 c0       	rjmp	.+18     	; 0x5cd8 <__floatsisf+0x12>

00005cc6 <__floatsisf>:
    5cc6:	97 fb       	bst	r25, 7
    5cc8:	3e f4       	brtc	.+14     	; 0x5cd8 <__floatsisf+0x12>
    5cca:	90 95       	com	r25
    5ccc:	80 95       	com	r24
    5cce:	70 95       	com	r23
    5cd0:	61 95       	neg	r22
    5cd2:	7f 4f       	sbci	r23, 0xFF	; 255
    5cd4:	8f 4f       	sbci	r24, 0xFF	; 255
    5cd6:	9f 4f       	sbci	r25, 0xFF	; 255
    5cd8:	99 23       	and	r25, r25
    5cda:	a9 f0       	breq	.+42     	; 0x5d06 <__floatsisf+0x40>
    5cdc:	f9 2f       	mov	r31, r25
    5cde:	96 e9       	ldi	r25, 0x96	; 150
    5ce0:	bb 27       	eor	r27, r27
    5ce2:	93 95       	inc	r25
    5ce4:	f6 95       	lsr	r31
    5ce6:	87 95       	ror	r24
    5ce8:	77 95       	ror	r23
    5cea:	67 95       	ror	r22
    5cec:	b7 95       	ror	r27
    5cee:	f1 11       	cpse	r31, r1
    5cf0:	f8 cf       	rjmp	.-16     	; 0x5ce2 <__floatsisf+0x1c>
    5cf2:	fa f4       	brpl	.+62     	; 0x5d32 <__floatsisf+0x6c>
    5cf4:	bb 0f       	add	r27, r27
    5cf6:	11 f4       	brne	.+4      	; 0x5cfc <__floatsisf+0x36>
    5cf8:	60 ff       	sbrs	r22, 0
    5cfa:	1b c0       	rjmp	.+54     	; 0x5d32 <__floatsisf+0x6c>
    5cfc:	6f 5f       	subi	r22, 0xFF	; 255
    5cfe:	7f 4f       	sbci	r23, 0xFF	; 255
    5d00:	8f 4f       	sbci	r24, 0xFF	; 255
    5d02:	9f 4f       	sbci	r25, 0xFF	; 255
    5d04:	16 c0       	rjmp	.+44     	; 0x5d32 <__floatsisf+0x6c>
    5d06:	88 23       	and	r24, r24
    5d08:	11 f0       	breq	.+4      	; 0x5d0e <__floatsisf+0x48>
    5d0a:	96 e9       	ldi	r25, 0x96	; 150
    5d0c:	11 c0       	rjmp	.+34     	; 0x5d30 <__floatsisf+0x6a>
    5d0e:	77 23       	and	r23, r23
    5d10:	21 f0       	breq	.+8      	; 0x5d1a <__floatsisf+0x54>
    5d12:	9e e8       	ldi	r25, 0x8E	; 142
    5d14:	87 2f       	mov	r24, r23
    5d16:	76 2f       	mov	r23, r22
    5d18:	05 c0       	rjmp	.+10     	; 0x5d24 <__floatsisf+0x5e>
    5d1a:	66 23       	and	r22, r22
    5d1c:	71 f0       	breq	.+28     	; 0x5d3a <__floatsisf+0x74>
    5d1e:	96 e8       	ldi	r25, 0x86	; 134
    5d20:	86 2f       	mov	r24, r22
    5d22:	70 e0       	ldi	r23, 0x00	; 0
    5d24:	60 e0       	ldi	r22, 0x00	; 0
    5d26:	2a f0       	brmi	.+10     	; 0x5d32 <__floatsisf+0x6c>
    5d28:	9a 95       	dec	r25
    5d2a:	66 0f       	add	r22, r22
    5d2c:	77 1f       	adc	r23, r23
    5d2e:	88 1f       	adc	r24, r24
    5d30:	da f7       	brpl	.-10     	; 0x5d28 <__floatsisf+0x62>
    5d32:	88 0f       	add	r24, r24
    5d34:	96 95       	lsr	r25
    5d36:	87 95       	ror	r24
    5d38:	97 f9       	bld	r25, 7
    5d3a:	08 95       	ret

00005d3c <__fp_inf>:
    5d3c:	97 f9       	bld	r25, 7
    5d3e:	9f 67       	ori	r25, 0x7F	; 127
    5d40:	80 e8       	ldi	r24, 0x80	; 128
    5d42:	70 e0       	ldi	r23, 0x00	; 0
    5d44:	60 e0       	ldi	r22, 0x00	; 0
    5d46:	08 95       	ret

00005d48 <__fp_nan>:
    5d48:	9f ef       	ldi	r25, 0xFF	; 255
    5d4a:	80 ec       	ldi	r24, 0xC0	; 192
    5d4c:	08 95       	ret

00005d4e <__fp_pscA>:
    5d4e:	00 24       	eor	r0, r0
    5d50:	0a 94       	dec	r0
    5d52:	16 16       	cp	r1, r22
    5d54:	17 06       	cpc	r1, r23
    5d56:	18 06       	cpc	r1, r24
    5d58:	09 06       	cpc	r0, r25
    5d5a:	08 95       	ret

00005d5c <__fp_pscB>:
    5d5c:	00 24       	eor	r0, r0
    5d5e:	0a 94       	dec	r0
    5d60:	12 16       	cp	r1, r18
    5d62:	13 06       	cpc	r1, r19
    5d64:	14 06       	cpc	r1, r20
    5d66:	05 06       	cpc	r0, r21
    5d68:	08 95       	ret

00005d6a <__fp_round>:
    5d6a:	09 2e       	mov	r0, r25
    5d6c:	03 94       	inc	r0
    5d6e:	00 0c       	add	r0, r0
    5d70:	11 f4       	brne	.+4      	; 0x5d76 <__fp_round+0xc>
    5d72:	88 23       	and	r24, r24
    5d74:	52 f0       	brmi	.+20     	; 0x5d8a <__fp_round+0x20>
    5d76:	bb 0f       	add	r27, r27
    5d78:	40 f4       	brcc	.+16     	; 0x5d8a <__fp_round+0x20>
    5d7a:	bf 2b       	or	r27, r31
    5d7c:	11 f4       	brne	.+4      	; 0x5d82 <__fp_round+0x18>
    5d7e:	60 ff       	sbrs	r22, 0
    5d80:	04 c0       	rjmp	.+8      	; 0x5d8a <__fp_round+0x20>
    5d82:	6f 5f       	subi	r22, 0xFF	; 255
    5d84:	7f 4f       	sbci	r23, 0xFF	; 255
    5d86:	8f 4f       	sbci	r24, 0xFF	; 255
    5d88:	9f 4f       	sbci	r25, 0xFF	; 255
    5d8a:	08 95       	ret

00005d8c <__fp_split3>:
    5d8c:	57 fd       	sbrc	r21, 7
    5d8e:	90 58       	subi	r25, 0x80	; 128
    5d90:	44 0f       	add	r20, r20
    5d92:	55 1f       	adc	r21, r21
    5d94:	59 f0       	breq	.+22     	; 0x5dac <__fp_splitA+0x10>
    5d96:	5f 3f       	cpi	r21, 0xFF	; 255
    5d98:	71 f0       	breq	.+28     	; 0x5db6 <__fp_splitA+0x1a>
    5d9a:	47 95       	ror	r20

00005d9c <__fp_splitA>:
    5d9c:	88 0f       	add	r24, r24
    5d9e:	97 fb       	bst	r25, 7
    5da0:	99 1f       	adc	r25, r25
    5da2:	61 f0       	breq	.+24     	; 0x5dbc <__fp_splitA+0x20>
    5da4:	9f 3f       	cpi	r25, 0xFF	; 255
    5da6:	79 f0       	breq	.+30     	; 0x5dc6 <__fp_splitA+0x2a>
    5da8:	87 95       	ror	r24
    5daa:	08 95       	ret
    5dac:	12 16       	cp	r1, r18
    5dae:	13 06       	cpc	r1, r19
    5db0:	14 06       	cpc	r1, r20
    5db2:	55 1f       	adc	r21, r21
    5db4:	f2 cf       	rjmp	.-28     	; 0x5d9a <__fp_split3+0xe>
    5db6:	46 95       	lsr	r20
    5db8:	f1 df       	rcall	.-30     	; 0x5d9c <__fp_splitA>
    5dba:	08 c0       	rjmp	.+16     	; 0x5dcc <__fp_splitA+0x30>
    5dbc:	16 16       	cp	r1, r22
    5dbe:	17 06       	cpc	r1, r23
    5dc0:	18 06       	cpc	r1, r24
    5dc2:	99 1f       	adc	r25, r25
    5dc4:	f1 cf       	rjmp	.-30     	; 0x5da8 <__fp_splitA+0xc>
    5dc6:	86 95       	lsr	r24
    5dc8:	71 05       	cpc	r23, r1
    5dca:	61 05       	cpc	r22, r1
    5dcc:	08 94       	sec
    5dce:	08 95       	ret

00005dd0 <__fp_zero>:
    5dd0:	e8 94       	clt

00005dd2 <__fp_szero>:
    5dd2:	bb 27       	eor	r27, r27
    5dd4:	66 27       	eor	r22, r22
    5dd6:	77 27       	eor	r23, r23
    5dd8:	cb 01       	movw	r24, r22
    5dda:	97 f9       	bld	r25, 7
    5ddc:	08 95       	ret

00005dde <__divmodhi4>:
    5dde:	97 fb       	bst	r25, 7
    5de0:	07 2e       	mov	r0, r23
    5de2:	16 f4       	brtc	.+4      	; 0x5de8 <__divmodhi4+0xa>
    5de4:	00 94       	com	r0
    5de6:	06 d0       	rcall	.+12     	; 0x5df4 <__divmodhi4_neg1>
    5de8:	77 fd       	sbrc	r23, 7
    5dea:	08 d0       	rcall	.+16     	; 0x5dfc <__divmodhi4_neg2>
    5dec:	63 d0       	rcall	.+198    	; 0x5eb4 <__udivmodhi4>
    5dee:	07 fc       	sbrc	r0, 7
    5df0:	05 d0       	rcall	.+10     	; 0x5dfc <__divmodhi4_neg2>
    5df2:	3e f4       	brtc	.+14     	; 0x5e02 <__divmodhi4_exit>

00005df4 <__divmodhi4_neg1>:
    5df4:	90 95       	com	r25
    5df6:	81 95       	neg	r24
    5df8:	9f 4f       	sbci	r25, 0xFF	; 255
    5dfa:	08 95       	ret

00005dfc <__divmodhi4_neg2>:
    5dfc:	70 95       	com	r23
    5dfe:	61 95       	neg	r22
    5e00:	7f 4f       	sbci	r23, 0xFF	; 255

00005e02 <__divmodhi4_exit>:
    5e02:	08 95       	ret

00005e04 <__udivmodsi4>:
    5e04:	a1 e2       	ldi	r26, 0x21	; 33
    5e06:	1a 2e       	mov	r1, r26
    5e08:	aa 1b       	sub	r26, r26
    5e0a:	bb 1b       	sub	r27, r27
    5e0c:	fd 01       	movw	r30, r26
    5e0e:	0d c0       	rjmp	.+26     	; 0x5e2a <__udivmodsi4_ep>

00005e10 <__udivmodsi4_loop>:
    5e10:	aa 1f       	adc	r26, r26
    5e12:	bb 1f       	adc	r27, r27
    5e14:	ee 1f       	adc	r30, r30
    5e16:	ff 1f       	adc	r31, r31
    5e18:	a2 17       	cp	r26, r18
    5e1a:	b3 07       	cpc	r27, r19
    5e1c:	e4 07       	cpc	r30, r20
    5e1e:	f5 07       	cpc	r31, r21
    5e20:	20 f0       	brcs	.+8      	; 0x5e2a <__udivmodsi4_ep>
    5e22:	a2 1b       	sub	r26, r18
    5e24:	b3 0b       	sbc	r27, r19
    5e26:	e4 0b       	sbc	r30, r20
    5e28:	f5 0b       	sbc	r31, r21

00005e2a <__udivmodsi4_ep>:
    5e2a:	66 1f       	adc	r22, r22
    5e2c:	77 1f       	adc	r23, r23
    5e2e:	88 1f       	adc	r24, r24
    5e30:	99 1f       	adc	r25, r25
    5e32:	1a 94       	dec	r1
    5e34:	69 f7       	brne	.-38     	; 0x5e10 <__udivmodsi4_loop>
    5e36:	60 95       	com	r22
    5e38:	70 95       	com	r23
    5e3a:	80 95       	com	r24
    5e3c:	90 95       	com	r25
    5e3e:	9b 01       	movw	r18, r22
    5e40:	ac 01       	movw	r20, r24
    5e42:	bd 01       	movw	r22, r26
    5e44:	cf 01       	movw	r24, r30
    5e46:	08 95       	ret

00005e48 <__tablejump2__>:
    5e48:	ee 0f       	add	r30, r30
    5e4a:	ff 1f       	adc	r31, r31
    5e4c:	00 24       	eor	r0, r0
    5e4e:	00 1c       	adc	r0, r0
    5e50:	0b be       	out	0x3b, r0	; 59
    5e52:	07 90       	elpm	r0, Z+
    5e54:	f6 91       	elpm	r31, Z
    5e56:	e0 2d       	mov	r30, r0
    5e58:	09 94       	ijmp

00005e5a <__umulhisi3>:
    5e5a:	a2 9f       	mul	r26, r18
    5e5c:	b0 01       	movw	r22, r0
    5e5e:	b3 9f       	mul	r27, r19
    5e60:	c0 01       	movw	r24, r0
    5e62:	a3 9f       	mul	r26, r19
    5e64:	70 0d       	add	r23, r0
    5e66:	81 1d       	adc	r24, r1
    5e68:	11 24       	eor	r1, r1
    5e6a:	91 1d       	adc	r25, r1
    5e6c:	b2 9f       	mul	r27, r18
    5e6e:	70 0d       	add	r23, r0
    5e70:	81 1d       	adc	r24, r1
    5e72:	11 24       	eor	r1, r1
    5e74:	91 1d       	adc	r25, r1
    5e76:	08 95       	ret

00005e78 <__ashrdi3>:
    5e78:	97 fb       	bst	r25, 7
    5e7a:	10 f8       	bld	r1, 0

00005e7c <__lshrdi3>:
    5e7c:	16 94       	lsr	r1
    5e7e:	00 08       	sbc	r0, r0
    5e80:	0f 93       	push	r16
    5e82:	08 30       	cpi	r16, 0x08	; 8
    5e84:	98 f0       	brcs	.+38     	; 0x5eac <__lshrdi3+0x30>
    5e86:	08 50       	subi	r16, 0x08	; 8
    5e88:	23 2f       	mov	r18, r19
    5e8a:	34 2f       	mov	r19, r20
    5e8c:	45 2f       	mov	r20, r21
    5e8e:	56 2f       	mov	r21, r22
    5e90:	67 2f       	mov	r22, r23
    5e92:	78 2f       	mov	r23, r24
    5e94:	89 2f       	mov	r24, r25
    5e96:	90 2d       	mov	r25, r0
    5e98:	f4 cf       	rjmp	.-24     	; 0x5e82 <__lshrdi3+0x6>
    5e9a:	05 94       	asr	r0
    5e9c:	97 95       	ror	r25
    5e9e:	87 95       	ror	r24
    5ea0:	77 95       	ror	r23
    5ea2:	67 95       	ror	r22
    5ea4:	57 95       	ror	r21
    5ea6:	47 95       	ror	r20
    5ea8:	37 95       	ror	r19
    5eaa:	27 95       	ror	r18
    5eac:	0a 95       	dec	r16
    5eae:	aa f7       	brpl	.-22     	; 0x5e9a <__lshrdi3+0x1e>
    5eb0:	0f 91       	pop	r16
    5eb2:	08 95       	ret

00005eb4 <__udivmodhi4>:
    5eb4:	aa 1b       	sub	r26, r26
    5eb6:	bb 1b       	sub	r27, r27
    5eb8:	51 e1       	ldi	r21, 0x11	; 17
    5eba:	07 c0       	rjmp	.+14     	; 0x5eca <__udivmodhi4_ep>

00005ebc <__udivmodhi4_loop>:
    5ebc:	aa 1f       	adc	r26, r26
    5ebe:	bb 1f       	adc	r27, r27
    5ec0:	a6 17       	cp	r26, r22
    5ec2:	b7 07       	cpc	r27, r23
    5ec4:	10 f0       	brcs	.+4      	; 0x5eca <__udivmodhi4_ep>
    5ec6:	a6 1b       	sub	r26, r22
    5ec8:	b7 0b       	sbc	r27, r23

00005eca <__udivmodhi4_ep>:
    5eca:	88 1f       	adc	r24, r24
    5ecc:	99 1f       	adc	r25, r25
    5ece:	5a 95       	dec	r21
    5ed0:	a9 f7       	brne	.-22     	; 0x5ebc <__udivmodhi4_loop>
    5ed2:	80 95       	com	r24
    5ed4:	90 95       	com	r25
    5ed6:	bc 01       	movw	r22, r24
    5ed8:	cd 01       	movw	r24, r26
    5eda:	08 95       	ret

00005edc <malloc>:
    5edc:	cf 93       	push	r28
    5ede:	df 93       	push	r29
    5ee0:	82 30       	cpi	r24, 0x02	; 2
    5ee2:	91 05       	cpc	r25, r1
    5ee4:	10 f4       	brcc	.+4      	; 0x5eea <malloc+0xe>
    5ee6:	82 e0       	ldi	r24, 0x02	; 2
    5ee8:	90 e0       	ldi	r25, 0x00	; 0
    5eea:	e0 91 ca 0c 	lds	r30, 0x0CCA	; 0x800cca <__flp>
    5eee:	f0 91 cb 0c 	lds	r31, 0x0CCB	; 0x800ccb <__flp+0x1>
    5ef2:	20 e0       	ldi	r18, 0x00	; 0
    5ef4:	30 e0       	ldi	r19, 0x00	; 0
    5ef6:	c0 e0       	ldi	r28, 0x00	; 0
    5ef8:	d0 e0       	ldi	r29, 0x00	; 0
    5efa:	30 97       	sbiw	r30, 0x00	; 0
    5efc:	11 f1       	breq	.+68     	; 0x5f42 <malloc+0x66>
    5efe:	40 81       	ld	r20, Z
    5f00:	51 81       	ldd	r21, Z+1	; 0x01
    5f02:	48 17       	cp	r20, r24
    5f04:	59 07       	cpc	r21, r25
    5f06:	c0 f0       	brcs	.+48     	; 0x5f38 <malloc+0x5c>
    5f08:	48 17       	cp	r20, r24
    5f0a:	59 07       	cpc	r21, r25
    5f0c:	61 f4       	brne	.+24     	; 0x5f26 <malloc+0x4a>
    5f0e:	82 81       	ldd	r24, Z+2	; 0x02
    5f10:	93 81       	ldd	r25, Z+3	; 0x03
    5f12:	20 97       	sbiw	r28, 0x00	; 0
    5f14:	19 f0       	breq	.+6      	; 0x5f1c <malloc+0x40>
    5f16:	9b 83       	std	Y+3, r25	; 0x03
    5f18:	8a 83       	std	Y+2, r24	; 0x02
    5f1a:	2b c0       	rjmp	.+86     	; 0x5f72 <malloc+0x96>
    5f1c:	90 93 cb 0c 	sts	0x0CCB, r25	; 0x800ccb <__flp+0x1>
    5f20:	80 93 ca 0c 	sts	0x0CCA, r24	; 0x800cca <__flp>
    5f24:	26 c0       	rjmp	.+76     	; 0x5f72 <malloc+0x96>
    5f26:	21 15       	cp	r18, r1
    5f28:	31 05       	cpc	r19, r1
    5f2a:	19 f0       	breq	.+6      	; 0x5f32 <malloc+0x56>
    5f2c:	42 17       	cp	r20, r18
    5f2e:	53 07       	cpc	r21, r19
    5f30:	18 f4       	brcc	.+6      	; 0x5f38 <malloc+0x5c>
    5f32:	9a 01       	movw	r18, r20
    5f34:	be 01       	movw	r22, r28
    5f36:	df 01       	movw	r26, r30
    5f38:	ef 01       	movw	r28, r30
    5f3a:	02 80       	ldd	r0, Z+2	; 0x02
    5f3c:	f3 81       	ldd	r31, Z+3	; 0x03
    5f3e:	e0 2d       	mov	r30, r0
    5f40:	dc cf       	rjmp	.-72     	; 0x5efa <malloc+0x1e>
    5f42:	21 15       	cp	r18, r1
    5f44:	31 05       	cpc	r19, r1
    5f46:	09 f1       	breq	.+66     	; 0x5f8a <malloc+0xae>
    5f48:	28 1b       	sub	r18, r24
    5f4a:	39 0b       	sbc	r19, r25
    5f4c:	24 30       	cpi	r18, 0x04	; 4
    5f4e:	31 05       	cpc	r19, r1
    5f50:	90 f4       	brcc	.+36     	; 0x5f76 <malloc+0x9a>
    5f52:	12 96       	adiw	r26, 0x02	; 2
    5f54:	8d 91       	ld	r24, X+
    5f56:	9c 91       	ld	r25, X
    5f58:	13 97       	sbiw	r26, 0x03	; 3
    5f5a:	61 15       	cp	r22, r1
    5f5c:	71 05       	cpc	r23, r1
    5f5e:	21 f0       	breq	.+8      	; 0x5f68 <malloc+0x8c>
    5f60:	fb 01       	movw	r30, r22
    5f62:	93 83       	std	Z+3, r25	; 0x03
    5f64:	82 83       	std	Z+2, r24	; 0x02
    5f66:	04 c0       	rjmp	.+8      	; 0x5f70 <malloc+0x94>
    5f68:	90 93 cb 0c 	sts	0x0CCB, r25	; 0x800ccb <__flp+0x1>
    5f6c:	80 93 ca 0c 	sts	0x0CCA, r24	; 0x800cca <__flp>
    5f70:	fd 01       	movw	r30, r26
    5f72:	32 96       	adiw	r30, 0x02	; 2
    5f74:	44 c0       	rjmp	.+136    	; 0x5ffe <malloc+0x122>
    5f76:	fd 01       	movw	r30, r26
    5f78:	e2 0f       	add	r30, r18
    5f7a:	f3 1f       	adc	r31, r19
    5f7c:	81 93       	st	Z+, r24
    5f7e:	91 93       	st	Z+, r25
    5f80:	22 50       	subi	r18, 0x02	; 2
    5f82:	31 09       	sbc	r19, r1
    5f84:	2d 93       	st	X+, r18
    5f86:	3c 93       	st	X, r19
    5f88:	3a c0       	rjmp	.+116    	; 0x5ffe <malloc+0x122>
    5f8a:	20 91 c8 0c 	lds	r18, 0x0CC8	; 0x800cc8 <__brkval>
    5f8e:	30 91 c9 0c 	lds	r19, 0x0CC9	; 0x800cc9 <__brkval+0x1>
    5f92:	23 2b       	or	r18, r19
    5f94:	41 f4       	brne	.+16     	; 0x5fa6 <malloc+0xca>
    5f96:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5f9a:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5f9e:	30 93 c9 0c 	sts	0x0CC9, r19	; 0x800cc9 <__brkval+0x1>
    5fa2:	20 93 c8 0c 	sts	0x0CC8, r18	; 0x800cc8 <__brkval>
    5fa6:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    5faa:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    5fae:	21 15       	cp	r18, r1
    5fb0:	31 05       	cpc	r19, r1
    5fb2:	41 f4       	brne	.+16     	; 0x5fc4 <malloc+0xe8>
    5fb4:	2d b7       	in	r18, 0x3d	; 61
    5fb6:	3e b7       	in	r19, 0x3e	; 62
    5fb8:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5fbc:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5fc0:	24 1b       	sub	r18, r20
    5fc2:	35 0b       	sbc	r19, r21
    5fc4:	e0 91 c8 0c 	lds	r30, 0x0CC8	; 0x800cc8 <__brkval>
    5fc8:	f0 91 c9 0c 	lds	r31, 0x0CC9	; 0x800cc9 <__brkval+0x1>
    5fcc:	e2 17       	cp	r30, r18
    5fce:	f3 07       	cpc	r31, r19
    5fd0:	a0 f4       	brcc	.+40     	; 0x5ffa <malloc+0x11e>
    5fd2:	2e 1b       	sub	r18, r30
    5fd4:	3f 0b       	sbc	r19, r31
    5fd6:	28 17       	cp	r18, r24
    5fd8:	39 07       	cpc	r19, r25
    5fda:	78 f0       	brcs	.+30     	; 0x5ffa <malloc+0x11e>
    5fdc:	ac 01       	movw	r20, r24
    5fde:	4e 5f       	subi	r20, 0xFE	; 254
    5fe0:	5f 4f       	sbci	r21, 0xFF	; 255
    5fe2:	24 17       	cp	r18, r20
    5fe4:	35 07       	cpc	r19, r21
    5fe6:	48 f0       	brcs	.+18     	; 0x5ffa <malloc+0x11e>
    5fe8:	4e 0f       	add	r20, r30
    5fea:	5f 1f       	adc	r21, r31
    5fec:	50 93 c9 0c 	sts	0x0CC9, r21	; 0x800cc9 <__brkval+0x1>
    5ff0:	40 93 c8 0c 	sts	0x0CC8, r20	; 0x800cc8 <__brkval>
    5ff4:	81 93       	st	Z+, r24
    5ff6:	91 93       	st	Z+, r25
    5ff8:	02 c0       	rjmp	.+4      	; 0x5ffe <malloc+0x122>
    5ffa:	e0 e0       	ldi	r30, 0x00	; 0
    5ffc:	f0 e0       	ldi	r31, 0x00	; 0
    5ffe:	cf 01       	movw	r24, r30
    6000:	df 91       	pop	r29
    6002:	cf 91       	pop	r28
    6004:	08 95       	ret

00006006 <free>:
    6006:	0f 93       	push	r16
    6008:	1f 93       	push	r17
    600a:	cf 93       	push	r28
    600c:	df 93       	push	r29
    600e:	00 97       	sbiw	r24, 0x00	; 0
    6010:	09 f4       	brne	.+2      	; 0x6014 <free+0xe>
    6012:	8c c0       	rjmp	.+280    	; 0x612c <free+0x126>
    6014:	fc 01       	movw	r30, r24
    6016:	32 97       	sbiw	r30, 0x02	; 2
    6018:	13 82       	std	Z+3, r1	; 0x03
    601a:	12 82       	std	Z+2, r1	; 0x02
    601c:	00 91 ca 0c 	lds	r16, 0x0CCA	; 0x800cca <__flp>
    6020:	10 91 cb 0c 	lds	r17, 0x0CCB	; 0x800ccb <__flp+0x1>
    6024:	01 15       	cp	r16, r1
    6026:	11 05       	cpc	r17, r1
    6028:	81 f4       	brne	.+32     	; 0x604a <free+0x44>
    602a:	20 81       	ld	r18, Z
    602c:	31 81       	ldd	r19, Z+1	; 0x01
    602e:	82 0f       	add	r24, r18
    6030:	93 1f       	adc	r25, r19
    6032:	20 91 c8 0c 	lds	r18, 0x0CC8	; 0x800cc8 <__brkval>
    6036:	30 91 c9 0c 	lds	r19, 0x0CC9	; 0x800cc9 <__brkval+0x1>
    603a:	28 17       	cp	r18, r24
    603c:	39 07       	cpc	r19, r25
    603e:	79 f5       	brne	.+94     	; 0x609e <free+0x98>
    6040:	f0 93 c9 0c 	sts	0x0CC9, r31	; 0x800cc9 <__brkval+0x1>
    6044:	e0 93 c8 0c 	sts	0x0CC8, r30	; 0x800cc8 <__brkval>
    6048:	71 c0       	rjmp	.+226    	; 0x612c <free+0x126>
    604a:	d8 01       	movw	r26, r16
    604c:	40 e0       	ldi	r20, 0x00	; 0
    604e:	50 e0       	ldi	r21, 0x00	; 0
    6050:	ae 17       	cp	r26, r30
    6052:	bf 07       	cpc	r27, r31
    6054:	50 f4       	brcc	.+20     	; 0x606a <free+0x64>
    6056:	12 96       	adiw	r26, 0x02	; 2
    6058:	2d 91       	ld	r18, X+
    605a:	3c 91       	ld	r19, X
    605c:	13 97       	sbiw	r26, 0x03	; 3
    605e:	ad 01       	movw	r20, r26
    6060:	21 15       	cp	r18, r1
    6062:	31 05       	cpc	r19, r1
    6064:	09 f1       	breq	.+66     	; 0x60a8 <free+0xa2>
    6066:	d9 01       	movw	r26, r18
    6068:	f3 cf       	rjmp	.-26     	; 0x6050 <free+0x4a>
    606a:	9d 01       	movw	r18, r26
    606c:	da 01       	movw	r26, r20
    606e:	33 83       	std	Z+3, r19	; 0x03
    6070:	22 83       	std	Z+2, r18	; 0x02
    6072:	60 81       	ld	r22, Z
    6074:	71 81       	ldd	r23, Z+1	; 0x01
    6076:	86 0f       	add	r24, r22
    6078:	97 1f       	adc	r25, r23
    607a:	82 17       	cp	r24, r18
    607c:	93 07       	cpc	r25, r19
    607e:	69 f4       	brne	.+26     	; 0x609a <free+0x94>
    6080:	ec 01       	movw	r28, r24
    6082:	28 81       	ld	r18, Y
    6084:	39 81       	ldd	r19, Y+1	; 0x01
    6086:	26 0f       	add	r18, r22
    6088:	37 1f       	adc	r19, r23
    608a:	2e 5f       	subi	r18, 0xFE	; 254
    608c:	3f 4f       	sbci	r19, 0xFF	; 255
    608e:	31 83       	std	Z+1, r19	; 0x01
    6090:	20 83       	st	Z, r18
    6092:	8a 81       	ldd	r24, Y+2	; 0x02
    6094:	9b 81       	ldd	r25, Y+3	; 0x03
    6096:	93 83       	std	Z+3, r25	; 0x03
    6098:	82 83       	std	Z+2, r24	; 0x02
    609a:	45 2b       	or	r20, r21
    609c:	29 f4       	brne	.+10     	; 0x60a8 <free+0xa2>
    609e:	f0 93 cb 0c 	sts	0x0CCB, r31	; 0x800ccb <__flp+0x1>
    60a2:	e0 93 ca 0c 	sts	0x0CCA, r30	; 0x800cca <__flp>
    60a6:	42 c0       	rjmp	.+132    	; 0x612c <free+0x126>
    60a8:	13 96       	adiw	r26, 0x03	; 3
    60aa:	fc 93       	st	X, r31
    60ac:	ee 93       	st	-X, r30
    60ae:	12 97       	sbiw	r26, 0x02	; 2
    60b0:	ed 01       	movw	r28, r26
    60b2:	49 91       	ld	r20, Y+
    60b4:	59 91       	ld	r21, Y+
    60b6:	9e 01       	movw	r18, r28
    60b8:	24 0f       	add	r18, r20
    60ba:	35 1f       	adc	r19, r21
    60bc:	e2 17       	cp	r30, r18
    60be:	f3 07       	cpc	r31, r19
    60c0:	71 f4       	brne	.+28     	; 0x60de <free+0xd8>
    60c2:	80 81       	ld	r24, Z
    60c4:	91 81       	ldd	r25, Z+1	; 0x01
    60c6:	84 0f       	add	r24, r20
    60c8:	95 1f       	adc	r25, r21
    60ca:	02 96       	adiw	r24, 0x02	; 2
    60cc:	11 96       	adiw	r26, 0x01	; 1
    60ce:	9c 93       	st	X, r25
    60d0:	8e 93       	st	-X, r24
    60d2:	82 81       	ldd	r24, Z+2	; 0x02
    60d4:	93 81       	ldd	r25, Z+3	; 0x03
    60d6:	13 96       	adiw	r26, 0x03	; 3
    60d8:	9c 93       	st	X, r25
    60da:	8e 93       	st	-X, r24
    60dc:	12 97       	sbiw	r26, 0x02	; 2
    60de:	e0 e0       	ldi	r30, 0x00	; 0
    60e0:	f0 e0       	ldi	r31, 0x00	; 0
    60e2:	d8 01       	movw	r26, r16
    60e4:	12 96       	adiw	r26, 0x02	; 2
    60e6:	8d 91       	ld	r24, X+
    60e8:	9c 91       	ld	r25, X
    60ea:	13 97       	sbiw	r26, 0x03	; 3
    60ec:	00 97       	sbiw	r24, 0x00	; 0
    60ee:	19 f0       	breq	.+6      	; 0x60f6 <free+0xf0>
    60f0:	f8 01       	movw	r30, r16
    60f2:	8c 01       	movw	r16, r24
    60f4:	f6 cf       	rjmp	.-20     	; 0x60e2 <free+0xdc>
    60f6:	8d 91       	ld	r24, X+
    60f8:	9c 91       	ld	r25, X
    60fa:	98 01       	movw	r18, r16
    60fc:	2e 5f       	subi	r18, 0xFE	; 254
    60fe:	3f 4f       	sbci	r19, 0xFF	; 255
    6100:	82 0f       	add	r24, r18
    6102:	93 1f       	adc	r25, r19
    6104:	20 91 c8 0c 	lds	r18, 0x0CC8	; 0x800cc8 <__brkval>
    6108:	30 91 c9 0c 	lds	r19, 0x0CC9	; 0x800cc9 <__brkval+0x1>
    610c:	28 17       	cp	r18, r24
    610e:	39 07       	cpc	r19, r25
    6110:	69 f4       	brne	.+26     	; 0x612c <free+0x126>
    6112:	30 97       	sbiw	r30, 0x00	; 0
    6114:	29 f4       	brne	.+10     	; 0x6120 <free+0x11a>
    6116:	10 92 cb 0c 	sts	0x0CCB, r1	; 0x800ccb <__flp+0x1>
    611a:	10 92 ca 0c 	sts	0x0CCA, r1	; 0x800cca <__flp>
    611e:	02 c0       	rjmp	.+4      	; 0x6124 <free+0x11e>
    6120:	13 82       	std	Z+3, r1	; 0x03
    6122:	12 82       	std	Z+2, r1	; 0x02
    6124:	10 93 c9 0c 	sts	0x0CC9, r17	; 0x800cc9 <__brkval+0x1>
    6128:	00 93 c8 0c 	sts	0x0CC8, r16	; 0x800cc8 <__brkval>
    612c:	df 91       	pop	r29
    612e:	cf 91       	pop	r28
    6130:	1f 91       	pop	r17
    6132:	0f 91       	pop	r16
    6134:	08 95       	ret

00006136 <do_rand>:
    6136:	8f 92       	push	r8
    6138:	9f 92       	push	r9
    613a:	af 92       	push	r10
    613c:	bf 92       	push	r11
    613e:	cf 92       	push	r12
    6140:	df 92       	push	r13
    6142:	ef 92       	push	r14
    6144:	ff 92       	push	r15
    6146:	cf 93       	push	r28
    6148:	df 93       	push	r29
    614a:	ec 01       	movw	r28, r24
    614c:	68 81       	ld	r22, Y
    614e:	79 81       	ldd	r23, Y+1	; 0x01
    6150:	8a 81       	ldd	r24, Y+2	; 0x02
    6152:	9b 81       	ldd	r25, Y+3	; 0x03
    6154:	61 15       	cp	r22, r1
    6156:	71 05       	cpc	r23, r1
    6158:	81 05       	cpc	r24, r1
    615a:	91 05       	cpc	r25, r1
    615c:	21 f4       	brne	.+8      	; 0x6166 <do_rand+0x30>
    615e:	64 e2       	ldi	r22, 0x24	; 36
    6160:	79 ed       	ldi	r23, 0xD9	; 217
    6162:	8b e5       	ldi	r24, 0x5B	; 91
    6164:	97 e0       	ldi	r25, 0x07	; 7
    6166:	2d e1       	ldi	r18, 0x1D	; 29
    6168:	33 ef       	ldi	r19, 0xF3	; 243
    616a:	41 e0       	ldi	r20, 0x01	; 1
    616c:	50 e0       	ldi	r21, 0x00	; 0
    616e:	30 d6       	rcall	.+3168   	; 0x6dd0 <__divmodsi4>
    6170:	49 01       	movw	r8, r18
    6172:	5a 01       	movw	r10, r20
    6174:	9b 01       	movw	r18, r22
    6176:	ac 01       	movw	r20, r24
    6178:	a7 ea       	ldi	r26, 0xA7	; 167
    617a:	b1 e4       	ldi	r27, 0x41	; 65
    617c:	45 d6       	rcall	.+3210   	; 0x6e08 <__muluhisi3>
    617e:	6b 01       	movw	r12, r22
    6180:	7c 01       	movw	r14, r24
    6182:	ac ee       	ldi	r26, 0xEC	; 236
    6184:	b4 ef       	ldi	r27, 0xF4	; 244
    6186:	a5 01       	movw	r20, r10
    6188:	94 01       	movw	r18, r8
    618a:	4a d6       	rcall	.+3220   	; 0x6e20 <__mulohisi3>
    618c:	dc 01       	movw	r26, r24
    618e:	cb 01       	movw	r24, r22
    6190:	8c 0d       	add	r24, r12
    6192:	9d 1d       	adc	r25, r13
    6194:	ae 1d       	adc	r26, r14
    6196:	bf 1d       	adc	r27, r15
    6198:	b7 ff       	sbrs	r27, 7
    619a:	03 c0       	rjmp	.+6      	; 0x61a2 <do_rand+0x6c>
    619c:	01 97       	sbiw	r24, 0x01	; 1
    619e:	a1 09       	sbc	r26, r1
    61a0:	b0 48       	sbci	r27, 0x80	; 128
    61a2:	88 83       	st	Y, r24
    61a4:	99 83       	std	Y+1, r25	; 0x01
    61a6:	aa 83       	std	Y+2, r26	; 0x02
    61a8:	bb 83       	std	Y+3, r27	; 0x03
    61aa:	9f 77       	andi	r25, 0x7F	; 127
    61ac:	df 91       	pop	r29
    61ae:	cf 91       	pop	r28
    61b0:	ff 90       	pop	r15
    61b2:	ef 90       	pop	r14
    61b4:	df 90       	pop	r13
    61b6:	cf 90       	pop	r12
    61b8:	bf 90       	pop	r11
    61ba:	af 90       	pop	r10
    61bc:	9f 90       	pop	r9
    61be:	8f 90       	pop	r8
    61c0:	08 95       	ret

000061c2 <rand_r>:
    61c2:	b9 cf       	rjmp	.-142    	; 0x6136 <do_rand>

000061c4 <rand>:
    61c4:	86 e0       	ldi	r24, 0x06	; 6
    61c6:	92 e0       	ldi	r25, 0x02	; 2
    61c8:	b6 cf       	rjmp	.-148    	; 0x6136 <do_rand>

000061ca <srand>:
    61ca:	a0 e0       	ldi	r26, 0x00	; 0
    61cc:	b0 e0       	ldi	r27, 0x00	; 0
    61ce:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <next>
    61d2:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <next+0x1>
    61d6:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <next+0x2>
    61da:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <next+0x3>
    61de:	08 95       	ret

000061e0 <strtoul>:
    61e0:	2f 92       	push	r2
    61e2:	3f 92       	push	r3
    61e4:	4f 92       	push	r4
    61e6:	5f 92       	push	r5
    61e8:	6f 92       	push	r6
    61ea:	7f 92       	push	r7
    61ec:	8f 92       	push	r8
    61ee:	9f 92       	push	r9
    61f0:	af 92       	push	r10
    61f2:	bf 92       	push	r11
    61f4:	cf 92       	push	r12
    61f6:	df 92       	push	r13
    61f8:	ef 92       	push	r14
    61fa:	ff 92       	push	r15
    61fc:	0f 93       	push	r16
    61fe:	1f 93       	push	r17
    6200:	cf 93       	push	r28
    6202:	df 93       	push	r29
    6204:	00 d0       	rcall	.+0      	; 0x6206 <strtoul+0x26>
    6206:	00 d0       	rcall	.+0      	; 0x6208 <strtoul+0x28>
    6208:	00 d0       	rcall	.+0      	; 0x620a <strtoul+0x2a>
    620a:	cd b7       	in	r28, 0x3d	; 61
    620c:	de b7       	in	r29, 0x3e	; 62
    620e:	5c 01       	movw	r10, r24
    6210:	6b 01       	movw	r12, r22
    6212:	7a 01       	movw	r14, r20
    6214:	61 15       	cp	r22, r1
    6216:	71 05       	cpc	r23, r1
    6218:	19 f0       	breq	.+6      	; 0x6220 <strtoul+0x40>
    621a:	db 01       	movw	r26, r22
    621c:	8d 93       	st	X+, r24
    621e:	9c 93       	st	X, r25
    6220:	e1 14       	cp	r14, r1
    6222:	f1 04       	cpc	r15, r1
    6224:	29 f0       	breq	.+10     	; 0x6230 <strtoul+0x50>
    6226:	c7 01       	movw	r24, r14
    6228:	02 97       	sbiw	r24, 0x02	; 2
    622a:	83 97       	sbiw	r24, 0x23	; 35
    622c:	08 f0       	brcs	.+2      	; 0x6230 <strtoul+0x50>
    622e:	d9 c0       	rjmp	.+434    	; 0x63e2 <strtoul+0x202>
    6230:	35 01       	movw	r6, r10
    6232:	bf ef       	ldi	r27, 0xFF	; 255
    6234:	6b 1a       	sub	r6, r27
    6236:	7b 0a       	sbc	r7, r27
    6238:	f5 01       	movw	r30, r10
    623a:	10 81       	ld	r17, Z
    623c:	81 2f       	mov	r24, r17
    623e:	90 e0       	ldi	r25, 0x00	; 0
    6240:	fc d1       	rcall	.+1016   	; 0x663a <isspace>
    6242:	89 2b       	or	r24, r25
    6244:	11 f0       	breq	.+4      	; 0x624a <strtoul+0x6a>
    6246:	53 01       	movw	r10, r6
    6248:	f3 cf       	rjmp	.-26     	; 0x6230 <strtoul+0x50>
    624a:	1d 32       	cpi	r17, 0x2D	; 45
    624c:	49 f4       	brne	.+18     	; 0x6260 <strtoul+0x80>
    624e:	35 01       	movw	r6, r10
    6250:	f2 e0       	ldi	r31, 0x02	; 2
    6252:	6f 0e       	add	r6, r31
    6254:	71 1c       	adc	r7, r1
    6256:	d5 01       	movw	r26, r10
    6258:	11 96       	adiw	r26, 0x01	; 1
    625a:	1c 91       	ld	r17, X
    625c:	01 e0       	ldi	r16, 0x01	; 1
    625e:	09 c0       	rjmp	.+18     	; 0x6272 <strtoul+0x92>
    6260:	1b 32       	cpi	r17, 0x2B	; 43
    6262:	31 f4       	brne	.+12     	; 0x6270 <strtoul+0x90>
    6264:	35 01       	movw	r6, r10
    6266:	b2 e0       	ldi	r27, 0x02	; 2
    6268:	6b 0e       	add	r6, r27
    626a:	71 1c       	adc	r7, r1
    626c:	f5 01       	movw	r30, r10
    626e:	11 81       	ldd	r17, Z+1	; 0x01
    6270:	00 e0       	ldi	r16, 0x00	; 0
    6272:	e1 14       	cp	r14, r1
    6274:	f1 04       	cpc	r15, r1
    6276:	09 f4       	brne	.+2      	; 0x627a <strtoul+0x9a>
    6278:	c2 c0       	rjmp	.+388    	; 0x63fe <strtoul+0x21e>
    627a:	f0 e1       	ldi	r31, 0x10	; 16
    627c:	ef 16       	cp	r14, r31
    627e:	f1 04       	cpc	r15, r1
    6280:	89 f4       	brne	.+34     	; 0x62a4 <strtoul+0xc4>
    6282:	10 33       	cpi	r17, 0x30	; 48
    6284:	91 f5       	brne	.+100    	; 0x62ea <strtoul+0x10a>
    6286:	d3 01       	movw	r26, r6
    6288:	8c 91       	ld	r24, X
    628a:	8f 7d       	andi	r24, 0xDF	; 223
    628c:	88 35       	cpi	r24, 0x58	; 88
    628e:	09 f0       	breq	.+2      	; 0x6292 <strtoul+0xb2>
    6290:	b0 c0       	rjmp	.+352    	; 0x63f2 <strtoul+0x212>
    6292:	11 96       	adiw	r26, 0x01	; 1
    6294:	1c 91       	ld	r17, X
    6296:	b2 e0       	ldi	r27, 0x02	; 2
    6298:	6b 0e       	add	r6, r27
    629a:	71 1c       	adc	r7, r1
    629c:	02 60       	ori	r16, 0x02	; 2
    629e:	50 e1       	ldi	r21, 0x10	; 16
    62a0:	e5 2e       	mov	r14, r21
    62a2:	f1 2c       	mov	r15, r1
    62a4:	ea e0       	ldi	r30, 0x0A	; 10
    62a6:	ee 16       	cp	r14, r30
    62a8:	f1 04       	cpc	r15, r1
    62aa:	09 f4       	brne	.+2      	; 0x62ae <strtoul+0xce>
    62ac:	ae c0       	rjmp	.+348    	; 0x640a <strtoul+0x22a>
    62ae:	f0 e1       	ldi	r31, 0x10	; 16
    62b0:	ef 16       	cp	r14, r31
    62b2:	f1 04       	cpc	r15, r1
    62b4:	d1 f0       	breq	.+52     	; 0x62ea <strtoul+0x10a>
    62b6:	28 e0       	ldi	r18, 0x08	; 8
    62b8:	e2 16       	cp	r14, r18
    62ba:	f1 04       	cpc	r15, r1
    62bc:	51 f4       	brne	.+20     	; 0x62d2 <strtoul+0xf2>
    62be:	38 e0       	ldi	r19, 0x08	; 8
    62c0:	e3 2e       	mov	r14, r19
    62c2:	f1 2c       	mov	r15, r1
    62c4:	88 24       	eor	r8, r8
    62c6:	8a 94       	dec	r8
    62c8:	98 2c       	mov	r9, r8
    62ca:	a8 2c       	mov	r10, r8
    62cc:	4f e1       	ldi	r20, 0x1F	; 31
    62ce:	b4 2e       	mov	r11, r20
    62d0:	12 c0       	rjmp	.+36     	; 0x62f6 <strtoul+0x116>
    62d2:	6f ef       	ldi	r22, 0xFF	; 255
    62d4:	7f ef       	ldi	r23, 0xFF	; 255
    62d6:	cb 01       	movw	r24, r22
    62d8:	97 01       	movw	r18, r14
    62da:	0f 2c       	mov	r0, r15
    62dc:	00 0c       	add	r0, r0
    62de:	44 0b       	sbc	r20, r20
    62e0:	55 0b       	sbc	r21, r21
    62e2:	90 dd       	rcall	.-1248   	; 0x5e04 <__udivmodsi4>
    62e4:	49 01       	movw	r8, r18
    62e6:	5a 01       	movw	r10, r20
    62e8:	06 c0       	rjmp	.+12     	; 0x62f6 <strtoul+0x116>
    62ea:	88 24       	eor	r8, r8
    62ec:	8a 94       	dec	r8
    62ee:	98 2c       	mov	r9, r8
    62f0:	a8 2c       	mov	r10, r8
    62f2:	2f e0       	ldi	r18, 0x0F	; 15
    62f4:	b2 2e       	mov	r11, r18
    62f6:	7e 82       	std	Y+6, r7	; 0x06
    62f8:	6d 82       	std	Y+5, r6	; 0x05
    62fa:	60 e0       	ldi	r22, 0x00	; 0
    62fc:	20 e0       	ldi	r18, 0x00	; 0
    62fe:	30 e0       	ldi	r19, 0x00	; 0
    6300:	a9 01       	movw	r20, r18
    6302:	27 01       	movw	r4, r14
    6304:	0f 2c       	mov	r0, r15
    6306:	00 0c       	add	r0, r0
    6308:	66 08       	sbc	r6, r6
    630a:	77 08       	sbc	r7, r7
    630c:	2d 80       	ldd	r2, Y+5	; 0x05
    630e:	3e 80       	ldd	r3, Y+6	; 0x06
    6310:	e0 ed       	ldi	r30, 0xD0	; 208
    6312:	e1 0f       	add	r30, r17
    6314:	ea 30       	cpi	r30, 0x0A	; 10
    6316:	60 f0       	brcs	.+24     	; 0x6330 <strtoul+0x150>
    6318:	8f eb       	ldi	r24, 0xBF	; 191
    631a:	81 0f       	add	r24, r17
    631c:	8a 31       	cpi	r24, 0x1A	; 26
    631e:	10 f4       	brcc	.+4      	; 0x6324 <strtoul+0x144>
    6320:	e9 ec       	ldi	r30, 0xC9	; 201
    6322:	05 c0       	rjmp	.+10     	; 0x632e <strtoul+0x14e>
    6324:	8f e9       	ldi	r24, 0x9F	; 159
    6326:	81 0f       	add	r24, r17
    6328:	8a 31       	cpi	r24, 0x1A	; 26
    632a:	88 f5       	brcc	.+98     	; 0x638e <strtoul+0x1ae>
    632c:	e9 ea       	ldi	r30, 0xA9	; 169
    632e:	e1 0f       	add	r30, r17
    6330:	8e 2f       	mov	r24, r30
    6332:	90 e0       	ldi	r25, 0x00	; 0
    6334:	8e 15       	cp	r24, r14
    6336:	9f 05       	cpc	r25, r15
    6338:	54 f5       	brge	.+84     	; 0x638e <strtoul+0x1ae>
    633a:	6f 3f       	cpi	r22, 0xFF	; 255
    633c:	01 f1       	breq	.+64     	; 0x637e <strtoul+0x19e>
    633e:	82 16       	cp	r8, r18
    6340:	93 06       	cpc	r9, r19
    6342:	a4 06       	cpc	r10, r20
    6344:	b5 06       	cpc	r11, r21
    6346:	d0 f0       	brcs	.+52     	; 0x637c <strtoul+0x19c>
    6348:	c3 01       	movw	r24, r6
    634a:	b2 01       	movw	r22, r4
    634c:	32 d5       	rcall	.+2660   	; 0x6db2 <__mulsi3>
    634e:	2e 2f       	mov	r18, r30
    6350:	30 e0       	ldi	r19, 0x00	; 0
    6352:	40 e0       	ldi	r20, 0x00	; 0
    6354:	50 e0       	ldi	r21, 0x00	; 0
    6356:	29 83       	std	Y+1, r18	; 0x01
    6358:	3a 83       	std	Y+2, r19	; 0x02
    635a:	4b 83       	std	Y+3, r20	; 0x03
    635c:	5c 83       	std	Y+4, r21	; 0x04
    635e:	26 0f       	add	r18, r22
    6360:	37 1f       	adc	r19, r23
    6362:	48 1f       	adc	r20, r24
    6364:	59 1f       	adc	r21, r25
    6366:	89 81       	ldd	r24, Y+1	; 0x01
    6368:	9a 81       	ldd	r25, Y+2	; 0x02
    636a:	ab 81       	ldd	r26, Y+3	; 0x03
    636c:	bc 81       	ldd	r27, Y+4	; 0x04
    636e:	28 17       	cp	r18, r24
    6370:	39 07       	cpc	r19, r25
    6372:	4a 07       	cpc	r20, r26
    6374:	5b 07       	cpc	r21, r27
    6376:	10 f0       	brcs	.+4      	; 0x637c <strtoul+0x19c>
    6378:	61 e0       	ldi	r22, 0x01	; 1
    637a:	01 c0       	rjmp	.+2      	; 0x637e <strtoul+0x19e>
    637c:	6f ef       	ldi	r22, 0xFF	; 255
    637e:	ed 81       	ldd	r30, Y+5	; 0x05
    6380:	fe 81       	ldd	r31, Y+6	; 0x06
    6382:	31 96       	adiw	r30, 0x01	; 1
    6384:	fe 83       	std	Y+6, r31	; 0x06
    6386:	ed 83       	std	Y+5, r30	; 0x05
    6388:	d1 01       	movw	r26, r2
    638a:	1c 91       	ld	r17, X
    638c:	bf cf       	rjmp	.-130    	; 0x630c <strtoul+0x12c>
    638e:	c1 14       	cp	r12, r1
    6390:	d1 04       	cpc	r13, r1
    6392:	89 f0       	breq	.+34     	; 0x63b6 <strtoul+0x1d6>
    6394:	66 23       	and	r22, r22
    6396:	39 f0       	breq	.+14     	; 0x63a6 <strtoul+0x1c6>
    6398:	8d 81       	ldd	r24, Y+5	; 0x05
    639a:	9e 81       	ldd	r25, Y+6	; 0x06
    639c:	01 97       	sbiw	r24, 0x01	; 1
    639e:	f6 01       	movw	r30, r12
    63a0:	91 83       	std	Z+1, r25	; 0x01
    63a2:	80 83       	st	Z, r24
    63a4:	08 c0       	rjmp	.+16     	; 0x63b6 <strtoul+0x1d6>
    63a6:	01 ff       	sbrs	r16, 1
    63a8:	06 c0       	rjmp	.+12     	; 0x63b6 <strtoul+0x1d6>
    63aa:	8d 81       	ldd	r24, Y+5	; 0x05
    63ac:	9e 81       	ldd	r25, Y+6	; 0x06
    63ae:	02 97       	sbiw	r24, 0x02	; 2
    63b0:	d6 01       	movw	r26, r12
    63b2:	8d 93       	st	X+, r24
    63b4:	9c 93       	st	X, r25
    63b6:	00 ff       	sbrs	r16, 0
    63b8:	07 c0       	rjmp	.+14     	; 0x63c8 <strtoul+0x1e8>
    63ba:	50 95       	com	r21
    63bc:	40 95       	com	r20
    63be:	30 95       	com	r19
    63c0:	21 95       	neg	r18
    63c2:	3f 4f       	sbci	r19, 0xFF	; 255
    63c4:	4f 4f       	sbci	r20, 0xFF	; 255
    63c6:	5f 4f       	sbci	r21, 0xFF	; 255
    63c8:	67 ff       	sbrs	r22, 7
    63ca:	10 c0       	rjmp	.+32     	; 0x63ec <strtoul+0x20c>
    63cc:	82 e2       	ldi	r24, 0x22	; 34
    63ce:	90 e0       	ldi	r25, 0x00	; 0
    63d0:	90 93 cd 0c 	sts	0x0CCD, r25	; 0x800ccd <errno+0x1>
    63d4:	80 93 cc 0c 	sts	0x0CCC, r24	; 0x800ccc <errno>
    63d8:	6f ef       	ldi	r22, 0xFF	; 255
    63da:	7f ef       	ldi	r23, 0xFF	; 255
    63dc:	8f ef       	ldi	r24, 0xFF	; 255
    63de:	9f ef       	ldi	r25, 0xFF	; 255
    63e0:	1b c0       	rjmp	.+54     	; 0x6418 <strtoul+0x238>
    63e2:	60 e0       	ldi	r22, 0x00	; 0
    63e4:	70 e0       	ldi	r23, 0x00	; 0
    63e6:	80 e0       	ldi	r24, 0x00	; 0
    63e8:	90 e0       	ldi	r25, 0x00	; 0
    63ea:	16 c0       	rjmp	.+44     	; 0x6418 <strtoul+0x238>
    63ec:	b9 01       	movw	r22, r18
    63ee:	ca 01       	movw	r24, r20
    63f0:	13 c0       	rjmp	.+38     	; 0x6418 <strtoul+0x238>
    63f2:	10 e3       	ldi	r17, 0x30	; 48
    63f4:	e1 14       	cp	r14, r1
    63f6:	f1 04       	cpc	r15, r1
    63f8:	09 f4       	brne	.+2      	; 0x63fc <strtoul+0x21c>
    63fa:	61 cf       	rjmp	.-318    	; 0x62be <strtoul+0xde>
    63fc:	53 cf       	rjmp	.-346    	; 0x62a4 <strtoul+0xc4>
    63fe:	10 33       	cpi	r17, 0x30	; 48
    6400:	09 f4       	brne	.+2      	; 0x6404 <strtoul+0x224>
    6402:	41 cf       	rjmp	.-382    	; 0x6286 <strtoul+0xa6>
    6404:	9a e0       	ldi	r25, 0x0A	; 10
    6406:	e9 2e       	mov	r14, r25
    6408:	f1 2c       	mov	r15, r1
    640a:	89 e9       	ldi	r24, 0x99	; 153
    640c:	88 2e       	mov	r8, r24
    640e:	98 2c       	mov	r9, r8
    6410:	a8 2c       	mov	r10, r8
    6412:	89 e1       	ldi	r24, 0x19	; 25
    6414:	b8 2e       	mov	r11, r24
    6416:	6f cf       	rjmp	.-290    	; 0x62f6 <strtoul+0x116>
    6418:	26 96       	adiw	r28, 0x06	; 6
    641a:	0f b6       	in	r0, 0x3f	; 63
    641c:	f8 94       	cli
    641e:	de bf       	out	0x3e, r29	; 62
    6420:	0f be       	out	0x3f, r0	; 63
    6422:	cd bf       	out	0x3d, r28	; 61
    6424:	df 91       	pop	r29
    6426:	cf 91       	pop	r28
    6428:	1f 91       	pop	r17
    642a:	0f 91       	pop	r16
    642c:	ff 90       	pop	r15
    642e:	ef 90       	pop	r14
    6430:	df 90       	pop	r13
    6432:	cf 90       	pop	r12
    6434:	bf 90       	pop	r11
    6436:	af 90       	pop	r10
    6438:	9f 90       	pop	r9
    643a:	8f 90       	pop	r8
    643c:	7f 90       	pop	r7
    643e:	6f 90       	pop	r6
    6440:	5f 90       	pop	r5
    6442:	4f 90       	pop	r4
    6444:	3f 90       	pop	r3
    6446:	2f 90       	pop	r2
    6448:	08 95       	ret

0000644a <atof>:
    644a:	66 27       	eor	r22, r22
    644c:	77 27       	eor	r23, r23
    644e:	5c c2       	rjmp	.+1208   	; 0x6908 <strtod>

00006450 <atoi>:
    6450:	fc 01       	movw	r30, r24
    6452:	88 27       	eor	r24, r24
    6454:	99 27       	eor	r25, r25
    6456:	e8 94       	clt
    6458:	21 91       	ld	r18, Z+
    645a:	20 32       	cpi	r18, 0x20	; 32
    645c:	e9 f3       	breq	.-6      	; 0x6458 <atoi+0x8>
    645e:	29 30       	cpi	r18, 0x09	; 9
    6460:	10 f0       	brcs	.+4      	; 0x6466 <atoi+0x16>
    6462:	2e 30       	cpi	r18, 0x0E	; 14
    6464:	c8 f3       	brcs	.-14     	; 0x6458 <atoi+0x8>
    6466:	2b 32       	cpi	r18, 0x2B	; 43
    6468:	39 f0       	breq	.+14     	; 0x6478 <atoi+0x28>
    646a:	2d 32       	cpi	r18, 0x2D	; 45
    646c:	31 f4       	brne	.+12     	; 0x647a <atoi+0x2a>
    646e:	68 94       	set
    6470:	03 c0       	rjmp	.+6      	; 0x6478 <atoi+0x28>
    6472:	5b d1       	rcall	.+694    	; 0x672a <__mulhi_const_10>
    6474:	82 0f       	add	r24, r18
    6476:	91 1d       	adc	r25, r1
    6478:	21 91       	ld	r18, Z+
    647a:	20 53       	subi	r18, 0x30	; 48
    647c:	2a 30       	cpi	r18, 0x0A	; 10
    647e:	c8 f3       	brcs	.-14     	; 0x6472 <atoi+0x22>
    6480:	1e f4       	brtc	.+6      	; 0x6488 <atoi+0x38>
    6482:	90 95       	com	r25
    6484:	81 95       	neg	r24
    6486:	9f 4f       	sbci	r25, 0xFF	; 255
    6488:	08 95       	ret

0000648a <__ftoa_engine>:
    648a:	28 30       	cpi	r18, 0x08	; 8
    648c:	08 f0       	brcs	.+2      	; 0x6490 <__ftoa_engine+0x6>
    648e:	27 e0       	ldi	r18, 0x07	; 7
    6490:	33 27       	eor	r19, r19
    6492:	da 01       	movw	r26, r20
    6494:	99 0f       	add	r25, r25
    6496:	31 1d       	adc	r19, r1
    6498:	87 fd       	sbrc	r24, 7
    649a:	91 60       	ori	r25, 0x01	; 1
    649c:	00 96       	adiw	r24, 0x00	; 0
    649e:	61 05       	cpc	r22, r1
    64a0:	71 05       	cpc	r23, r1
    64a2:	39 f4       	brne	.+14     	; 0x64b2 <__ftoa_engine+0x28>
    64a4:	32 60       	ori	r19, 0x02	; 2
    64a6:	2e 5f       	subi	r18, 0xFE	; 254
    64a8:	3d 93       	st	X+, r19
    64aa:	30 e3       	ldi	r19, 0x30	; 48
    64ac:	2a 95       	dec	r18
    64ae:	e1 f7       	brne	.-8      	; 0x64a8 <__ftoa_engine+0x1e>
    64b0:	08 95       	ret
    64b2:	9f 3f       	cpi	r25, 0xFF	; 255
    64b4:	30 f0       	brcs	.+12     	; 0x64c2 <__ftoa_engine+0x38>
    64b6:	80 38       	cpi	r24, 0x80	; 128
    64b8:	71 05       	cpc	r23, r1
    64ba:	61 05       	cpc	r22, r1
    64bc:	09 f0       	breq	.+2      	; 0x64c0 <__ftoa_engine+0x36>
    64be:	3c 5f       	subi	r19, 0xFC	; 252
    64c0:	3c 5f       	subi	r19, 0xFC	; 252
    64c2:	3d 93       	st	X+, r19
    64c4:	91 30       	cpi	r25, 0x01	; 1
    64c6:	08 f0       	brcs	.+2      	; 0x64ca <__ftoa_engine+0x40>
    64c8:	80 68       	ori	r24, 0x80	; 128
    64ca:	91 1d       	adc	r25, r1
    64cc:	df 93       	push	r29
    64ce:	cf 93       	push	r28
    64d0:	1f 93       	push	r17
    64d2:	0f 93       	push	r16
    64d4:	ff 92       	push	r15
    64d6:	ef 92       	push	r14
    64d8:	19 2f       	mov	r17, r25
    64da:	98 7f       	andi	r25, 0xF8	; 248
    64dc:	96 95       	lsr	r25
    64de:	e9 2f       	mov	r30, r25
    64e0:	96 95       	lsr	r25
    64e2:	96 95       	lsr	r25
    64e4:	e9 0f       	add	r30, r25
    64e6:	ff 27       	eor	r31, r31
    64e8:	e2 5d       	subi	r30, 0xD2	; 210
    64ea:	fd 4f       	sbci	r31, 0xFD	; 253
    64ec:	99 27       	eor	r25, r25
    64ee:	33 27       	eor	r19, r19
    64f0:	ee 24       	eor	r14, r14
    64f2:	ff 24       	eor	r15, r15
    64f4:	a7 01       	movw	r20, r14
    64f6:	e7 01       	movw	r28, r14
    64f8:	05 90       	lpm	r0, Z+
    64fa:	08 94       	sec
    64fc:	07 94       	ror	r0
    64fe:	28 f4       	brcc	.+10     	; 0x650a <__ftoa_engine+0x80>
    6500:	36 0f       	add	r19, r22
    6502:	e7 1e       	adc	r14, r23
    6504:	f8 1e       	adc	r15, r24
    6506:	49 1f       	adc	r20, r25
    6508:	51 1d       	adc	r21, r1
    650a:	66 0f       	add	r22, r22
    650c:	77 1f       	adc	r23, r23
    650e:	88 1f       	adc	r24, r24
    6510:	99 1f       	adc	r25, r25
    6512:	06 94       	lsr	r0
    6514:	a1 f7       	brne	.-24     	; 0x64fe <__ftoa_engine+0x74>
    6516:	05 90       	lpm	r0, Z+
    6518:	07 94       	ror	r0
    651a:	28 f4       	brcc	.+10     	; 0x6526 <__ftoa_engine+0x9c>
    651c:	e7 0e       	add	r14, r23
    651e:	f8 1e       	adc	r15, r24
    6520:	49 1f       	adc	r20, r25
    6522:	56 1f       	adc	r21, r22
    6524:	c1 1d       	adc	r28, r1
    6526:	77 0f       	add	r23, r23
    6528:	88 1f       	adc	r24, r24
    652a:	99 1f       	adc	r25, r25
    652c:	66 1f       	adc	r22, r22
    652e:	06 94       	lsr	r0
    6530:	a1 f7       	brne	.-24     	; 0x651a <__ftoa_engine+0x90>
    6532:	05 90       	lpm	r0, Z+
    6534:	07 94       	ror	r0
    6536:	28 f4       	brcc	.+10     	; 0x6542 <__ftoa_engine+0xb8>
    6538:	f8 0e       	add	r15, r24
    653a:	49 1f       	adc	r20, r25
    653c:	56 1f       	adc	r21, r22
    653e:	c7 1f       	adc	r28, r23
    6540:	d1 1d       	adc	r29, r1
    6542:	88 0f       	add	r24, r24
    6544:	99 1f       	adc	r25, r25
    6546:	66 1f       	adc	r22, r22
    6548:	77 1f       	adc	r23, r23
    654a:	06 94       	lsr	r0
    654c:	a1 f7       	brne	.-24     	; 0x6536 <__ftoa_engine+0xac>
    654e:	05 90       	lpm	r0, Z+
    6550:	07 94       	ror	r0
    6552:	20 f4       	brcc	.+8      	; 0x655c <__ftoa_engine+0xd2>
    6554:	49 0f       	add	r20, r25
    6556:	56 1f       	adc	r21, r22
    6558:	c7 1f       	adc	r28, r23
    655a:	d8 1f       	adc	r29, r24
    655c:	99 0f       	add	r25, r25
    655e:	66 1f       	adc	r22, r22
    6560:	77 1f       	adc	r23, r23
    6562:	88 1f       	adc	r24, r24
    6564:	06 94       	lsr	r0
    6566:	a9 f7       	brne	.-22     	; 0x6552 <__ftoa_engine+0xc8>
    6568:	84 91       	lpm	r24, Z
    656a:	10 95       	com	r17
    656c:	17 70       	andi	r17, 0x07	; 7
    656e:	41 f0       	breq	.+16     	; 0x6580 <__ftoa_engine+0xf6>
    6570:	d6 95       	lsr	r29
    6572:	c7 95       	ror	r28
    6574:	57 95       	ror	r21
    6576:	47 95       	ror	r20
    6578:	f7 94       	ror	r15
    657a:	e7 94       	ror	r14
    657c:	1a 95       	dec	r17
    657e:	c1 f7       	brne	.-16     	; 0x6570 <__ftoa_engine+0xe6>
    6580:	e4 ed       	ldi	r30, 0xD4	; 212
    6582:	f1 e0       	ldi	r31, 0x01	; 1
    6584:	68 94       	set
    6586:	15 90       	lpm	r1, Z+
    6588:	15 91       	lpm	r17, Z+
    658a:	35 91       	lpm	r19, Z+
    658c:	65 91       	lpm	r22, Z+
    658e:	95 91       	lpm	r25, Z+
    6590:	05 90       	lpm	r0, Z+
    6592:	7f e2       	ldi	r23, 0x2F	; 47
    6594:	73 95       	inc	r23
    6596:	e1 18       	sub	r14, r1
    6598:	f1 0a       	sbc	r15, r17
    659a:	43 0b       	sbc	r20, r19
    659c:	56 0b       	sbc	r21, r22
    659e:	c9 0b       	sbc	r28, r25
    65a0:	d0 09       	sbc	r29, r0
    65a2:	c0 f7       	brcc	.-16     	; 0x6594 <__ftoa_engine+0x10a>
    65a4:	e1 0c       	add	r14, r1
    65a6:	f1 1e       	adc	r15, r17
    65a8:	43 1f       	adc	r20, r19
    65aa:	56 1f       	adc	r21, r22
    65ac:	c9 1f       	adc	r28, r25
    65ae:	d0 1d       	adc	r29, r0
    65b0:	7e f4       	brtc	.+30     	; 0x65d0 <__ftoa_engine+0x146>
    65b2:	70 33       	cpi	r23, 0x30	; 48
    65b4:	11 f4       	brne	.+4      	; 0x65ba <__ftoa_engine+0x130>
    65b6:	8a 95       	dec	r24
    65b8:	e6 cf       	rjmp	.-52     	; 0x6586 <__ftoa_engine+0xfc>
    65ba:	e8 94       	clt
    65bc:	01 50       	subi	r16, 0x01	; 1
    65be:	30 f0       	brcs	.+12     	; 0x65cc <__ftoa_engine+0x142>
    65c0:	08 0f       	add	r16, r24
    65c2:	0a f4       	brpl	.+2      	; 0x65c6 <__ftoa_engine+0x13c>
    65c4:	00 27       	eor	r16, r16
    65c6:	02 17       	cp	r16, r18
    65c8:	08 f4       	brcc	.+2      	; 0x65cc <__ftoa_engine+0x142>
    65ca:	20 2f       	mov	r18, r16
    65cc:	23 95       	inc	r18
    65ce:	02 2f       	mov	r16, r18
    65d0:	7a 33       	cpi	r23, 0x3A	; 58
    65d2:	28 f0       	brcs	.+10     	; 0x65de <__ftoa_engine+0x154>
    65d4:	79 e3       	ldi	r23, 0x39	; 57
    65d6:	7d 93       	st	X+, r23
    65d8:	2a 95       	dec	r18
    65da:	e9 f7       	brne	.-6      	; 0x65d6 <__ftoa_engine+0x14c>
    65dc:	10 c0       	rjmp	.+32     	; 0x65fe <__ftoa_engine+0x174>
    65de:	7d 93       	st	X+, r23
    65e0:	2a 95       	dec	r18
    65e2:	89 f6       	brne	.-94     	; 0x6586 <__ftoa_engine+0xfc>
    65e4:	06 94       	lsr	r0
    65e6:	97 95       	ror	r25
    65e8:	67 95       	ror	r22
    65ea:	37 95       	ror	r19
    65ec:	17 95       	ror	r17
    65ee:	17 94       	ror	r1
    65f0:	e1 18       	sub	r14, r1
    65f2:	f1 0a       	sbc	r15, r17
    65f4:	43 0b       	sbc	r20, r19
    65f6:	56 0b       	sbc	r21, r22
    65f8:	c9 0b       	sbc	r28, r25
    65fa:	d0 09       	sbc	r29, r0
    65fc:	98 f0       	brcs	.+38     	; 0x6624 <__ftoa_engine+0x19a>
    65fe:	23 95       	inc	r18
    6600:	7e 91       	ld	r23, -X
    6602:	73 95       	inc	r23
    6604:	7a 33       	cpi	r23, 0x3A	; 58
    6606:	08 f0       	brcs	.+2      	; 0x660a <__ftoa_engine+0x180>
    6608:	70 e3       	ldi	r23, 0x30	; 48
    660a:	7c 93       	st	X, r23
    660c:	20 13       	cpse	r18, r16
    660e:	b8 f7       	brcc	.-18     	; 0x65fe <__ftoa_engine+0x174>
    6610:	7e 91       	ld	r23, -X
    6612:	70 61       	ori	r23, 0x10	; 16
    6614:	7d 93       	st	X+, r23
    6616:	30 f0       	brcs	.+12     	; 0x6624 <__ftoa_engine+0x19a>
    6618:	83 95       	inc	r24
    661a:	71 e3       	ldi	r23, 0x31	; 49
    661c:	7d 93       	st	X+, r23
    661e:	70 e3       	ldi	r23, 0x30	; 48
    6620:	2a 95       	dec	r18
    6622:	e1 f7       	brne	.-8      	; 0x661c <__ftoa_engine+0x192>
    6624:	11 24       	eor	r1, r1
    6626:	ef 90       	pop	r14
    6628:	ff 90       	pop	r15
    662a:	0f 91       	pop	r16
    662c:	1f 91       	pop	r17
    662e:	cf 91       	pop	r28
    6630:	df 91       	pop	r29
    6632:	99 27       	eor	r25, r25
    6634:	87 fd       	sbrc	r24, 7
    6636:	90 95       	com	r25
    6638:	08 95       	ret

0000663a <isspace>:
    663a:	91 11       	cpse	r25, r1
    663c:	cb c2       	rjmp	.+1430   	; 0x6bd4 <__ctype_isfalse>
    663e:	80 32       	cpi	r24, 0x20	; 32
    6640:	19 f0       	breq	.+6      	; 0x6648 <isspace+0xe>
    6642:	89 50       	subi	r24, 0x09	; 9
    6644:	85 50       	subi	r24, 0x05	; 5
    6646:	d0 f7       	brcc	.-12     	; 0x663c <isspace+0x2>
    6648:	08 95       	ret

0000664a <strnlen_P>:
    664a:	fc 01       	movw	r30, r24
    664c:	05 90       	lpm	r0, Z+
    664e:	61 50       	subi	r22, 0x01	; 1
    6650:	70 40       	sbci	r23, 0x00	; 0
    6652:	01 10       	cpse	r0, r1
    6654:	d8 f7       	brcc	.-10     	; 0x664c <strnlen_P+0x2>
    6656:	80 95       	com	r24
    6658:	90 95       	com	r25
    665a:	8e 0f       	add	r24, r30
    665c:	9f 1f       	adc	r25, r31
    665e:	08 95       	ret

00006660 <memcmp>:
    6660:	fb 01       	movw	r30, r22
    6662:	dc 01       	movw	r26, r24
    6664:	04 c0       	rjmp	.+8      	; 0x666e <memcmp+0xe>
    6666:	8d 91       	ld	r24, X+
    6668:	01 90       	ld	r0, Z+
    666a:	80 19       	sub	r24, r0
    666c:	21 f4       	brne	.+8      	; 0x6676 <memcmp+0x16>
    666e:	41 50       	subi	r20, 0x01	; 1
    6670:	50 40       	sbci	r21, 0x00	; 0
    6672:	c8 f7       	brcc	.-14     	; 0x6666 <memcmp+0x6>
    6674:	88 1b       	sub	r24, r24
    6676:	99 0b       	sbc	r25, r25
    6678:	08 95       	ret

0000667a <memcpy>:
    667a:	fb 01       	movw	r30, r22
    667c:	dc 01       	movw	r26, r24
    667e:	02 c0       	rjmp	.+4      	; 0x6684 <memcpy+0xa>
    6680:	01 90       	ld	r0, Z+
    6682:	0d 92       	st	X+, r0
    6684:	41 50       	subi	r20, 0x01	; 1
    6686:	50 40       	sbci	r21, 0x00	; 0
    6688:	d8 f7       	brcc	.-10     	; 0x6680 <memcpy+0x6>
    668a:	08 95       	ret

0000668c <strchr>:
    668c:	fc 01       	movw	r30, r24
    668e:	81 91       	ld	r24, Z+
    6690:	86 17       	cp	r24, r22
    6692:	21 f0       	breq	.+8      	; 0x669c <strchr+0x10>
    6694:	88 23       	and	r24, r24
    6696:	d9 f7       	brne	.-10     	; 0x668e <strchr+0x2>
    6698:	99 27       	eor	r25, r25
    669a:	08 95       	ret
    669c:	31 97       	sbiw	r30, 0x01	; 1
    669e:	cf 01       	movw	r24, r30
    66a0:	08 95       	ret

000066a2 <strcmp>:
    66a2:	fb 01       	movw	r30, r22
    66a4:	dc 01       	movw	r26, r24
    66a6:	8d 91       	ld	r24, X+
    66a8:	01 90       	ld	r0, Z+
    66aa:	80 19       	sub	r24, r0
    66ac:	01 10       	cpse	r0, r1
    66ae:	d9 f3       	breq	.-10     	; 0x66a6 <strcmp+0x4>
    66b0:	99 0b       	sbc	r25, r25
    66b2:	08 95       	ret

000066b4 <strcpy>:
    66b4:	fb 01       	movw	r30, r22
    66b6:	dc 01       	movw	r26, r24
    66b8:	01 90       	ld	r0, Z+
    66ba:	0d 92       	st	X+, r0
    66bc:	00 20       	and	r0, r0
    66be:	e1 f7       	brne	.-8      	; 0x66b8 <strcpy+0x4>
    66c0:	08 95       	ret

000066c2 <strncpy>:
    66c2:	fb 01       	movw	r30, r22
    66c4:	dc 01       	movw	r26, r24
    66c6:	41 50       	subi	r20, 0x01	; 1
    66c8:	50 40       	sbci	r21, 0x00	; 0
    66ca:	48 f0       	brcs	.+18     	; 0x66de <strncpy+0x1c>
    66cc:	01 90       	ld	r0, Z+
    66ce:	0d 92       	st	X+, r0
    66d0:	00 20       	and	r0, r0
    66d2:	c9 f7       	brne	.-14     	; 0x66c6 <strncpy+0x4>
    66d4:	01 c0       	rjmp	.+2      	; 0x66d8 <strncpy+0x16>
    66d6:	1d 92       	st	X+, r1
    66d8:	41 50       	subi	r20, 0x01	; 1
    66da:	50 40       	sbci	r21, 0x00	; 0
    66dc:	e0 f7       	brcc	.-8      	; 0x66d6 <strncpy+0x14>
    66de:	08 95       	ret

000066e0 <strnlen>:
    66e0:	fc 01       	movw	r30, r24
    66e2:	61 50       	subi	r22, 0x01	; 1
    66e4:	70 40       	sbci	r23, 0x00	; 0
    66e6:	01 90       	ld	r0, Z+
    66e8:	01 10       	cpse	r0, r1
    66ea:	d8 f7       	brcc	.-10     	; 0x66e2 <strnlen+0x2>
    66ec:	80 95       	com	r24
    66ee:	90 95       	com	r25
    66f0:	8e 0f       	add	r24, r30
    66f2:	9f 1f       	adc	r25, r31
    66f4:	08 95       	ret

000066f6 <strstr>:
    66f6:	fb 01       	movw	r30, r22
    66f8:	51 91       	ld	r21, Z+
    66fa:	55 23       	and	r21, r21
    66fc:	a9 f0       	breq	.+42     	; 0x6728 <strstr+0x32>
    66fe:	bf 01       	movw	r22, r30
    6700:	dc 01       	movw	r26, r24
    6702:	4d 91       	ld	r20, X+
    6704:	45 17       	cp	r20, r21
    6706:	41 11       	cpse	r20, r1
    6708:	e1 f7       	brne	.-8      	; 0x6702 <strstr+0xc>
    670a:	59 f4       	brne	.+22     	; 0x6722 <strstr+0x2c>
    670c:	cd 01       	movw	r24, r26
    670e:	01 90       	ld	r0, Z+
    6710:	00 20       	and	r0, r0
    6712:	49 f0       	breq	.+18     	; 0x6726 <strstr+0x30>
    6714:	4d 91       	ld	r20, X+
    6716:	40 15       	cp	r20, r0
    6718:	41 11       	cpse	r20, r1
    671a:	c9 f3       	breq	.-14     	; 0x670e <strstr+0x18>
    671c:	fb 01       	movw	r30, r22
    671e:	41 11       	cpse	r20, r1
    6720:	ef cf       	rjmp	.-34     	; 0x6700 <strstr+0xa>
    6722:	81 e0       	ldi	r24, 0x01	; 1
    6724:	90 e0       	ldi	r25, 0x00	; 0
    6726:	01 97       	sbiw	r24, 0x01	; 1
    6728:	08 95       	ret

0000672a <__mulhi_const_10>:
    672a:	7a e0       	ldi	r23, 0x0A	; 10
    672c:	97 9f       	mul	r25, r23
    672e:	90 2d       	mov	r25, r0
    6730:	87 9f       	mul	r24, r23
    6732:	80 2d       	mov	r24, r0
    6734:	91 0d       	add	r25, r1
    6736:	11 24       	eor	r1, r1
    6738:	08 95       	ret

0000673a <__ultoa_ncheck>:
    673a:	bb 27       	eor	r27, r27

0000673c <__ultoa_common>:
    673c:	fa 01       	movw	r30, r20
    673e:	a6 2f       	mov	r26, r22
    6740:	62 17       	cp	r22, r18
    6742:	71 05       	cpc	r23, r1
    6744:	81 05       	cpc	r24, r1
    6746:	91 05       	cpc	r25, r1
    6748:	33 0b       	sbc	r19, r19
    674a:	30 fb       	bst	r19, 0
    674c:	66 f0       	brts	.+24     	; 0x6766 <__ultoa_common+0x2a>
    674e:	aa 27       	eor	r26, r26
    6750:	66 0f       	add	r22, r22
    6752:	77 1f       	adc	r23, r23
    6754:	88 1f       	adc	r24, r24
    6756:	99 1f       	adc	r25, r25
    6758:	aa 1f       	adc	r26, r26
    675a:	a2 17       	cp	r26, r18
    675c:	10 f0       	brcs	.+4      	; 0x6762 <__ultoa_common+0x26>
    675e:	a2 1b       	sub	r26, r18
    6760:	63 95       	inc	r22
    6762:	38 50       	subi	r19, 0x08	; 8
    6764:	a9 f7       	brne	.-22     	; 0x6750 <__ultoa_common+0x14>
    6766:	a0 5d       	subi	r26, 0xD0	; 208
    6768:	aa 33       	cpi	r26, 0x3A	; 58
    676a:	08 f0       	brcs	.+2      	; 0x676e <__ultoa_common+0x32>
    676c:	a9 5d       	subi	r26, 0xD9	; 217
    676e:	a1 93       	st	Z+, r26
    6770:	36 f7       	brtc	.-52     	; 0x673e <__ultoa_common+0x2>
    6772:	b1 11       	cpse	r27, r1
    6774:	b1 93       	st	Z+, r27
    6776:	10 82       	st	Z, r1
    6778:	ca 01       	movw	r24, r20
    677a:	47 c2       	rjmp	.+1166   	; 0x6c0a <strrev>

0000677c <fputc>:
    677c:	0f 93       	push	r16
    677e:	1f 93       	push	r17
    6780:	cf 93       	push	r28
    6782:	df 93       	push	r29
    6784:	fb 01       	movw	r30, r22
    6786:	23 81       	ldd	r18, Z+3	; 0x03
    6788:	21 fd       	sbrc	r18, 1
    678a:	03 c0       	rjmp	.+6      	; 0x6792 <fputc+0x16>
    678c:	8f ef       	ldi	r24, 0xFF	; 255
    678e:	9f ef       	ldi	r25, 0xFF	; 255
    6790:	28 c0       	rjmp	.+80     	; 0x67e2 <fputc+0x66>
    6792:	22 ff       	sbrs	r18, 2
    6794:	16 c0       	rjmp	.+44     	; 0x67c2 <fputc+0x46>
    6796:	46 81       	ldd	r20, Z+6	; 0x06
    6798:	57 81       	ldd	r21, Z+7	; 0x07
    679a:	24 81       	ldd	r18, Z+4	; 0x04
    679c:	35 81       	ldd	r19, Z+5	; 0x05
    679e:	42 17       	cp	r20, r18
    67a0:	53 07       	cpc	r21, r19
    67a2:	44 f4       	brge	.+16     	; 0x67b4 <fputc+0x38>
    67a4:	a0 81       	ld	r26, Z
    67a6:	b1 81       	ldd	r27, Z+1	; 0x01
    67a8:	9d 01       	movw	r18, r26
    67aa:	2f 5f       	subi	r18, 0xFF	; 255
    67ac:	3f 4f       	sbci	r19, 0xFF	; 255
    67ae:	31 83       	std	Z+1, r19	; 0x01
    67b0:	20 83       	st	Z, r18
    67b2:	8c 93       	st	X, r24
    67b4:	26 81       	ldd	r18, Z+6	; 0x06
    67b6:	37 81       	ldd	r19, Z+7	; 0x07
    67b8:	2f 5f       	subi	r18, 0xFF	; 255
    67ba:	3f 4f       	sbci	r19, 0xFF	; 255
    67bc:	37 83       	std	Z+7, r19	; 0x07
    67be:	26 83       	std	Z+6, r18	; 0x06
    67c0:	10 c0       	rjmp	.+32     	; 0x67e2 <fputc+0x66>
    67c2:	eb 01       	movw	r28, r22
    67c4:	09 2f       	mov	r16, r25
    67c6:	18 2f       	mov	r17, r24
    67c8:	00 84       	ldd	r0, Z+8	; 0x08
    67ca:	f1 85       	ldd	r31, Z+9	; 0x09
    67cc:	e0 2d       	mov	r30, r0
    67ce:	09 95       	icall
    67d0:	89 2b       	or	r24, r25
    67d2:	e1 f6       	brne	.-72     	; 0x678c <fputc+0x10>
    67d4:	8e 81       	ldd	r24, Y+6	; 0x06
    67d6:	9f 81       	ldd	r25, Y+7	; 0x07
    67d8:	01 96       	adiw	r24, 0x01	; 1
    67da:	9f 83       	std	Y+7, r25	; 0x07
    67dc:	8e 83       	std	Y+6, r24	; 0x06
    67de:	81 2f       	mov	r24, r17
    67e0:	90 2f       	mov	r25, r16
    67e2:	df 91       	pop	r29
    67e4:	cf 91       	pop	r28
    67e6:	1f 91       	pop	r17
    67e8:	0f 91       	pop	r16
    67ea:	08 95       	ret

000067ec <sprintf>:
    67ec:	0f 93       	push	r16
    67ee:	1f 93       	push	r17
    67f0:	cf 93       	push	r28
    67f2:	df 93       	push	r29
    67f4:	cd b7       	in	r28, 0x3d	; 61
    67f6:	de b7       	in	r29, 0x3e	; 62
    67f8:	2e 97       	sbiw	r28, 0x0e	; 14
    67fa:	0f b6       	in	r0, 0x3f	; 63
    67fc:	f8 94       	cli
    67fe:	de bf       	out	0x3e, r29	; 62
    6800:	0f be       	out	0x3f, r0	; 63
    6802:	cd bf       	out	0x3d, r28	; 61
    6804:	0d 89       	ldd	r16, Y+21	; 0x15
    6806:	1e 89       	ldd	r17, Y+22	; 0x16
    6808:	86 e0       	ldi	r24, 0x06	; 6
    680a:	8c 83       	std	Y+4, r24	; 0x04
    680c:	1a 83       	std	Y+2, r17	; 0x02
    680e:	09 83       	std	Y+1, r16	; 0x01
    6810:	8f ef       	ldi	r24, 0xFF	; 255
    6812:	9f e7       	ldi	r25, 0x7F	; 127
    6814:	9e 83       	std	Y+6, r25	; 0x06
    6816:	8d 83       	std	Y+5, r24	; 0x05
    6818:	ae 01       	movw	r20, r28
    681a:	47 5e       	subi	r20, 0xE7	; 231
    681c:	5f 4f       	sbci	r21, 0xFF	; 255
    681e:	6f 89       	ldd	r22, Y+23	; 0x17
    6820:	78 8d       	ldd	r23, Y+24	; 0x18
    6822:	ce 01       	movw	r24, r28
    6824:	01 96       	adiw	r24, 0x01	; 1
    6826:	0e 94 d6 29 	call	0x53ac	; 0x53ac <vfprintf>
    682a:	2f 81       	ldd	r18, Y+7	; 0x07
    682c:	38 85       	ldd	r19, Y+8	; 0x08
    682e:	f8 01       	movw	r30, r16
    6830:	e2 0f       	add	r30, r18
    6832:	f3 1f       	adc	r31, r19
    6834:	10 82       	st	Z, r1
    6836:	2e 96       	adiw	r28, 0x0e	; 14
    6838:	0f b6       	in	r0, 0x3f	; 63
    683a:	f8 94       	cli
    683c:	de bf       	out	0x3e, r29	; 62
    683e:	0f be       	out	0x3f, r0	; 63
    6840:	cd bf       	out	0x3d, r28	; 61
    6842:	df 91       	pop	r29
    6844:	cf 91       	pop	r28
    6846:	1f 91       	pop	r17
    6848:	0f 91       	pop	r16
    684a:	08 95       	ret

0000684c <__ultoa_invert>:
    684c:	fa 01       	movw	r30, r20
    684e:	aa 27       	eor	r26, r26
    6850:	28 30       	cpi	r18, 0x08	; 8
    6852:	51 f1       	breq	.+84     	; 0x68a8 <__ultoa_invert+0x5c>
    6854:	20 31       	cpi	r18, 0x10	; 16
    6856:	81 f1       	breq	.+96     	; 0x68b8 <__ultoa_invert+0x6c>
    6858:	e8 94       	clt
    685a:	6f 93       	push	r22
    685c:	6e 7f       	andi	r22, 0xFE	; 254
    685e:	6e 5f       	subi	r22, 0xFE	; 254
    6860:	7f 4f       	sbci	r23, 0xFF	; 255
    6862:	8f 4f       	sbci	r24, 0xFF	; 255
    6864:	9f 4f       	sbci	r25, 0xFF	; 255
    6866:	af 4f       	sbci	r26, 0xFF	; 255
    6868:	b1 e0       	ldi	r27, 0x01	; 1
    686a:	3e d0       	rcall	.+124    	; 0x68e8 <__ultoa_invert+0x9c>
    686c:	b4 e0       	ldi	r27, 0x04	; 4
    686e:	3c d0       	rcall	.+120    	; 0x68e8 <__ultoa_invert+0x9c>
    6870:	67 0f       	add	r22, r23
    6872:	78 1f       	adc	r23, r24
    6874:	89 1f       	adc	r24, r25
    6876:	9a 1f       	adc	r25, r26
    6878:	a1 1d       	adc	r26, r1
    687a:	68 0f       	add	r22, r24
    687c:	79 1f       	adc	r23, r25
    687e:	8a 1f       	adc	r24, r26
    6880:	91 1d       	adc	r25, r1
    6882:	a1 1d       	adc	r26, r1
    6884:	6a 0f       	add	r22, r26
    6886:	71 1d       	adc	r23, r1
    6888:	81 1d       	adc	r24, r1
    688a:	91 1d       	adc	r25, r1
    688c:	a1 1d       	adc	r26, r1
    688e:	20 d0       	rcall	.+64     	; 0x68d0 <__ultoa_invert+0x84>
    6890:	09 f4       	brne	.+2      	; 0x6894 <__ultoa_invert+0x48>
    6892:	68 94       	set
    6894:	3f 91       	pop	r19
    6896:	2a e0       	ldi	r18, 0x0A	; 10
    6898:	26 9f       	mul	r18, r22
    689a:	11 24       	eor	r1, r1
    689c:	30 19       	sub	r19, r0
    689e:	30 5d       	subi	r19, 0xD0	; 208
    68a0:	31 93       	st	Z+, r19
    68a2:	de f6       	brtc	.-74     	; 0x685a <__ultoa_invert+0xe>
    68a4:	cf 01       	movw	r24, r30
    68a6:	08 95       	ret
    68a8:	46 2f       	mov	r20, r22
    68aa:	47 70       	andi	r20, 0x07	; 7
    68ac:	40 5d       	subi	r20, 0xD0	; 208
    68ae:	41 93       	st	Z+, r20
    68b0:	b3 e0       	ldi	r27, 0x03	; 3
    68b2:	0f d0       	rcall	.+30     	; 0x68d2 <__ultoa_invert+0x86>
    68b4:	c9 f7       	brne	.-14     	; 0x68a8 <__ultoa_invert+0x5c>
    68b6:	f6 cf       	rjmp	.-20     	; 0x68a4 <__ultoa_invert+0x58>
    68b8:	46 2f       	mov	r20, r22
    68ba:	4f 70       	andi	r20, 0x0F	; 15
    68bc:	40 5d       	subi	r20, 0xD0	; 208
    68be:	4a 33       	cpi	r20, 0x3A	; 58
    68c0:	18 f0       	brcs	.+6      	; 0x68c8 <__ultoa_invert+0x7c>
    68c2:	49 5d       	subi	r20, 0xD9	; 217
    68c4:	31 fd       	sbrc	r19, 1
    68c6:	40 52       	subi	r20, 0x20	; 32
    68c8:	41 93       	st	Z+, r20
    68ca:	02 d0       	rcall	.+4      	; 0x68d0 <__ultoa_invert+0x84>
    68cc:	a9 f7       	brne	.-22     	; 0x68b8 <__ultoa_invert+0x6c>
    68ce:	ea cf       	rjmp	.-44     	; 0x68a4 <__ultoa_invert+0x58>
    68d0:	b4 e0       	ldi	r27, 0x04	; 4
    68d2:	a6 95       	lsr	r26
    68d4:	97 95       	ror	r25
    68d6:	87 95       	ror	r24
    68d8:	77 95       	ror	r23
    68da:	67 95       	ror	r22
    68dc:	ba 95       	dec	r27
    68de:	c9 f7       	brne	.-14     	; 0x68d2 <__ultoa_invert+0x86>
    68e0:	00 97       	sbiw	r24, 0x00	; 0
    68e2:	61 05       	cpc	r22, r1
    68e4:	71 05       	cpc	r23, r1
    68e6:	08 95       	ret
    68e8:	9b 01       	movw	r18, r22
    68ea:	ac 01       	movw	r20, r24
    68ec:	0a 2e       	mov	r0, r26
    68ee:	06 94       	lsr	r0
    68f0:	57 95       	ror	r21
    68f2:	47 95       	ror	r20
    68f4:	37 95       	ror	r19
    68f6:	27 95       	ror	r18
    68f8:	ba 95       	dec	r27
    68fa:	c9 f7       	brne	.-14     	; 0x68ee <__ultoa_invert+0xa2>
    68fc:	62 0f       	add	r22, r18
    68fe:	73 1f       	adc	r23, r19
    6900:	84 1f       	adc	r24, r20
    6902:	95 1f       	adc	r25, r21
    6904:	a0 1d       	adc	r26, r0
    6906:	08 95       	ret

00006908 <strtod>:
    6908:	6f 92       	push	r6
    690a:	7f 92       	push	r7
    690c:	8f 92       	push	r8
    690e:	9f 92       	push	r9
    6910:	af 92       	push	r10
    6912:	bf 92       	push	r11
    6914:	cf 92       	push	r12
    6916:	df 92       	push	r13
    6918:	ef 92       	push	r14
    691a:	ff 92       	push	r15
    691c:	0f 93       	push	r16
    691e:	1f 93       	push	r17
    6920:	cf 93       	push	r28
    6922:	df 93       	push	r29
    6924:	ec 01       	movw	r28, r24
    6926:	7b 01       	movw	r14, r22
    6928:	61 15       	cp	r22, r1
    692a:	71 05       	cpc	r23, r1
    692c:	19 f0       	breq	.+6      	; 0x6934 <strtod+0x2c>
    692e:	db 01       	movw	r26, r22
    6930:	8d 93       	st	X+, r24
    6932:	9c 93       	st	X, r25
    6934:	8e 01       	movw	r16, r28
    6936:	0f 5f       	subi	r16, 0xFF	; 255
    6938:	1f 4f       	sbci	r17, 0xFF	; 255
    693a:	78 80       	ld	r7, Y
    693c:	87 2d       	mov	r24, r7
    693e:	90 e0       	ldi	r25, 0x00	; 0
    6940:	7c de       	rcall	.-776    	; 0x663a <isspace>
    6942:	89 2b       	or	r24, r25
    6944:	11 f0       	breq	.+4      	; 0x694a <strtod+0x42>
    6946:	e8 01       	movw	r28, r16
    6948:	f5 cf       	rjmp	.-22     	; 0x6934 <strtod+0x2c>
    694a:	bd e2       	ldi	r27, 0x2D	; 45
    694c:	7b 12       	cpse	r7, r27
    694e:	05 c0       	rjmp	.+10     	; 0x695a <strtod+0x52>
    6950:	0f 5f       	subi	r16, 0xFF	; 255
    6952:	1f 4f       	sbci	r17, 0xFF	; 255
    6954:	79 80       	ldd	r7, Y+1	; 0x01
    6956:	c1 e0       	ldi	r28, 0x01	; 1
    6958:	08 c0       	rjmp	.+16     	; 0x696a <strtod+0x62>
    695a:	eb e2       	ldi	r30, 0x2B	; 43
    695c:	7e 12       	cpse	r7, r30
    695e:	04 c0       	rjmp	.+8      	; 0x6968 <strtod+0x60>
    6960:	8e 01       	movw	r16, r28
    6962:	0e 5f       	subi	r16, 0xFE	; 254
    6964:	1f 4f       	sbci	r17, 0xFF	; 255
    6966:	79 80       	ldd	r7, Y+1	; 0x01
    6968:	c0 e0       	ldi	r28, 0x00	; 0
    696a:	68 01       	movw	r12, r16
    696c:	f1 e0       	ldi	r31, 0x01	; 1
    696e:	cf 1a       	sub	r12, r31
    6970:	d1 08       	sbc	r13, r1
    6972:	43 e0       	ldi	r20, 0x03	; 3
    6974:	50 e0       	ldi	r21, 0x00	; 0
    6976:	66 ed       	ldi	r22, 0xD6	; 214
    6978:	72 e0       	ldi	r23, 0x02	; 2
    697a:	c6 01       	movw	r24, r12
    697c:	2e d1       	rcall	.+604    	; 0x6bda <strncasecmp_P>
    697e:	89 2b       	or	r24, r25
    6980:	e9 f4       	brne	.+58     	; 0x69bc <strtod+0xb4>
    6982:	68 01       	movw	r12, r16
    6984:	22 e0       	ldi	r18, 0x02	; 2
    6986:	c2 0e       	add	r12, r18
    6988:	d1 1c       	adc	r13, r1
    698a:	45 e0       	ldi	r20, 0x05	; 5
    698c:	50 e0       	ldi	r21, 0x00	; 0
    698e:	61 ed       	ldi	r22, 0xD1	; 209
    6990:	72 e0       	ldi	r23, 0x02	; 2
    6992:	c6 01       	movw	r24, r12
    6994:	22 d1       	rcall	.+580    	; 0x6bda <strncasecmp_P>
    6996:	89 2b       	or	r24, r25
    6998:	21 f4       	brne	.+8      	; 0x69a2 <strtod+0x9a>
    699a:	68 01       	movw	r12, r16
    699c:	87 e0       	ldi	r24, 0x07	; 7
    699e:	c8 0e       	add	r12, r24
    69a0:	d1 1c       	adc	r13, r1
    69a2:	e1 14       	cp	r14, r1
    69a4:	f1 04       	cpc	r15, r1
    69a6:	19 f0       	breq	.+6      	; 0x69ae <strtod+0xa6>
    69a8:	d7 01       	movw	r26, r14
    69aa:	cd 92       	st	X+, r12
    69ac:	dc 92       	st	X, r13
    69ae:	c1 11       	cpse	r28, r1
    69b0:	f9 c0       	rjmp	.+498    	; 0x6ba4 <strtod+0x29c>
    69b2:	60 e0       	ldi	r22, 0x00	; 0
    69b4:	70 e0       	ldi	r23, 0x00	; 0
    69b6:	80 e8       	ldi	r24, 0x80	; 128
    69b8:	9f e7       	ldi	r25, 0x7F	; 127
    69ba:	fd c0       	rjmp	.+506    	; 0x6bb6 <strtod+0x2ae>
    69bc:	43 e0       	ldi	r20, 0x03	; 3
    69be:	50 e0       	ldi	r21, 0x00	; 0
    69c0:	6e ec       	ldi	r22, 0xCE	; 206
    69c2:	72 e0       	ldi	r23, 0x02	; 2
    69c4:	c6 01       	movw	r24, r12
    69c6:	09 d1       	rcall	.+530    	; 0x6bda <strncasecmp_P>
    69c8:	89 2b       	or	r24, r25
    69ca:	51 f4       	brne	.+20     	; 0x69e0 <strtod+0xd8>
    69cc:	e1 14       	cp	r14, r1
    69ce:	f1 04       	cpc	r15, r1
    69d0:	09 f4       	brne	.+2      	; 0x69d4 <strtod+0xcc>
    69d2:	ed c0       	rjmp	.+474    	; 0x6bae <strtod+0x2a6>
    69d4:	0e 5f       	subi	r16, 0xFE	; 254
    69d6:	1f 4f       	sbci	r17, 0xFF	; 255
    69d8:	f7 01       	movw	r30, r14
    69da:	11 83       	std	Z+1, r17	; 0x01
    69dc:	00 83       	st	Z, r16
    69de:	e7 c0       	rjmp	.+462    	; 0x6bae <strtod+0x2a6>
    69e0:	68 01       	movw	r12, r16
    69e2:	60 e0       	ldi	r22, 0x00	; 0
    69e4:	70 e0       	ldi	r23, 0x00	; 0
    69e6:	cb 01       	movw	r24, r22
    69e8:	00 e0       	ldi	r16, 0x00	; 0
    69ea:	10 e0       	ldi	r17, 0x00	; 0
    69ec:	f6 01       	movw	r30, r12
    69ee:	d0 ed       	ldi	r29, 0xD0	; 208
    69f0:	d7 0d       	add	r29, r7
    69f2:	da 30       	cpi	r29, 0x0A	; 10
    69f4:	50 f5       	brcc	.+84     	; 0x6a4a <strtod+0x142>
    69f6:	2c 2f       	mov	r18, r28
    69f8:	22 60       	ori	r18, 0x02	; 2
    69fa:	62 2e       	mov	r6, r18
    69fc:	2c 2f       	mov	r18, r28
    69fe:	28 70       	andi	r18, 0x08	; 8
    6a00:	c2 ff       	sbrs	r28, 2
    6a02:	05 c0       	rjmp	.+10     	; 0x6a0e <strtod+0x106>
    6a04:	21 11       	cpse	r18, r1
    6a06:	27 c0       	rjmp	.+78     	; 0x6a56 <strtod+0x14e>
    6a08:	0f 5f       	subi	r16, 0xFF	; 255
    6a0a:	1f 4f       	sbci	r17, 0xFF	; 255
    6a0c:	24 c0       	rjmp	.+72     	; 0x6a56 <strtod+0x14e>
    6a0e:	22 23       	and	r18, r18
    6a10:	11 f0       	breq	.+4      	; 0x6a16 <strtod+0x10e>
    6a12:	01 50       	subi	r16, 0x01	; 1
    6a14:	11 09       	sbc	r17, r1
    6a16:	a5 e0       	ldi	r26, 0x05	; 5
    6a18:	b0 e0       	ldi	r27, 0x00	; 0
    6a1a:	9b 01       	movw	r18, r22
    6a1c:	ac 01       	movw	r20, r24
    6a1e:	f4 d1       	rcall	.+1000   	; 0x6e08 <__muluhisi3>
    6a20:	4b 01       	movw	r8, r22
    6a22:	5c 01       	movw	r10, r24
    6a24:	88 0c       	add	r8, r8
    6a26:	99 1c       	adc	r9, r9
    6a28:	aa 1c       	adc	r10, r10
    6a2a:	bb 1c       	adc	r11, r11
    6a2c:	c5 01       	movw	r24, r10
    6a2e:	b4 01       	movw	r22, r8
    6a30:	6d 0f       	add	r22, r29
    6a32:	71 1d       	adc	r23, r1
    6a34:	81 1d       	adc	r24, r1
    6a36:	91 1d       	adc	r25, r1
    6a38:	68 39       	cpi	r22, 0x98	; 152
    6a3a:	a9 e9       	ldi	r26, 0x99	; 153
    6a3c:	7a 07       	cpc	r23, r26
    6a3e:	8a 07       	cpc	r24, r26
    6a40:	a9 e1       	ldi	r26, 0x19	; 25
    6a42:	9a 07       	cpc	r25, r26
    6a44:	40 f0       	brcs	.+16     	; 0x6a56 <strtod+0x14e>
    6a46:	c6 60       	ori	r28, 0x06	; 6
    6a48:	05 c0       	rjmp	.+10     	; 0x6a54 <strtod+0x14c>
    6a4a:	de 3f       	cpi	r29, 0xFE	; 254
    6a4c:	51 f4       	brne	.+20     	; 0x6a62 <strtod+0x15a>
    6a4e:	c3 fd       	sbrc	r28, 3
    6a50:	44 c0       	rjmp	.+136    	; 0x6ada <strtod+0x1d2>
    6a52:	c8 60       	ori	r28, 0x08	; 8
    6a54:	6c 2e       	mov	r6, r28
    6a56:	bf ef       	ldi	r27, 0xFF	; 255
    6a58:	cb 1a       	sub	r12, r27
    6a5a:	db 0a       	sbc	r13, r27
    6a5c:	70 80       	ld	r7, Z
    6a5e:	c6 2d       	mov	r28, r6
    6a60:	c5 cf       	rjmp	.-118    	; 0x69ec <strtod+0xe4>
    6a62:	2d 2f       	mov	r18, r29
    6a64:	2f 7d       	andi	r18, 0xDF	; 223
    6a66:	25 31       	cpi	r18, 0x15	; 21
    6a68:	c1 f5       	brne	.+112    	; 0x6ada <strtod+0x1d2>
    6a6a:	40 81       	ld	r20, Z
    6a6c:	4d 32       	cpi	r20, 0x2D	; 45
    6a6e:	11 f4       	brne	.+4      	; 0x6a74 <strtod+0x16c>
    6a70:	c0 61       	ori	r28, 0x10	; 16
    6a72:	06 c0       	rjmp	.+12     	; 0x6a80 <strtod+0x178>
    6a74:	4b 32       	cpi	r20, 0x2B	; 43
    6a76:	21 f0       	breq	.+8      	; 0x6a80 <strtod+0x178>
    6a78:	31 96       	adiw	r30, 0x01	; 1
    6a7a:	21 e0       	ldi	r18, 0x01	; 1
    6a7c:	30 e0       	ldi	r19, 0x00	; 0
    6a7e:	06 c0       	rjmp	.+12     	; 0x6a8c <strtod+0x184>
    6a80:	32 96       	adiw	r30, 0x02	; 2
    6a82:	d6 01       	movw	r26, r12
    6a84:	11 96       	adiw	r26, 0x01	; 1
    6a86:	4c 91       	ld	r20, X
    6a88:	22 e0       	ldi	r18, 0x02	; 2
    6a8a:	30 e0       	ldi	r19, 0x00	; 0
    6a8c:	a0 ed       	ldi	r26, 0xD0	; 208
    6a8e:	a4 0f       	add	r26, r20
    6a90:	aa 30       	cpi	r26, 0x0A	; 10
    6a92:	18 f0       	brcs	.+6      	; 0x6a9a <strtod+0x192>
    6a94:	e2 1b       	sub	r30, r18
    6a96:	f3 0b       	sbc	r31, r19
    6a98:	20 c0       	rjmp	.+64     	; 0x6ada <strtod+0x1d2>
    6a9a:	40 e0       	ldi	r20, 0x00	; 0
    6a9c:	50 e0       	ldi	r21, 0x00	; 0
    6a9e:	40 38       	cpi	r20, 0x80	; 128
    6aa0:	bc e0       	ldi	r27, 0x0C	; 12
    6aa2:	5b 07       	cpc	r21, r27
    6aa4:	5c f4       	brge	.+22     	; 0x6abc <strtod+0x1b4>
    6aa6:	9a 01       	movw	r18, r20
    6aa8:	22 0f       	add	r18, r18
    6aaa:	33 1f       	adc	r19, r19
    6aac:	22 0f       	add	r18, r18
    6aae:	33 1f       	adc	r19, r19
    6ab0:	42 0f       	add	r20, r18
    6ab2:	53 1f       	adc	r21, r19
    6ab4:	44 0f       	add	r20, r20
    6ab6:	55 1f       	adc	r21, r21
    6ab8:	4a 0f       	add	r20, r26
    6aba:	51 1d       	adc	r21, r1
    6abc:	31 96       	adiw	r30, 0x01	; 1
    6abe:	df 01       	movw	r26, r30
    6ac0:	11 97       	sbiw	r26, 0x01	; 1
    6ac2:	2c 91       	ld	r18, X
    6ac4:	a0 ed       	ldi	r26, 0xD0	; 208
    6ac6:	a2 0f       	add	r26, r18
    6ac8:	aa 30       	cpi	r26, 0x0A	; 10
    6aca:	48 f3       	brcs	.-46     	; 0x6a9e <strtod+0x196>
    6acc:	c4 ff       	sbrs	r28, 4
    6ace:	03 c0       	rjmp	.+6      	; 0x6ad6 <strtod+0x1ce>
    6ad0:	51 95       	neg	r21
    6ad2:	41 95       	neg	r20
    6ad4:	51 09       	sbc	r21, r1
    6ad6:	04 0f       	add	r16, r20
    6ad8:	15 1f       	adc	r17, r21
    6ada:	c1 ff       	sbrs	r28, 1
    6adc:	07 c0       	rjmp	.+14     	; 0x6aec <strtod+0x1e4>
    6ade:	e1 14       	cp	r14, r1
    6ae0:	f1 04       	cpc	r15, r1
    6ae2:	21 f0       	breq	.+8      	; 0x6aec <strtod+0x1e4>
    6ae4:	31 97       	sbiw	r30, 0x01	; 1
    6ae6:	d7 01       	movw	r26, r14
    6ae8:	ed 93       	st	X+, r30
    6aea:	fc 93       	st	X, r31
    6aec:	ea d8       	rcall	.-3628   	; 0x5cc2 <__floatunsisf>
    6aee:	c3 70       	andi	r28, 0x03	; 3
    6af0:	c3 30       	cpi	r28, 0x03	; 3
    6af2:	19 f0       	breq	.+6      	; 0x6afa <strtod+0x1f2>
    6af4:	6b 01       	movw	r12, r22
    6af6:	7c 01       	movw	r14, r24
    6af8:	06 c0       	rjmp	.+12     	; 0x6b06 <strtod+0x1fe>
    6afa:	6b 01       	movw	r12, r22
    6afc:	7c 01       	movw	r14, r24
    6afe:	f7 fa       	bst	r15, 7
    6b00:	f0 94       	com	r15
    6b02:	f7 f8       	bld	r15, 7
    6b04:	f0 94       	com	r15
    6b06:	20 e0       	ldi	r18, 0x00	; 0
    6b08:	30 e0       	ldi	r19, 0x00	; 0
    6b0a:	a9 01       	movw	r20, r18
    6b0c:	c7 01       	movw	r24, r14
    6b0e:	b6 01       	movw	r22, r12
    6b10:	8c d0       	rcall	.+280    	; 0x6c2a <__cmpsf2>
    6b12:	88 23       	and	r24, r24
    6b14:	09 f4       	brne	.+2      	; 0x6b18 <strtod+0x210>
    6b16:	43 c0       	rjmp	.+134    	; 0x6b9e <strtod+0x296>
    6b18:	17 ff       	sbrs	r17, 7
    6b1a:	06 c0       	rjmp	.+12     	; 0x6b28 <strtod+0x220>
    6b1c:	11 95       	neg	r17
    6b1e:	01 95       	neg	r16
    6b20:	11 09       	sbc	r17, r1
    6b22:	cd ee       	ldi	r28, 0xED	; 237
    6b24:	d2 e0       	ldi	r29, 0x02	; 2
    6b26:	02 c0       	rjmp	.+4      	; 0x6b2c <strtod+0x224>
    6b28:	c5 e0       	ldi	r28, 0x05	; 5
    6b2a:	d3 e0       	ldi	r29, 0x03	; 3
    6b2c:	5e 01       	movw	r10, r28
    6b2e:	b8 e1       	ldi	r27, 0x18	; 24
    6b30:	ab 1a       	sub	r10, r27
    6b32:	b1 08       	sbc	r11, r1
    6b34:	46 01       	movw	r8, r12
    6b36:	be 2d       	mov	r27, r14
    6b38:	af 2d       	mov	r26, r15
    6b3a:	90 e2       	ldi	r25, 0x20	; 32
    6b3c:	e9 2e       	mov	r14, r25
    6b3e:	f1 2c       	mov	r15, r1
    6b40:	0e 15       	cp	r16, r14
    6b42:	1f 05       	cpc	r17, r15
    6b44:	7c f0       	brlt	.+30     	; 0x6b64 <strtod+0x25c>
    6b46:	fe 01       	movw	r30, r28
    6b48:	25 91       	lpm	r18, Z+
    6b4a:	35 91       	lpm	r19, Z+
    6b4c:	45 91       	lpm	r20, Z+
    6b4e:	54 91       	lpm	r21, Z
    6b50:	b4 01       	movw	r22, r8
    6b52:	8b 2f       	mov	r24, r27
    6b54:	9a 2f       	mov	r25, r26
    6b56:	91 d0       	rcall	.+290    	; 0x6c7a <__mulsf3>
    6b58:	4b 01       	movw	r8, r22
    6b5a:	b8 2f       	mov	r27, r24
    6b5c:	a9 2f       	mov	r26, r25
    6b5e:	0e 19       	sub	r16, r14
    6b60:	1f 09       	sbc	r17, r15
    6b62:	ee cf       	rjmp	.-36     	; 0x6b40 <strtod+0x238>
    6b64:	24 97       	sbiw	r28, 0x04	; 4
    6b66:	f5 94       	asr	r15
    6b68:	e7 94       	ror	r14
    6b6a:	ca 15       	cp	r28, r10
    6b6c:	db 05       	cpc	r29, r11
    6b6e:	41 f7       	brne	.-48     	; 0x6b40 <strtod+0x238>
    6b70:	64 01       	movw	r12, r8
    6b72:	eb 2e       	mov	r14, r27
    6b74:	fa 2e       	mov	r15, r26
    6b76:	8e 2d       	mov	r24, r14
    6b78:	88 0f       	add	r24, r24
    6b7a:	8f 2d       	mov	r24, r15
    6b7c:	88 1f       	adc	r24, r24
    6b7e:	8f 3f       	cpi	r24, 0xFF	; 255
    6b80:	41 f0       	breq	.+16     	; 0x6b92 <strtod+0x28a>
    6b82:	20 e0       	ldi	r18, 0x00	; 0
    6b84:	30 e0       	ldi	r19, 0x00	; 0
    6b86:	a9 01       	movw	r20, r18
    6b88:	c7 01       	movw	r24, r14
    6b8a:	b6 01       	movw	r22, r12
    6b8c:	4e d0       	rcall	.+156    	; 0x6c2a <__cmpsf2>
    6b8e:	81 11       	cpse	r24, r1
    6b90:	06 c0       	rjmp	.+12     	; 0x6b9e <strtod+0x296>
    6b92:	82 e2       	ldi	r24, 0x22	; 34
    6b94:	90 e0       	ldi	r25, 0x00	; 0
    6b96:	90 93 cd 0c 	sts	0x0CCD, r25	; 0x800ccd <errno+0x1>
    6b9a:	80 93 cc 0c 	sts	0x0CCC, r24	; 0x800ccc <errno>
    6b9e:	c7 01       	movw	r24, r14
    6ba0:	b6 01       	movw	r22, r12
    6ba2:	09 c0       	rjmp	.+18     	; 0x6bb6 <strtod+0x2ae>
    6ba4:	60 e0       	ldi	r22, 0x00	; 0
    6ba6:	70 e0       	ldi	r23, 0x00	; 0
    6ba8:	80 e8       	ldi	r24, 0x80	; 128
    6baa:	9f ef       	ldi	r25, 0xFF	; 255
    6bac:	04 c0       	rjmp	.+8      	; 0x6bb6 <strtod+0x2ae>
    6bae:	60 e0       	ldi	r22, 0x00	; 0
    6bb0:	70 e0       	ldi	r23, 0x00	; 0
    6bb2:	80 ec       	ldi	r24, 0xC0	; 192
    6bb4:	9f e7       	ldi	r25, 0x7F	; 127
    6bb6:	df 91       	pop	r29
    6bb8:	cf 91       	pop	r28
    6bba:	1f 91       	pop	r17
    6bbc:	0f 91       	pop	r16
    6bbe:	ff 90       	pop	r15
    6bc0:	ef 90       	pop	r14
    6bc2:	df 90       	pop	r13
    6bc4:	cf 90       	pop	r12
    6bc6:	bf 90       	pop	r11
    6bc8:	af 90       	pop	r10
    6bca:	9f 90       	pop	r9
    6bcc:	8f 90       	pop	r8
    6bce:	7f 90       	pop	r7
    6bd0:	6f 90       	pop	r6
    6bd2:	08 95       	ret

00006bd4 <__ctype_isfalse>:
    6bd4:	99 27       	eor	r25, r25
    6bd6:	88 27       	eor	r24, r24

00006bd8 <__ctype_istrue>:
    6bd8:	08 95       	ret

00006bda <strncasecmp_P>:
    6bda:	fb 01       	movw	r30, r22
    6bdc:	dc 01       	movw	r26, r24
    6bde:	41 50       	subi	r20, 0x01	; 1
    6be0:	50 40       	sbci	r21, 0x00	; 0
    6be2:	88 f0       	brcs	.+34     	; 0x6c06 <strncasecmp_P+0x2c>
    6be4:	8d 91       	ld	r24, X+
    6be6:	81 34       	cpi	r24, 0x41	; 65
    6be8:	1c f0       	brlt	.+6      	; 0x6bf0 <strncasecmp_P+0x16>
    6bea:	8b 35       	cpi	r24, 0x5B	; 91
    6bec:	0c f4       	brge	.+2      	; 0x6bf0 <strncasecmp_P+0x16>
    6bee:	80 5e       	subi	r24, 0xE0	; 224
    6bf0:	65 91       	lpm	r22, Z+
    6bf2:	61 34       	cpi	r22, 0x41	; 65
    6bf4:	1c f0       	brlt	.+6      	; 0x6bfc <strncasecmp_P+0x22>
    6bf6:	6b 35       	cpi	r22, 0x5B	; 91
    6bf8:	0c f4       	brge	.+2      	; 0x6bfc <strncasecmp_P+0x22>
    6bfa:	60 5e       	subi	r22, 0xE0	; 224
    6bfc:	86 1b       	sub	r24, r22
    6bfe:	61 11       	cpse	r22, r1
    6c00:	71 f3       	breq	.-36     	; 0x6bde <strncasecmp_P+0x4>
    6c02:	99 0b       	sbc	r25, r25
    6c04:	08 95       	ret
    6c06:	88 1b       	sub	r24, r24
    6c08:	fc cf       	rjmp	.-8      	; 0x6c02 <strncasecmp_P+0x28>

00006c0a <strrev>:
    6c0a:	dc 01       	movw	r26, r24
    6c0c:	fc 01       	movw	r30, r24
    6c0e:	67 2f       	mov	r22, r23
    6c10:	71 91       	ld	r23, Z+
    6c12:	77 23       	and	r23, r23
    6c14:	e1 f7       	brne	.-8      	; 0x6c0e <strrev+0x4>
    6c16:	32 97       	sbiw	r30, 0x02	; 2
    6c18:	04 c0       	rjmp	.+8      	; 0x6c22 <strrev+0x18>
    6c1a:	7c 91       	ld	r23, X
    6c1c:	6d 93       	st	X+, r22
    6c1e:	70 83       	st	Z, r23
    6c20:	62 91       	ld	r22, -Z
    6c22:	ae 17       	cp	r26, r30
    6c24:	bf 07       	cpc	r27, r31
    6c26:	c8 f3       	brcs	.-14     	; 0x6c1a <strrev+0x10>
    6c28:	08 95       	ret

00006c2a <__cmpsf2>:
    6c2a:	03 d0       	rcall	.+6      	; 0x6c32 <__fp_cmp>
    6c2c:	08 f4       	brcc	.+2      	; 0x6c30 <__cmpsf2+0x6>
    6c2e:	81 e0       	ldi	r24, 0x01	; 1
    6c30:	08 95       	ret

00006c32 <__fp_cmp>:
    6c32:	99 0f       	add	r25, r25
    6c34:	00 08       	sbc	r0, r0
    6c36:	55 0f       	add	r21, r21
    6c38:	aa 0b       	sbc	r26, r26
    6c3a:	e0 e8       	ldi	r30, 0x80	; 128
    6c3c:	fe ef       	ldi	r31, 0xFE	; 254
    6c3e:	16 16       	cp	r1, r22
    6c40:	17 06       	cpc	r1, r23
    6c42:	e8 07       	cpc	r30, r24
    6c44:	f9 07       	cpc	r31, r25
    6c46:	c0 f0       	brcs	.+48     	; 0x6c78 <__fp_cmp+0x46>
    6c48:	12 16       	cp	r1, r18
    6c4a:	13 06       	cpc	r1, r19
    6c4c:	e4 07       	cpc	r30, r20
    6c4e:	f5 07       	cpc	r31, r21
    6c50:	98 f0       	brcs	.+38     	; 0x6c78 <__fp_cmp+0x46>
    6c52:	62 1b       	sub	r22, r18
    6c54:	73 0b       	sbc	r23, r19
    6c56:	84 0b       	sbc	r24, r20
    6c58:	95 0b       	sbc	r25, r21
    6c5a:	39 f4       	brne	.+14     	; 0x6c6a <__fp_cmp+0x38>
    6c5c:	0a 26       	eor	r0, r26
    6c5e:	61 f0       	breq	.+24     	; 0x6c78 <__fp_cmp+0x46>
    6c60:	23 2b       	or	r18, r19
    6c62:	24 2b       	or	r18, r20
    6c64:	25 2b       	or	r18, r21
    6c66:	21 f4       	brne	.+8      	; 0x6c70 <__fp_cmp+0x3e>
    6c68:	08 95       	ret
    6c6a:	0a 26       	eor	r0, r26
    6c6c:	09 f4       	brne	.+2      	; 0x6c70 <__fp_cmp+0x3e>
    6c6e:	a1 40       	sbci	r26, 0x01	; 1
    6c70:	a6 95       	lsr	r26
    6c72:	8f ef       	ldi	r24, 0xFF	; 255
    6c74:	81 1d       	adc	r24, r1
    6c76:	81 1d       	adc	r24, r1
    6c78:	08 95       	ret

00006c7a <__mulsf3>:
    6c7a:	0b d0       	rcall	.+22     	; 0x6c92 <__mulsf3x>
    6c7c:	76 c8       	rjmp	.-3860   	; 0x5d6a <__fp_round>
    6c7e:	67 d8       	rcall	.-3890   	; 0x5d4e <__fp_pscA>
    6c80:	28 f0       	brcs	.+10     	; 0x6c8c <__mulsf3+0x12>
    6c82:	6c d8       	rcall	.-3880   	; 0x5d5c <__fp_pscB>
    6c84:	18 f0       	brcs	.+6      	; 0x6c8c <__mulsf3+0x12>
    6c86:	95 23       	and	r25, r21
    6c88:	09 f0       	breq	.+2      	; 0x6c8c <__mulsf3+0x12>
    6c8a:	58 c8       	rjmp	.-3920   	; 0x5d3c <__fp_inf>
    6c8c:	5d c8       	rjmp	.-3910   	; 0x5d48 <__fp_nan>
    6c8e:	11 24       	eor	r1, r1
    6c90:	a0 c8       	rjmp	.-3776   	; 0x5dd2 <__fp_szero>

00006c92 <__mulsf3x>:
    6c92:	7c d8       	rcall	.-3848   	; 0x5d8c <__fp_split3>
    6c94:	a0 f3       	brcs	.-24     	; 0x6c7e <__mulsf3+0x4>

00006c96 <__mulsf3_pse>:
    6c96:	95 9f       	mul	r25, r21
    6c98:	d1 f3       	breq	.-12     	; 0x6c8e <__mulsf3+0x14>
    6c9a:	95 0f       	add	r25, r21
    6c9c:	50 e0       	ldi	r21, 0x00	; 0
    6c9e:	55 1f       	adc	r21, r21
    6ca0:	62 9f       	mul	r22, r18
    6ca2:	f0 01       	movw	r30, r0
    6ca4:	72 9f       	mul	r23, r18
    6ca6:	bb 27       	eor	r27, r27
    6ca8:	f0 0d       	add	r31, r0
    6caa:	b1 1d       	adc	r27, r1
    6cac:	63 9f       	mul	r22, r19
    6cae:	aa 27       	eor	r26, r26
    6cb0:	f0 0d       	add	r31, r0
    6cb2:	b1 1d       	adc	r27, r1
    6cb4:	aa 1f       	adc	r26, r26
    6cb6:	64 9f       	mul	r22, r20
    6cb8:	66 27       	eor	r22, r22
    6cba:	b0 0d       	add	r27, r0
    6cbc:	a1 1d       	adc	r26, r1
    6cbe:	66 1f       	adc	r22, r22
    6cc0:	82 9f       	mul	r24, r18
    6cc2:	22 27       	eor	r18, r18
    6cc4:	b0 0d       	add	r27, r0
    6cc6:	a1 1d       	adc	r26, r1
    6cc8:	62 1f       	adc	r22, r18
    6cca:	73 9f       	mul	r23, r19
    6ccc:	b0 0d       	add	r27, r0
    6cce:	a1 1d       	adc	r26, r1
    6cd0:	62 1f       	adc	r22, r18
    6cd2:	83 9f       	mul	r24, r19
    6cd4:	a0 0d       	add	r26, r0
    6cd6:	61 1d       	adc	r22, r1
    6cd8:	22 1f       	adc	r18, r18
    6cda:	74 9f       	mul	r23, r20
    6cdc:	33 27       	eor	r19, r19
    6cde:	a0 0d       	add	r26, r0
    6ce0:	61 1d       	adc	r22, r1
    6ce2:	23 1f       	adc	r18, r19
    6ce4:	84 9f       	mul	r24, r20
    6ce6:	60 0d       	add	r22, r0
    6ce8:	21 1d       	adc	r18, r1
    6cea:	82 2f       	mov	r24, r18
    6cec:	76 2f       	mov	r23, r22
    6cee:	6a 2f       	mov	r22, r26
    6cf0:	11 24       	eor	r1, r1
    6cf2:	9f 57       	subi	r25, 0x7F	; 127
    6cf4:	50 40       	sbci	r21, 0x00	; 0
    6cf6:	8a f0       	brmi	.+34     	; 0x6d1a <__mulsf3_pse+0x84>
    6cf8:	e1 f0       	breq	.+56     	; 0x6d32 <__mulsf3_pse+0x9c>
    6cfa:	88 23       	and	r24, r24
    6cfc:	4a f0       	brmi	.+18     	; 0x6d10 <__mulsf3_pse+0x7a>
    6cfe:	ee 0f       	add	r30, r30
    6d00:	ff 1f       	adc	r31, r31
    6d02:	bb 1f       	adc	r27, r27
    6d04:	66 1f       	adc	r22, r22
    6d06:	77 1f       	adc	r23, r23
    6d08:	88 1f       	adc	r24, r24
    6d0a:	91 50       	subi	r25, 0x01	; 1
    6d0c:	50 40       	sbci	r21, 0x00	; 0
    6d0e:	a9 f7       	brne	.-22     	; 0x6cfa <__mulsf3_pse+0x64>
    6d10:	9e 3f       	cpi	r25, 0xFE	; 254
    6d12:	51 05       	cpc	r21, r1
    6d14:	70 f0       	brcs	.+28     	; 0x6d32 <__mulsf3_pse+0x9c>
    6d16:	12 c8       	rjmp	.-4060   	; 0x5d3c <__fp_inf>
    6d18:	5c c8       	rjmp	.-3912   	; 0x5dd2 <__fp_szero>
    6d1a:	5f 3f       	cpi	r21, 0xFF	; 255
    6d1c:	ec f3       	brlt	.-6      	; 0x6d18 <__mulsf3_pse+0x82>
    6d1e:	98 3e       	cpi	r25, 0xE8	; 232
    6d20:	dc f3       	brlt	.-10     	; 0x6d18 <__mulsf3_pse+0x82>
    6d22:	86 95       	lsr	r24
    6d24:	77 95       	ror	r23
    6d26:	67 95       	ror	r22
    6d28:	b7 95       	ror	r27
    6d2a:	f7 95       	ror	r31
    6d2c:	e7 95       	ror	r30
    6d2e:	9f 5f       	subi	r25, 0xFF	; 255
    6d30:	c1 f7       	brne	.-16     	; 0x6d22 <__mulsf3_pse+0x8c>
    6d32:	fe 2b       	or	r31, r30
    6d34:	88 0f       	add	r24, r24
    6d36:	91 1d       	adc	r25, r1
    6d38:	96 95       	lsr	r25
    6d3a:	87 95       	ror	r24
    6d3c:	97 f9       	bld	r25, 7
    6d3e:	08 95       	ret

00006d40 <eeprom_read_block>:
    6d40:	dc 01       	movw	r26, r24
    6d42:	cb 01       	movw	r24, r22

00006d44 <eeprom_read_blraw>:
    6d44:	fc 01       	movw	r30, r24
    6d46:	f9 99       	sbic	0x1f, 1	; 31
    6d48:	fe cf       	rjmp	.-4      	; 0x6d46 <eeprom_read_blraw+0x2>
    6d4a:	06 c0       	rjmp	.+12     	; 0x6d58 <eeprom_read_blraw+0x14>
    6d4c:	f2 bd       	out	0x22, r31	; 34
    6d4e:	e1 bd       	out	0x21, r30	; 33
    6d50:	f8 9a       	sbi	0x1f, 0	; 31
    6d52:	31 96       	adiw	r30, 0x01	; 1
    6d54:	00 b4       	in	r0, 0x20	; 32
    6d56:	0d 92       	st	X+, r0
    6d58:	41 50       	subi	r20, 0x01	; 1
    6d5a:	50 40       	sbci	r21, 0x00	; 0
    6d5c:	b8 f7       	brcc	.-18     	; 0x6d4c <eeprom_read_blraw+0x8>
    6d5e:	08 95       	ret

00006d60 <eeprom_update_byte>:
    6d60:	26 2f       	mov	r18, r22

00006d62 <eeprom_update_r18>:
    6d62:	f9 99       	sbic	0x1f, 1	; 31
    6d64:	fe cf       	rjmp	.-4      	; 0x6d62 <eeprom_update_r18>
    6d66:	92 bd       	out	0x22, r25	; 34
    6d68:	81 bd       	out	0x21, r24	; 33
    6d6a:	f8 9a       	sbi	0x1f, 0	; 31
    6d6c:	01 97       	sbiw	r24, 0x01	; 1
    6d6e:	00 b4       	in	r0, 0x20	; 32
    6d70:	02 16       	cp	r0, r18
    6d72:	39 f0       	breq	.+14     	; 0x6d82 <eeprom_update_r18+0x20>
    6d74:	1f ba       	out	0x1f, r1	; 31
    6d76:	20 bd       	out	0x20, r18	; 32
    6d78:	0f b6       	in	r0, 0x3f	; 63
    6d7a:	f8 94       	cli
    6d7c:	fa 9a       	sbi	0x1f, 2	; 31
    6d7e:	f9 9a       	sbi	0x1f, 1	; 31
    6d80:	0f be       	out	0x3f, r0	; 63
    6d82:	08 95       	ret

00006d84 <eeprom_write_block>:
    6d84:	dc 01       	movw	r26, r24
    6d86:	cb 01       	movw	r24, r22
    6d88:	02 c0       	rjmp	.+4      	; 0x6d8e <eeprom_write_block+0xa>
    6d8a:	2d 91       	ld	r18, X+
    6d8c:	05 d0       	rcall	.+10     	; 0x6d98 <eeprom_write_r18>
    6d8e:	41 50       	subi	r20, 0x01	; 1
    6d90:	50 40       	sbci	r21, 0x00	; 0
    6d92:	d8 f7       	brcc	.-10     	; 0x6d8a <eeprom_write_block+0x6>
    6d94:	08 95       	ret

00006d96 <eeprom_write_byte>:
    6d96:	26 2f       	mov	r18, r22

00006d98 <eeprom_write_r18>:
    6d98:	f9 99       	sbic	0x1f, 1	; 31
    6d9a:	fe cf       	rjmp	.-4      	; 0x6d98 <eeprom_write_r18>
    6d9c:	1f ba       	out	0x1f, r1	; 31
    6d9e:	92 bd       	out	0x22, r25	; 34
    6da0:	81 bd       	out	0x21, r24	; 33
    6da2:	20 bd       	out	0x20, r18	; 32
    6da4:	0f b6       	in	r0, 0x3f	; 63
    6da6:	f8 94       	cli
    6da8:	fa 9a       	sbi	0x1f, 2	; 31
    6daa:	f9 9a       	sbi	0x1f, 1	; 31
    6dac:	0f be       	out	0x3f, r0	; 63
    6dae:	01 96       	adiw	r24, 0x01	; 1
    6db0:	08 95       	ret

00006db2 <__mulsi3>:
    6db2:	db 01       	movw	r26, r22
    6db4:	8f 93       	push	r24
    6db6:	9f 93       	push	r25
    6db8:	27 d0       	rcall	.+78     	; 0x6e08 <__muluhisi3>
    6dba:	bf 91       	pop	r27
    6dbc:	af 91       	pop	r26
    6dbe:	a2 9f       	mul	r26, r18
    6dc0:	80 0d       	add	r24, r0
    6dc2:	91 1d       	adc	r25, r1
    6dc4:	a3 9f       	mul	r26, r19
    6dc6:	90 0d       	add	r25, r0
    6dc8:	b2 9f       	mul	r27, r18
    6dca:	90 0d       	add	r25, r0
    6dcc:	11 24       	eor	r1, r1
    6dce:	08 95       	ret

00006dd0 <__divmodsi4>:
    6dd0:	05 2e       	mov	r0, r21
    6dd2:	97 fb       	bst	r25, 7
    6dd4:	16 f4       	brtc	.+4      	; 0x6dda <__divmodsi4+0xa>
    6dd6:	00 94       	com	r0
    6dd8:	0f d0       	rcall	.+30     	; 0x6df8 <__negsi2>
    6dda:	57 fd       	sbrc	r21, 7
    6ddc:	05 d0       	rcall	.+10     	; 0x6de8 <__divmodsi4_neg2>
    6dde:	12 d8       	rcall	.-4060   	; 0x5e04 <__udivmodsi4>
    6de0:	07 fc       	sbrc	r0, 7
    6de2:	02 d0       	rcall	.+4      	; 0x6de8 <__divmodsi4_neg2>
    6de4:	46 f4       	brtc	.+16     	; 0x6df6 <__divmodsi4_exit>
    6de6:	08 c0       	rjmp	.+16     	; 0x6df8 <__negsi2>

00006de8 <__divmodsi4_neg2>:
    6de8:	50 95       	com	r21
    6dea:	40 95       	com	r20
    6dec:	30 95       	com	r19
    6dee:	21 95       	neg	r18
    6df0:	3f 4f       	sbci	r19, 0xFF	; 255
    6df2:	4f 4f       	sbci	r20, 0xFF	; 255
    6df4:	5f 4f       	sbci	r21, 0xFF	; 255

00006df6 <__divmodsi4_exit>:
    6df6:	08 95       	ret

00006df8 <__negsi2>:
    6df8:	90 95       	com	r25
    6dfa:	80 95       	com	r24
    6dfc:	70 95       	com	r23
    6dfe:	61 95       	neg	r22
    6e00:	7f 4f       	sbci	r23, 0xFF	; 255
    6e02:	8f 4f       	sbci	r24, 0xFF	; 255
    6e04:	9f 4f       	sbci	r25, 0xFF	; 255
    6e06:	08 95       	ret

00006e08 <__muluhisi3>:
    6e08:	28 d8       	rcall	.-4016   	; 0x5e5a <__umulhisi3>
    6e0a:	a5 9f       	mul	r26, r21
    6e0c:	90 0d       	add	r25, r0
    6e0e:	b4 9f       	mul	r27, r20
    6e10:	90 0d       	add	r25, r0
    6e12:	a4 9f       	mul	r26, r20
    6e14:	80 0d       	add	r24, r0
    6e16:	91 1d       	adc	r25, r1
    6e18:	11 24       	eor	r1, r1
    6e1a:	08 95       	ret

00006e1c <__mulshisi3>:
    6e1c:	b7 ff       	sbrs	r27, 7
    6e1e:	f4 cf       	rjmp	.-24     	; 0x6e08 <__muluhisi3>

00006e20 <__mulohisi3>:
    6e20:	f3 df       	rcall	.-26     	; 0x6e08 <__muluhisi3>
    6e22:	82 1b       	sub	r24, r18
    6e24:	93 0b       	sbc	r25, r19
    6e26:	08 95       	ret

00006e28 <_exit>:
    6e28:	f8 94       	cli

00006e2a <__stop_program>:
    6e2a:	ff cf       	rjmp	.-2      	; 0x6e2a <__stop_program>
