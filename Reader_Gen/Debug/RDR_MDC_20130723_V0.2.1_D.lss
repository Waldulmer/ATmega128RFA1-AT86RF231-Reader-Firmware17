
RDR_MDC_20130723_V0.2.1_D.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000032a  00800200  00007062  000070f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007062  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000007a3  0080052a  0080052a  00007420  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007420  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000747c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a80  00000000  00000000  000074c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000127d5  00000000  00000000  00007f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000049d8  00000000  00000000  0001a715  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000a940  00000000  00000000  0001f0ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001c08  00000000  00000000  00029a30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00021639  00000000  00000000  0002b638  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000070a1  00000000  00000000  0004cc71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000d20  00000000  00000000  00053d12  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000bd85  00000000  00000000  00054a32  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 85 01 	jmp	0x30a	; 0x30a <__ctors_end>
       4:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
       8:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
       c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      10:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      14:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      18:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      1c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      20:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      24:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      28:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      2c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      30:	0c 94 2f 29 	jmp	0x525e	; 0x525e <__vector_12>
      34:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      38:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      3c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      40:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      44:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      48:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      4c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      50:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      54:	0c 94 78 16 	jmp	0x2cf0	; 0x2cf0 <__vector_21>
      58:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      5c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      60:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      64:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      68:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      6c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      70:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      74:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      78:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      7c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      80:	0c 94 8b 28 	jmp	0x5116	; 0x5116 <__vector_32>
      84:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      88:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      8c:	0c 94 20 29 	jmp	0x5240	; 0x5240 <__vector_35>
      90:	0c 94 cc 29 	jmp	0x5398	; 0x5398 <__vector_36>
      94:	0c 94 13 2a 	jmp	0x5426	; 0x5426 <__vector_37>
      98:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      9c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      a0:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      a4:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      a8:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      ac:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      b0:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      b4:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      b8:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      bc:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      c0:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      c4:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      c8:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      cc:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      d0:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      d4:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      d8:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      dc:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      e0:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      e4:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      e8:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      ec:	0c 94 82 1f 	jmp	0x3f04	; 0x3f04 <__vector_59>
      f0:	0c 94 aa 1f 	jmp	0x3f54	; 0x3f54 <__vector_60>
      f4:	0c 94 ff 1f 	jmp	0x3ffe	; 0x3ffe <__vector_61>
      f8:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
      fc:	0c 94 d2 1f 	jmp	0x3fa4	; 0x3fa4 <__vector_63>
     100:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     104:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     108:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     10c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     110:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     114:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     118:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     11c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__bad_interrupt>
     120:	dd 04       	cpc	r13, r13
     122:	e5 04       	cpc	r14, r5
     124:	3e 04       	cpc	r3, r14
     126:	3e 04       	cpc	r3, r14
     128:	3e 04       	cpc	r3, r14
     12a:	3e 04       	cpc	r3, r14
     12c:	1b 05       	cpc	r17, r11
     12e:	d0 05       	cpc	r29, r0
     130:	3e 04       	cpc	r3, r14
     132:	e4 05       	cpc	r30, r4
     134:	3e 04       	cpc	r3, r14
     136:	fc 05       	cpc	r31, r12
     138:	3e 04       	cpc	r3, r14
     13a:	3e 04       	cpc	r3, r14
     13c:	65 06       	cpc	r6, r21
     13e:	c4 04       	cpc	r12, r4
     140:	3e 04       	cpc	r3, r14
     142:	3e 04       	cpc	r3, r14
     144:	da 06       	cpc	r13, r26
     146:	ec 06       	cpc	r14, r28
     148:	3e 04       	cpc	r3, r14
     14a:	3e 04       	cpc	r3, r14
     14c:	52 07       	cpc	r21, r18
     14e:	55 04       	cpc	r5, r5
     150:	3e 04       	cpc	r3, r14
     152:	d9 04       	cpc	r13, r9
     154:	3e 04       	cpc	r3, r14
     156:	3e 04       	cpc	r3, r14
     158:	3e 04       	cpc	r3, r14
     15a:	3e 04       	cpc	r3, r14
     15c:	1b 05       	cpc	r17, r11
     15e:	cc 06       	cpc	r12, r28
     160:	3e 04       	cpc	r3, r14
     162:	3e 04       	cpc	r3, r14
     164:	3e 04       	cpc	r3, r14
     166:	3e 04       	cpc	r3, r14
     168:	3e 04       	cpc	r3, r14
     16a:	3e 04       	cpc	r3, r14
     16c:	c4 04       	cpc	r12, r4
     16e:	cf 06       	cpc	r12, r31
     170:	e8 10       	cpse	r14, r8
     172:	e1 10       	cpse	r14, r1
     174:	da 10       	cpse	r13, r10
     176:	d3 10       	cpse	r13, r3
     178:	cc 10       	cpse	r12, r12
     17a:	c5 10       	cpse	r12, r5
     17c:	be 10       	cpse	r11, r14
     17e:	7f 10       	cpse	r7, r15
     180:	ef 10       	cpse	r14, r15
     182:	b0 10       	cpse	r11, r0
     184:	a9 10       	cpse	r10, r9
     186:	a2 10       	cpse	r10, r2
     188:	9b 10       	cpse	r9, r11
     18a:	94 10       	cpse	r9, r4
     18c:	8d 10       	cpse	r8, r13
     18e:	86 10       	cpse	r8, r6
     190:	78 10       	cpse	r7, r8
     192:	b7 10       	cpse	r11, r7
     194:	bb 15       	cp	r27, r11
     196:	a9 15       	cp	r26, r9
     198:	af 15       	cp	r26, r15
     19a:	b5 15       	cp	r27, r5
     19c:	78 15       	cp	r23, r8
     19e:	d3 15       	cp	r29, r3
     1a0:	cd 15       	cp	r28, r13
     1a2:	c7 15       	cp	r28, r7
     1a4:	c1 15       	cp	r28, r1
     1a6:	bb 15       	cp	r27, r11
     1a8:	a9 15       	cp	r26, r9
     1aa:	af 15       	cp	r26, r15
     1ac:	b5 15       	cp	r27, r5
     1ae:	78 15       	cp	r23, r8
     1b0:	d3 15       	cp	r29, r3
     1b2:	cd 15       	cp	r28, r13
     1b4:	c7 15       	cp	r28, r7
     1b6:	c1 15       	cp	r28, r1
     1b8:	23 24       	eor	r2, r3
     1ba:	20 24       	eor	r2, r0
     1bc:	1d 24       	eor	r1, r13
     1be:	1a 24       	eor	r1, r10
     1c0:	13 24       	eor	r1, r3
     1c2:	07 24       	eor	r0, r7
     1c4:	f8 23       	and	r31, r24
     1c6:	f0 23       	and	r31, r16
     1c8:	da 23       	and	r29, r26
     1ca:	3a 24       	eor	r3, r10

000001cc <__trampolines_end>:
     1cc:	6e 61       	ori	r22, 0x1E	; 30
     1ce:	6e 00       	.word	0x006e	; ????

000001d0 <__c.2240>:
     1d0:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1e0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1f0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     200:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     210:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     220:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     230:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     240:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     250:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     260:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     270:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     280:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     290:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2a0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2b0:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2c0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002ce <pstr_nan>:
     2ce:	4e 41 4e                                            NAN

000002d1 <pstr_inity>:
     2d1:	49 4e 49 54 59                                      INITY

000002d6 <pstr_inf>:
     2d6:	49 4e 46                                            INF

000002d9 <pwr_m10>:
     2d9:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     2e9:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000002f1 <pwr_p10>:
     2f1:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     301:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

0000030a <__ctors_end>:
     30a:	11 24       	eor	r1, r1
     30c:	1f be       	out	0x3f, r1	; 63
     30e:	c0 e0       	ldi	r28, 0x00	; 0
     310:	d0 e4       	ldi	r29, 0x40	; 64
     312:	de bf       	out	0x3e, r29	; 62
     314:	cd bf       	out	0x3d, r28	; 61

00000316 <__do_copy_data>:
     316:	15 e0       	ldi	r17, 0x05	; 5
     318:	a0 e0       	ldi	r26, 0x00	; 0
     31a:	b2 e0       	ldi	r27, 0x02	; 2
     31c:	e2 e6       	ldi	r30, 0x62	; 98
     31e:	f0 e7       	ldi	r31, 0x70	; 112
     320:	00 e0       	ldi	r16, 0x00	; 0
     322:	0b bf       	out	0x3b, r16	; 59
     324:	02 c0       	rjmp	.+4      	; 0x32a <__do_copy_data+0x14>
     326:	07 90       	elpm	r0, Z+
     328:	0d 92       	st	X+, r0
     32a:	aa 32       	cpi	r26, 0x2A	; 42
     32c:	b1 07       	cpc	r27, r17
     32e:	d9 f7       	brne	.-10     	; 0x326 <__do_copy_data+0x10>

00000330 <__do_clear_bss>:
     330:	2c e0       	ldi	r18, 0x0C	; 12
     332:	aa e2       	ldi	r26, 0x2A	; 42
     334:	b5 e0       	ldi	r27, 0x05	; 5
     336:	01 c0       	rjmp	.+2      	; 0x33a <.do_clear_bss_start>

00000338 <.do_clear_bss_loop>:
     338:	1d 92       	st	X+, r1

0000033a <.do_clear_bss_start>:
     33a:	ad 3c       	cpi	r26, 0xCD	; 205
     33c:	b2 07       	cpc	r27, r18
     33e:	e1 f7       	brne	.-8      	; 0x338 <.do_clear_bss_loop>
     340:	0e 94 95 1c 	call	0x392a	; 0x392a <main>
     344:	0c 94 2f 38 	jmp	0x705e	; 0x705e <_exit>

00000348 <__bad_interrupt>:
     348:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000034c <ledoff1>:
	completes.

	u8 channel The clear channel selected for use by this PAN.
	*/
	void appClearChanFound(u8 channel)
	{
     34c:	a0 98       	cbi	0x14, 0	; 20
     34e:	08 95       	ret

00000350 <ledoff2>:
     350:	a1 98       	cbi	0x14, 1	; 20
     352:	08 95       	ret

00000354 <ValidationTimeout>:
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <VALIDATION_TIMEOUT>
     35a:	08 95       	ret

0000035c <CommTimeOut>:
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	80 93 2f 05 	sts	0x052F, r24	; 0x80052f <TOFlag>
     362:	e4 e3       	ldi	r30, 0x34	; 52
     364:	f9 e0       	ldi	r31, 0x09	; 9
     366:	80 81       	ld	r24, Z
     368:	8f 7b       	andi	r24, 0xBF	; 191
     36a:	80 83       	st	Z, r24
     36c:	08 95       	ret

0000036e <KeypressTimeOut>:
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <KPTOFlag>
     374:	08 95       	ret

00000376 <SetupTimeout>:
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <SETUP_TIMEOUT>
     37c:	08 95       	ret

0000037e <SetDeviceState>:
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	80 93 b9 09 	sts	0x09B9, r24	; 0x8009b9 <ucDeviceStateFlag>
     384:	08 95       	ret

00000386 <appStartScan>:
     386:	8f ef       	ldi	r24, 0xFF	; 255
     388:	0e 94 ce 20 	call	0x419c	; 0x419c <macInit>
     38c:	0c 94 f6 26 	jmp	0x4dec	; 0x4dec <macScan>

00000390 <appAssociate>:
     390:	e1 eb       	ldi	r30, 0xB1	; 177
     392:	fc e0       	ldi	r31, 0x0C	; 12
     394:	65 81       	ldd	r22, Z+5	; 0x05
     396:	83 81       	ldd	r24, Z+3	; 0x03
     398:	94 81       	ldd	r25, Z+4	; 0x04
     39a:	0c 94 57 21 	jmp	0x42ae	; 0x42ae <macAssociate>

0000039e <appPingReq>:
     39e:	bc 01       	movw	r22, r24
     3a0:	83 e0       	ldi	r24, 0x03	; 3
     3a2:	0c 94 5b 23 	jmp	0x46b6	; 0x46b6 <macPing>

000003a6 <appPingRsp>:
     3a6:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <radioGetSavedRssiValue>
     3aa:	88 23       	and	r24, r24
     3ac:	19 f0       	breq	.+6      	; 0x3b4 <appPingRsp+0xe>
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	80 93 44 0c 	sts	0x0C44, r24	; 0x800c44 <macConfig+0x8>
     3b4:	08 95       	ret

000003b6 <appPacketSendSucceed>:
     3b6:	20 91 51 0c 	lds	r18, 0x0C51	; 0x800c51 <macConfig+0x15>
     3ba:	30 91 52 0c 	lds	r19, 0x0C52	; 0x800c52 <macConfig+0x16>
     3be:	80 91 4b 0c 	lds	r24, 0x0C4B	; 0x800c4b <macConfig+0xf>
     3c2:	90 91 4c 0c 	lds	r25, 0x0C4C	; 0x800c4c <macConfig+0x10>
     3c6:	28 17       	cp	r18, r24
     3c8:	39 07       	cpc	r19, r25
     3ca:	09 f0       	breq	.+2      	; 0x3ce <appPacketSendSucceed+0x18>
     3cc:	08 95       	ret
     3ce:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <failCount>
     3d2:	08 95       	ret

000003d4 <appPacketSendAccessFail>:
     3d4:	08 95       	ret

000003d6 <appPacketSendFailed>:
     3d6:	0e 94 90 26 	call	0x4d20	; 0x4d20 <macIsScanning>
     3da:	81 11       	cpse	r24, r1
     3dc:	1a c0       	rjmp	.+52     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     3de:	80 91 51 0c 	lds	r24, 0x0C51	; 0x800c51 <macConfig+0x15>
     3e2:	90 91 52 0c 	lds	r25, 0x0C52	; 0x800c52 <macConfig+0x16>
     3e6:	20 91 4b 0c 	lds	r18, 0x0C4B	; 0x800c4b <macConfig+0xf>
     3ea:	30 91 4c 0c 	lds	r19, 0x0C4C	; 0x800c4c <macConfig+0x10>
     3ee:	82 17       	cp	r24, r18
     3f0:	93 07       	cpc	r25, r19
     3f2:	81 f0       	breq	.+32     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     3f4:	20 91 2c 05 	lds	r18, 0x052C	; 0x80052c <failCount>
     3f8:	2f 5f       	subi	r18, 0xFF	; 255
     3fa:	20 93 2c 05 	sts	0x052C, r18	; 0x80052c <failCount>
     3fe:	0e 94 a9 21 	call	0x4352	; 0x4352 <macIsChild>
     402:	88 23       	and	r24, r24
     404:	31 f0       	breq	.+12     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     406:	80 91 51 0c 	lds	r24, 0x0C51	; 0x800c51 <macConfig+0x15>
     40a:	90 91 52 0c 	lds	r25, 0x0C52	; 0x800c52 <macConfig+0x16>
     40e:	0c 94 ff 21 	jmp	0x43fe	; 0x43fe <macRemoveChild>
     412:	08 95       	ret
     414:	40 e0       	ldi	r20, 0x00	; 0
     416:	50 e0       	ldi	r21, 0x00	; 0
     418:	60 e0       	ldi	r22, 0x00	; 0
     41a:	0e 94 da 22 	call	0x45b4	; 0x45b4 <macDataRequest>
     41e:	80 91 2c 05 	lds	r24, 0x052C	; 0x80052c <failCount>
     422:	8f 5f       	subi	r24, 0xFF	; 255
     424:	80 93 2c 05 	sts	0x052C, r24	; 0x80052c <failCount>
     428:	10 92 44 0c 	sts	0x0C44, r1	; 0x800c44 <macConfig+0x8>
     42c:	88 e0       	ldi	r24, 0x08	; 8
     42e:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <radioRandom>
     432:	28 2f       	mov	r18, r24
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	2e 5c       	subi	r18, 0xCE	; 206
     438:	3f 4f       	sbci	r19, 0xFF	; 255
     43a:	4e e1       	ldi	r20, 0x1E	; 30
     43c:	42 9f       	mul	r20, r18
     43e:	c0 01       	movw	r24, r0
     440:	43 9f       	mul	r20, r19
     442:	90 0d       	add	r25, r0
     444:	11 24       	eor	r1, r1
     446:	63 ec       	ldi	r22, 0xC3	; 195
     448:	71 e0       	ldi	r23, 0x01	; 1
     44a:	88 51       	subi	r24, 0x18	; 24
     44c:	9c 4f       	sbci	r25, 0xFC	; 252
     44e:	0e 94 81 27 	call	0x4f02	; 0x4f02 <macSetAlarm>
     452:	80 91 51 0c 	lds	r24, 0x0C51	; 0x800c51 <macConfig+0x15>
     456:	90 91 52 0c 	lds	r25, 0x0C52	; 0x800c52 <macConfig+0x16>
     45a:	d1 cf       	rjmp	.-94     	; 0x3fe <appPacketSendFailed+0x28>

0000045c <appDataIndication>:
     45c:	80 91 38 0b 	lds	r24, 0x0B38	; 0x800b38 <mac_buffer_rx>
     460:	10 92 0f 0b 	sts	0x0B0F, r1	; 0x800b0f <ucSendDataSize>
     464:	88 23       	and	r24, r24
     466:	29 f0       	breq	.+10     	; 0x472 <appDataIndication+0x16>
     468:	80 91 46 0b 	lds	r24, 0x0B46	; 0x800b46 <mac_buffer_rx+0xe>
     46c:	8f 77       	andi	r24, 0x7F	; 127
     46e:	81 30       	cpi	r24, 0x01	; 1
     470:	09 f0       	breq	.+2      	; 0x474 <appDataIndication+0x18>
     472:	08 95       	ret
     474:	20 91 47 0b 	lds	r18, 0x0B47	; 0x800b47 <mac_buffer_rx+0xf>
     478:	20 93 2b 05 	sts	0x052B, r18	; 0x80052b <ucDataLength.4360>
     47c:	e6 e3       	ldi	r30, 0x36	; 54
     47e:	f9 e0       	ldi	r31, 0x09	; 9
     480:	80 e8       	ldi	r24, 0x80	; 128
     482:	df 01       	movw	r26, r30
     484:	1d 92       	st	X+, r1
     486:	8a 95       	dec	r24
     488:	e9 f7       	brne	.-6      	; 0x484 <appDataIndication+0x28>
     48a:	22 23       	and	r18, r18
     48c:	69 f0       	breq	.+26     	; 0x4a8 <appDataIndication+0x4c>
     48e:	e8 e4       	ldi	r30, 0x48	; 72
     490:	fb e0       	ldi	r31, 0x0B	; 11
     492:	a6 e3       	ldi	r26, 0x36	; 54
     494:	b9 e0       	ldi	r27, 0x09	; 9
     496:	21 50       	subi	r18, 0x01	; 1
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	27 5b       	subi	r18, 0xB7	; 183
     49c:	34 4f       	sbci	r19, 0xF4	; 244
     49e:	81 91       	ld	r24, Z+
     4a0:	8d 93       	st	X+, r24
     4a2:	e2 17       	cp	r30, r18
     4a4:	f3 07       	cpc	r31, r19
     4a6:	d9 f7       	brne	.-10     	; 0x49e <appDataIndication+0x42>
     4a8:	86 e3       	ldi	r24, 0x36	; 54
     4aa:	99 e0       	ldi	r25, 0x09	; 9
     4ac:	0e 94 19 0a 	call	0x1432	; 0x1432 <extractIncomingMessage>
     4b0:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
     4b4:	10 92 33 09 	sts	0x0933, r1	; 0x800933 <ucNumberOfRetry>
     4b8:	08 95       	ret

000004ba <appChildAssociated>:
     4ba:	a1 9a       	sbi	0x14, 1	; 20
     4bc:	68 ea       	ldi	r22, 0xA8	; 168
     4be:	71 e0       	ldi	r23, 0x01	; 1
     4c0:	8a e0       	ldi	r24, 0x0A	; 10
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	0c 94 81 27 	jmp	0x4f02	; 0x4f02 <macSetAlarm>

000004c8 <appAssociateConfirm>:
     4c8:	81 11       	cpse	r24, r1
     4ca:	08 95       	ret
     4cc:	a1 9a       	sbi	0x14, 1	; 20
     4ce:	68 ea       	ldi	r22, 0xA8	; 168
     4d0:	71 e0       	ldi	r23, 0x01	; 1
     4d2:	8a e0       	ldi	r24, 0x0A	; 10
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	0c 94 81 27 	jmp	0x4f02	; 0x4f02 <macSetAlarm>

000004da <appScanConfirm>:
     4da:	81 11       	cpse	r24, r1
     4dc:	06 c0       	rjmp	.+12     	; 0x4ea <appScanConfirm+0x10>
     4de:	63 ec       	ldi	r22, 0xC3	; 195
     4e0:	71 e0       	ldi	r23, 0x01	; 1
     4e2:	88 ee       	ldi	r24, 0xE8	; 232
     4e4:	93 e0       	ldi	r25, 0x03	; 3
     4e6:	0c 94 81 27 	jmp	0x4f02	; 0x4f02 <macSetAlarm>
     4ea:	68 ec       	ldi	r22, 0xC8	; 200
     4ec:	71 e0       	ldi	r23, 0x01	; 1
     4ee:	8e e1       	ldi	r24, 0x1E	; 30
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	0c 94 81 27 	jmp	0x4f02	; 0x4f02 <macSetAlarm>

000004f6 <checkEeprom>:
	Verifies that the EEPROM contains valid data for the stored MAC
	address.  If the EEPROM is unprogrammed, then a random MAC address
	is written into EEPROM.	Stores reader status: READER_NEW
	*/
	void checkEeprom(void)
	{
     4f6:	8f 92       	push	r8
     4f8:	9f 92       	push	r9
     4fa:	af 92       	push	r10
     4fc:	bf 92       	push	r11
     4fe:	cf 92       	push	r12
     500:	df 92       	push	r13
     502:	ef 92       	push	r14
     504:	ff 92       	push	r15
     506:	0f 93       	push	r16
     508:	1f 93       	push	r17
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	cd b7       	in	r28, 0x3d	; 61
     510:	de b7       	in	r29, 0x3e	; 62
     512:	61 97       	sbiw	r28, 0x11	; 17
     514:	0f b6       	in	r0, 0x3f	; 63
     516:	f8 94       	cli
     518:	de bf       	out	0x3e, r29	; 62
     51a:	0f be       	out	0x3f, r0	; 63
     51c:	cd bf       	out	0x3d, r28	; 61
			u32 low;
			u32 high;
			u8 regval;
			u8  i=0;
			//
			u8 temp = READER_NEW;
     51e:	87 e0       	ldi	r24, 0x07	; 7
     520:	89 8b       	std	Y+17, r24	; 0x11

			
			
			// Setup the address of this device by reading a stored address from eeprom.
			halGetMacAddr((u8*)&(NodeLongAddress));
     522:	ae 01       	movw	r20, r28
     524:	47 5f       	subi	r20, 0xF7	; 247
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	68 e0       	ldi	r22, 0x08	; 8
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	0e 94 a4 20 	call	0x4148	; 0x4148 <halGetEeprom>
			
			// Partition the long address
			low = NodeLongAddress & 0xffffffff;
     532:	89 84       	ldd	r8, Y+9	; 0x09
     534:	9a 84       	ldd	r9, Y+10	; 0x0a
     536:	ab 84       	ldd	r10, Y+11	; 0x0b
     538:	bc 84       	ldd	r11, Y+12	; 0x0c
     53a:	cd 84       	ldd	r12, Y+13	; 0x0d
     53c:	de 84       	ldd	r13, Y+14	; 0x0e
     53e:	ef 84       	ldd	r14, Y+15	; 0x0f
     540:	f8 88       	ldd	r15, Y+16	; 0x10
			high = NodeLongAddress >> 32;
			
			// Virgin Board Configuration Found,
			// Request Setup Info from Reader
			if((low == 0xFFFFFFFF) && (high == 0xFFFFFFFF)){
     542:	8f ef       	ldi	r24, 0xFF	; 255
     544:	88 16       	cp	r8, r24
     546:	98 06       	cpc	r9, r24
     548:	a8 06       	cpc	r10, r24
     54a:	b8 06       	cpc	r11, r24
     54c:	99 f0       	breq	.+38     	; 0x574 <checkEeprom+0x7e>
				asm("nop");
			}
			
			
		}
	}
     54e:	61 96       	adiw	r28, 0x11	; 17
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	f8 94       	cli
     554:	de bf       	out	0x3e, r29	; 62
     556:	0f be       	out	0x3f, r0	; 63
     558:	cd bf       	out	0x3d, r28	; 61
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	1f 91       	pop	r17
     560:	0f 91       	pop	r16
     562:	ff 90       	pop	r15
     564:	ef 90       	pop	r14
     566:	df 90       	pop	r13
     568:	cf 90       	pop	r12
     56a:	bf 90       	pop	r11
     56c:	af 90       	pop	r10
     56e:	9f 90       	pop	r9
     570:	8f 90       	pop	r8
     572:	08 95       	ret
			// Setup the address of this device by reading a stored address from eeprom.
			halGetMacAddr((u8*)&(NodeLongAddress));
			
			// Partition the long address
			low = NodeLongAddress & 0xffffffff;
			high = NodeLongAddress >> 32;
     574:	94 01       	movw	r18, r8
     576:	a5 01       	movw	r20, r10
     578:	b6 01       	movw	r22, r12
     57a:	c7 01       	movw	r24, r14
     57c:	00 e2       	ldi	r16, 0x20	; 32
     57e:	0e 94 31 30 	call	0x6062	; 0x6062 <__lshrdi3>
     582:	69 01       	movw	r12, r18
     584:	7a 01       	movw	r14, r20
			
			// Virgin Board Configuration Found,
			// Request Setup Info from Reader
			if((low == 0xFFFFFFFF) && (high == 0xFFFFFFFF)){
     586:	2f 3f       	cpi	r18, 0xFF	; 255
     588:	3f 4f       	sbci	r19, 0xFF	; 255
     58a:	4f 4f       	sbci	r20, 0xFF	; 255
     58c:	5f 4f       	sbci	r21, 0xFF	; 255
     58e:	61 05       	cpc	r22, r1
     590:	71 05       	cpc	r23, r1
     592:	81 05       	cpc	r24, r1
     594:	91 05       	cpc	r25, r1
     596:	71 f0       	breq	.+28     	; 0x5b4 <checkEeprom+0xbe>
				halPutEeprom(READER_STATE_ADDR,2,&temp);
				eeprom_update_byte(MACHINE_LABEL_ADDR, 0); //make label empty string
				eeprom_update_byte(MACHINE_DESCRIPTION_ADDR, 0); //make description empty string
			}
			//non virgin
			else if((low == 0xFFFFFFFF) && (high != 0x00000000)){
     598:	cd 28       	or	r12, r13
     59a:	ce 28       	or	r12, r14
     59c:	cf 28       	or	r12, r15
     59e:	b9 f2       	breq	.-82     	; 0x54e <checkEeprom+0x58>
				
				halPutEeprom(READER_STATE_ADDR,2,&temp);
     5a0:	ae 01       	movw	r20, r28
     5a2:	4f 5e       	subi	r20, 0xEF	; 239
     5a4:	5f 4f       	sbci	r21, 0xFF	; 255
     5a6:	62 e0       	ldi	r22, 0x02	; 2
     5a8:	82 e2       	ldi	r24, 0x22	; 34
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	0e 94 b9 20 	call	0x4172	; 0x4172 <halPutEeprom>
				asm("nop");
     5b0:	00 00       	nop
     5b2:	cd cf       	rjmp	.-102    	; 0x54e <checkEeprom+0x58>
				// Produce Random Number
				
				u8 buf[8];
				u8 bits =8;

				memset(&buf,0,sizeof(buf));
     5b4:	ce 01       	movw	r24, r28
     5b6:	01 96       	adiw	r24, 0x01	; 1
     5b8:	6c 01       	movw	r12, r24
     5ba:	88 e0       	ldi	r24, 0x08	; 8
     5bc:	f6 01       	movw	r30, r12
     5be:	11 92       	st	Z+, r1
     5c0:	8a 95       	dec	r24
     5c2:	e9 f7       	brne	.-6      	; 0x5be <checkEeprom+0xc8>
				// create random MAC address and store it
				radioInit(0); // Needed for random to work.
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	0e 94 b6 1c 	call	0x396c	; 0x396c <radioInit>
				radioSetTrxState(RX_ON);
     5ca:	86 e0       	ldi	r24, 0x06	; 6
     5cc:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <radioSetTrxState>
     5d0:	76 01       	movw	r14, r12

				
				for (u8 x = 0;x < 8;x++){
     5d2:	10 e0       	ldi	r17, 0x00	; 0
					
					if(x < 4)
					buf[x] = 0xFF;			// Load lower 4-bytes w/ 0xFF
     5d4:	0f ef       	ldi	r16, 0xFF	; 255
     5d6:	08 c0       	rjmp	.+16     	; 0x5e8 <checkEeprom+0xf2>
     5d8:	f7 01       	movw	r30, r14
     5da:	00 83       	st	Z, r16
				// create random MAC address and store it
				radioInit(0); // Needed for random to work.
				radioSetTrxState(RX_ON);

				
				for (u8 x = 0;x < 8;x++){
     5dc:	1f 5f       	subi	r17, 0xFF	; 255
     5de:	ff ef       	ldi	r31, 0xFF	; 255
     5e0:	ef 1a       	sub	r14, r31
     5e2:	ff 0a       	sbc	r15, r31
     5e4:	18 30       	cpi	r17, 0x08	; 8
     5e6:	c1 f0       	breq	.+48     	; 0x618 <checkEeprom+0x122>
					
					if(x < 4)
     5e8:	14 30       	cpi	r17, 0x04	; 4
     5ea:	b0 f3       	brcs	.-20     	; 0x5d8 <checkEeprom+0xe2>
					buf[x] = 0xFF;			// Load lower 4-bytes w/ 0xFF

					else{
						
						i = radioGetTrxState();
     5ec:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <radioGetTrxState>

						// Load upper 4-bytes w/ random number (4-bytes)
						if(i == RX_ON || i == RX_AACK_ON)
     5f0:	8f 7e       	andi	r24, 0xEF	; 239
     5f2:	86 30       	cpi	r24, 0x06	; 6
     5f4:	99 f7       	brne	.-26     	; 0x5dc <checkEeprom+0xe6>
     5f6:	f7 01       	movw	r30, r14
     5f8:	90 81       	ld	r25, Z
     5fa:	24 e0       	ldi	r18, 0x04	; 4
						// Must be in rx to get random numbers
						// Random number generator on-board
						// has two random bits each read
						for (i=0;i<bits/2;i++)
						{
							regval = hal_subregister_read(SR_RND_VALUE);
     5fc:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__TEXT_REGION_LENGTH__+0x7e0146>
     600:	80 76       	andi	r24, 0x60	; 96
     602:	82 95       	swap	r24
     604:	86 95       	lsr	r24
     606:	87 70       	andi	r24, 0x07	; 7
							buf[x]= (buf[x] << 2) | regval;
     608:	99 0f       	add	r25, r25
     60a:	99 0f       	add	r25, r25
     60c:	98 2b       	or	r25, r24
     60e:	f7 01       	movw	r30, r14
     610:	90 83       	st	Z, r25
     612:	21 50       	subi	r18, 0x01	; 1
						// Load upper 4-bytes w/ random number (4-bytes)
						if(i == RX_ON || i == RX_AACK_ON)
						// Must be in rx to get random numbers
						// Random number generator on-board
						// has two random bits each read
						for (i=0;i<bits/2;i++)
     614:	99 f7       	brne	.-26     	; 0x5fc <checkEeprom+0x106>
     616:	e2 cf       	rjmp	.-60     	; 0x5dc <checkEeprom+0xe6>
						}
					}
				}


				halPutMacAddr(buf);
     618:	a6 01       	movw	r20, r12
     61a:	68 e0       	ldi	r22, 0x08	; 8
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	0e 94 b9 20 	call	0x4172	; 0x4172 <halPutEeprom>
				
				
				halPutEeprom(READER_STATE_ADDR,2,&temp);
     624:	ae 01       	movw	r20, r28
     626:	4f 5e       	subi	r20, 0xEF	; 239
     628:	5f 4f       	sbci	r21, 0xFF	; 255
     62a:	62 e0       	ldi	r22, 0x02	; 2
     62c:	82 e2       	ldi	r24, 0x22	; 34
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	0e 94 b9 20 	call	0x4172	; 0x4172 <halPutEeprom>
				eeprom_update_byte(MACHINE_LABEL_ADDR, 0); //make label empty string
     634:	60 e0       	ldi	r22, 0x00	; 0
     636:	8c e6       	ldi	r24, 0x6C	; 108
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	0e 94 c3 37 	call	0x6f86	; 0x6f86 <eeprom_update_byte>
				eeprom_update_byte(MACHINE_DESCRIPTION_ADDR, 0); //make description empty string
     63e:	60 e0       	ldi	r22, 0x00	; 0
     640:	87 e7       	ldi	r24, 0x77	; 119
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	0e 94 c3 37 	call	0x6f86	; 0x6f86 <eeprom_update_byte>
			low = NodeLongAddress & 0xffffffff;
			high = NodeLongAddress >> 32;
			
			// Virgin Board Configuration Found,
			// Request Setup Info from Reader
			if((low == 0xFFFFFFFF) && (high == 0xFFFFFFFF)){
     648:	82 cf       	rjmp	.-252    	; 0x54e <checkEeprom+0x58>

0000064a <appInit>:
	Initializes ACA machines calling machine status
	Set flags: VALIDATE_READER
	ucDeviceStateFlag
	*/
	void appInit(void)
	{
     64a:	0f 93       	push	r16
     64c:	1f 93       	push	r17
     64e:	cf 93       	push	r28
     650:	df 93       	push	r29
     652:	1f 92       	push	r1
     654:	cd b7       	in	r28, 0x3d	; 61
     656:	de b7       	in	r29, 0x3e	; 62
		u8 machineCode;
		u8 tmp=0;
		u8 machineTimerId;
		
		// Init the mac
		LED_INIT();
     658:	83 b3       	in	r24, 0x13	; 19
     65a:	87 60       	ori	r24, 0x07	; 7
     65c:	83 bb       	out	0x13, r24	; 19
     65e:	84 b3       	in	r24, 0x14	; 20
     660:	88 7f       	andi	r24, 0xF8	; 248
     662:	84 bb       	out	0x14, r24	; 20
		Leds_on();
     664:	84 b3       	in	r24, 0x14	; 20
     666:	87 60       	ori	r24, 0x07	; 7
     668:	84 bb       	out	0x14, r24	; 20
		Buzzer_init();
     66a:	6b 9a       	sbi	0x0d, 3	; 13
     66c:	73 98       	cbi	0x0e, 3	; 14
		Leds_off();
     66e:	84 b3       	in	r24, 0x14	; 20
     670:	88 7f       	andi	r24, 0xF8	; 248
     672:	84 bb       	out	0x14, r24	; 20

		// Blip the LED once on powerup
		Led1_on();
     674:	a0 9a       	sbi	0x14, 0	; 20

		OP = VALIDATE_READER;
     676:	83 e1       	ldi	r24, 0x13	; 19
     678:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
		macSetAlarm(25, ledoff1);
     67c:	66 ea       	ldi	r22, 0xA6	; 166
     67e:	71 e0       	ldi	r23, 0x01	; 1
     680:	89 e1       	ldi	r24, 0x19	; 25
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	0e 94 81 27 	call	0x4f02	; 0x4f02 <macSetAlarm>

		ucDeviceStateFlag = DEVICE_STATUS_NEEDED;
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	80 93 b9 09 	sts	0x09B9, r24	; 0x8009b9 <ucDeviceStateFlag>
		
		#if (__AVR__)
		// If the EEPROM is cleared, init it to something useful
		checkEeprom();
     68e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <checkEeprom>
		#endif // __AVR__
		
		initReader();
     692:	0e 94 76 14 	call	0x28ec	; 0x28ec <initReader>

		
		#ifdef MACHINE_CONNECTED
		
		//wait up to 10 seconds for machine to become active
		machineTimerId = macSetAlarm(MACHINE_WAIT_TIMEOUT,WaitForMachine);
     696:	63 e6       	ldi	r22, 0x63	; 99
     698:	76 e1       	ldi	r23, 0x16	; 22
     69a:	88 e2       	ldi	r24, 0x28	; 40
     69c:	93 e2       	ldi	r25, 0x23	; 35
     69e:	0e 94 81 27 	call	0x4f02	; 0x4f02 <macSetAlarm>
     6a2:	08 2f       	mov	r16, r24
	ucDeviceStateFlag
	*/
	void appInit(void)
	{
		u8 machineCode;
		u8 tmp=0;
     6a4:	10 e0       	ldi	r17, 0x00	; 0
		#ifdef MACHINE_CONNECTED
		
		//wait up to 10 seconds for machine to become active
		machineTimerId = macSetAlarm(MACHINE_WAIT_TIMEOUT,WaitForMachine);
		
		while(ucMachineWait == MACHINE_WAIT)
     6a6:	90 91 b8 09 	lds	r25, 0x09B8	; 0x8009b8 <ucMachineWait>
     6aa:	91 11       	cpse	r25, r1
     6ac:	11 c0       	rjmp	.+34     	; 0x6d0 <appInit+0x86>
		{
			if(ucDeviceStateFlag == DEVICE_STATUS_NEEDED)
     6ae:	90 91 b9 09 	lds	r25, 0x09B9	; 0x8009b9 <ucDeviceStateFlag>
     6b2:	91 30       	cpi	r25, 0x01	; 1
     6b4:	99 f1       	breq	.+102    	; 0x71c <appInit+0xd2>
				//If True, Machine Status has been completed, ucDeviceStateFlag set to MACHINE_STATUS_ON
				SQACAInitializationSequence();
				
				tmp = macSetAlarm(DEVICE_POLL_PERIOD,SetDeviceState);
			}
			else if(ucDeviceStateFlag == MACHINE_STATUS_ON)
     6b6:	92 30       	cpi	r25, 0x02	; 2
     6b8:	09 f4       	brne	.+2      	; 0x6bc <appInit+0x72>
     6ba:	59 c0       	rjmp	.+178    	; 0x76e <appInit+0x124>
				macTimerEnd(machineTimerId);
				macTimerEnd(tmp);
				
				break;
			}
			else if( mac_event_pending() )
     6bc:	0e 94 76 23 	call	0x46ec	; 0x46ec <mac_event_pending>
     6c0:	88 23       	and	r24, r24
     6c2:	89 f3       	breq	.-30     	; 0x6a6 <appInit+0x5c>
			{
				macTask();  //timer has timed out handle timer task.
     6c4:	0e 94 ab 23 	call	0x4756	; 0x4756 <macTask>
		#ifdef MACHINE_CONNECTED
		
		//wait up to 10 seconds for machine to become active
		machineTimerId = macSetAlarm(MACHINE_WAIT_TIMEOUT,WaitForMachine);
		
		while(ucMachineWait == MACHINE_WAIT)
     6c8:	90 91 b8 09 	lds	r25, 0x09B8	; 0x8009b8 <ucMachineWait>
     6cc:	99 23       	and	r25, r25
     6ce:	79 f3       	breq	.-34     	; 0x6ae <appInit+0x64>
			{
				macTask();  //timer has timed out handle timer task.
			}
			
		}
		macSetAlarm(DEVICE_POLL_PERIOD,SetDeviceState);
     6d0:	6f eb       	ldi	r22, 0xBF	; 191
     6d2:	71 e0       	ldi	r23, 0x01	; 1
     6d4:	8c e2       	ldi	r24, 0x2C	; 44
     6d6:	91 e0       	ldi	r25, 0x01	; 1
     6d8:	0e 94 81 27 	call	0x4f02	; 0x4f02 <macSetAlarm>
		*/
		
		#if (DEVICE_CONNECTED == ACA_MACHINE)
		// read machine code stored in EEPROM
		/********can check reader state flag here and update******/
		halGetEeprom(MACHINE_TYPE_ADDR, 1, &machineCode);
     6dc:	ae 01       	movw	r20, r28
     6de:	4f 5f       	subi	r20, 0xFF	; 255
     6e0:	5f 4f       	sbci	r21, 0xFF	; 255
     6e2:	61 e0       	ldi	r22, 0x01	; 1
     6e4:	8e e1       	ldi	r24, 0x1E	; 30
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	0e 94 a4 20 	call	0x4148	; 0x4148 <halGetEeprom>
		
		//if a valid machine is connected, then store the machine type
		if((machineCode == 0xFF) && (SQACAMachineStatus.MachineType[0] != INVALID_MACHINE))
     6ec:	89 81       	ldd	r24, Y+1	; 0x01
     6ee:	8f 3f       	cpi	r24, 0xFF	; 255
     6f0:	f9 f0       	breq	.+62     	; 0x730 <appInit+0xe6>
			// save the actual machine code
			halPutEeprom(MACHINE_TYPE_ADDR, 1, &SQACAMachineStatus.MachineType[0]);
			halPutEeprom(MACHINE_TYPE_ADDR+1, 1, &SQACAMachineStatus.MachineType[1]);
			//defaultSetupString();  //PPOS
		}
		else if(SQACAMachineStatus.MachineType[0] != machineCode)
     6f2:	90 91 f5 0a 	lds	r25, 0x0AF5	; 0x800af5 <SQACAMachineStatus>
     6f6:	89 13       	cpse	r24, r25
     6f8:	1f c0       	rjmp	.+62     	; 0x738 <appInit+0xee>
			#ifdef DEBUG_RADIO
			debugMsgStrConst("\r\nStart scan ");
			#endif

			//macSetScanChannel(0x0f);//BOW is operating only on this channel
			macInit(0xff);
     6fa:	8f ef       	ldi	r24, 0xFF	; 255
     6fc:	0e 94 ce 20 	call	0x419c	; 0x419c <macInit>
			
			macScan();
     700:	0e 94 f6 26 	call	0x4dec	; 0x4dec <macScan>
			sixlowpan_init();

			#ifndef COORDNODE

			
			if (ucDeviceStateFlag == MACHINE_STATUS_ON)
     704:	80 91 b9 09 	lds	r24, 0x09B9	; 0x8009b9 <ucDeviceStateFlag>
     708:	82 30       	cpi	r24, 0x02	; 2
     70a:	09 f4       	brne	.+2      	; 0x70e <appInit+0xc4>
     70c:	46 c0       	rjmp	.+140    	; 0x79a <appInit+0x150>

			#endif

		}
		
		asm("nop");
     70e:	00 00       	nop
	}
     710:	0f 90       	pop	r0
     712:	df 91       	pop	r29
     714:	cf 91       	pop	r28
     716:	1f 91       	pop	r17
     718:	0f 91       	pop	r16
     71a:	08 95       	ret
		while(ucMachineWait == MACHINE_WAIT)
		{
			if(ucDeviceStateFlag == DEVICE_STATUS_NEEDED)
			{
				//If True, Machine Status has been completed, ucDeviceStateFlag set to MACHINE_STATUS_ON
				SQACAInitializationSequence();
     71c:	0e 94 a6 12 	call	0x254c	; 0x254c <SQACAInitializationSequence>
				
				tmp = macSetAlarm(DEVICE_POLL_PERIOD,SetDeviceState);
     720:	6f eb       	ldi	r22, 0xBF	; 191
     722:	71 e0       	ldi	r23, 0x01	; 1
     724:	8c e2       	ldi	r24, 0x2C	; 44
     726:	91 e0       	ldi	r25, 0x01	; 1
     728:	0e 94 81 27 	call	0x4f02	; 0x4f02 <macSetAlarm>
     72c:	18 2f       	mov	r17, r24
     72e:	bb cf       	rjmp	.-138    	; 0x6a6 <appInit+0x5c>
		// read machine code stored in EEPROM
		/********can check reader state flag here and update******/
		halGetEeprom(MACHINE_TYPE_ADDR, 1, &machineCode);
		
		//if a valid machine is connected, then store the machine type
		if((machineCode == 0xFF) && (SQACAMachineStatus.MachineType[0] != INVALID_MACHINE))
     730:	80 91 f5 0a 	lds	r24, 0x0AF5	; 0x800af5 <SQACAMachineStatus>
     734:	81 11       	cpse	r24, r1
     736:	22 c0       	rjmp	.+68     	; 0x77c <appInit+0x132>
			//defaultSetupString();  //PPOS
		}
		else if(SQACAMachineStatus.MachineType[0] != machineCode)
		{
			// machine has been swapped - trigger setup request
			halPutEeprom(MACHINE_TYPE_ADDR, 1, &SQACAMachineStatus.MachineType[0]);
     738:	45 ef       	ldi	r20, 0xF5	; 245
     73a:	5a e0       	ldi	r21, 0x0A	; 10
     73c:	61 e0       	ldi	r22, 0x01	; 1
     73e:	8e e1       	ldi	r24, 0x1E	; 30
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	0e 94 b9 20 	call	0x4172	; 0x4172 <halPutEeprom>
			halPutEeprom(MACHINE_TYPE_ADDR+1, 1, &SQACAMachineStatus.MachineType[1]);
     746:	46 ef       	ldi	r20, 0xF6	; 246
     748:	5a e0       	ldi	r21, 0x0A	; 10
     74a:	61 e0       	ldi	r22, 0x01	; 1
     74c:	8f e1       	ldi	r24, 0x1F	; 31
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	0e 94 b9 20 	call	0x4172	; 0x4172 <halPutEeprom>
			//defaultSetupString();  //PPOS
			
			ReaderStateFlag.ReaderSetup = READER_SETUP_NEEDED;			//(ReaderStateFlag | READER_SETUP_NEEDED);
     754:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <ReaderStateFlag>
     758:	82 60       	ori	r24, 0x02	; 2
     75a:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <ReaderStateFlag>
			halPutEeprom(READER_STATE_ADDR,1, (u8*)&ReaderStateFlag);
     75e:	44 e3       	ldi	r20, 0x34	; 52
     760:	59 e0       	ldi	r21, 0x09	; 9
     762:	61 e0       	ldi	r22, 0x01	; 1
     764:	82 e2       	ldi	r24, 0x22	; 34
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	0e 94 b9 20 	call	0x4172	; 0x4172 <halPutEeprom>
     76c:	c6 cf       	rjmp	.-116    	; 0x6fa <appInit+0xb0>
				tmp = macSetAlarm(DEVICE_POLL_PERIOD,SetDeviceState);
			}
			else if(ucDeviceStateFlag == MACHINE_STATUS_ON)
			{
				//don't wait anymore
				macTimerEnd(machineTimerId);
     76e:	80 2f       	mov	r24, r16
     770:	0e 94 43 28 	call	0x5086	; 0x5086 <macTimerEnd>
				macTimerEnd(tmp);
     774:	81 2f       	mov	r24, r17
     776:	0e 94 43 28 	call	0x5086	; 0x5086 <macTimerEnd>
				
				break;
     77a:	aa cf       	rjmp	.-172    	; 0x6d0 <appInit+0x86>
		
		//if a valid machine is connected, then store the machine type
		if((machineCode == 0xFF) && (SQACAMachineStatus.MachineType[0] != INVALID_MACHINE))
		{
			// save the actual machine code
			halPutEeprom(MACHINE_TYPE_ADDR, 1, &SQACAMachineStatus.MachineType[0]);
     77c:	45 ef       	ldi	r20, 0xF5	; 245
     77e:	5a e0       	ldi	r21, 0x0A	; 10
     780:	61 e0       	ldi	r22, 0x01	; 1
     782:	8e e1       	ldi	r24, 0x1E	; 30
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	0e 94 b9 20 	call	0x4172	; 0x4172 <halPutEeprom>
			halPutEeprom(MACHINE_TYPE_ADDR+1, 1, &SQACAMachineStatus.MachineType[1]);
     78a:	46 ef       	ldi	r20, 0xF6	; 246
     78c:	5a e0       	ldi	r21, 0x0A	; 10
     78e:	61 e0       	ldi	r22, 0x01	; 1
     790:	8f e1       	ldi	r24, 0x1F	; 31
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	0e 94 b9 20 	call	0x4172	; 0x4172 <halPutEeprom>
     798:	b0 cf       	rjmp	.-160    	; 0x6fa <appInit+0xb0>

			
			if (ucDeviceStateFlag == MACHINE_STATUS_ON)
			{
				//display current Firmware version
				displaySQReaderVersion();
     79a:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <displaySQReaderVersion>
				
				//Send machine setup at every power up if reader has setup and machine is connected
				if( ReaderStateFlag.ReaderSetup == READER_SETUP_DONE )
     79e:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <ReaderStateFlag>
     7a2:	81 fd       	sbrc	r24, 1
     7a4:	b4 cf       	rjmp	.-152    	; 0x70e <appInit+0xc4>
				{
					// get ACA Programming data
					getSQReaderMachineSetup();			// get PROGRAMMING_DATA_TOPLOAD, _DRYER, _FRONTLOADER
     7a6:	0e 94 dd 12 	call	0x25ba	; 0x25ba <getSQReaderMachineSetup>
     7aa:	b1 cf       	rjmp	.-158    	; 0x70e <appInit+0xc4>

000007ac <GetParam>:
	byte matching c is found. The return value is a pointer into to one byte past where c was copied,
	or a null pointer if no byte matching c appeared in the first size bytes of from.
	*/
	/************************************************************************/
	char * GetParam(char *ptrBuffer, char *tmpstr, char *EndChar)
	{
     7ac:	ef 92       	push	r14
     7ae:	ff 92       	push	r15
     7b0:	0f 93       	push	r16
     7b2:	1f 93       	push	r17
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	7a 01       	movw	r14, r20
		char *pStr;
		char *pStr2;
		u8 tmpstrlen =0;

		tmpstrlen = strlen(tmpstr);
     7ba:	fb 01       	movw	r30, r22
     7bc:	01 90       	ld	r0, Z+
     7be:	00 20       	and	r0, r0
     7c0:	e9 f7       	brne	.-6      	; 0x7bc <GetParam+0x10>
     7c2:	31 97       	sbiw	r30, 0x01	; 1
     7c4:	ef 01       	movw	r28, r30
     7c6:	c6 1b       	sub	r28, r22
     7c8:	d7 0b       	sbc	r29, r23

		if((pStr = strstr(ptrBuffer,tmpstr)) != NULL)
     7ca:	0e 94 79 34 	call	0x68f2	; 0x68f2 <strstr>
     7ce:	00 97       	sbiw	r24, 0x00	; 0
     7d0:	f1 f0       	breq	.+60     	; 0x80e <GetParam+0x62>
		{ //1
			if((pStr2 = strstr(pStr + tmpstrlen,EndChar)) != NULL)
     7d2:	8c 01       	movw	r16, r24
     7d4:	0c 0f       	add	r16, r28
     7d6:	11 1d       	adc	r17, r1
     7d8:	b7 01       	movw	r22, r14
     7da:	c8 01       	movw	r24, r16
     7dc:	0e 94 79 34 	call	0x68f2	; 0x68f2 <strstr>
     7e0:	00 97       	sbiw	r24, 0x00	; 0
     7e2:	a9 f0       	breq	.+42     	; 0x80e <GetParam+0x62>
			{ //2 "<"
				memcpy(ParamStr,pStr + tmpstrlen, pStr2-(pStr+tmpstrlen));
     7e4:	ec 01       	movw	r28, r24
     7e6:	c0 1b       	sub	r28, r16
     7e8:	d1 0b       	sbc	r29, r17
     7ea:	ae 01       	movw	r20, r28
     7ec:	b8 01       	movw	r22, r16
     7ee:	8e e3       	ldi	r24, 0x3E	; 62
     7f0:	98 e0       	ldi	r25, 0x08	; 8
     7f2:	0e 94 3b 34 	call	0x6876	; 0x6876 <memcpy>
				ParamStr[pStr2-(pStr + tmpstrlen)]  ='\0';
     7f6:	c2 5c       	subi	r28, 0xC2	; 194
     7f8:	d7 4f       	sbci	r29, 0xF7	; 247
     7fa:	18 82       	st	Y, r1

				return (char *)ParamStr;
     7fc:	8e e3       	ldi	r24, 0x3E	; 62
     7fe:	98 e0       	ldi	r25, 0x08	; 8
			}//1
		}//2
		
		return '\0';
	}
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	1f 91       	pop	r17
     806:	0f 91       	pop	r16
     808:	ff 90       	pop	r15
     80a:	ef 90       	pop	r14
     80c:	08 95       	ret

				return (char *)ParamStr;
			}//1
		}//2
		
		return '\0';
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	f6 cf       	rjmp	.-20     	; 0x800 <GetParam+0x54>

00000814 <appTask>:
	/**
	@brief This is the main loop task for the Application.  Called by the main
	"forever" loop.  This function processes application tasks
	*/
	void appTask(void)				//called by appInit()
	{
     814:	8f 92       	push	r8
     816:	9f 92       	push	r9
     818:	af 92       	push	r10
     81a:	bf 92       	push	r11
     81c:	cf 92       	push	r12
     81e:	df 92       	push	r13
     820:	ef 92       	push	r14
     822:	ff 92       	push	r15
     824:	0f 93       	push	r16
     826:	1f 93       	push	r17
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
     82c:	cd b7       	in	r28, 0x3d	; 61
     82e:	de b7       	in	r29, 0x3e	; 62
     830:	e5 97       	sbiw	r28, 0x35	; 53
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	f8 94       	cli
     836:	de bf       	out	0x3e, r29	; 62
     838:	0f be       	out	0x3f, r0	; 63
     83a:	cd bf       	out	0x3d, r28	; 61
		//vars declaration
		ucSendDataSize = 0;
     83c:	10 92 0f 0b 	sts	0x0B0F, r1	; 0x800b0f <ucSendDataSize>
		
		u8 k, l;
		u8  Setup[30];
		u8 n = 0;
		
		u8 cardNum[10] = {0};
     840:	8e 01       	movw	r16, r28
     842:	01 5e       	subi	r16, 0xE1	; 225
     844:	1f 4f       	sbci	r17, 0xFF	; 255
     846:	8a e0       	ldi	r24, 0x0A	; 10
     848:	d8 01       	movw	r26, r16
     84a:	1d 92       	st	X+, r1
     84c:	8a 95       	dec	r24
     84e:	e9 f7       	brne	.-6      	; 0x84a <appTask+0x36>
		
		#ifdef MACHINE_CONNECTED
		
		if(ucDeviceStateFlag == DEVICE_STATUS_NEEDED)	//do machine status communication every 1/2 second
     850:	80 91 b9 09 	lds	r24, 0x09B9	; 0x8009b9 <ucDeviceStateFlag>
     854:	81 30       	cpi	r24, 0x01	; 1
     856:	09 f4       	brne	.+2      	; 0x85a <appTask+0x46>
     858:	9b c0       	rjmp	.+310    	; 0x990 <appTask+0x17c>
     85a:	80 91 44 0c 	lds	r24, 0x0C44	; 0x800c44 <macConfig+0x8>
			}
		}
		
		#endif

		if(macConfig.associated == true || ReaderStateFlag.EnableOfflineTransaction == true) //  Don't bother running the app until the reader has associated
     85e:	81 11       	cpse	r24, r1
     860:	04 c0       	rjmp	.+8      	; 0x86a <appTask+0x56>
     862:	90 91 34 09 	lds	r25, 0x0934	; 0x800934 <ReaderStateFlag>
     866:	93 ff       	sbrs	r25, 3
     868:	09 c0       	rjmp	.+18     	; 0x87c <appTask+0x68>
		{
			//
			switch(OP)
     86a:	e0 91 b7 09 	lds	r30, 0x09B7	; 0x8009b7 <OP>
     86e:	4e 2f       	mov	r20, r30
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	fa 01       	movw	r30, r20
     874:	31 97       	sbiw	r30, 0x01	; 1
     876:	e8 32       	cpi	r30, 0x28	; 40
     878:	f1 05       	cpc	r31, r1
     87a:	98 f0       	brcs	.+38     	; 0x8a2 <appTask+0x8e>
			} //switch OP


		}// macConfig.associated

	}//appTask
     87c:	e5 96       	adiw	r28, 0x35	; 53
     87e:	0f b6       	in	r0, 0x3f	; 63
     880:	f8 94       	cli
     882:	de bf       	out	0x3e, r29	; 62
     884:	0f be       	out	0x3f, r0	; 63
     886:	cd bf       	out	0x3d, r28	; 61
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	1f 91       	pop	r17
     88e:	0f 91       	pop	r16
     890:	ff 90       	pop	r15
     892:	ef 90       	pop	r14
     894:	df 90       	pop	r13
     896:	cf 90       	pop	r12
     898:	bf 90       	pop	r11
     89a:	af 90       	pop	r10
     89c:	9f 90       	pop	r9
     89e:	8f 90       	pop	r8
     8a0:	08 95       	ret
		#endif

		if(macConfig.associated == true || ReaderStateFlag.EnableOfflineTransaction == true) //  Don't bother running the app until the reader has associated
		{
			//
			switch(OP)
     8a2:	e0 57       	subi	r30, 0x70	; 112
     8a4:	ff 4f       	sbci	r31, 0xFF	; 255
     8a6:	0c 94 17 30 	jmp	0x602e	; 0x602e <__tablejump2__>
				//case #9A Purchase TopOff called by case #6 GET_BALANCE_FROM_SERVER
				case DRYERCYCLE_RUNNING:
				//The Payment System sends this packet to the Machine Control to perform a TopOff vending transaction.
				//displayMsg(TOPOFF_MSG);
				//sendSQDisplayCommand(LED_BLANK, LED_BLANK, LED_BLANK, msgNumber[SQACADryerProgramming.PaymSTopoffPrice[1] * 256-0x30], LED_BLANK, LED_BLANK,10);
				if(sendSQACAVendingTransaction(TOPOFF_VEND))
     8aa:	82 e0       	ldi	r24, 0x02	; 2
     8ac:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <sendSQACAVendingTransaction>
     8b0:	88 23       	and	r24, r24
     8b2:	21 f3       	breq	.-56     	; 0x87c <appTask+0x68>
				{
					displaySQTopOffvend(vendPrice);
     8b4:	60 91 16 0b 	lds	r22, 0x0B16	; 0x800b16 <vendPrice>
     8b8:	70 91 17 0b 	lds	r23, 0x0B17	; 0x800b17 <vendPrice+0x1>
     8bc:	80 91 18 0b 	lds	r24, 0x0B18	; 0x800b18 <vendPrice+0x2>
     8c0:	90 91 19 0b 	lds	r25, 0x0B19	; 0x800b19 <vendPrice+0x3>
     8c4:	0e 94 66 0d 	call	0x1acc	; 0x1acc <displaySQTopOffvend>
					vendPrice = SQACADryerProgramming.PaymSTopoffPrice[1] * 256 + SQACADryerProgramming.PaymSTopoffPrice[0];
     8c8:	00 91 15 0a 	lds	r16, 0x0A15	; 0x800a15 <SQACADryerProgramming+0x11>
     8cc:	10 e0       	ldi	r17, 0x00	; 0
     8ce:	10 2f       	mov	r17, r16
     8d0:	00 27       	eor	r16, r16
     8d2:	80 91 14 0a 	lds	r24, 0x0A14	; 0x800a14 <SQACADryerProgramming+0x10>
     8d6:	08 0f       	add	r16, r24
     8d8:	11 1d       	adc	r17, r1
     8da:	b8 01       	movw	r22, r16
     8dc:	01 2e       	mov	r0, r17
     8de:	00 0c       	add	r0, r0
     8e0:	88 0b       	sbc	r24, r24
     8e2:	99 0b       	sbc	r25, r25
     8e4:	0e 94 55 2f 	call	0x5eaa	; 0x5eaa <__floatsisf>
     8e8:	9b 01       	movw	r18, r22
     8ea:	ac 01       	movw	r20, r24
     8ec:	60 93 16 0b 	sts	0x0B16, r22	; 0x800b16 <vendPrice>
     8f0:	70 93 17 0b 	sts	0x0B17, r23	; 0x800b17 <vendPrice+0x1>
     8f4:	80 93 18 0b 	sts	0x0B18, r24	; 0x800b18 <vendPrice+0x2>
     8f8:	90 93 19 0b 	sts	0x0B19, r25	; 0x800b19 <vendPrice+0x3>
					
					structTransaction vend;
					vend.CardId			= CurrentAccount.ID;
     8fc:	60 91 2a 09 	lds	r22, 0x092A	; 0x80092a <CurrentAccount+0x1>
     900:	70 91 2b 09 	lds	r23, 0x092B	; 0x80092b <CurrentAccount+0x2>
     904:	80 91 2c 09 	lds	r24, 0x092C	; 0x80092c <CurrentAccount+0x3>
     908:	90 91 2d 09 	lds	r25, 0x092D	; 0x80092d <CurrentAccount+0x4>
     90c:	6a 87       	std	Y+10, r22	; 0x0a
     90e:	7b 87       	std	Y+11, r23	; 0x0b
     910:	8c 87       	std	Y+12, r24	; 0x0c
     912:	9d 87       	std	Y+13, r25	; 0x0d
					vend.vendPrice		= vendPrice ;
     914:	19 87       	std	Y+9, r17	; 0x09
     916:	08 87       	std	Y+8, r16	; 0x08
					vend.LocationId		= ReaderSetup.locationId;
     918:	e0 91 c0 09 	lds	r30, 0x09C0	; 0x8009c0 <ReaderSetup+0x6>
     91c:	f0 91 c1 09 	lds	r31, 0x09C1	; 0x8009c1 <ReaderSetup+0x7>
     920:	fa 83       	std	Y+2, r31	; 0x02
     922:	e9 83       	std	Y+1, r30	; 0x01
					vend.ManufactureId	= ReaderSetup.manufacturerId;
     924:	e0 91 be 09 	lds	r30, 0x09BE	; 0x8009be <ReaderSetup+0x4>
     928:	f0 91 bf 09 	lds	r31, 0x09BF	; 0x8009bf <ReaderSetup+0x5>
     92c:	fe 83       	std	Y+6, r31	; 0x06
     92e:	ed 83       	std	Y+5, r30	; 0x05
					vend.MachineId[0]	= deviceStatus.deviceType[0];
     930:	e0 91 f1 0a 	lds	r30, 0x0AF1	; 0x800af1 <deviceStatus>
     934:	eb 83       	std	Y+3, r30	; 0x03
					vend.MachineId[1]	= deviceStatus.deviceType[1];
     936:	e0 91 f2 0a 	lds	r30, 0x0AF2	; 0x800af2 <deviceStatus+0x1>
     93a:	ec 83       	std	Y+4, r30	; 0x04
					
					if((macConfig.associated == false) && (ReaderStateFlag.EnableOfflineTransaction == true))
     93c:	e0 91 44 0c 	lds	r30, 0x0C44	; 0x800c44 <macConfig+0x8>
     940:	e1 11       	cpse	r30, r1
     942:	04 c0       	rjmp	.+8      	; 0x94c <appTask+0x138>
     944:	e0 91 34 09 	lds	r30, 0x0934	; 0x800934 <ReaderStateFlag>
     948:	e3 fd       	sbrc	r30, 3
     94a:	5a c3       	rjmp	.+1716   	; 0x1000 <appTask+0x7ec>
						storeOfflineTransaction(CurrentAccount.ID);
					}
					//The reader sends this packet to the BOW to record a vending transaction.
					else
					{
						vend.isOffline = false;
     94c:	1d 8a       	std	Y+21, r1	; 0x15
						CurrentAccount.Value -= vendPrice;
     94e:	80 91 30 09 	lds	r24, 0x0930	; 0x800930 <CurrentAccount+0x7>
     952:	90 91 31 09 	lds	r25, 0x0931	; 0x800931 <CurrentAccount+0x8>
     956:	bc 01       	movw	r22, r24
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	2a ab       	std	Y+50, r18	; 0x32
     95e:	3b ab       	std	Y+51, r19	; 0x33
     960:	4c ab       	std	Y+52, r20	; 0x34
     962:	5d ab       	std	Y+53, r21	; 0x35
     964:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <__floatunsisf>
     968:	2a a9       	ldd	r18, Y+50	; 0x32
     96a:	3b a9       	ldd	r19, Y+51	; 0x33
     96c:	4c a9       	ldd	r20, Y+52	; 0x34
     96e:	5d a9       	ldd	r21, Y+53	; 0x35
     970:	0e 94 45 2e 	call	0x5c8a	; 0x5c8a <__subsf3>
     974:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <__fixunssfsi>
     978:	70 93 31 09 	sts	0x0931, r23	; 0x800931 <CurrentAccount+0x8>
     97c:	60 93 30 09 	sts	0x0930, r22	; 0x800930 <CurrentAccount+0x7>
						sendBOWCCTransaction(&vend);
     980:	ce 01       	movw	r24, r28
     982:	01 96       	adiw	r24, 0x01	; 1
     984:	0e 94 67 0c 	call	0x18ce	; 0x18ce <sendBOWCCTransaction>
				
				break;

				//case #14
				case IDLE:
				OP = SCANNING;
     988:	82 e0       	ldi	r24, 0x02	; 2
     98a:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
				break;
     98e:	76 cf       	rjmp	.-276    	; 0x87c <appTask+0x68>
	/**
	Initialize communication with the ACA machines
	*/
	void DevicePoll(void)
	{
		SQACAMachineStatusCommSequence();					//SQ Payment System Driven Vending
     990:	0e 94 d5 12 	call	0x25aa	; 0x25aa <SQACAMachineStatusCommSequence>
		macSetAlarm(DEVICE_POLL_PERIOD,SetDeviceState);		//300ms
     994:	6f eb       	ldi	r22, 0xBF	; 191
     996:	71 e0       	ldi	r23, 0x01	; 1
     998:	8c e2       	ldi	r24, 0x2C	; 44
     99a:	91 e0       	ldi	r25, 0x01	; 1
     99c:	0e 94 81 27 	call	0x4f02	; 0x4f02 <macSetAlarm>
		{
			DevicePoll();
			
			
			//still online
			if (ucDeviceStateFlag == MACHINE_STATUS_ON)			//machine status 33, 41 online
     9a0:	80 91 b9 09 	lds	r24, 0x09B9	; 0x8009b9 <ucDeviceStateFlag>
     9a4:	82 30       	cpi	r24, 0x02	; 2
     9a6:	09 f4       	brne	.+2      	; 0x9aa <appTask+0x196>
     9a8:	80 c2       	rjmp	.+1280   	; 0xeaa <appTask+0x696>
				}
			}
			else
			{
				//PPOS ToDo: machine is not online, print error message
				displayMsg(CABLE_MSG);
     9aa:	86 e0       	ldi	r24, 0x06	; 6
     9ac:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <displayMsg>
     9b0:	54 cf       	rjmp	.-344    	; 0x85a <appTask+0x46>
				OP = SCANNING;
				break;

				//case #16 BOW sending error codes
				case BOW_ERROR:
				OP = IDLE;
     9b2:	87 e2       	ldi	r24, 0x27	; 39
     9b4:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
				break;
     9b8:	61 cf       	rjmp	.-318    	; 0x87c <appTask+0x68>
				break;

				//case #2
				case INIT_READER:
				
				if( isMachineCycleRunning() )
     9ba:	0e 94 c3 12 	call	0x2586	; 0x2586 <isMachineCycleRunning>
     9be:	88 23       	and	r24, r24
     9c0:	19 f3       	breq	.-58     	; 0x988 <appTask+0x174>
					{
						vend.isOffline = false;
						CurrentAccount.Value -= vendPrice;
						sendBOWCCTransaction(&vend);
					}
					OP = CYCLE_RUNNING;						//PPOS review Error handling?
     9c2:	80 e1       	ldi	r24, 0x10	; 16
     9c4:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
     9c8:	59 cf       	rjmp	.-334    	; 0x87c <appTask+0x68>
				break;

				//case #3 called by case #2 scan for card swipe
				case SCANNING:
				// Enable Heart beat routine
				if (uiFunctionEntered < (20 * (F_CPU/4000000)))
     9ca:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <uiFunctionEntered>
     9ce:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <uiFunctionEntered+0x1>
     9d2:	80 35       	cpi	r24, 0x50	; 80
     9d4:	91 05       	cpc	r25, r1
     9d6:	08 f0       	brcs	.+2      	; 0x9da <appTask+0x1c6>
     9d8:	90 c2       	rjmp	.+1312   	; 0xefa <appTask+0x6e6>
				{
					uiFunctionEntered++;
     9da:	01 96       	adiw	r24, 0x01	; 1
     9dc:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <uiFunctionEntered+0x1>
     9e0:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <uiFunctionEntered>
					Led1_toggle();
					
					uiFunctionEntered = 0;
				}
				
				if(!Request(ISO14443_3_REQALL, tmp))
     9e4:	be 01       	movw	r22, r28
     9e6:	6f 5f       	subi	r22, 0xFF	; 255
     9e8:	7f 4f       	sbci	r23, 0xFF	; 255
     9ea:	82 e5       	ldi	r24, 0x52	; 82
     9ec:	0e 94 f7 18 	call	0x31ee	; 0x31ee <Request>
     9f0:	89 2b       	or	r24, r25
     9f2:	09 f0       	breq	.+2      	; 0x9f6 <appTask+0x1e2>
     9f4:	43 cf       	rjmp	.-378    	; 0x87c <appTask+0x68>
				{
					u8 cardType;
					u8 cardKey[6] = {0xff,0xff,0xff,0xff,0xff,0xff};
     9f6:	86 e0       	ldi	r24, 0x06	; 6
     9f8:	e1 e2       	ldi	r30, 0x21	; 33
     9fa:	f2 e0       	ldi	r31, 0x02	; 2
     9fc:	de 01       	movw	r26, r28
     9fe:	99 96       	adiw	r26, 0x29	; 41
     a00:	01 90       	ld	r0, Z+
     a02:	0d 92       	st	X+, r0
     a04:	8a 95       	dec	r24
     a06:	e1 f7       	brne	.-8      	; 0xa00 <appTask+0x1ec>
					
					/*anti-collision and select the card*/
					
					if(!AnticollSelect(0, tmp, &cardType))
     a08:	ae 01       	movw	r20, r28
     a0a:	4f 5c       	subi	r20, 0xCF	; 207
     a0c:	5f 4f       	sbci	r21, 0xFF	; 255
     a0e:	be 01       	movw	r22, r28
     a10:	6f 5f       	subi	r22, 0xFF	; 255
     a12:	7f 4f       	sbci	r23, 0xFF	; 255
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <AnticollSelect>
     a1a:	89 2b       	or	r24, r25
     a1c:	09 f0       	breq	.+2      	; 0xa20 <appTask+0x20c>
     a1e:	2e cf       	rjmp	.-420    	; 0x87c <appTask+0x68>
					{
						if(cardType == MIFARE_1K)
     a20:	89 a9       	ldd	r24, Y+49	; 0x31
     a22:	88 30       	cpi	r24, 0x08	; 8
     a24:	09 f4       	brne	.+2      	; 0xa28 <appTask+0x214>
     a26:	23 c3       	rjmp	.+1606   	; 0x106e <appTask+0x85a>
							
							Authentication(MIFARE_AUTHENT_A,cardKey,tmp,0);
						}
						else
						{
							CurrentAccount.Type = 0;
     a28:	10 92 29 09 	sts	0x0929, r1	; 0x800929 <CurrentAccount>
						}
						OP = CARD_DETECTED;
     a2c:	8c e0       	ldi	r24, 0x0C	; 12
     a2e:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>

// These LED functions are used to provide address callbacks for macSetAlarm.
// Cannot use defines directly in callbacks.
void ledoff1(void)
{
	LED_OFF(1);
     a32:	a0 98       	cbi	0x14, 0	; 20
     a34:	23 cf       	rjmp	.-442    	; 0x87c <appTask+0x68>
				case SHOW_BALANCE_REQUEST:

				//case #6 called by case 4# wait for response from server after card swipe
				case GET_BALANCE_FROM_SERVER:

				if(DataBuffer[0] != '\0')
     a36:	90 91 36 09 	lds	r25, 0x0936	; 0x800936 <DataBuffer>
     a3a:	99 23       	and	r25, r25
     a3c:	09 f4       	brne	.+2      	; 0xa40 <appTask+0x22c>
     a3e:	4b c2       	rjmp	.+1174   	; 0xed6 <appTask+0x6c2>
				{
					// Print response
					ReaderStateFlag.Busy = false;
     a40:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <ReaderStateFlag>
     a44:	8f 7b       	andi	r24, 0xBF	; 191
     a46:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <ReaderStateFlag>
					debugMsgStr("\r\n");
					debugMsgStr(DataBuffer);
					debugMsgStr("\r\n");
					#endif

					OP = SCANNING;  // old SCARD_REMOVED
     a4a:	82 e0       	ldi	r24, 0x02	; 2
     a4c:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
					
					//Extract the Card Id from the incoming message
					if( (uctempBuf = strstr((char *)DataBuffer,"sN: ")) )
     a50:	6e e4       	ldi	r22, 0x4E	; 78
     a52:	72 e0       	ldi	r23, 0x02	; 2
     a54:	86 e3       	ldi	r24, 0x36	; 54
     a56:	99 e0       	ldi	r25, 0x09	; 9
     a58:	0e 94 79 34 	call	0x68f2	; 0x68f2 <strstr>
     a5c:	00 97       	sbiw	r24, 0x00	; 0
     a5e:	09 f4       	brne	.+2      	; 0xa62 <appTask+0x24e>
     a60:	b9 c2       	rjmp	.+1394   	; 0xfd4 <appTask+0x7c0>
					{
						CurrentAccount.ID = strtoul((const char*)(uctempBuf+4),NULL,10);	//save active card's id
     a62:	4a e0       	ldi	r20, 0x0A	; 10
     a64:	50 e0       	ldi	r21, 0x00	; 0
     a66:	60 e0       	ldi	r22, 0x00	; 0
     a68:	70 e0       	ldi	r23, 0x00	; 0
     a6a:	04 96       	adiw	r24, 0x04	; 4
     a6c:	0e 94 e8 31 	call	0x63d0	; 0x63d0 <strtoul>
     a70:	60 93 2a 09 	sts	0x092A, r22	; 0x80092a <CurrentAccount+0x1>
     a74:	70 93 2b 09 	sts	0x092B, r23	; 0x80092b <CurrentAccount+0x2>
     a78:	80 93 2c 09 	sts	0x092C, r24	; 0x80092c <CurrentAccount+0x3>
     a7c:	90 93 2d 09 	sts	0x092D, r25	; 0x80092d <CurrentAccount+0x4>
						
						//Display card balance on machine
						double fBalance = 0.0;
						
						uctempBuf = strstr((char *)DataBuffer,"Balance: ");
     a80:	63 e5       	ldi	r22, 0x53	; 83
     a82:	72 e0       	ldi	r23, 0x02	; 2
     a84:	86 e3       	ldi	r24, 0x36	; 54
     a86:	99 e0       	ldi	r25, 0x09	; 9
     a88:	0e 94 79 34 	call	0x68f2	; 0x68f2 <strstr>
     a8c:	8c 01       	movw	r16, r24
						
						uctempBuf += 9;
     a8e:	7c 01       	movw	r14, r24
     a90:	b9 e0       	ldi	r27, 0x09	; 9
     a92:	eb 0e       	add	r14, r27
     a94:	f1 1c       	adc	r15, r1
						ptr = strchr(uctempBuf,'.');
     a96:	6e e2       	ldi	r22, 0x2E	; 46
     a98:	70 e0       	ldi	r23, 0x00	; 0
     a9a:	c7 01       	movw	r24, r14
     a9c:	0e 94 44 34 	call	0x6888	; 0x6888 <strchr>
						k = ptr - uctempBuf;
     aa0:	d8 2e       	mov	r13, r24
     aa2:	de 18       	sub	r13, r14
						fBalance = atof(uctempBuf);
     aa4:	c7 01       	movw	r24, r14
     aa6:	0e 94 20 33 	call	0x6640	; 0x6640 <atof>
						
						// Format the Balance to XX.XX
						//capture numeric into string
						if (k <2)
     aaa:	e1 e0       	ldi	r30, 0x01	; 1
     aac:	ed 15       	cp	r30, r13
     aae:	08 f0       	brcs	.+2      	; 0xab2 <appTask+0x29e>
     ab0:	d7 c2       	rjmp	.+1454   	; 0x1060 <appTask+0x84c>
						sprintf(uctempBuf,"0%.2f",fBalance);
						else if(k == 2)
     ab2:	a2 e0       	ldi	r26, 0x02	; 2
     ab4:	da 16       	cp	r13, r26
     ab6:	09 f4       	brne	.+2      	; 0xaba <appTask+0x2a6>
     ab8:	91 c2       	rjmp	.+1314   	; 0xfdc <appTask+0x7c8>
						sprintf(uctempBuf,"%.2f",fBalance);
						else
						strcpy(uctempBuf,"99.99");
     aba:	86 e0       	ldi	r24, 0x06	; 6
     abc:	e3 e6       	ldi	r30, 0x63	; 99
     abe:	f2 e0       	ldi	r31, 0x02	; 2
     ac0:	d7 01       	movw	r26, r14
     ac2:	01 90       	ld	r0, Z+
     ac4:	0d 92       	st	X+, r0
     ac6:	8a 95       	dec	r24
     ac8:	e1 f7       	brne	.-8      	; 0xac2 <appTask+0x2ae>
						"1" is just a character as far as the LCD is concerned. It's not a number. The LCD wants you to send the "code" for each character you want to display.
						The codes for characters "0" through "9" are 48 through 57. So just adding 48 to any single-digit number will give you the code for the character that
						corresponds to that digit, f.e. uctempBuf[0]=49. digit 1=uctempBuf[0]-0x30 .
						*/
						//split string into individual values, skip decimal point
						CurrentAccount.Value = (uctempBuf[0]-0x30) * 1000 + (uctempBuf[1]-0x30) * 100 + (uctempBuf[3]-0x30) * 10 + uctempBuf[4]-0x30;
     aca:	d8 01       	movw	r26, r16
     acc:	19 96       	adiw	r26, 0x09	; 9
     ace:	6c 91       	ld	r22, X
     ad0:	19 97       	sbiw	r26, 0x09	; 9
     ad2:	70 e0       	ldi	r23, 0x00	; 0
     ad4:	60 53       	subi	r22, 0x30	; 48
     ad6:	71 09       	sbc	r23, r1
     ad8:	1a 96       	adiw	r26, 0x0a	; 10
     ada:	ec 91       	ld	r30, X
     adc:	1a 97       	sbiw	r26, 0x0a	; 10
     ade:	f0 e0       	ldi	r31, 0x00	; 0
     ae0:	f0 97       	sbiw	r30, 0x30	; 48
     ae2:	1c 96       	adiw	r26, 0x0c	; 12
     ae4:	4c 91       	ld	r20, X
     ae6:	1c 97       	sbiw	r26, 0x0c	; 12
     ae8:	50 e0       	ldi	r21, 0x00	; 0
     aea:	40 53       	subi	r20, 0x30	; 48
     aec:	51 09       	sbc	r21, r1
     aee:	1d 96       	adiw	r26, 0x0d	; 13
     af0:	8c 91       	ld	r24, X
     af2:	a8 2f       	mov	r26, r24
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	88 ee       	ldi	r24, 0xE8	; 232
     af8:	93 e0       	ldi	r25, 0x03	; 3
     afa:	68 9f       	mul	r22, r24
     afc:	80 01       	movw	r16, r0
     afe:	69 9f       	mul	r22, r25
     b00:	10 0d       	add	r17, r0
     b02:	78 9f       	mul	r23, r24
     b04:	10 0d       	add	r17, r0
     b06:	11 24       	eor	r1, r1
     b08:	24 e6       	ldi	r18, 0x64	; 100
     b0a:	2e 9f       	mul	r18, r30
     b0c:	c0 01       	movw	r24, r0
     b0e:	2f 9f       	mul	r18, r31
     b10:	90 0d       	add	r25, r0
     b12:	11 24       	eor	r1, r1
     b14:	08 0f       	add	r16, r24
     b16:	19 1f       	adc	r17, r25
     b18:	ca 01       	movw	r24, r20
     b1a:	88 0f       	add	r24, r24
     b1c:	99 1f       	adc	r25, r25
     b1e:	9a 01       	movw	r18, r20
     b20:	22 0f       	add	r18, r18
     b22:	33 1f       	adc	r19, r19
     b24:	22 0f       	add	r18, r18
     b26:	33 1f       	adc	r19, r19
     b28:	22 0f       	add	r18, r18
     b2a:	33 1f       	adc	r19, r19
     b2c:	82 0f       	add	r24, r18
     b2e:	93 1f       	adc	r25, r19
     b30:	80 0f       	add	r24, r16
     b32:	91 1f       	adc	r25, r17
     b34:	8a 0f       	add	r24, r26
     b36:	9b 1f       	adc	r25, r27
     b38:	c0 97       	sbiw	r24, 0x30	; 48
     b3a:	90 93 31 09 	sts	0x0931, r25	; 0x800931 <CurrentAccount+0x8>
     b3e:	80 93 30 09 	sts	0x0930, r24	; 0x800930 <CurrentAccount+0x7>
						
						// give display control back to front end controller. Important! Don't forget!!!!
						
						sendSQDisplayCommand(msgNumber[uctempBuf[0]-0x30], msgNumber[uctempBuf[1]-0x30], msgNumber[uctempBuf[3]-0x30], msgNumber[uctempBuf[4]-0x30], LED_BLANK, LED_BLANK,10);
     b42:	a3 52       	subi	r26, 0x23	; 35
     b44:	be 4f       	sbci	r27, 0xFE	; 254
     b46:	43 5f       	subi	r20, 0xF3	; 243
     b48:	5d 4f       	sbci	r21, 0xFD	; 253
     b4a:	e3 5f       	subi	r30, 0xF3	; 243
     b4c:	fd 4f       	sbci	r31, 0xFD	; 253
     b4e:	cb 01       	movw	r24, r22
     b50:	83 5f       	subi	r24, 0xF3	; 243
     b52:	9d 4f       	sbci	r25, 0xFD	; 253
     b54:	2a e0       	ldi	r18, 0x0A	; 10
     b56:	c2 2e       	mov	r12, r18
     b58:	e1 2c       	mov	r14, r1
     b5a:	00 e0       	ldi	r16, 0x00	; 0
     b5c:	2c 91       	ld	r18, X
     b5e:	da 01       	movw	r26, r20
     b60:	4c 91       	ld	r20, X
     b62:	60 81       	ld	r22, Z
     b64:	fc 01       	movw	r30, r24
     b66:	80 81       	ld	r24, Z
     b68:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <sendSQDisplayCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b6c:	ff ef       	ldi	r31, 0xFF	; 255
     b6e:	21 ee       	ldi	r18, 0xE1	; 225
     b70:	84 e0       	ldi	r24, 0x04	; 4
     b72:	f1 50       	subi	r31, 0x01	; 1
     b74:	20 40       	sbci	r18, 0x00	; 0
     b76:	80 40       	sbci	r24, 0x00	; 0
     b78:	e1 f7       	brne	.-8      	; 0xb72 <appTask+0x35e>
     b7a:	00 c0       	rjmp	.+0      	; 0xb7c <appTask+0x368>
     b7c:	00 00       	nop
						_delay_ms(100);
						//new
						//displaySQBalance(fBalance);

						if (SQACAMachineStatus.MachineStatus[0] == MACHINE_READY_MODE)
     b7e:	80 91 fa 0a 	lds	r24, 0x0AFA	; 0x800afa <SQACAMachineStatus+0x5>
     b82:	81 30       	cpi	r24, 0x01	; 1
     b84:	09 f4       	brne	.+2      	; 0xb88 <appTask+0x374>
     b86:	5a c2       	rjmp	.+1204   	; 0x103c <appTask+0x828>
							macSetAlarm(500, KeypressTimeOut);		//if connected to a washer while cycle is running and a card is swiped, just display the balance and continue scanning.
							
							
						}
						//initiate TopOff
						else if( (SQACAMachineStatus.MachineStatus[0] == MACHINE_RUN_MODE) && (SQACAMachineStatus.MachineType[0] == PROGRAMMING_DATA_DRYER) )
     b88:	88 30       	cpi	r24, 0x08	; 8
     b8a:	09 f0       	breq	.+2      	; 0xb8e <appTask+0x37a>
     b8c:	77 ce       	rjmp	.-786    	; 0x87c <appTask+0x68>
     b8e:	80 91 f5 0a 	lds	r24, 0x0AF5	; 0x800af5 <SQACAMachineStatus>
     b92:	89 32       	cpi	r24, 0x29	; 41
     b94:	09 f0       	breq	.+2      	; 0xb98 <appTask+0x384>
     b96:	72 ce       	rjmp	.-796    	; 0x87c <appTask+0x68>
						{
							OP = DRYERCYCLE_RUNNING;
     b98:	88 e1       	ldi	r24, 0x18	; 24
     b9a:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
     b9e:	6e ce       	rjmp	.-804    	; 0x87c <appTask+0x68>
     ba0:	9f ef       	ldi	r25, 0xFF	; 255
     ba2:	a7 ea       	ldi	r26, 0xA7	; 167
     ba4:	b1 e6       	ldi	r27, 0x61	; 97
     ba6:	91 50       	subi	r25, 0x01	; 1
     ba8:	a0 40       	sbci	r26, 0x00	; 0
     baa:	b0 40       	sbci	r27, 0x00	; 0
     bac:	e1 f7       	brne	.-8      	; 0xba6 <appTask+0x392>
     bae:	00 c0       	rjmp	.+0      	; 0xbb0 <appTask+0x39c>
     bb0:	00 00       	nop

				//case #7 called by case #6 SCANNING
				case WAIT_FOR_SELECTION:			//wait to see if cycle start has been requested by user
				//either press the start button
				_delay_ms(2000); //PPOS 170706 without this delay the Start button will not work
				if( SQACAMachineStatus.CmdToReader == START_PAD_PRESSED )
     bb2:	80 91 f9 0a 	lds	r24, 0x0AF9	; 0x800af9 <SQACAMachineStatus+0x4>
     bb6:	81 30       	cpi	r24, 0x01	; 1
     bb8:	09 f4       	brne	.+2      	; 0xbbc <appTask+0x3a8>
     bba:	cf c1       	rjmp	.+926    	; 0xf5a <appTask+0x746>
				{
					OP = START_CYCLE;				//Start Pad was pressed ...you have 10secs to pay to start in Run mode
				}

				else if(KPTOFlag == 1)  //...or not, but say it
     bbc:	80 91 2e 05 	lds	r24, 0x052E	; 0x80052e <KPTOFlag>
     bc0:	81 30       	cpi	r24, 0x01	; 1
     bc2:	09 f0       	breq	.+2      	; 0xbc6 <appTask+0x3b2>
     bc4:	5b ce       	rjmp	.-842    	; 0x87c <appTask+0x68>
     bc6:	e0 ce       	rjmp	.-576    	; 0x988 <appTask+0x174>
				break;

				//case #11
				case SETUP_REQUEST:
				
				if( SETUP_TIMEOUT == true)
     bc8:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <SETUP_TIMEOUT>
     bcc:	88 23       	and	r24, r24
     bce:	09 f4       	brne	.+2      	; 0xbd2 <appTask+0x3be>
     bd0:	55 ce       	rjmp	.-854    	; 0x87c <appTask+0x68>
	/**
	Initialize communication with the ACA machines
	*/
	void DevicePoll(void)
	{
		SQACAMachineStatusCommSequence();					//SQ Payment System Driven Vending
     bd2:	0e 94 d5 12 	call	0x25aa	; 0x25aa <SQACAMachineStatusCommSequence>
		macSetAlarm(DEVICE_POLL_PERIOD,SetDeviceState);		//300ms
     bd6:	6f eb       	ldi	r22, 0xBF	; 191
     bd8:	71 e0       	ldi	r23, 0x01	; 1
     bda:	8c e2       	ldi	r24, 0x2C	; 44
     bdc:	91 e0       	ldi	r25, 0x01	; 1
     bde:	0e 94 81 27 	call	0x4f02	; 0x4f02 <macSetAlarm>
					#else
					deviceStatus.deviceType[0] = 33;
					deviceStatus.deviceType[1] = 1;
					
					#endif //DEVICE_CONNECTED
					sendBOWSetupRequest();
     be2:	0e 94 52 09 	call	0x12a4	; 0x12a4 <sendBOWSetupRequest>
					
					SETUP_TIMEOUT = false;
     be6:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <SETUP_TIMEOUT>
					macSetLongAlarm(SETUP_REQUEST_TIMEOUT, SetupTimeout);
     bea:	6b eb       	ldi	r22, 0xBB	; 187
     bec:	71 e0       	ldi	r23, 0x01	; 1
     bee:	88 e7       	ldi	r24, 0x78	; 120
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	0e 94 e7 27 	call	0x4fce	; 0x4fce <macSetLongAlarm>
     bf6:	42 ce       	rjmp	.-892    	; 0x87c <appTask+0x68>
				
				//case #4
				case CARD_DETECTED:
								
				//Read CardID from User Zone
				if(!readCardID(CurrentAccount.Type, &cardNum[0]))
     bf8:	b8 01       	movw	r22, r16
     bfa:	80 91 29 09 	lds	r24, 0x0929	; 0x800929 <CurrentAccount>
     bfe:	0e 94 27 1c 	call	0x384e	; 0x384e <readCardID>
     c02:	89 2b       	or	r24, r25
     c04:	09 f0       	breq	.+2      	; 0xc08 <appTask+0x3f4>
     c06:	c0 ce       	rjmp	.-640    	; 0x988 <appTask+0x174>
				{
					padLeft((char*)&cardNum[0],9,"200");  //add 200 to Coinomatic Cards
     c08:	4e e3       	ldi	r20, 0x3E	; 62
     c0a:	52 e0       	ldi	r21, 0x02	; 2
     c0c:	69 e0       	ldi	r22, 0x09	; 9
     c0e:	c8 01       	movw	r24, r16
     c10:	0e 94 89 16 	call	0x2d12	; 0x2d12 <padLeft>
					
					CurrentAccount.ID = strtoul((const char*)cardNum,NULL,10);	//save active card's id
     c14:	4a e0       	ldi	r20, 0x0A	; 10
     c16:	50 e0       	ldi	r21, 0x00	; 0
     c18:	60 e0       	ldi	r22, 0x00	; 0
     c1a:	70 e0       	ldi	r23, 0x00	; 0
     c1c:	c8 01       	movw	r24, r16
     c1e:	0e 94 e8 31 	call	0x63d0	; 0x63d0 <strtoul>
     c22:	60 93 2a 09 	sts	0x092A, r22	; 0x80092a <CurrentAccount+0x1>
     c26:	70 93 2b 09 	sts	0x092B, r23	; 0x80092b <CurrentAccount+0x2>
     c2a:	80 93 2c 09 	sts	0x092C, r24	; 0x80092c <CurrentAccount+0x3>
     c2e:	90 93 2d 09 	sts	0x092D, r25	; 0x80092d <CurrentAccount+0x4>
					//associated?
					if(macConfig.associated == true)
     c32:	80 91 44 0c 	lds	r24, 0x0C44	; 0x800c44 <macConfig+0x8>
     c36:	81 11       	cpse	r24, r1
     c38:	99 c1       	rjmp	.+818    	; 0xf6c <appTask+0x758>
						//set busy msg flag
						ReaderStateFlag.Busy = true;
						
					}
					//not associated
					else if((macConfig.associated == false) && (ReaderStateFlag.EnableOfflineTransaction == true) && (ReaderStateFlag.MaxNumTransReached == false))
     c3a:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <ReaderStateFlag>
     c3e:	83 ff       	sbrs	r24, 3
     c40:	88 c1       	rjmp	.+784    	; 0xf52 <appTask+0x73e>
     c42:	84 fd       	sbrc	r24, 4
     c44:	86 c1       	rjmp	.+780    	; 0xf52 <appTask+0x73e>
					{
						//allow cycle to start when BOW is down
						
						CurrentAccount.Value = (uctempBuf[0]-0x30) * 1000 + (uctempBuf[1]-0x30) * 100 + (uctempBuf[3]-0x30) * 10 + uctempBuf[4]-0x30;
     c46:	e0 e0       	ldi	r30, 0x00	; 0
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	c0 97       	sbiw	r24, 0x30	; 48
     c50:	28 ee       	ldi	r18, 0xE8	; 232
     c52:	33 e0       	ldi	r19, 0x03	; 3
     c54:	82 9f       	mul	r24, r18
     c56:	a0 01       	movw	r20, r0
     c58:	83 9f       	mul	r24, r19
     c5a:	50 0d       	add	r21, r0
     c5c:	92 9f       	mul	r25, r18
     c5e:	50 0d       	add	r21, r0
     c60:	11 24       	eor	r1, r1
     c62:	81 81       	ldd	r24, Z+1	; 0x01
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	c0 97       	sbiw	r24, 0x30	; 48
     c68:	64 e6       	ldi	r22, 0x64	; 100
     c6a:	68 9f       	mul	r22, r24
     c6c:	90 01       	movw	r18, r0
     c6e:	69 9f       	mul	r22, r25
     c70:	30 0d       	add	r19, r0
     c72:	11 24       	eor	r1, r1
     c74:	42 0f       	add	r20, r18
     c76:	53 1f       	adc	r21, r19
     c78:	23 81       	ldd	r18, Z+3	; 0x03
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	c9 01       	movw	r24, r18
     c7e:	c0 97       	sbiw	r24, 0x30	; 48
     c80:	bc 01       	movw	r22, r24
     c82:	66 0f       	add	r22, r22
     c84:	77 1f       	adc	r23, r23
     c86:	9c 01       	movw	r18, r24
     c88:	22 0f       	add	r18, r18
     c8a:	33 1f       	adc	r19, r19
     c8c:	22 0f       	add	r18, r18
     c8e:	33 1f       	adc	r19, r19
     c90:	22 0f       	add	r18, r18
     c92:	33 1f       	adc	r19, r19
     c94:	cb 01       	movw	r24, r22
     c96:	82 0f       	add	r24, r18
     c98:	93 1f       	adc	r25, r19
     c9a:	84 0f       	add	r24, r20
     c9c:	95 1f       	adc	r25, r21
     c9e:	24 81       	ldd	r18, Z+4	; 0x04
     ca0:	82 0f       	add	r24, r18
     ca2:	91 1d       	adc	r25, r1
     ca4:	c0 97       	sbiw	r24, 0x30	; 48
     ca6:	90 93 31 09 	sts	0x0931, r25	; 0x800931 <CurrentAccount+0x8>
     caa:	80 93 30 09 	sts	0x0930, r24	; 0x800930 <CurrentAccount+0x7>
						
						if(SQACAMachineStatus.MachineStatus[0] == MACHINE_READY_MODE)
     cae:	80 91 fa 0a 	lds	r24, 0x0AFA	; 0x800afa <SQACAMachineStatus+0x5>
     cb2:	81 30       	cpi	r24, 0x01	; 1
     cb4:	09 f4       	brne	.+2      	; 0xcb8 <appTask+0x4a4>
     cb6:	ed c1       	rjmp	.+986    	; 0x1092 <appTask+0x87e>
					#if (DEBUG)
					Beeps(1);
					#endif

					//Set Timeout timer 60secs for every read
					TOFlag = false;
     cb8:	10 92 2f 05 	sts	0x052F, r1	; 0x80052f <TOFlag>
					ucTimerID = macSetLongAlarm(SERVER_RESPONSE_TIMEOUT,CommTimeOut);
     cbc:	6e ea       	ldi	r22, 0xAE	; 174
     cbe:	71 e0       	ldi	r23, 0x01	; 1
     cc0:	8c e3       	ldi	r24, 0x3C	; 60
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	0e 94 e7 27 	call	0x4fce	; 0x4fce <macSetLongAlarm>
     cc8:	d9 cd       	rjmp	.-1102   	; 0x87c <appTask+0x68>

				//case #8  called by case #7 WAIT_FOR_SELECTION
				case START_CYCLE:
				
				//The Payment System sends this packet to the Machine Control to perform a vending transaction.
				if(sendSQACAVendingTransaction(REGULAR_VEND))
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <sendSQACAVendingTransaction>
     cd0:	88 23       	and	r24, r24
     cd2:	09 f4       	brne	.+2      	; 0xcd6 <appTask+0x4c2>
     cd4:	d3 cd       	rjmp	.-1114   	; 0x87c <appTask+0x68>
				{
					vendPrice = SQACAMachineStatus.RemainingVend[1] * 256 + SQACAMachineStatus.RemainingVend[0];
     cd6:	00 91 01 0b 	lds	r16, 0x0B01	; 0x800b01 <SQACAMachineStatus+0xc>
     cda:	10 e0       	ldi	r17, 0x00	; 0
     cdc:	10 2f       	mov	r17, r16
     cde:	00 27       	eor	r16, r16
     ce0:	80 91 00 0b 	lds	r24, 0x0B00	; 0x800b00 <SQACAMachineStatus+0xb>
     ce4:	08 0f       	add	r16, r24
     ce6:	11 1d       	adc	r17, r1
     ce8:	b8 01       	movw	r22, r16
     cea:	01 2e       	mov	r0, r17
     cec:	00 0c       	add	r0, r0
     cee:	88 0b       	sbc	r24, r24
     cf0:	99 0b       	sbc	r25, r25
     cf2:	0e 94 55 2f 	call	0x5eaa	; 0x5eaa <__floatsisf>
     cf6:	9b 01       	movw	r18, r22
     cf8:	ac 01       	movw	r20, r24
     cfa:	60 93 16 0b 	sts	0x0B16, r22	; 0x800b16 <vendPrice>
     cfe:	70 93 17 0b 	sts	0x0B17, r23	; 0x800b17 <vendPrice+0x1>
     d02:	80 93 18 0b 	sts	0x0B18, r24	; 0x800b18 <vendPrice+0x2>
     d06:	90 93 19 0b 	sts	0x0B19, r25	; 0x800b19 <vendPrice+0x3>
					structTransaction vend;
					
					vend.CardId			= CurrentAccount.ID;
     d0a:	60 91 2a 09 	lds	r22, 0x092A	; 0x80092a <CurrentAccount+0x1>
     d0e:	70 91 2b 09 	lds	r23, 0x092B	; 0x80092b <CurrentAccount+0x2>
     d12:	80 91 2c 09 	lds	r24, 0x092C	; 0x80092c <CurrentAccount+0x3>
     d16:	90 91 2d 09 	lds	r25, 0x092D	; 0x80092d <CurrentAccount+0x4>
     d1a:	6a 87       	std	Y+10, r22	; 0x0a
     d1c:	7b 87       	std	Y+11, r23	; 0x0b
     d1e:	8c 87       	std	Y+12, r24	; 0x0c
     d20:	9d 87       	std	Y+13, r25	; 0x0d
					vend.vendPrice		= vendPrice ;
     d22:	19 87       	std	Y+9, r17	; 0x09
     d24:	08 87       	std	Y+8, r16	; 0x08
					vend.LocationId		= ReaderSetup.locationId;
     d26:	e0 91 c0 09 	lds	r30, 0x09C0	; 0x8009c0 <ReaderSetup+0x6>
     d2a:	f0 91 c1 09 	lds	r31, 0x09C1	; 0x8009c1 <ReaderSetup+0x7>
     d2e:	fa 83       	std	Y+2, r31	; 0x02
     d30:	e9 83       	std	Y+1, r30	; 0x01
					vend.ManufactureId	= ReaderSetup.manufacturerId;
     d32:	e0 91 be 09 	lds	r30, 0x09BE	; 0x8009be <ReaderSetup+0x4>
     d36:	f0 91 bf 09 	lds	r31, 0x09BF	; 0x8009bf <ReaderSetup+0x5>
     d3a:	fe 83       	std	Y+6, r31	; 0x06
     d3c:	ed 83       	std	Y+5, r30	; 0x05
					vend.MachineId[0]	= deviceStatus.deviceType[0];
     d3e:	e0 91 f1 0a 	lds	r30, 0x0AF1	; 0x800af1 <deviceStatus>
     d42:	eb 83       	std	Y+3, r30	; 0x03
					vend.MachineId[1]	= deviceStatus.deviceType[1];
     d44:	e0 91 f2 0a 	lds	r30, 0x0AF2	; 0x800af2 <deviceStatus+0x1>
     d48:	ec 83       	std	Y+4, r30	; 0x04
					
					if((macConfig.associated == false) && (ReaderStateFlag.EnableOfflineTransaction == true))
     d4a:	e0 91 44 0c 	lds	r30, 0x0C44	; 0x800c44 <macConfig+0x8>
     d4e:	e1 11       	cpse	r30, r1
     d50:	04 c0       	rjmp	.+8      	; 0xd5a <appTask+0x546>
     d52:	e0 91 34 09 	lds	r30, 0x0934	; 0x800934 <ReaderStateFlag>
     d56:	e3 fd       	sbrc	r30, 3
     d58:	04 c1       	rjmp	.+520    	; 0xf62 <appTask+0x74e>
						storeOfflineTransaction(CurrentAccount.ID);
					}
					//The reader sends this packet to the BOW to record a vending transaction.
					else
					{
						vend.isOffline = false;
     d5a:	1d 8a       	std	Y+21, r1	; 0x15
						CurrentAccount.Value -= vendPrice;
     d5c:	80 91 30 09 	lds	r24, 0x0930	; 0x800930 <CurrentAccount+0x7>
     d60:	90 91 31 09 	lds	r25, 0x0931	; 0x800931 <CurrentAccount+0x8>
     d64:	bc 01       	movw	r22, r24
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	2a ab       	std	Y+50, r18	; 0x32
     d6c:	3b ab       	std	Y+51, r19	; 0x33
     d6e:	4c ab       	std	Y+52, r20	; 0x34
     d70:	5d ab       	std	Y+53, r21	; 0x35
     d72:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <__floatunsisf>
     d76:	2a a9       	ldd	r18, Y+50	; 0x32
     d78:	3b a9       	ldd	r19, Y+51	; 0x33
     d7a:	4c a9       	ldd	r20, Y+52	; 0x34
     d7c:	5d a9       	ldd	r21, Y+53	; 0x35
     d7e:	0e 94 45 2e 	call	0x5c8a	; 0x5c8a <__subsf3>
     d82:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <__fixunssfsi>
     d86:	70 93 31 09 	sts	0x0931, r23	; 0x800931 <CurrentAccount+0x8>
     d8a:	60 93 30 09 	sts	0x0930, r22	; 0x800930 <CurrentAccount+0x7>
						sendBOWCCTransaction(&vend);
     d8e:	ce 01       	movw	r24, r28
     d90:	01 96       	adiw	r24, 0x01	; 1
     d92:	0e 94 67 0c 	call	0x18ce	; 0x18ce <sendBOWCCTransaction>
     d96:	15 ce       	rjmp	.-982    	; 0x9c2 <appTask+0x1ae>
				OP = IDLE;
				break;

				//case #17 Re-associate with COORD using new ReaderID
				case APP_INIT:
				appInit();
     d98:	0e 94 25 03 	call	0x64a	; 0x64a <appInit>
				break;
     d9c:	6f cd       	rjmp	.-1314   	; 0x87c <appTask+0x68>
				break;

				//case #5
				case SEND_OFFLINE_TRANSACTIONS:
				
				if (timeout.sendingOfflineTransactions)
     d9e:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <timeout>
     da2:	80 ff       	sbrs	r24, 0
     da4:	6b cd       	rjmp	.-1322   	; 0x87c <appTask+0x68>
				{
					timeout.sendingOfflineTransactions = false;
     da6:	8e 7f       	andi	r24, 0xFE	; 254
     da8:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <timeout>
					OP = IDLE;
     dac:	87 e2       	ldi	r24, 0x27	; 39
     dae:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
     db2:	64 cd       	rjmp	.-1336   	; 0x87c <appTask+0x68>
			{
				//case #1 called by appInit
				case VALIDATE_READER:
				//TODO: fix machine type switch
				//
				if((ReaderStateFlag.EnableOfflineTransaction == true) && (ReaderStateFlag.ReaderSetup == READER_SETUP_DONE))
     db4:	90 91 34 09 	lds	r25, 0x0934	; 0x800934 <ReaderStateFlag>
     db8:	93 ff       	sbrs	r25, 3
     dba:	a5 c0       	rjmp	.+330    	; 0xf06 <appTask+0x6f2>
     dbc:	91 ff       	sbrs	r25, 1
     dbe:	ad c0       	rjmp	.+346    	; 0xf1a <appTask+0x706>
				{
					OP = INIT_READER;
				}
				else{
					
					if( ((ReaderStateFlag.ReaderSetup == READER_SETUP_NEEDED) || ( ReaderStateFlag.FirstRun == VIRGIN_READER)) && (SQACAMachineStatus.MachineType[0] != INVALID_MACHINE) )
     dc0:	80 91 f5 0a 	lds	r24, 0x0AF5	; 0x800af5 <SQACAMachineStatus>
     dc4:	88 23       	and	r24, r24
     dc6:	09 f4       	brne	.+2      	; 0xdca <appTask+0x5b6>
     dc8:	59 cd       	rjmp	.-1358   	; 0x87c <appTask+0x68>
					{
						SETUP_TIMEOUT = true;
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <SETUP_TIMEOUT>
						OP = SETUP_REQUEST; //enable when setup supported by server
     dd0:	8a e0       	ldi	r24, 0x0A	; 10
     dd2:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
     dd6:	52 cd       	rjmp	.-1372   	; 0x87c <appTask+0x68>
				
				
				//case #12
				case VALIDATE_SETUP:

				if((ptr = GetParam((char *)DataBuffer,"<ValidationResponse>","<")) != NULL)
     dd8:	49 e6       	ldi	r20, 0x69	; 105
     dda:	52 e0       	ldi	r21, 0x02	; 2
     ddc:	6b e6       	ldi	r22, 0x6B	; 107
     dde:	72 e0       	ldi	r23, 0x02	; 2
     de0:	86 e3       	ldi	r24, 0x36	; 54
     de2:	99 e0       	ldi	r25, 0x09	; 9
     de4:	0e 94 d6 03 	call	0x7ac	; 0x7ac <GetParam>
     de8:	6c 01       	movw	r12, r24
     dea:	00 97       	sbiw	r24, 0x00	; 0
     dec:	09 f4       	brne	.+2      	; 0xdf0 <appTask+0x5dc>
     dee:	4a c0       	rjmp	.+148    	; 0xe84 <appTask+0x670>
				{
					u8 addr[8];
					static u8 Len = 0;
					n = strlen(ptr);
     df0:	fc 01       	movw	r30, r24
     df2:	01 90       	ld	r0, Z+
     df4:	00 20       	and	r0, r0
     df6:	e9 f7       	brne	.-6      	; 0xdf2 <appTask+0x5de>
     df8:	31 97       	sbiw	r30, 0x01	; 1
     dfa:	8e 2e       	mov	r8, r30
     dfc:	88 1a       	sub	r8, r24
					k = 0;
					l = 0;
					
					// Get length of Validation code
					halGetEeprom(VALIDATION_CODE_ADDR, 1, &Len);
     dfe:	4a e2       	ldi	r20, 0x2A	; 42
     e00:	55 e0       	ldi	r21, 0x05	; 5
     e02:	61 e0       	ldi	r22, 0x01	; 1
     e04:	87 e5       	ldi	r24, 0x57	; 87
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	0e 94 a4 20 	call	0x4148	; 0x4148 <halGetEeprom>
					
					// 	Get Validation Code from EEPROM
					halGetEeprom(((u8*)VALIDATION_CODE_ADDR+1), Len, addr);
     e0c:	ae 01       	movw	r20, r28
     e0e:	47 5d       	subi	r20, 0xD7	; 215
     e10:	5f 4f       	sbci	r21, 0xFF	; 255
     e12:	60 91 2a 05 	lds	r22, 0x052A	; 0x80052a <__data_end>
     e16:	88 e5       	ldi	r24, 0x58	; 88
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 94 a4 20 	call	0x4148	; 0x4148 <halGetEeprom>
					
					while (k < n)
     e1e:	88 20       	and	r8, r8
     e20:	09 f4       	brne	.+2      	; 0xe24 <appTask+0x610>
     e22:	f3 c0       	rjmp	.+486    	; 0x100a <appTask+0x7f6>
     e24:	00 e0       	ldi	r16, 0x00	; 0
     e26:	10 e0       	ldi	r17, 0x00	; 0
     e28:	ce 01       	movw	r24, r28
     e2a:	01 96       	adiw	r24, 0x01	; 1
     e2c:	5c 01       	movw	r10, r24
					{
						Setup[l] = (Ascii_to_nible ( *(ptr+k) ) * 16)
     e2e:	76 01       	movw	r14, r12
     e30:	e1 0e       	add	r14, r17
     e32:	f1 1c       	adc	r15, r1
     e34:	d7 01       	movw	r26, r14
     e36:	8c 91       	ld	r24, X
     e38:	0e 94 4e 2a 	call	0x549c	; 0x549c <Ascii_to_nible>
     e3c:	98 2e       	mov	r9, r24
						+  Ascii_to_nible ( *(ptr+k+1));
     e3e:	f7 01       	movw	r30, r14
     e40:	81 81       	ldd	r24, Z+1	; 0x01
     e42:	0e 94 4e 2a 	call	0x549c	; 0x549c <Ascii_to_nible>
					// 	Get Validation Code from EEPROM
					halGetEeprom(((u8*)VALIDATION_CODE_ADDR+1), Len, addr);
					
					while (k < n)
					{
						Setup[l] = (Ascii_to_nible ( *(ptr+k) ) * 16)
     e46:	f5 01       	movw	r30, r10
     e48:	e0 0f       	add	r30, r16
     e4a:	f1 1d       	adc	r31, r1
     e4c:	20 e1       	ldi	r18, 0x10	; 16
     e4e:	92 9e       	mul	r9, r18
     e50:	80 0d       	add	r24, r0
     e52:	11 24       	eor	r1, r1
     e54:	80 83       	st	Z, r24
						+  Ascii_to_nible ( *(ptr+k+1));
						k += 2;
     e56:	1e 5f       	subi	r17, 0xFE	; 254
						l++;
     e58:	0f 5f       	subi	r16, 0xFF	; 255
					halGetEeprom(VALIDATION_CODE_ADDR, 1, &Len);
					
					// 	Get Validation Code from EEPROM
					halGetEeprom(((u8*)VALIDATION_CODE_ADDR+1), Len, addr);
					
					while (k < n)
     e5a:	18 15       	cp	r17, r8
     e5c:	40 f3       	brcs	.-48     	; 0xe2e <appTask+0x61a>
						+  Ascii_to_nible ( *(ptr+k+1));
						k += 2;
						l++;
					}

					if(memcmp(addr,Setup,Len) == 0)
     e5e:	40 91 2a 05 	lds	r20, 0x052A	; 0x80052a <__data_end>
     e62:	50 e0       	ldi	r21, 0x00	; 0
     e64:	b5 01       	movw	r22, r10
     e66:	ce 01       	movw	r24, r28
     e68:	89 96       	adiw	r24, 0x29	; 41
     e6a:	0e 94 2e 34 	call	0x685c	; 0x685c <memcmp>
     e6e:	89 2b       	or	r24, r25
     e70:	09 f0       	breq	.+2      	; 0xe74 <appTask+0x660>
     e72:	68 c0       	rjmp	.+208    	; 0xf44 <appTask+0x730>
					{
						ReaderStateFlag.ValidateSetup = VALID_READER_SETUP; //Don't store this bit in eeprom it allows for validation check on every power cycle.
     e74:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <ReaderStateFlag>
     e78:	8b 7f       	andi	r24, 0xFB	; 251
     e7a:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <ReaderStateFlag>
						OP = VALIDATE_READER;
     e7e:	83 e1       	ldi	r24, 0x13	; 19
     e80:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
						
					}
				}

				// Response TIMEOUT
				if(VALIDATION_TIMEOUT)
     e84:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <VALIDATION_TIMEOUT>
     e88:	88 23       	and	r24, r24
     e8a:	09 f4       	brne	.+2      	; 0xe8e <appTask+0x67a>
     e8c:	f7 cc       	rjmp	.-1554   	; 0x87c <appTask+0x68>
				{
					VALIDATION_TIMEOUT = false;
     e8e:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <VALIDATION_TIMEOUT>
					sendBOWValidationRequest();// Re-send Validation Request
     e92:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <sendBOWValidationRequest>
					
					macSetLongAlarm(SETUP_VALIDATION_TIMEOUT, ValidationTimeout); 		//check Every 5s
     e96:	6a ea       	ldi	r22, 0xAA	; 170
     e98:	71 e0       	ldi	r23, 0x01	; 1
     e9a:	8c e3       	ldi	r24, 0x3C	; 60
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	0e 94 e7 27 	call	0x4fce	; 0x4fce <macSetLongAlarm>
     ea2:	ec cc       	rjmp	.-1576   	; 0x87c <appTask+0x68>
				appInit();
				break;

				//case #18
				case AUDITDATA_REQUEST:
				sendBOWAuditDataRequest() ;
     ea4:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <sendBOWAuditDataRequest>
				break;
     ea8:	e9 cc       	rjmp	.-1582   	; 0x87c <appTask+0x68>
     eaa:	ef e1       	ldi	r30, 0x1F	; 31
     eac:	fe e4       	ldi	r31, 0x4E	; 78
     eae:	31 97       	sbiw	r30, 0x01	; 1
     eb0:	f1 f7       	brne	.-4      	; 0xeae <appTask+0x69a>
     eb2:	00 c0       	rjmp	.+0      	; 0xeb4 <appTask+0x6a0>
     eb4:	00 00       	nop
			//still online
			if (ucDeviceStateFlag == MACHINE_STATUS_ON)			//machine status 33, 41 online
			{
				_delay_ms(5);
				//invalid machinecode
				if (ReaderStateFlag.ReaderSetup == READER_SETUP_NEEDED)
     eb6:	90 91 34 09 	lds	r25, 0x0934	; 0x800934 <ReaderStateFlag>
     eba:	91 fd       	sbrc	r25, 1
     ebc:	77 cd       	rjmp	.-1298   	; 0x9ac <appTask+0x198>
				{
					//Display "No Setup" message on machine
					displayMsg(SETUP_MSG);
				}
				else if (((macConfig.associated == false) && (ReaderStateFlag.EnableOfflineTransaction == false)) || (ReaderStateFlag.MaxNumTransReached == true))
     ebe:	80 91 44 0c 	lds	r24, 0x0C44	; 0x800c44 <macConfig+0x8>
     ec2:	81 11       	cpse	r24, r1
     ec4:	2e c0       	rjmp	.+92     	; 0xf22 <appTask+0x70e>
     ec6:	93 fd       	sbrc	r25, 3
     ec8:	2c c0       	rjmp	.+88     	; 0xf22 <appTask+0x70e>
				{
					//Display "Service message" message on machine
					displayMsg(SERVICE_MSG);
     eca:	83 e0       	ldi	r24, 0x03	; 3
     ecc:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <displayMsg>
     ed0:	80 91 44 0c 	lds	r24, 0x0C44	; 0x800c44 <macConfig+0x8>
     ed4:	c4 cc       	rjmp	.-1656   	; 0x85e <appTask+0x4a>
						CommTimeOut();					//TOFlag = 1;
					}

				} // end if
				//still case 6# server fails to respond in time no balance
				else if(TOFlag == true || macConfig.associated == false)
     ed6:	90 91 2f 05 	lds	r25, 0x052F	; 0x80052f <TOFlag>
     eda:	91 30       	cpi	r25, 0x01	; 1
     edc:	11 f0       	breq	.+4      	; 0xee2 <appTask+0x6ce>
     ede:	81 11       	cpse	r24, r1
     ee0:	cd cc       	rjmp	.-1638   	; 0x87c <appTask+0x68>
					#if(DEBUG_BOW)
					debugMsgStr("\r\nTOFlag == 1\r\n");
					#endif

					// Error Occured, Re-enter SCANNING mode
					ReaderStateFlag.Busy = false;
     ee2:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <ReaderStateFlag>
     ee6:	8f 7b       	andi	r24, 0xBF	; 191
     ee8:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <ReaderStateFlag>
					//send error message to machine display
					displayMsg(CARD_ERR_MSG);
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <displayMsg>
					OP = IDLE;
     ef2:	87 e2       	ldi	r24, 0x27	; 39
     ef4:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
     ef8:	c1 cc       	rjmp	.-1662   	; 0x87c <appTask+0x68>
				{
					uiFunctionEntered++;
				}
				else
				{
					Led1_toggle();
     efa:	90 9a       	sbi	0x12, 0	; 18
					
					uiFunctionEntered = 0;
     efc:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <uiFunctionEntered+0x1>
     f00:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <uiFunctionEntered>
     f04:	6f cd       	rjmp	.-1314   	; 0x9e4 <appTask+0x1d0>
				{
					OP = INIT_READER;
				}
				else{
					
					if( ((ReaderStateFlag.ReaderSetup == READER_SETUP_NEEDED) || ( ReaderStateFlag.FirstRun == VIRGIN_READER)) && (SQACAMachineStatus.MachineType[0] != INVALID_MACHINE) )
     f06:	91 fd       	sbrc	r25, 1
     f08:	5b cf       	rjmp	.-330    	; 0xdc0 <appTask+0x5ac>
     f0a:	90 ff       	sbrs	r25, 0
     f0c:	04 c0       	rjmp	.+8      	; 0xf16 <appTask+0x702>
     f0e:	80 91 f5 0a 	lds	r24, 0x0AF5	; 0x800af5 <SQACAMachineStatus>
     f12:	81 11       	cpse	r24, r1
     f14:	5a cf       	rjmp	.-332    	; 0xdca <appTask+0x5b6>
					{
						SETUP_TIMEOUT = true;
						OP = SETUP_REQUEST; //enable when setup supported by server
						
					}
					else if( (ReaderStateFlag.ReaderSetup == READER_SETUP_DONE) && (ReaderStateFlag.ValidateSetup == VALIDATE_READER_SETUP) )
     f16:	92 fd       	sbrc	r25, 2
     f18:	7c c0       	rjmp	.+248    	; 0x1012 <appTask+0x7fe>
				case VALIDATE_READER:
				//TODO: fix machine type switch
				//
				if((ReaderStateFlag.EnableOfflineTransaction == true) && (ReaderStateFlag.ReaderSetup == READER_SETUP_DONE))
				{
					OP = INIT_READER;
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
     f20:	ad cc       	rjmp	.-1702   	; 0x87c <appTask+0x68>
				if (ReaderStateFlag.ReaderSetup == READER_SETUP_NEEDED)
				{
					//Display "No Setup" message on machine
					displayMsg(SETUP_MSG);
				}
				else if (((macConfig.associated == false) && (ReaderStateFlag.EnableOfflineTransaction == false)) || (ReaderStateFlag.MaxNumTransReached == true))
     f22:	94 fd       	sbrc	r25, 4
     f24:	d2 cf       	rjmp	.-92     	; 0xeca <appTask+0x6b6>
				{
					//Display "Service message" message on machine
					displayMsg(SERVICE_MSG);
				}
				else if (ReaderStateFlag.Busy == true)
     f26:	96 ff       	sbrs	r25, 6
     f28:	9a cc       	rjmp	.-1740   	; 0x85e <appTask+0x4a>
				{
					//Display busy message
					if( OP != GET_BALANCE_FROM_SERVER ) // ****need to put op code in a queue****
     f2a:	80 91 b7 09 	lds	r24, 0x09B7	; 0x8009b7 <OP>
     f2e:	87 30       	cpi	r24, 0x07	; 7
     f30:	19 f0       	breq	.+6      	; 0xf38 <appTask+0x724>
					{
						OP = GET_BALANCE_FROM_SERVER;
     f32:	87 e0       	ldi	r24, 0x07	; 7
     f34:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
					}
					displayMsg(BUSY_MSG);
     f38:	84 e0       	ldi	r24, 0x04	; 4
     f3a:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <displayMsg>
     f3e:	80 91 44 0c 	lds	r24, 0x0C44	; 0x800c44 <macConfig+0x8>
     f42:	8d cc       	rjmp	.-1766   	; 0x85e <appTask+0x4a>
						OP = VALIDATE_READER;
					}
					else
					{
						
						OP = SETUP_REQUEST; // validation failed, request new setup info
     f44:	8a e0       	ldi	r24, 0x0A	; 10
     f46:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
						SETUP_TIMEOUT = true;
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <SETUP_TIMEOUT>
     f50:	99 cf       	rjmp	.-206    	; 0xe84 <appTask+0x670>
							
						}
					}
					else
					{
						OP = SCANNING;
     f52:	82 e0       	ldi	r24, 0x02	; 2
     f54:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
     f58:	af ce       	rjmp	.-674    	; 0xcb8 <appTask+0x4a4>
				case WAIT_FOR_SELECTION:			//wait to see if cycle start has been requested by user
				//either press the start button
				_delay_ms(2000); //PPOS 170706 without this delay the Start button will not work
				if( SQACAMachineStatus.CmdToReader == START_PAD_PRESSED )
				{
					OP = START_CYCLE;				//Start Pad was pressed ...you have 10secs to pay to start in Run mode
     f5a:	8f e0       	ldi	r24, 0x0F	; 15
     f5c:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
     f60:	8d cc       	rjmp	.-1766   	; 0x87c <appTask+0x68>
					vend.MachineId[0]	= deviceStatus.deviceType[0];
					vend.MachineId[1]	= deviceStatus.deviceType[1];
					
					if((macConfig.associated == false) && (ReaderStateFlag.EnableOfflineTransaction == true))
					{//must be offline transaction, store a record.
						vend.isOffline = true;
     f62:	21 e0       	ldi	r18, 0x01	; 1
     f64:	2d 8b       	std	Y+21, r18	; 0x15
						storeOfflineTransaction(CurrentAccount.ID);
     f66:	0e 94 e5 14 	call	0x29ca	; 0x29ca <storeOfflineTransaction>
     f6a:	2b cd       	rjmp	.-1450   	; 0x9c2 <appTask+0x1ae>
					CurrentAccount.ID = strtoul((const char*)cardNum,NULL,10);	//save active card's id
					//associated?
					if(macConfig.associated == true)
					{
						// Send Data Package via Radio
						sprintf((char*)ucSendDataBuffer+1, "<sN>%s</sN>",cardNum);
     f6c:	1f 93       	push	r17
     f6e:	0f 93       	push	r16
     f70:	82 e4       	ldi	r24, 0x42	; 66
     f72:	92 e0       	ldi	r25, 0x02	; 2
     f74:	9f 93       	push	r25
     f76:	8f 93       	push	r24
     f78:	02 e3       	ldi	r16, 0x32	; 50
     f7a:	1a e0       	ldi	r17, 0x0A	; 10
     f7c:	1f 93       	push	r17
     f7e:	0f 93       	push	r16
     f80:	0e 94 f5 34 	call	0x69ea	; 0x69ea <sprintf>

						ucSendDataSize = strlen((char*)ucSendDataBuffer+1);
     f84:	f8 01       	movw	r30, r16
     f86:	01 90       	ld	r0, Z+
     f88:	00 20       	and	r0, r0
     f8a:	e9 f7       	brne	.-6      	; 0xf86 <appTask+0x772>
     f8c:	bf 01       	movw	r22, r30
     f8e:	63 53       	subi	r22, 0x33	; 51
     f90:	7a 40       	sbci	r23, 0x0A	; 10
						ucSendDataBuffer[0] = ucSendDataSize;   // Length
     f92:	60 93 31 0a 	sts	0x0A31, r22	; 0x800a31 <ucSendDataBuffer>
						ucSendDataSize = ucSendDataSize + 1;    // data size = data byte + size byte
     f96:	6f 5f       	subi	r22, 0xFF	; 255
     f98:	60 93 0f 0b 	sts	0x0B0F, r22	; 0x800b0f <ucSendDataSize>
						macDataRequest(DEFAULT_COORD_ADDR, ucSendDataSize, ucSendDataBuffer);
     f9c:	41 e3       	ldi	r20, 0x31	; 49
     f9e:	5a e0       	ldi	r21, 0x0A	; 10
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	0e 94 da 22 	call	0x45b4	; 0x45b4 <macDataRequest>
						
						// Clear Rx Buffer
						memset(DataBuffer,0,sizeof(DataBuffer));
     fa8:	80 e8       	ldi	r24, 0x80	; 128
     faa:	e6 e3       	ldi	r30, 0x36	; 54
     fac:	f9 e0       	ldi	r31, 0x09	; 9
     fae:	df 01       	movw	r26, r30
     fb0:	1d 92       	st	X+, r1
     fb2:	8a 95       	dec	r24
     fb4:	e9 f7       	brne	.-6      	; 0xfb0 <appTask+0x79c>
						
						OP = GET_BALANCE_FROM_SERVER;
     fb6:	87 e0       	ldi	r24, 0x07	; 7
     fb8:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
						//set busy msg flag
						ReaderStateFlag.Busy = true;
     fbc:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <ReaderStateFlag>
     fc0:	80 64       	ori	r24, 0x40	; 64
     fc2:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <ReaderStateFlag>
     fc6:	0f 90       	pop	r0
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	0f 90       	pop	r0
     fd2:	72 ce       	rjmp	.-796    	; 0xcb8 <appTask+0x4a4>
		}
	}

	void CommTimeOut()
	{
		TOFlag = true;
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	80 93 2f 05 	sts	0x052F, r24	; 0x80052f <TOFlag>
     fda:	50 cc       	rjmp	.-1888   	; 0x87c <appTask+0x68>
						// Format the Balance to XX.XX
						//capture numeric into string
						if (k <2)
						sprintf(uctempBuf,"0%.2f",fBalance);
						else if(k == 2)
						sprintf(uctempBuf,"%.2f",fBalance);
     fdc:	9f 93       	push	r25
     fde:	8f 93       	push	r24
     fe0:	7f 93       	push	r23
     fe2:	6f 93       	push	r22
     fe4:	8e e5       	ldi	r24, 0x5E	; 94
     fe6:	92 e0       	ldi	r25, 0x02	; 2
     fe8:	9f 93       	push	r25
     fea:	8f 93       	push	r24
     fec:	ff 92       	push	r15
     fee:	ef 92       	push	r14
     ff0:	0e 94 f5 34 	call	0x69ea	; 0x69ea <sprintf>
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	f8 94       	cli
     ff8:	de bf       	out	0x3e, r29	; 62
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	cd bf       	out	0x3d, r28	; 61
     ffe:	65 cd       	rjmp	.-1334   	; 0xaca <appTask+0x2b6>
					vend.MachineId[0]	= deviceStatus.deviceType[0];
					vend.MachineId[1]	= deviceStatus.deviceType[1];
					
					if((macConfig.associated == false) && (ReaderStateFlag.EnableOfflineTransaction == true))
					{//must be offline transaction, store a record.
						vend.isOffline = true;
    1000:	21 e0       	ldi	r18, 0x01	; 1
    1002:	2d 8b       	std	Y+21, r18	; 0x15
						storeOfflineTransaction(CurrentAccount.ID);
    1004:	0e 94 e5 14 	call	0x29ca	; 0x29ca <storeOfflineTransaction>
    1008:	bf cc       	rjmp	.-1666   	; 0x988 <appTask+0x174>
    100a:	fe 01       	movw	r30, r28
    100c:	31 96       	adiw	r30, 0x01	; 1
    100e:	5f 01       	movw	r10, r30
    1010:	26 cf       	rjmp	.-436    	; 0xe5e <appTask+0x64a>
						OP = SETUP_REQUEST; //enable when setup supported by server
						
					}
					else if( (ReaderStateFlag.ReaderSetup == READER_SETUP_DONE) && (ReaderStateFlag.ValidateSetup == VALIDATE_READER_SETUP) )
					{
						VALIDATION_TIMEOUT = false;
    1012:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <VALIDATION_TIMEOUT>
						sendBOWValidationRequest();
    1016:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <sendBOWValidationRequest>
						// Clear Rx Buffer
						memset(DataBuffer,0,sizeof(DataBuffer));
    101a:	80 e8       	ldi	r24, 0x80	; 128
    101c:	e6 e3       	ldi	r30, 0x36	; 54
    101e:	f9 e0       	ldi	r31, 0x09	; 9
    1020:	df 01       	movw	r26, r30
    1022:	1d 92       	st	X+, r1
    1024:	8a 95       	dec	r24
    1026:	e9 f7       	brne	.-6      	; 0x1022 <appTask+0x80e>
						
						macSetLongAlarm(SETUP_VALIDATION_TIMEOUT, ValidationTimeout); 		//check Every 15s
    1028:	6a ea       	ldi	r22, 0xAA	; 170
    102a:	71 e0       	ldi	r23, 0x01	; 1
    102c:	8c e3       	ldi	r24, 0x3C	; 60
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	0e 94 e7 27 	call	0x4fce	; 0x4fce <macSetLongAlarm>

						// Wait for validation package to arrive
						OP = VALIDATE_SETUP;
    1034:	84 e1       	ldi	r24, 0x14	; 20
    1036:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
    103a:	20 cc       	rjmp	.-1984   	; 0x87c <appTask+0x68>
						//new
						//displaySQBalance(fBalance);

						if (SQACAMachineStatus.MachineStatus[0] == MACHINE_READY_MODE)
						{
							sendSQACAMimicQuantumVending();
    103c:	0e 94 52 12 	call	0x24a4	; 0x24a4 <sendSQACAMimicQuantumVending>
							
							#if(DEBUG_BOW)
							debugMsgStr("\r\nsendSQACAMimicQuantumVending()\r\n");
							#endif
							OP = WAIT_FOR_SELECTION; 	// ...wait for Start Pad Selection
    1040:	88 e0       	ldi	r24, 0x08	; 8
    1042:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
							//Sound Buzzer
							#if (DEBUG)
							Beeps(2);
							#endif
							
							KPTOFlag = 0;								//KeyPressTimeout false
    1046:	10 92 2e 05 	sts	0x052E, r1	; 0x80052e <KPTOFlag>
							//Examine machine control and the current status of the machine (Primary and Secondary Modes)
							if( waitForMachineStartKey() )
    104a:	0e 94 ca 12 	call	0x2594	; 0x2594 <waitForMachineStartKey>
							{
								macSetLongAlarm(MACHINE_KEYPRESS_WAITTIME, KeypressTimeOut);		//30secs ACA specs
    104e:	67 eb       	ldi	r22, 0xB7	; 183
    1050:	71 e0       	ldi	r23, 0x01	; 1
							Beeps(2);
							#endif
							
							KPTOFlag = 0;								//KeyPressTimeout false
							//Examine machine control and the current status of the machine (Primary and Secondary Modes)
							if( waitForMachineStartKey() )
    1052:	88 23       	and	r24, r24
    1054:	c9 f0       	breq	.+50     	; 0x1088 <appTask+0x874>
							{
								macSetLongAlarm(MACHINE_KEYPRESS_WAITTIME, KeypressTimeOut);		//30secs ACA specs
    1056:	8e e1       	ldi	r24, 0x1E	; 30
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	0e 94 e7 27 	call	0x4fce	; 0x4fce <macSetLongAlarm>
    105e:	0e cc       	rjmp	.-2020   	; 0x87c <appTask+0x68>
						fBalance = atof(uctempBuf);
						
						// Format the Balance to XX.XX
						//capture numeric into string
						if (k <2)
						sprintf(uctempBuf,"0%.2f",fBalance);
    1060:	9f 93       	push	r25
    1062:	8f 93       	push	r24
    1064:	7f 93       	push	r23
    1066:	6f 93       	push	r22
    1068:	8d e5       	ldi	r24, 0x5D	; 93
    106a:	92 e0       	ldi	r25, 0x02	; 2
    106c:	bd cf       	rjmp	.-134    	; 0xfe8 <appTask+0x7d4>
					
					if(!AnticollSelect(0, tmp, &cardType))
					{
						if(cardType == MIFARE_1K)
						{
							CurrentAccount.Type = MIFARE_1K;
    106e:	80 93 29 09 	sts	0x0929, r24	; 0x800929 <CurrentAccount>
							
							Authentication(MIFARE_AUTHENT_A,cardKey,tmp,0);
    1072:	20 e0       	ldi	r18, 0x00	; 0
    1074:	ae 01       	movw	r20, r28
    1076:	4f 5f       	subi	r20, 0xFF	; 255
    1078:	5f 4f       	sbci	r21, 0xFF	; 255
    107a:	be 01       	movw	r22, r28
    107c:	67 5d       	subi	r22, 0xD7	; 215
    107e:	7f 4f       	sbci	r23, 0xFF	; 255
    1080:	80 e6       	ldi	r24, 0x60	; 96
    1082:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <Authentication>
    1086:	d2 cc       	rjmp	.-1628   	; 0xa2c <appTask+0x218>
								macSetLongAlarm(MACHINE_KEYPRESS_WAITTIME, KeypressTimeOut);		//30secs ACA specs
								
							}
							else
							// code to avoid multiple button press
							macSetAlarm(500, KeypressTimeOut);		//if connected to a washer while cycle is running and a card is swiped, just display the balance and continue scanning.
    1088:	84 ef       	ldi	r24, 0xF4	; 244
    108a:	91 e0       	ldi	r25, 0x01	; 1
    108c:	0e 94 81 27 	call	0x4f02	; 0x4f02 <macSetAlarm>
    1090:	f5 cb       	rjmp	.-2070   	; 0x87c <appTask+0x68>
						
						CurrentAccount.Value = (uctempBuf[0]-0x30) * 1000 + (uctempBuf[1]-0x30) * 100 + (uctempBuf[3]-0x30) * 10 + uctempBuf[4]-0x30;
						
						if(SQACAMachineStatus.MachineStatus[0] == MACHINE_READY_MODE)
						{
							sendSQACAMimicQuantumVending();
    1092:	0e 94 52 12 	call	0x24a4	; 0x24a4 <sendSQACAMimicQuantumVending>
							
							OP = WAIT_FOR_SELECTION;
    1096:	88 e0       	ldi	r24, 0x08	; 8
    1098:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <OP>
							
							KPTOFlag = 0;
    109c:	10 92 2e 05 	sts	0x052E, r1	; 0x80052e <KPTOFlag>
							
							if( waitForMachineStartKey() )
    10a0:	0e 94 ca 12 	call	0x2594	; 0x2594 <waitForMachineStartKey>
							{
								macSetLongAlarm(MACHINE_KEYPRESS_WAITTIME,KeypressTimeOut);		//KeyPressWaitTime
    10a4:	67 eb       	ldi	r22, 0xB7	; 183
    10a6:	71 e0       	ldi	r23, 0x01	; 1
							
							OP = WAIT_FOR_SELECTION;
							
							KPTOFlag = 0;
							
							if( waitForMachineStartKey() )
    10a8:	88 23       	and	r24, r24
    10aa:	29 f0       	breq	.+10     	; 0x10b6 <appTask+0x8a2>
							{
								macSetLongAlarm(MACHINE_KEYPRESS_WAITTIME,KeypressTimeOut);		//KeyPressWaitTime
    10ac:	8e e1       	ldi	r24, 0x1E	; 30
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	0e 94 e7 27 	call	0x4fce	; 0x4fce <macSetLongAlarm>
    10b4:	01 ce       	rjmp	.-1022   	; 0xcb8 <appTask+0x4a4>
							}
							else
							macSetAlarm(500, KeypressTimeOut); // if connected to a washer while cycle is running and a card is swiped, just display the balance and continue scanning.
    10b6:	84 ef       	ldi	r24, 0xF4	; 244
    10b8:	91 e0       	ldi	r25, 0x01	; 1
    10ba:	0e 94 81 27 	call	0x4f02	; 0x4f02 <macSetAlarm>
    10be:	fc cd       	rjmp	.-1032   	; 0xcb8 <appTask+0x4a4>

000010c0 <timeoutWaitingForOLTReponse>:
bool sendBOWCCTransaction(structTransaction *transRecord);

static inline void timeoutWaitingForOLTReponse(void)
{
	
	timeout.sendingOfflineTransactions = true;
    10c0:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <timeout>
    10c4:	81 60       	ori	r24, 0x01	; 1
    10c6:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <timeout>
    10ca:	08 95       	ret

000010cc <constructOutgoingString>:
@param data Pointer to the data to be sent.

@param type Type of frame to be sent
*/
bool constructOutgoingString(u8 strType, char *tempStr)
{
    10cc:	0f 93       	push	r16
    10ce:	1f 93       	push	r17
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
    10d4:	8b 01       	movw	r16, r22
	switch(strType)
    10d6:	83 30       	cpi	r24, 0x03	; 3
    10d8:	09 f4       	brne	.+2      	; 0x10dc <constructOutgoingString+0x10>
    10da:	a6 c0       	rjmp	.+332    	; 0x1228 <constructOutgoingString+0x15c>
    10dc:	40 f1       	brcs	.+80     	; 0x112e <constructOutgoingString+0x62>
    10de:	85 30       	cpi	r24, 0x05	; 5
    10e0:	09 f4       	brne	.+2      	; 0x10e4 <constructOutgoingString+0x18>
    10e2:	62 c0       	rjmp	.+196    	; 0x11a8 <constructOutgoingString+0xdc>
    10e4:	08 f4       	brcc	.+2      	; 0x10e8 <constructOutgoingString+0x1c>
    10e6:	97 c0       	rjmp	.+302    	; 0x1216 <constructOutgoingString+0x14a>
    10e8:	86 30       	cpi	r24, 0x06	; 6
    10ea:	09 f0       	breq	.+2      	; 0x10ee <constructOutgoingString+0x22>
    10ec:	72 c0       	rjmp	.+228    	; 0x11d2 <constructOutgoingString+0x106>
		
		break;
		//number of OfflineTransactions
		case REQUEST_NUMBER_OF_OLT:
		
		halGetEeprom(OFFLINE_TRANSACTION_RECORD_ADDR, 1, &ReaderSetup.numOfSavedTransactions);
    10ee:	43 ec       	ldi	r20, 0xC3	; 195
    10f0:	59 e0       	ldi	r21, 0x09	; 9
    10f2:	61 e0       	ldi	r22, 0x01	; 1
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	91 e0       	ldi	r25, 0x01	; 1
    10f8:	0e 94 a4 20 	call	0x4148	; 0x4148 <halGetEeprom>
		if (ReaderSetup.numOfSavedTransactions == 0xff)
    10fc:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    1100:	8f 3f       	cpi	r24, 0xFF	; 255
    1102:	09 f4       	brne	.+2      	; 0x1106 <constructOutgoingString+0x3a>
    1104:	9c c0       	rjmp	.+312    	; 0x123e <constructOutgoingString+0x172>
    1106:	90 e0       	ldi	r25, 0x00	; 0
		{
			ReaderSetup.numOfSavedTransactions = 0;
		}
		//build number of offline transactions string
		sprintf(tempStr+1, //"<OLT>"
    1108:	e8 01       	movw	r28, r16
    110a:	21 96       	adiw	r28, 0x01	; 1
    110c:	9f 93       	push	r25
    110e:	8f 93       	push	r24
    1110:	88 e7       	ldi	r24, 0x78	; 120
    1112:	93 e0       	ldi	r25, 0x03	; 3
    1114:	9f 93       	push	r25
    1116:	8f 93       	push	r24
    1118:	df 93       	push	r29
    111a:	cf 93       	push	r28
    111c:	0e 94 f5 34 	call	0x69ea	; 0x69ea <sprintf>
		"<OLT>%d</OLT>"
		,ReaderSetup.numOfSavedTransactions);
		
		break;
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	2c c0       	rjmp	.+88     	; 0x1186 <constructOutgoingString+0xba>

@param type Type of frame to be sent
*/
bool constructOutgoingString(u8 strType, char *tempStr)
{
	switch(strType)
    112e:	81 30       	cpi	r24, 0x01	; 1
    1130:	09 f4       	brne	.+2      	; 0x1134 <constructOutgoingString+0x68>
    1132:	52 c0       	rjmp	.+164    	; 0x11d8 <constructOutgoingString+0x10c>
    1134:	82 30       	cpi	r24, 0x02	; 2
    1136:	09 f0       	breq	.+2      	; 0x113a <constructOutgoingString+0x6e>
    1138:	4c c0       	rjmp	.+152    	; 0x11d2 <constructOutgoingString+0x106>
		
		break;
		
		case REQUEST_SETUP:
		// Build setup request string
		sprintf(tempStr+1, "<ReaderSetupInfo>"
    113a:	eb 01       	movw	r28, r22
    113c:	21 96       	adiw	r28, 0x01	; 1
    113e:	80 91 f2 0a 	lds	r24, 0x0AF2	; 0x800af2 <deviceStatus+0x1>
    1142:	1f 92       	push	r1
    1144:	8f 93       	push	r24
    1146:	80 91 f1 0a 	lds	r24, 0x0AF1	; 0x800af1 <deviceStatus>
    114a:	1f 92       	push	r1
    114c:	8f 93       	push	r24
    114e:	80 91 bf 09 	lds	r24, 0x09BF	; 0x8009bf <ReaderSetup+0x5>
    1152:	8f 93       	push	r24
    1154:	80 91 be 09 	lds	r24, 0x09BE	; 0x8009be <ReaderSetup+0x4>
    1158:	8f 93       	push	r24
    115a:	80 91 c1 09 	lds	r24, 0x09C1	; 0x8009c1 <ReaderSetup+0x7>
    115e:	8f 93       	push	r24
    1160:	80 91 c0 09 	lds	r24, 0x09C0	; 0x8009c0 <ReaderSetup+0x6>
    1164:	8f 93       	push	r24
    1166:	83 ec       	ldi	r24, 0xC3	; 195
    1168:	92 e0       	ldi	r25, 0x02	; 2
    116a:	9f 93       	push	r25
    116c:	8f 93       	push	r24
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	0e 94 f5 34 	call	0x69ea	; 0x69ea <sprintf>
		"<laundryRoomId>%d</laundryRoomId>"
		"<manufacturerId>%d</manufacturerId>"
		"<code>%d%d</code>",ReaderSetup.locationId, ReaderSetup.manufacturerId, deviceStatus.deviceType[0],deviceStatus.deviceType[1]);
		
		break;
    1176:	ad b7       	in	r26, 0x3d	; 61
    1178:	be b7       	in	r27, 0x3e	; 62
    117a:	1c 96       	adiw	r26, 0x0c	; 12
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	f8 94       	cli
    1180:	be bf       	out	0x3e, r27	; 62
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	ad bf       	out	0x3d, r26	; 61
		default:
		
		break;
	}
	
	tempStr[0] = strlen(tempStr+1); //get string length then assign to first element
    1186:	fe 01       	movw	r30, r28
    1188:	01 90       	ld	r0, Z+
    118a:	00 20       	and	r0, r0
    118c:	e9 f7       	brne	.-6      	; 0x1188 <constructOutgoingString+0xbc>
	tempStr[0] = tempStr[0] + 1;    // data size = data byte + size byte
    118e:	ec 1b       	sub	r30, r28
    1190:	d8 01       	movw	r26, r16
    1192:	ec 93       	st	X, r30
	
	if (tempStr[0] > 127)
    1194:	8e 2f       	mov	r24, r30
    1196:	80 95       	com	r24
		//#error "Outgoing string to large"
		return false;
	}

	return true;
}
    1198:	88 1f       	adc	r24, r24
    119a:	88 27       	eor	r24, r24
    119c:	88 1f       	adc	r24, r24
    119e:	df 91       	pop	r29
    11a0:	cf 91       	pop	r28
    11a2:	1f 91       	pop	r17
    11a4:	0f 91       	pop	r16
    11a6:	08 95       	ret
		break;
		
		case REQUEST_MACHINE_DESCRIPTION:
		
		//build machine description response string
		sprintf(tempStr+1, "<MachineDescription>"
    11a8:	eb 01       	movw	r28, r22
    11aa:	21 96       	adiw	r28, 0x01	; 1
    11ac:	84 ec       	ldi	r24, 0xC4	; 196
    11ae:	99 e0       	ldi	r25, 0x09	; 9
    11b0:	9f 93       	push	r25
    11b2:	8f 93       	push	r24
    11b4:	88 e5       	ldi	r24, 0x58	; 88
    11b6:	93 e0       	ldi	r25, 0x03	; 3
    11b8:	9f 93       	push	r25
    11ba:	8f 93       	push	r24
    11bc:	df 93       	push	r29
    11be:	cf 93       	push	r28
    11c0:	0e 94 f5 34 	call	0x69ea	; 0x69ea <sprintf>
		"<mD>%s</mD>"
		,ReaderSetup.machineDescription);
		
		break;
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	da cf       	rjmp	.-76     	; 0x1186 <constructOutgoingString+0xba>
    11d2:	e8 01       	movw	r28, r16
    11d4:	21 96       	adiw	r28, 0x01	; 1
    11d6:	d7 cf       	rjmp	.-82     	; 0x1186 <constructOutgoingString+0xba>
{
	switch(strType)
	{
		case FIRMWARE_VERSION:
		//build firmware version string
		sprintf(tempStr+1, "<FirmwareVersion>"
    11d8:	eb 01       	movw	r28, r22
    11da:	21 96       	adiw	r28, 0x01	; 1
    11dc:	80 91 f2 0a 	lds	r24, 0x0AF2	; 0x800af2 <deviceStatus+0x1>
    11e0:	1f 92       	push	r1
    11e2:	8f 93       	push	r24
    11e4:	80 91 f1 0a 	lds	r24, 0x0AF1	; 0x800af1 <deviceStatus>
    11e8:	1f 92       	push	r1
    11ea:	8f 93       	push	r24
    11ec:	80 e8       	ldi	r24, 0x80	; 128
    11ee:	92 e0       	ldi	r25, 0x02	; 2
    11f0:	9f 93       	push	r25
    11f2:	8f 93       	push	r24
    11f4:	8a e8       	ldi	r24, 0x8A	; 138
    11f6:	92 e0       	ldi	r25, 0x02	; 2
    11f8:	9f 93       	push	r25
    11fa:	8f 93       	push	r24
    11fc:	df 93       	push	r29
    11fe:	cf 93       	push	r28
    1200:	0e 94 f5 34 	call	0x69ea	; 0x69ea <sprintf>
		"<fw>%s</fw>"
		"<DeviceType>%d%d<Devicetype>"
		,__APP_VERSION_STRING__,deviceStatus.deviceType[0],deviceStatus.deviceType[1]);
		
		break;
    1204:	ad b7       	in	r26, 0x3d	; 61
    1206:	be b7       	in	r27, 0x3e	; 62
    1208:	1a 96       	adiw	r26, 0x0a	; 10
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	f8 94       	cli
    120e:	be bf       	out	0x3e, r27	; 62
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	ad bf       	out	0x3d, r26	; 61
    1214:	b8 cf       	rjmp	.-144    	; 0x1186 <constructOutgoingString+0xba>
		break;
		
		case REQUEST_MACHINE_LABEL:
		//build machine label response string
		
		sprintf(tempStr+1, "<MachineLabel>"
    1216:	eb 01       	movw	r28, r22
    1218:	21 96       	adiw	r28, 0x01	; 1
    121a:	87 ef       	ldi	r24, 0xF7	; 247
    121c:	99 e0       	ldi	r25, 0x09	; 9
    121e:	9f 93       	push	r25
    1220:	8f 93       	push	r24
    1222:	8e e3       	ldi	r24, 0x3E	; 62
    1224:	93 e0       	ldi	r25, 0x03	; 3
    1226:	76 cf       	rjmp	.-276    	; 0x1114 <constructOutgoingString+0x48>
		
		break;
		
		case REQUEST_VALIDATION:
		//build validation request string
		sprintf(tempStr+1, "<ValidationRequest>");
    1228:	eb 01       	movw	r28, r22
    122a:	21 96       	adiw	r28, 0x01	; 1
    122c:	84 e1       	ldi	r24, 0x14	; 20
    122e:	ea e2       	ldi	r30, 0x2A	; 42
    1230:	f3 e0       	ldi	r31, 0x03	; 3
    1232:	de 01       	movw	r26, r28
    1234:	01 90       	ld	r0, Z+
    1236:	0d 92       	st	X+, r0
    1238:	8a 95       	dec	r24
    123a:	e1 f7       	brne	.-8      	; 0x1234 <constructOutgoingString+0x168>
		
		break;
    123c:	a4 cf       	rjmp	.-184    	; 0x1186 <constructOutgoingString+0xba>
		case REQUEST_NUMBER_OF_OLT:
		
		halGetEeprom(OFFLINE_TRANSACTION_RECORD_ADDR, 1, &ReaderSetup.numOfSavedTransactions);
		if (ReaderSetup.numOfSavedTransactions == 0xff)
		{
			ReaderSetup.numOfSavedTransactions = 0;
    123e:	10 92 c3 09 	sts	0x09C3, r1	; 0x8009c3 <ReaderSetup+0x9>
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	60 cf       	rjmp	.-320    	; 0x1108 <constructOutgoingString+0x3c>

00001248 <sendBOWReaderFirmwareVersion>:
/**
Application function, sends a data frame to the coordinator
This contains a string payload that is displayed on the coordinator end.
*/
bool sendBOWReaderFirmwareVersion()
{
    1248:	1f 93       	push	r17
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	c0 58       	subi	r28, 0x80	; 128
    1254:	d1 09       	sbc	r29, r1
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	de bf       	out	0x3e, r29	; 62
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	cd bf       	out	0x3d, r28	; 61
	char tmp[128]={0};
    1260:	be 01       	movw	r22, r28
    1262:	6f 5f       	subi	r22, 0xFF	; 255
    1264:	7f 4f       	sbci	r23, 0xFF	; 255
    1266:	80 e8       	ldi	r24, 0x80	; 128
    1268:	fb 01       	movw	r30, r22
    126a:	11 92       	st	Z+, r1
    126c:	8a 95       	dec	r24
    126e:	e9 f7       	brne	.-6      	; 0x126a <sendBOWReaderFirmwareVersion+0x22>

	if ( constructOutgoingString(FIRMWARE_VERSION, tmp) )
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	0e 94 66 08 	call	0x10cc	; 0x10cc <constructOutgoingString>
    1276:	18 2f       	mov	r17, r24
    1278:	88 23       	and	r24, r24
    127a:	41 f0       	breq	.+16     	; 0x128c <sendBOWReaderFirmwareVersion+0x44>
	{
		macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);
    127c:	ae 01       	movw	r20, r28
    127e:	4e 5f       	subi	r20, 0xFE	; 254
    1280:	5f 4f       	sbci	r21, 0xFF	; 255
    1282:	69 81       	ldd	r22, Y+1	; 0x01
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	0e 94 da 22 	call	0x45b4	; 0x45b4 <macDataRequest>
		return true;
	}
	return false;
}
    128c:	81 2f       	mov	r24, r17
    128e:	c0 58       	subi	r28, 0x80	; 128
    1290:	df 4f       	sbci	r29, 0xFF	; 255
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	f8 94       	cli
    1296:	de bf       	out	0x3e, r29	; 62
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	cd bf       	out	0x3d, r28	; 61
    129c:	df 91       	pop	r29
    129e:	cf 91       	pop	r28
    12a0:	1f 91       	pop	r17
    12a2:	08 95       	ret

000012a4 <sendBOWSetupRequest>:
/**
Application function, sends a data frame to the coordinator
This contains a string payload that is displayed on the coordinator end.
*/
bool sendBOWSetupRequest()							//virgin
{
    12a4:	cf 93       	push	r28
    12a6:	df 93       	push	r29
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	c0 58       	subi	r28, 0x80	; 128
    12ae:	d1 09       	sbc	r29, r1
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	f8 94       	cli
    12b4:	de bf       	out	0x3e, r29	; 62
    12b6:	0f be       	out	0x3f, r0	; 63
    12b8:	cd bf       	out	0x3d, r28	; 61
	char tmp[128] = {0};
    12ba:	be 01       	movw	r22, r28
    12bc:	6f 5f       	subi	r22, 0xFF	; 255
    12be:	7f 4f       	sbci	r23, 0xFF	; 255
    12c0:	80 e8       	ldi	r24, 0x80	; 128
    12c2:	fb 01       	movw	r30, r22
    12c4:	11 92       	st	Z+, r1
    12c6:	8a 95       	dec	r24
    12c8:	e9 f7       	brne	.-6      	; 0x12c4 <sendBOWSetupRequest+0x20>
	
	constructOutgoingString(REQUEST_SETUP, tmp);
    12ca:	82 e0       	ldi	r24, 0x02	; 2
    12cc:	0e 94 66 08 	call	0x10cc	; 0x10cc <constructOutgoingString>
	macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);
    12d0:	ae 01       	movw	r20, r28
    12d2:	4e 5f       	subi	r20, 0xFE	; 254
    12d4:	5f 4f       	sbci	r21, 0xFF	; 255
    12d6:	69 81       	ldd	r22, Y+1	; 0x01
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	0e 94 da 22 	call	0x45b4	; 0x45b4 <macDataRequest>
	
	return true;
}
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	c0 58       	subi	r28, 0x80	; 128
    12e4:	df 4f       	sbci	r29, 0xFF	; 255
    12e6:	0f b6       	in	r0, 0x3f	; 63
    12e8:	f8 94       	cli
    12ea:	de bf       	out	0x3e, r29	; 62
    12ec:	0f be       	out	0x3f, r0	; 63
    12ee:	cd bf       	out	0x3d, r28	; 61
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	08 95       	ret

000012f6 <sendBOWValidationRequest>:
/**
Application function, sends a data frame to the coordinator
This contains a string payload that is displayed on the coordinator end.
*/
bool sendBOWValidationRequest()
{
    12f6:	cf 93       	push	r28
    12f8:	df 93       	push	r29
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	69 97       	sbiw	r28, 0x19	; 25
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	f8 94       	cli
    1304:	de bf       	out	0x3e, r29	; 62
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	cd bf       	out	0x3d, r28	; 61
	char tmp[25] = {0};
    130a:	be 01       	movw	r22, r28
    130c:	6f 5f       	subi	r22, 0xFF	; 255
    130e:	7f 4f       	sbci	r23, 0xFF	; 255
    1310:	89 e1       	ldi	r24, 0x19	; 25
    1312:	fb 01       	movw	r30, r22
    1314:	11 92       	st	Z+, r1
    1316:	8a 95       	dec	r24
    1318:	e9 f7       	brne	.-6      	; 0x1314 <sendBOWValidationRequest+0x1e>
	
	constructOutgoingString(REQUEST_VALIDATION, tmp);
    131a:	83 e0       	ldi	r24, 0x03	; 3
    131c:	0e 94 66 08 	call	0x10cc	; 0x10cc <constructOutgoingString>
	macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);
    1320:	ae 01       	movw	r20, r28
    1322:	4e 5f       	subi	r20, 0xFE	; 254
    1324:	5f 4f       	sbci	r21, 0xFF	; 255
    1326:	69 81       	ldd	r22, Y+1	; 0x01
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	0e 94 da 22 	call	0x45b4	; 0x45b4 <macDataRequest>
	
	return true;
}
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	69 96       	adiw	r28, 0x19	; 25
    1334:	0f b6       	in	r0, 0x3f	; 63
    1336:	f8 94       	cli
    1338:	de bf       	out	0x3e, r29	; 62
    133a:	0f be       	out	0x3f, r0	; 63
    133c:	cd bf       	out	0x3d, r28	; 61
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	08 95       	ret

00001344 <sendBOWMachineLabel>:
/**
Application function, sends a data frame to the coordinator
This contains a string payload that is displayed on the coordinator end.
*/
bool sendBOWMachineLabel()
{
    1344:	cf 93       	push	r28
    1346:	df 93       	push	r29
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
    134c:	a3 97       	sbiw	r28, 0x23	; 35
    134e:	0f b6       	in	r0, 0x3f	; 63
    1350:	f8 94       	cli
    1352:	de bf       	out	0x3e, r29	; 62
    1354:	0f be       	out	0x3f, r0	; 63
    1356:	cd bf       	out	0x3d, r28	; 61
	char tmp[35] = {0};
    1358:	be 01       	movw	r22, r28
    135a:	6f 5f       	subi	r22, 0xFF	; 255
    135c:	7f 4f       	sbci	r23, 0xFF	; 255
    135e:	83 e2       	ldi	r24, 0x23	; 35
    1360:	fb 01       	movw	r30, r22
    1362:	11 92       	st	Z+, r1
    1364:	8a 95       	dec	r24
    1366:	e9 f7       	brne	.-6      	; 0x1362 <sendBOWMachineLabel+0x1e>
	
	constructOutgoingString(REQUEST_MACHINE_LABEL, tmp);
    1368:	84 e0       	ldi	r24, 0x04	; 4
    136a:	0e 94 66 08 	call	0x10cc	; 0x10cc <constructOutgoingString>
	macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);
    136e:	ae 01       	movw	r20, r28
    1370:	4e 5f       	subi	r20, 0xFE	; 254
    1372:	5f 4f       	sbci	r21, 0xFF	; 255
    1374:	69 81       	ldd	r22, Y+1	; 0x01
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	0e 94 da 22 	call	0x45b4	; 0x45b4 <macDataRequest>
	
	return true;
}
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	a3 96       	adiw	r28, 0x23	; 35
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	de bf       	out	0x3e, r29	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	cd bf       	out	0x3d, r28	; 61
    138c:	df 91       	pop	r29
    138e:	cf 91       	pop	r28
    1390:	08 95       	ret

00001392 <sendBOWMachineDescription>:
/**
Application function, sends a data frame to the coordinator
This contains a string payload that is displayed on the coordinator end.
*/
bool sendBOWMachineDescription()
{
    1392:	cf 93       	push	r28
    1394:	df 93       	push	r29
    1396:	cd b7       	in	r28, 0x3d	; 61
    1398:	de b7       	in	r29, 0x3e	; 62
    139a:	c5 55       	subi	r28, 0x55	; 85
    139c:	d1 09       	sbc	r29, r1
    139e:	0f b6       	in	r0, 0x3f	; 63
    13a0:	f8 94       	cli
    13a2:	de bf       	out	0x3e, r29	; 62
    13a4:	0f be       	out	0x3f, r0	; 63
    13a6:	cd bf       	out	0x3d, r28	; 61
	char tmp[85] = {0};
    13a8:	be 01       	movw	r22, r28
    13aa:	6f 5f       	subi	r22, 0xFF	; 255
    13ac:	7f 4f       	sbci	r23, 0xFF	; 255
    13ae:	85 e5       	ldi	r24, 0x55	; 85
    13b0:	fb 01       	movw	r30, r22
    13b2:	11 92       	st	Z+, r1
    13b4:	8a 95       	dec	r24
    13b6:	e9 f7       	brne	.-6      	; 0x13b2 <sendBOWMachineDescription+0x20>
	
	constructOutgoingString(REQUEST_MACHINE_DESCRIPTION, tmp);
    13b8:	85 e0       	ldi	r24, 0x05	; 5
    13ba:	0e 94 66 08 	call	0x10cc	; 0x10cc <constructOutgoingString>
	macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);
    13be:	ae 01       	movw	r20, r28
    13c0:	4e 5f       	subi	r20, 0xFE	; 254
    13c2:	5f 4f       	sbci	r21, 0xFF	; 255
    13c4:	69 81       	ldd	r22, Y+1	; 0x01
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	0e 94 da 22 	call	0x45b4	; 0x45b4 <macDataRequest>
	
	return true;
}
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	cb 5a       	subi	r28, 0xAB	; 171
    13d2:	df 4f       	sbci	r29, 0xFF	; 255
    13d4:	0f b6       	in	r0, 0x3f	; 63
    13d6:	f8 94       	cli
    13d8:	de bf       	out	0x3e, r29	; 62
    13da:	0f be       	out	0x3f, r0	; 63
    13dc:	cd bf       	out	0x3d, r28	; 61
    13de:	df 91       	pop	r29
    13e0:	cf 91       	pop	r28
    13e2:	08 95       	ret

000013e4 <sendNumberOfOLT>:
/**
Application function, sends a data frame to the coordinator
This contains a string payload that is displayed on the coordinator end.
*/
bool sendNumberOfOLT()
{
    13e4:	cf 93       	push	r28
    13e6:	df 93       	push	r29
    13e8:	cd b7       	in	r28, 0x3d	; 61
    13ea:	de b7       	in	r29, 0x3e	; 62
    13ec:	a3 97       	sbiw	r28, 0x23	; 35
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	f8 94       	cli
    13f2:	de bf       	out	0x3e, r29	; 62
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	cd bf       	out	0x3d, r28	; 61
	char tmp[35] = {0};
    13f8:	be 01       	movw	r22, r28
    13fa:	6f 5f       	subi	r22, 0xFF	; 255
    13fc:	7f 4f       	sbci	r23, 0xFF	; 255
    13fe:	83 e2       	ldi	r24, 0x23	; 35
    1400:	fb 01       	movw	r30, r22
    1402:	11 92       	st	Z+, r1
    1404:	8a 95       	dec	r24
    1406:	e9 f7       	brne	.-6      	; 0x1402 <sendNumberOfOLT+0x1e>
	
	constructOutgoingString(REQUEST_NUMBER_OF_OLT, tmp);
    1408:	86 e0       	ldi	r24, 0x06	; 6
    140a:	0e 94 66 08 	call	0x10cc	; 0x10cc <constructOutgoingString>
	macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);
    140e:	ae 01       	movw	r20, r28
    1410:	4e 5f       	subi	r20, 0xFE	; 254
    1412:	5f 4f       	sbci	r21, 0xFF	; 255
    1414:	69 81       	ldd	r22, Y+1	; 0x01
    1416:	80 e0       	ldi	r24, 0x00	; 0
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	0e 94 da 22 	call	0x45b4	; 0x45b4 <macDataRequest>
	
	return true;
}
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	a3 96       	adiw	r28, 0x23	; 35
    1422:	0f b6       	in	r0, 0x3f	; 63
    1424:	f8 94       	cli
    1426:	de bf       	out	0x3e, r29	; 62
    1428:	0f be       	out	0x3f, r0	; 63
    142a:	cd bf       	out	0x3d, r28	; 61
    142c:	df 91       	pop	r29
    142e:	cf 91       	pop	r28
    1430:	08 95       	ret

00001432 <extractIncomingMessage>:
\ or \c NULL if the substring is not found.

Sets also flag READER_SETUP_DONE
*/
u8 extractIncomingMessage(char *dataBuffer)
{
    1432:	8f 92       	push	r8
    1434:	9f 92       	push	r9
    1436:	af 92       	push	r10
    1438:	bf 92       	push	r11
    143a:	df 92       	push	r13
    143c:	ef 92       	push	r14
    143e:	ff 92       	push	r15
    1440:	0f 93       	push	r16
    1442:	1f 93       	push	r17
    1444:	cf 93       	push	r28
    1446:	df 93       	push	r29
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
    144c:	cd 54       	subi	r28, 0x4D	; 77
    144e:	d1 09       	sbc	r29, r1
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	de bf       	out	0x3e, r29	; 62
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	cd bf       	out	0x3d, r28	; 61
    145a:	2e 96       	adiw	r28, 0x0e	; 14
    145c:	9f af       	std	Y+63, r25	; 0x3f
    145e:	8e af       	std	Y+62, r24	; 0x3e
    1460:	2e 97       	sbiw	r28, 0x0e	; 14
	u8 TemplongAddr[8] = {0};
    1462:	8e 01       	movw	r16, r28
    1464:	0d 5b       	subi	r16, 0xBD	; 189
    1466:	1f 4f       	sbci	r17, 0xFF	; 255
    1468:	88 e0       	ldi	r24, 0x08	; 8
    146a:	f8 01       	movw	r30, r16
    146c:	98 2f       	mov	r25, r24
    146e:	11 92       	st	Z+, r1
    1470:	9a 95       	dec	r25
    1472:	e9 f7       	brne	.-6      	; 0x146e <extractIncomingMessage+0x3c>
	u8 MaclongAddr[8]  = {0};
    1474:	7e 01       	movw	r14, r28
    1476:	eb e3       	ldi	r30, 0x3B	; 59
    1478:	ee 0e       	add	r14, r30
    147a:	f1 1c       	adc	r15, r1
    147c:	f7 01       	movw	r30, r14
    147e:	11 92       	st	Z+, r1
    1480:	8a 95       	dec	r24
    1482:	e9 f7       	brne	.-6      	; 0x147e <extractIncomingMessage+0x4c>
	u16 tmp;
	char *ptr;
	u8 n;
	char nibbleStr[50] = {0};
    1484:	ce 01       	movw	r24, r28
    1486:	01 96       	adiw	r24, 0x01	; 1
    1488:	5c 01       	movw	r10, r24
    148a:	82 e3       	ldi	r24, 0x32	; 50
    148c:	f5 01       	movw	r30, r10
    148e:	11 92       	st	Z+, r1
    1490:	8a 95       	dec	r24
    1492:	e9 f7       	brne	.-6      	; 0x148e <extractIncomingMessage+0x5c>
	u8 i = 0;
    1494:	2c 96       	adiw	r28, 0x0c	; 12
    1496:	1f ae       	std	Y+63, r1	; 0x3f
    1498:	2c 97       	sbiw	r28, 0x0c	; 12
	u8 Nibble = 0;
	u8 returnCode = OP;
    149a:	d0 90 b7 09 	lds	r13, 0x09B7	; 0x8009b7 <OP>
	11 ShowBalance			SHOW_BALANCE_REQUEST
	12 faultcode
	13 AuditRq				AUDITDATA_REQUEST
*/
	//1
	if(strstr(dataBuffer, "SetupPackage") != NULL)
    149e:	2e 96       	adiw	r28, 0x0e	; 14
    14a0:	8e ac       	ldd	r8, Y+62	; 0x3e
    14a2:	9f ac       	ldd	r9, Y+63	; 0x3f
    14a4:	2e 97       	sbiw	r28, 0x0e	; 14
    14a6:	66 e8       	ldi	r22, 0x86	; 134
    14a8:	73 e0       	ldi	r23, 0x03	; 3
    14aa:	c4 01       	movw	r24, r8
    14ac:	0e 94 79 34 	call	0x68f2	; 0x68f2 <strstr>
    14b0:	89 2b       	or	r24, r25
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <extractIncomingMessage+0x84>
    14b4:	b1 c0       	rjmp	.+354    	; 0x1618 <extractIncomingMessage+0x1e6>
	{
		//if((ptr = GetParam(dataBuffer,"<SetupString>","<")) != NULL)			PPOS170601
		if((ptr = GetParam(dataBuffer,"<SS>","<")) != NULL)
    14b6:	49 e6       	ldi	r20, 0x69	; 105
    14b8:	52 e0       	ldi	r21, 0x02	; 2
    14ba:	63 e9       	ldi	r22, 0x93	; 147
    14bc:	73 e0       	ldi	r23, 0x03	; 3
    14be:	c4 01       	movw	r24, r8
    14c0:	0e 94 d6 03 	call	0x7ac	; 0x7ac <GetParam>
    14c4:	00 97       	sbiw	r24, 0x00	; 0
    14c6:	21 f1       	breq	.+72     	; 0x1510 <extractIncomingMessage+0xde>
		{
			n = asciiStringToNibble(ptr, nibbleStr);
    14c8:	b5 01       	movw	r22, r10
    14ca:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <asciiStringToNibble>
    14ce:	8b ab       	std	Y+51, r24	; 0x33
			// copy setup data

			halPutEeprom(MACHINE_SETUP_ADDR, n, (u8*)nibbleStr); //write machine setup string to eeprom; Maurice's Fix
    14d0:	a5 01       	movw	r20, r10
    14d2:	68 2f       	mov	r22, r24
    14d4:	84 e2       	ldi	r24, 0x24	; 36
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	0e 94 b9 20 	call	0x4172	; 0x4172 <halPutEeprom>
			
			ReaderSetup.maxOfflineTransaction = nibbleStr[n-1];  //PPOS170712
    14dc:	8b a9       	ldd	r24, Y+51	; 0x33
    14de:	fe 01       	movw	r30, r28
    14e0:	e8 0f       	add	r30, r24
    14e2:	f1 1d       	adc	r31, r1
    14e4:	80 81       	ld	r24, Z
    14e6:	80 93 c2 09 	sts	0x09C2, r24	; 0x8009c2 <ReaderSetup+0x8>
			halPutEeprom(MAXNUM_OFFLINE_ADDR, 1, (u8*)&ReaderSetup.maxOfflineTransaction); //write machine setup string to eeprom minus "number of offline transactions"
    14ea:	42 ec       	ldi	r20, 0xC2	; 194
    14ec:	59 e0       	ldi	r21, 0x09	; 9
    14ee:	61 e0       	ldi	r22, 0x01	; 1
    14f0:	81 e6       	ldi	r24, 0x61	; 97
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	0e 94 b9 20 	call	0x4172	; 0x4172 <halPutEeprom>
			
			ReaderStateFlag.ReaderSetup = READER_SETUP_DONE;
    14f8:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <ReaderStateFlag>
    14fc:	8d 7f       	andi	r24, 0xFD	; 253
    14fe:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <ReaderStateFlag>
			halPutEeprom(READER_STATE_ADDR, 1, (u8*)&ReaderStateFlag);
    1502:	44 e3       	ldi	r20, 0x34	; 52
    1504:	59 e0       	ldi	r21, 0x09	; 9
    1506:	61 e0       	ldi	r22, 0x01	; 1
    1508:	82 e2       	ldi	r24, 0x22	; 34
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	0e 94 b9 20 	call	0x4172	; 0x4172 <halPutEeprom>
		}
			
		if((ptr = GetParam((char *)dataBuffer,"<ValidationCode>","<")) != NULL)
    1510:	49 e6       	ldi	r20, 0x69	; 105
    1512:	52 e0       	ldi	r21, 0x02	; 2
    1514:	68 e9       	ldi	r22, 0x98	; 152
    1516:	73 e0       	ldi	r23, 0x03	; 3
    1518:	2e 96       	adiw	r28, 0x0e	; 14
    151a:	8e ad       	ldd	r24, Y+62	; 0x3e
    151c:	9f ad       	ldd	r25, Y+63	; 0x3f
    151e:	2e 97       	sbiw	r28, 0x0e	; 14
    1520:	0e 94 d6 03 	call	0x7ac	; 0x7ac <GetParam>
    1524:	00 97       	sbiw	r24, 0x00	; 0
    1526:	91 f0       	breq	.+36     	; 0x154c <extractIncomingMessage+0x11a>
		{			
			n = asciiStringToNibble(ptr, nibbleStr);
    1528:	b5 01       	movw	r22, r10
    152a:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <asciiStringToNibble>
    152e:	8b ab       	std	Y+51, r24	; 0x33
			// save validation code
			halPutEeprom(VALIDATION_CODE_ADDR, 1, (u8*)&n);
    1530:	ae 01       	movw	r20, r28
    1532:	4d 5c       	subi	r20, 0xCD	; 205
    1534:	5f 4f       	sbci	r21, 0xFF	; 255
    1536:	61 e0       	ldi	r22, 0x01	; 1
    1538:	87 e5       	ldi	r24, 0x57	; 87
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	0e 94 b9 20 	call	0x4172	; 0x4172 <halPutEeprom>
			halPutEeprom(VALIDATION_CODE_ADDR+1, n, (u8*)nibbleStr);
    1540:	a5 01       	movw	r20, r10
    1542:	6b a9       	ldd	r22, Y+51	; 0x33
    1544:	88 e5       	ldi	r24, 0x58	; 88
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	0e 94 b9 20 	call	0x4172	; 0x4172 <halPutEeprom>
		}		
		
		if((ptr = GetParam((char *)dataBuffer,"<ReaderId>","<")) != NULL)
    154c:	49 e6       	ldi	r20, 0x69	; 105
    154e:	52 e0       	ldi	r21, 0x02	; 2
    1550:	69 ea       	ldi	r22, 0xA9	; 169
    1552:	73 e0       	ldi	r23, 0x03	; 3
    1554:	2e 96       	adiw	r28, 0x0e	; 14
    1556:	8e ad       	ldd	r24, Y+62	; 0x3e
    1558:	9f ad       	ldd	r25, Y+63	; 0x3f
    155a:	2e 97       	sbiw	r28, 0x0e	; 14
    155c:	0e 94 d6 03 	call	0x7ac	; 0x7ac <GetParam>
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	89 f1       	breq	.+98     	; 0x15c6 <extractIncomingMessage+0x194>
		{ //1
			tmp = atoi(ptr);
    1564:	0e 94 24 33 	call	0x6648	; 0x6648 <atoi>
    1568:	9c 01       	movw	r18, r24
			
			while (tmp> 0)
    156a:	89 2b       	or	r24, r25
    156c:	01 f1       	breq	.+64     	; 0x15ae <extractIncomingMessage+0x17c>
    156e:	2c 96       	adiw	r28, 0x0c	; 12
    1570:	4f ad       	ldd	r20, Y+63	; 0x3f
    1572:	2c 97       	sbiw	r28, 0x0c	; 12
    1574:	0a c0       	rjmp	.+20     	; 0x158a <extractIncomingMessage+0x158>
					Nibble = highNibble;
					break;

					case highNibble:

					TemplongAddr[i] =  ((tmp % 16)<<4)| TemplongAddr[i];
    1576:	e2 95       	swap	r30
    1578:	e0 7f       	andi	r30, 0xF0	; 240
    157a:	9e 2b       	or	r25, r30
    157c:	9c 93       	st	X, r25
					i++;
    157e:	4f 5f       	subi	r20, 0xFF	; 255
					Nibble = lowNibble;
					break;
				}
				
				tmp = tmp / 16;
    1580:	23 2f       	mov	r18, r19
    1582:	33 27       	eor	r19, r19
		
		if((ptr = GetParam((char *)dataBuffer,"<ReaderId>","<")) != NULL)
		{ //1
			tmp = atoi(ptr);
			
			while (tmp> 0)
    1584:	21 15       	cp	r18, r1
    1586:	31 05       	cpc	r19, r1
    1588:	79 f0       	breq	.+30     	; 0x15a8 <extractIncomingMessage+0x176>
			{
				switch(Nibble)
				{
					case lowNibble:

					TemplongAddr[i] = (tmp % 16);
    158a:	92 2f       	mov	r25, r18
    158c:	9f 70       	andi	r25, 0x0F	; 15
    158e:	d8 01       	movw	r26, r16
    1590:	a4 0f       	add	r26, r20
    1592:	b1 1d       	adc	r27, r1
    1594:	9c 93       	st	X, r25
					i++;
					Nibble = lowNibble;
					break;
				}
				
				tmp = tmp / 16;
    1596:	f9 01       	movw	r30, r18
    1598:	f2 95       	swap	r31
    159a:	e2 95       	swap	r30
    159c:	ef 70       	andi	r30, 0x0F	; 15
    159e:	ef 27       	eor	r30, r31
    15a0:	ff 70       	andi	r31, 0x0F	; 15
    15a2:	ef 27       	eor	r30, r31
		
		if((ptr = GetParam((char *)dataBuffer,"<ReaderId>","<")) != NULL)
		{ //1
			tmp = atoi(ptr);
			
			while (tmp> 0)
    15a4:	30 97       	sbiw	r30, 0x00	; 0
    15a6:	39 f7       	brne	.-50     	; 0x1576 <extractIncomingMessage+0x144>
    15a8:	2c 96       	adiw	r28, 0x0c	; 12
    15aa:	4f af       	std	Y+63, r20	; 0x3f
    15ac:	2c 97       	sbiw	r28, 0x0c	; 12
				
				tmp = tmp / 16;
			}

			//Update Reader to eeprom in Hex format
			halPutMacAddr(TemplongAddr);
    15ae:	a8 01       	movw	r20, r16
    15b0:	68 e0       	ldi	r22, 0x08	; 8
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	0e 94 b9 20 	call	0x4172	; 0x4172 <halPutEeprom>

			// Verify write operation
			halGetMacAddr(MaclongAddr);
    15ba:	a7 01       	movw	r20, r14
    15bc:	68 e0       	ldi	r22, 0x08	; 8
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	0e 94 a4 20 	call	0x4148	; 0x4148 <halGetEeprom>

		}//1


		// Re-associate with COORD using new ReaderID
		if(strcmp((char*)TemplongAddr,(char*)MaclongAddr) == 0 )
    15c6:	b7 01       	movw	r22, r14
    15c8:	c8 01       	movw	r24, r16
    15ca:	0e 94 4f 34 	call	0x689e	; 0x689e <strcmp>
    15ce:	89 2b       	or	r24, r25
    15d0:	a1 f0       	breq	.+40     	; 0x15fa <extractIncomingMessage+0x1c8>
	else if(strstr(dataBuffer, "AuditRq") != NULL)
	{
		returnCode = AUDITDATA_REQUEST;
	}
	return returnCode;
}
    15d2:	8d 2d       	mov	r24, r13
    15d4:	c3 5b       	subi	r28, 0xB3	; 179
    15d6:	df 4f       	sbci	r29, 0xFF	; 255
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	f8 94       	cli
    15dc:	de bf       	out	0x3e, r29	; 62
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	cd bf       	out	0x3d, r28	; 61
    15e2:	df 91       	pop	r29
    15e4:	cf 91       	pop	r28
    15e6:	1f 91       	pop	r17
    15e8:	0f 91       	pop	r16
    15ea:	ff 90       	pop	r15
    15ec:	ef 90       	pop	r14
    15ee:	df 90       	pop	r13
    15f0:	bf 90       	pop	r11
    15f2:	af 90       	pop	r10
    15f4:	9f 90       	pop	r9
    15f6:	8f 90       	pop	r8
    15f8:	08 95       	ret
			#if (DEBUG)
			Beeps(5);// Beeps 5x
			#endif
			

			ReaderStateFlag.FirstRun = NON_VIRGIN_READER;
    15fa:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <ReaderStateFlag>
    15fe:	8e 7f       	andi	r24, 0xFE	; 254
    1600:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <ReaderStateFlag>
			halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
    1604:	44 e3       	ldi	r20, 0x34	; 52
    1606:	59 e0       	ldi	r21, 0x09	; 9
    1608:	61 e0       	ldi	r22, 0x01	; 1
    160a:	82 e2       	ldi	r24, 0x22	; 34
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	0e 94 b9 20 	call	0x4172	; 0x4172 <halPutEeprom>

			// re-associate with new readerId
			returnCode = APP_INIT;
    1612:	70 e2       	ldi	r23, 0x20	; 32
    1614:	d7 2e       	mov	r13, r23
    1616:	dd cf       	rjmp	.-70     	; 0x15d2 <extractIncomingMessage+0x1a0>
		}

	}
	//2
	else if(strstr(dataBuffer, "SetupRequest") != NULL)
    1618:	64 eb       	ldi	r22, 0xB4	; 180
    161a:	73 e0       	ldi	r23, 0x03	; 3
    161c:	c4 01       	movw	r24, r8
    161e:	0e 94 79 34 	call	0x68f2	; 0x68f2 <strstr>
    1622:	89 2b       	or	r24, r25
    1624:	19 f0       	breq	.+6      	; 0x162c <extractIncomingMessage+0x1fa>
	{
		returnCode = SETUP_REQUEST;
    1626:	2a e0       	ldi	r18, 0x0A	; 10
    1628:	d2 2e       	mov	r13, r18
    162a:	d3 cf       	rjmp	.-90     	; 0x15d2 <extractIncomingMessage+0x1a0>
	}
	//3
	else if(strstr(dataBuffer, "ValidationResponse") != NULL)
    162c:	61 ec       	ldi	r22, 0xC1	; 193
    162e:	73 e0       	ldi	r23, 0x03	; 3
    1630:	c4 01       	movw	r24, r8
    1632:	0e 94 79 34 	call	0x68f2	; 0x68f2 <strstr>
    1636:	89 2b       	or	r24, r25
    1638:	19 f0       	breq	.+6      	; 0x1640 <extractIncomingMessage+0x20e>
	{
		returnCode = VALIDATE_SETUP;
    163a:	94 e1       	ldi	r25, 0x14	; 20
    163c:	d9 2e       	mov	r13, r25
    163e:	c9 cf       	rjmp	.-110    	; 0x15d2 <extractIncomingMessage+0x1a0>
	}
	//4
	else if(strstr(dataBuffer, "GetFirmwareVersion") != NULL)
    1640:	64 ed       	ldi	r22, 0xD4	; 212
    1642:	73 e0       	ldi	r23, 0x03	; 3
    1644:	c4 01       	movw	r24, r8
    1646:	0e 94 79 34 	call	0x68f2	; 0x68f2 <strstr>
    164a:	89 2b       	or	r24, r25
    164c:	19 f0       	breq	.+6      	; 0x1654 <extractIncomingMessage+0x222>
	{
		sendBOWReaderFirmwareVersion();
    164e:	0e 94 24 09 	call	0x1248	; 0x1248 <sendBOWReaderFirmwareVersion>
    1652:	bf cf       	rjmp	.-130    	; 0x15d2 <extractIncomingMessage+0x1a0>
		
	}
	//5
	else if(strstr(dataBuffer, "ResetEEPROM") != NULL)
    1654:	67 ee       	ldi	r22, 0xE7	; 231
    1656:	73 e0       	ldi	r23, 0x03	; 3
    1658:	c4 01       	movw	r24, r8
    165a:	0e 94 79 34 	call	0x68f2	; 0x68f2 <strstr>
    165e:	89 2b       	or	r24, r25
    1660:	a1 f0       	breq	.+40     	; 0x168a <extractIncomingMessage+0x258>
	{
		unsigned char reset_eeprom[8] = {255,255,255,255,255,255,255,255};
    1662:	88 e0       	ldi	r24, 0x08	; 8
    1664:	e7 e2       	ldi	r30, 0x27	; 39
    1666:	f2 e0       	ldi	r31, 0x02	; 2
    1668:	de 01       	movw	r26, r28
    166a:	d3 96       	adiw	r26, 0x33	; 51
    166c:	01 90       	ld	r0, Z+
    166e:	0d 92       	st	X+, r0
    1670:	8a 95       	dec	r24
    1672:	e1 f7       	brne	.-8      	; 0x166c <extractIncomingMessage+0x23a>
		halPutEeprom(0,8,(u8*)reset_eeprom);
    1674:	ae 01       	movw	r20, r28
    1676:	4d 5c       	subi	r20, 0xCD	; 205
    1678:	5f 4f       	sbci	r21, 0xFF	; 255
    167a:	68 e0       	ldi	r22, 0x08	; 8
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	0e 94 b9 20 	call	0x4172	; 0x4172 <halPutEeprom>
		
		// re-associate
		returnCode = APP_INIT;
    1684:	60 e2       	ldi	r22, 0x20	; 32
    1686:	d6 2e       	mov	r13, r22
    1688:	a4 cf       	rjmp	.-184    	; 0x15d2 <extractIncomingMessage+0x1a0>
	}
	//6
	else if(strstr(dataBuffer, "EnterBootloader") != NULL)
    168a:	63 ef       	ldi	r22, 0xF3	; 243
    168c:	73 e0       	ldi	r23, 0x03	; 3
    168e:	c4 01       	movw	r24, r8
    1690:	0e 94 79 34 	call	0x68f2	; 0x68f2 <strstr>
    1694:	89 2b       	or	r24, r25
    1696:	09 f4       	brne	.+2      	; 0x169a <extractIncomingMessage+0x268>
    1698:	3b c0       	rjmp	.+118    	; 0x1710 <extractIncomingMessage+0x2de>
	{
		// Store Active CHANNEL to EEPROM Address 0xFF2
		halPutEeprom((u16*)CHANNEL_ADDR, 1, &macConfig.currentChannel);
    169a:	40 e5       	ldi	r20, 0x50	; 80
    169c:	5c e0       	ldi	r21, 0x0C	; 12
    169e:	61 e0       	ldi	r22, 0x01	; 1
    16a0:	82 ef       	ldi	r24, 0xF2	; 242
    16a2:	9f e0       	ldi	r25, 0x0F	; 15
    16a4:	0e 94 b9 20 	call	0x4172	; 0x4172 <halPutEeprom>

		// Store Active PAN_ID to EEPROM Address 0xFF4
		halPutEeprom((u16*)PANID_ADDR, 2, (u8*)&macConfig.panId);
    16a8:	47 e4       	ldi	r20, 0x47	; 71
    16aa:	5c e0       	ldi	r21, 0x0C	; 12
    16ac:	62 e0       	ldi	r22, 0x02	; 2
    16ae:	84 ef       	ldi	r24, 0xF4	; 244
    16b0:	9f e0       	ldi	r25, 0x0F	; 15
    16b2:	0e 94 b9 20 	call	0x4172	; 0x4172 <halPutEeprom>

		// Store Active SHORT SOURCE ADDR to EEPROM Address 0xFF6
		halPutEeprom((u16*)SRCADDR_ADDR,2, (u8*)&macConfig.shortAddress);
    16b6:	49 e4       	ldi	r20, 0x49	; 73
    16b8:	5c e0       	ldi	r21, 0x0C	; 12
    16ba:	62 e0       	ldi	r22, 0x02	; 2
    16bc:	86 ef       	ldi	r24, 0xF6	; 246
    16be:	9f e0       	ldi	r25, 0x0F	; 15
    16c0:	0e 94 b9 20 	call	0x4172	; 0x4172 <halPutEeprom>
		
		i = 0x01;
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	2c 96       	adiw	r28, 0x0c	; 12
    16c8:	8f af       	std	Y+63, r24	; 0x3f
    16ca:	2c 97       	sbiw	r28, 0x0c	; 12
		halPutEeprom((u16*)BOOT_INIT_ADDR,1,(u8*)&i);
    16cc:	ae 01       	movw	r20, r28
    16ce:	45 5b       	subi	r20, 0xB5	; 181
    16d0:	5f 4f       	sbci	r21, 0xFF	; 255
    16d2:	61 e0       	ldi	r22, 0x01	; 1
    16d4:	80 ef       	ldi	r24, 0xF0	; 240
    16d6:	9f e0       	ldi	r25, 0x0F	; 15
    16d8:	0e 94 b9 20 	call	0x4172	; 0x4172 <halPutEeprom>
		
		// zero out CRC and Application size memory location
		memset(dataBuffer,0,sizeof((char*)dataBuffer));
    16dc:	2e 96       	adiw	r28, 0x0e	; 14
    16de:	ee ad       	ldd	r30, Y+62	; 0x3e
    16e0:	ff ad       	ldd	r31, Y+63	; 0x3f
    16e2:	2e 97       	sbiw	r28, 0x0e	; 14
    16e4:	11 82       	std	Z+1, r1	; 0x01
    16e6:	10 82       	st	Z, r1
		halPutEeprom((u16*)APP_CRC,6,(u8*)&dataBuffer);
    16e8:	ae 01       	movw	r20, r28
    16ea:	44 5b       	subi	r20, 0xB4	; 180
    16ec:	5f 4f       	sbci	r21, 0xFF	; 255
    16ee:	66 e0       	ldi	r22, 0x06	; 6
    16f0:	8a ef       	ldi	r24, 0xFA	; 250
    16f2:	9f e0       	ldi	r25, 0x0F	; 15
    16f4:	0e 94 b9 20 	call	0x4172	; 0x4172 <halPutEeprom>

		
		// Initiate watchdog timer
		cli();
    16f8:	f8 94       	cli
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    16fa:	9f e0       	ldi	r25, 0x0F	; 15
    16fc:	88 e1       	ldi	r24, 0x18	; 24
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	f8 94       	cli
    1702:	a8 95       	wdr
    1704:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1708:	0f be       	out	0x3f, r0	; 63
    170a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
		wdt_enable(WDTO_2S);
		while(1);
    170e:	ff cf       	rjmp	.-2      	; 0x170e <extractIncomingMessage+0x2dc>

	}
	//7
	else if(strstr(dataBuffer, "SetD") != NULL)
    1710:	63 e0       	ldi	r22, 0x03	; 3
    1712:	74 e0       	ldi	r23, 0x04	; 4
    1714:	c4 01       	movw	r24, r8
    1716:	0e 94 79 34 	call	0x68f2	; 0x68f2 <strstr>
    171a:	89 2b       	or	r24, r25
    171c:	89 f1       	breq	.+98     	; 0x1780 <extractIncomingMessage+0x34e>
	{
		if((ptr = GetParam((char *)dataBuffer,"<SetD>","<")) != NULL)
    171e:	49 e6       	ldi	r20, 0x69	; 105
    1720:	52 e0       	ldi	r21, 0x02	; 2
    1722:	68 e0       	ldi	r22, 0x08	; 8
    1724:	74 e0       	ldi	r23, 0x04	; 4
    1726:	c4 01       	movw	r24, r8
    1728:	0e 94 d6 03 	call	0x7ac	; 0x7ac <GetParam>
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	09 f4       	brne	.+2      	; 0x1732 <extractIncomingMessage+0x300>
    1730:	50 cf       	rjmp	.-352    	; 0x15d2 <extractIncomingMessage+0x1a0>
		{
			if((n=strlen(ptr)) <= MACHINE_NAME_SIZE)
    1732:	fc 01       	movw	r30, r24
    1734:	01 90       	ld	r0, Z+
    1736:	00 20       	and	r0, r0
    1738:	e9 f7       	brne	.-6      	; 0x1734 <extractIncomingMessage+0x302>
    173a:	31 97       	sbiw	r30, 0x01	; 1
    173c:	8f 01       	movw	r16, r30
    173e:	08 1b       	sub	r16, r24
    1740:	19 0b       	sbc	r17, r25
    1742:	0b ab       	std	Y+51, r16	; 0x33
    1744:	03 33       	cpi	r16, 0x33	; 51
    1746:	08 f0       	brcs	.+2      	; 0x174a <extractIncomingMessage+0x318>
    1748:	44 cf       	rjmp	.-376    	; 0x15d2 <extractIncomingMessage+0x1a0>
			{
				strcpy((char*)ReaderSetup.machineDescription, ptr);
    174a:	bc 01       	movw	r22, r24
    174c:	84 ec       	ldi	r24, 0xC4	; 196
    174e:	99 e0       	ldi	r25, 0x09	; 9
    1750:	0e 94 58 34 	call	0x68b0	; 0x68b0 <strcpy>
				n++;//add null terminator to string
    1754:	61 e0       	ldi	r22, 0x01	; 1
    1756:	60 0f       	add	r22, r16
    1758:	6b ab       	std	Y+51, r22	; 0x33
				halPutEeprom(MACHINE_DESCRIPTION_ADDR, n, (u8*)&ReaderSetup.machineDescription);
    175a:	44 ec       	ldi	r20, 0xC4	; 196
    175c:	59 e0       	ldi	r21, 0x09	; 9
    175e:	87 e7       	ldi	r24, 0x77	; 119
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	0e 94 b9 20 	call	0x4172	; 0x4172 <halPutEeprom>
				
				ReaderStateFlag.ReaderNameSetup = SET_READER_FLAG;
    1766:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <ReaderStateFlag>
    176a:	8f 77       	andi	r24, 0x7F	; 127
    176c:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <ReaderStateFlag>
				halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
    1770:	44 e3       	ldi	r20, 0x34	; 52
    1772:	59 e0       	ldi	r21, 0x09	; 9
    1774:	61 e0       	ldi	r22, 0x01	; 1
    1776:	82 e2       	ldi	r24, 0x22	; 34
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	0e 94 b9 20 	call	0x4172	; 0x4172 <halPutEeprom>
    177e:	29 cf       	rjmp	.-430    	; 0x15d2 <extractIncomingMessage+0x1a0>
			}
		}
	}
	//8
	else if(strstr(dataBuffer, "GetD") != NULL)
    1780:	6f e0       	ldi	r22, 0x0F	; 15
    1782:	74 e0       	ldi	r23, 0x04	; 4
    1784:	c4 01       	movw	r24, r8
    1786:	0e 94 79 34 	call	0x68f2	; 0x68f2 <strstr>
    178a:	89 2b       	or	r24, r25
    178c:	19 f0       	breq	.+6      	; 0x1794 <extractIncomingMessage+0x362>
	{
		sendBOWMachineDescription();
    178e:	0e 94 c9 09 	call	0x1392	; 0x1392 <sendBOWMachineDescription>
    1792:	1f cf       	rjmp	.-450    	; 0x15d2 <extractIncomingMessage+0x1a0>
		
	}
	//9
	else if(strstr(dataBuffer, "SetMachineLabel") != NULL)
    1794:	64 e1       	ldi	r22, 0x14	; 20
    1796:	74 e0       	ldi	r23, 0x04	; 4
    1798:	c4 01       	movw	r24, r8
    179a:	0e 94 79 34 	call	0x68f2	; 0x68f2 <strstr>
    179e:	89 2b       	or	r24, r25
    17a0:	89 f1       	breq	.+98     	; 0x1804 <extractIncomingMessage+0x3d2>
	{
		if((ptr = GetParam((char *)dataBuffer,"<SetMachineLabel>","<")) != NULL)
    17a2:	49 e6       	ldi	r20, 0x69	; 105
    17a4:	52 e0       	ldi	r21, 0x02	; 2
    17a6:	64 e2       	ldi	r22, 0x24	; 36
    17a8:	74 e0       	ldi	r23, 0x04	; 4
    17aa:	c4 01       	movw	r24, r8
    17ac:	0e 94 d6 03 	call	0x7ac	; 0x7ac <GetParam>
    17b0:	00 97       	sbiw	r24, 0x00	; 0
    17b2:	09 f4       	brne	.+2      	; 0x17b6 <extractIncomingMessage+0x384>
    17b4:	0e cf       	rjmp	.-484    	; 0x15d2 <extractIncomingMessage+0x1a0>
		{
			if((n=strlen(ptr)) <= MACHINE_LABEL_SIZE)
    17b6:	fc 01       	movw	r30, r24
    17b8:	01 90       	ld	r0, Z+
    17ba:	00 20       	and	r0, r0
    17bc:	e9 f7       	brne	.-6      	; 0x17b8 <extractIncomingMessage+0x386>
    17be:	31 97       	sbiw	r30, 0x01	; 1
    17c0:	8f 01       	movw	r16, r30
    17c2:	08 1b       	sub	r16, r24
    17c4:	19 0b       	sbc	r17, r25
    17c6:	0b ab       	std	Y+51, r16	; 0x33
    17c8:	0b 30       	cpi	r16, 0x0B	; 11
    17ca:	08 f0       	brcs	.+2      	; 0x17ce <extractIncomingMessage+0x39c>
    17cc:	02 cf       	rjmp	.-508    	; 0x15d2 <extractIncomingMessage+0x1a0>
			{
				strcpy((char*)ReaderSetup.machineLabel, ptr);
    17ce:	bc 01       	movw	r22, r24
    17d0:	87 ef       	ldi	r24, 0xF7	; 247
    17d2:	99 e0       	ldi	r25, 0x09	; 9
    17d4:	0e 94 58 34 	call	0x68b0	; 0x68b0 <strcpy>
				n++;//add null terminator to string
    17d8:	61 e0       	ldi	r22, 0x01	; 1
    17da:	60 0f       	add	r22, r16
    17dc:	6b ab       	std	Y+51, r22	; 0x33
				halPutEeprom(MACHINE_LABEL_ADDR, n, (u8*)&ReaderSetup.machineLabel);
    17de:	47 ef       	ldi	r20, 0xF7	; 247
    17e0:	59 e0       	ldi	r21, 0x09	; 9
    17e2:	8c e6       	ldi	r24, 0x6C	; 108
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	0e 94 b9 20 	call	0x4172	; 0x4172 <halPutEeprom>
				
				ReaderStateFlag.ReaderLabelSetup = SET_READER_FLAG;
    17ea:	80 91 35 09 	lds	r24, 0x0935	; 0x800935 <ReaderStateFlag+0x1>
    17ee:	8e 7f       	andi	r24, 0xFE	; 254
    17f0:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <ReaderStateFlag+0x1>
				halPutEeprom(READER_STATE_ADDR,1,(u8*)&ReaderStateFlag);
    17f4:	44 e3       	ldi	r20, 0x34	; 52
    17f6:	59 e0       	ldi	r21, 0x09	; 9
    17f8:	61 e0       	ldi	r22, 0x01	; 1
    17fa:	82 e2       	ldi	r24, 0x22	; 34
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	0e 94 b9 20 	call	0x4172	; 0x4172 <halPutEeprom>
    1802:	e7 ce       	rjmp	.-562    	; 0x15d2 <extractIncomingMessage+0x1a0>
			}
			
		}
	}
	//10
	else if(strstr(dataBuffer, "GetMachineLabel") != NULL)
    1804:	66 e3       	ldi	r22, 0x36	; 54
    1806:	74 e0       	ldi	r23, 0x04	; 4
    1808:	c4 01       	movw	r24, r8
    180a:	0e 94 79 34 	call	0x68f2	; 0x68f2 <strstr>
    180e:	89 2b       	or	r24, r25
    1810:	19 f0       	breq	.+6      	; 0x1818 <extractIncomingMessage+0x3e6>
	{
		sendBOWMachineLabel();
    1812:	0e 94 a2 09 	call	0x1344	; 0x1344 <sendBOWMachineLabel>
    1816:	dd ce       	rjmp	.-582    	; 0x15d2 <extractIncomingMessage+0x1a0>
	}
	//11
	else if (strstr(dataBuffer, "GetOLT") != NULL)
    1818:	66 e4       	ldi	r22, 0x46	; 70
    181a:	74 e0       	ldi	r23, 0x04	; 4
    181c:	c4 01       	movw	r24, r8
    181e:	0e 94 79 34 	call	0x68f2	; 0x68f2 <strstr>
    1822:	89 2b       	or	r24, r25
    1824:	69 f0       	breq	.+26     	; 0x1840 <extractIncomingMessage+0x40e>
	{
		sendNumberOfOLT();
    1826:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <sendNumberOfOLT>
		
		oLTTimerId = macSetLongAlarm(SERVER_RESPONSE_TIMEOUT,timeoutWaitingForOLTReponse);
    182a:	60 e6       	ldi	r22, 0x60	; 96
    182c:	78 e0       	ldi	r23, 0x08	; 8
    182e:	8c e3       	ldi	r24, 0x3C	; 60
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	0e 94 e7 27 	call	0x4fce	; 0x4fce <macSetLongAlarm>
    1836:	80 93 30 05 	sts	0x0530, r24	; 0x800530 <oLTTimerId.4053>
		returnCode = SEND_OFFLINE_TRANSACTIONS;
    183a:	58 e2       	ldi	r21, 0x28	; 40
    183c:	d5 2e       	mov	r13, r21
    183e:	c9 ce       	rjmp	.-622    	; 0x15d2 <extractIncomingMessage+0x1a0>
	}
	//12
	else if(strstr(dataBuffer, "ShowBalance") != NULL)
    1840:	6d e4       	ldi	r22, 0x4D	; 77
    1842:	74 e0       	ldi	r23, 0x04	; 4
    1844:	c4 01       	movw	r24, r8
    1846:	0e 94 79 34 	call	0x68f2	; 0x68f2 <strstr>
    184a:	89 2b       	or	r24, r25
    184c:	19 f0       	breq	.+6      	; 0x1854 <extractIncomingMessage+0x422>
	{
		returnCode = SHOW_BALANCE_REQUEST;
    184e:	8f e1       	ldi	r24, 0x1F	; 31
    1850:	d8 2e       	mov	r13, r24
    1852:	bf ce       	rjmp	.-642    	; 0x15d2 <extractIncomingMessage+0x1a0>
	}
	//13
	else if (strstr(dataBuffer, "faultcode") != NULL)
    1854:	69 e5       	ldi	r22, 0x59	; 89
    1856:	74 e0       	ldi	r23, 0x04	; 4
    1858:	c4 01       	movw	r24, r8
    185a:	0e 94 79 34 	call	0x68f2	; 0x68f2 <strstr>
    185e:	89 2b       	or	r24, r25
    1860:	11 f1       	breq	.+68     	; 0x18a6 <extractIncomingMessage+0x474>
	{
		char errCode = 0;
    1862:	1b aa       	std	Y+51, r1	; 0x33
		if((ptr = GetParam((char *)dataBuffer,"<faultcode>","<")) != NULL)
    1864:	49 e6       	ldi	r20, 0x69	; 105
    1866:	52 e0       	ldi	r21, 0x02	; 2
    1868:	63 e6       	ldi	r22, 0x63	; 99
    186a:	74 e0       	ldi	r23, 0x04	; 4
    186c:	c4 01       	movw	r24, r8
    186e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <GetParam>
    1872:	00 97       	sbiw	r24, 0x00	; 0
    1874:	09 f4       	brne	.+2      	; 0x1878 <extractIncomingMessage+0x446>
    1876:	ad ce       	rjmp	.-678    	; 0x15d2 <extractIncomingMessage+0x1a0>
		{
			asciiStringToNibble(ptr, &errCode);
    1878:	be 01       	movw	r22, r28
    187a:	6d 5c       	subi	r22, 0xCD	; 205
    187c:	7f 4f       	sbci	r23, 0xFF	; 255
    187e:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <asciiStringToNibble>
			
			switch(errCode)
    1882:	8b a9       	ldd	r24, Y+51	; 0x33
    1884:	86 30       	cpi	r24, 0x06	; 6
    1886:	09 f0       	breq	.+2      	; 0x188a <extractIncomingMessage+0x458>
    1888:	a4 ce       	rjmp	.-696    	; 0x15d2 <extractIncomingMessage+0x1a0>
			{
				case TRANSACTION_SUCCESSFUL:
				if (returnCode == SEND_OFFLINE_TRANSACTIONS)
    188a:	f8 e2       	ldi	r31, 0x28	; 40
    188c:	df 12       	cpse	r13, r31
    188e:	a1 ce       	rjmp	.-702    	; 0x15d2 <extractIncomingMessage+0x1a0>
				{
					macTimerEnd(oLTTimerId);
    1890:	80 91 30 05 	lds	r24, 0x0530	; 0x800530 <oLTTimerId.4053>
    1894:	0e 94 43 28 	call	0x5086	; 0x5086 <macTimerEnd>
					if( !sendStoredTransaction() )
    1898:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <sendStoredTransaction>
    189c:	81 11       	cpse	r24, r1
    189e:	0e c0       	rjmp	.+28     	; 0x18bc <extractIncomingMessage+0x48a>
					{ //All stored transactions have been sent
						returnCode = IDLE;
    18a0:	47 e2       	ldi	r20, 0x27	; 39
    18a2:	d4 2e       	mov	r13, r20
    18a4:	96 ce       	rjmp	.-724    	; 0x15d2 <extractIncomingMessage+0x1a0>
			}
		}
		
	}
	//14 new: Audit Data ACA Short Audit Command = 0x30
	else if(strstr(dataBuffer, "AuditRq") != NULL)
    18a6:	6f e6       	ldi	r22, 0x6F	; 111
    18a8:	74 e0       	ldi	r23, 0x04	; 4
    18aa:	c4 01       	movw	r24, r8
    18ac:	0e 94 79 34 	call	0x68f2	; 0x68f2 <strstr>
    18b0:	89 2b       	or	r24, r25
    18b2:	09 f4       	brne	.+2      	; 0x18b6 <extractIncomingMessage+0x484>
    18b4:	8e ce       	rjmp	.-740    	; 0x15d2 <extractIncomingMessage+0x1a0>
	{
		returnCode = AUDITDATA_REQUEST;
    18b6:	37 e1       	ldi	r19, 0x17	; 23
    18b8:	d3 2e       	mov	r13, r19
    18ba:	8b ce       	rjmp	.-746    	; 0x15d2 <extractIncomingMessage+0x1a0>
					{ //All stored transactions have been sent
						returnCode = IDLE;
					}
					else
					{	//set new timer while waiting for next response
						oLTTimerId = macSetLongAlarm(SERVER_RESPONSE_TIMEOUT,timeoutWaitingForOLTReponse);
    18bc:	60 e6       	ldi	r22, 0x60	; 96
    18be:	78 e0       	ldi	r23, 0x08	; 8
    18c0:	8c e3       	ldi	r24, 0x3C	; 60
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	0e 94 e7 27 	call	0x4fce	; 0x4fce <macSetLongAlarm>
    18c8:	80 93 30 05 	sts	0x0530, r24	; 0x800530 <oLTTimerId.4053>
    18cc:	82 ce       	rjmp	.-764    	; 0x15d2 <extractIncomingMessage+0x1a0>

000018ce <sendBOWCCTransaction>:
The reader sends this packet frame to perform a vending transaction.

@param data Pointer to the data to be sent.
*/
bool sendBOWCCTransaction(structTransaction *transRecord)
{
    18ce:	ef 92       	push	r14
    18d0:	ff 92       	push	r15
    18d2:	0f 93       	push	r16
    18d4:	1f 93       	push	r17
    18d6:	cf 93       	push	r28
    18d8:	df 93       	push	r29
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
    18de:	ca 58       	subi	r28, 0x8A	; 138
    18e0:	d1 09       	sbc	r29, r1
    18e2:	0f b6       	in	r0, 0x3f	; 63
    18e4:	f8 94       	cli
    18e6:	de bf       	out	0x3e, r29	; 62
    18e8:	0f be       	out	0x3f, r0	; 63
    18ea:	cd bf       	out	0x3d, r28	; 61
    18ec:	8c 01       	movw	r16, r24
	char tmpCardIdString[10] = {0};
    18ee:	7e 01       	movw	r14, r28
    18f0:	81 e8       	ldi	r24, 0x81	; 129
    18f2:	e8 0e       	add	r14, r24
    18f4:	f1 1c       	adc	r15, r1
    18f6:	8a e0       	ldi	r24, 0x0A	; 10
    18f8:	d7 01       	movw	r26, r14
    18fa:	1d 92       	st	X+, r1
    18fc:	8a 95       	dec	r24
    18fe:	e9 f7       	brne	.-6      	; 0x18fa <sendBOWCCTransaction+0x2c>
	char tempStr[128] = {0};
    1900:	fe 01       	movw	r30, r28
    1902:	31 96       	adiw	r30, 0x01	; 1
    1904:	80 e8       	ldi	r24, 0x80	; 128
    1906:	df 01       	movw	r26, r30
    1908:	1d 92       	st	X+, r1
    190a:	8a 95       	dec	r24
    190c:	e9 f7       	brne	.-6      	; 0x1908 <sendBOWCCTransaction+0x3a>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ultoa_ncheck (unsigned long, char *, unsigned char);
	return __ultoa_ncheck (__val, __s, __radix);
    190e:	f8 01       	movw	r30, r16
    1910:	61 85       	ldd	r22, Z+9	; 0x09
    1912:	72 85       	ldd	r23, Z+10	; 0x0a
    1914:	83 85       	ldd	r24, Z+11	; 0x0b
    1916:	94 85       	ldd	r25, Z+12	; 0x0c
    1918:	2a e0       	ldi	r18, 0x0A	; 10
    191a:	a7 01       	movw	r20, r14
    191c:	0e 94 9b 34 	call	0x6936	; 0x6936 <__ultoa_ncheck>
	
	//send data to BOW
	ultoa(transRecord->CardId,tmpCardIdString,10);
	sprintf((char *)tempStr+1, "<CC>"
    1920:	d8 01       	movw	r26, r16
    1922:	54 96       	adiw	r26, 0x14	; 20
    1924:	8c 91       	ld	r24, X
    1926:	54 97       	sbiw	r26, 0x14	; 20
    1928:	1f 92       	push	r1
    192a:	8f 93       	push	r24
    192c:	13 96       	adiw	r26, 0x03	; 3
    192e:	8c 91       	ld	r24, X
    1930:	13 97       	sbiw	r26, 0x03	; 3
    1932:	1f 92       	push	r1
    1934:	8f 93       	push	r24
    1936:	12 96       	adiw	r26, 0x02	; 2
    1938:	8c 91       	ld	r24, X
    193a:	12 97       	sbiw	r26, 0x02	; 2
    193c:	1f 92       	push	r1
    193e:	8f 93       	push	r24
    1940:	15 96       	adiw	r26, 0x05	; 5
    1942:	8c 91       	ld	r24, X
    1944:	15 97       	sbiw	r26, 0x05	; 5
    1946:	8f 93       	push	r24
    1948:	14 96       	adiw	r26, 0x04	; 4
    194a:	8c 91       	ld	r24, X
    194c:	14 97       	sbiw	r26, 0x04	; 4
    194e:	8f 93       	push	r24
    1950:	11 96       	adiw	r26, 0x01	; 1
    1952:	8c 91       	ld	r24, X
    1954:	11 97       	sbiw	r26, 0x01	; 1
    1956:	8f 93       	push	r24
    1958:	8c 91       	ld	r24, X
    195a:	8f 93       	push	r24
    195c:	17 96       	adiw	r26, 0x07	; 7
    195e:	6d 91       	ld	r22, X+
    1960:	7c 91       	ld	r23, X
    1962:	18 97       	sbiw	r26, 0x08	; 8
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <__floatunsisf>
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	48 ec       	ldi	r20, 0xC8	; 200
    1972:	52 e4       	ldi	r21, 0x42	; 66
    1974:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__divsf3>
    1978:	9f 93       	push	r25
    197a:	8f 93       	push	r24
    197c:	7f 93       	push	r23
    197e:	6f 93       	push	r22
    1980:	ff 92       	push	r15
    1982:	ef 92       	push	r14
    1984:	87 e7       	ldi	r24, 0x77	; 119
    1986:	94 e0       	ldi	r25, 0x04	; 4
    1988:	9f 93       	push	r25
    198a:	8f 93       	push	r24
    198c:	8e 01       	movw	r16, r28
    198e:	0e 5f       	subi	r16, 0xFE	; 254
    1990:	1f 4f       	sbci	r17, 0xFF	; 255
    1992:	1f 93       	push	r17
    1994:	0f 93       	push	r16
    1996:	0e 94 f5 34 	call	0x69ea	; 0x69ea <sprintf>
	"<code>%d%d</code>"
	"<isOL>%d</isOL>"
	,tmpCardIdString, (double)(transRecord->vendPrice / 100.0), transRecord->LocationId, transRecord->ManufactureId
	, transRecord->MachineId[0] , transRecord->MachineId[1], transRecord->isOffline);
	
	tempStr[0] = strlen(tempStr+1); //get string length then assign to first element
    199a:	f8 01       	movw	r30, r16
    199c:	01 90       	ld	r0, Z+
    199e:	00 20       	and	r0, r0
    19a0:	e9 f7       	brne	.-6      	; 0x199c <sendBOWCCTransaction+0xce>
	tempStr[0] = tempStr[0] + 1;    // data size = data byte + size byte
    19a2:	6e 2f       	mov	r22, r30
    19a4:	60 1b       	sub	r22, r16
    19a6:	69 83       	std	Y+1, r22	; 0x01
	
	if (tempStr[0] > 127)
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	f8 94       	cli
    19ac:	de bf       	out	0x3e, r29	; 62
    19ae:	0f be       	out	0x3f, r0	; 63
    19b0:	cd bf       	out	0x3d, r28	; 61
    19b2:	67 fd       	sbrc	r22, 7
    19b4:	14 c0       	rjmp	.+40     	; 0x19de <sendBOWCCTransaction+0x110>
	{
		//#error "Outgoing string to large"
		return false;
	}
	
	macDataRequest(DEFAULT_COORD_ADDR,(u8)tempStr[0],(u8*)tempStr+1); //send record via radio
    19b6:	a8 01       	movw	r20, r16
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	0e 94 da 22 	call	0x45b4	; 0x45b4 <macDataRequest>
	
	return true;
    19c0:	81 e0       	ldi	r24, 0x01	; 1
}
    19c2:	c6 57       	subi	r28, 0x76	; 118
    19c4:	df 4f       	sbci	r29, 0xFF	; 255
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	f8 94       	cli
    19ca:	de bf       	out	0x3e, r29	; 62
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	cd bf       	out	0x3d, r28	; 61
    19d0:	df 91       	pop	r29
    19d2:	cf 91       	pop	r28
    19d4:	1f 91       	pop	r17
    19d6:	0f 91       	pop	r16
    19d8:	ff 90       	pop	r15
    19da:	ef 90       	pop	r14
    19dc:	08 95       	ret
	tempStr[0] = tempStr[0] + 1;    // data size = data byte + size byte
	
	if (tempStr[0] > 127)
	{
		//#error "Outgoing string to large"
		return false;
    19de:	80 e0       	ldi	r24, 0x00	; 0
    19e0:	f0 cf       	rjmp	.-32     	; 0x19c2 <sendBOWCCTransaction+0xf4>

000019e2 <sendBOWAuditDataRequest>:
/**
	@brief The sendBOWAuditDataRequest function is used to send a frame over the air to the BOW. 
	The reader sends this packet frame (Audit Data packet 0x30) to transmit Short Audit Data about the vend.
*/
bool sendBOWAuditDataRequest()
{
    19e2:	cf 93       	push	r28
    19e4:	df 93       	push	r29
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
    19ea:	c0 58       	subi	r28, 0x80	; 128
    19ec:	d1 09       	sbc	r29, r1
    19ee:	0f b6       	in	r0, 0x3f	; 63
    19f0:	f8 94       	cli
    19f2:	de bf       	out	0x3e, r29	; 62
    19f4:	0f be       	out	0x3f, r0	; 63
    19f6:	cd bf       	out	0x3d, r28	; 61
	char tmp[128] = {0};
    19f8:	be 01       	movw	r22, r28
    19fa:	6f 5f       	subi	r22, 0xFF	; 255
    19fc:	7f 4f       	sbci	r23, 0xFF	; 255
    19fe:	80 e8       	ldi	r24, 0x80	; 128
    1a00:	fb 01       	movw	r30, r22
    1a02:	11 92       	st	Z+, r1
    1a04:	8a 95       	dec	r24
    1a06:	e9 f7       	brne	.-6      	; 0x1a02 <sendBOWAuditDataRequest+0x20>
	
	constructOutgoingString(REQUEST_AUDITDATA, tmp);
    1a08:	88 e0       	ldi	r24, 0x08	; 8
    1a0a:	0e 94 66 08 	call	0x10cc	; 0x10cc <constructOutgoingString>
	macDataRequest(DEFAULT_COORD_ADDR, (u8)tmp[0], (u8*)tmp+1);
    1a0e:	ae 01       	movw	r20, r28
    1a10:	4e 5f       	subi	r20, 0xFE	; 254
    1a12:	5f 4f       	sbci	r21, 0xFF	; 255
    1a14:	69 81       	ldd	r22, Y+1	; 0x01
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	0e 94 da 22 	call	0x45b4	; 0x45b4 <macDataRequest>
	
	return true;
}
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	c0 58       	subi	r28, 0x80	; 128
    1a22:	df 4f       	sbci	r29, 0xFF	; 255
    1a24:	0f b6       	in	r0, 0x3f	; 63
    1a26:	f8 94       	cli
    1a28:	de bf       	out	0x3e, r29	; 62
    1a2a:	0f be       	out	0x3f, r0	; 63
    1a2c:	cd bf       	out	0x3d, r28	; 61
    1a2e:	df 91       	pop	r29
    1a30:	cf 91       	pop	r28
    1a32:	08 95       	ret

00001a34 <sendSQDisplayCommand>:
	temp[4] = balance[2];
	temp[5] = balance[3];	
	temp[8] = 5;					//Duration of display in seconds
	
	return ( sendSQDataPacket(temp) );
}
    1a34:	cf 92       	push	r12
    1a36:	ef 92       	push	r14
    1a38:	0f 93       	push	r16
    1a3a:	cf 93       	push	r28
    1a3c:	df 93       	push	r29
    1a3e:	cd b7       	in	r28, 0x3d	; 61
    1a40:	de b7       	in	r29, 0x3e	; 62
    1a42:	29 97       	sbiw	r28, 0x09	; 9
    1a44:	0f b6       	in	r0, 0x3f	; 63
    1a46:	f8 94       	cli
    1a48:	de bf       	out	0x3e, r29	; 62
    1a4a:	0f be       	out	0x3f, r0	; 63
    1a4c:	cd bf       	out	0x3d, r28	; 61
    1a4e:	fe 01       	movw	r30, r28
    1a50:	31 96       	adiw	r30, 0x01	; 1
    1a52:	99 e0       	ldi	r25, 0x09	; 9
    1a54:	df 01       	movw	r26, r30
    1a56:	1d 92       	st	X+, r1
    1a58:	9a 95       	dec	r25
    1a5a:	e9 f7       	brne	.-6      	; 0x1a56 <sendSQDisplayCommand+0x22>
    1a5c:	98 e0       	ldi	r25, 0x08	; 8
    1a5e:	99 83       	std	Y+1, r25	; 0x01
    1a60:	90 e6       	ldi	r25, 0x60	; 96
    1a62:	9a 83       	std	Y+2, r25	; 0x02
    1a64:	8b 83       	std	Y+3, r24	; 0x03
    1a66:	6c 83       	std	Y+4, r22	; 0x04
    1a68:	4d 83       	std	Y+5, r20	; 0x05
    1a6a:	2e 83       	std	Y+6, r18	; 0x06
    1a6c:	0f 83       	std	Y+7, r16	; 0x07
    1a6e:	e8 86       	std	Y+8, r14	; 0x08
    1a70:	c9 86       	std	Y+9, r12	; 0x09
    1a72:	cf 01       	movw	r24, r30
    1a74:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <sendSQDataPacket>
    1a78:	29 96       	adiw	r28, 0x09	; 9
    1a7a:	0f b6       	in	r0, 0x3f	; 63
    1a7c:	f8 94       	cli
    1a7e:	de bf       	out	0x3e, r29	; 62
    1a80:	0f be       	out	0x3f, r0	; 63
    1a82:	cd bf       	out	0x3d, r28	; 61
    1a84:	df 91       	pop	r29
    1a86:	cf 91       	pop	r28
    1a88:	0f 91       	pop	r16
    1a8a:	ef 90       	pop	r14
    1a8c:	cf 90       	pop	r12
    1a8e:	08 95       	ret

00001a90 <displaySQReaderVersion>:
    1a90:	cf 92       	push	r12
    1a92:	ef 92       	push	r14
    1a94:	0f 93       	push	r16
    1a96:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <msgNumber+0x1>
    1a9a:	85 e0       	ldi	r24, 0x05	; 5
    1a9c:	c8 2e       	mov	r12, r24
    1a9e:	e1 2c       	mov	r14, r1
    1aa0:	00 e0       	ldi	r16, 0x00	; 0
    1aa2:	20 91 0d 02 	lds	r18, 0x020D	; 0x80020d <msgNumber>
    1aa6:	46 2f       	mov	r20, r22
    1aa8:	80 e5       	ldi	r24, 0x50	; 80
    1aaa:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <sendSQDisplayCommand>
    1aae:	88 23       	and	r24, r24
    1ab0:	49 f0       	breq	.+18     	; 0x1ac4 <displaySQReaderVersion+0x34>
    1ab2:	2f ef       	ldi	r18, 0xFF	; 255
    1ab4:	37 ea       	ldi	r19, 0xA7	; 167
    1ab6:	91 e6       	ldi	r25, 0x61	; 97
    1ab8:	21 50       	subi	r18, 0x01	; 1
    1aba:	30 40       	sbci	r19, 0x00	; 0
    1abc:	90 40       	sbci	r25, 0x00	; 0
    1abe:	e1 f7       	brne	.-8      	; 0x1ab8 <displaySQReaderVersion+0x28>
    1ac0:	00 c0       	rjmp	.+0      	; 0x1ac2 <displaySQReaderVersion+0x32>
    1ac2:	00 00       	nop
    1ac4:	0f 91       	pop	r16
    1ac6:	ef 90       	pop	r14
    1ac8:	cf 90       	pop	r12
    1aca:	08 95       	ret

00001acc <displaySQTopOffvend>:
   Parameter:  double vend

   maybe I use the above funct instead
 */
bool displaySQTopOffvend(double vend)
{
    1acc:	cf 92       	push	r12
    1ace:	ef 92       	push	r14
    1ad0:	0f 93       	push	r16
	if( sendSQDisplayCommand(LED_t, LED_o, LED_P, LED_BLANK, LED_BLANK,LED_BLANK, 5) )
    1ad2:	85 e0       	ldi	r24, 0x05	; 5
    1ad4:	c8 2e       	mov	r12, r24
    1ad6:	e1 2c       	mov	r14, r1
    1ad8:	00 e0       	ldi	r16, 0x00	; 0
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	43 e7       	ldi	r20, 0x73	; 115
    1ade:	6c e5       	ldi	r22, 0x5C	; 92
    1ae0:	88 e7       	ldi	r24, 0x78	; 120
    1ae2:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <sendSQDisplayCommand>
    1ae6:	88 23       	and	r24, r24
    1ae8:	49 f0       	breq	.+18     	; 0x1afc <displaySQTopOffvend+0x30>
    1aea:	2f ef       	ldi	r18, 0xFF	; 255
    1aec:	37 ea       	ldi	r19, 0xA7	; 167
    1aee:	91 e6       	ldi	r25, 0x61	; 97
    1af0:	21 50       	subi	r18, 0x01	; 1
    1af2:	30 40       	sbci	r19, 0x00	; 0
    1af4:	90 40       	sbci	r25, 0x00	; 0
    1af6:	e1 f7       	brne	.-8      	; 0x1af0 <displaySQTopOffvend+0x24>
    1af8:	00 c0       	rjmp	.+0      	; 0x1afa <displaySQTopOffvend+0x2e>
    1afa:	00 00       	nop
	{
		_delay_ms(2000);
		return true;
	}
	return false;
}
    1afc:	0f 91       	pop	r16
    1afe:	ef 90       	pop	r14
    1b00:	cf 90       	pop	r12
    1b02:	08 95       	ret

00001b04 <displaySQCardError>:

/** @brief Payment System Display Request. 
   
 */
bool displaySQCardError(void)
{
    1b04:	cf 92       	push	r12
    1b06:	ef 92       	push	r14
    1b08:	0f 93       	push	r16
    1b0a:	cf 93       	push	r28
	if( sendSQDisplayCommand(LED_C,LED_A,LED_r,LED_d,LED_BLANK,LED_BLANK,4) )
    1b0c:	94 e0       	ldi	r25, 0x04	; 4
    1b0e:	c9 2e       	mov	r12, r25
    1b10:	e1 2c       	mov	r14, r1
    1b12:	00 e0       	ldi	r16, 0x00	; 0
    1b14:	2e e5       	ldi	r18, 0x5E	; 94
    1b16:	40 e5       	ldi	r20, 0x50	; 80
    1b18:	67 e7       	ldi	r22, 0x77	; 119
    1b1a:	89 e3       	ldi	r24, 0x39	; 57
    1b1c:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <sendSQDisplayCommand>
    1b20:	c8 2f       	mov	r28, r24
    1b22:	81 11       	cpse	r24, r1
    1b24:	06 c0       	rjmp	.+12     	; 0x1b32 <displaySQCardError+0x2e>
		_delay_ms(2000);

		return true;
	}
	return false;
}
    1b26:	8c 2f       	mov	r24, r28
    1b28:	cf 91       	pop	r28
    1b2a:	0f 91       	pop	r16
    1b2c:	ef 90       	pop	r14
    1b2e:	cf 90       	pop	r12
    1b30:	08 95       	ret
    1b32:	2f ef       	ldi	r18, 0xFF	; 255
    1b34:	37 ea       	ldi	r19, 0xA7	; 167
    1b36:	81 e6       	ldi	r24, 0x61	; 97
    1b38:	21 50       	subi	r18, 0x01	; 1
    1b3a:	30 40       	sbci	r19, 0x00	; 0
    1b3c:	80 40       	sbci	r24, 0x00	; 0
    1b3e:	e1 f7       	brne	.-8      	; 0x1b38 <displaySQCardError+0x34>
    1b40:	00 c0       	rjmp	.+0      	; 0x1b42 <displaySQCardError+0x3e>
    1b42:	00 00       	nop
bool displaySQCardError(void)
{
	if( sendSQDisplayCommand(LED_C,LED_A,LED_r,LED_d,LED_BLANK,LED_BLANK,4) )
	{
		_delay_ms(2000);
		if( sendSQDisplayCommand(LED_E, LED_r,LED_r,LED_BLANK,LED_BLANK,LED_BLANK,3) )
    1b44:	83 e0       	ldi	r24, 0x03	; 3
    1b46:	c8 2e       	mov	r12, r24
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	40 e5       	ldi	r20, 0x50	; 80
    1b4c:	60 e5       	ldi	r22, 0x50	; 80
    1b4e:	89 e7       	ldi	r24, 0x79	; 121
    1b50:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <sendSQDisplayCommand>
    1b54:	88 23       	and	r24, r24
    1b56:	39 f3       	breq	.-50     	; 0x1b26 <displaySQCardError+0x22>
    1b58:	9f ef       	ldi	r25, 0xFF	; 255
    1b5a:	27 ea       	ldi	r18, 0xA7	; 167
    1b5c:	31 e6       	ldi	r19, 0x61	; 97
    1b5e:	91 50       	subi	r25, 0x01	; 1
    1b60:	20 40       	sbci	r18, 0x00	; 0
    1b62:	30 40       	sbci	r19, 0x00	; 0
    1b64:	e1 f7       	brne	.-8      	; 0x1b5e <displaySQCardError+0x5a>
    1b66:	00 c0       	rjmp	.+0      	; 0x1b68 <displaySQCardError+0x64>
    1b68:	00 00       	nop
    1b6a:	c8 2f       	mov	r28, r24
		_delay_ms(2000);

		return true;
	}
	return false;
}
    1b6c:	8c 2f       	mov	r24, r28
    1b6e:	cf 91       	pop	r28
    1b70:	0f 91       	pop	r16
    1b72:	ef 90       	pop	r14
    1b74:	cf 90       	pop	r12
    1b76:	08 95       	ret

00001b78 <displayMsg>:
Description: This function will be used to send text to the ACA 6 position 7 segment display.
Led1 to led6 are limited to values defined in "display.h"
***********************************************************************************************
*/
void displayMsg(u8 msg) 
{
    1b78:	cf 92       	push	r12
    1b7a:	ef 92       	push	r14
    1b7c:	0f 93       	push	r16
	if (msg == CARD_ERR_MSG)
    1b7e:	81 30       	cpi	r24, 0x01	; 1
    1b80:	e1 f0       	breq	.+56     	; 0x1bba <displayMsg+0x42>
	{
		displaySQCardError();
	}
	else if (msg == SETUP_MSG)		//no communication with the BOW
    1b82:	82 30       	cpi	r24, 0x02	; 2
    1b84:	f9 f0       	breq	.+62     	; 0x1bc4 <displayMsg+0x4c>
	{
		sendSQDisplayCommand(LED_n,LED_o,LED_S,LED_U,LED_BLANK,LED_BLANK,5);
	}
	else if (msg == BUSY_MSG)
    1b86:	84 30       	cpi	r24, 0x04	; 4
    1b88:	41 f1       	breq	.+80     	; 0x1bda <displayMsg+0x62>
	{
		sendSQDisplayCommand(LED_b,LED_U,LED_S,LED_Y,LED_BLANK,LED_BLANK,5);
	}
	else if (msg == SERVICE_MSG)
    1b8a:	83 30       	cpi	r24, 0x03	; 3
    1b8c:	89 f1       	breq	.+98     	; 0x1bf0 <displayMsg+0x78>
	{
		sendSQDisplayCommand(LED_S,LED_E,LED_r,LED_BLANK,LED_BLANK,LED_BLANK,5);
	}
	else if (msg == BLANK_MSG)
    1b8e:	85 30       	cpi	r24, 0x05	; 5
    1b90:	d1 f1       	breq	.+116    	; 0x1c06 <displayMsg+0x8e>
	{
		sendSQDisplayCommand(LED_BLANK,LED_BLANK,LED_BLANK,LED_BLANK,LED_BLANK,LED_BLANK,0);
	}
	else if (msg == CABLE_MSG)		//PPOS Test message
    1b92:	86 30       	cpi	r24, 0x06	; 6
    1b94:	21 f0       	breq	.+8      	; 0x1b9e <displayMsg+0x26>
	{
		sendSQDisplayCommand(LED_C,LED_A,LED_b,LED_L,LED_E,LED_BLANK,5);
	}	

}
    1b96:	0f 91       	pop	r16
    1b98:	ef 90       	pop	r14
    1b9a:	cf 90       	pop	r12
    1b9c:	08 95       	ret
	{
		sendSQDisplayCommand(LED_BLANK,LED_BLANK,LED_BLANK,LED_BLANK,LED_BLANK,LED_BLANK,0);
	}
	else if (msg == CABLE_MSG)		//PPOS Test message
	{
		sendSQDisplayCommand(LED_C,LED_A,LED_b,LED_L,LED_E,LED_BLANK,5);
    1b9e:	85 e0       	ldi	r24, 0x05	; 5
    1ba0:	c8 2e       	mov	r12, r24
    1ba2:	e1 2c       	mov	r14, r1
    1ba4:	09 e7       	ldi	r16, 0x79	; 121
    1ba6:	28 e3       	ldi	r18, 0x38	; 56
    1ba8:	4c e7       	ldi	r20, 0x7C	; 124
    1baa:	67 e7       	ldi	r22, 0x77	; 119
    1bac:	89 e3       	ldi	r24, 0x39	; 57
    1bae:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <sendSQDisplayCommand>
	}	

}
    1bb2:	0f 91       	pop	r16
    1bb4:	ef 90       	pop	r14
    1bb6:	cf 90       	pop	r12
    1bb8:	08 95       	ret
    1bba:	0f 91       	pop	r16
    1bbc:	ef 90       	pop	r14
    1bbe:	cf 90       	pop	r12
*/
void displayMsg(u8 msg) 
{
	if (msg == CARD_ERR_MSG)
	{
		displaySQCardError();
    1bc0:	0c 94 82 0d 	jmp	0x1b04	; 0x1b04 <displaySQCardError>
	}
	else if (msg == SETUP_MSG)		//no communication with the BOW
	{
		sendSQDisplayCommand(LED_n,LED_o,LED_S,LED_U,LED_BLANK,LED_BLANK,5);
    1bc4:	35 e0       	ldi	r19, 0x05	; 5
    1bc6:	c3 2e       	mov	r12, r19
    1bc8:	e1 2c       	mov	r14, r1
    1bca:	00 e0       	ldi	r16, 0x00	; 0
    1bcc:	2e e3       	ldi	r18, 0x3E	; 62
    1bce:	4d e6       	ldi	r20, 0x6D	; 109
    1bd0:	6c e5       	ldi	r22, 0x5C	; 92
    1bd2:	84 e5       	ldi	r24, 0x54	; 84
    1bd4:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <sendSQDisplayCommand>
    1bd8:	de cf       	rjmp	.-68     	; 0x1b96 <displayMsg+0x1e>
	}
	else if (msg == BUSY_MSG)
	{
		sendSQDisplayCommand(LED_b,LED_U,LED_S,LED_Y,LED_BLANK,LED_BLANK,5);
    1bda:	25 e0       	ldi	r18, 0x05	; 5
    1bdc:	c2 2e       	mov	r12, r18
    1bde:	e1 2c       	mov	r14, r1
    1be0:	00 e0       	ldi	r16, 0x00	; 0
    1be2:	2e e6       	ldi	r18, 0x6E	; 110
    1be4:	4d e6       	ldi	r20, 0x6D	; 109
    1be6:	6e e3       	ldi	r22, 0x3E	; 62
    1be8:	8c e7       	ldi	r24, 0x7C	; 124
    1bea:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <sendSQDisplayCommand>
    1bee:	d3 cf       	rjmp	.-90     	; 0x1b96 <displayMsg+0x1e>
	}
	else if (msg == SERVICE_MSG)
	{
		sendSQDisplayCommand(LED_S,LED_E,LED_r,LED_BLANK,LED_BLANK,LED_BLANK,5);
    1bf0:	95 e0       	ldi	r25, 0x05	; 5
    1bf2:	c9 2e       	mov	r12, r25
    1bf4:	e1 2c       	mov	r14, r1
    1bf6:	00 e0       	ldi	r16, 0x00	; 0
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	40 e5       	ldi	r20, 0x50	; 80
    1bfc:	69 e7       	ldi	r22, 0x79	; 121
    1bfe:	8d e6       	ldi	r24, 0x6D	; 109
    1c00:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <sendSQDisplayCommand>
    1c04:	c8 cf       	rjmp	.-112    	; 0x1b96 <displayMsg+0x1e>
	}
	else if (msg == BLANK_MSG)
	{
		sendSQDisplayCommand(LED_BLANK,LED_BLANK,LED_BLANK,LED_BLANK,LED_BLANK,LED_BLANK,0);
    1c06:	c1 2c       	mov	r12, r1
    1c08:	e1 2c       	mov	r14, r1
    1c0a:	00 e0       	ldi	r16, 0x00	; 0
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	40 e0       	ldi	r20, 0x00	; 0
    1c10:	60 e0       	ldi	r22, 0x00	; 0
    1c12:	80 e0       	ldi	r24, 0x00	; 0
    1c14:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <sendSQDisplayCommand>
    1c18:	be cf       	rjmp	.-132    	; 0x1b96 <displayMsg+0x1e>

00001c1a <getSQSetupData>:
	temp[0] = AUDIO_BEEP_REQUEST_SIZE;
	temp[1] = AUDIO_BEEP_REQUEST;
	temp[2] = beepLength;

	return ( sendSQDataPacket(temp) );
}
    1c1a:	1f 93       	push	r17
    1c1c:	cf 93       	push	r28
    1c1e:	df 93       	push	r29
    1c20:	cd b7       	in	r28, 0x3d	; 61
    1c22:	de b7       	in	r29, 0x3e	; 62
    1c24:	ec 97       	sbiw	r28, 0x3c	; 60
    1c26:	0f b6       	in	r0, 0x3f	; 63
    1c28:	f8 94       	cli
    1c2a:	de bf       	out	0x3e, r29	; 62
    1c2c:	0f be       	out	0x3f, r0	; 63
    1c2e:	cd bf       	out	0x3d, r28	; 61
    1c30:	ae 01       	movw	r20, r28
    1c32:	4f 5f       	subi	r20, 0xFF	; 255
    1c34:	5f 4f       	sbci	r21, 0xFF	; 255
    1c36:	8c e3       	ldi	r24, 0x3C	; 60
    1c38:	fa 01       	movw	r30, r20
    1c3a:	11 92       	st	Z+, r1
    1c3c:	8a 95       	dec	r24
    1c3e:	e9 f7       	brne	.-6      	; 0x1c3a <getSQSetupData+0x20>
    1c40:	80 91 f1 0a 	lds	r24, 0x0AF1	; 0x800af1 <deviceStatus>
    1c44:	82 32       	cpi	r24, 0x22	; 34
    1c46:	09 f4       	brne	.+2      	; 0x1c4a <getSQSetupData+0x30>
    1c48:	fc c0       	rjmp	.+504    	; 0x1e42 <getSQSetupData+0x228>
    1c4a:	89 32       	cpi	r24, 0x29	; 41
    1c4c:	09 f4       	brne	.+2      	; 0x1c50 <getSQSetupData+0x36>
    1c4e:	97 c0       	rjmp	.+302    	; 0x1d7e <getSQSetupData+0x164>
    1c50:	81 32       	cpi	r24, 0x21	; 33
    1c52:	51 f0       	breq	.+20     	; 0x1c68 <getSQSetupData+0x4e>
    1c54:	ec 96       	adiw	r28, 0x3c	; 60
    1c56:	0f b6       	in	r0, 0x3f	; 63
    1c58:	f8 94       	cli
    1c5a:	de bf       	out	0x3e, r29	; 62
    1c5c:	0f be       	out	0x3f, r0	; 63
    1c5e:	cd bf       	out	0x3d, r28	; 61
    1c60:	df 91       	pop	r29
    1c62:	cf 91       	pop	r28
    1c64:	1f 91       	pop	r17
    1c66:	08 95       	ret
    1c68:	65 e1       	ldi	r22, 0x15	; 21
    1c6a:	84 e2       	ldi	r24, 0x24	; 36
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	0e 94 a4 20 	call	0x4148	; 0x4148 <halGetEeprom>
    1c72:	1a 85       	ldd	r17, Y+10	; 0x0a
    1c74:	61 2f       	mov	r22, r17
    1c76:	70 e0       	ldi	r23, 0x00	; 0
    1c78:	76 2f       	mov	r23, r22
    1c7a:	66 27       	eor	r22, r22
    1c7c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c7e:	68 0f       	add	r22, r24
    1c80:	71 1d       	adc	r23, r1
    1c82:	07 2e       	mov	r0, r23
    1c84:	00 0c       	add	r0, r0
    1c86:	88 0b       	sbc	r24, r24
    1c88:	99 0b       	sbc	r25, r25
    1c8a:	0e 94 55 2f 	call	0x5eaa	; 0x5eaa <__floatsisf>
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	48 ec       	ldi	r20, 0xC8	; 200
    1c94:	52 e4       	ldi	r21, 0x42	; 66
    1c96:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__divsf3>
    1c9a:	60 93 16 0b 	sts	0x0B16, r22	; 0x800b16 <vendPrice>
    1c9e:	70 93 17 0b 	sts	0x0B17, r23	; 0x800b17 <vendPrice+0x1>
    1ca2:	80 93 18 0b 	sts	0x0B18, r24	; 0x800b18 <vendPrice+0x2>
    1ca6:	90 93 19 0b 	sts	0x0B19, r25	; 0x800b19 <vendPrice+0x3>
    1caa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cac:	80 93 cd 08 	sts	0x08CD, r24	; 0x8008cd <SQACAToploadProgramming+0x5>
    1cb0:	10 92 ce 08 	sts	0x08CE, r1	; 0x8008ce <SQACAToploadProgramming+0x6>
    1cb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb6:	80 93 cf 08 	sts	0x08CF, r24	; 0x8008cf <SQACAToploadProgramming+0x7>
    1cba:	10 92 d0 08 	sts	0x08D0, r1	; 0x8008d0 <SQACAToploadProgramming+0x8>
    1cbe:	8e 81       	ldd	r24, Y+6	; 0x06
    1cc0:	80 93 d1 08 	sts	0x08D1, r24	; 0x8008d1 <SQACAToploadProgramming+0x9>
    1cc4:	10 92 d2 08 	sts	0x08D2, r1	; 0x8008d2 <SQACAToploadProgramming+0xa>
    1cc8:	88 85       	ldd	r24, Y+8	; 0x08
    1cca:	80 93 d3 08 	sts	0x08D3, r24	; 0x8008d3 <SQACAToploadProgramming+0xb>
    1cce:	10 92 d4 08 	sts	0x08D4, r1	; 0x8008d4 <SQACAToploadProgramming+0xc>
    1cd2:	10 93 d5 08 	sts	0x08D5, r17	; 0x8008d5 <SQACAToploadProgramming+0xd>
    1cd6:	10 92 d6 08 	sts	0x08D6, r1	; 0x8008d6 <SQACAToploadProgramming+0xe>
    1cda:	8c 85       	ldd	r24, Y+12	; 0x0c
    1cdc:	80 93 d7 08 	sts	0x08D7, r24	; 0x8008d7 <SQACAToploadProgramming+0xf>
    1ce0:	10 92 d8 08 	sts	0x08D8, r1	; 0x8008d8 <SQACAToploadProgramming+0x10>
    1ce4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ce6:	80 93 d9 08 	sts	0x08D9, r24	; 0x8008d9 <SQACAToploadProgramming+0x11>
    1cea:	10 92 da 08 	sts	0x08DA, r1	; 0x8008da <SQACAToploadProgramming+0x12>
    1cee:	88 89       	ldd	r24, Y+16	; 0x10
    1cf0:	80 93 db 08 	sts	0x08DB, r24	; 0x8008db <SQACAToploadProgramming+0x13>
    1cf4:	10 92 dc 08 	sts	0x08DC, r1	; 0x8008dc <SQACAToploadProgramming+0x14>
    1cf8:	8a 89       	ldd	r24, Y+18	; 0x12
    1cfa:	80 93 dd 08 	sts	0x08DD, r24	; 0x8008dd <SQACAToploadProgramming+0x15>
    1cfe:	10 92 de 08 	sts	0x08DE, r1	; 0x8008de <SQACAToploadProgramming+0x16>
    1d02:	8c 89       	ldd	r24, Y+20	; 0x14
    1d04:	80 93 df 08 	sts	0x08DF, r24	; 0x8008df <SQACAToploadProgramming+0x17>
    1d08:	10 92 e0 08 	sts	0x08E0, r1	; 0x8008e0 <SQACAToploadProgramming+0x18>
    1d0c:	82 e3       	ldi	r24, 0x32	; 50
    1d0e:	80 93 e1 08 	sts	0x08E1, r24	; 0x8008e1 <SQACAToploadProgramming+0x19>
    1d12:	10 92 e2 08 	sts	0x08E2, r1	; 0x8008e2 <SQACAToploadProgramming+0x1a>
    1d16:	10 92 e3 08 	sts	0x08E3, r1	; 0x8008e3 <SQACAToploadProgramming+0x1b>
    1d1a:	10 92 e4 08 	sts	0x08E4, r1	; 0x8008e4 <SQACAToploadProgramming+0x1c>
    1d1e:	10 92 e5 08 	sts	0x08E5, r1	; 0x8008e5 <SQACAToploadProgramming+0x1d>
    1d22:	10 92 e6 08 	sts	0x08E6, r1	; 0x8008e6 <SQACAToploadProgramming+0x1e>
    1d26:	10 92 e7 08 	sts	0x08E7, r1	; 0x8008e7 <SQACAToploadProgramming+0x1f>
    1d2a:	10 92 e8 08 	sts	0x08E8, r1	; 0x8008e8 <SQACAToploadProgramming+0x20>
    1d2e:	9a e0       	ldi	r25, 0x0A	; 10
    1d30:	90 93 e9 08 	sts	0x08E9, r25	; 0x8008e9 <SQACAToploadProgramming+0x21>
    1d34:	84 e0       	ldi	r24, 0x04	; 4
    1d36:	80 93 ea 08 	sts	0x08EA, r24	; 0x8008ea <SQACAToploadProgramming+0x22>
    1d3a:	10 92 eb 08 	sts	0x08EB, r1	; 0x8008eb <SQACAToploadProgramming+0x23>
    1d3e:	27 e0       	ldi	r18, 0x07	; 7
    1d40:	20 93 ec 08 	sts	0x08EC, r18	; 0x8008ec <SQACAToploadProgramming+0x24>
    1d44:	90 93 ed 08 	sts	0x08ED, r25	; 0x8008ed <SQACAToploadProgramming+0x25>
    1d48:	80 93 ef 08 	sts	0x08EF, r24	; 0x8008ef <SQACAToploadProgramming+0x27>
    1d4c:	10 92 ee 08 	sts	0x08EE, r1	; 0x8008ee <SQACAToploadProgramming+0x26>
    1d50:	26 e0       	ldi	r18, 0x06	; 6
    1d52:	20 93 f0 08 	sts	0x08F0, r18	; 0x8008f0 <SQACAToploadProgramming+0x28>
    1d56:	90 93 f1 08 	sts	0x08F1, r25	; 0x8008f1 <SQACAToploadProgramming+0x29>
    1d5a:	80 93 f2 08 	sts	0x08F2, r24	; 0x8008f2 <SQACAToploadProgramming+0x2a>
    1d5e:	10 92 f3 08 	sts	0x08F3, r1	; 0x8008f3 <SQACAToploadProgramming+0x2b>
    1d62:	85 e0       	ldi	r24, 0x05	; 5
    1d64:	80 93 f4 08 	sts	0x08F4, r24	; 0x8008f4 <SQACAToploadProgramming+0x2c>
    1d68:	80 93 f5 08 	sts	0x08F5, r24	; 0x8008f5 <SQACAToploadProgramming+0x2d>
    1d6c:	10 92 f6 08 	sts	0x08F6, r1	; 0x8008f6 <SQACAToploadProgramming+0x2e>
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	80 93 f7 08 	sts	0x08F7, r24	; 0x8008f7 <SQACAToploadProgramming+0x2f>
    1d76:	8d e1       	ldi	r24, 0x1D	; 29
    1d78:	80 93 f8 08 	sts	0x08F8, r24	; 0x8008f8 <SQACAToploadProgramming+0x30>
    1d7c:	6b cf       	rjmp	.-298    	; 0x1c54 <getSQSetupData+0x3a>
    1d7e:	61 e1       	ldi	r22, 0x11	; 17
    1d80:	84 e2       	ldi	r24, 0x24	; 36
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	0e 94 a4 20 	call	0x4148	; 0x4148 <halGetEeprom>
    1d88:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8a:	80 93 09 0a 	sts	0x0A09, r24	; 0x800a09 <SQACADryerProgramming+0x5>
    1d8e:	10 92 0a 0a 	sts	0x0A0A, r1	; 0x800a0a <SQACADryerProgramming+0x6>
    1d92:	8c 81       	ldd	r24, Y+4	; 0x04
    1d94:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <SQACADryerProgramming+0x7>
    1d98:	10 92 0c 0a 	sts	0x0A0C, r1	; 0x800a0c <SQACADryerProgramming+0x8>
    1d9c:	8e 81       	ldd	r24, Y+6	; 0x06
    1d9e:	80 93 0d 0a 	sts	0x0A0D, r24	; 0x800a0d <SQACADryerProgramming+0x9>
    1da2:	10 92 0e 0a 	sts	0x0A0E, r1	; 0x800a0e <SQACADryerProgramming+0xa>
    1da6:	88 85       	ldd	r24, Y+8	; 0x08
    1da8:	80 93 0f 0a 	sts	0x0A0F, r24	; 0x800a0f <SQACADryerProgramming+0xb>
    1dac:	10 92 10 0a 	sts	0x0A10, r1	; 0x800a10 <SQACADryerProgramming+0xc>
    1db0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1db2:	80 93 11 0a 	sts	0x0A11, r24	; 0x800a11 <SQACADryerProgramming+0xd>
    1db6:	10 92 12 0a 	sts	0x0A12, r1	; 0x800a12 <SQACADryerProgramming+0xe>
    1dba:	88 89       	ldd	r24, Y+16	; 0x10
    1dbc:	80 93 13 0a 	sts	0x0A13, r24	; 0x800a13 <SQACADryerProgramming+0xf>
    1dc0:	8c 85       	ldd	r24, Y+12	; 0x0c
    1dc2:	80 93 14 0a 	sts	0x0A14, r24	; 0x800a14 <SQACADryerProgramming+0x10>
    1dc6:	10 92 15 0a 	sts	0x0A15, r1	; 0x800a15 <SQACADryerProgramming+0x11>
    1dca:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dcc:	80 93 16 0a 	sts	0x0A16, r24	; 0x800a16 <SQACADryerProgramming+0x12>
    1dd0:	86 e2       	ldi	r24, 0x26	; 38
    1dd2:	80 93 17 0a 	sts	0x0A17, r24	; 0x800a17 <SQACADryerProgramming+0x13>
    1dd6:	95 e0       	ldi	r25, 0x05	; 5
    1dd8:	90 93 18 0a 	sts	0x0A18, r25	; 0x800a18 <SQACADryerProgramming+0x14>
    1ddc:	80 93 19 0a 	sts	0x0A19, r24	; 0x800a19 <SQACADryerProgramming+0x15>
    1de0:	86 e1       	ldi	r24, 0x16	; 22
    1de2:	80 93 1a 0a 	sts	0x0A1A, r24	; 0x800a1a <SQACADryerProgramming+0x16>
    1de6:	8e e1       	ldi	r24, 0x1E	; 30
    1de8:	80 93 1b 0a 	sts	0x0A1B, r24	; 0x800a1b <SQACADryerProgramming+0x17>
    1dec:	8d e2       	ldi	r24, 0x2D	; 45
    1dee:	80 93 1c 0a 	sts	0x0A1C, r24	; 0x800a1c <SQACADryerProgramming+0x18>
    1df2:	10 92 1d 0a 	sts	0x0A1D, r1	; 0x800a1d <SQACADryerProgramming+0x19>
    1df6:	80 93 1e 0a 	sts	0x0A1E, r24	; 0x800a1e <SQACADryerProgramming+0x1a>
    1dfa:	10 92 1f 0a 	sts	0x0A1F, r1	; 0x800a1f <SQACADryerProgramming+0x1b>
    1dfe:	83 e0       	ldi	r24, 0x03	; 3
    1e00:	80 93 20 0a 	sts	0x0A20, r24	; 0x800a20 <SQACADryerProgramming+0x1c>
    1e04:	80 93 21 0a 	sts	0x0A21, r24	; 0x800a21 <SQACADryerProgramming+0x1d>
    1e08:	80 93 22 0a 	sts	0x0A22, r24	; 0x800a22 <SQACADryerProgramming+0x1e>
    1e0c:	80 93 23 0a 	sts	0x0A23, r24	; 0x800a23 <SQACADryerProgramming+0x1f>
    1e10:	80 ea       	ldi	r24, 0xA0	; 160
    1e12:	80 93 24 0a 	sts	0x0A24, r24	; 0x800a24 <SQACADryerProgramming+0x20>
    1e16:	8b e9       	ldi	r24, 0x9B	; 155
    1e18:	80 93 25 0a 	sts	0x0A25, r24	; 0x800a25 <SQACADryerProgramming+0x21>
    1e1c:	83 e7       	ldi	r24, 0x73	; 115
    1e1e:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <SQACADryerProgramming+0x23>
    1e22:	84 e0       	ldi	r24, 0x04	; 4
    1e24:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <SQACADryerProgramming+0x24>
    1e28:	8d e1       	ldi	r24, 0x1D	; 29
    1e2a:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <SQACADryerProgramming+0x25>
    1e2e:	10 92 2a 0a 	sts	0x0A2A, r1	; 0x800a2a <SQACADryerProgramming+0x26>
    1e32:	10 92 2b 0a 	sts	0x0A2B, r1	; 0x800a2b <SQACADryerProgramming+0x27>
    1e36:	10 92 2c 0a 	sts	0x0A2C, r1	; 0x800a2c <SQACADryerProgramming+0x28>
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	80 93 2d 0a 	sts	0x0A2D, r24	; 0x800a2d <SQACADryerProgramming+0x29>
    1e40:	09 cf       	rjmp	.-494    	; 0x1c54 <getSQSetupData+0x3a>
    1e42:	60 e1       	ldi	r22, 0x10	; 16
    1e44:	84 e2       	ldi	r24, 0x24	; 36
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	0e 94 a4 20 	call	0x4148	; 0x4148 <halGetEeprom>
    1e4c:	1a 85       	ldd	r17, Y+10	; 0x0a
    1e4e:	61 2f       	mov	r22, r17
    1e50:	70 e0       	ldi	r23, 0x00	; 0
    1e52:	76 2f       	mov	r23, r22
    1e54:	66 27       	eor	r22, r22
    1e56:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e58:	68 0f       	add	r22, r24
    1e5a:	71 1d       	adc	r23, r1
    1e5c:	07 2e       	mov	r0, r23
    1e5e:	00 0c       	add	r0, r0
    1e60:	88 0b       	sbc	r24, r24
    1e62:	99 0b       	sbc	r25, r25
    1e64:	0e 94 55 2f 	call	0x5eaa	; 0x5eaa <__floatsisf>
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	48 ec       	ldi	r20, 0xC8	; 200
    1e6e:	52 e4       	ldi	r21, 0x42	; 66
    1e70:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__divsf3>
    1e74:	60 93 16 0b 	sts	0x0B16, r22	; 0x800b16 <vendPrice>
    1e78:	70 93 17 0b 	sts	0x0B17, r23	; 0x800b17 <vendPrice+0x1>
    1e7c:	80 93 18 0b 	sts	0x0B18, r24	; 0x800b18 <vendPrice+0x2>
    1e80:	90 93 19 0b 	sts	0x0B19, r25	; 0x800b19 <vendPrice+0x3>
    1e84:	8a 81       	ldd	r24, Y+2	; 0x02
    1e86:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <SQACAFrontloadProgramming+0x5>
    1e8a:	10 92 a8 08 	sts	0x08A8, r1	; 0x8008a8 <SQACAFrontloadProgramming+0x6>
    1e8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e90:	80 93 a9 08 	sts	0x08A9, r24	; 0x8008a9 <SQACAFrontloadProgramming+0x7>
    1e94:	10 92 aa 08 	sts	0x08AA, r1	; 0x8008aa <SQACAFrontloadProgramming+0x8>
    1e98:	8e 81       	ldd	r24, Y+6	; 0x06
    1e9a:	80 93 ab 08 	sts	0x08AB, r24	; 0x8008ab <SQACAFrontloadProgramming+0x9>
    1e9e:	10 92 ac 08 	sts	0x08AC, r1	; 0x8008ac <SQACAFrontloadProgramming+0xa>
    1ea2:	88 85       	ldd	r24, Y+8	; 0x08
    1ea4:	80 93 ad 08 	sts	0x08AD, r24	; 0x8008ad <SQACAFrontloadProgramming+0xb>
    1ea8:	10 92 ae 08 	sts	0x08AE, r1	; 0x8008ae <SQACAFrontloadProgramming+0xc>
    1eac:	10 93 af 08 	sts	0x08AF, r17	; 0x8008af <SQACAFrontloadProgramming+0xd>
    1eb0:	10 92 b0 08 	sts	0x08B0, r1	; 0x8008b0 <SQACAFrontloadProgramming+0xe>
    1eb4:	8c 85       	ldd	r24, Y+12	; 0x0c
    1eb6:	80 93 b1 08 	sts	0x08B1, r24	; 0x8008b1 <SQACAFrontloadProgramming+0xf>
    1eba:	10 92 b2 08 	sts	0x08B2, r1	; 0x8008b2 <SQACAFrontloadProgramming+0x10>
    1ebe:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ec0:	80 93 b3 08 	sts	0x08B3, r24	; 0x8008b3 <SQACAFrontloadProgramming+0x11>
    1ec4:	10 92 b4 08 	sts	0x08B4, r1	; 0x8008b4 <SQACAFrontloadProgramming+0x12>
    1ec8:	88 89       	ldd	r24, Y+16	; 0x10
    1eca:	80 93 b5 08 	sts	0x08B5, r24	; 0x8008b5 <SQACAFrontloadProgramming+0x13>
    1ece:	10 92 b6 08 	sts	0x08B6, r1	; 0x8008b6 <SQACAFrontloadProgramming+0x14>
    1ed2:	8a 89       	ldd	r24, Y+18	; 0x12
    1ed4:	80 93 b7 08 	sts	0x08B7, r24	; 0x8008b7 <SQACAFrontloadProgramming+0x15>
    1ed8:	10 92 b8 08 	sts	0x08B8, r1	; 0x8008b8 <SQACAFrontloadProgramming+0x16>
    1edc:	8c 89       	ldd	r24, Y+20	; 0x14
    1ede:	80 93 b9 08 	sts	0x08B9, r24	; 0x8008b9 <SQACAFrontloadProgramming+0x17>
    1ee2:	10 92 ba 08 	sts	0x08BA, r1	; 0x8008ba <SQACAFrontloadProgramming+0x18>
    1ee6:	82 e3       	ldi	r24, 0x32	; 50
    1ee8:	80 93 bb 08 	sts	0x08BB, r24	; 0x8008bb <SQACAFrontloadProgramming+0x19>
    1eec:	10 92 bc 08 	sts	0x08BC, r1	; 0x8008bc <SQACAFrontloadProgramming+0x1a>
    1ef0:	82 e0       	ldi	r24, 0x02	; 2
    1ef2:	80 93 bd 08 	sts	0x08BD, r24	; 0x8008bd <SQACAFrontloadProgramming+0x1b>
    1ef6:	93 e0       	ldi	r25, 0x03	; 3
    1ef8:	90 93 be 08 	sts	0x08BE, r25	; 0x8008be <SQACAFrontloadProgramming+0x1c>
    1efc:	80 93 bf 08 	sts	0x08BF, r24	; 0x8008bf <SQACAFrontloadProgramming+0x1d>
    1f00:	91 e0       	ldi	r25, 0x01	; 1
    1f02:	90 93 c0 08 	sts	0x08C0, r25	; 0x8008c0 <SQACAFrontloadProgramming+0x1e>
    1f06:	94 e0       	ldi	r25, 0x04	; 4
    1f08:	90 93 c1 08 	sts	0x08C1, r25	; 0x8008c1 <SQACAFrontloadProgramming+0x1f>
    1f0c:	80 93 c2 08 	sts	0x08C2, r24	; 0x8008c2 <SQACAFrontloadProgramming+0x20>
    1f10:	10 92 c4 08 	sts	0x08C4, r1	; 0x8008c4 <SQACAFrontloadProgramming+0x22>
    1f14:	8d e1       	ldi	r24, 0x1D	; 29
    1f16:	80 93 c5 08 	sts	0x08C5, r24	; 0x8008c5 <SQACAFrontloadProgramming+0x23>
    1f1a:	9c ce       	rjmp	.-712    	; 0x1c54 <getSQSetupData+0x3a>

00001f1c <sendSQDataPacket>:
    1f1c:	af 92       	push	r10
    1f1e:	bf 92       	push	r11
    1f20:	cf 92       	push	r12
    1f22:	df 92       	push	r13
    1f24:	ef 92       	push	r14
    1f26:	ff 92       	push	r15
    1f28:	0f 93       	push	r16
    1f2a:	1f 93       	push	r17
    1f2c:	cf 93       	push	r28
    1f2e:	df 93       	push	r29
    1f30:	5c 01       	movw	r10, r24
    1f32:	08 e0       	ldi	r16, 0x08	; 8
    1f34:	0e 94 3e 29 	call	0x527c	; 0x527c <init_rx_buf>
    1f38:	f5 01       	movw	r30, r10
    1f3a:	10 81       	ld	r17, Z
    1f3c:	82 e0       	ldi	r24, 0x02	; 2
    1f3e:	0e 94 5b 29 	call	0x52b6	; 0x52b6 <serial_putchar>
    1f42:	1f 3f       	cpi	r17, 0xFF	; 255
    1f44:	09 f4       	brne	.+2      	; 0x1f48 <sendSQDataPacket+0x2c>
    1f46:	4c c0       	rjmp	.+152    	; 0x1fe0 <sendSQDataPacket+0xc4>
    1f48:	e5 01       	movw	r28, r10
    1f4a:	c1 2e       	mov	r12, r17
    1f4c:	d1 2c       	mov	r13, r1
    1f4e:	ff ef       	ldi	r31, 0xFF	; 255
    1f50:	cf 1a       	sub	r12, r31
    1f52:	df 0a       	sbc	r13, r31
    1f54:	ca 0c       	add	r12, r10
    1f56:	db 1c       	adc	r13, r11
    1f58:	12 e0       	ldi	r17, 0x02	; 2
    1f5a:	7e 01       	movw	r14, r28
    1f5c:	89 91       	ld	r24, Y+
    1f5e:	0e 94 5b 29 	call	0x52b6	; 0x52b6 <serial_putchar>
    1f62:	f7 01       	movw	r30, r14
    1f64:	90 81       	ld	r25, Z
    1f66:	19 27       	eor	r17, r25
    1f68:	cc 15       	cp	r28, r12
    1f6a:	dd 05       	cpc	r29, r13
    1f6c:	b1 f7       	brne	.-20     	; 0x1f5a <sendSQDataPacket+0x3e>
    1f6e:	81 2f       	mov	r24, r17
    1f70:	0e 94 5b 29 	call	0x52b6	; 0x52b6 <serial_putchar>
    1f74:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <ucTimerCount>
    1f78:	78 94       	sei
    1f7a:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <StartTimerZero>
    1f7e:	08 c0       	rjmp	.+16     	; 0x1f90 <sendSQDataPacket+0x74>
    1f80:	0e 94 9d 29 	call	0x533a	; 0x533a <rx_buf_count>
    1f84:	81 11       	cpse	r24, r1
    1f86:	08 c0       	rjmp	.+16     	; 0x1f98 <sendSQDataPacket+0x7c>
    1f88:	0e 94 76 23 	call	0x46ec	; 0x46ec <mac_event_pending>
    1f8c:	81 11       	cpse	r24, r1
    1f8e:	25 c0       	rjmp	.+74     	; 0x1fda <sendSQDataPacket+0xbe>
    1f90:	90 91 15 0b 	lds	r25, 0x0B15	; 0x800b15 <ucTimerCount>
    1f94:	96 34       	cpi	r25, 0x46	; 70
    1f96:	a0 f3       	brcs	.-24     	; 0x1f80 <sendSQDataPacket+0x64>
    1f98:	0e 94 6f 16 	call	0x2cde	; 0x2cde <StopTimerZero>
    1f9c:	80 91 15 0b 	lds	r24, 0x0B15	; 0x800b15 <ucTimerCount>
    1fa0:	86 34       	cpi	r24, 0x46	; 70
    1fa2:	30 f4       	brcc	.+12     	; 0x1fb0 <sendSQDataPacket+0x94>
    1fa4:	0e 94 a9 29 	call	0x5352	; 0x5352 <serial_getchar>
    1fa8:	86 30       	cpi	r24, 0x06	; 6
    1faa:	e1 f0       	breq	.+56     	; 0x1fe4 <sendSQDataPacket+0xc8>
    1fac:	89 30       	cpi	r24, 0x09	; 9
    1fae:	49 f0       	breq	.+18     	; 0x1fc2 <sendSQDataPacket+0xa6>
    1fb0:	8f ed       	ldi	r24, 0xDF	; 223
    1fb2:	9e e2       	ldi	r25, 0x2E	; 46
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	f1 f7       	brne	.-4      	; 0x1fb4 <sendSQDataPacket+0x98>
    1fb8:	00 c0       	rjmp	.+0      	; 0x1fba <sendSQDataPacket+0x9e>
    1fba:	00 00       	nop
    1fbc:	01 50       	subi	r16, 0x01	; 1
    1fbe:	09 f0       	breq	.+2      	; 0x1fc2 <sendSQDataPacket+0xa6>
    1fc0:	b9 cf       	rjmp	.-142    	; 0x1f34 <sendSQDataPacket+0x18>
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
    1fc4:	df 91       	pop	r29
    1fc6:	cf 91       	pop	r28
    1fc8:	1f 91       	pop	r17
    1fca:	0f 91       	pop	r16
    1fcc:	ff 90       	pop	r15
    1fce:	ef 90       	pop	r14
    1fd0:	df 90       	pop	r13
    1fd2:	cf 90       	pop	r12
    1fd4:	bf 90       	pop	r11
    1fd6:	af 90       	pop	r10
    1fd8:	08 95       	ret
    1fda:	0e 94 ab 23 	call	0x4756	; 0x4756 <macTask>
    1fde:	d8 cf       	rjmp	.-80     	; 0x1f90 <sendSQDataPacket+0x74>
    1fe0:	12 e0       	ldi	r17, 0x02	; 2
    1fe2:	c5 cf       	rjmp	.-118    	; 0x1f6e <sendSQDataPacket+0x52>
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	ee cf       	rjmp	.-36     	; 0x1fc4 <sendSQDataPacket+0xa8>

00001fe8 <sendSQACAVendPrice>:
    1fe8:	cf 93       	push	r28
    1fea:	df 93       	push	r29
    1fec:	cd b7       	in	r28, 0x3d	; 61
    1fee:	de b7       	in	r29, 0x3e	; 62
    1ff0:	2b 97       	sbiw	r28, 0x0b	; 11
    1ff2:	0f b6       	in	r0, 0x3f	; 63
    1ff4:	f8 94       	cli
    1ff6:	de bf       	out	0x3e, r29	; 62
    1ff8:	0f be       	out	0x3f, r0	; 63
    1ffa:	cd bf       	out	0x3d, r28	; 61
    1ffc:	ce 01       	movw	r24, r28
    1ffe:	01 96       	adiw	r24, 0x01	; 1
    2000:	2b e0       	ldi	r18, 0x0B	; 11
    2002:	fc 01       	movw	r30, r24
    2004:	11 92       	st	Z+, r1
    2006:	2a 95       	dec	r18
    2008:	e9 f7       	brne	.-6      	; 0x2004 <sendSQACAVendPrice+0x1c>
    200a:	20 91 f6 0a 	lds	r18, 0x0AF6	; 0x800af6 <SQACAMachineStatus+0x1>
    200e:	23 30       	cpi	r18, 0x03	; 3
    2010:	59 f0       	breq	.+22     	; 0x2028 <sendSQACAVendPrice+0x40>
    2012:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <sendSQDataPacket>
    2016:	2b 96       	adiw	r28, 0x0b	; 11
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	f8 94       	cli
    201c:	de bf       	out	0x3e, r29	; 62
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	cd bf       	out	0x3d, r28	; 61
    2022:	df 91       	pop	r29
    2024:	cf 91       	pop	r28
    2026:	08 95       	ret
    2028:	20 91 f1 0a 	lds	r18, 0x0AF1	; 0x800af1 <deviceStatus>
    202c:	22 32       	cpi	r18, 0x22	; 34
    202e:	e9 f1       	breq	.+122    	; 0x20aa <sendSQACAVendPrice+0xc2>
    2030:	29 32       	cpi	r18, 0x29	; 41
    2032:	f1 f0       	breq	.+60     	; 0x2070 <sendSQACAVendPrice+0x88>
    2034:	21 32       	cpi	r18, 0x21	; 33
    2036:	69 f7       	brne	.-38     	; 0x2012 <sendSQACAVendPrice+0x2a>
    2038:	2a e0       	ldi	r18, 0x0A	; 10
    203a:	29 83       	std	Y+1, r18	; 0x01
    203c:	22 e7       	ldi	r18, 0x72	; 114
    203e:	2a 83       	std	Y+2, r18	; 0x02
    2040:	e0 91 f7 0a 	lds	r30, 0x0AF7	; 0x800af7 <SQACAMachineStatus+0x2>
    2044:	4e 2f       	mov	r20, r30
    2046:	50 e0       	ldi	r21, 0x00	; 0
    2048:	fa 01       	movw	r30, r20
    204a:	31 97       	sbiw	r30, 0x01	; 1
    204c:	e9 30       	cpi	r30, 0x09	; 9
    204e:	f1 05       	cpc	r31, r1
    2050:	08 f4       	brcc	.+2      	; 0x2054 <sendSQACAVendPrice+0x6c>
    2052:	43 c0       	rjmp	.+134    	; 0x20da <sendSQACAVendPrice+0xf2>
    2054:	20 91 f8 0a 	lds	r18, 0x0AF8	; 0x800af8 <SQACAMachineStatus+0x3>
    2058:	21 30       	cpi	r18, 0x01	; 1
    205a:	09 f4       	brne	.+2      	; 0x205e <sendSQACAVendPrice+0x76>
    205c:	d3 c0       	rjmp	.+422    	; 0x2204 <sendSQACAVendPrice+0x21c>
    205e:	22 30       	cpi	r18, 0x02	; 2
    2060:	c1 f6       	brne	.-80     	; 0x2012 <sendSQACAVendPrice+0x2a>
    2062:	20 91 e1 08 	lds	r18, 0x08E1	; 0x8008e1 <SQACAToploadProgramming+0x19>
    2066:	2d 83       	std	Y+5, r18	; 0x05
    2068:	20 91 e2 08 	lds	r18, 0x08E2	; 0x8008e2 <SQACAToploadProgramming+0x1a>
    206c:	2e 83       	std	Y+6, r18	; 0x06
    206e:	d1 cf       	rjmp	.-94     	; 0x2012 <sendSQACAVendPrice+0x2a>
    2070:	2a e0       	ldi	r18, 0x0A	; 10
    2072:	29 83       	std	Y+1, r18	; 0x01
    2074:	22 e7       	ldi	r18, 0x72	; 114
    2076:	2a 83       	std	Y+2, r18	; 0x02
    2078:	20 91 f7 0a 	lds	r18, 0x0AF7	; 0x800af7 <SQACAMachineStatus+0x2>
    207c:	24 30       	cpi	r18, 0x04	; 4
    207e:	08 f0       	brcs	.+2      	; 0x2082 <sendSQACAVendPrice+0x9a>
    2080:	b5 c0       	rjmp	.+362    	; 0x21ec <sendSQACAVendPrice+0x204>
    2082:	22 30       	cpi	r18, 0x02	; 2
    2084:	70 f5       	brcc	.+92     	; 0x20e2 <sendSQACAVendPrice+0xfa>
    2086:	21 30       	cpi	r18, 0x01	; 1
    2088:	31 f4       	brne	.+12     	; 0x2096 <sendSQACAVendPrice+0xae>
    208a:	20 91 0b 0a 	lds	r18, 0x0A0B	; 0x800a0b <SQACADryerProgramming+0x7>
    208e:	2b 83       	std	Y+3, r18	; 0x03
    2090:	20 91 0c 0a 	lds	r18, 0x0A0C	; 0x800a0c <SQACADryerProgramming+0x8>
    2094:	2c 83       	std	Y+4, r18	; 0x04
    2096:	20 91 14 0a 	lds	r18, 0x0A14	; 0x800a14 <SQACADryerProgramming+0x10>
    209a:	2f 83       	std	Y+7, r18	; 0x07
    209c:	20 91 15 0a 	lds	r18, 0x0A15	; 0x800a15 <SQACADryerProgramming+0x11>
    20a0:	28 87       	std	Y+8, r18	; 0x08
    20a2:	20 91 16 0a 	lds	r18, 0x0A16	; 0x800a16 <SQACADryerProgramming+0x12>
    20a6:	29 87       	std	Y+9, r18	; 0x09
    20a8:	b4 cf       	rjmp	.-152    	; 0x2012 <sendSQACAVendPrice+0x2a>
    20aa:	2a e0       	ldi	r18, 0x0A	; 10
    20ac:	29 83       	std	Y+1, r18	; 0x01
    20ae:	22 e7       	ldi	r18, 0x72	; 114
    20b0:	2a 83       	std	Y+2, r18	; 0x02
    20b2:	e0 91 f7 0a 	lds	r30, 0x0AF7	; 0x800af7 <SQACAMachineStatus+0x2>
    20b6:	4e 2f       	mov	r20, r30
    20b8:	50 e0       	ldi	r21, 0x00	; 0
    20ba:	fa 01       	movw	r30, r20
    20bc:	31 97       	sbiw	r30, 0x01	; 1
    20be:	e9 30       	cpi	r30, 0x09	; 9
    20c0:	f1 05       	cpc	r31, r1
    20c2:	38 f0       	brcs	.+14     	; 0x20d2 <sendSQACAVendPrice+0xea>
    20c4:	20 91 bb 08 	lds	r18, 0x08BB	; 0x8008bb <SQACAFrontloadProgramming+0x19>
    20c8:	2d 83       	std	Y+5, r18	; 0x05
    20ca:	20 91 bc 08 	lds	r18, 0x08BC	; 0x8008bc <SQACAFrontloadProgramming+0x1a>
    20ce:	2e 83       	std	Y+6, r18	; 0x06
    20d0:	a0 cf       	rjmp	.-192    	; 0x2012 <sendSQACAVendPrice+0x2a>
    20d2:	e8 54       	subi	r30, 0x48	; 72
    20d4:	ff 4f       	sbci	r31, 0xFF	; 255
    20d6:	0c 94 17 30 	jmp	0x602e	; 0x602e <__tablejump2__>
    20da:	ef 53       	subi	r30, 0x3F	; 63
    20dc:	ff 4f       	sbci	r31, 0xFF	; 255
    20de:	0c 94 17 30 	jmp	0x602e	; 0x602e <__tablejump2__>
    20e2:	20 91 0d 0a 	lds	r18, 0x0A0D	; 0x800a0d <SQACADryerProgramming+0x9>
    20e6:	2b 83       	std	Y+3, r18	; 0x03
    20e8:	20 91 0e 0a 	lds	r18, 0x0A0E	; 0x800a0e <SQACADryerProgramming+0xa>
    20ec:	2c 83       	std	Y+4, r18	; 0x04
    20ee:	d3 cf       	rjmp	.-90     	; 0x2096 <sendSQACAVendPrice+0xae>
    20f0:	20 91 db 08 	lds	r18, 0x08DB	; 0x8008db <SQACAToploadProgramming+0x13>
    20f4:	2b 83       	std	Y+3, r18	; 0x03
    20f6:	20 91 dc 08 	lds	r18, 0x08DC	; 0x8008dc <SQACAToploadProgramming+0x14>
    20fa:	2c 83       	std	Y+4, r18	; 0x04
    20fc:	ab cf       	rjmp	.-170    	; 0x2054 <sendSQACAVendPrice+0x6c>
    20fe:	20 91 b5 08 	lds	r18, 0x08B5	; 0x8008b5 <SQACAFrontloadProgramming+0x13>
    2102:	2b 83       	std	Y+3, r18	; 0x03
    2104:	20 91 b6 08 	lds	r18, 0x08B6	; 0x8008b6 <SQACAFrontloadProgramming+0x14>
    2108:	2c 83       	std	Y+4, r18	; 0x04
    210a:	dc cf       	rjmp	.-72     	; 0x20c4 <sendSQACAVendPrice+0xdc>
    210c:	20 91 d9 08 	lds	r18, 0x08D9	; 0x8008d9 <SQACAToploadProgramming+0x11>
    2110:	2b 83       	std	Y+3, r18	; 0x03
    2112:	20 91 da 08 	lds	r18, 0x08DA	; 0x8008da <SQACAToploadProgramming+0x12>
    2116:	2c 83       	std	Y+4, r18	; 0x04
    2118:	9d cf       	rjmp	.-198    	; 0x2054 <sendSQACAVendPrice+0x6c>
    211a:	20 91 d7 08 	lds	r18, 0x08D7	; 0x8008d7 <SQACAToploadProgramming+0xf>
    211e:	2b 83       	std	Y+3, r18	; 0x03
    2120:	20 91 d8 08 	lds	r18, 0x08D8	; 0x8008d8 <SQACAToploadProgramming+0x10>
    2124:	2c 83       	std	Y+4, r18	; 0x04
    2126:	96 cf       	rjmp	.-212    	; 0x2054 <sendSQACAVendPrice+0x6c>
    2128:	20 91 d5 08 	lds	r18, 0x08D5	; 0x8008d5 <SQACAToploadProgramming+0xd>
    212c:	2b 83       	std	Y+3, r18	; 0x03
    212e:	20 91 d6 08 	lds	r18, 0x08D6	; 0x8008d6 <SQACAToploadProgramming+0xe>
    2132:	2c 83       	std	Y+4, r18	; 0x04
    2134:	8f cf       	rjmp	.-226    	; 0x2054 <sendSQACAVendPrice+0x6c>
    2136:	20 91 d3 08 	lds	r18, 0x08D3	; 0x8008d3 <SQACAToploadProgramming+0xb>
    213a:	2b 83       	std	Y+3, r18	; 0x03
    213c:	20 91 d4 08 	lds	r18, 0x08D4	; 0x8008d4 <SQACAToploadProgramming+0xc>
    2140:	2c 83       	std	Y+4, r18	; 0x04
    2142:	88 cf       	rjmp	.-240    	; 0x2054 <sendSQACAVendPrice+0x6c>
    2144:	20 91 d1 08 	lds	r18, 0x08D1	; 0x8008d1 <SQACAToploadProgramming+0x9>
    2148:	2b 83       	std	Y+3, r18	; 0x03
    214a:	20 91 d2 08 	lds	r18, 0x08D2	; 0x8008d2 <SQACAToploadProgramming+0xa>
    214e:	2c 83       	std	Y+4, r18	; 0x04
    2150:	81 cf       	rjmp	.-254    	; 0x2054 <sendSQACAVendPrice+0x6c>
    2152:	20 91 cf 08 	lds	r18, 0x08CF	; 0x8008cf <SQACAToploadProgramming+0x7>
    2156:	2b 83       	std	Y+3, r18	; 0x03
    2158:	20 91 d0 08 	lds	r18, 0x08D0	; 0x8008d0 <SQACAToploadProgramming+0x8>
    215c:	2c 83       	std	Y+4, r18	; 0x04
    215e:	7a cf       	rjmp	.-268    	; 0x2054 <sendSQACAVendPrice+0x6c>
    2160:	20 91 cd 08 	lds	r18, 0x08CD	; 0x8008cd <SQACAToploadProgramming+0x5>
    2164:	2b 83       	std	Y+3, r18	; 0x03
    2166:	20 91 ce 08 	lds	r18, 0x08CE	; 0x8008ce <SQACAToploadProgramming+0x6>
    216a:	2c 83       	std	Y+4, r18	; 0x04
    216c:	73 cf       	rjmp	.-282    	; 0x2054 <sendSQACAVendPrice+0x6c>
    216e:	20 91 dd 08 	lds	r18, 0x08DD	; 0x8008dd <SQACAToploadProgramming+0x15>
    2172:	2b 83       	std	Y+3, r18	; 0x03
    2174:	20 91 de 08 	lds	r18, 0x08DE	; 0x8008de <SQACAToploadProgramming+0x16>
    2178:	2c 83       	std	Y+4, r18	; 0x04
    217a:	6c cf       	rjmp	.-296    	; 0x2054 <sendSQACAVendPrice+0x6c>
    217c:	20 91 b3 08 	lds	r18, 0x08B3	; 0x8008b3 <SQACAFrontloadProgramming+0x11>
    2180:	2b 83       	std	Y+3, r18	; 0x03
    2182:	20 91 b4 08 	lds	r18, 0x08B4	; 0x8008b4 <SQACAFrontloadProgramming+0x12>
    2186:	2c 83       	std	Y+4, r18	; 0x04
    2188:	9d cf       	rjmp	.-198    	; 0x20c4 <sendSQACAVendPrice+0xdc>
    218a:	20 91 b1 08 	lds	r18, 0x08B1	; 0x8008b1 <SQACAFrontloadProgramming+0xf>
    218e:	2b 83       	std	Y+3, r18	; 0x03
    2190:	20 91 b2 08 	lds	r18, 0x08B2	; 0x8008b2 <SQACAFrontloadProgramming+0x10>
    2194:	2c 83       	std	Y+4, r18	; 0x04
    2196:	96 cf       	rjmp	.-212    	; 0x20c4 <sendSQACAVendPrice+0xdc>
    2198:	20 91 af 08 	lds	r18, 0x08AF	; 0x8008af <SQACAFrontloadProgramming+0xd>
    219c:	2b 83       	std	Y+3, r18	; 0x03
    219e:	20 91 b0 08 	lds	r18, 0x08B0	; 0x8008b0 <SQACAFrontloadProgramming+0xe>
    21a2:	2c 83       	std	Y+4, r18	; 0x04
    21a4:	8f cf       	rjmp	.-226    	; 0x20c4 <sendSQACAVendPrice+0xdc>
    21a6:	20 91 ad 08 	lds	r18, 0x08AD	; 0x8008ad <SQACAFrontloadProgramming+0xb>
    21aa:	2b 83       	std	Y+3, r18	; 0x03
    21ac:	20 91 ae 08 	lds	r18, 0x08AE	; 0x8008ae <SQACAFrontloadProgramming+0xc>
    21b0:	2c 83       	std	Y+4, r18	; 0x04
    21b2:	88 cf       	rjmp	.-240    	; 0x20c4 <sendSQACAVendPrice+0xdc>
    21b4:	20 91 ab 08 	lds	r18, 0x08AB	; 0x8008ab <SQACAFrontloadProgramming+0x9>
    21b8:	2b 83       	std	Y+3, r18	; 0x03
    21ba:	20 91 ac 08 	lds	r18, 0x08AC	; 0x8008ac <SQACAFrontloadProgramming+0xa>
    21be:	2c 83       	std	Y+4, r18	; 0x04
    21c0:	81 cf       	rjmp	.-254    	; 0x20c4 <sendSQACAVendPrice+0xdc>
    21c2:	20 91 a9 08 	lds	r18, 0x08A9	; 0x8008a9 <SQACAFrontloadProgramming+0x7>
    21c6:	2b 83       	std	Y+3, r18	; 0x03
    21c8:	20 91 aa 08 	lds	r18, 0x08AA	; 0x8008aa <SQACAFrontloadProgramming+0x8>
    21cc:	2c 83       	std	Y+4, r18	; 0x04
    21ce:	7a cf       	rjmp	.-268    	; 0x20c4 <sendSQACAVendPrice+0xdc>
    21d0:	20 91 a7 08 	lds	r18, 0x08A7	; 0x8008a7 <SQACAFrontloadProgramming+0x5>
    21d4:	2b 83       	std	Y+3, r18	; 0x03
    21d6:	20 91 a8 08 	lds	r18, 0x08A8	; 0x8008a8 <SQACAFrontloadProgramming+0x6>
    21da:	2c 83       	std	Y+4, r18	; 0x04
    21dc:	73 cf       	rjmp	.-282    	; 0x20c4 <sendSQACAVendPrice+0xdc>
    21de:	20 91 b7 08 	lds	r18, 0x08B7	; 0x8008b7 <SQACAFrontloadProgramming+0x15>
    21e2:	2b 83       	std	Y+3, r18	; 0x03
    21e4:	20 91 b8 08 	lds	r18, 0x08B8	; 0x8008b8 <SQACAFrontloadProgramming+0x16>
    21e8:	2c 83       	std	Y+4, r18	; 0x04
    21ea:	6c cf       	rjmp	.-296    	; 0x20c4 <sendSQACAVendPrice+0xdc>
    21ec:	24 30       	cpi	r18, 0x04	; 4
    21ee:	89 f0       	breq	.+34     	; 0x2212 <sendSQACAVendPrice+0x22a>
    21f0:	25 30       	cpi	r18, 0x05	; 5
    21f2:	09 f0       	breq	.+2      	; 0x21f6 <sendSQACAVendPrice+0x20e>
    21f4:	50 cf       	rjmp	.-352    	; 0x2096 <sendSQACAVendPrice+0xae>
    21f6:	20 91 0f 0a 	lds	r18, 0x0A0F	; 0x800a0f <SQACADryerProgramming+0xb>
    21fa:	2b 83       	std	Y+3, r18	; 0x03
    21fc:	20 91 10 0a 	lds	r18, 0x0A10	; 0x800a10 <SQACADryerProgramming+0xc>
    2200:	2c 83       	std	Y+4, r18	; 0x04
    2202:	49 cf       	rjmp	.-366    	; 0x2096 <sendSQACAVendPrice+0xae>
    2204:	20 91 df 08 	lds	r18, 0x08DF	; 0x8008df <SQACAToploadProgramming+0x17>
    2208:	2d 83       	std	Y+5, r18	; 0x05
    220a:	20 91 e0 08 	lds	r18, 0x08E0	; 0x8008e0 <SQACAToploadProgramming+0x18>
    220e:	2e 83       	std	Y+6, r18	; 0x06
    2210:	00 cf       	rjmp	.-512    	; 0x2012 <sendSQACAVendPrice+0x2a>
    2212:	20 91 09 0a 	lds	r18, 0x0A09	; 0x800a09 <SQACADryerProgramming+0x5>
    2216:	2b 83       	std	Y+3, r18	; 0x03
    2218:	20 91 0a 0a 	lds	r18, 0x0A0A	; 0x800a0a <SQACADryerProgramming+0x6>
    221c:	2c 83       	std	Y+4, r18	; 0x04
    221e:	3b cf       	rjmp	.-394    	; 0x2096 <sendSQACAVendPrice+0xae>

00002220 <getSQDataPacket>:
    2220:	ef 92       	push	r14
    2222:	ff 92       	push	r15
    2224:	1f 93       	push	r17
    2226:	cf 93       	push	r28
    2228:	df 93       	push	r29
    222a:	ec 01       	movw	r28, r24
    222c:	0e 94 a9 29 	call	0x5352	; 0x5352 <serial_getchar>
    2230:	18 2f       	mov	r17, r24
    2232:	82 30       	cpi	r24, 0x02	; 2
    2234:	39 f0       	breq	.+14     	; 0x2244 <getSQDataPacket+0x24>
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	df 91       	pop	r29
    223a:	cf 91       	pop	r28
    223c:	1f 91       	pop	r17
    223e:	ff 90       	pop	r15
    2240:	ef 90       	pop	r14
    2242:	08 95       	ret
    2244:	0e 94 a9 29 	call	0x5352	; 0x5352 <serial_getchar>
    2248:	98 81       	ld	r25, Y
    224a:	98 17       	cp	r25, r24
    224c:	a0 f3       	brcs	.-24     	; 0x2236 <getSQDataPacket+0x16>
    224e:	18 27       	eor	r17, r24
    2250:	88 23       	and	r24, r24
    2252:	79 f0       	breq	.+30     	; 0x2272 <getSQDataPacket+0x52>
    2254:	81 50       	subi	r24, 0x01	; 1
    2256:	e8 2e       	mov	r14, r24
    2258:	f1 2c       	mov	r15, r1
    225a:	8f ef       	ldi	r24, 0xFF	; 255
    225c:	e8 1a       	sub	r14, r24
    225e:	f8 0a       	sbc	r15, r24
    2260:	ec 0e       	add	r14, r28
    2262:	fd 1e       	adc	r15, r29
    2264:	0e 94 a9 29 	call	0x5352	; 0x5352 <serial_getchar>
    2268:	89 93       	st	Y+, r24
    226a:	18 27       	eor	r17, r24
    226c:	ce 15       	cp	r28, r14
    226e:	df 05       	cpc	r29, r15
    2270:	c9 f7       	brne	.-14     	; 0x2264 <getSQDataPacket+0x44>
    2272:	0e 94 a9 29 	call	0x5352	; 0x5352 <serial_getchar>
    2276:	18 17       	cp	r17, r24
    2278:	21 f0       	breq	.+8      	; 0x2282 <getSQDataPacket+0x62>
    227a:	85 e1       	ldi	r24, 0x15	; 21
    227c:	0e 94 5b 29 	call	0x52b6	; 0x52b6 <serial_putchar>
    2280:	da cf       	rjmp	.-76     	; 0x2236 <getSQDataPacket+0x16>
    2282:	86 e0       	ldi	r24, 0x06	; 6
    2284:	0e 94 5b 29 	call	0x52b6	; 0x52b6 <serial_putchar>
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	d6 cf       	rjmp	.-84     	; 0x2238 <getSQDataPacket+0x18>

0000228c <getSQACAStatusData.part.1>:
    228c:	cf 93       	push	r28
    228e:	df 93       	push	r29
    2290:	cd b7       	in	r28, 0x3d	; 61
    2292:	de b7       	in	r29, 0x3e	; 62
    2294:	6a 97       	sbiw	r28, 0x1a	; 26
    2296:	0f b6       	in	r0, 0x3f	; 63
    2298:	f8 94       	cli
    229a:	de bf       	out	0x3e, r29	; 62
    229c:	0f be       	out	0x3f, r0	; 63
    229e:	cd bf       	out	0x3d, r28	; 61
    22a0:	2a e1       	ldi	r18, 0x1A	; 26
    22a2:	ce 01       	movw	r24, r28
    22a4:	01 96       	adiw	r24, 0x01	; 1
    22a6:	fc 01       	movw	r30, r24
    22a8:	32 2f       	mov	r19, r18
    22aa:	11 92       	st	Z+, r1
    22ac:	3a 95       	dec	r19
    22ae:	e9 f7       	brne	.-6      	; 0x22aa <getSQACAStatusData.part.1+0x1e>
    22b0:	29 83       	std	Y+1, r18	; 0x01
    22b2:	0e 94 10 11 	call	0x2220	; 0x2220 <getSQDataPacket>
    22b6:	88 23       	and	r24, r24
    22b8:	19 f0       	breq	.+6      	; 0x22c0 <getSQACAStatusData.part.1+0x34>
    22ba:	99 81       	ldd	r25, Y+1	; 0x01
    22bc:	91 37       	cpi	r25, 0x71	; 113
    22be:	51 f0       	breq	.+20     	; 0x22d4 <getSQACAStatusData.part.1+0x48>
    22c0:	80 e0       	ldi	r24, 0x00	; 0
    22c2:	6a 96       	adiw	r28, 0x1a	; 26
    22c4:	0f b6       	in	r0, 0x3f	; 63
    22c6:	f8 94       	cli
    22c8:	de bf       	out	0x3e, r29	; 62
    22ca:	0f be       	out	0x3f, r0	; 63
    22cc:	cd bf       	out	0x3d, r28	; 61
    22ce:	df 91       	pop	r29
    22d0:	cf 91       	pop	r28
    22d2:	08 95       	ret
    22d4:	9a 81       	ldd	r25, Y+2	; 0x02
    22d6:	90 5e       	subi	r25, 0xE0	; 224
    22d8:	90 93 f5 0a 	sts	0x0AF5, r25	; 0x800af5 <SQACAMachineStatus>
    22dc:	9b 81       	ldd	r25, Y+3	; 0x03
    22de:	90 93 f7 0a 	sts	0x0AF7, r25	; 0x800af7 <SQACAMachineStatus+0x2>
    22e2:	9c 81       	ldd	r25, Y+4	; 0x04
    22e4:	90 93 f8 0a 	sts	0x0AF8, r25	; 0x800af8 <SQACAMachineStatus+0x3>
    22e8:	9d 81       	ldd	r25, Y+5	; 0x05
    22ea:	90 93 f9 0a 	sts	0x0AF9, r25	; 0x800af9 <SQACAMachineStatus+0x4>
    22ee:	9e 81       	ldd	r25, Y+6	; 0x06
    22f0:	90 93 fa 0a 	sts	0x0AFA, r25	; 0x800afa <SQACAMachineStatus+0x5>
    22f4:	9f 81       	ldd	r25, Y+7	; 0x07
    22f6:	90 93 fb 0a 	sts	0x0AFB, r25	; 0x800afb <SQACAMachineStatus+0x6>
    22fa:	98 85       	ldd	r25, Y+8	; 0x08
    22fc:	90 93 fc 0a 	sts	0x0AFC, r25	; 0x800afc <SQACAMachineStatus+0x7>
    2300:	99 85       	ldd	r25, Y+9	; 0x09
    2302:	90 93 fd 0a 	sts	0x0AFD, r25	; 0x800afd <SQACAMachineStatus+0x8>
    2306:	9a 85       	ldd	r25, Y+10	; 0x0a
    2308:	90 93 fe 0a 	sts	0x0AFE, r25	; 0x800afe <SQACAMachineStatus+0x9>
    230c:	9b 85       	ldd	r25, Y+11	; 0x0b
    230e:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <SQACAMachineStatus+0xa>
    2312:	9c 85       	ldd	r25, Y+12	; 0x0c
    2314:	90 93 00 0b 	sts	0x0B00, r25	; 0x800b00 <SQACAMachineStatus+0xb>
    2318:	9d 85       	ldd	r25, Y+13	; 0x0d
    231a:	90 93 01 0b 	sts	0x0B01, r25	; 0x800b01 <SQACAMachineStatus+0xc>
    231e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2320:	90 93 02 0b 	sts	0x0B02, r25	; 0x800b02 <SQACAMachineStatus+0xd>
    2324:	9f 85       	ldd	r25, Y+15	; 0x0f
    2326:	90 93 03 0b 	sts	0x0B03, r25	; 0x800b03 <SQACAMachineStatus+0xe>
    232a:	98 89       	ldd	r25, Y+16	; 0x10
    232c:	90 93 04 0b 	sts	0x0B04, r25	; 0x800b04 <SQACAMachineStatus+0xf>
    2330:	99 89       	ldd	r25, Y+17	; 0x11
    2332:	90 93 05 0b 	sts	0x0B05, r25	; 0x800b05 <SQACAMachineStatus+0x10>
    2336:	9a 89       	ldd	r25, Y+18	; 0x12
    2338:	90 93 06 0b 	sts	0x0B06, r25	; 0x800b06 <SQACAMachineStatus+0x11>
    233c:	9b 89       	ldd	r25, Y+19	; 0x13
    233e:	90 93 07 0b 	sts	0x0B07, r25	; 0x800b07 <SQACAMachineStatus+0x12>
    2342:	9c 89       	ldd	r25, Y+20	; 0x14
    2344:	90 93 08 0b 	sts	0x0B08, r25	; 0x800b08 <SQACAMachineStatus+0x13>
    2348:	9d 89       	ldd	r25, Y+21	; 0x15
    234a:	90 93 09 0b 	sts	0x0B09, r25	; 0x800b09 <SQACAMachineStatus+0x14>
    234e:	9e 89       	ldd	r25, Y+22	; 0x16
    2350:	90 93 0a 0b 	sts	0x0B0A, r25	; 0x800b0a <SQACAMachineStatus+0x15>
    2354:	9f 89       	ldd	r25, Y+23	; 0x17
    2356:	90 93 0b 0b 	sts	0x0B0B, r25	; 0x800b0b <SQACAMachineStatus+0x16>
    235a:	98 8d       	ldd	r25, Y+24	; 0x18
    235c:	90 93 0c 0b 	sts	0x0B0C, r25	; 0x800b0c <SQACAMachineStatus+0x17>
    2360:	99 8d       	ldd	r25, Y+25	; 0x19
    2362:	90 93 0d 0b 	sts	0x0B0D, r25	; 0x800b0d <SQACAMachineStatus+0x18>
    2366:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2368:	90 93 0e 0b 	sts	0x0B0E, r25	; 0x800b0e <SQACAMachineStatus+0x19>
    236c:	aa cf       	rjmp	.-172    	; 0x22c2 <getSQACAStatusData.part.1+0x36>

0000236e <SQACAMachineStatusSequence>:
    236e:	1f 93       	push	r17
    2370:	cf 93       	push	r28
    2372:	df 93       	push	r29
    2374:	00 d0       	rcall	.+0      	; 0x2376 <SQACAMachineStatusSequence+0x8>
    2376:	cd b7       	in	r28, 0x3d	; 61
    2378:	de b7       	in	r29, 0x3e	; 62
    237a:	1a 82       	std	Y+2, r1	; 0x02
    237c:	19 82       	std	Y+1, r1	; 0x01
    237e:	80 91 f6 0a 	lds	r24, 0x0AF6	; 0x800af6 <SQACAMachineStatus+0x1>
    2382:	83 30       	cpi	r24, 0x03	; 3
    2384:	89 f0       	breq	.+34     	; 0x23a8 <SQACAMachineStatusSequence+0x3a>
    2386:	ce 01       	movw	r24, r28
    2388:	01 96       	adiw	r24, 0x01	; 1
    238a:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <sendSQDataPacket>
    238e:	88 23       	and	r24, r24
    2390:	21 f0       	breq	.+8      	; 0x239a <SQACAMachineStatusSequence+0x2c>
    2392:	80 91 f6 0a 	lds	r24, 0x0AF6	; 0x800af6 <SQACAMachineStatus+0x1>
    2396:	83 30       	cpi	r24, 0x03	; 3
    2398:	61 f0       	breq	.+24     	; 0x23b2 <SQACAMachineStatusSequence+0x44>
    239a:	80 e0       	ldi	r24, 0x00	; 0
    239c:	0f 90       	pop	r0
    239e:	0f 90       	pop	r0
    23a0:	df 91       	pop	r29
    23a2:	cf 91       	pop	r28
    23a4:	1f 91       	pop	r17
    23a6:	08 95       	ret
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	89 83       	std	Y+1, r24	; 0x01
    23ac:	80 e7       	ldi	r24, 0x70	; 112
    23ae:	8a 83       	std	Y+2, r24	; 0x02
    23b0:	ea cf       	rjmp	.-44     	; 0x2386 <SQACAMachineStatusSequence+0x18>
    23b2:	0e 94 46 11 	call	0x228c	; 0x228c <getSQACAStatusData.part.1>
    23b6:	18 2f       	mov	r17, r24
    23b8:	88 23       	and	r24, r24
    23ba:	79 f3       	breq	.-34     	; 0x239a <SQACAMachineStatusSequence+0x2c>
    23bc:	90 91 34 09 	lds	r25, 0x0934	; 0x800934 <ReaderStateFlag>
    23c0:	91 fb       	bst	r25, 1
    23c2:	88 27       	eor	r24, r24
    23c4:	80 f9       	bld	r24, 0
    23c6:	91 fd       	sbrc	r25, 1
    23c8:	e9 cf       	rjmp	.-46     	; 0x239c <SQACAMachineStatusSequence+0x2e>
    23ca:	8f ed       	ldi	r24, 0xDF	; 223
    23cc:	9e e2       	ldi	r25, 0x2E	; 46
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	f1 f7       	brne	.-4      	; 0x23ce <SQACAMachineStatusSequence+0x60>
    23d2:	00 c0       	rjmp	.+0      	; 0x23d4 <SQACAMachineStatusSequence+0x66>
    23d4:	00 00       	nop
    23d6:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <sendSQACAVendPrice>
    23da:	81 2f       	mov	r24, r17
    23dc:	0f 90       	pop	r0
    23de:	0f 90       	pop	r0
    23e0:	df 91       	pop	r29
    23e2:	cf 91       	pop	r28
    23e4:	1f 91       	pop	r17
    23e6:	08 95       	ret

000023e8 <getSQACAInitData>:
    23e8:	cf 93       	push	r28
    23ea:	df 93       	push	r29
    23ec:	cd b7       	in	r28, 0x3d	; 61
    23ee:	de b7       	in	r29, 0x3e	; 62
    23f0:	6f 97       	sbiw	r28, 0x1f	; 31
    23f2:	0f b6       	in	r0, 0x3f	; 63
    23f4:	f8 94       	cli
    23f6:	de bf       	out	0x3e, r29	; 62
    23f8:	0f be       	out	0x3f, r0	; 63
    23fa:	cd bf       	out	0x3d, r28	; 61
    23fc:	2f e1       	ldi	r18, 0x1F	; 31
    23fe:	ce 01       	movw	r24, r28
    2400:	01 96       	adiw	r24, 0x01	; 1
    2402:	fc 01       	movw	r30, r24
    2404:	32 2f       	mov	r19, r18
    2406:	11 92       	st	Z+, r1
    2408:	3a 95       	dec	r19
    240a:	e9 f7       	brne	.-6      	; 0x2406 <getSQACAInitData+0x1e>
    240c:	29 83       	std	Y+1, r18	; 0x01
    240e:	0e 94 10 11 	call	0x2220	; 0x2220 <getSQDataPacket>
    2412:	88 23       	and	r24, r24
    2414:	79 f0       	breq	.+30     	; 0x2434 <getSQACAInitData+0x4c>
    2416:	9a 81       	ldd	r25, Y+2	; 0x02
    2418:	90 93 c8 08 	sts	0x08C8, r25	; 0x8008c8 <SQACAToploadProgramming>
    241c:	9b 81       	ldd	r25, Y+3	; 0x03
    241e:	90 93 c9 08 	sts	0x08C9, r25	; 0x8008c9 <SQACAToploadProgramming+0x1>
    2422:	9c 81       	ldd	r25, Y+4	; 0x04
    2424:	90 93 ca 08 	sts	0x08CA, r25	; 0x8008ca <SQACAToploadProgramming+0x2>
    2428:	9f 81       	ldd	r25, Y+7	; 0x07
    242a:	90 93 f9 08 	sts	0x08F9, r25	; 0x8008f9 <SQACAToploadProgramming+0x31>
    242e:	99 89       	ldd	r25, Y+17	; 0x11
    2430:	90 93 fa 08 	sts	0x08FA, r25	; 0x8008fa <SQACAToploadProgramming+0x32>
    2434:	6f 96       	adiw	r28, 0x1f	; 31
    2436:	0f b6       	in	r0, 0x3f	; 63
    2438:	f8 94       	cli
    243a:	de bf       	out	0x3e, r29	; 62
    243c:	0f be       	out	0x3f, r0	; 63
    243e:	cd bf       	out	0x3d, r28	; 61
    2440:	df 91       	pop	r29
    2442:	cf 91       	pop	r28
    2444:	08 95       	ret

00002446 <IsACA>:
    2446:	cf 93       	push	r28
    2448:	df 93       	push	r29
    244a:	cd b7       	in	r28, 0x3d	; 61
    244c:	de b7       	in	r29, 0x3e	; 62
    244e:	2a 97       	sbiw	r28, 0x0a	; 10
    2450:	0f b6       	in	r0, 0x3f	; 63
    2452:	f8 94       	cli
    2454:	de bf       	out	0x3e, r29	; 62
    2456:	0f be       	out	0x3f, r0	; 63
    2458:	cd bf       	out	0x3d, r28	; 61
    245a:	8a e0       	ldi	r24, 0x0A	; 10
    245c:	ef e2       	ldi	r30, 0x2F	; 47
    245e:	f2 e0       	ldi	r31, 0x02	; 2
    2460:	de 01       	movw	r26, r28
    2462:	11 96       	adiw	r26, 0x01	; 1
    2464:	01 90       	ld	r0, Z+
    2466:	0d 92       	st	X+, r0
    2468:	8a 95       	dec	r24
    246a:	e1 f7       	brne	.-8      	; 0x2464 <IsACA+0x1e>
    246c:	89 e0       	ldi	r24, 0x09	; 9
    246e:	89 83       	std	Y+1, r24	; 0x01
    2470:	83 e7       	ldi	r24, 0x73	; 115
    2472:	8a 83       	std	Y+2, r24	; 0x02
    2474:	1e 82       	std	Y+6, r1	; 0x06
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	8f 83       	std	Y+7, r24	; 0x07
    247a:	80 e1       	ldi	r24, 0x10	; 16
    247c:	88 87       	std	Y+8, r24	; 0x08
    247e:	19 86       	std	Y+9, r1	; 0x09
    2480:	82 e0       	ldi	r24, 0x02	; 2
    2482:	8a 87       	std	Y+10, r24	; 0x0a
    2484:	ce 01       	movw	r24, r28
    2486:	01 96       	adiw	r24, 0x01	; 1
    2488:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <sendSQDataPacket>
    248c:	81 11       	cpse	r24, r1
    248e:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <getSQACAInitData>
    2492:	2a 96       	adiw	r28, 0x0a	; 10
    2494:	0f b6       	in	r0, 0x3f	; 63
    2496:	f8 94       	cli
    2498:	de bf       	out	0x3e, r29	; 62
    249a:	0f be       	out	0x3f, r0	; 63
    249c:	cd bf       	out	0x3d, r28	; 61
    249e:	df 91       	pop	r29
    24a0:	cf 91       	pop	r28
    24a2:	08 95       	ret

000024a4 <sendSQACAMimicQuantumVending>:
    24a4:	cf 93       	push	r28
    24a6:	df 93       	push	r29
    24a8:	00 d0       	rcall	.+0      	; 0x24aa <sendSQACAMimicQuantumVending+0x6>
    24aa:	00 d0       	rcall	.+0      	; 0x24ac <sendSQACAMimicQuantumVending+0x8>
    24ac:	cd b7       	in	r28, 0x3d	; 61
    24ae:	de b7       	in	r29, 0x3e	; 62
    24b0:	83 e0       	ldi	r24, 0x03	; 3
    24b2:	89 83       	std	Y+1, r24	; 0x01
    24b4:	84 e6       	ldi	r24, 0x64	; 100
    24b6:	8a 83       	std	Y+2, r24	; 0x02
    24b8:	8f e0       	ldi	r24, 0x0F	; 15
    24ba:	8b 83       	std	Y+3, r24	; 0x03
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	8c 83       	std	Y+4, r24	; 0x04
    24c0:	ce 01       	movw	r24, r28
    24c2:	01 96       	adiw	r24, 0x01	; 1
    24c4:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <sendSQDataPacket>
    24c8:	0f 90       	pop	r0
    24ca:	0f 90       	pop	r0
    24cc:	0f 90       	pop	r0
    24ce:	0f 90       	pop	r0
    24d0:	df 91       	pop	r29
    24d2:	cf 91       	pop	r28
    24d4:	08 95       	ret

000024d6 <sendSQACAVendingTransaction>:
    24d6:	cf 93       	push	r28
    24d8:	df 93       	push	r29
    24da:	cd b7       	in	r28, 0x3d	; 61
    24dc:	de b7       	in	r29, 0x3e	; 62
    24de:	27 97       	sbiw	r28, 0x07	; 7
    24e0:	0f b6       	in	r0, 0x3f	; 63
    24e2:	f8 94       	cli
    24e4:	de bf       	out	0x3e, r29	; 62
    24e6:	0f be       	out	0x3f, r0	; 63
    24e8:	cd bf       	out	0x3d, r28	; 61
    24ea:	fe 01       	movw	r30, r28
    24ec:	31 96       	adiw	r30, 0x01	; 1
    24ee:	97 e0       	ldi	r25, 0x07	; 7
    24f0:	df 01       	movw	r26, r30
    24f2:	1d 92       	st	X+, r1
    24f4:	9a 95       	dec	r25
    24f6:	e9 f7       	brne	.-6      	; 0x24f2 <sendSQACAVendingTransaction+0x1c>
    24f8:	81 30       	cpi	r24, 0x01	; 1
    24fa:	d9 f0       	breq	.+54     	; 0x2532 <sendSQACAVendingTransaction+0x5c>
    24fc:	82 30       	cpi	r24, 0x02	; 2
    24fe:	61 f0       	breq	.+24     	; 0x2518 <sendSQACAVendingTransaction+0x42>
    2500:	cf 01       	movw	r24, r30
    2502:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <sendSQDataPacket>
    2506:	27 96       	adiw	r28, 0x07	; 7
    2508:	0f b6       	in	r0, 0x3f	; 63
    250a:	f8 94       	cli
    250c:	de bf       	out	0x3e, r29	; 62
    250e:	0f be       	out	0x3f, r0	; 63
    2510:	cd bf       	out	0x3d, r28	; 61
    2512:	df 91       	pop	r29
    2514:	cf 91       	pop	r28
    2516:	08 95       	ret
    2518:	86 e0       	ldi	r24, 0x06	; 6
    251a:	89 83       	std	Y+1, r24	; 0x01
    251c:	8a e6       	ldi	r24, 0x6A	; 106
    251e:	8a 83       	std	Y+2, r24	; 0x02
    2520:	90 91 14 0a 	lds	r25, 0x0A14	; 0x800a14 <SQACADryerProgramming+0x10>
    2524:	9b 83       	std	Y+3, r25	; 0x03
    2526:	80 91 15 0a 	lds	r24, 0x0A15	; 0x800a15 <SQACADryerProgramming+0x11>
    252a:	8c 83       	std	Y+4, r24	; 0x04
    252c:	9d 83       	std	Y+5, r25	; 0x05
    252e:	8e 83       	std	Y+6, r24	; 0x06
    2530:	e7 cf       	rjmp	.-50     	; 0x2500 <sendSQACAVendingTransaction+0x2a>
    2532:	86 e0       	ldi	r24, 0x06	; 6
    2534:	89 83       	std	Y+1, r24	; 0x01
    2536:	8a e6       	ldi	r24, 0x6A	; 106
    2538:	8a 83       	std	Y+2, r24	; 0x02
    253a:	90 91 00 0b 	lds	r25, 0x0B00	; 0x800b00 <SQACAMachineStatus+0xb>
    253e:	9b 83       	std	Y+3, r25	; 0x03
    2540:	80 91 01 0b 	lds	r24, 0x0B01	; 0x800b01 <SQACAMachineStatus+0xc>
    2544:	8c 83       	std	Y+4, r24	; 0x04
    2546:	9d 83       	std	Y+5, r25	; 0x05
    2548:	8e 83       	std	Y+6, r24	; 0x06
    254a:	da cf       	rjmp	.-76     	; 0x2500 <sendSQACAVendingTransaction+0x2a>

0000254c <SQACAInitializationSequence>:

@ingroup pposreader
*/
void SQACAInitializationSequence(void)
{
	if( IsACA() )
    254c:	0e 94 23 12 	call	0x2446	; 0x2446 <IsACA>
    2550:	88 23       	and	r24, r24
    2552:	19 f0       	breq	.+6      	; 0x255a <SQACAInitializationSequence+0xe>
	{
		//set ACA flag
		SQACAMachineStatus.MachineType[1] = ACA_SERIES;
    2554:	83 e0       	ldi	r24, 0x03	; 3
    2556:	80 93 f6 0a 	sts	0x0AF6, r24	; 0x800af6 <SQACAMachineStatus+0x1>
    255a:	8f e3       	ldi	r24, 0x3F	; 63
    255c:	9f e1       	ldi	r25, 0x1F	; 31
    255e:	01 97       	sbiw	r24, 0x01	; 1
    2560:	f1 f7       	brne	.-4      	; 0x255e <SQACAInitializationSequence+0x12>
    2562:	00 c0       	rjmp	.+0      	; 0x2564 <SQACAInitializationSequence+0x18>
    2564:	00 00       	nop
price to be written to the display and used in a vending transaction. The ucDeviceStateFlag is set to be online.
*/
void SQACAMachineStatusCommSequence(void)
{
	
	if( SQACAMachineStatusSequence() )
    2566:	0e 94 b7 11 	call	0x236e	; 0x236e <SQACAMachineStatusSequence>
    256a:	88 23       	and	r24, r24
    256c:	19 f0       	breq	.+6      	; 0x2574 <SQACAInitializationSequence+0x28>
	{
		//set machine status ok flag;
		ucDeviceStateFlag = MACHINE_STATUS_ON; //machine status has been done
    256e:	82 e0       	ldi	r24, 0x02	; 2
    2570:	80 93 b9 09 	sts	0x09B9, r24	; 0x8009b9 <ucDeviceStateFlag>
		SQACAMachineStatus.MachineType[1] = ACA_SERIES;
	}
	
	_delay_ms(2); 
	SQACAMachineStatusCommSequence();
	deviceStatus.deviceType[0] = SQACAMachineStatus.MachineType[0];
    2574:	80 91 f5 0a 	lds	r24, 0x0AF5	; 0x800af5 <SQACAMachineStatus>
    2578:	80 93 f1 0a 	sts	0x0AF1, r24	; 0x800af1 <deviceStatus>
	deviceStatus.deviceType[1] = SQACAMachineStatus.MachineType[1];
    257c:	80 91 f6 0a 	lds	r24, 0x0AF6	; 0x800af6 <SQACAMachineStatus+0x1>
    2580:	80 93 f2 0a 	sts	0x0AF2, r24	; 0x800af2 <deviceStatus+0x1>
    2584:	08 95       	ret

00002586 <isMachineCycleRunning>:
/*                                                                      */
/************************************************************************/
bool isSQCycleRunning(void)
{
	//return ( (SQACAMachineStatus.MachineStatus[0] == MACHINE_RUN_MODE) || SQACAMachineStatus.MachineStatus[1] == MACHINE_RUN_MODE ); PPOS
	return ( (SQACAMachineStatus.MachineStatus[0] == MACHINE_RUN_MODE) );
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	90 91 fa 0a 	lds	r25, 0x0AFA	; 0x800afa <SQACAMachineStatus+0x5>
    258c:	98 30       	cpi	r25, 0x08	; 8
    258e:	09 f0       	breq	.+2      	; 0x2592 <isMachineCycleRunning+0xc>
    2590:	80 e0       	ldi	r24, 0x00	; 0
}

bool isMachineCycleRunning()
{
	return (isSQCycleRunning() );
}
    2592:	08 95       	ret

00002594 <waitForMachineStartKey>:
bool waitSQStartKey(void)
{
	//if( (SQACAMachineStatus.MachineStatus[0] & MACHINE_READY_MODE) ||
	//((SQACAMachineStatus.MachineStatus[0] == MACHINE_RUN_MODE) && (SQACAMachineStatus.MachineType[0] == PROGRAMMING_DATA_DRYER)) )
	
	if( (SQACAMachineStatus.MachineStatus[0] & MACHINE_READY_MODE) && (SQACAMachineStatus.MachineStatus[1] == MIMIC_QUANTUM_LOCK_ACTIVE) )
    2594:	80 91 fa 0a 	lds	r24, 0x0AFA	; 0x800afa <SQACAMachineStatus+0x5>
    2598:	80 ff       	sbrs	r24, 0
    259a:	05 c0       	rjmp	.+10     	; 0x25a6 <waitForMachineStartKey+0x12>
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	90 91 fb 0a 	lds	r25, 0x0AFB	; 0x800afb <SQACAMachineStatus+0x6>
    25a2:	90 32       	cpi	r25, 0x20	; 32
    25a4:	09 f0       	breq	.+2      	; 0x25a8 <waitForMachineStartKey+0x14>
	
	{
		return true;
	}
	
	return false;
    25a6:	80 e0       	ldi	r24, 0x00	; 0
//Examine machine control with Machine Status
bool waitForMachineStartKey()
{
	return waitSQStartKey();
	//_delay_ms(2000); //PPOS 170706 without this delay the Start button will not work
}
    25a8:	08 95       	ret

000025aa <SQACAMachineStatusCommSequence>:
price to be written to the display and used in a vending transaction. The ucDeviceStateFlag is set to be online.
*/
void SQACAMachineStatusCommSequence(void)
{
	
	if( SQACAMachineStatusSequence() )
    25aa:	0e 94 b7 11 	call	0x236e	; 0x236e <SQACAMachineStatusSequence>
    25ae:	88 23       	and	r24, r24
    25b0:	19 f0       	breq	.+6      	; 0x25b8 <SQACAMachineStatusCommSequence+0xe>
	{
		//set machine status ok flag;
		ucDeviceStateFlag = MACHINE_STATUS_ON; //machine status has been done
    25b2:	82 e0       	ldi	r24, 0x02	; 2
    25b4:	80 93 b9 09 	sts	0x09B9, r24	; 0x8009b9 <ucDeviceStateFlag>
    25b8:	08 95       	ret

000025ba <getSQReaderMachineSetup>:

When a valid Programming Command is sent into the Payment System, the reader will initiate a programming
sequence by sending the Programming Data packet.
*/
bool getSQReaderMachineSetup(void)
{
    25ba:	cf 93       	push	r28
    25bc:	df 93       	push	r29
    25be:	cd b7       	in	r28, 0x3d	; 61
    25c0:	de b7       	in	r29, 0x3e	; 62
    25c2:	ec 97       	sbiw	r28, 0x3c	; 60
    25c4:	0f b6       	in	r0, 0x3f	; 63
    25c6:	f8 94       	cli
    25c8:	de bf       	out	0x3e, r29	; 62
    25ca:	0f be       	out	0x3f, r0	; 63
    25cc:	cd bf       	out	0x3d, r28	; 61
	u8 temp[ACA_MAX_PACKET_SIZE] = {0};
    25ce:	fe 01       	movw	r30, r28
    25d0:	31 96       	adiw	r30, 0x01	; 1
    25d2:	8c e3       	ldi	r24, 0x3C	; 60
    25d4:	df 01       	movw	r26, r30
    25d6:	1d 92       	st	X+, r1
    25d8:	8a 95       	dec	r24
    25da:	e9 f7       	brne	.-6      	; 0x25d6 <getSQReaderMachineSetup+0x1c>
	
	switch( deviceStatus.deviceType[0] )
    25dc:	90 91 f1 0a 	lds	r25, 0x0AF1	; 0x800af1 <deviceStatus>
    25e0:	92 32       	cpi	r25, 0x22	; 34
    25e2:	09 f4       	brne	.+2      	; 0x25e6 <getSQReaderMachineSetup+0x2c>
    25e4:	13 c1       	rjmp	.+550    	; 0x280c <getSQReaderMachineSetup+0x252>
    25e6:	99 32       	cpi	r25, 0x29	; 41
    25e8:	09 f4       	brne	.+2      	; 0x25ec <getSQReaderMachineSetup+0x32>
    25ea:	a0 c0       	rjmp	.+320    	; 0x272c <getSQReaderMachineSetup+0x172>
    25ec:	91 32       	cpi	r25, 0x21	; 33
    25ee:	61 f0       	breq	.+24     	; 0x2608 <getSQReaderMachineSetup+0x4e>
		temp[36] = SQACADryerProgramming.DisplaySetting1;				//Fahrenheit / Celsius
		temp[37] = SQACADryerProgramming.DisplaySetting2;				//Minutes / Minutes & Seconds Display
		
		break;
	}
	return ( sendSQDataPacket(temp) );
    25f0:	cf 01       	movw	r24, r30
    25f2:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <sendSQDataPacket>
}
    25f6:	ec 96       	adiw	r28, 0x3c	; 60
    25f8:	0f b6       	in	r0, 0x3f	; 63
    25fa:	f8 94       	cli
    25fc:	de bf       	out	0x3e, r29	; 62
    25fe:	0f be       	out	0x3f, r0	; 63
    2600:	cd bf       	out	0x3d, r28	; 61
    2602:	df 91       	pop	r29
    2604:	cf 91       	pop	r28
    2606:	08 95       	ret
	u8 temp[ACA_MAX_PACKET_SIZE] = {0};
	
	switch( deviceStatus.deviceType[0] )
	{
		case PROGRAMMING_DATA_TOPLOAD:
		temp[0] = QTL_PROGRAMMING_DATA_SIZE;					//50 bytes
    2608:	82 e3       	ldi	r24, 0x32	; 50
    260a:	89 83       	std	Y+1, r24	; 0x01
		temp[1] = deviceStatus.deviceType[0];					//0x21 (TLW Prog)
    260c:	9a 83       	std	Y+2, r25	; 0x02
		temp[2] = SQACAToploadProgramming.ProductByte[0];
    260e:	80 91 c8 08 	lds	r24, 0x08C8	; 0x8008c8 <SQACAToploadProgramming>
    2612:	8b 83       	std	Y+3, r24	; 0x03
		temp[3] = SQACAToploadProgramming.ProductByte[1];
    2614:	80 91 c9 08 	lds	r24, 0x08C9	; 0x8008c9 <SQACAToploadProgramming+0x1>
    2618:	8c 83       	std	Y+4, r24	; 0x04
		temp[4] = SQACAToploadProgramming.ProductByte[2];
    261a:	80 91 ca 08 	lds	r24, 0x08CA	; 0x8008ca <SQACAToploadProgramming+0x2>
    261e:	8d 83       	std	Y+5, r24	; 0x05
		temp[5] = SQACAToploadProgramming.ProductByte[3];
    2620:	80 91 cb 08 	lds	r24, 0x08CB	; 0x8008cb <SQACAToploadProgramming+0x3>
    2624:	8e 83       	std	Y+6, r24	; 0x06
		temp[6] = SQACAToploadProgramming.ProductByte[4];
    2626:	80 91 cc 08 	lds	r24, 0x08CC	; 0x8008cc <SQACAToploadProgramming+0x4>
    262a:	8f 83       	std	Y+7, r24	; 0x07
		temp[7] = SQACAToploadProgramming.VendPrice1[0];
    262c:	80 91 cd 08 	lds	r24, 0x08CD	; 0x8008cd <SQACAToploadProgramming+0x5>
    2630:	88 87       	std	Y+8, r24	; 0x08
		temp[8] = SQACAToploadProgramming.VendPrice1[1];
    2632:	80 91 ce 08 	lds	r24, 0x08CE	; 0x8008ce <SQACAToploadProgramming+0x6>
    2636:	89 87       	std	Y+9, r24	; 0x09
		temp[9] = SQACAToploadProgramming.VendPrice2[0];
    2638:	80 91 cf 08 	lds	r24, 0x08CF	; 0x8008cf <SQACAToploadProgramming+0x7>
    263c:	8a 87       	std	Y+10, r24	; 0x0a
		temp[10] = SQACAToploadProgramming.VendPrice2[1];
    263e:	80 91 d0 08 	lds	r24, 0x08D0	; 0x8008d0 <SQACAToploadProgramming+0x8>
    2642:	8b 87       	std	Y+11, r24	; 0x0b
		temp[11] = SQACAToploadProgramming.VendPrice3[0];
    2644:	80 91 d1 08 	lds	r24, 0x08D1	; 0x8008d1 <SQACAToploadProgramming+0x9>
    2648:	8c 87       	std	Y+12, r24	; 0x0c
		temp[12] = SQACAToploadProgramming.VendPrice3[1];
    264a:	80 91 d2 08 	lds	r24, 0x08D2	; 0x8008d2 <SQACAToploadProgramming+0xa>
    264e:	8d 87       	std	Y+13, r24	; 0x0d
		temp[13] = SQACAToploadProgramming.VendPrice4[0];
    2650:	80 91 d3 08 	lds	r24, 0x08D3	; 0x8008d3 <SQACAToploadProgramming+0xb>
    2654:	8e 87       	std	Y+14, r24	; 0x0e
		temp[14] = SQACAToploadProgramming.VendPrice4[1];
    2656:	80 91 d4 08 	lds	r24, 0x08D4	; 0x8008d4 <SQACAToploadProgramming+0xc>
    265a:	8f 87       	std	Y+15, r24	; 0x0f
		temp[15] = SQACAToploadProgramming.VendPrice5[0];
    265c:	80 91 d5 08 	lds	r24, 0x08D5	; 0x8008d5 <SQACAToploadProgramming+0xd>
    2660:	88 8b       	std	Y+16, r24	; 0x10
		temp[16] = SQACAToploadProgramming.VendPrice5[1];
    2662:	80 91 d6 08 	lds	r24, 0x08D6	; 0x8008d6 <SQACAToploadProgramming+0xe>
    2666:	89 8b       	std	Y+17, r24	; 0x11
		temp[17] = SQACAToploadProgramming.VendPrice6[0];
    2668:	80 91 d7 08 	lds	r24, 0x08D7	; 0x8008d7 <SQACAToploadProgramming+0xf>
    266c:	8a 8b       	std	Y+18, r24	; 0x12
		temp[18] = SQACAToploadProgramming.VendPrice6[1];
    266e:	80 91 d8 08 	lds	r24, 0x08D8	; 0x8008d8 <SQACAToploadProgramming+0x10>
    2672:	8b 8b       	std	Y+19, r24	; 0x13
		temp[19] = SQACAToploadProgramming.VendPrice7[0];
    2674:	80 91 d9 08 	lds	r24, 0x08D9	; 0x8008d9 <SQACAToploadProgramming+0x11>
    2678:	8c 8b       	std	Y+20, r24	; 0x14
		temp[20] = SQACAToploadProgramming.VendPrice7[1];
    267a:	80 91 da 08 	lds	r24, 0x08DA	; 0x8008da <SQACAToploadProgramming+0x12>
    267e:	8d 8b       	std	Y+21, r24	; 0x15
		temp[21] = SQACAToploadProgramming.VendPrice8[0];
    2680:	80 91 db 08 	lds	r24, 0x08DB	; 0x8008db <SQACAToploadProgramming+0x13>
    2684:	8e 8b       	std	Y+22, r24	; 0x16
		temp[22] = SQACAToploadProgramming.VendPrice8[1];
    2686:	80 91 dc 08 	lds	r24, 0x08DC	; 0x8008dc <SQACAToploadProgramming+0x14>
    268a:	8f 8b       	std	Y+23, r24	; 0x17
		temp[23] = SQACAToploadProgramming.VendPrice9[0];
    268c:	80 91 dd 08 	lds	r24, 0x08DD	; 0x8008dd <SQACAToploadProgramming+0x15>
    2690:	88 8f       	std	Y+24, r24	; 0x18
		temp[24] = SQACAToploadProgramming.VendPrice9[1];
    2692:	80 91 de 08 	lds	r24, 0x08DE	; 0x8008de <SQACAToploadProgramming+0x16>
    2696:	89 8f       	std	Y+25, r24	; 0x19
		temp[25] = SQACAToploadProgramming.MediumCycle_VendPrice[0];
    2698:	80 91 df 08 	lds	r24, 0x08DF	; 0x8008df <SQACAToploadProgramming+0x17>
    269c:	8a 8f       	std	Y+26, r24	; 0x1a
		temp[26] = SQACAToploadProgramming.MediumCycle_VendPrice[1];
    269e:	80 91 e0 08 	lds	r24, 0x08E0	; 0x8008e0 <SQACAToploadProgramming+0x18>
    26a2:	8b 8f       	std	Y+27, r24	; 0x1b
		temp[27] = SQACAToploadProgramming.HeavyCycle_VendPrice[0];
    26a4:	80 91 e1 08 	lds	r24, 0x08E1	; 0x8008e1 <SQACAToploadProgramming+0x19>
    26a8:	8c 8f       	std	Y+28, r24	; 0x1c
		temp[28] = SQACAToploadProgramming.HeavyCycle_VendPrice[1];
    26aa:	80 91 e2 08 	lds	r24, 0x08E2	; 0x8008e2 <SQACAToploadProgramming+0x1a>
    26ae:	8d 8f       	std	Y+29, r24	; 0x1d
		temp[29] = SQACAToploadProgramming.HeavyCycle_option;
    26b0:	80 91 e4 08 	lds	r24, 0x08E4	; 0x8008e4 <SQACAToploadProgramming+0x1c>
    26b4:	8e 8f       	std	Y+30, r24	; 0x1e
		temp[30] = SQACAToploadProgramming.MediumCycle_option;
    26b6:	80 91 e3 08 	lds	r24, 0x08E3	; 0x8008e3 <SQACAToploadProgramming+0x1b>
    26ba:	8f 8f       	std	Y+31, r24	; 0x1f
		temp[31] = SQACAToploadProgramming.MediumCycle_extraWashTime;
    26bc:	80 91 e5 08 	lds	r24, 0x08E5	; 0x8008e5 <SQACAToploadProgramming+0x1d>
    26c0:	88 a3       	std	Y+32, r24	; 0x20
		temp[32] = SQACAToploadProgramming.MediumCycle_extraRinseTime;
    26c2:	80 91 e6 08 	lds	r24, 0x08E6	; 0x8008e6 <SQACAToploadProgramming+0x1e>
    26c6:	89 a3       	std	Y+33, r24	; 0x21
		temp[33] = SQACAToploadProgramming.HeavyCycle_extraWashTime;
    26c8:	80 91 e7 08 	lds	r24, 0x08E7	; 0x8008e7 <SQACAToploadProgramming+0x1f>
    26cc:	8a a3       	std	Y+34, r24	; 0x22
		temp[34] = SQACAToploadProgramming.HeavyCycle_extraRinseTime;
    26ce:	80 91 e8 08 	lds	r24, 0x08E8	; 0x8008e8 <SQACAToploadProgramming+0x20>
    26d2:	8b a3       	std	Y+35, r24	; 0x23
		temp[35] = SQACAToploadProgramming.NormalCycle_washAgitateTime;
    26d4:	80 91 e9 08 	lds	r24, 0x08E9	; 0x8008e9 <SQACAToploadProgramming+0x21>
    26d8:	8c a3       	std	Y+36, r24	; 0x24
		temp[36] = SQACAToploadProgramming.NormalCycle_rinseAgitateTime;
    26da:	80 91 ea 08 	lds	r24, 0x08EA	; 0x8008ea <SQACAToploadProgramming+0x22>
    26de:	8d a3       	std	Y+37, r24	; 0x25
		temp[37] = SQACAToploadProgramming.NormalCycle_rinseAgitateTime;
    26e0:	8e a3       	std	Y+38, r24	; 0x26
		temp[38] = SQACAToploadProgramming.NormalCycle_finalSpinTime;
    26e2:	80 91 ec 08 	lds	r24, 0x08EC	; 0x8008ec <SQACAToploadProgramming+0x24>
    26e6:	8f a3       	std	Y+39, r24	; 0x27
		temp[39] = SQACAToploadProgramming.PermPressCycle_washAgitateTime;
    26e8:	80 91 ed 08 	lds	r24, 0x08ED	; 0x8008ed <SQACAToploadProgramming+0x25>
    26ec:	88 a7       	std	Y+40, r24	; 0x28
		temp[40] = SQACAToploadProgramming.PermPressCycle_extraRinseAgitateTime;
    26ee:	80 91 ef 08 	lds	r24, 0x08EF	; 0x8008ef <SQACAToploadProgramming+0x27>
    26f2:	89 a7       	std	Y+41, r24	; 0x29
		temp[41] = SQACAToploadProgramming.PermPressCycle_rinseAgitateTime;
		temp[42] = SQACAToploadProgramming.PermPressCycle_finalSpinTime;
    26f4:	80 91 f0 08 	lds	r24, 0x08F0	; 0x8008f0 <SQACAToploadProgramming+0x28>
    26f8:	8b a7       	std	Y+43, r24	; 0x2b
		temp[43] = SQACAToploadProgramming.DelicateCycle_washAgitateTime;
    26fa:	80 91 f1 08 	lds	r24, 0x08F1	; 0x8008f1 <SQACAToploadProgramming+0x29>
    26fe:	8c a7       	std	Y+44, r24	; 0x2c
		temp[44] = SQACAToploadProgramming.DelicateCycle_extraRinseAgitateTime;
    2700:	80 91 f3 08 	lds	r24, 0x08F3	; 0x8008f3 <SQACAToploadProgramming+0x2b>
    2704:	8d a7       	std	Y+45, r24	; 0x2d
		temp[41] = SQACAToploadProgramming.DelicateCycle_rinseAgitateTime;
    2706:	80 91 f2 08 	lds	r24, 0x08F2	; 0x8008f2 <SQACAToploadProgramming+0x2a>
    270a:	8a a7       	std	Y+42, r24	; 0x2a
		temp[46] = SQACAToploadProgramming.DelicateCycle_finalSpinTime;
    270c:	80 91 f4 08 	lds	r24, 0x08F4	; 0x8008f4 <SQACAToploadProgramming+0x2c>
    2710:	8f a7       	std	Y+47, r24	; 0x2f
		temp[47] = SQACAToploadProgramming.DefaultCycle;
    2712:	80 91 f5 08 	lds	r24, 0x08F5	; 0x8008f5 <SQACAToploadProgramming+0x2d>
    2716:	88 ab       	std	Y+48, r24	; 0x30
		temp[48] = SQACAToploadProgramming.DefaultCycleModifier;
    2718:	80 91 f6 08 	lds	r24, 0x08F6	; 0x8008f6 <SQACAToploadProgramming+0x2e>
    271c:	89 ab       	std	Y+49, r24	; 0x31
		temp[49] = SQACAToploadProgramming.WarmRinse;
    271e:	80 91 f7 08 	lds	r24, 0x08F7	; 0x8008f7 <SQACAToploadProgramming+0x2f>
    2722:	8a ab       	std	Y+50, r24	; 0x32
		temp[50] = SQACAToploadProgramming.AudioSetting;
    2724:	80 91 f8 08 	lds	r24, 0x08F8	; 0x8008f8 <SQACAToploadProgramming+0x30>
    2728:	8b ab       	std	Y+51, r24	; 0x33
		break;
    272a:	62 cf       	rjmp	.-316    	; 0x25f0 <getSQReaderMachineSetup+0x36>
		temp[36] = SQACAFrontloadProgramming.DefaultCycleModifier;
		temp[37] = SQACAFrontloadProgramming.AudioSetting;
		break;

		case PROGRAMMING_DATA_DRYER:									//DRYER PROGRAMMING
		temp[0] = QDT_PROGRAMMING_DATA_SIZE;							//37 bytes
    272c:	85 e2       	ldi	r24, 0x25	; 37
    272e:	89 83       	std	Y+1, r24	; 0x01
		temp[1] = deviceStatus.deviceType[0];							//0x29 for Dryer Prog
    2730:	9a 83       	std	Y+2, r25	; 0x02
		temp[2] = SQACADryerProgramming.ProductByte[0];
    2732:	80 91 04 0a 	lds	r24, 0x0A04	; 0x800a04 <SQACADryerProgramming>
    2736:	8b 83       	std	Y+3, r24	; 0x03
		temp[3] = SQACADryerProgramming.ProductByte[1];
    2738:	80 91 05 0a 	lds	r24, 0x0A05	; 0x800a05 <SQACADryerProgramming+0x1>
    273c:	8c 83       	std	Y+4, r24	; 0x04
		temp[4] = SQACADryerProgramming.ProductByte[2];
    273e:	80 91 06 0a 	lds	r24, 0x0A06	; 0x800a06 <SQACADryerProgramming+0x2>
    2742:	8d 83       	std	Y+5, r24	; 0x05
		temp[5] = SQACADryerProgramming.ProductByte[3];
    2744:	80 91 07 0a 	lds	r24, 0x0A07	; 0x800a07 <SQACADryerProgramming+0x3>
    2748:	8e 83       	std	Y+6, r24	; 0x06
		temp[6] = SQACADryerProgramming.ProductByte[4];
    274a:	80 91 08 0a 	lds	r24, 0x0A08	; 0x800a08 <SQACADryerProgramming+0x4>
    274e:	8f 83       	std	Y+7, r24	; 0x07
		temp[7] = SQACADryerProgramming.HeatVendPrice1[0];				//Heat Vend Price
    2750:	80 91 09 0a 	lds	r24, 0x0A09	; 0x800a09 <SQACADryerProgramming+0x5>
    2754:	88 87       	std	Y+8, r24	; 0x08
		temp[8] = SQACADryerProgramming.HeatVendPrice1[1];
    2756:	80 91 0a 0a 	lds	r24, 0x0A0A	; 0x800a0a <SQACADryerProgramming+0x6>
    275a:	89 87       	std	Y+9, r24	; 0x09
		temp[9] = SQACADryerProgramming.NoHeatVendPrice[0];				//No Heat Vend Price
    275c:	80 91 11 0a 	lds	r24, 0x0A11	; 0x800a11 <SQACADryerProgramming+0xd>
    2760:	8a 87       	std	Y+10, r24	; 0x0a
		temp[10] = SQACADryerProgramming.NoHeatVendPrice[1];
    2762:	80 91 12 0a 	lds	r24, 0x0A12	; 0x800a12 <SQACADryerProgramming+0xe>
    2766:	8b 87       	std	Y+11, r24	; 0x0b
		temp[13] = SQACADryerProgramming.PaymSTopoffOn;					//Top-Off On/Off
    2768:	80 91 13 0a 	lds	r24, 0x0A13	; 0x800a13 <SQACADryerProgramming+0xf>
    276c:	8e 87       	std	Y+14, r24	; 0x0e
		temp[11] = SQACADryerProgramming.PaymSTopoffPrice[0];			//Payment System Top-Off Vend Price
    276e:	80 91 14 0a 	lds	r24, 0x0A14	; 0x800a14 <SQACADryerProgramming+0x10>
    2772:	8c 87       	std	Y+12, r24	; 0x0c
		temp[12] = SQACADryerProgramming.PaymSTopoffPrice[1];
    2774:	80 91 15 0a 	lds	r24, 0x0A15	; 0x800a15 <SQACADryerProgramming+0x11>
    2778:	8d 87       	std	Y+13, r24	; 0x0d
		temp[14] = SQACADryerProgramming.PaymSTopoffMinutes;			//Payment System Top-Off Time
    277a:	80 91 16 0a 	lds	r24, 0x0A16	; 0x800a16 <SQACADryerProgramming+0x12>
    277e:	8f 87       	std	Y+15, r24	; 0x0f
		temp[15] = SQACADryerProgramming.PaymSTopoffSeconds;
    2780:	80 91 17 0a 	lds	r24, 0x0A17	; 0x800a17 <SQACADryerProgramming+0x13>
    2784:	88 8b       	std	Y+16, r24	; 0x10
		temp[16] = SQACADryerProgramming.Coin1TopoffMinutes;			//Coin #1 Top-off Time
    2786:	80 91 18 0a 	lds	r24, 0x0A18	; 0x800a18 <SQACADryerProgramming+0x14>
    278a:	89 8b       	std	Y+17, r24	; 0x11
		temp[17] = SQACADryerProgramming.Coin1TopoffSeconds;
    278c:	80 91 19 0a 	lds	r24, 0x0A19	; 0x800a19 <SQACADryerProgramming+0x15>
    2790:	8a 8b       	std	Y+18, r24	; 0x12
		temp[18] = SQACADryerProgramming.Coin2TopoffMinutes;			//Coin #2 Top-off Time
    2792:	80 91 1a 0a 	lds	r24, 0x0A1A	; 0x800a1a <SQACADryerProgramming+0x16>
    2796:	8b 8b       	std	Y+19, r24	; 0x13
		temp[19] = SQACADryerProgramming.Coin2TopoffSeconds;
    2798:	80 91 1b 0a 	lds	r24, 0x0A1B	; 0x800a1b <SQACADryerProgramming+0x17>
    279c:	8c 8b       	std	Y+20, r24	; 0x14
		temp[20] = SQACADryerProgramming.HeatCycleMinutes;				//Heat Cycle Time
    279e:	80 91 1c 0a 	lds	r24, 0x0A1C	; 0x800a1c <SQACADryerProgramming+0x18>
    27a2:	8d 8b       	std	Y+21, r24	; 0x15
		temp[21] = SQACADryerProgramming.HeatCycleSeconds;
    27a4:	80 91 1d 0a 	lds	r24, 0x0A1D	; 0x800a1d <SQACADryerProgramming+0x19>
    27a8:	8e 8b       	std	Y+22, r24	; 0x16
		temp[22] = SQACADryerProgramming.NoHeatCycleMinutes;			//No Heat Cycle Time
    27aa:	80 91 1e 0a 	lds	r24, 0x0A1E	; 0x800a1e <SQACADryerProgramming+0x1a>
    27ae:	8f 8b       	std	Y+23, r24	; 0x17
		temp[23] = SQACADryerProgramming.NoHeatCycleSeconds;
    27b0:	80 91 1f 0a 	lds	r24, 0x0A1F	; 0x800a1f <SQACADryerProgramming+0x1b>
    27b4:	88 8f       	std	Y+24, r24	; 0x18
		temp[24] = SQACADryerProgramming.HighCoolDownTime;				//High Temperature Cool Down Time (Minutes)
    27b6:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <SQACADryerProgramming+0x1c>
    27ba:	89 8f       	std	Y+25, r24	; 0x19
		temp[25] = SQACADryerProgramming.MediumCoolDownTime;			//Medium Temperature Cool Down Time (Minutes)
    27bc:	80 91 21 0a 	lds	r24, 0x0A21	; 0x800a21 <SQACADryerProgramming+0x1d>
    27c0:	8a 8f       	std	Y+26, r24	; 0x1a
		temp[26] = SQACADryerProgramming.LowCoolDownTime;				//Low Temperature Cool Down Time (Minutes)
    27c2:	80 91 22 0a 	lds	r24, 0x0A22	; 0x800a22 <SQACADryerProgramming+0x1e>
    27c6:	8b 8f       	std	Y+27, r24	; 0x1b
		temp[27] = SQACADryerProgramming.DelicateCoolDownTime;			//Delicate Temperature Cool Down Time (Minutes)
    27c8:	80 91 23 0a 	lds	r24, 0x0A23	; 0x800a23 <SQACADryerProgramming+0x1f>
    27cc:	8c 8f       	std	Y+28, r24	; 0x1c
		temp[28] = SQACADryerProgramming.HighTempSetting;				//High Temperature
    27ce:	80 91 24 0a 	lds	r24, 0x0A24	; 0x800a24 <SQACADryerProgramming+0x20>
    27d2:	8d 8f       	std	Y+29, r24	; 0x1d
		temp[29] = SQACADryerProgramming.MediumTempSetting;
    27d4:	80 91 25 0a 	lds	r24, 0x0A25	; 0x800a25 <SQACADryerProgramming+0x21>
    27d8:	8e 8f       	std	Y+30, r24	; 0x1e
		temp[30] = SQACADryerProgramming.LowTempSetting;				//Low Temperature
    27da:	80 91 26 0a 	lds	r24, 0x0A26	; 0x800a26 <SQACADryerProgramming+0x22>
    27de:	8f 8f       	std	Y+31, r24	; 0x1f
		temp[31] = SQACADryerProgramming.DelicateTempSetting;
    27e0:	80 91 27 0a 	lds	r24, 0x0A27	; 0x800a27 <SQACADryerProgramming+0x23>
    27e4:	88 a3       	std	Y+32, r24	; 0x20
		temp[32] = SQACADryerProgramming.DefaultCycle;					//Default Cycle
    27e6:	80 91 28 0a 	lds	r24, 0x0A28	; 0x800a28 <SQACADryerProgramming+0x24>
    27ea:	89 a3       	std	Y+33, r24	; 0x21
		temp[33] = SQACADryerProgramming.AudioSetting;					//Audio
    27ec:	80 91 29 0a 	lds	r24, 0x0A29	; 0x800a29 <SQACADryerProgramming+0x25>
    27f0:	8a a3       	std	Y+34, r24	; 0x22
		temp[34] = SQACADryerProgramming.AudioEnable1;					//Anti-Wrinkle Audio Enable
    27f2:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <SQACADryerProgramming+0x26>
    27f6:	8b a3       	std	Y+35, r24	; 0x23
		temp[35] = SQACADryerProgramming.AudioEnable2;					//Extended Tumble Audio Enable
    27f8:	80 91 2b 0a 	lds	r24, 0x0A2B	; 0x800a2b <SQACADryerProgramming+0x27>
    27fc:	8c a3       	std	Y+36, r24	; 0x24
		temp[36] = SQACADryerProgramming.DisplaySetting1;				//Fahrenheit / Celsius
    27fe:	80 91 2c 0a 	lds	r24, 0x0A2C	; 0x800a2c <SQACADryerProgramming+0x28>
    2802:	8d a3       	std	Y+37, r24	; 0x25
		temp[37] = SQACADryerProgramming.DisplaySetting2;				//Minutes / Minutes & Seconds Display
    2804:	80 91 2d 0a 	lds	r24, 0x0A2D	; 0x800a2d <SQACADryerProgramming+0x29>
    2808:	8e a3       	std	Y+38, r24	; 0x26
		
		break;
    280a:	f2 ce       	rjmp	.-540    	; 0x25f0 <getSQReaderMachineSetup+0x36>
		temp[49] = SQACAToploadProgramming.WarmRinse;
		temp[50] = SQACAToploadProgramming.AudioSetting;
		break;

		case PROGRAMMING_DATA_FRONTLOAD:
		temp[0] = QTL_PROGRAMMING_DATA_SIZE;					//37 bytes
    280c:	82 e3       	ldi	r24, 0x32	; 50
    280e:	89 83       	std	Y+1, r24	; 0x01
		temp[1] = deviceStatus.deviceType[0];					//0x22 (FLW Prog)
    2810:	9a 83       	std	Y+2, r25	; 0x02
		temp[2] = SQACAFrontloadProgramming.ProductByte[0];
    2812:	80 91 a2 08 	lds	r24, 0x08A2	; 0x8008a2 <SQACAFrontloadProgramming>
    2816:	8b 83       	std	Y+3, r24	; 0x03
		temp[3] = SQACAFrontloadProgramming.ProductByte[1];
    2818:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <SQACAFrontloadProgramming+0x1>
    281c:	8c 83       	std	Y+4, r24	; 0x04
		temp[4] = SQACAFrontloadProgramming.ProductByte[2];
    281e:	80 91 a4 08 	lds	r24, 0x08A4	; 0x8008a4 <SQACAFrontloadProgramming+0x2>
    2822:	8d 83       	std	Y+5, r24	; 0x05
		temp[5] = SQACAFrontloadProgramming.ProductByte[3];
    2824:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <SQACAFrontloadProgramming+0x3>
    2828:	8e 83       	std	Y+6, r24	; 0x06
		temp[6] = SQACAFrontloadProgramming.ProductByte[4];
    282a:	80 91 a6 08 	lds	r24, 0x08A6	; 0x8008a6 <SQACAFrontloadProgramming+0x4>
    282e:	8f 83       	std	Y+7, r24	; 0x07
		temp[7] = SQACAFrontloadProgramming.VendPrice1[0];
    2830:	80 91 a7 08 	lds	r24, 0x08A7	; 0x8008a7 <SQACAFrontloadProgramming+0x5>
    2834:	88 87       	std	Y+8, r24	; 0x08
		temp[8] = SQACAFrontloadProgramming.VendPrice1[1];
    2836:	80 91 a8 08 	lds	r24, 0x08A8	; 0x8008a8 <SQACAFrontloadProgramming+0x6>
    283a:	89 87       	std	Y+9, r24	; 0x09
		temp[9] = SQACAFrontloadProgramming.VendPrice2[0];
    283c:	80 91 a9 08 	lds	r24, 0x08A9	; 0x8008a9 <SQACAFrontloadProgramming+0x7>
    2840:	8a 87       	std	Y+10, r24	; 0x0a
		temp[10] = SQACAFrontloadProgramming.VendPrice2[1];
    2842:	80 91 aa 08 	lds	r24, 0x08AA	; 0x8008aa <SQACAFrontloadProgramming+0x8>
    2846:	8b 87       	std	Y+11, r24	; 0x0b
		temp[11] = SQACAFrontloadProgramming.VendPrice3[0];
    2848:	80 91 ab 08 	lds	r24, 0x08AB	; 0x8008ab <SQACAFrontloadProgramming+0x9>
    284c:	8c 87       	std	Y+12, r24	; 0x0c
		temp[12] = SQACAFrontloadProgramming.VendPrice3[1];
    284e:	80 91 ac 08 	lds	r24, 0x08AC	; 0x8008ac <SQACAFrontloadProgramming+0xa>
    2852:	8d 87       	std	Y+13, r24	; 0x0d
		temp[13] = SQACAFrontloadProgramming.VendPrice4[0];
    2854:	80 91 ad 08 	lds	r24, 0x08AD	; 0x8008ad <SQACAFrontloadProgramming+0xb>
    2858:	8e 87       	std	Y+14, r24	; 0x0e
		temp[14] = SQACAFrontloadProgramming.VendPrice4[1];
    285a:	80 91 ae 08 	lds	r24, 0x08AE	; 0x8008ae <SQACAFrontloadProgramming+0xc>
    285e:	8f 87       	std	Y+15, r24	; 0x0f
		temp[15] = SQACAFrontloadProgramming.VendPrice5[0];
    2860:	80 91 af 08 	lds	r24, 0x08AF	; 0x8008af <SQACAFrontloadProgramming+0xd>
    2864:	88 8b       	std	Y+16, r24	; 0x10
		temp[16] = SQACAFrontloadProgramming.VendPrice5[1];
    2866:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <SQACAFrontloadProgramming+0xe>
    286a:	89 8b       	std	Y+17, r24	; 0x11
		temp[17] = SQACAFrontloadProgramming.VendPrice6[0];
    286c:	80 91 b1 08 	lds	r24, 0x08B1	; 0x8008b1 <SQACAFrontloadProgramming+0xf>
    2870:	8a 8b       	std	Y+18, r24	; 0x12
		temp[18] = SQACAFrontloadProgramming.VendPrice6[1];
    2872:	80 91 b2 08 	lds	r24, 0x08B2	; 0x8008b2 <SQACAFrontloadProgramming+0x10>
    2876:	8b 8b       	std	Y+19, r24	; 0x13
		temp[19] = SQACAFrontloadProgramming.VendPrice7[0];
    2878:	80 91 b3 08 	lds	r24, 0x08B3	; 0x8008b3 <SQACAFrontloadProgramming+0x11>
    287c:	8c 8b       	std	Y+20, r24	; 0x14
		temp[20] = SQACAFrontloadProgramming.VendPrice7[1];
    287e:	80 91 b4 08 	lds	r24, 0x08B4	; 0x8008b4 <SQACAFrontloadProgramming+0x12>
    2882:	8d 8b       	std	Y+21, r24	; 0x15
		temp[21] = SQACAFrontloadProgramming.VendPrice8[0];
    2884:	80 91 b5 08 	lds	r24, 0x08B5	; 0x8008b5 <SQACAFrontloadProgramming+0x13>
    2888:	8e 8b       	std	Y+22, r24	; 0x16
		temp[22] = SQACAFrontloadProgramming.VendPrice8[1];
    288a:	80 91 b6 08 	lds	r24, 0x08B6	; 0x8008b6 <SQACAFrontloadProgramming+0x14>
    288e:	8f 8b       	std	Y+23, r24	; 0x17
		temp[23] = SQACAFrontloadProgramming.VendPrice9[0];
    2890:	80 91 b7 08 	lds	r24, 0x08B7	; 0x8008b7 <SQACAFrontloadProgramming+0x15>
    2894:	88 8f       	std	Y+24, r24	; 0x18
		temp[24] = SQACAFrontloadProgramming.VendPrice9[1];
    2896:	80 91 b8 08 	lds	r24, 0x08B8	; 0x8008b8 <SQACAFrontloadProgramming+0x16>
    289a:	89 8f       	std	Y+25, r24	; 0x19
		temp[25] = SQACAFrontloadProgramming.MediumCycle_VendPrice[0];
    289c:	80 91 b9 08 	lds	r24, 0x08B9	; 0x8008b9 <SQACAFrontloadProgramming+0x17>
    28a0:	8a 8f       	std	Y+26, r24	; 0x1a
		temp[26] = SQACAFrontloadProgramming.MediumCycle_VendPrice[1];
    28a2:	80 91 ba 08 	lds	r24, 0x08BA	; 0x8008ba <SQACAFrontloadProgramming+0x18>
    28a6:	8b 8f       	std	Y+27, r24	; 0x1b
		temp[27] = SQACAFrontloadProgramming.HeavyCycle_VendPrice[0];
    28a8:	80 91 bb 08 	lds	r24, 0x08BB	; 0x8008bb <SQACAFrontloadProgramming+0x19>
    28ac:	8c 8f       	std	Y+28, r24	; 0x1c
		temp[28] = SQACAFrontloadProgramming.HeavyCycle_VendPrice[1];
    28ae:	80 91 bc 08 	lds	r24, 0x08BC	; 0x8008bc <SQACAFrontloadProgramming+0x1a>
    28b2:	8d 8f       	std	Y+29, r24	; 0x1d
		temp[29] = SQACAFrontloadProgramming.HeavyCycle_option;
    28b4:	80 91 be 08 	lds	r24, 0x08BE	; 0x8008be <SQACAFrontloadProgramming+0x1c>
    28b8:	8e 8f       	std	Y+30, r24	; 0x1e
		temp[30] = SQACAFrontloadProgramming.MediumCycle_option;
    28ba:	80 91 bd 08 	lds	r24, 0x08BD	; 0x8008bd <SQACAFrontloadProgramming+0x1b>
    28be:	8f 8f       	std	Y+31, r24	; 0x1f
		temp[31] = SQACAFrontloadProgramming.MediumCycle_extraWashTime;
    28c0:	80 91 bf 08 	lds	r24, 0x08BF	; 0x8008bf <SQACAFrontloadProgramming+0x1d>
    28c4:	88 a3       	std	Y+32, r24	; 0x20
		temp[32] = SQACAFrontloadProgramming.MediumCycle_extraRinseTime;
    28c6:	80 91 c0 08 	lds	r24, 0x08C0	; 0x8008c0 <SQACAFrontloadProgramming+0x1e>
    28ca:	89 a3       	std	Y+33, r24	; 0x21
		temp[33] = SQACAFrontloadProgramming.HeavyCycle_extraWashTime;
    28cc:	80 91 c1 08 	lds	r24, 0x08C1	; 0x8008c1 <SQACAFrontloadProgramming+0x1f>
    28d0:	8a a3       	std	Y+34, r24	; 0x22
		temp[34] = SQACAFrontloadProgramming.HeavyCycle_extraRinseTime;
    28d2:	80 91 c2 08 	lds	r24, 0x08C2	; 0x8008c2 <SQACAFrontloadProgramming+0x20>
    28d6:	8b a3       	std	Y+35, r24	; 0x23
		temp[35] = SQACAFrontloadProgramming.DefaultCycle;
    28d8:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <SQACAFrontloadProgramming+0x21>
    28dc:	8c a3       	std	Y+36, r24	; 0x24
		temp[36] = SQACAFrontloadProgramming.DefaultCycleModifier;
    28de:	80 91 c4 08 	lds	r24, 0x08C4	; 0x8008c4 <SQACAFrontloadProgramming+0x22>
    28e2:	8d a3       	std	Y+37, r24	; 0x25
		temp[37] = SQACAFrontloadProgramming.AudioSetting;
    28e4:	80 91 c5 08 	lds	r24, 0x08C5	; 0x8008c5 <SQACAFrontloadProgramming+0x23>
    28e8:	8e a3       	std	Y+38, r24	; 0x26
		break;
    28ea:	82 ce       	rjmp	.-764    	; 0x25f0 <getSQReaderMachineSetup+0x36>

000028ec <initReader>:
	char nibbleStr[50] = {"00770076007500740073007200710070006F00190503"};
	char *ptr = &nibbleStr[0] ;
	n = asciiStringToNibble(ptr, nibbleStr); //position at eeprom address 0x24
	
	halPutEeprom(MACHINE_SETUP_ADDR, n, (u8*)ptr);
}
    28ec:	44 e3       	ldi	r20, 0x34	; 52
    28ee:	59 e0       	ldi	r21, 0x09	; 9
    28f0:	62 e0       	ldi	r22, 0x02	; 2
    28f2:	82 e2       	ldi	r24, 0x22	; 34
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	0e 94 a4 20 	call	0x4148	; 0x4148 <halGetEeprom>
    28fa:	41 ef       	ldi	r20, 0xF1	; 241
    28fc:	5a e0       	ldi	r21, 0x0A	; 10
    28fe:	62 e0       	ldi	r22, 0x02	; 2
    2900:	8e e1       	ldi	r24, 0x1E	; 30
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	0e 94 a4 20 	call	0x4148	; 0x4148 <halGetEeprom>
    2908:	10 92 ba 09 	sts	0x09BA, r1	; 0x8009ba <ReaderSetup>
    290c:	10 92 bb 09 	sts	0x09BB, r1	; 0x8009bb <ReaderSetup+0x1>
    2910:	10 92 bc 09 	sts	0x09BC, r1	; 0x8009bc <ReaderSetup+0x2>
    2914:	10 92 bd 09 	sts	0x09BD, r1	; 0x8009bd <ReaderSetup+0x3>
    2918:	81 e0       	ldi	r24, 0x01	; 1
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	90 93 bf 09 	sts	0x09BF, r25	; 0x8009bf <ReaderSetup+0x5>
    2920:	80 93 be 09 	sts	0x09BE, r24	; 0x8009be <ReaderSetup+0x4>
    2924:	90 93 c1 09 	sts	0x09C1, r25	; 0x8009c1 <ReaderSetup+0x7>
    2928:	80 93 c0 09 	sts	0x09C0, r24	; 0x8009c0 <ReaderSetup+0x6>
    292c:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <ReaderStateFlag>
    2930:	8f 7b       	andi	r24, 0xBF	; 191
    2932:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <ReaderStateFlag>
    2936:	81 fd       	sbrc	r24, 1
    2938:	08 95       	ret
    293a:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <getSQSetupData>
    293e:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <ReaderStateFlag>
    2942:	84 60       	ori	r24, 0x04	; 4
    2944:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <ReaderStateFlag>
    2948:	42 ec       	ldi	r20, 0xC2	; 194
    294a:	59 e0       	ldi	r21, 0x09	; 9
    294c:	61 e0       	ldi	r22, 0x01	; 1
    294e:	81 e6       	ldi	r24, 0x61	; 97
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	0e 94 a4 20 	call	0x4148	; 0x4148 <halGetEeprom>
    2956:	80 91 c2 09 	lds	r24, 0x09C2	; 0x8009c2 <ReaderSetup+0x8>
    295a:	81 11       	cpse	r24, r1
    295c:	1c c0       	rjmp	.+56     	; 0x2996 <initReader+0xaa>
    295e:	8b e0       	ldi	r24, 0x0B	; 11
    2960:	e7 ef       	ldi	r30, 0xF7	; 247
    2962:	f9 e0       	ldi	r31, 0x09	; 9
    2964:	df 01       	movw	r26, r30
    2966:	1d 92       	st	X+, r1
    2968:	8a 95       	dec	r24
    296a:	e9 f7       	brne	.-6      	; 0x2966 <initReader+0x7a>
    296c:	83 e3       	ldi	r24, 0x33	; 51
    296e:	e4 ec       	ldi	r30, 0xC4	; 196
    2970:	f9 e0       	ldi	r31, 0x09	; 9
    2972:	df 01       	movw	r26, r30
    2974:	1d 92       	st	X+, r1
    2976:	8a 95       	dec	r24
    2978:	e9 f7       	brne	.-6      	; 0x2974 <initReader+0x88>
    297a:	47 ef       	ldi	r20, 0xF7	; 247
    297c:	59 e0       	ldi	r21, 0x09	; 9
    297e:	6a e0       	ldi	r22, 0x0A	; 10
    2980:	8c e6       	ldi	r24, 0x6C	; 108
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	0e 94 a4 20 	call	0x4148	; 0x4148 <halGetEeprom>
    2988:	44 ec       	ldi	r20, 0xC4	; 196
    298a:	59 e0       	ldi	r21, 0x09	; 9
    298c:	62 e3       	ldi	r22, 0x32	; 50
    298e:	87 e7       	ldi	r24, 0x77	; 119
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	0c 94 a4 20 	jmp	0x4148	; 0x4148 <halGetEeprom>
    2996:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <ReaderStateFlag>
    299a:	88 60       	ori	r24, 0x08	; 8
    299c:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <ReaderStateFlag>
    29a0:	43 ec       	ldi	r20, 0xC3	; 195
    29a2:	59 e0       	ldi	r21, 0x09	; 9
    29a4:	61 e0       	ldi	r22, 0x01	; 1
    29a6:	80 e0       	ldi	r24, 0x00	; 0
    29a8:	91 e0       	ldi	r25, 0x01	; 1
    29aa:	0e 94 a4 20 	call	0x4148	; 0x4148 <halGetEeprom>
    29ae:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    29b2:	8f 3f       	cpi	r24, 0xFF	; 255
    29b4:	a1 f6       	brne	.-88     	; 0x295e <initReader+0x72>
    29b6:	10 92 c3 09 	sts	0x09C3, r1	; 0x8009c3 <ReaderSetup+0x9>
    29ba:	43 ec       	ldi	r20, 0xC3	; 195
    29bc:	59 e0       	ldi	r21, 0x09	; 9
    29be:	61 e0       	ldi	r22, 0x01	; 1
    29c0:	80 e0       	ldi	r24, 0x00	; 0
    29c2:	91 e0       	ldi	r25, 0x01	; 1
    29c4:	0e 94 b9 20 	call	0x4172	; 0x4172 <halPutEeprom>
    29c8:	ca cf       	rjmp	.-108    	; 0x295e <initReader+0x72>

000029ca <storeOfflineTransaction>:
    29ca:	cf 93       	push	r28
    29cc:	df 93       	push	r29
    29ce:	cd b7       	in	r28, 0x3d	; 61
    29d0:	de b7       	in	r29, 0x3e	; 62
    29d2:	67 97       	sbiw	r28, 0x17	; 23
    29d4:	0f b6       	in	r0, 0x3f	; 63
    29d6:	f8 94       	cli
    29d8:	de bf       	out	0x3e, r29	; 62
    29da:	0f be       	out	0x3f, r0	; 63
    29dc:	cd bf       	out	0x3d, r28	; 61
    29de:	21 e0       	ldi	r18, 0x01	; 1
    29e0:	2f 8b       	std	Y+23, r18	; 0x17
    29e2:	28 e1       	ldi	r18, 0x18	; 24
    29e4:	2e 8b       	std	Y+22, r18	; 0x16
    29e6:	6a 87       	std	Y+10, r22	; 0x0a
    29e8:	7b 87       	std	Y+11, r23	; 0x0b
    29ea:	8c 87       	std	Y+12, r24	; 0x0c
    29ec:	9d 87       	std	Y+13, r25	; 0x0d
    29ee:	80 91 c0 09 	lds	r24, 0x09C0	; 0x8009c0 <ReaderSetup+0x6>
    29f2:	90 91 c1 09 	lds	r25, 0x09C1	; 0x8009c1 <ReaderSetup+0x7>
    29f6:	9a 83       	std	Y+2, r25	; 0x02
    29f8:	89 83       	std	Y+1, r24	; 0x01
    29fa:	80 91 f5 0a 	lds	r24, 0x0AF5	; 0x800af5 <SQACAMachineStatus>
    29fe:	8b 83       	std	Y+3, r24	; 0x03
    2a00:	80 91 f6 0a 	lds	r24, 0x0AF6	; 0x800af6 <SQACAMachineStatus+0x1>
    2a04:	8c 83       	std	Y+4, r24	; 0x04
    2a06:	80 91 f7 0a 	lds	r24, 0x0AF7	; 0x800af7 <SQACAMachineStatus+0x2>
    2a0a:	8f 83       	std	Y+7, r24	; 0x07
    2a0c:	20 91 be 09 	lds	r18, 0x09BE	; 0x8009be <ReaderSetup+0x4>
    2a10:	30 91 bf 09 	lds	r19, 0x09BF	; 0x8009bf <ReaderSetup+0x5>
    2a14:	3e 83       	std	Y+6, r19	; 0x06
    2a16:	2d 83       	std	Y+5, r18	; 0x05
    2a18:	90 91 f1 0a 	lds	r25, 0x0AF1	; 0x800af1 <deviceStatus>
    2a1c:	92 32       	cpi	r25, 0x22	; 34
    2a1e:	09 f4       	brne	.+2      	; 0x2a22 <storeOfflineTransaction+0x58>
    2a20:	6d c0       	rjmp	.+218    	; 0x2afc <storeOfflineTransaction+0x132>
    2a22:	99 32       	cpi	r25, 0x29	; 41
    2a24:	09 f4       	brne	.+2      	; 0x2a28 <storeOfflineTransaction+0x5e>
    2a26:	5b c0       	rjmp	.+182    	; 0x2ade <storeOfflineTransaction+0x114>
    2a28:	91 32       	cpi	r25, 0x21	; 33
    2a2a:	09 f4       	brne	.+2      	; 0x2a2e <storeOfflineTransaction+0x64>
    2a2c:	4c c0       	rjmp	.+152    	; 0x2ac6 <storeOfflineTransaction+0xfc>
    2a2e:	1e 86       	std	Y+14, r1	; 0x0e
    2a30:	1f 86       	std	Y+15, r1	; 0x0f
    2a32:	18 8a       	std	Y+16, r1	; 0x10
    2a34:	19 8a       	std	Y+17, r1	; 0x11
    2a36:	1a 8a       	std	Y+18, r1	; 0x12
    2a38:	1b 8a       	std	Y+19, r1	; 0x13
    2a3a:	1c 8a       	std	Y+20, r1	; 0x14
    2a3c:	81 e0       	ldi	r24, 0x01	; 1
    2a3e:	8d 8b       	std	Y+21, r24	; 0x15
    2a40:	43 ec       	ldi	r20, 0xC3	; 195
    2a42:	59 e0       	ldi	r21, 0x09	; 9
    2a44:	61 e0       	ldi	r22, 0x01	; 1
    2a46:	80 e0       	ldi	r24, 0x00	; 0
    2a48:	91 e0       	ldi	r25, 0x01	; 1
    2a4a:	0e 94 a4 20 	call	0x4148	; 0x4148 <halGetEeprom>
    2a4e:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    2a52:	8f 3f       	cpi	r24, 0xFF	; 255
    2a54:	09 f4       	brne	.+2      	; 0x2a58 <storeOfflineTransaction+0x8e>
    2a56:	ad c0       	rjmp	.+346    	; 0x2bb2 <storeOfflineTransaction+0x1e8>
    2a58:	90 91 c2 09 	lds	r25, 0x09C2	; 0x8009c2 <ReaderSetup+0x8>
    2a5c:	89 17       	cp	r24, r25
    2a5e:	08 f0       	brcs	.+2      	; 0x2a62 <storeOfflineTransaction+0x98>
    2a60:	55 c0       	rjmp	.+170    	; 0x2b0c <storeOfflineTransaction+0x142>
    2a62:	9f ef       	ldi	r25, 0xFF	; 255
    2a64:	98 0f       	add	r25, r24
    2a66:	9e 3f       	cpi	r25, 0xFE	; 254
    2a68:	08 f0       	brcs	.+2      	; 0x2a6c <storeOfflineTransaction+0xa2>
    2a6a:	a3 c0       	rjmp	.+326    	; 0x2bb2 <storeOfflineTransaction+0x1e8>
    2a6c:	25 e1       	ldi	r18, 0x15	; 21
    2a6e:	82 9f       	mul	r24, r18
    2a70:	c0 01       	movw	r24, r0
    2a72:	11 24       	eor	r1, r1
    2a74:	ae 01       	movw	r20, r28
    2a76:	4f 5f       	subi	r20, 0xFF	; 255
    2a78:	5f 4f       	sbci	r21, 0xFF	; 255
    2a7a:	65 e1       	ldi	r22, 0x15	; 21
    2a7c:	88 5e       	subi	r24, 0xE8	; 232
    2a7e:	9e 4f       	sbci	r25, 0xFE	; 254
    2a80:	0e 94 b9 20 	call	0x4172	; 0x4172 <halPutEeprom>
    2a84:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    2a88:	8f 5f       	subi	r24, 0xFF	; 255
    2a8a:	80 93 c3 09 	sts	0x09C3, r24	; 0x8009c3 <ReaderSetup+0x9>
    2a8e:	43 ec       	ldi	r20, 0xC3	; 195
    2a90:	59 e0       	ldi	r21, 0x09	; 9
    2a92:	61 e0       	ldi	r22, 0x01	; 1
    2a94:	80 e0       	ldi	r24, 0x00	; 0
    2a96:	91 e0       	ldi	r25, 0x01	; 1
    2a98:	0e 94 b9 20 	call	0x4172	; 0x4172 <halPutEeprom>
    2a9c:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <ReaderStateFlag>
    2aa0:	85 ff       	sbrs	r24, 5
    2aa2:	94 c0       	rjmp	.+296    	; 0x2bcc <storeOfflineTransaction+0x202>
    2aa4:	90 91 c3 09 	lds	r25, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    2aa8:	80 91 c2 09 	lds	r24, 0x09C2	; 0x8009c2 <ReaderSetup+0x8>
    2aac:	98 17       	cp	r25, r24
    2aae:	09 f4       	brne	.+2      	; 0x2ab2 <storeOfflineTransaction+0xe8>
    2ab0:	98 c0       	rjmp	.+304    	; 0x2be2 <storeOfflineTransaction+0x218>
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
    2ab4:	67 96       	adiw	r28, 0x17	; 23
    2ab6:	0f b6       	in	r0, 0x3f	; 63
    2ab8:	f8 94       	cli
    2aba:	de bf       	out	0x3e, r29	; 62
    2abc:	0f be       	out	0x3f, r0	; 63
    2abe:	cd bf       	out	0x3d, r28	; 61
    2ac0:	df 91       	pop	r29
    2ac2:	cf 91       	pop	r28
    2ac4:	08 95       	ret
    2ac6:	48 2f       	mov	r20, r24
    2ac8:	50 e0       	ldi	r21, 0x00	; 0
    2aca:	fa 01       	movw	r30, r20
    2acc:	31 97       	sbiw	r30, 0x01	; 1
    2ace:	e9 30       	cpi	r30, 0x09	; 9
    2ad0:	f1 05       	cpc	r31, r1
    2ad2:	b0 f1       	brcs	.+108    	; 0x2b40 <storeOfflineTransaction+0x176>
    2ad4:	fa 01       	movw	r30, r20
    2ad6:	31 97       	sbiw	r30, 0x01	; 1
    2ad8:	e9 30       	cpi	r30, 0x09	; 9
    2ada:	f1 05       	cpc	r31, r1
    2adc:	68 f1       	brcs	.+90     	; 0x2b38 <storeOfflineTransaction+0x16e>
    2ade:	83 30       	cpi	r24, 0x03	; 3
    2ae0:	f1 f1       	breq	.+124    	; 0x2b5e <storeOfflineTransaction+0x194>
    2ae2:	90 f1       	brcs	.+100    	; 0x2b48 <storeOfflineTransaction+0x17e>
    2ae4:	84 30       	cpi	r24, 0x04	; 4
    2ae6:	09 f4       	brne	.+2      	; 0x2aea <storeOfflineTransaction+0x120>
    2ae8:	40 c0       	rjmp	.+128    	; 0x2b6a <storeOfflineTransaction+0x1a0>
    2aea:	85 30       	cpi	r24, 0x05	; 5
    2aec:	09 f0       	breq	.+2      	; 0x2af0 <storeOfflineTransaction+0x126>
    2aee:	9f cf       	rjmp	.-194    	; 0x2a2e <storeOfflineTransaction+0x64>
    2af0:	80 91 10 0a 	lds	r24, 0x0A10	; 0x800a10 <SQACADryerProgramming+0xc>
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	99 87       	std	Y+9, r25	; 0x09
    2af8:	88 87       	std	Y+8, r24	; 0x08
    2afa:	99 cf       	rjmp	.-206    	; 0x2a2e <storeOfflineTransaction+0x64>
    2afc:	48 2f       	mov	r20, r24
    2afe:	50 e0       	ldi	r21, 0x00	; 0
    2b00:	fa 01       	movw	r30, r20
    2b02:	31 97       	sbiw	r30, 0x01	; 1
    2b04:	e9 30       	cpi	r30, 0x09	; 9
    2b06:	f1 05       	cpc	r31, r1
    2b08:	50 f7       	brcc	.-44     	; 0x2ade <storeOfflineTransaction+0x114>
    2b0a:	16 c0       	rjmp	.+44     	; 0x2b38 <storeOfflineTransaction+0x16e>
    2b0c:	44 e3       	ldi	r20, 0x34	; 52
    2b0e:	59 e0       	ldi	r21, 0x09	; 9
    2b10:	61 e0       	ldi	r22, 0x01	; 1
    2b12:	82 e2       	ldi	r24, 0x22	; 34
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	0e 94 a4 20 	call	0x4148	; 0x4148 <halGetEeprom>
    2b1a:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <ReaderStateFlag>
    2b1e:	87 7f       	andi	r24, 0xF7	; 247
    2b20:	80 61       	ori	r24, 0x10	; 16
    2b22:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <ReaderStateFlag>
    2b26:	44 e3       	ldi	r20, 0x34	; 52
    2b28:	59 e0       	ldi	r21, 0x09	; 9
    2b2a:	61 e0       	ldi	r22, 0x01	; 1
    2b2c:	82 e2       	ldi	r24, 0x22	; 34
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	0e 94 b9 20 	call	0x4172	; 0x4172 <halPutEeprom>
    2b34:	80 e0       	ldi	r24, 0x00	; 0
    2b36:	be cf       	rjmp	.-132    	; 0x2ab4 <storeOfflineTransaction+0xea>
    2b38:	e6 53       	subi	r30, 0x36	; 54
    2b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3c:	0c 94 17 30 	jmp	0x602e	; 0x602e <__tablejump2__>
    2b40:	ed 52       	subi	r30, 0x2D	; 45
    2b42:	ff 4f       	sbci	r31, 0xFF	; 255
    2b44:	0c 94 17 30 	jmp	0x602e	; 0x602e <__tablejump2__>
    2b48:	81 30       	cpi	r24, 0x01	; 1
    2b4a:	a9 f0       	breq	.+42     	; 0x2b76 <storeOfflineTransaction+0x1ac>
    2b4c:	82 30       	cpi	r24, 0x02	; 2
    2b4e:	09 f0       	breq	.+2      	; 0x2b52 <storeOfflineTransaction+0x188>
    2b50:	6e cf       	rjmp	.-292    	; 0x2a2e <storeOfflineTransaction+0x64>
    2b52:	80 91 0e 0a 	lds	r24, 0x0A0E	; 0x800a0e <SQACADryerProgramming+0xa>
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	99 87       	std	Y+9, r25	; 0x09
    2b5a:	88 87       	std	Y+8, r24	; 0x08
    2b5c:	68 cf       	rjmp	.-304    	; 0x2a2e <storeOfflineTransaction+0x64>
    2b5e:	80 91 12 0a 	lds	r24, 0x0A12	; 0x800a12 <SQACADryerProgramming+0xe>
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	99 87       	std	Y+9, r25	; 0x09
    2b66:	88 87       	std	Y+8, r24	; 0x08
    2b68:	62 cf       	rjmp	.-316    	; 0x2a2e <storeOfflineTransaction+0x64>
    2b6a:	80 91 0c 0a 	lds	r24, 0x0A0C	; 0x800a0c <SQACADryerProgramming+0x8>
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	99 87       	std	Y+9, r25	; 0x09
    2b72:	88 87       	std	Y+8, r24	; 0x08
    2b74:	5c cf       	rjmp	.-328    	; 0x2a2e <storeOfflineTransaction+0x64>
    2b76:	80 91 ce 08 	lds	r24, 0x08CE	; 0x8008ce <SQACAToploadProgramming+0x6>
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	99 87       	std	Y+9, r25	; 0x09
    2b7e:	88 87       	std	Y+8, r24	; 0x08
    2b80:	56 cf       	rjmp	.-340    	; 0x2a2e <storeOfflineTransaction+0x64>
    2b82:	80 91 b8 08 	lds	r24, 0x08B8	; 0x8008b8 <SQACAFrontloadProgramming+0x16>
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	99 87       	std	Y+9, r25	; 0x09
    2b8a:	88 87       	std	Y+8, r24	; 0x08
    2b8c:	50 cf       	rjmp	.-352    	; 0x2a2e <storeOfflineTransaction+0x64>
    2b8e:	80 91 b6 08 	lds	r24, 0x08B6	; 0x8008b6 <SQACAFrontloadProgramming+0x14>
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	99 87       	std	Y+9, r25	; 0x09
    2b96:	88 87       	std	Y+8, r24	; 0x08
    2b98:	4a cf       	rjmp	.-364    	; 0x2a2e <storeOfflineTransaction+0x64>
    2b9a:	80 91 b4 08 	lds	r24, 0x08B4	; 0x8008b4 <SQACAFrontloadProgramming+0x12>
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	99 87       	std	Y+9, r25	; 0x09
    2ba2:	88 87       	std	Y+8, r24	; 0x08
    2ba4:	44 cf       	rjmp	.-376    	; 0x2a2e <storeOfflineTransaction+0x64>
    2ba6:	80 91 b2 08 	lds	r24, 0x08B2	; 0x8008b2 <SQACAFrontloadProgramming+0x10>
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	99 87       	std	Y+9, r25	; 0x09
    2bae:	88 87       	std	Y+8, r24	; 0x08
    2bb0:	3e cf       	rjmp	.-388    	; 0x2a2e <storeOfflineTransaction+0x64>
    2bb2:	10 92 c3 09 	sts	0x09C3, r1	; 0x8009c3 <ReaderSetup+0x9>
    2bb6:	ae 01       	movw	r20, r28
    2bb8:	4a 5e       	subi	r20, 0xEA	; 234
    2bba:	5f 4f       	sbci	r21, 0xFF	; 255
    2bbc:	62 e0       	ldi	r22, 0x02	; 2
    2bbe:	81 e0       	ldi	r24, 0x01	; 1
    2bc0:	91 e0       	ldi	r25, 0x01	; 1
    2bc2:	0e 94 b9 20 	call	0x4172	; 0x4172 <halPutEeprom>
    2bc6:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    2bca:	50 cf       	rjmp	.-352    	; 0x2a6c <storeOfflineTransaction+0xa2>
    2bcc:	80 62       	ori	r24, 0x20	; 32
    2bce:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <ReaderStateFlag>
    2bd2:	44 e3       	ldi	r20, 0x34	; 52
    2bd4:	59 e0       	ldi	r21, 0x09	; 9
    2bd6:	62 e0       	ldi	r22, 0x02	; 2
    2bd8:	82 e2       	ldi	r24, 0x22	; 34
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	0e 94 b9 20 	call	0x4172	; 0x4172 <halPutEeprom>
    2be0:	61 cf       	rjmp	.-318    	; 0x2aa4 <storeOfflineTransaction+0xda>
    2be2:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <ReaderStateFlag>
    2be6:	80 61       	ori	r24, 0x10	; 16
    2be8:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <ReaderStateFlag>
    2bec:	44 e3       	ldi	r20, 0x34	; 52
    2bee:	59 e0       	ldi	r21, 0x09	; 9
    2bf0:	62 e0       	ldi	r22, 0x02	; 2
    2bf2:	82 e2       	ldi	r24, 0x22	; 34
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	0e 94 b9 20 	call	0x4172	; 0x4172 <halPutEeprom>
    2bfa:	81 e0       	ldi	r24, 0x01	; 1
    2bfc:	5b cf       	rjmp	.-330    	; 0x2ab4 <storeOfflineTransaction+0xea>

00002bfe <sendStoredTransaction>:
    2bfe:	cf 93       	push	r28
    2c00:	df 93       	push	r29
    2c02:	cd b7       	in	r28, 0x3d	; 61
    2c04:	de b7       	in	r29, 0x3e	; 62
    2c06:	67 97       	sbiw	r28, 0x17	; 23
    2c08:	0f b6       	in	r0, 0x3f	; 63
    2c0a:	f8 94       	cli
    2c0c:	de bf       	out	0x3e, r29	; 62
    2c0e:	0f be       	out	0x3f, r0	; 63
    2c10:	cd bf       	out	0x3d, r28	; 61
    2c12:	43 ec       	ldi	r20, 0xC3	; 195
    2c14:	59 e0       	ldi	r21, 0x09	; 9
    2c16:	61 e0       	ldi	r22, 0x01	; 1
    2c18:	80 e0       	ldi	r24, 0x00	; 0
    2c1a:	91 e0       	ldi	r25, 0x01	; 1
    2c1c:	0e 94 a4 20 	call	0x4148	; 0x4148 <halGetEeprom>
    2c20:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    2c24:	9f ef       	ldi	r25, 0xFF	; 255
    2c26:	98 0f       	add	r25, r24
    2c28:	9e 3f       	cpi	r25, 0xFE	; 254
    2c2a:	d0 f0       	brcs	.+52     	; 0x2c60 <sendStoredTransaction+0x62>
    2c2c:	81 11       	cpse	r24, r1
    2c2e:	0f c0       	rjmp	.+30     	; 0x2c4e <sendStoredTransaction+0x50>
    2c30:	80 91 34 09 	lds	r24, 0x0934	; 0x800934 <ReaderStateFlag>
    2c34:	8f 7d       	andi	r24, 0xDF	; 223
    2c36:	8f 7e       	andi	r24, 0xEF	; 239
    2c38:	80 93 34 09 	sts	0x0934, r24	; 0x800934 <ReaderStateFlag>
    2c3c:	44 e3       	ldi	r20, 0x34	; 52
    2c3e:	59 e0       	ldi	r21, 0x09	; 9
    2c40:	61 e0       	ldi	r22, 0x01	; 1
    2c42:	82 e2       	ldi	r24, 0x22	; 34
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	0e 94 b9 20 	call	0x4172	; 0x4172 <halPutEeprom>
    2c4a:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    2c4e:	67 96       	adiw	r28, 0x17	; 23
    2c50:	0f b6       	in	r0, 0x3f	; 63
    2c52:	f8 94       	cli
    2c54:	de bf       	out	0x3e, r29	; 62
    2c56:	0f be       	out	0x3f, r0	; 63
    2c58:	cd bf       	out	0x3d, r28	; 61
    2c5a:	df 91       	pop	r29
    2c5c:	cf 91       	pop	r28
    2c5e:	08 95       	ret
    2c60:	ae 01       	movw	r20, r28
    2c62:	4a 5e       	subi	r20, 0xEA	; 234
    2c64:	5f 4f       	sbci	r21, 0xFF	; 255
    2c66:	62 e0       	ldi	r22, 0x02	; 2
    2c68:	81 e0       	ldi	r24, 0x01	; 1
    2c6a:	91 e0       	ldi	r25, 0x01	; 1
    2c6c:	0e 94 a4 20 	call	0x4148	; 0x4148 <halGetEeprom>
    2c70:	ae 01       	movw	r20, r28
    2c72:	4f 5f       	subi	r20, 0xFF	; 255
    2c74:	5f 4f       	sbci	r21, 0xFF	; 255
    2c76:	65 e1       	ldi	r22, 0x15	; 21
    2c78:	8e 89       	ldd	r24, Y+22	; 0x16
    2c7a:	9f 89       	ldd	r25, Y+23	; 0x17
    2c7c:	0e 94 a4 20 	call	0x4148	; 0x4148 <halGetEeprom>
    2c80:	ce 01       	movw	r24, r28
    2c82:	01 96       	adiw	r24, 0x01	; 1
    2c84:	0e 94 67 0c 	call	0x18ce	; 0x18ce <sendBOWCCTransaction>
    2c88:	81 11       	cpse	r24, r1
    2c8a:	03 c0       	rjmp	.+6      	; 0x2c92 <sendStoredTransaction+0x94>
    2c8c:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    2c90:	cd cf       	rjmp	.-102    	; 0x2c2c <sendStoredTransaction+0x2e>
    2c92:	8e 89       	ldd	r24, Y+22	; 0x16
    2c94:	9f 89       	ldd	r25, Y+23	; 0x17
    2c96:	45 96       	adiw	r24, 0x15	; 21
    2c98:	9f 8b       	std	Y+23, r25	; 0x17
    2c9a:	8e 8b       	std	Y+22, r24	; 0x16
    2c9c:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <ReaderSetup+0x9>
    2ca0:	81 50       	subi	r24, 0x01	; 1
    2ca2:	80 93 c3 09 	sts	0x09C3, r24	; 0x8009c3 <ReaderSetup+0x9>
    2ca6:	ae 01       	movw	r20, r28
    2ca8:	4a 5e       	subi	r20, 0xEA	; 234
    2caa:	5f 4f       	sbci	r21, 0xFF	; 255
    2cac:	62 e0       	ldi	r22, 0x02	; 2
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	91 e0       	ldi	r25, 0x01	; 1
    2cb2:	0e 94 b9 20 	call	0x4172	; 0x4172 <halPutEeprom>
    2cb6:	43 ec       	ldi	r20, 0xC3	; 195
    2cb8:	59 e0       	ldi	r21, 0x09	; 9
    2cba:	61 e0       	ldi	r22, 0x01	; 1
    2cbc:	80 e0       	ldi	r24, 0x00	; 0
    2cbe:	91 e0       	ldi	r25, 0x01	; 1
    2cc0:	0e 94 b9 20 	call	0x4172	; 0x4172 <halPutEeprom>
    2cc4:	e3 cf       	rjmp	.-58     	; 0x2c8c <sendStoredTransaction+0x8e>

00002cc6 <WaitForMachine>:



void WaitForMachine(void)
{
	ucMachineWait = MACHINE_TIME_OUT;
    2cc6:	81 e0       	ldi	r24, 0x01	; 1
    2cc8:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <ucMachineWait>
    2ccc:	08 95       	ret

00002cce <InitTimerZero>:
/** @brief Function to initialize the hardware Timer  
 
 */
void InitTimerZero(void)
{	
	TIFR0 = 2;//1<<TOV0;					//clear TOV0 / clear interrupt
    2cce:	82 e0       	ldi	r24, 0x02	; 2
    2cd0:	85 bb       	out	0x15, r24	; 21
	TIMSK0 = 2;//1<<TOIE0;				//enable timer0 overflow interrupt
    2cd2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	TCNT0 = 0;//16;
    2cd6:	16 bc       	out	0x26, r1	; 38
	ucTimerCount = 0;
    2cd8:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <ucTimerCount>
    2cdc:	08 95       	ret

00002cde <StopTimerZero>:
/** @brief Stop the hardware timer running.
 
 */
void StopTimerZero(void)
{
	TCCR0B = 0;//~(1<<CS02) | ~(1<<CS01) | ~(1<<CS00);	//set prescaler to zero
    2cde:	15 bc       	out	0x25, r1	; 37
    2ce0:	08 95       	ret

00002ce2 <StartTimerZero>:
/** @brief Start the hardware timer running.
 set timer zero to 5 milisecond resolution and start
 */
void StartTimerZero(void)
{
	OCR0A = 78;
    2ce2:	8e e4       	ldi	r24, 0x4E	; 78
    2ce4:	87 bd       	out	0x27, r24	; 39
	TCCR0A = 2;
    2ce6:	82 e0       	ldi	r24, 0x02	; 2
    2ce8:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS02) | (1<<CS00);	//set prescaler to 1024
    2cea:	85 e0       	ldi	r24, 0x05	; 5
    2cec:	85 bd       	out	0x25, r24	; 37
    2cee:	08 95       	ret

00002cf0 <__vector_21>:

/**
   @brief Timer interrupt service routine.
*/
ISR(TIMER0_COMPA_vect)
{
    2cf0:	1f 92       	push	r1
    2cf2:	0f 92       	push	r0
    2cf4:	0f b6       	in	r0, 0x3f	; 63
    2cf6:	0f 92       	push	r0
    2cf8:	11 24       	eor	r1, r1
    2cfa:	8f 93       	push	r24
	ucTimerCount++;
    2cfc:	80 91 15 0b 	lds	r24, 0x0B15	; 0x800b15 <ucTimerCount>
    2d00:	8f 5f       	subi	r24, 0xFF	; 255
    2d02:	80 93 15 0b 	sts	0x0B15, r24	; 0x800b15 <ucTimerCount>

}
    2d06:	8f 91       	pop	r24
    2d08:	0f 90       	pop	r0
    2d0a:	0f be       	out	0x3f, r0	; 63
    2d0c:	0f 90       	pop	r0
    2d0e:	1f 90       	pop	r1
    2d10:	18 95       	reti

00002d12 <padLeft>:
 \param string is the string size.
 \param paddedLength is the data size.
 \param pad is pointer to data to be converted.
 */
 char * padLeft(char * string, u8 paddedLength, const char * pad)
 {
    2d12:	7f 92       	push	r7
    2d14:	8f 92       	push	r8
    2d16:	9f 92       	push	r9
    2d18:	af 92       	push	r10
    2d1a:	bf 92       	push	r11
    2d1c:	cf 92       	push	r12
    2d1e:	df 92       	push	r13
    2d20:	ef 92       	push	r14
    2d22:	ff 92       	push	r15
    2d24:	0f 93       	push	r16
    2d26:	1f 93       	push	r17
    2d28:	cf 93       	push	r28
    2d2a:	df 93       	push	r29
    2d2c:	5c 01       	movw	r10, r24
    2d2e:	76 2e       	mov	r7, r22
    2d30:	6a 01       	movw	r12, r20
	 size_t stringLength = strlen(string);
    2d32:	ec 01       	movw	r28, r24
    2d34:	09 90       	ld	r0, Y+
    2d36:	00 20       	and	r0, r0
    2d38:	e9 f7       	brne	.-6      	; 0x2d34 <padLeft+0x22>
    2d3a:	21 97       	sbiw	r28, 0x01	; 1
    2d3c:	7e 01       	movw	r14, r28
    2d3e:	e8 1a       	sub	r14, r24
    2d40:	f9 0a       	sbc	r15, r25
	 size_t lenpad = strlen(pad);
    2d42:	fa 01       	movw	r30, r20
    2d44:	01 90       	ld	r0, Z+
    2d46:	00 20       	and	r0, r0
    2d48:	e9 f7       	brne	.-6      	; 0x2d44 <padLeft+0x32>
    2d4a:	31 97       	sbiw	r30, 0x01	; 1
    2d4c:	8f 01       	movw	r16, r30
    2d4e:	04 1b       	sub	r16, r20
    2d50:	15 0b       	sbc	r17, r21
	 u8 i = paddedLength;
	 
	 if (stringLength >= paddedLength)
    2d52:	86 2e       	mov	r8, r22
    2d54:	91 2c       	mov	r9, r1
    2d56:	e8 14       	cp	r14, r8
    2d58:	f9 04       	cpc	r15, r9
    2d5a:	80 f5       	brcc	.+96     	; 0x2dbc <padLeft+0xaa>
	 {
		 return NULL;//'\0';
	 }

	 char * padded = (char*)malloc(paddedLength + 1); // allocate memory for new string
    2d5c:	c4 01       	movw	r24, r8
    2d5e:	01 96       	adiw	r24, 0x01	; 1
    2d60:	0e 94 61 30 	call	0x60c2	; 0x60c2 <malloc>
    2d64:	ec 01       	movw	r28, r24
	 
	 for(; paddedLength > stringLength; paddedLength--, padded += lenpad)
	 {
		 strncpy(padded, pad, lenpad);
    2d66:	a8 01       	movw	r20, r16
    2d68:	b6 01       	movw	r22, r12
    2d6a:	ce 01       	movw	r24, r28
    2d6c:	0e 94 5f 34 	call	0x68be	; 0x68be <strncpy>
		 return NULL;//'\0';
	 }

	 char * padded = (char*)malloc(paddedLength + 1); // allocate memory for new string
	 
	 for(; paddedLength > stringLength; paddedLength--, padded += lenpad)
    2d70:	7a 94       	dec	r7
    2d72:	c0 0f       	add	r28, r16
    2d74:	d1 1f       	adc	r29, r17
    2d76:	87 2d       	mov	r24, r7
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	e8 16       	cp	r14, r24
    2d7c:	f9 06       	cpc	r15, r25
    2d7e:	98 f3       	brcs	.-26     	; 0x2d66 <padLeft+0x54>
	 {
		 strncpy(padded, pad, lenpad);
	 }
	 
	 strncpy(padded, string, stringLength); /* copy without '\0' */
    2d80:	a7 01       	movw	r20, r14
    2d82:	b5 01       	movw	r22, r10
    2d84:	ce 01       	movw	r24, r28
    2d86:	0e 94 5f 34 	call	0x68be	; 0x68be <strncpy>
	 padded += stringLength; /* prepare for first append of pad */
    2d8a:	ce 0d       	add	r28, r14
    2d8c:	df 1d       	adc	r29, r15
	 *padded = '\0';
    2d8e:	18 82       	st	Y, r1

	 padded = (padded - i);
    2d90:	c8 19       	sub	r28, r8
    2d92:	d9 09       	sbc	r29, r9
	 strncpy(string,padded,i);
    2d94:	a4 01       	movw	r20, r8
    2d96:	be 01       	movw	r22, r28
    2d98:	c5 01       	movw	r24, r10
    2d9a:	0e 94 5f 34 	call	0x68be	; 0x68be <strncpy>
	 
	 return padded;
    2d9e:	ce 01       	movw	r24, r28
 }
    2da0:	df 91       	pop	r29
    2da2:	cf 91       	pop	r28
    2da4:	1f 91       	pop	r17
    2da6:	0f 91       	pop	r16
    2da8:	ff 90       	pop	r15
    2daa:	ef 90       	pop	r14
    2dac:	df 90       	pop	r13
    2dae:	cf 90       	pop	r12
    2db0:	bf 90       	pop	r11
    2db2:	af 90       	pop	r10
    2db4:	9f 90       	pop	r9
    2db6:	8f 90       	pop	r8
    2db8:	7f 90       	pop	r7
    2dba:	08 95       	ret
	 size_t lenpad = strlen(pad);
	 u8 i = paddedLength;
	 
	 if (stringLength >= paddedLength)
	 {
		 return NULL;//'\0';
    2dbc:	80 e0       	ldi	r24, 0x00	; 0
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	ef cf       	rjmp	.-34     	; 0x2da0 <padLeft+0x8e>

00002dc2 <SetTimeOut>:
	tmp[13]=255-addr;
	tmp[14]=tmp[12];
	tmp[15]=tmp[13];
	status=Write(addr,tmp);
	return status;
}
    2dc2:	cf 93       	push	r28
    2dc4:	df 93       	push	r29
    2dc6:	9c 01       	movw	r18, r24
    2dc8:	36 95       	lsr	r19
    2dca:	27 95       	ror	r18
    2dcc:	36 95       	lsr	r19
    2dce:	27 95       	ror	r18
    2dd0:	ab e7       	ldi	r26, 0x7B	; 123
    2dd2:	b4 e1       	ldi	r27, 0x14	; 20
    2dd4:	0e 94 20 30 	call	0x6040	; 0x6040 <__umulhisi3>
    2dd8:	ec 01       	movw	r28, r24
    2dda:	d6 95       	lsr	r29
    2ddc:	c7 95       	ror	r28
    2dde:	40 e8       	ldi	r20, 0x80	; 128
    2de0:	61 e0       	ldi	r22, 0x01	; 1
    2de2:	8a e2       	ldi	r24, 0x2A	; 42
    2de4:	0e 94 4d 1c 	call	0x389a	; 0x389a <RcModifyReg>
    2de8:	66 ea       	ldi	r22, 0xA6	; 166
    2dea:	8b e2       	ldi	r24, 0x2B	; 43
    2dec:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    2df0:	8a e2       	ldi	r24, 0x2A	; 42
    2df2:	0e 94 43 1c 	call	0x3886	; 0x3886 <RcGetReg>
    2df6:	80 7f       	andi	r24, 0xF0	; 240
    2df8:	68 2f       	mov	r22, r24
    2dfa:	62 60       	ori	r22, 0x02	; 2
    2dfc:	8a e2       	ldi	r24, 0x2A	; 42
    2dfe:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    2e02:	6c 2f       	mov	r22, r28
    2e04:	8d e2       	ldi	r24, 0x2D	; 45
    2e06:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    2e0a:	6d 2f       	mov	r22, r29
    2e0c:	8c e2       	ldi	r24, 0x2C	; 44
    2e0e:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    2e12:	80 e0       	ldi	r24, 0x00	; 0
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	df 91       	pop	r29
    2e18:	cf 91       	pop	r28
    2e1a:	08 95       	ret

00002e1c <Rc522Init>:
    2e1c:	6f e0       	ldi	r22, 0x0F	; 15
    2e1e:	81 e0       	ldi	r24, 0x01	; 1
    2e20:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    2e24:	60 e4       	ldi	r22, 0x40	; 64
    2e26:	85 e1       	ldi	r24, 0x15	; 21
    2e28:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    2e2c:	48 e0       	ldi	r20, 0x08	; 8
    2e2e:	60 e0       	ldi	r22, 0x00	; 0
    2e30:	88 e0       	ldi	r24, 0x08	; 8
    2e32:	0e 94 4d 1c 	call	0x389a	; 0x389a <RcModifyReg>
    2e36:	82 e1       	ldi	r24, 0x12	; 18
    2e38:	0e 94 43 1c 	call	0x3886	; 0x3886 <RcGetReg>
    2e3c:	88 70       	andi	r24, 0x08	; 8
    2e3e:	68 2f       	mov	r22, r24
    2e40:	60 68       	ori	r22, 0x80	; 128
    2e42:	82 e1       	ldi	r24, 0x12	; 18
    2e44:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    2e48:	83 e1       	ldi	r24, 0x13	; 19
    2e4a:	0e 94 43 1c 	call	0x3886	; 0x3886 <RcGetReg>
    2e4e:	88 70       	andi	r24, 0x08	; 8
    2e50:	68 2f       	mov	r22, r24
    2e52:	60 68       	ori	r22, 0x80	; 128
    2e54:	83 e1       	ldi	r24, 0x13	; 19
    2e56:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    2e5a:	6d e6       	ldi	r22, 0x6D	; 109
    2e5c:	89 e1       	ldi	r24, 0x19	; 25
    2e5e:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    2e62:	68 e4       	ldi	r22, 0x48	; 72
    2e64:	86 e2       	ldi	r24, 0x26	; 38
    2e66:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    2e6a:	65 e5       	ldi	r22, 0x55	; 85
    2e6c:	88 e1       	ldi	r24, 0x18	; 24
    2e6e:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    2e72:	66 e2       	ldi	r22, 0x26	; 38
    2e74:	84 e2       	ldi	r24, 0x24	; 36
    2e76:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    2e7a:	64 ef       	ldi	r22, 0xF4	; 244
    2e7c:	87 e2       	ldi	r24, 0x27	; 39
    2e7e:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    2e82:	88 e8       	ldi	r24, 0x88	; 136
    2e84:	93 e1       	ldi	r25, 0x13	; 19
    2e86:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <SetTimeOut>
    2e8a:	43 e0       	ldi	r20, 0x03	; 3
    2e8c:	61 e0       	ldi	r22, 0x01	; 1
    2e8e:	84 e1       	ldi	r24, 0x14	; 20
    2e90:	0e 94 4d 1c 	call	0x389a	; 0x389a <RcModifyReg>
    2e94:	40 e4       	ldi	r20, 0x40	; 64
    2e96:	61 e0       	ldi	r22, 0x01	; 1
    2e98:	8c e0       	ldi	r24, 0x0C	; 12
    2e9a:	0e 94 4d 1c 	call	0x389a	; 0x389a <RcModifyReg>
    2e9e:	84 e0       	ldi	r24, 0x04	; 4
    2ea0:	0e 94 43 1c 	call	0x3886	; 0x3886 <RcGetReg>
    2ea4:	80 ff       	sbrs	r24, 0
    2ea6:	fb cf       	rjmp	.-10     	; 0x2e9e <Rc522Init+0x82>
    2ea8:	61 e0       	ldi	r22, 0x01	; 1
    2eaa:	84 e0       	ldi	r24, 0x04	; 4
    2eac:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    2eb0:	88 e8       	ldi	r24, 0x88	; 136
    2eb2:	93 e1       	ldi	r25, 0x13	; 19
    2eb4:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <SetTimeOut>
    2eb8:	6a e1       	ldi	r22, 0x1A	; 26
    2eba:	8b e0       	ldi	r24, 0x0B	; 11
    2ebc:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    2ec0:	60 e1       	ldi	r22, 0x10	; 16
    2ec2:	86 e1       	ldi	r24, 0x16	; 22
    2ec4:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    2ec8:	64 e8       	ldi	r22, 0x84	; 132
    2eca:	87 e1       	ldi	r24, 0x17	; 23
    2ecc:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    2ed0:	60 e0       	ldi	r22, 0x00	; 0
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
    2ed4:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    2ed8:	80 ed       	ldi	r24, 0xD0	; 208
    2eda:	97 e0       	ldi	r25, 0x07	; 7
    2edc:	0c 94 e1 16 	jmp	0x2dc2	; 0x2dc2 <SetTimeOut>

00002ee0 <M522PcdCmd>:
    2ee0:	af 92       	push	r10
    2ee2:	bf 92       	push	r11
    2ee4:	cf 92       	push	r12
    2ee6:	df 92       	push	r13
    2ee8:	ef 92       	push	r14
    2eea:	ff 92       	push	r15
    2eec:	0f 93       	push	r16
    2eee:	1f 93       	push	r17
    2ef0:	cf 93       	push	r28
    2ef2:	df 93       	push	r29
    2ef4:	d8 2f       	mov	r29, r24
    2ef6:	7b 01       	movw	r14, r22
    2ef8:	8a 01       	movw	r16, r20
    2efa:	62 e4       	ldi	r22, 0x42	; 66
    2efc:	84 e0       	ldi	r24, 0x04	; 4
    2efe:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    2f02:	60 e0       	ldi	r22, 0x00	; 0
    2f04:	85 e0       	ldi	r24, 0x05	; 5
    2f06:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    2f0a:	60 e8       	ldi	r22, 0x80	; 128
    2f0c:	8a e0       	ldi	r24, 0x0A	; 10
    2f0e:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	0e 94 43 1c 	call	0x3886	; 0x3886 <RcGetReg>
    2f18:	68 2f       	mov	r22, r24
    2f1a:	60 7f       	andi	r22, 0xF0	; 240
    2f1c:	dc 30       	cpi	r29, 0x0C	; 12
    2f1e:	c9 f1       	breq	.+114    	; 0x2f92 <M522PcdCmd+0xb2>
    2f20:	81 e0       	ldi	r24, 0x01	; 1
    2f22:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    2f26:	10 93 32 05 	sts	0x0532, r17	; 0x800532 <MpIsrInfo+0x1>
    2f2a:	00 93 31 05 	sts	0x0531, r16	; 0x800531 <MpIsrInfo>
    2f2e:	d0 31       	cpi	r29, 0x10	; 16
    2f30:	c0 f1       	brcs	.+112    	; 0x2fa2 <M522PcdCmd+0xc2>
    2f32:	b1 2c       	mov	r11, r1
    2f34:	02 e4       	ldi	r16, 0x42	; 66
    2f36:	73 e0       	ldi	r23, 0x03	; 3
    2f38:	c7 2e       	mov	r12, r23
    2f3a:	dd 24       	eor	r13, r13
    2f3c:	d3 94       	inc	r13
    2f3e:	4b 2d       	mov	r20, r11
    2f40:	60 e0       	ldi	r22, 0x00	; 0
    2f42:	82 e0       	ldi	r24, 0x02	; 2
    2f44:	0e 94 4d 1c 	call	0x389a	; 0x389a <RcModifyReg>
    2f48:	40 e0       	ldi	r20, 0x00	; 0
    2f4a:	60 e0       	ldi	r22, 0x00	; 0
    2f4c:	83 e0       	ldi	r24, 0x03	; 3
    2f4e:	0e 94 4d 1c 	call	0x389a	; 0x389a <RcModifyReg>
    2f52:	60 2f       	mov	r22, r16
    2f54:	84 e0       	ldi	r24, 0x04	; 4
    2f56:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    2f5a:	60 e0       	ldi	r22, 0x00	; 0
    2f5c:	85 e0       	ldi	r24, 0x05	; 5
    2f5e:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    2f62:	60 e8       	ldi	r22, 0x80	; 128
    2f64:	8a e0       	ldi	r24, 0x0A	; 10
    2f66:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    2f6a:	61 e0       	ldi	r22, 0x01	; 1
    2f6c:	84 e0       	ldi	r24, 0x04	; 4
    2f6e:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    2f72:	60 e0       	ldi	r22, 0x00	; 0
    2f74:	8d e0       	ldi	r24, 0x0D	; 13
    2f76:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    2f7a:	c6 01       	movw	r24, r12
    2f7c:	df 91       	pop	r29
    2f7e:	cf 91       	pop	r28
    2f80:	1f 91       	pop	r17
    2f82:	0f 91       	pop	r16
    2f84:	ff 90       	pop	r15
    2f86:	ef 90       	pop	r14
    2f88:	df 90       	pop	r13
    2f8a:	cf 90       	pop	r12
    2f8c:	bf 90       	pop	r11
    2f8e:	af 90       	pop	r10
    2f90:	08 95       	ret
    2f92:	6c 60       	ori	r22, 0x0C	; 12
    2f94:	81 e0       	ldi	r24, 0x01	; 1
    2f96:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    2f9a:	10 93 32 05 	sts	0x0532, r17	; 0x800532 <MpIsrInfo+0x1>
    2f9e:	00 93 31 05 	sts	0x0531, r16	; 0x800531 <MpIsrInfo>
    2fa2:	8d 2f       	mov	r24, r29
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	fc 01       	movw	r30, r24
    2fa8:	ee 0f       	add	r30, r30
    2faa:	ff 1f       	adc	r31, r31
    2fac:	e6 5f       	subi	r30, 0xF6	; 246
    2fae:	fa 4f       	sbci	r31, 0xFA	; 250
    2fb0:	c0 80       	ld	r12, Z
    2fb2:	d1 80       	ldd	r13, Z+1	; 0x01
    2fb4:	fc 01       	movw	r30, r24
    2fb6:	e6 50       	subi	r30, 0x06	; 6
    2fb8:	fb 4f       	sbci	r31, 0xFB	; 251
    2fba:	b0 80       	ld	r11, Z
    2fbc:	fc 01       	movw	r30, r24
    2fbe:	e6 51       	subi	r30, 0x16	; 22
    2fc0:	fb 4f       	sbci	r31, 0xFB	; 251
    2fc2:	00 81       	ld	r16, Z
    2fc4:	fc 01       	movw	r30, r24
    2fc6:	e6 52       	subi	r30, 0x26	; 38
    2fc8:	fb 4f       	sbci	r31, 0xFB	; 251
    2fca:	a0 80       	ld	r10, Z
    2fcc:	c1 14       	cp	r12, r1
    2fce:	d1 04       	cpc	r13, r1
    2fd0:	09 f0       	breq	.+2      	; 0x2fd4 <M522PcdCmd+0xf4>
    2fd2:	b5 cf       	rjmp	.-150    	; 0x2f3e <M522PcdCmd+0x5e>
    2fd4:	82 e0       	ldi	r24, 0x02	; 2
    2fd6:	0e 94 43 1c 	call	0x3886	; 0x3886 <RcGetReg>
    2fda:	68 2f       	mov	r22, r24
    2fdc:	6b 29       	or	r22, r11
    2fde:	82 e0       	ldi	r24, 0x02	; 2
    2fe0:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    2fe4:	83 e0       	ldi	r24, 0x03	; 3
    2fe6:	0e 94 43 1c 	call	0x3886	; 0x3886 <RcGetReg>
    2fea:	68 2f       	mov	r22, r24
    2fec:	83 e0       	ldi	r24, 0x03	; 3
    2fee:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    2ff2:	e0 91 31 05 	lds	r30, 0x0531	; 0x800531 <MpIsrInfo>
    2ff6:	f0 91 32 05 	lds	r31, 0x0532	; 0x800532 <MpIsrInfo+0x1>
    2ffa:	83 81       	ldd	r24, Z+3	; 0x03
    2ffc:	88 23       	and	r24, r24
    2ffe:	81 f0       	breq	.+32     	; 0x3020 <M522PcdCmd+0x140>
    3000:	c0 e0       	ldi	r28, 0x00	; 0
    3002:	f7 01       	movw	r30, r14
    3004:	ec 0f       	add	r30, r28
    3006:	f1 1d       	adc	r31, r1
    3008:	60 81       	ld	r22, Z
    300a:	89 e0       	ldi	r24, 0x09	; 9
    300c:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    3010:	cf 5f       	subi	r28, 0xFF	; 255
    3012:	e0 91 31 05 	lds	r30, 0x0531	; 0x800531 <MpIsrInfo>
    3016:	f0 91 32 05 	lds	r31, 0x0532	; 0x800532 <MpIsrInfo+0x1>
    301a:	93 81       	ldd	r25, Z+3	; 0x03
    301c:	c9 17       	cp	r28, r25
    301e:	88 f3       	brcs	.-30     	; 0x3002 <M522PcdCmd+0x122>
    3020:	dc 30       	cpi	r29, 0x0C	; 12
    3022:	09 f4       	brne	.+2      	; 0x3026 <M522PcdCmd+0x146>
    3024:	98 c0       	rjmp	.+304    	; 0x3156 <M522PcdCmd+0x276>
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	0e 94 43 1c 	call	0x3886	; 0x3886 <RcGetReg>
    302c:	80 7f       	andi	r24, 0xF0	; 240
    302e:	68 2f       	mov	r22, r24
    3030:	6d 2b       	or	r22, r29
    3032:	81 e0       	ldi	r24, 0x01	; 1
    3034:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    3038:	00 23       	and	r16, r16
    303a:	01 f1       	breq	.+64     	; 0x307c <M522PcdCmd+0x19c>
    303c:	84 e0       	ldi	r24, 0x04	; 4
    303e:	0e 94 43 1c 	call	0x3886	; 0x3886 <RcGetReg>
    3042:	18 2f       	mov	r17, r24
    3044:	85 e0       	ldi	r24, 0x05	; 5
    3046:	0e 94 43 1c 	call	0x3886	; 0x3886 <RcGetReg>
    304a:	c0 e0       	ldi	r28, 0x00	; 0
    304c:	d1 e0       	ldi	r29, 0x01	; 1
    304e:	0a c0       	rjmp	.+20     	; 0x3064 <M522PcdCmd+0x184>
    3050:	84 e0       	ldi	r24, 0x04	; 4
    3052:	0e 94 43 1c 	call	0x3886	; 0x3886 <RcGetReg>
    3056:	18 2f       	mov	r17, r24
    3058:	85 e0       	ldi	r24, 0x05	; 5
    305a:	0e 94 43 1c 	call	0x3886	; 0x3886 <RcGetReg>
    305e:	21 97       	sbiw	r28, 0x01	; 1
    3060:	09 f4       	brne	.+2      	; 0x3064 <M522PcdCmd+0x184>
    3062:	9d c0       	rjmp	.+314    	; 0x319e <M522PcdCmd+0x2be>
    3064:	91 2f       	mov	r25, r17
    3066:	90 23       	and	r25, r16
    3068:	99 f3       	breq	.-26     	; 0x3050 <M522PcdCmd+0x170>
    306a:	81 2f       	mov	r24, r17
    306c:	81 70       	andi	r24, 0x01	; 1
    306e:	09 2f       	mov	r16, r25
    3070:	88 23       	and	r24, r24
    3072:	21 f0       	breq	.+8      	; 0x307c <M522PcdCmd+0x19c>
    3074:	cc 24       	eor	r12, r12
    3076:	c3 94       	inc	r12
    3078:	d1 2c       	mov	r13, r1
    307a:	61 cf       	rjmp	.-318    	; 0x2f3e <M522PcdCmd+0x5e>
    307c:	4b 2d       	mov	r20, r11
    307e:	60 e0       	ldi	r22, 0x00	; 0
    3080:	82 e0       	ldi	r24, 0x02	; 2
    3082:	0e 94 4d 1c 	call	0x389a	; 0x389a <RcModifyReg>
    3086:	40 e0       	ldi	r20, 0x00	; 0
    3088:	60 e0       	ldi	r22, 0x00	; 0
    308a:	83 e0       	ldi	r24, 0x03	; 3
    308c:	0e 94 4d 1c 	call	0x389a	; 0x389a <RcModifyReg>
    3090:	aa 20       	and	r10, r10
    3092:	09 f4       	brne	.+2      	; 0x3096 <M522PcdCmd+0x1b6>
    3094:	5e cf       	rjmp	.-324    	; 0x2f52 <M522PcdCmd+0x72>
    3096:	c0 91 31 05 	lds	r28, 0x0531	; 0x800531 <MpIsrInfo>
    309a:	d0 91 32 05 	lds	r29, 0x0532	; 0x800532 <MpIsrInfo+0x1>
    309e:	8a e0       	ldi	r24, 0x0A	; 10
    30a0:	0e 94 43 1c 	call	0x3886	; 0x3886 <RcGetReg>
    30a4:	8c 83       	std	Y+4, r24	; 0x04
    30a6:	8c e0       	ldi	r24, 0x0C	; 12
    30a8:	0e 94 43 1c 	call	0x3886	; 0x3886 <RcGetReg>
    30ac:	e0 91 31 05 	lds	r30, 0x0531	; 0x800531 <MpIsrInfo>
    30b0:	f0 91 32 05 	lds	r31, 0x0532	; 0x800532 <MpIsrInfo+0x1>
    30b4:	87 70       	andi	r24, 0x07	; 7
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	96 83       	std	Z+6, r25	; 0x06
    30ba:	85 83       	std	Z+5, r24	; 0x05
    30bc:	86 e0       	ldi	r24, 0x06	; 6
    30be:	0e 94 43 1c 	call	0x3886	; 0x3886 <RcGetReg>
    30c2:	c8 2f       	mov	r28, r24
    30c4:	88 23       	and	r24, r24
    30c6:	19 f1       	breq	.+70     	; 0x310e <M522PcdCmd+0x22e>
    30c8:	83 fd       	sbrc	r24, 3
    30ca:	4b c0       	rjmp	.+150    	; 0x3162 <M522PcdCmd+0x282>
    30cc:	81 fd       	sbrc	r24, 1
    30ce:	63 c0       	rjmp	.+198    	; 0x3196 <M522PcdCmd+0x2b6>
    30d0:	c0 fd       	sbrc	r28, 0
    30d2:	4b c0       	rjmp	.+150    	; 0x316a <M522PcdCmd+0x28a>
    30d4:	c4 fd       	sbrc	r28, 4
    30d6:	5b c0       	rjmp	.+182    	; 0x318e <M522PcdCmd+0x2ae>
    30d8:	c2 ff       	sbrs	r28, 2
    30da:	65 c0       	rjmp	.+202    	; 0x31a6 <M522PcdCmd+0x2c6>
    30dc:	e0 91 31 05 	lds	r30, 0x0531	; 0x800531 <MpIsrInfo>
    30e0:	f0 91 32 05 	lds	r31, 0x0532	; 0x800532 <MpIsrInfo+0x1>
    30e4:	d4 81       	ldd	r29, Z+4	; 0x04
    30e6:	d1 30       	cpi	r29, 0x01	; 1
    30e8:	09 f4       	brne	.+2      	; 0x30ec <M522PcdCmd+0x20c>
    30ea:	64 c0       	rjmp	.+200    	; 0x31b4 <M522PcdCmd+0x2d4>
    30ec:	92 e0       	ldi	r25, 0x02	; 2
    30ee:	c9 2e       	mov	r12, r25
    30f0:	d1 2c       	mov	r13, r1
    30f2:	3e c0       	rjmp	.+124    	; 0x3170 <M522PcdCmd+0x290>
    30f4:	c7 fd       	sbrc	r28, 7
    30f6:	43 c0       	rjmp	.+134    	; 0x317e <M522PcdCmd+0x29e>
    30f8:	60 e0       	ldi	r22, 0x00	; 0
    30fa:	86 e0       	ldi	r24, 0x06	; 6
    30fc:	c1 14       	cp	r12, r1
    30fe:	d1 04       	cpc	r13, r1
    3100:	09 f0       	breq	.+2      	; 0x3104 <M522PcdCmd+0x224>
    3102:	72 c0       	rjmp	.+228    	; 0x31e8 <M522PcdCmd+0x308>
    3104:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    3108:	5c e0       	ldi	r21, 0x0C	; 12
    310a:	c5 2e       	mov	r12, r21
    310c:	d1 2c       	mov	r13, r1
    310e:	e0 91 31 05 	lds	r30, 0x0531	; 0x800531 <MpIsrInfo>
    3112:	f0 91 32 05 	lds	r31, 0x0532	; 0x800532 <MpIsrInfo+0x1>
    3116:	84 81       	ldd	r24, Z+4	; 0x04
    3118:	88 23       	and	r24, r24
    311a:	09 f4       	brne	.+2      	; 0x311e <M522PcdCmd+0x23e>
    311c:	1a cf       	rjmp	.-460    	; 0x2f52 <M522PcdCmd+0x72>
    311e:	c0 e0       	ldi	r28, 0x00	; 0
    3120:	57 01       	movw	r10, r14
    3122:	ac 0e       	add	r10, r28
    3124:	b1 1c       	adc	r11, r1
    3126:	89 e0       	ldi	r24, 0x09	; 9
    3128:	0e 94 43 1c 	call	0x3886	; 0x3886 <RcGetReg>
    312c:	f5 01       	movw	r30, r10
    312e:	80 83       	st	Z, r24
    3130:	cf 5f       	subi	r28, 0xFF	; 255
    3132:	e0 91 31 05 	lds	r30, 0x0531	; 0x800531 <MpIsrInfo>
    3136:	f0 91 32 05 	lds	r31, 0x0532	; 0x800532 <MpIsrInfo+0x1>
    313a:	84 81       	ldd	r24, Z+4	; 0x04
    313c:	c8 17       	cp	r28, r24
    313e:	80 f3       	brcs	.-32     	; 0x3120 <M522PcdCmd+0x240>
    3140:	25 81       	ldd	r18, Z+5	; 0x05
    3142:	36 81       	ldd	r19, Z+6	; 0x06
    3144:	23 2b       	or	r18, r19
    3146:	09 f4       	brne	.+2      	; 0x314a <M522PcdCmd+0x26a>
    3148:	04 cf       	rjmp	.-504    	; 0x2f52 <M522PcdCmd+0x72>
    314a:	88 23       	and	r24, r24
    314c:	09 f4       	brne	.+2      	; 0x3150 <M522PcdCmd+0x270>
    314e:	01 cf       	rjmp	.-510    	; 0x2f52 <M522PcdCmd+0x72>
    3150:	81 50       	subi	r24, 0x01	; 1
    3152:	84 83       	std	Z+4, r24	; 0x04
    3154:	fe ce       	rjmp	.-516    	; 0x2f52 <M522PcdCmd+0x72>
    3156:	40 e8       	ldi	r20, 0x80	; 128
    3158:	61 e0       	ldi	r22, 0x01	; 1
    315a:	8d e0       	ldi	r24, 0x0D	; 13
    315c:	0e 94 4d 1c 	call	0x389a	; 0x389a <RcModifyReg>
    3160:	6b cf       	rjmp	.-298    	; 0x3038 <M522PcdCmd+0x158>
    3162:	f6 e0       	ldi	r31, 0x06	; 6
    3164:	cf 2e       	mov	r12, r31
    3166:	d1 2c       	mov	r13, r1
    3168:	b3 cf       	rjmp	.-154    	; 0x30d0 <M522PcdCmd+0x1f0>
    316a:	3b e0       	ldi	r19, 0x0B	; 11
    316c:	c3 2e       	mov	r12, r19
    316e:	d1 2c       	mov	r13, r1
    3170:	c7 fd       	sbrc	r28, 7
    3172:	05 c0       	rjmp	.+10     	; 0x317e <M522PcdCmd+0x29e>
    3174:	60 e0       	ldi	r22, 0x00	; 0
    3176:	86 e0       	ldi	r24, 0x06	; 6
    3178:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    317c:	c8 cf       	rjmp	.-112    	; 0x310e <M522PcdCmd+0x22e>
    317e:	60 e0       	ldi	r22, 0x00	; 0
    3180:	86 e0       	ldi	r24, 0x06	; 6
    3182:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    3186:	ed e0       	ldi	r30, 0x0D	; 13
    3188:	ce 2e       	mov	r12, r30
    318a:	d1 2c       	mov	r13, r1
    318c:	c0 cf       	rjmp	.-128    	; 0x310e <M522PcdCmd+0x22e>
    318e:	29 e0       	ldi	r18, 0x09	; 9
    3190:	c2 2e       	mov	r12, r18
    3192:	d1 2c       	mov	r13, r1
    3194:	ed cf       	rjmp	.-38     	; 0x3170 <M522PcdCmd+0x290>
    3196:	a3 e0       	ldi	r26, 0x03	; 3
    3198:	ca 2e       	mov	r12, r26
    319a:	d1 2c       	mov	r13, r1
    319c:	99 cf       	rjmp	.-206    	; 0x30d0 <M522PcdCmd+0x1f0>
    319e:	81 2f       	mov	r24, r17
    31a0:	81 70       	andi	r24, 0x01	; 1
    31a2:	01 23       	and	r16, r17
    31a4:	65 cf       	rjmp	.-310    	; 0x3070 <M522PcdCmd+0x190>
    31a6:	c6 ff       	sbrs	r28, 6
    31a8:	a5 cf       	rjmp	.-182    	; 0x30f4 <M522PcdCmd+0x214>
    31aa:	84 e0       	ldi	r24, 0x04	; 4
    31ac:	c8 2e       	mov	r12, r24
    31ae:	8e e7       	ldi	r24, 0x7E	; 126
    31b0:	d8 2e       	mov	r13, r24
    31b2:	de cf       	rjmp	.-68     	; 0x3170 <M522PcdCmd+0x290>
    31b4:	85 81       	ldd	r24, Z+5	; 0x05
    31b6:	96 81       	ldd	r25, Z+6	; 0x06
    31b8:	8b 7f       	andi	r24, 0xFB	; 251
    31ba:	89 2b       	or	r24, r25
    31bc:	09 f0       	breq	.+2      	; 0x31c0 <M522PcdCmd+0x2e0>
    31be:	96 cf       	rjmp	.-212    	; 0x30ec <M522PcdCmd+0x20c>
    31c0:	89 e0       	ldi	r24, 0x09	; 9
    31c2:	0e 94 43 1c 	call	0x3886	; 0x3886 <RcGetReg>
    31c6:	f7 01       	movw	r30, r14
    31c8:	80 83       	st	Z, r24
    31ca:	e0 91 31 05 	lds	r30, 0x0531	; 0x800531 <MpIsrInfo>
    31ce:	f0 91 32 05 	lds	r31, 0x0532	; 0x800532 <MpIsrInfo+0x1>
    31d2:	d4 83       	std	Z+4, r29	; 0x04
    31d4:	c7 fd       	sbrc	r28, 7
    31d6:	d3 cf       	rjmp	.-90     	; 0x317e <M522PcdCmd+0x29e>
    31d8:	60 e0       	ldi	r22, 0x00	; 0
    31da:	86 e0       	ldi	r24, 0x06	; 6
    31dc:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    31e0:	42 e0       	ldi	r20, 0x02	; 2
    31e2:	c4 2e       	mov	r12, r20
    31e4:	dc 2c       	mov	r13, r12
    31e6:	b5 ce       	rjmp	.-662    	; 0x2f52 <M522PcdCmd+0x72>
    31e8:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    31ec:	90 cf       	rjmp	.-224    	; 0x310e <M522PcdCmd+0x22e>

000031ee <Request>:
    31ee:	0f 93       	push	r16
    31f0:	1f 93       	push	r17
    31f2:	cf 93       	push	r28
    31f4:	c8 2f       	mov	r28, r24
    31f6:	8b 01       	movw	r16, r22
    31f8:	48 e0       	ldi	r20, 0x08	; 8
    31fa:	60 e0       	ldi	r22, 0x00	; 0
    31fc:	88 e0       	ldi	r24, 0x08	; 8
    31fe:	0e 94 4d 1c 	call	0x389a	; 0x389a <RcModifyReg>
    3202:	60 e8       	ldi	r22, 0x80	; 128
    3204:	8e e0       	ldi	r24, 0x0E	; 14
    3206:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    320a:	40 e8       	ldi	r20, 0x80	; 128
    320c:	60 e0       	ldi	r22, 0x00	; 0
    320e:	82 e1       	ldi	r24, 0x12	; 18
    3210:	0e 94 4d 1c 	call	0x389a	; 0x389a <RcModifyReg>
    3214:	40 e8       	ldi	r20, 0x80	; 128
    3216:	60 e0       	ldi	r22, 0x00	; 0
    3218:	83 e1       	ldi	r24, 0x13	; 19
    321a:	0e 94 4d 1c 	call	0x389a	; 0x389a <RcModifyReg>
    321e:	67 e0       	ldi	r22, 0x07	; 7
    3220:	8d e0       	ldi	r24, 0x0D	; 13
    3222:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    3226:	10 92 30 0b 	sts	0x0B30, r1	; 0x800b30 <MInfo>
    322a:	10 92 31 0b 	sts	0x0B31, r1	; 0x800b31 <MInfo+0x1>
    322e:	10 92 32 0b 	sts	0x0B32, r1	; 0x800b32 <MInfo+0x2>
    3232:	10 92 34 0b 	sts	0x0B34, r1	; 0x800b34 <MInfo+0x4>
    3236:	10 92 36 0b 	sts	0x0B36, r1	; 0x800b36 <MInfo+0x6>
    323a:	10 92 35 0b 	sts	0x0B35, r1	; 0x800b35 <MInfo+0x5>
    323e:	10 92 37 0b 	sts	0x0B37, r1	; 0x800b37 <MInfo+0x7>
    3242:	c0 93 1c 0b 	sts	0x0B1C, r28	; 0x800b1c <SerBuffer>
    3246:	81 e0       	ldi	r24, 0x01	; 1
    3248:	80 93 33 0b 	sts	0x0B33, r24	; 0x800b33 <MInfo+0x3>
    324c:	80 e9       	ldi	r24, 0x90	; 144
    324e:	91 e0       	ldi	r25, 0x01	; 1
    3250:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <SetTimeOut>
    3254:	40 e3       	ldi	r20, 0x30	; 48
    3256:	5b e0       	ldi	r21, 0x0B	; 11
    3258:	6c e1       	ldi	r22, 0x1C	; 28
    325a:	7b e0       	ldi	r23, 0x0B	; 11
    325c:	8c e0       	ldi	r24, 0x0C	; 12
    325e:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <M522PcdCmd>
    3262:	88 23       	and	r24, r24
    3264:	51 f0       	breq	.+20     	; 0x327a <Request+0x8c>
    3266:	86 30       	cpi	r24, 0x06	; 6
    3268:	41 f0       	breq	.+16     	; 0x327a <Request+0x8c>
    326a:	f8 01       	movw	r30, r16
    326c:	10 82       	st	Z, r1
    326e:	11 82       	std	Z+1, r1	; 0x01
    3270:	99 27       	eor	r25, r25
    3272:	cf 91       	pop	r28
    3274:	1f 91       	pop	r17
    3276:	0f 91       	pop	r16
    3278:	08 95       	ret
    327a:	20 91 34 0b 	lds	r18, 0x0B34	; 0x800b34 <MInfo+0x4>
    327e:	22 30       	cpi	r18, 0x02	; 2
    3280:	31 f0       	breq	.+12     	; 0x328e <Request+0xa0>
    3282:	8b e0       	ldi	r24, 0x0B	; 11
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	cf 91       	pop	r28
    3288:	1f 91       	pop	r17
    328a:	0f 91       	pop	r16
    328c:	08 95       	ret
    328e:	20 91 35 0b 	lds	r18, 0x0B35	; 0x800b35 <MInfo+0x5>
    3292:	30 91 36 0b 	lds	r19, 0x0B36	; 0x800b36 <MInfo+0x6>
    3296:	23 2b       	or	r18, r19
    3298:	a1 f7       	brne	.-24     	; 0x3282 <Request+0x94>
    329a:	20 91 1c 0b 	lds	r18, 0x0B1C	; 0x800b1c <SerBuffer>
    329e:	30 91 1d 0b 	lds	r19, 0x0B1D	; 0x800b1d <SerBuffer+0x1>
    32a2:	f8 01       	movw	r30, r16
    32a4:	31 83       	std	Z+1, r19	; 0x01
    32a6:	20 83       	st	Z, r18
    32a8:	99 27       	eor	r25, r25
    32aa:	ed cf       	rjmp	.-38     	; 0x3286 <Request+0x98>

000032ac <CascAnticoll>:
    32ac:	7f 92       	push	r7
    32ae:	8f 92       	push	r8
    32b0:	9f 92       	push	r9
    32b2:	af 92       	push	r10
    32b4:	bf 92       	push	r11
    32b6:	cf 92       	push	r12
    32b8:	df 92       	push	r13
    32ba:	ef 92       	push	r14
    32bc:	ff 92       	push	r15
    32be:	0f 93       	push	r16
    32c0:	1f 93       	push	r17
    32c2:	cf 93       	push	r28
    32c4:	df 93       	push	r29
    32c6:	00 d0       	rcall	.+0      	; 0x32c8 <CascAnticoll+0x1c>
    32c8:	cd b7       	in	r28, 0x3d	; 61
    32ca:	de b7       	in	r29, 0x3e	; 62
    32cc:	f8 2e       	mov	r15, r24
    32ce:	76 2e       	mov	r7, r22
    32d0:	8a 01       	movw	r16, r20
    32d2:	10 92 1e 0b 	sts	0x0B1E, r1	; 0x800b1e <SerBuffer+0x2>
    32d6:	10 92 1f 0b 	sts	0x0B1F, r1	; 0x800b1f <SerBuffer+0x3>
    32da:	10 92 20 0b 	sts	0x0B20, r1	; 0x800b20 <SerBuffer+0x4>
    32de:	10 92 21 0b 	sts	0x0B21, r1	; 0x800b21 <SerBuffer+0x5>
    32e2:	10 92 22 0b 	sts	0x0B22, r1	; 0x800b22 <SerBuffer+0x6>
    32e6:	40 e8       	ldi	r20, 0x80	; 128
    32e8:	60 e0       	ldi	r22, 0x00	; 0
    32ea:	82 e1       	ldi	r24, 0x12	; 18
    32ec:	0e 94 4d 1c 	call	0x389a	; 0x389a <RcModifyReg>
    32f0:	40 e8       	ldi	r20, 0x80	; 128
    32f2:	60 e0       	ldi	r22, 0x00	; 0
    32f4:	83 e1       	ldi	r24, 0x13	; 19
    32f6:	0e 94 4d 1c 	call	0x389a	; 0x389a <RcModifyReg>
    32fa:	60 e0       	ldi	r22, 0x00	; 0
    32fc:	8e e0       	ldi	r24, 0x0E	; 14
    32fe:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    3302:	84 e0       	ldi	r24, 0x04	; 4
    3304:	88 2e       	mov	r8, r24
    3306:	91 2c       	mov	r9, r1
    3308:	f0 e2       	ldi	r31, 0x20	; 32
    330a:	f7 15       	cp	r31, r7
    330c:	f8 f4       	brcc	.+62     	; 0x334c <CascAnticoll+0xa0>
    330e:	41 e0       	ldi	r20, 0x01	; 1
    3310:	51 e0       	ldi	r21, 0x01	; 1
    3312:	60 e0       	ldi	r22, 0x00	; 0
    3314:	8d e0       	ldi	r24, 0x0D	; 13
    3316:	49 83       	std	Y+1, r20	; 0x01
    3318:	5a 83       	std	Y+2, r21	; 0x02
    331a:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    331e:	60 e8       	ldi	r22, 0x80	; 128
    3320:	8e e0       	ldi	r24, 0x0E	; 14
    3322:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    3326:	49 81       	ldd	r20, Y+1	; 0x01
    3328:	5a 81       	ldd	r21, Y+2	; 0x02
    332a:	ca 01       	movw	r24, r20
    332c:	0f 90       	pop	r0
    332e:	0f 90       	pop	r0
    3330:	df 91       	pop	r29
    3332:	cf 91       	pop	r28
    3334:	1f 91       	pop	r17
    3336:	0f 91       	pop	r16
    3338:	ff 90       	pop	r15
    333a:	ef 90       	pop	r14
    333c:	df 90       	pop	r13
    333e:	cf 90       	pop	r12
    3340:	bf 90       	pop	r11
    3342:	af 90       	pop	r10
    3344:	9f 90       	pop	r9
    3346:	8f 90       	pop	r8
    3348:	7f 90       	pop	r7
    334a:	08 95       	ret
    334c:	27 2d       	mov	r18, r7
    334e:	27 70       	andi	r18, 0x07	; 7
    3350:	e2 2e       	mov	r14, r18
    3352:	87 2d       	mov	r24, r7
    3354:	86 95       	lsr	r24
    3356:	86 95       	lsr	r24
    3358:	86 95       	lsr	r24
    335a:	22 23       	and	r18, r18
    335c:	09 f4       	brne	.+2      	; 0x3360 <CascAnticoll+0xb4>
    335e:	a5 c0       	rjmp	.+330    	; 0x34aa <CascAnticoll+0x1fe>
    3360:	dd 24       	eor	r13, r13
    3362:	d3 94       	inc	r13
    3364:	d8 0e       	add	r13, r24
    3366:	f0 92 1c 0b 	sts	0x0B1C, r15	; 0x800b1c <SerBuffer>
    336a:	90 e2       	ldi	r25, 0x20	; 32
    336c:	92 0f       	add	r25, r18
    336e:	e0 e1       	ldi	r30, 0x10	; 16
    3370:	8e 9f       	mul	r24, r30
    3372:	90 0d       	add	r25, r0
    3374:	11 24       	eor	r1, r1
    3376:	90 93 1d 0b 	sts	0x0B1D, r25	; 0x800b1d <SerBuffer+0x1>
    337a:	f8 01       	movw	r30, r16
    337c:	ae e1       	ldi	r26, 0x1E	; 30
    337e:	bb e0       	ldi	r27, 0x0B	; 11
    3380:	2f ef       	ldi	r18, 0xFF	; 255
    3382:	2d 0d       	add	r18, r13
    3384:	30 e0       	ldi	r19, 0x00	; 0
    3386:	2f 5f       	subi	r18, 0xFF	; 255
    3388:	3f 4f       	sbci	r19, 0xFF	; 255
    338a:	20 0f       	add	r18, r16
    338c:	31 1f       	adc	r19, r17
    338e:	91 91       	ld	r25, Z+
    3390:	9d 93       	st	X+, r25
    3392:	e2 17       	cp	r30, r18
    3394:	f3 07       	cpc	r31, r19
    3396:	d9 f7       	brne	.-10     	; 0x338e <CascAnticoll+0xe2>
    3398:	f0 e1       	ldi	r31, 0x10	; 16
    339a:	ef 9e       	mul	r14, r31
    339c:	b0 01       	movw	r22, r0
    339e:	11 24       	eor	r1, r1
    33a0:	6e 29       	or	r22, r14
    33a2:	8d e0       	ldi	r24, 0x0D	; 13
    33a4:	0e 94 2f 1c 	call	0x385e	; 0x385e <RcSetReg>
    33a8:	10 92 30 0b 	sts	0x0B30, r1	; 0x800b30 <MInfo>
    33ac:	10 92 31 0b 	sts	0x0B31, r1	; 0x800b31 <MInfo+0x1>
    33b0:	10 92 32 0b 	sts	0x0B32, r1	; 0x800b32 <MInfo+0x2>
    33b4:	10 92 34 0b 	sts	0x0B34, r1	; 0x800b34 <MInfo+0x4>
    33b8:	10 92 36 0b 	sts	0x0B36, r1	; 0x800b36 <MInfo+0x6>
    33bc:	10 92 35 0b 	sts	0x0B35, r1	; 0x800b35 <MInfo+0x5>
    33c0:	10 92 37 0b 	sts	0x0B37, r1	; 0x800b37 <MInfo+0x7>
    33c4:	82 e0       	ldi	r24, 0x02	; 2
    33c6:	8d 0d       	add	r24, r13
    33c8:	80 93 33 0b 	sts	0x0B33, r24	; 0x800b33 <MInfo+0x3>
    33cc:	80 e1       	ldi	r24, 0x10	; 16
    33ce:	97 e2       	ldi	r25, 0x27	; 39
    33d0:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <SetTimeOut>
    33d4:	40 e3       	ldi	r20, 0x30	; 48
    33d6:	5b e0       	ldi	r21, 0x0B	; 11
    33d8:	6c e1       	ldi	r22, 0x1C	; 28
    33da:	7b e0       	ldi	r23, 0x0B	; 11
    33dc:	8c e0       	ldi	r24, 0x0C	; 12
    33de:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <M522PcdCmd>
    33e2:	ac 01       	movw	r20, r24
    33e4:	86 30       	cpi	r24, 0x06	; 6
    33e6:	91 05       	cpc	r25, r1
    33e8:	19 f0       	breq	.+6      	; 0x33f0 <CascAnticoll+0x144>
    33ea:	89 2b       	or	r24, r25
    33ec:	09 f0       	breq	.+2      	; 0x33f0 <CascAnticoll+0x144>
    33ee:	91 cf       	rjmp	.-222    	; 0x3312 <CascAnticoll+0x66>
    33f0:	20 91 35 0b 	lds	r18, 0x0B35	; 0x800b35 <MInfo+0x5>
    33f4:	30 91 36 0b 	lds	r19, 0x0B36	; 0x800b36 <MInfo+0x6>
    33f8:	60 91 34 0b 	lds	r22, 0x0B34	; 0x800b34 <MInfo+0x4>
    33fc:	b6 2e       	mov	r11, r22
    33fe:	bb 0c       	add	r11, r11
    3400:	bb 0c       	add	r11, r11
    3402:	bb 0c       	add	r11, r11
    3404:	b2 0e       	add	r11, r18
    3406:	be 18       	sub	r11, r14
    3408:	87 2d       	mov	r24, r7
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	8b 0d       	add	r24, r11
    340e:	91 1d       	adc	r25, r1
    3410:	89 97       	sbiw	r24, 0x29	; 41
    3412:	0c f0       	brlt	.+2      	; 0x3416 <CascAnticoll+0x16a>
    3414:	55 c0       	rjmp	.+170    	; 0x34c0 <CascAnticoll+0x214>
    3416:	23 2b       	or	r18, r19
    3418:	19 f0       	breq	.+6      	; 0x3420 <CascAnticoll+0x174>
    341a:	6f 5f       	subi	r22, 0xFF	; 255
    341c:	60 93 34 0b 	sts	0x0B34, r22	; 0x800b34 <MInfo+0x4>
    3420:	ee 20       	and	r14, r14
    3422:	09 f4       	brne	.+2      	; 0x3426 <CascAnticoll+0x17a>
    3424:	50 c0       	rjmp	.+160    	; 0x34c6 <CascAnticoll+0x21a>
    3426:	ad 2d       	mov	r26, r13
    3428:	b0 e0       	ldi	r27, 0x00	; 0
    342a:	fd 01       	movw	r30, r26
    342c:	31 97       	sbiw	r30, 0x01	; 1
    342e:	e0 0f       	add	r30, r16
    3430:	f1 1f       	adc	r31, r17
    3432:	90 81       	ld	r25, Z
    3434:	80 91 1c 0b 	lds	r24, 0x0B1C	; 0x800b1c <SerBuffer>
    3438:	89 2b       	or	r24, r25
    343a:	80 83       	st	Z, r24
    343c:	aa 24       	eor	r10, r10
    343e:	a3 94       	inc	r10
    3440:	64 01       	movw	r12, r8
    3442:	ca 1a       	sub	r12, r26
    3444:	db 0a       	sbc	r13, r27
    3446:	1c 14       	cp	r1, r12
    3448:	1d 04       	cpc	r1, r13
    344a:	0c f0       	brlt	.+2      	; 0x344e <CascAnticoll+0x1a2>
    344c:	46 c0       	rjmp	.+140    	; 0x34da <CascAnticoll+0x22e>
    344e:	6a 2d       	mov	r22, r10
    3450:	70 e0       	ldi	r23, 0x00	; 0
    3452:	20 e0       	ldi	r18, 0x00	; 0
    3454:	30 e0       	ldi	r19, 0x00	; 0
    3456:	80 e0       	ldi	r24, 0x00	; 0
    3458:	64 5e       	subi	r22, 0xE4	; 228
    345a:	74 4f       	sbci	r23, 0xF4	; 244
    345c:	fb 01       	movw	r30, r22
    345e:	e2 0f       	add	r30, r18
    3460:	f3 1f       	adc	r31, r19
    3462:	90 81       	ld	r25, Z
    3464:	20 0f       	add	r18, r16
    3466:	31 1f       	adc	r19, r17
    3468:	f9 01       	movw	r30, r18
    346a:	ea 0f       	add	r30, r26
    346c:	fb 1f       	adc	r31, r27
    346e:	90 83       	st	Z, r25
    3470:	8f 5f       	subi	r24, 0xFF	; 255
    3472:	28 2f       	mov	r18, r24
    3474:	30 e0       	ldi	r19, 0x00	; 0
    3476:	2c 15       	cp	r18, r12
    3478:	3d 05       	cpc	r19, r13
    347a:	84 f3       	brlt	.-32     	; 0x345c <CascAnticoll+0x1b0>
    347c:	46 30       	cpi	r20, 0x06	; 6
    347e:	51 05       	cpc	r21, r1
    3480:	89 f1       	breq	.+98     	; 0x34e4 <CascAnticoll+0x238>
    3482:	f8 01       	movw	r30, r16
    3484:	91 81       	ldd	r25, Z+1	; 0x01
    3486:	80 81       	ld	r24, Z
    3488:	98 27       	eor	r25, r24
    348a:	82 81       	ldd	r24, Z+2	; 0x02
    348c:	98 27       	eor	r25, r24
    348e:	83 81       	ldd	r24, Z+3	; 0x03
    3490:	89 27       	eor	r24, r25
    3492:	24 5e       	subi	r18, 0xE4	; 228
    3494:	34 4f       	sbci	r19, 0xF4	; 244
    3496:	f9 01       	movw	r30, r18
    3498:	ea 0d       	add	r30, r10
    349a:	f1 1d       	adc	r31, r1
    349c:	90 81       	ld	r25, Z
    349e:	89 17       	cp	r24, r25
    34a0:	09 f4       	brne	.+2      	; 0x34a4 <CascAnticoll+0x1f8>
    34a2:	37 cf       	rjmp	.-402    	; 0x3312 <CascAnticoll+0x66>
    34a4:	41 e0       	ldi	r20, 0x01	; 1
    34a6:	55 e0       	ldi	r21, 0x05	; 5
    34a8:	34 cf       	rjmp	.-408    	; 0x3312 <CascAnticoll+0x66>
    34aa:	d8 2e       	mov	r13, r24
    34ac:	f0 92 1c 0b 	sts	0x0B1C, r15	; 0x800b1c <SerBuffer>
    34b0:	82 95       	swap	r24
    34b2:	80 7f       	andi	r24, 0xF0	; 240
    34b4:	80 5e       	subi	r24, 0xE0	; 224
    34b6:	80 93 1d 0b 	sts	0x0B1D, r24	; 0x800b1d <SerBuffer+0x1>
    34ba:	d1 10       	cpse	r13, r1
    34bc:	5e cf       	rjmp	.-324    	; 0x337a <CascAnticoll+0xce>
    34be:	6c cf       	rjmp	.-296    	; 0x3398 <CascAnticoll+0xec>
    34c0:	44 e0       	ldi	r20, 0x04	; 4
    34c2:	50 e0       	ldi	r21, 0x00	; 0
    34c4:	26 cf       	rjmp	.-436    	; 0x3312 <CascAnticoll+0x66>
    34c6:	a1 2c       	mov	r10, r1
    34c8:	ad 2d       	mov	r26, r13
    34ca:	b0 e0       	ldi	r27, 0x00	; 0
    34cc:	64 01       	movw	r12, r8
    34ce:	ca 1a       	sub	r12, r26
    34d0:	db 0a       	sbc	r13, r27
    34d2:	1c 14       	cp	r1, r12
    34d4:	1d 04       	cpc	r1, r13
    34d6:	0c f4       	brge	.+2      	; 0x34da <CascAnticoll+0x22e>
    34d8:	ba cf       	rjmp	.-140    	; 0x344e <CascAnticoll+0x1a2>
    34da:	20 e0       	ldi	r18, 0x00	; 0
    34dc:	30 e0       	ldi	r19, 0x00	; 0
    34de:	46 30       	cpi	r20, 0x06	; 6
    34e0:	51 05       	cpc	r21, r1
    34e2:	79 f6       	brne	.-98     	; 0x3482 <CascAnticoll+0x1d6>
    34e4:	7b 0c       	add	r7, r11
    34e6:	10 cf       	rjmp	.-480    	; 0x3308 <CascAnticoll+0x5c>

000034e8 <Select>:
    34e8:	ff 92       	push	r15
    34ea:	0f 93       	push	r16
    34ec:	1f 93       	push	r17
    34ee:	cf 93       	push	r28
    34f0:	df 93       	push	r29
    34f2:	f8 2e       	mov	r15, r24
    34f4:	eb 01       	movw	r28, r22
    34f6:	8a 01       	movw	r16, r20
    34f8:	40 e8       	ldi	r20, 0x80	; 128
    34fa:	61 e0       	ldi	r22, 0x01	; 1
    34fc:	82 e1       	ldi	r24, 0x12	; 18
    34fe:	0e 94 4d 1c 	call	0x389a	; 0x389a <RcModifyReg>
    3502:	40 e8       	ldi	r20, 0x80	; 128
    3504:	61 e0       	ldi	r22, 0x01	; 1
    3506:	83 e1       	ldi	r24, 0x13	; 19
    3508:	0e 94 4d 1c 	call	0x389a	; 0x389a <RcModifyReg>
    350c:	f0 92 1c 0b 	sts	0x0B1C, r15	; 0x800b1c <SerBuffer>
    3510:	80 e7       	ldi	r24, 0x70	; 112
    3512:	80 93 1d 0b 	sts	0x0B1D, r24	; 0x800b1d <SerBuffer+0x1>
    3516:	fe 01       	movw	r30, r28
    3518:	ae e1       	ldi	r26, 0x1E	; 30
    351a:	bb e0       	ldi	r27, 0x0B	; 11
    351c:	9e 01       	movw	r18, r28
    351e:	2c 5f       	subi	r18, 0xFC	; 252
    3520:	3f 4f       	sbci	r19, 0xFF	; 255
    3522:	81 91       	ld	r24, Z+
    3524:	8d 93       	st	X+, r24
    3526:	e2 17       	cp	r30, r18
    3528:	f3 07       	cpc	r31, r19
    352a:	d9 f7       	brne	.-10     	; 0x3522 <Select+0x3a>
    352c:	99 81       	ldd	r25, Y+1	; 0x01
    352e:	88 81       	ld	r24, Y
    3530:	89 27       	eor	r24, r25
    3532:	9a 81       	ldd	r25, Y+2	; 0x02
    3534:	89 27       	eor	r24, r25
    3536:	9b 81       	ldd	r25, Y+3	; 0x03
    3538:	89 27       	eor	r24, r25
    353a:	80 93 22 0b 	sts	0x0B22, r24	; 0x800b22 <SerBuffer+0x6>
    353e:	10 92 30 0b 	sts	0x0B30, r1	; 0x800b30 <MInfo>
    3542:	10 92 31 0b 	sts	0x0B31, r1	; 0x800b31 <MInfo+0x1>
    3546:	10 92 32 0b 	sts	0x0B32, r1	; 0x800b32 <MInfo+0x2>
    354a:	10 92 34 0b 	sts	0x0B34, r1	; 0x800b34 <MInfo+0x4>
    354e:	10 92 36 0b 	sts	0x0B36, r1	; 0x800b36 <MInfo+0x6>
    3552:	10 92 35 0b 	sts	0x0B35, r1	; 0x800b35 <MInfo+0x5>
    3556:	10 92 37 0b 	sts	0x0B37, r1	; 0x800b37 <MInfo+0x7>
    355a:	87 e0       	ldi	r24, 0x07	; 7
    355c:	80 93 33 0b 	sts	0x0B33, r24	; 0x800b33 <MInfo+0x3>
    3560:	80 ed       	ldi	r24, 0xD0	; 208
    3562:	97 e0       	ldi	r25, 0x07	; 7
    3564:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <SetTimeOut>
    3568:	40 e3       	ldi	r20, 0x30	; 48
    356a:	5b e0       	ldi	r21, 0x0B	; 11
    356c:	6c e1       	ldi	r22, 0x1C	; 28
    356e:	7b e0       	ldi	r23, 0x0B	; 11
    3570:	8c e0       	ldi	r24, 0x0C	; 12
    3572:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <M522PcdCmd>
    3576:	00 97       	sbiw	r24, 0x00	; 0
    3578:	31 f4       	brne	.+12     	; 0x3586 <Select+0x9e>
    357a:	20 91 34 0b 	lds	r18, 0x0B34	; 0x800b34 <MInfo+0x4>
    357e:	21 30       	cpi	r18, 0x01	; 1
    3580:	41 f0       	breq	.+16     	; 0x3592 <Select+0xaa>
    3582:	84 e0       	ldi	r24, 0x04	; 4
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	df 91       	pop	r29
    3588:	cf 91       	pop	r28
    358a:	1f 91       	pop	r17
    358c:	0f 91       	pop	r16
    358e:	ff 90       	pop	r15
    3590:	08 95       	ret
    3592:	20 91 35 0b 	lds	r18, 0x0B35	; 0x800b35 <MInfo+0x5>
    3596:	30 91 36 0b 	lds	r19, 0x0B36	; 0x800b36 <MInfo+0x6>
    359a:	23 2b       	or	r18, r19
    359c:	91 f7       	brne	.-28     	; 0x3582 <Select+0x9a>
    359e:	20 91 1c 0b 	lds	r18, 0x0B1C	; 0x800b1c <SerBuffer>
    35a2:	f8 01       	movw	r30, r16
    35a4:	20 83       	st	Z, r18
    35a6:	ef cf       	rjmp	.-34     	; 0x3586 <Select+0x9e>

000035a8 <AnticollSelect>:
    35a8:	9f 92       	push	r9
    35aa:	af 92       	push	r10
    35ac:	bf 92       	push	r11
    35ae:	cf 92       	push	r12
    35b0:	df 92       	push	r13
    35b2:	ef 92       	push	r14
    35b4:	ff 92       	push	r15
    35b6:	0f 93       	push	r16
    35b8:	1f 93       	push	r17
    35ba:	cf 93       	push	r28
    35bc:	df 93       	push	r29
    35be:	cd b7       	in	r28, 0x3d	; 61
    35c0:	de b7       	in	r29, 0x3e	; 62
    35c2:	2e 97       	sbiw	r28, 0x0e	; 14
    35c4:	0f b6       	in	r0, 0x3f	; 63
    35c6:	f8 94       	cli
    35c8:	de bf       	out	0x3e, r29	; 62
    35ca:	0f be       	out	0x3f, r0	; 63
    35cc:	cd bf       	out	0x3d, r28	; 61
    35ce:	08 2f       	mov	r16, r24
    35d0:	6b 01       	movw	r12, r22
    35d2:	5a 01       	movw	r10, r20
    35d4:	ce 01       	movw	r24, r28
    35d6:	01 96       	adiw	r24, 0x01	; 1
    35d8:	7c 01       	movw	r14, r24
    35da:	80 e0       	ldi	r24, 0x00	; 0
    35dc:	90 e0       	ldi	r25, 0x00	; 0
    35de:	10 e0       	ldi	r17, 0x00	; 0
    35e0:	00 23       	and	r16, r16
    35e2:	09 f4       	brne	.+2      	; 0x35e6 <AnticollSelect+0x3e>
    35e4:	68 c0       	rjmp	.+208    	; 0x36b6 <AnticollSelect+0x10e>
    35e6:	01 32       	cpi	r16, 0x21	; 33
    35e8:	78 f0       	brcs	.+30     	; 0x3608 <AnticollSelect+0x60>
    35ea:	20 ee       	ldi	r18, 0xE0	; 224
    35ec:	92 2e       	mov	r9, r18
    35ee:	90 0e       	add	r9, r16
    35f0:	11 30       	cpi	r17, 0x01	; 1
    35f2:	09 f4       	brne	.+2      	; 0x35f6 <AnticollSelect+0x4e>
    35f4:	74 c0       	rjmp	.+232    	; 0x36de <AnticollSelect+0x136>
    35f6:	12 30       	cpi	r17, 0x02	; 2
    35f8:	09 f0       	breq	.+2      	; 0x35fc <AnticollSelect+0x54>
    35fa:	7d c0       	rjmp	.+250    	; 0x36f6 <AnticollSelect+0x14e>
    35fc:	00 e2       	ldi	r16, 0x20	; 32
    35fe:	27 e9       	ldi	r18, 0x97	; 151
    3600:	00 32       	cpi	r16, 0x20	; 32
    3602:	61 f4       	brne	.+24     	; 0x361c <AnticollSelect+0x74>
    3604:	09 2d       	mov	r16, r9
    3606:	37 c0       	rjmp	.+110    	; 0x3676 <AnticollSelect+0xce>
    3608:	11 30       	cpi	r17, 0x01	; 1
    360a:	09 f4       	brne	.+2      	; 0x360e <AnticollSelect+0x66>
    360c:	5b c0       	rjmp	.+182    	; 0x36c4 <AnticollSelect+0x11c>
    360e:	12 30       	cpi	r17, 0x02	; 2
    3610:	09 f4       	brne	.+2      	; 0x3614 <AnticollSelect+0x6c>
    3612:	55 c0       	rjmp	.+170    	; 0x36be <AnticollSelect+0x116>
    3614:	91 2c       	mov	r9, r1
    3616:	23 e9       	ldi	r18, 0x93	; 147
    3618:	00 32       	cpi	r16, 0x20	; 32
    361a:	a1 f3       	breq	.-24     	; 0x3604 <AnticollSelect+0x5c>
    361c:	00 97       	sbiw	r24, 0x00	; 0
    361e:	19 f1       	breq	.+70     	; 0x3666 <AnticollSelect+0xbe>
    3620:	2d 85       	ldd	r18, Y+13	; 0x0d
    3622:	11 30       	cpi	r17, 0x01	; 1
    3624:	09 f4       	brne	.+2      	; 0x3628 <AnticollSelect+0x80>
    3626:	5d c0       	rjmp	.+186    	; 0x36e2 <AnticollSelect+0x13a>
    3628:	12 30       	cpi	r17, 0x02	; 2
    362a:	d9 f5       	brne	.+118    	; 0x36a2 <AnticollSelect+0xfa>
    362c:	4d 81       	ldd	r20, Y+5	; 0x05
    362e:	5e 81       	ldd	r21, Y+6	; 0x06
    3630:	6f 81       	ldd	r22, Y+7	; 0x07
    3632:	78 85       	ldd	r23, Y+8	; 0x08
    3634:	f6 01       	movw	r30, r12
    3636:	46 83       	std	Z+6, r20	; 0x06
    3638:	57 83       	std	Z+7, r21	; 0x07
    363a:	60 87       	std	Z+8, r22	; 0x08
    363c:	71 87       	std	Z+9, r23	; 0x09
    363e:	f5 01       	movw	r30, r10
    3640:	20 83       	st	Z, r18
    3642:	2e 96       	adiw	r28, 0x0e	; 14
    3644:	0f b6       	in	r0, 0x3f	; 63
    3646:	f8 94       	cli
    3648:	de bf       	out	0x3e, r29	; 62
    364a:	0f be       	out	0x3f, r0	; 63
    364c:	cd bf       	out	0x3d, r28	; 61
    364e:	df 91       	pop	r29
    3650:	cf 91       	pop	r28
    3652:	1f 91       	pop	r17
    3654:	0f 91       	pop	r16
    3656:	ff 90       	pop	r15
    3658:	ef 90       	pop	r14
    365a:	df 90       	pop	r13
    365c:	cf 90       	pop	r12
    365e:	bf 90       	pop	r11
    3660:	af 90       	pop	r10
    3662:	9f 90       	pop	r9
    3664:	08 95       	ret
    3666:	a7 01       	movw	r20, r14
    3668:	60 2f       	mov	r22, r16
    366a:	82 2f       	mov	r24, r18
    366c:	2e 87       	std	Y+14, r18	; 0x0e
    366e:	0e 94 56 19 	call	0x32ac	; 0x32ac <CascAnticoll>
    3672:	09 2d       	mov	r16, r9
    3674:	2e 85       	ldd	r18, Y+14	; 0x0e
    3676:	00 97       	sbiw	r24, 0x00	; 0
    3678:	99 f6       	brne	.-90     	; 0x3620 <AnticollSelect+0x78>
    367a:	ae 01       	movw	r20, r28
    367c:	43 5f       	subi	r20, 0xF3	; 243
    367e:	5f 4f       	sbci	r21, 0xFF	; 255
    3680:	b7 01       	movw	r22, r14
    3682:	82 2f       	mov	r24, r18
    3684:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <Select>
    3688:	00 97       	sbiw	r24, 0x00	; 0
    368a:	19 f4       	brne	.+6      	; 0x3692 <AnticollSelect+0xea>
    368c:	2d 85       	ldd	r18, Y+13	; 0x0d
    368e:	22 ff       	sbrs	r18, 2
    3690:	c8 cf       	rjmp	.-112    	; 0x3622 <AnticollSelect+0x7a>
    3692:	1f 5f       	subi	r17, 0xFF	; 255
    3694:	f4 e0       	ldi	r31, 0x04	; 4
    3696:	ef 0e       	add	r14, r31
    3698:	f1 1c       	adc	r15, r1
    369a:	13 30       	cpi	r17, 0x03	; 3
    369c:	09 f0       	breq	.+2      	; 0x36a0 <AnticollSelect+0xf8>
    369e:	a0 cf       	rjmp	.-192    	; 0x35e0 <AnticollSelect+0x38>
    36a0:	2d 85       	ldd	r18, Y+13	; 0x0d
    36a2:	49 81       	ldd	r20, Y+1	; 0x01
    36a4:	5a 81       	ldd	r21, Y+2	; 0x02
    36a6:	6b 81       	ldd	r22, Y+3	; 0x03
    36a8:	7c 81       	ldd	r23, Y+4	; 0x04
    36aa:	f6 01       	movw	r30, r12
    36ac:	40 83       	st	Z, r20
    36ae:	51 83       	std	Z+1, r21	; 0x01
    36b0:	62 83       	std	Z+2, r22	; 0x02
    36b2:	73 83       	std	Z+3, r23	; 0x03
    36b4:	c4 cf       	rjmp	.-120    	; 0x363e <AnticollSelect+0x96>
    36b6:	11 30       	cpi	r17, 0x01	; 1
    36b8:	29 f0       	breq	.+10     	; 0x36c4 <AnticollSelect+0x11c>
    36ba:	12 30       	cpi	r17, 0x02	; 2
    36bc:	69 f4       	brne	.+26     	; 0x36d8 <AnticollSelect+0x130>
    36be:	91 2c       	mov	r9, r1
    36c0:	27 e9       	ldi	r18, 0x97	; 151
    36c2:	9e cf       	rjmp	.-196    	; 0x3600 <AnticollSelect+0x58>
    36c4:	91 2c       	mov	r9, r1
    36c6:	2a 81       	ldd	r18, Y+2	; 0x02
    36c8:	3b 81       	ldd	r19, Y+3	; 0x03
    36ca:	4c 81       	ldd	r20, Y+4	; 0x04
    36cc:	f6 01       	movw	r30, r12
    36ce:	20 83       	st	Z, r18
    36d0:	31 83       	std	Z+1, r19	; 0x01
    36d2:	42 83       	std	Z+2, r20	; 0x02
    36d4:	25 e9       	ldi	r18, 0x95	; 149
    36d6:	a0 cf       	rjmp	.-192    	; 0x3618 <AnticollSelect+0x70>
    36d8:	91 2c       	mov	r9, r1
    36da:	23 e9       	ldi	r18, 0x93	; 147
    36dc:	9f cf       	rjmp	.-194    	; 0x361c <AnticollSelect+0x74>
    36de:	00 e2       	ldi	r16, 0x20	; 32
    36e0:	f2 cf       	rjmp	.-28     	; 0x36c6 <AnticollSelect+0x11e>
    36e2:	4d 81       	ldd	r20, Y+5	; 0x05
    36e4:	5e 81       	ldd	r21, Y+6	; 0x06
    36e6:	6f 81       	ldd	r22, Y+7	; 0x07
    36e8:	78 85       	ldd	r23, Y+8	; 0x08
    36ea:	f6 01       	movw	r30, r12
    36ec:	43 83       	std	Z+3, r20	; 0x03
    36ee:	54 83       	std	Z+4, r21	; 0x04
    36f0:	65 83       	std	Z+5, r22	; 0x05
    36f2:	76 83       	std	Z+6, r23	; 0x06
    36f4:	a4 cf       	rjmp	.-184    	; 0x363e <AnticollSelect+0x96>
    36f6:	09 2d       	mov	r16, r9
    36f8:	23 e9       	ldi	r18, 0x93	; 147
    36fa:	bd cf       	rjmp	.-134    	; 0x3676 <AnticollSelect+0xce>

000036fc <Authentication>:
    36fc:	cf 93       	push	r28
    36fe:	df 93       	push	r29
    3700:	10 92 30 0b 	sts	0x0B30, r1	; 0x800b30 <MInfo>
    3704:	10 92 31 0b 	sts	0x0B31, r1	; 0x800b31 <MInfo+0x1>
    3708:	10 92 32 0b 	sts	0x0B32, r1	; 0x800b32 <MInfo+0x2>
    370c:	10 92 33 0b 	sts	0x0B33, r1	; 0x800b33 <MInfo+0x3>
    3710:	10 92 34 0b 	sts	0x0B34, r1	; 0x800b34 <MInfo+0x4>
    3714:	10 92 36 0b 	sts	0x0B36, r1	; 0x800b36 <MInfo+0x6>
    3718:	10 92 35 0b 	sts	0x0B35, r1	; 0x800b35 <MInfo+0x5>
    371c:	10 92 37 0b 	sts	0x0B37, r1	; 0x800b37 <MInfo+0x7>
    3720:	80 93 1c 0b 	sts	0x0B1C, r24	; 0x800b1c <SerBuffer>
    3724:	20 93 1d 0b 	sts	0x0B1D, r18	; 0x800b1d <SerBuffer+0x1>
    3728:	86 e0       	ldi	r24, 0x06	; 6
    372a:	fb 01       	movw	r30, r22
    372c:	ae e1       	ldi	r26, 0x1E	; 30
    372e:	bb e0       	ldi	r27, 0x0B	; 11
    3730:	01 90       	ld	r0, Z+
    3732:	0d 92       	st	X+, r0
    3734:	8a 95       	dec	r24
    3736:	e1 f7       	brne	.-8      	; 0x3730 <Authentication+0x34>
    3738:	fa 01       	movw	r30, r20
    373a:	80 81       	ld	r24, Z
    373c:	91 81       	ldd	r25, Z+1	; 0x01
    373e:	a2 81       	ldd	r26, Z+2	; 0x02
    3740:	b3 81       	ldd	r27, Z+3	; 0x03
    3742:	80 93 24 0b 	sts	0x0B24, r24	; 0x800b24 <SerBuffer+0x8>
    3746:	90 93 25 0b 	sts	0x0B25, r25	; 0x800b25 <SerBuffer+0x9>
    374a:	a0 93 26 0b 	sts	0x0B26, r26	; 0x800b26 <SerBuffer+0xa>
    374e:	b0 93 27 0b 	sts	0x0B27, r27	; 0x800b27 <SerBuffer+0xb>
    3752:	8c e0       	ldi	r24, 0x0C	; 12
    3754:	80 93 33 0b 	sts	0x0B33, r24	; 0x800b33 <MInfo+0x3>
    3758:	80 ed       	ldi	r24, 0xD0	; 208
    375a:	97 e0       	ldi	r25, 0x07	; 7
    375c:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <SetTimeOut>
    3760:	40 e3       	ldi	r20, 0x30	; 48
    3762:	5b e0       	ldi	r21, 0x0B	; 11
    3764:	6c e1       	ldi	r22, 0x1C	; 28
    3766:	7b e0       	ldi	r23, 0x0B	; 11
    3768:	8e e0       	ldi	r24, 0x0E	; 14
    376a:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <M522PcdCmd>
    376e:	ec 01       	movw	r28, r24
    3770:	89 2b       	or	r24, r25
    3772:	21 f0       	breq	.+8      	; 0x377c <Authentication+0x80>
    3774:	ce 01       	movw	r24, r28
    3776:	df 91       	pop	r29
    3778:	cf 91       	pop	r28
    377a:	08 95       	ret
    377c:	88 e0       	ldi	r24, 0x08	; 8
    377e:	0e 94 43 1c 	call	0x3886	; 0x3886 <RcGetReg>
    3782:	8f 70       	andi	r24, 0x0F	; 15
    3784:	88 30       	cpi	r24, 0x08	; 8
    3786:	b1 f3       	breq	.-20     	; 0x3774 <Authentication+0x78>
    3788:	c1 e0       	ldi	r28, 0x01	; 1
    378a:	d2 e0       	ldi	r29, 0x02	; 2
    378c:	ce 01       	movw	r24, r28
    378e:	df 91       	pop	r29
    3790:	cf 91       	pop	r28
    3792:	08 95       	ret

00003794 <Read>:
    3794:	cf 93       	push	r28
    3796:	df 93       	push	r29
    3798:	eb 01       	movw	r28, r22
    379a:	10 92 30 0b 	sts	0x0B30, r1	; 0x800b30 <MInfo>
    379e:	10 92 31 0b 	sts	0x0B31, r1	; 0x800b31 <MInfo+0x1>
    37a2:	10 92 32 0b 	sts	0x0B32, r1	; 0x800b32 <MInfo+0x2>
    37a6:	10 92 34 0b 	sts	0x0B34, r1	; 0x800b34 <MInfo+0x4>
    37aa:	10 92 36 0b 	sts	0x0B36, r1	; 0x800b36 <MInfo+0x6>
    37ae:	10 92 35 0b 	sts	0x0B35, r1	; 0x800b35 <MInfo+0x5>
    37b2:	10 92 37 0b 	sts	0x0B37, r1	; 0x800b37 <MInfo+0x7>
    37b6:	90 e3       	ldi	r25, 0x30	; 48
    37b8:	90 93 1c 0b 	sts	0x0B1C, r25	; 0x800b1c <SerBuffer>
    37bc:	80 93 1d 0b 	sts	0x0B1D, r24	; 0x800b1d <SerBuffer+0x1>
    37c0:	82 e0       	ldi	r24, 0x02	; 2
    37c2:	80 93 33 0b 	sts	0x0B33, r24	; 0x800b33 <MInfo+0x3>
    37c6:	80 e1       	ldi	r24, 0x10	; 16
    37c8:	97 e2       	ldi	r25, 0x27	; 39
    37ca:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <SetTimeOut>
    37ce:	40 e3       	ldi	r20, 0x30	; 48
    37d0:	5b e0       	ldi	r21, 0x0B	; 11
    37d2:	6c e1       	ldi	r22, 0x1C	; 28
    37d4:	7b e0       	ldi	r23, 0x0B	; 11
    37d6:	8c e0       	ldi	r24, 0x0C	; 12
    37d8:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <M522PcdCmd>
    37dc:	00 97       	sbiw	r24, 0x00	; 0
    37de:	91 f0       	breq	.+36     	; 0x3804 <Read+0x70>
    37e0:	81 30       	cpi	r24, 0x01	; 1
    37e2:	91 05       	cpc	r25, r1
    37e4:	39 f0       	breq	.+14     	; 0x37f4 <Read+0x60>
    37e6:	20 91 35 0b 	lds	r18, 0x0B35	; 0x800b35 <MInfo+0x5>
    37ea:	30 91 36 0b 	lds	r19, 0x0B36	; 0x800b36 <MInfo+0x6>
    37ee:	24 30       	cpi	r18, 0x04	; 4
    37f0:	31 05       	cpc	r19, r1
    37f2:	b1 f0       	breq	.+44     	; 0x3820 <Read+0x8c>
    37f4:	20 e1       	ldi	r18, 0x10	; 16
    37f6:	fe 01       	movw	r30, r28
    37f8:	11 92       	st	Z+, r1
    37fa:	2a 95       	dec	r18
    37fc:	e9 f7       	brne	.-6      	; 0x37f8 <Read+0x64>
    37fe:	df 91       	pop	r29
    3800:	cf 91       	pop	r28
    3802:	08 95       	ret
    3804:	20 91 34 0b 	lds	r18, 0x0B34	; 0x800b34 <MInfo+0x4>
    3808:	20 31       	cpi	r18, 0x10	; 16
    380a:	a9 f0       	breq	.+42     	; 0x3836 <Read+0xa2>
    380c:	80 e1       	ldi	r24, 0x10	; 16
    380e:	fe 01       	movw	r30, r28
    3810:	11 92       	st	Z+, r1
    3812:	8a 95       	dec	r24
    3814:	e9 f7       	brne	.-6      	; 0x3810 <Read+0x7c>
    3816:	88 e0       	ldi	r24, 0x08	; 8
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	df 91       	pop	r29
    381c:	cf 91       	pop	r28
    381e:	08 95       	ret
    3820:	80 91 1c 0b 	lds	r24, 0x0B1C	; 0x800b1c <SerBuffer>
    3824:	98 2f       	mov	r25, r24
    3826:	9f 70       	andi	r25, 0x0F	; 15
    3828:	90 93 1c 0b 	sts	0x0B1C, r25	; 0x800b1c <SerBuffer>
    382c:	8a 70       	andi	r24, 0x0A	; 10
    382e:	61 f0       	breq	.+24     	; 0x3848 <Read+0xb4>
    3830:	85 e0       	ldi	r24, 0x05	; 5
    3832:	91 e0       	ldi	r25, 0x01	; 1
    3834:	df cf       	rjmp	.-66     	; 0x37f4 <Read+0x60>
    3836:	20 e1       	ldi	r18, 0x10	; 16
    3838:	ec e1       	ldi	r30, 0x1C	; 28
    383a:	fb e0       	ldi	r31, 0x0B	; 11
    383c:	de 01       	movw	r26, r28
    383e:	01 90       	ld	r0, Z+
    3840:	0d 92       	st	X+, r0
    3842:	2a 95       	dec	r18
    3844:	e1 f7       	brne	.-8      	; 0x383e <Read+0xaa>
    3846:	db cf       	rjmp	.-74     	; 0x37fe <Read+0x6a>
    3848:	81 e0       	ldi	r24, 0x01	; 1
    384a:	92 e0       	ldi	r25, 0x02	; 2
    384c:	d3 cf       	rjmp	.-90     	; 0x37f4 <Read+0x60>

0000384e <readCardID>:

short readCardID(unsigned char cardType, unsigned char *buffer)
{
	unsigned char zone = 4;

	if(cardType == MIFARE_1K)
    384e:	88 30       	cpi	r24, 0x08	; 8
    3850:	19 f0       	breq	.+6      	; 0x3858 <readCardID+0xa>
}


short readCardID(unsigned char cardType, unsigned char *buffer)
{
	unsigned char zone = 4;
    3852:	84 e0       	ldi	r24, 0x04	; 4
	{
		zone = 1;
	}
	
	//Read CardID from User Zone
	return(Read(zone, buffer));
    3854:	0c 94 ca 1b 	jmp	0x3794	; 0x3794 <Read>
{
	unsigned char zone = 4;

	if(cardType == MIFARE_1K)
	{
		zone = 1;
    3858:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	//Read CardID from User Zone
	return(Read(zone, buffer));
    385a:	0c 94 ca 1b 	jmp	0x3794	; 0x3794 <Read>

0000385e <RcSetReg>:
     RegVal        The value to be written
Return:
     None
**************************************************/
void RcSetReg(unsigned char RegAddr, unsigned char RegVal)
{ 
    385e:	cf 93       	push	r28
    3860:	df 93       	push	r29
    3862:	1f 92       	push	r1
    3864:	cd b7       	in	r28, 0x3d	; 61
    3866:	de b7       	in	r29, 0x3e	; 62

	// shift addr, bits[6:1] defines address
	RegAddr = RegAddr << 1;
    3868:	88 0f       	add	r24, r24
	
	//clear bits 7 and 0 for SPI write address
    RegAddr &= 0x7e;   
	Spi_ss_low;
    386a:	71 98       	cbi	0x0e, 1	; 14
    
	Spi_send(RegAddr);
    386c:	8e 77       	andi	r24, 0x7E	; 126
    386e:	69 83       	std	Y+1, r22	; 0x01
    3870:	0e 94 89 1c 	call	0x3912	; 0x3912 <Spi_send>
	Spi_send(RegVal);
    3874:	69 81       	ldd	r22, Y+1	; 0x01
    3876:	86 2f       	mov	r24, r22
    3878:	0e 94 89 1c 	call	0x3912	; 0x3912 <Spi_send>

	Spi_ss_high;
    387c:	71 9a       	sbi	0x0e, 1	; 14

}
    387e:	0f 90       	pop	r0
    3880:	df 91       	pop	r29
    3882:	cf 91       	pop	r28
    3884:	08 95       	ret

00003886 <RcGetReg>:
{
    unsigned char RegVal;
    //short status;	
	
	// shift addr, bits[6:1] defines address
	RegAddr = RegAddr << 1;
    3886:	88 0f       	add	r24, r24
	
	// for SPI read, clear bit 0 and set bit 
	RegAddr = (RegAddr & 0xfe) | 0x80; 
    3888:	8e 77       	andi	r24, 0x7E	; 126
    
	Spi_ss_low;
    388a:	71 98       	cbi	0x0e, 1	; 14
	
	// send address byte w/ read bit(7) set 
	Spi_send(RegAddr);
    388c:	80 68       	ori	r24, 0x80	; 128
    388e:	0e 94 89 1c 	call	0x3912	; 0x3912 <Spi_send>
	
	// read register value
	RegVal = Spi_receive();
    3892:	0e 94 8e 1c 	call	0x391c	; 0x391c <Spi_receive>
	
	Spi_ss_high;
    3896:	71 9a       	sbi	0x0e, 1	; 14
		
    return RegVal;
}
    3898:	08 95       	ret

0000389a <RcModifyReg>:
     MaskByte      Only the corresponding bit '1' is valid,
Return:
     None
**************************************************/
void RcModifyReg(unsigned char RegAddr, unsigned char ModifyVal, unsigned char MaskByte)
{
    389a:	1f 93       	push	r17
    389c:	cf 93       	push	r28
    389e:	df 93       	push	r29
    38a0:	00 d0       	rcall	.+0      	; 0x38a2 <RcModifyReg+0x8>
    38a2:	cd b7       	in	r28, 0x3d	; 61
    38a4:	de b7       	in	r29, 0x3e	; 62
    38a6:	18 2f       	mov	r17, r24
    unsigned char RegVal;
    RegVal = RcGetReg(RegAddr);
    38a8:	4a 83       	std	Y+2, r20	; 0x02
    38aa:	69 83       	std	Y+1, r22	; 0x01
    38ac:	0e 94 43 1c 	call	0x3886	; 0x3886 <RcGetReg>
    if(ModifyVal)
    38b0:	69 81       	ldd	r22, Y+1	; 0x01
    38b2:	4a 81       	ldd	r20, Y+2	; 0x02
    38b4:	61 11       	cpse	r22, r1
    38b6:	0b c0       	rjmp	.+22     	; 0x38ce <RcModifyReg+0x34>
    {
        RegVal |= MaskByte;
    }
    else
    {
        RegVal &= (~MaskByte);
    38b8:	64 2f       	mov	r22, r20
    38ba:	60 95       	com	r22
    38bc:	68 23       	and	r22, r24
    }
    RcSetReg(RegAddr, RegVal);
    38be:	81 2f       	mov	r24, r17
}
    38c0:	0f 90       	pop	r0
    38c2:	0f 90       	pop	r0
    38c4:	df 91       	pop	r29
    38c6:	cf 91       	pop	r28
    38c8:	1f 91       	pop	r17
    }
    else
    {
        RegVal &= (~MaskByte);
    }
    RcSetReg(RegAddr, RegVal);
    38ca:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <RcSetReg>
{
    unsigned char RegVal;
    RegVal = RcGetReg(RegAddr);
    if(ModifyVal)
    {
        RegVal |= MaskByte;
    38ce:	68 2f       	mov	r22, r24
    38d0:	64 2b       	or	r22, r20
    }
    else
    {
        RegVal &= (~MaskByte);
    }
    RcSetReg(RegAddr, RegVal);
    38d2:	81 2f       	mov	r24, r17
}
    38d4:	0f 90       	pop	r0
    38d6:	0f 90       	pop	r0
    38d8:	df 91       	pop	r29
    38da:	cf 91       	pop	r28
    38dc:	1f 91       	pop	r17
    }
    else
    {
        RegVal &= (~MaskByte);
    }
    RcSetReg(RegAddr, RegVal);
    38de:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <RcSetReg>

000038e2 <Spi_initialize>:
    {
        // Wait until Char is sent
    }

    /* Return the received byte*/
    return SPDR;
    38e2:	cf 93       	push	r28
    38e4:	df 93       	push	r29
    38e6:	1f 92       	push	r1
    38e8:	cd b7       	in	r28, 0x3d	; 61
    38ea:	de b7       	in	r29, 0x3e	; 62
    38ec:	84 b1       	in	r24, 0x04	; 4
    38ee:	87 60       	ori	r24, 0x07	; 7
    38f0:	84 b9       	out	0x04, r24	; 4
    38f2:	23 98       	cbi	0x04, 3	; 4
    38f4:	28 9a       	sbi	0x05, 0	; 5
    38f6:	82 e0       	ldi	r24, 0x02	; 2
    38f8:	8d b9       	out	0x0d, r24	; 13
    38fa:	71 9a       	sbi	0x0e, 1	; 14
    38fc:	29 98       	cbi	0x05, 1	; 5
    38fe:	82 e5       	ldi	r24, 0x52	; 82
    3900:	8c bd       	out	0x2c, r24	; 44
    3902:	8d b5       	in	r24, 0x2d	; 45
    3904:	89 83       	std	Y+1, r24	; 0x01
    3906:	8e b5       	in	r24, 0x2e	; 46
    3908:	89 83       	std	Y+1, r24	; 0x01
    390a:	0f 90       	pop	r0
    390c:	df 91       	pop	r29
    390e:	cf 91       	pop	r28
    3910:	08 95       	ret

00003912 <Spi_send>:

void Spi_send ( uint8_t ucData )
{
	
    /* Start transmission */
    SPDR  = ucData ;     // Send Character
    3912:	8e bd       	out	0x2e, r24	; 46

    /* Wait for transmission complete */
    while (!(SPSR & (1 << SPIF)))
    3914:	0d b4       	in	r0, 0x2d	; 45
    3916:	07 fe       	sbrs	r0, 7
    3918:	fd cf       	rjmp	.-6      	; 0x3914 <Spi_send+0x2>
    {
        // Wait until Char is sent
    }

}
    391a:	08 95       	ret

0000391c <Spi_receive>:

uint8_t Spi_receive ()
{
	
    /* Start transmission */
    SPDR  = 0xff;     // Send dummy byte
    391c:	8f ef       	ldi	r24, 0xFF	; 255
    391e:	8e bd       	out	0x2e, r24	; 46

    /* Wait for transmission complete */
    while (!(SPSR & (1 << SPIF)))
    3920:	0d b4       	in	r0, 0x2d	; 45
    3922:	07 fe       	sbrs	r0, 7
    3924:	fd cf       	rjmp	.-6      	; 0x3920 <Spi_receive+0x4>
    {
        // Wait until Char is sent
    }

    /* Return the received byte*/
    return SPDR;
    3926:	8e b5       	in	r24, 0x2e	; 46
}
    3928:	08 95       	ret

0000392a <main>:

int main(void){

	
	// SINGLE-CHIP SOLUTION
	cli(); //make sure interrupts are disabled before initialization.
    392a:	f8 94       	cli
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    392c:	0f b6       	in	r0, 0x3f	; 63
    392e:	f8 94       	cli
    3930:	a8 95       	wdr
    3932:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3936:	88 61       	ori	r24, 0x18	; 24
    3938:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    393c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3940:	0f be       	out	0x3f, r0	; 63
	wdt_disable();

	// init serial for PinPointSystem LCD output
	serial_init(NULL);
    3942:	80 e0       	ldi	r24, 0x00	; 0
    3944:	90 e0       	ldi	r25, 0x00	; 0
    3946:	0e 94 43 29 	call	0x5286	; 0x5286 <serial_init>
#ifdef DEBUG_UART
	debugMsgStrConst("\r\nUART TEST\r\n ");
#endif

    // Init the timer system for the MAC
    timerInit();
    394a:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <timerInit>

	InitTimerZero();	//timer for ACA machine comm.
    394e:	0e 94 67 16 	call	0x2cce	; 0x2cce <InitTimerZero>


    sei();
    3952:	78 94       	sei
	Init the PPOS application on powerup
	get Setup 
	start scanning for a coordinator	
	Initialize ACA Programming data		
	*/
    appInit();
    3954:	0e 94 25 03 	call	0x64a	; 0x64a <appInit>
*/

/*Initialize the processor and RC522*/
void mifareInit(void)
{
	Spi_initialize();
    3958:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <Spi_initialize>
	Rc522Init();	
    395c:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <Rc522Init>
    for(;;)
    {
        // Turn interrupts on if they are off.  They should always be on
        // at this point in the loop, so just turn them on every time, in
        // case interrupts were inadvertently turned off elsewhere.
        sei();
    3960:	78 94       	sei

        // Task functions called from main loop.  Either add your own task loop
        // or edit the example appTask().
		//Reader and machines are initialized
        appTask();
    3962:	0e 94 0a 04 	call	0x814	; 0x814 <appTask>
        macTask();
    3966:	0e 94 ab 23 	call	0x4756	; 0x4756 <macTask>

    }
    396a:	fa cf       	rjmp	.-12     	; 0x3960 <main+0x36>

0000396c <radioInit>:
    {
    }
}

void radioSetModulation(u8 modulation)
{
    396c:	ed ef       	ldi	r30, 0xFD	; 253
    396e:	f3 e0       	ldi	r31, 0x03	; 3
    3970:	df 01       	movw	r26, r30
    3972:	11 97       	sbiw	r26, 0x01	; 1
    3974:	f1 f7       	brne	.-4      	; 0x3972 <radioInit+0x6>
    3976:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    397a:	91 60       	ori	r25, 0x01	; 1
    397c:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    3980:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    3984:	9d 7f       	andi	r25, 0xFD	; 253
    3986:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    398a:	ad e0       	ldi	r26, 0x0D	; 13
    398c:	b0 e0       	ldi	r27, 0x00	; 0
    398e:	11 97       	sbiw	r26, 0x01	; 1
    3990:	f1 f7       	brne	.-4      	; 0x398e <radioInit+0x22>
    3992:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    3996:	9e 7f       	andi	r25, 0xFE	; 254
    3998:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    399c:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    39a0:	90 7e       	andi	r25, 0xE0	; 224
    39a2:	93 60       	ori	r25, 0x03	; 3
    39a4:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    39a8:	31 97       	sbiw	r30, 0x01	; 1
    39aa:	f1 f7       	brne	.-4      	; 0x39a8 <radioInit+0x3c>
    39ac:	9c e4       	ldi	r25, 0x4C	; 76
    39ae:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <__TEXT_REGION_LENGTH__+0x7e014e>
    39b2:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__TEXT_REGION_LENGTH__+0x7e0149>
    39b6:	90 7f       	andi	r25, 0xF0	; 240
    39b8:	97 60       	ori	r25, 0x07	; 7
    39ba:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <__TEXT_REGION_LENGTH__+0x7e0149>
    39be:	81 11       	cpse	r24, r1
    39c0:	0e 94 27 20 	call	0x404e	; 0x404e <calibrate_rc_osc>
    39c4:	80 e4       	ldi	r24, 0x40	; 64
    39c6:	08 95       	ret

000039c8 <radioRxStartEvent>:
    39c8:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__TEXT_REGION_LENGTH__+0x7e0146>
    39cc:	8f 71       	andi	r24, 0x1F	; 31
    39ce:	80 93 34 05 	sts	0x0534, r24	; 0x800534 <rssi_val>
    39d2:	10 92 53 0c 	sts	0x0C53, r1	; 0x800c53 <macConfig+0x17>
    39d6:	08 95       	ret

000039d8 <radioGetSavedRssiValue>:
    39d8:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <radio_part_number.3584>
    39dc:	81 11       	cpse	r24, r1
    39de:	04 c0       	rjmp	.+8      	; 0x39e8 <radioGetSavedRssiValue+0x10>
    39e0:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__TEXT_REGION_LENGTH__+0x7e015c>
    39e4:	80 93 33 05 	sts	0x0533, r24	; 0x800533 <radio_part_number.3584>
    39e8:	82 30       	cpi	r24, 0x02	; 2
    39ea:	19 f0       	breq	.+6      	; 0x39f2 <radioGetSavedRssiValue+0x1a>
    39ec:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <rssi_val>
    39f0:	08 95       	ret
    39f2:	86 e1       	ldi	r24, 0x16	; 22
    39f4:	08 95       	ret

000039f6 <radioGetSavedLqiValue>:
    39f6:	80 91 b8 0b 	lds	r24, 0x0BB8	; 0x800bb8 <mac_buffer_rx+0x80>
    39fa:	08 95       	ret

000039fc <radioSetOperatingChannel>:
    39fc:	95 ef       	ldi	r25, 0xF5	; 245
    39fe:	98 0f       	add	r25, r24
    3a00:	90 31       	cpi	r25, 0x10	; 16
    3a02:	10 f0       	brcs	.+4      	; 0x3a08 <radioSetOperatingChannel+0xc>
    3a04:	82 e4       	ldi	r24, 0x42	; 66
    3a06:	08 95       	ret
    3a08:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    3a0c:	91 fd       	sbrc	r25, 1
    3a0e:	1b c0       	rjmp	.+54     	; 0x3a46 <radioSetOperatingChannel+0x4a>
    3a10:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x7e0148>
    3a14:	9f 71       	andi	r25, 0x1F	; 31
    3a16:	89 17       	cp	r24, r25
    3a18:	c1 f0       	breq	.+48     	; 0x3a4a <radioSetOperatingChannel+0x4e>
    3a1a:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x7e0148>
    3a1e:	90 7e       	andi	r25, 0xE0	; 224
    3a20:	28 2f       	mov	r18, r24
    3a22:	2f 71       	andi	r18, 0x1F	; 31
    3a24:	92 2b       	or	r25, r18
    3a26:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <__TEXT_REGION_LENGTH__+0x7e0148>
    3a2a:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    3a2e:	9f 71       	andi	r25, 0x1F	; 31
    3a30:	96 30       	cpi	r25, 0x06	; 6
    3a32:	69 f0       	breq	.+26     	; 0x3a4e <radioSetOperatingChannel+0x52>
    3a34:	99 30       	cpi	r25, 0x09	; 9
    3a36:	59 f0       	breq	.+22     	; 0x3a4e <radioSetOperatingChannel+0x52>
    3a38:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <__TEXT_REGION_LENGTH__+0x7e0148>
    3a3c:	9f 71       	andi	r25, 0x1F	; 31
    3a3e:	89 17       	cp	r24, r25
    3a40:	21 f0       	breq	.+8      	; 0x3a4a <radioSetOperatingChannel+0x4e>
    3a42:	83 e4       	ldi	r24, 0x43	; 67
    3a44:	08 95       	ret
    3a46:	84 e4       	ldi	r24, 0x44	; 68
    3a48:	08 95       	ret
    3a4a:	80 e4       	ldi	r24, 0x40	; 64
    3a4c:	08 95       	ret
    3a4e:	ed e2       	ldi	r30, 0x2D	; 45
    3a50:	f1 e0       	ldi	r31, 0x01	; 1
    3a52:	31 97       	sbiw	r30, 0x01	; 1
    3a54:	f1 f7       	brne	.-4      	; 0x3a52 <radioSetOperatingChannel+0x56>
    3a56:	f0 cf       	rjmp	.-32     	; 0x3a38 <radioSetOperatingChannel+0x3c>

00003a58 <radioSetClockSpeed>:
    3a58:	66 30       	cpi	r22, 0x06	; 6
    3a5a:	e0 f4       	brcc	.+56     	; 0x3a94 <radioSetClockSpeed+0x3c>
    3a5c:	88 23       	and	r24, r24
    3a5e:	69 f0       	breq	.+26     	; 0x3a7a <radioSetClockSpeed+0x22>
    3a60:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    3a64:	87 7f       	andi	r24, 0xF7	; 247
    3a66:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    3a6a:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    3a6e:	88 7f       	andi	r24, 0xF8	; 248
    3a70:	68 2b       	or	r22, r24
    3a72:	60 93 43 01 	sts	0x0143, r22	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    3a76:	80 e4       	ldi	r24, 0x40	; 64
    3a78:	08 95       	ret
    3a7a:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    3a7e:	88 60       	ori	r24, 0x08	; 8
    3a80:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    3a84:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    3a88:	88 7f       	andi	r24, 0xF8	; 248
    3a8a:	68 2b       	or	r22, r24
    3a8c:	60 93 43 01 	sts	0x0143, r22	; 0x800143 <__TEXT_REGION_LENGTH__+0x7e0143>
    3a90:	80 e4       	ldi	r24, 0x40	; 64
    3a92:	08 95       	ret
    3a94:	82 e4       	ldi	r24, 0x42	; 66
    3a96:	08 95       	ret

00003a98 <radioGetTrxState>:
    3a98:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    3a9c:	8f 71       	andi	r24, 0x1F	; 31
    3a9e:	08 95       	ret

00003aa0 <radioSetTrxState>:
    3aa0:	cf 93       	push	r28
    3aa2:	c8 2f       	mov	r28, r24
    3aa4:	88 ef       	ldi	r24, 0xF8	; 248
    3aa6:	8c 0f       	add	r24, r28
    3aa8:	82 30       	cpi	r24, 0x02	; 2
    3aaa:	48 f0       	brcs	.+18     	; 0x3abe <radioSetTrxState+0x1e>
    3aac:	8c 2f       	mov	r24, r28
    3aae:	8f 7e       	andi	r24, 0xEF	; 239
    3ab0:	86 30       	cpi	r24, 0x06	; 6
    3ab2:	29 f0       	breq	.+10     	; 0x3abe <radioSetTrxState+0x1e>
    3ab4:	c9 31       	cpi	r28, 0x19	; 25
    3ab6:	19 f0       	breq	.+6      	; 0x3abe <radioSetTrxState+0x1e>
    3ab8:	82 e4       	ldi	r24, 0x42	; 66
    3aba:	cf 91       	pop	r28
    3abc:	08 95       	ret
    3abe:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    3ac2:	81 fd       	sbrc	r24, 1
    3ac4:	37 c0       	rjmp	.+110    	; 0x3b34 <radioSetTrxState+0x94>
    3ac6:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    3aca:	9f 71       	andi	r25, 0x1F	; 31
    3acc:	2f ee       	ldi	r18, 0xEF	; 239
    3ace:	29 0f       	add	r18, r25
    3ad0:	22 30       	cpi	r18, 0x02	; 2
    3ad2:	c8 f3       	brcs	.-14     	; 0x3ac6 <radioSetTrxState+0x26>
    3ad4:	92 30       	cpi	r25, 0x02	; 2
    3ad6:	b9 f3       	breq	.-18     	; 0x3ac6 <radioSetTrxState+0x26>
    3ad8:	91 30       	cpi	r25, 0x01	; 1
    3ada:	a9 f3       	breq	.-22     	; 0x3ac6 <radioSetTrxState+0x26>
    3adc:	9e 31       	cpi	r25, 0x1E	; 30
    3ade:	99 f3       	breq	.-26     	; 0x3ac6 <radioSetTrxState+0x26>
    3ae0:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <radio_part_number.3584>
    3ae4:	88 23       	and	r24, r24
    3ae6:	49 f1       	breq	.+82     	; 0x3b3a <radioSetTrxState+0x9a>
    3ae8:	82 30       	cpi	r24, 0x02	; 2
    3aea:	09 f4       	brne	.+2      	; 0x3aee <radioSetTrxState+0x4e>
    3aec:	47 c0       	rjmp	.+142    	; 0x3b7c <radioSetTrxState+0xdc>
    3aee:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    3af2:	8f 71       	andi	r24, 0x1F	; 31
    3af4:	c8 17       	cp	r28, r24
    3af6:	31 f1       	breq	.+76     	; 0x3b44 <radioSetTrxState+0xa4>
    3af8:	c8 30       	cpi	r28, 0x08	; 8
    3afa:	61 f1       	breq	.+88     	; 0x3b54 <radioSetTrxState+0xb4>
    3afc:	c9 31       	cpi	r28, 0x19	; 25
    3afe:	09 f4       	brne	.+2      	; 0x3b02 <radioSetTrxState+0x62>
    3b00:	4d c0       	rjmp	.+154    	; 0x3b9c <radioSetTrxState+0xfc>
    3b02:	c6 31       	cpi	r28, 0x16	; 22
    3b04:	09 f4       	brne	.+2      	; 0x3b08 <radioSetTrxState+0x68>
    3b06:	5a c0       	rjmp	.+180    	; 0x3bbc <radioSetTrxState+0x11c>
    3b08:	2c 2f       	mov	r18, r28
    3b0a:	2f 71       	andi	r18, 0x1F	; 31
    3b0c:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3b10:	90 7e       	andi	r25, 0xE0	; 224
    3b12:	92 2b       	or	r25, r18
    3b14:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3b18:	88 30       	cpi	r24, 0x08	; 8
    3b1a:	b9 f0       	breq	.+46     	; 0x3b4a <radioSetTrxState+0xaa>
    3b1c:	83 e0       	ldi	r24, 0x03	; 3
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	01 97       	sbiw	r24, 0x01	; 1
    3b22:	f1 f7       	brne	.-4      	; 0x3b20 <radioSetTrxState+0x80>
    3b24:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    3b28:	8f 71       	andi	r24, 0x1F	; 31
    3b2a:	c8 17       	cp	r28, r24
    3b2c:	59 f0       	breq	.+22     	; 0x3b44 <radioSetTrxState+0xa4>
    3b2e:	83 e4       	ldi	r24, 0x43	; 67
    3b30:	cf 91       	pop	r28
    3b32:	08 95       	ret
    3b34:	84 e4       	ldi	r24, 0x44	; 68
    3b36:	cf 91       	pop	r28
    3b38:	08 95       	ret
    3b3a:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__TEXT_REGION_LENGTH__+0x7e015c>
    3b3e:	80 93 33 05 	sts	0x0533, r24	; 0x800533 <radio_part_number.3584>
    3b42:	d2 cf       	rjmp	.-92     	; 0x3ae8 <radioSetTrxState+0x48>
    3b44:	80 e4       	ldi	r24, 0x40	; 64
    3b46:	cf 91       	pop	r28
    3b48:	08 95       	ret
    3b4a:	89 e6       	ldi	r24, 0x69	; 105
    3b4c:	91 e0       	ldi	r25, 0x01	; 1
    3b4e:	01 97       	sbiw	r24, 0x01	; 1
    3b50:	f1 f7       	brne	.-4      	; 0x3b4e <radioSetTrxState+0xae>
    3b52:	e8 cf       	rjmp	.-48     	; 0x3b24 <radioSetTrxState+0x84>
    3b54:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    3b58:	8d 7f       	andi	r24, 0xFD	; 253
    3b5a:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    3b5e:	8d e0       	ldi	r24, 0x0D	; 13
    3b60:	90 e0       	ldi	r25, 0x00	; 0
    3b62:	01 97       	sbiw	r24, 0x01	; 1
    3b64:	f1 f7       	brne	.-4      	; 0x3b62 <radioSetTrxState+0xc2>
    3b66:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3b6a:	80 7e       	andi	r24, 0xE0	; 224
    3b6c:	83 60       	ori	r24, 0x03	; 3
    3b6e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3b72:	83 e0       	ldi	r24, 0x03	; 3
    3b74:	90 e0       	ldi	r25, 0x00	; 0
    3b76:	01 97       	sbiw	r24, 0x01	; 1
    3b78:	f1 f7       	brne	.-4      	; 0x3b76 <radioSetTrxState+0xd6>
    3b7a:	d4 cf       	rjmp	.-88     	; 0x3b24 <radioSetTrxState+0x84>
    3b7c:	0e 94 90 26 	call	0x4d20	; 0x4d20 <macIsScanning>
    3b80:	88 23       	and	r24, r24
    3b82:	09 f4       	brne	.+2      	; 0x3b86 <radioSetTrxState+0xe6>
    3b84:	b4 cf       	rjmp	.-152    	; 0x3aee <radioSetTrxState+0x4e>
    3b86:	c6 31       	cpi	r28, 0x16	; 22
    3b88:	09 f0       	breq	.+2      	; 0x3b8c <radioSetTrxState+0xec>
    3b8a:	b1 cf       	rjmp	.-158    	; 0x3aee <radioSetTrxState+0x4e>
    3b8c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    3b90:	8f 71       	andi	r24, 0x1F	; 31
    3b92:	86 30       	cpi	r24, 0x06	; 6
    3b94:	b9 f2       	breq	.-82     	; 0x3b44 <radioSetTrxState+0xa4>
    3b96:	26 e0       	ldi	r18, 0x06	; 6
    3b98:	c6 e0       	ldi	r28, 0x06	; 6
    3b9a:	b8 cf       	rjmp	.-144    	; 0x3b0c <radioSetTrxState+0x6c>
    3b9c:	89 30       	cpi	r24, 0x09	; 9
    3b9e:	11 f1       	breq	.+68     	; 0x3be4 <radioSetTrxState+0x144>
    3ba0:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3ba4:	90 7e       	andi	r25, 0xE0	; 224
    3ba6:	99 60       	ori	r25, 0x09	; 9
    3ba8:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3bac:	86 31       	cpi	r24, 0x16	; 22
    3bae:	b1 f0       	breq	.+44     	; 0x3bdc <radioSetTrxState+0x13c>
    3bb0:	e9 e6       	ldi	r30, 0x69	; 105
    3bb2:	f1 e0       	ldi	r31, 0x01	; 1
    3bb4:	31 97       	sbiw	r30, 0x01	; 1
    3bb6:	f1 f7       	brne	.-4      	; 0x3bb4 <radioSetTrxState+0x114>
    3bb8:	29 e1       	ldi	r18, 0x19	; 25
    3bba:	a8 cf       	rjmp	.-176    	; 0x3b0c <radioSetTrxState+0x6c>
    3bbc:	89 30       	cpi	r24, 0x09	; 9
    3bbe:	d9 f0       	breq	.+54     	; 0x3bf6 <radioSetTrxState+0x156>
    3bc0:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3bc4:	90 7e       	andi	r25, 0xE0	; 224
    3bc6:	99 60       	ori	r25, 0x09	; 9
    3bc8:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3bcc:	89 31       	cpi	r24, 0x19	; 25
    3bce:	31 f0       	breq	.+12     	; 0x3bdc <radioSetTrxState+0x13c>
    3bd0:	e9 e6       	ldi	r30, 0x69	; 105
    3bd2:	f1 e0       	ldi	r31, 0x01	; 1
    3bd4:	31 97       	sbiw	r30, 0x01	; 1
    3bd6:	f1 f7       	brne	.-4      	; 0x3bd4 <radioSetTrxState+0x134>
    3bd8:	26 e1       	ldi	r18, 0x16	; 22
    3bda:	98 cf       	rjmp	.-208    	; 0x3b0c <radioSetTrxState+0x6c>
    3bdc:	83 e0       	ldi	r24, 0x03	; 3
    3bde:	90 e0       	ldi	r25, 0x00	; 0
    3be0:	01 97       	sbiw	r24, 0x01	; 1
    3be2:	f1 f7       	brne	.-4      	; 0x3be0 <radioSetTrxState+0x140>
    3be4:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3be8:	80 7e       	andi	r24, 0xE0	; 224
    3bea:	9c 2f       	mov	r25, r28
    3bec:	9f 71       	andi	r25, 0x1F	; 31
    3bee:	89 2b       	or	r24, r25
    3bf0:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3bf4:	93 cf       	rjmp	.-218    	; 0x3b1c <radioSetTrxState+0x7c>
    3bf6:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3bfa:	80 7e       	andi	r24, 0xE0	; 224
    3bfc:	86 61       	ori	r24, 0x16	; 22
    3bfe:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3c02:	8c cf       	rjmp	.-232    	; 0x3b1c <radioSetTrxState+0x7c>

00003c04 <radioTrxEndEvent>:
    3c04:	cf 93       	push	r28
    3c06:	df 93       	push	r29
    3c08:	00 d0       	rcall	.+0      	; 0x3c0a <radioTrxEndEvent+0x6>
    3c0a:	00 d0       	rcall	.+0      	; 0x3c0c <radioTrxEndEvent+0x8>
    3c0c:	1f 92       	push	r1
    3c0e:	cd b7       	in	r28, 0x3d	; 61
    3c10:	de b7       	in	r29, 0x3e	; 62
    3c12:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    3c16:	8f 71       	andi	r24, 0x1F	; 31
    3c18:	8c 83       	std	Y+4, r24	; 0x04
    3c1a:	8c 81       	ldd	r24, Y+4	; 0x04
    3c1c:	81 31       	cpi	r24, 0x11	; 17
    3c1e:	09 f4       	brne	.+2      	; 0x3c22 <radioTrxEndEvent+0x1e>
    3c20:	3f c0       	rjmp	.+126    	; 0x3ca0 <radioTrxEndEvent+0x9c>
    3c22:	8c 81       	ldd	r24, Y+4	; 0x04
    3c24:	86 30       	cpi	r24, 0x06	; 6
    3c26:	e1 f1       	breq	.+120    	; 0x3ca0 <radioTrxEndEvent+0x9c>
    3c28:	8c 81       	ldd	r24, Y+4	; 0x04
    3c2a:	81 30       	cpi	r24, 0x01	; 1
    3c2c:	c9 f1       	breq	.+114    	; 0x3ca0 <radioTrxEndEvent+0x9c>
    3c2e:	8c 81       	ldd	r24, Y+4	; 0x04
    3c30:	86 31       	cpi	r24, 0x16	; 22
    3c32:	b1 f1       	breq	.+108    	; 0x3ca0 <radioTrxEndEvent+0x9c>
    3c34:	8c 81       	ldd	r24, Y+4	; 0x04
    3c36:	82 30       	cpi	r24, 0x02	; 2
    3c38:	49 f0       	breq	.+18     	; 0x3c4c <radioTrxEndEvent+0x48>
    3c3a:	8c 81       	ldd	r24, Y+4	; 0x04
    3c3c:	82 31       	cpi	r24, 0x12	; 18
    3c3e:	31 f0       	breq	.+12     	; 0x3c4c <radioTrxEndEvent+0x48>
    3c40:	8c 81       	ldd	r24, Y+4	; 0x04
    3c42:	89 31       	cpi	r24, 0x19	; 25
    3c44:	19 f0       	breq	.+6      	; 0x3c4c <radioTrxEndEvent+0x48>
    3c46:	8c 81       	ldd	r24, Y+4	; 0x04
    3c48:	89 30       	cpi	r24, 0x09	; 9
    3c4a:	11 f5       	brne	.+68     	; 0x3c90 <radioTrxEndEvent+0x8c>
    3c4c:	10 92 53 0c 	sts	0x0C53, r1	; 0x800c53 <macConfig+0x17>
    3c50:	19 82       	std	Y+1, r1	; 0x01
    3c52:	1b 82       	std	Y+3, r1	; 0x03
    3c54:	1a 82       	std	Y+2, r1	; 0x02
    3c56:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x7e0142>
    3c5a:	82 95       	swap	r24
    3c5c:	86 95       	lsr	r24
    3c5e:	87 70       	andi	r24, 0x07	; 7
    3c60:	8d 83       	std	Y+5, r24	; 0x05
    3c62:	8d 81       	ldd	r24, Y+5	; 0x05
    3c64:	83 30       	cpi	r24, 0x03	; 3
    3c66:	09 f4       	brne	.+2      	; 0x3c6a <radioTrxEndEvent+0x66>
    3c68:	7b c0       	rjmp	.+246    	; 0x3d60 <radioTrxEndEvent+0x15c>
    3c6a:	08 f0       	brcs	.+2      	; 0x3c6e <radioTrxEndEvent+0x6a>
    3c6c:	82 c0       	rjmp	.+260    	; 0x3d72 <radioTrxEndEvent+0x16e>
    3c6e:	82 30       	cpi	r24, 0x02	; 2
    3c70:	30 f4       	brcc	.+12     	; 0x3c7e <radioTrxEndEvent+0x7a>
    3c72:	81 e1       	ldi	r24, 0x11	; 17
    3c74:	89 83       	std	Y+1, r24	; 0x01
    3c76:	ce 01       	movw	r24, r28
    3c78:	01 96       	adiw	r24, 0x01	; 1
    3c7a:	0e 94 7f 23 	call	0x46fe	; 0x46fe <mac_put_event>
    3c7e:	86 e1       	ldi	r24, 0x16	; 22
    3c80:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <radioSetTrxState>
    3c84:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
    3c88:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    3c8c:	0e 94 dd 31 	call	0x63ba	; 0x63ba <srand>
    3c90:	0f 90       	pop	r0
    3c92:	0f 90       	pop	r0
    3c94:	0f 90       	pop	r0
    3c96:	0f 90       	pop	r0
    3c98:	0f 90       	pop	r0
    3c9a:	df 91       	pop	r29
    3c9c:	cf 91       	pop	r28
    3c9e:	08 95       	ret
    3ca0:	40 91 7b 01 	lds	r20, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7e017b>
    3ca4:	50 e0       	ldi	r21, 0x00	; 0
    3ca6:	60 e8       	ldi	r22, 0x80	; 128
    3ca8:	71 e0       	ldi	r23, 0x01	; 1
    3caa:	89 e3       	ldi	r24, 0x39	; 57
    3cac:	9b e0       	ldi	r25, 0x0B	; 11
    3cae:	0e 94 3b 34 	call	0x6876	; 0x6876 <memcpy>
    3cb2:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7e017b>
    3cb6:	80 93 38 0b 	sts	0x0B38, r24	; 0x800b38 <mac_buffer_rx>
    3cba:	e0 91 7b 01 	lds	r30, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x7e017b>
    3cbe:	f0 e0       	ldi	r31, 0x00	; 0
    3cc0:	e8 5c       	subi	r30, 0xC8	; 200
    3cc2:	f4 4f       	sbci	r31, 0xF4	; 244
    3cc4:	80 81       	ld	r24, Z
    3cc6:	80 93 b8 0b 	sts	0x0BB8, r24	; 0x800bb8 <mac_buffer_rx+0x80>
    3cca:	19 82       	std	Y+1, r1	; 0x01
    3ccc:	1b 82       	std	Y+3, r1	; 0x03
    3cce:	1a 82       	std	Y+2, r1	; 0x02
    3cd0:	20 91 39 0b 	lds	r18, 0x0B39	; 0x800b39 <mac_buffer_rx+0x1>
    3cd4:	80 91 3a 0b 	lds	r24, 0x0B3A	; 0x800b3a <mac_buffer_rx+0x2>
    3cd8:	90 e0       	ldi	r25, 0x00	; 0
    3cda:	98 2f       	mov	r25, r24
    3cdc:	88 27       	eor	r24, r24
    3cde:	82 0f       	add	r24, r18
    3ce0:	91 1d       	adc	r25, r1
    3ce2:	90 93 3a 0b 	sts	0x0B3A, r25	; 0x800b3a <mac_buffer_rx+0x2>
    3ce6:	80 93 39 0b 	sts	0x0B39, r24	; 0x800b39 <mac_buffer_rx+0x1>
    3cea:	81 36       	cpi	r24, 0x61	; 97
    3cec:	28 e8       	ldi	r18, 0x88	; 136
    3cee:	92 07       	cpc	r25, r18
    3cf0:	e9 f1       	breq	.+122    	; 0x3d6c <radioTrxEndEvent+0x168>
    3cf2:	b0 f0       	brcs	.+44     	; 0x3d20 <radioTrxEndEvent+0x11c>
    3cf4:	83 36       	cpi	r24, 0x63	; 99
    3cf6:	2c e8       	ldi	r18, 0x8C	; 140
    3cf8:	92 07       	cpc	r25, r18
    3cfa:	a9 f1       	breq	.+106    	; 0x3d66 <radioTrxEndEvent+0x162>
    3cfc:	83 36       	cpi	r24, 0x63	; 99
    3cfe:	28 ec       	ldi	r18, 0xC8	; 200
    3d00:	92 07       	cpc	r25, r18
    3d02:	59 f0       	breq	.+22     	; 0x3d1a <radioTrxEndEvent+0x116>
    3d04:	83 36       	cpi	r24, 0x63	; 99
    3d06:	98 48       	sbci	r25, 0x88	; 136
    3d08:	c1 f4       	brne	.+48     	; 0x3d3a <radioTrxEndEvent+0x136>
    3d0a:	80 91 42 0b 	lds	r24, 0x0B42	; 0x800b42 <mac_buffer_rx+0xa>
    3d0e:	82 30       	cpi	r24, 0x02	; 2
    3d10:	51 f1       	breq	.+84     	; 0x3d66 <radioTrxEndEvent+0x162>
    3d12:	8b 3b       	cpi	r24, 0xBB	; 187
    3d14:	a1 f1       	breq	.+104    	; 0x3d7e <radioTrxEndEvent+0x17a>
    3d16:	81 30       	cpi	r24, 0x01	; 1
    3d18:	81 f4       	brne	.+32     	; 0x3d3a <radioTrxEndEvent+0x136>
    3d1a:	87 e1       	ldi	r24, 0x17	; 23
    3d1c:	89 83       	std	Y+1, r24	; 0x01
    3d1e:	0d c0       	rjmp	.+26     	; 0x3d3a <radioTrxEndEvent+0x136>
    3d20:	83 30       	cpi	r24, 0x03	; 3
    3d22:	28 e0       	ldi	r18, 0x08	; 8
    3d24:	92 07       	cpc	r25, r18
    3d26:	a9 f0       	breq	.+42     	; 0x3d52 <radioTrxEndEvent+0x14e>
    3d28:	81 15       	cp	r24, r1
    3d2a:	90 48       	sbci	r25, 0x80	; 128
    3d2c:	31 f4       	brne	.+12     	; 0x3d3a <radioTrxEndEvent+0x136>
    3d2e:	0e 94 90 26 	call	0x4d20	; 0x4d20 <macIsScanning>
    3d32:	88 23       	and	r24, r24
    3d34:	11 f0       	breq	.+4      	; 0x3d3a <radioTrxEndEvent+0x136>
    3d36:	84 e1       	ldi	r24, 0x14	; 20
    3d38:	89 83       	std	Y+1, r24	; 0x01
    3d3a:	ce 01       	movw	r24, r28
    3d3c:	01 96       	adiw	r24, 0x01	; 1
    3d3e:	0e 94 7f 23 	call	0x46fe	; 0x46fe <mac_put_event>
    3d42:	0f 90       	pop	r0
    3d44:	0f 90       	pop	r0
    3d46:	0f 90       	pop	r0
    3d48:	0f 90       	pop	r0
    3d4a:	0f 90       	pop	r0
    3d4c:	df 91       	pop	r29
    3d4e:	cf 91       	pop	r28
    3d50:	08 95       	ret
    3d52:	80 91 44 0c 	lds	r24, 0x0C44	; 0x800c44 <macConfig+0x8>
    3d56:	88 23       	and	r24, r24
    3d58:	81 f3       	breq	.-32     	; 0x3d3a <radioTrxEndEvent+0x136>
    3d5a:	85 e1       	ldi	r24, 0x15	; 21
    3d5c:	89 83       	std	Y+1, r24	; 0x01
    3d5e:	ed cf       	rjmp	.-38     	; 0x3d3a <radioTrxEndEvent+0x136>
    3d60:	83 e1       	ldi	r24, 0x13	; 19
    3d62:	89 83       	std	Y+1, r24	; 0x01
    3d64:	88 cf       	rjmp	.-240    	; 0x3c76 <radioTrxEndEvent+0x72>
    3d66:	88 e1       	ldi	r24, 0x18	; 24
    3d68:	89 83       	std	Y+1, r24	; 0x01
    3d6a:	e7 cf       	rjmp	.-50     	; 0x3d3a <radioTrxEndEvent+0x136>
    3d6c:	80 e1       	ldi	r24, 0x10	; 16
    3d6e:	89 83       	std	Y+1, r24	; 0x01
    3d70:	e4 cf       	rjmp	.-56     	; 0x3d3a <radioTrxEndEvent+0x136>
    3d72:	85 30       	cpi	r24, 0x05	; 5
    3d74:	09 f0       	breq	.+2      	; 0x3d78 <radioTrxEndEvent+0x174>
    3d76:	83 cf       	rjmp	.-250    	; 0x3c7e <radioTrxEndEvent+0x7a>
    3d78:	82 e1       	ldi	r24, 0x12	; 18
    3d7a:	89 83       	std	Y+1, r24	; 0x01
    3d7c:	7c cf       	rjmp	.-264    	; 0x3c76 <radioTrxEndEvent+0x72>
    3d7e:	89 e1       	ldi	r24, 0x19	; 25
    3d80:	89 83       	std	Y+1, r24	; 0x01
    3d82:	db cf       	rjmp	.-74     	; 0x3d3a <radioTrxEndEvent+0x136>

00003d84 <radioUseAutoTxCrc>:
    3d84:	90 91 33 05 	lds	r25, 0x0533	; 0x800533 <radio_part_number.3584>
    3d88:	91 11       	cpse	r25, r1
    3d8a:	0f c0       	rjmp	.+30     	; 0x3daa <radioUseAutoTxCrc+0x26>
    3d8c:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <__TEXT_REGION_LENGTH__+0x7e015c>
    3d90:	90 93 33 05 	sts	0x0533, r25	; 0x800533 <radio_part_number.3584>
    3d94:	92 30       	cpi	r25, 0x02	; 2
    3d96:	59 f0       	breq	.+22     	; 0x3dae <radioUseAutoTxCrc+0x2a>
    3d98:	91 11       	cpse	r25, r1
    3d9a:	04 c0       	rjmp	.+8      	; 0x3da4 <radioUseAutoTxCrc+0x20>
    3d9c:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <__TEXT_REGION_LENGTH__+0x7e015c>
    3da0:	90 93 33 05 	sts	0x0533, r25	; 0x800533 <radio_part_number.3584>
    3da4:	93 30       	cpi	r25, 0x03	; 3
    3da6:	61 f0       	breq	.+24     	; 0x3dc0 <radioUseAutoTxCrc+0x3c>
    3da8:	08 95       	ret
    3daa:	92 30       	cpi	r25, 0x02	; 2
    3dac:	d9 f7       	brne	.-10     	; 0x3da4 <radioUseAutoTxCrc+0x20>
    3dae:	90 91 05 00 	lds	r25, 0x0005	; 0x800005 <__TEXT_REGION_LENGTH__+0x7e0005>
    3db2:	80 fb       	bst	r24, 0
    3db4:	97 f9       	bld	r25, 7
    3db6:	90 93 05 00 	sts	0x0005, r25	; 0x800005 <__TEXT_REGION_LENGTH__+0x7e0005>
    3dba:	90 91 33 05 	lds	r25, 0x0533	; 0x800533 <radio_part_number.3584>
    3dbe:	ec cf       	rjmp	.-40     	; 0x3d98 <radioUseAutoTxCrc+0x14>
    3dc0:	90 91 04 00 	lds	r25, 0x0004	; 0x800004 <__TEXT_REGION_LENGTH__+0x7e0004>
    3dc4:	80 fb       	bst	r24, 0
    3dc6:	95 f9       	bld	r25, 5
    3dc8:	90 93 04 00 	sts	0x0004, r25	; 0x800004 <__TEXT_REGION_LENGTH__+0x7e0004>
    3dcc:	08 95       	ret

00003dce <radioSendData>:
    3dce:	0f 93       	push	r16
    3dd0:	1f 93       	push	r17
    3dd2:	cf 93       	push	r28
    3dd4:	c8 2f       	mov	r28, r24
    3dd6:	8b 01       	movw	r16, r22
    3dd8:	87 fd       	sbrc	r24, 7
    3dda:	37 c0       	rjmp	.+110    	; 0x3e4a <radioSendData+0x7c>
    3ddc:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    3de0:	9f 71       	andi	r25, 0x1F	; 31
    3de2:	2f ee       	ldi	r18, 0xEF	; 239
    3de4:	29 0f       	add	r18, r25
    3de6:	22 30       	cpi	r18, 0x02	; 2
    3de8:	c8 f3       	brcs	.-14     	; 0x3ddc <radioSendData+0xe>
    3dea:	2f ef       	ldi	r18, 0xFF	; 255
    3dec:	29 0f       	add	r18, r25
    3dee:	22 30       	cpi	r18, 0x02	; 2
    3df0:	a8 f3       	brcs	.-22     	; 0x3ddc <radioSendData+0xe>
    3df2:	9e 31       	cpi	r25, 0x1E	; 30
    3df4:	99 f3       	breq	.-26     	; 0x3ddc <radioSendData+0xe>
    3df6:	89 e1       	ldi	r24, 0x19	; 25
    3df8:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <radioSetTrxState>
    3dfc:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    3e00:	9f 71       	andi	r25, 0x1F	; 31
    3e02:	99 31       	cpi	r25, 0x19	; 25
    3e04:	c1 f7       	brne	.-16     	; 0x3df6 <radioSendData+0x28>
    3e06:	f8 01       	movw	r30, r16
    3e08:	85 81       	ldd	r24, Z+5	; 0x05
    3e0a:	96 81       	ldd	r25, Z+6	; 0x06
    3e0c:	90 93 52 0c 	sts	0x0C52, r25	; 0x800c52 <macConfig+0x16>
    3e10:	80 93 51 0c 	sts	0x0C51, r24	; 0x800c51 <macConfig+0x15>
    3e14:	4c 2f       	mov	r20, r28
    3e16:	50 e0       	ldi	r21, 0x00	; 0
    3e18:	4e 5f       	subi	r20, 0xFE	; 254
    3e1a:	5f 4f       	sbci	r21, 0xFF	; 255
    3e1c:	b8 01       	movw	r22, r16
    3e1e:	81 e8       	ldi	r24, 0x81	; 129
    3e20:	91 e0       	ldi	r25, 0x01	; 1
    3e22:	0e 94 3b 34 	call	0x6876	; 0x6876 <memcpy>
    3e26:	ce 5f       	subi	r28, 0xFE	; 254
    3e28:	c0 93 80 01 	sts	0x0180, r28	; 0x800180 <__TEXT_REGION_LENGTH__+0x7e0180>
    3e2c:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    3e30:	82 60       	ori	r24, 0x02	; 2
    3e32:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    3e36:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    3e3a:	8d 7f       	andi	r24, 0xFD	; 253
    3e3c:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <__TEXT_REGION_LENGTH__+0x7e0139>
    3e40:	80 e4       	ldi	r24, 0x40	; 64
    3e42:	cf 91       	pop	r28
    3e44:	1f 91       	pop	r17
    3e46:	0f 91       	pop	r16
    3e48:	08 95       	ret
    3e4a:	82 e4       	ldi	r24, 0x42	; 66
    3e4c:	cf 91       	pop	r28
    3e4e:	1f 91       	pop	r17
    3e50:	0f 91       	pop	r16
    3e52:	08 95       	ret

00003e54 <radioSetDeviceRole>:
    3e54:	ee e6       	ldi	r30, 0x6E	; 110
    3e56:	f1 e0       	ldi	r31, 0x01	; 1
    3e58:	90 81       	ld	r25, Z
    3e5a:	80 fb       	bst	r24, 0
    3e5c:	93 f9       	bld	r25, 3
    3e5e:	90 83       	st	Z, r25
    3e60:	08 95       	ret

00003e62 <radioSetPanId>:
    3e62:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x7e0162>
    3e66:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <__TEXT_REGION_LENGTH__+0x7e0163>
    3e6a:	08 95       	ret

00003e6c <radioSetShortAddress>:
    3e6c:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x7e0160>
    3e70:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <__TEXT_REGION_LENGTH__+0x7e0161>
    3e74:	08 95       	ret

00003e76 <radioSetExtendedAddress>:
    3e76:	dc 01       	movw	r26, r24
    3e78:	e4 e6       	ldi	r30, 0x64	; 100
    3e7a:	f1 e0       	ldi	r31, 0x01	; 1
    3e7c:	8d 91       	ld	r24, X+
    3e7e:	81 93       	st	Z+, r24
    3e80:	ec 36       	cpi	r30, 0x6C	; 108
    3e82:	81 e0       	ldi	r24, 0x01	; 1
    3e84:	f8 07       	cpc	r31, r24
    3e86:	d1 f7       	brne	.-12     	; 0x3e7c <radioSetExtendedAddress+0x6>
    3e88:	08 95       	ret

00003e8a <radioRandom>:
    3e8a:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    3e8e:	90 91 33 05 	lds	r25, 0x0533	; 0x800533 <radio_part_number.3584>
    3e92:	91 11       	cpse	r25, r1
    3e94:	19 c0       	rjmp	.+50     	; 0x3ec8 <radioRandom+0x3e>
    3e96:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <__TEXT_REGION_LENGTH__+0x7e015c>
    3e9a:	90 93 33 05 	sts	0x0533, r25	; 0x800533 <radio_part_number.3584>
    3e9e:	93 30       	cpi	r25, 0x03	; 3
    3ea0:	c9 f0       	breq	.+50     	; 0x3ed4 <radioRandom+0x4a>
    3ea2:	91 11       	cpse	r25, r1
    3ea4:	13 c0       	rjmp	.+38     	; 0x3ecc <radioRandom+0x42>
    3ea6:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <__TEXT_REGION_LENGTH__+0x7e015c>
    3eaa:	90 93 33 05 	sts	0x0533, r25	; 0x800533 <radio_part_number.3584>
    3eae:	93 38       	cpi	r25, 0x83	; 131
    3eb0:	89 f0       	breq	.+34     	; 0x3ed4 <radioRandom+0x4a>
    3eb2:	91 11       	cpse	r25, r1
    3eb4:	0d c0       	rjmp	.+26     	; 0x3ed0 <radioRandom+0x46>
    3eb6:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <__TEXT_REGION_LENGTH__+0x7e015c>
    3eba:	90 93 33 05 	sts	0x0533, r25	; 0x800533 <radio_part_number.3584>
    3ebe:	97 30       	cpi	r25, 0x07	; 7
    3ec0:	49 f0       	breq	.+18     	; 0x3ed4 <radioRandom+0x4a>
    3ec2:	0e 94 d9 31 	call	0x63b2	; 0x63b2 <rand>
    3ec6:	08 95       	ret
    3ec8:	93 30       	cpi	r25, 0x03	; 3
    3eca:	21 f0       	breq	.+8      	; 0x3ed4 <radioRandom+0x4a>
    3ecc:	93 38       	cpi	r25, 0x83	; 131
    3ece:	11 f0       	breq	.+4      	; 0x3ed4 <radioRandom+0x4a>
    3ed0:	97 30       	cpi	r25, 0x07	; 7
    3ed2:	b9 f7       	brne	.-18     	; 0x3ec2 <radioRandom+0x38>
    3ed4:	2f 70       	andi	r18, 0x0F	; 15
    3ed6:	26 30       	cpi	r18, 0x06	; 6
    3ed8:	a1 f7       	brne	.-24     	; 0x3ec2 <radioRandom+0x38>
    3eda:	38 2f       	mov	r19, r24
    3edc:	36 95       	lsr	r19
    3ede:	79 f0       	breq	.+30     	; 0x3efe <radioRandom+0x74>
    3ee0:	20 e0       	ldi	r18, 0x00	; 0
    3ee2:	80 e0       	ldi	r24, 0x00	; 0
    3ee4:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <__TEXT_REGION_LENGTH__+0x7e0146>
    3ee8:	90 76       	andi	r25, 0x60	; 96
    3eea:	92 95       	swap	r25
    3eec:	96 95       	lsr	r25
    3eee:	97 70       	andi	r25, 0x07	; 7
    3ef0:	88 0f       	add	r24, r24
    3ef2:	88 0f       	add	r24, r24
    3ef4:	89 2b       	or	r24, r25
    3ef6:	2f 5f       	subi	r18, 0xFF	; 255
    3ef8:	23 13       	cpse	r18, r19
    3efa:	f4 cf       	rjmp	.-24     	; 0x3ee4 <radioRandom+0x5a>
    3efc:	08 95       	ret
    3efe:	80 e0       	ldi	r24, 0x00	; 0
    3f00:	08 95       	ret

00003f02 <radioSetup900>:
    {
    }
}

void radioSetup900(void)
{
    3f02:	08 95       	ret

00003f04 <__vector_59>:
	/*! \brief ISR for the Radio RX_START event.
	 */
	void TRX24_RX_START_vect(void);
	#else  /* !DOXYGEN */
	ISR(TRX24_RX_START_vect)
	{
    3f04:	1f 92       	push	r1
    3f06:	0f 92       	push	r0
    3f08:	0f b6       	in	r0, 0x3f	; 63
    3f0a:	0f 92       	push	r0
    3f0c:	11 24       	eor	r1, r1
    3f0e:	0b b6       	in	r0, 0x3b	; 59
    3f10:	0f 92       	push	r0
    3f12:	2f 93       	push	r18
    3f14:	3f 93       	push	r19
    3f16:	4f 93       	push	r20
    3f18:	5f 93       	push	r21
    3f1a:	6f 93       	push	r22
    3f1c:	7f 93       	push	r23
    3f1e:	8f 93       	push	r24
    3f20:	9f 93       	push	r25
    3f22:	af 93       	push	r26
    3f24:	bf 93       	push	r27
    3f26:	ef 93       	push	r30
    3f28:	ff 93       	push	r31
	    //    debugMsgStr("rxstart");
	    radioRxStartEvent();
    3f2a:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <radioRxStartEvent>
	}
    3f2e:	ff 91       	pop	r31
    3f30:	ef 91       	pop	r30
    3f32:	bf 91       	pop	r27
    3f34:	af 91       	pop	r26
    3f36:	9f 91       	pop	r25
    3f38:	8f 91       	pop	r24
    3f3a:	7f 91       	pop	r23
    3f3c:	6f 91       	pop	r22
    3f3e:	5f 91       	pop	r21
    3f40:	4f 91       	pop	r20
    3f42:	3f 91       	pop	r19
    3f44:	2f 91       	pop	r18
    3f46:	0f 90       	pop	r0
    3f48:	0b be       	out	0x3b, r0	; 59
    3f4a:	0f 90       	pop	r0
    3f4c:	0f be       	out	0x3f, r0	; 63
    3f4e:	0f 90       	pop	r0
    3f50:	1f 90       	pop	r1
    3f52:	18 95       	reti

00003f54 <__vector_60>:
/*! \brief ISR for the Radio RX_START event.
 */
void TRX24_RX_END_vect(void);
#else  /* !DOXYGEN */
	ISR(TRX24_RX_END_vect)
	{
    3f54:	1f 92       	push	r1
    3f56:	0f 92       	push	r0
    3f58:	0f b6       	in	r0, 0x3f	; 63
    3f5a:	0f 92       	push	r0
    3f5c:	11 24       	eor	r1, r1
    3f5e:	0b b6       	in	r0, 0x3b	; 59
    3f60:	0f 92       	push	r0
    3f62:	2f 93       	push	r18
    3f64:	3f 93       	push	r19
    3f66:	4f 93       	push	r20
    3f68:	5f 93       	push	r21
    3f6a:	6f 93       	push	r22
    3f6c:	7f 93       	push	r23
    3f6e:	8f 93       	push	r24
    3f70:	9f 93       	push	r25
    3f72:	af 93       	push	r26
    3f74:	bf 93       	push	r27
    3f76:	ef 93       	push	r30
    3f78:	ff 93       	push	r31
	    //debugMsgStr("rxend");
	    radioTrxEndEvent();
    3f7a:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <radioTrxEndEvent>
	}
    3f7e:	ff 91       	pop	r31
    3f80:	ef 91       	pop	r30
    3f82:	bf 91       	pop	r27
    3f84:	af 91       	pop	r26
    3f86:	9f 91       	pop	r25
    3f88:	8f 91       	pop	r24
    3f8a:	7f 91       	pop	r23
    3f8c:	6f 91       	pop	r22
    3f8e:	5f 91       	pop	r21
    3f90:	4f 91       	pop	r20
    3f92:	3f 91       	pop	r19
    3f94:	2f 91       	pop	r18
    3f96:	0f 90       	pop	r0
    3f98:	0b be       	out	0x3b, r0	; 59
    3f9a:	0f 90       	pop	r0
    3f9c:	0f be       	out	0x3f, r0	; 63
    3f9e:	0f 90       	pop	r0
    3fa0:	1f 90       	pop	r1
    3fa2:	18 95       	reti

00003fa4 <__vector_63>:
/*! \brief ISR for the Radio RX_START event.
 */
void TRX24_TX_END_vect(void);
#else  /* !DOXYGEN */
ISR(TRX24_TX_END_vect)
{
    3fa4:	1f 92       	push	r1
    3fa6:	0f 92       	push	r0
    3fa8:	0f b6       	in	r0, 0x3f	; 63
    3faa:	0f 92       	push	r0
    3fac:	11 24       	eor	r1, r1
    3fae:	0b b6       	in	r0, 0x3b	; 59
    3fb0:	0f 92       	push	r0
    3fb2:	2f 93       	push	r18
    3fb4:	3f 93       	push	r19
    3fb6:	4f 93       	push	r20
    3fb8:	5f 93       	push	r21
    3fba:	6f 93       	push	r22
    3fbc:	7f 93       	push	r23
    3fbe:	8f 93       	push	r24
    3fc0:	9f 93       	push	r25
    3fc2:	af 93       	push	r26
    3fc4:	bf 93       	push	r27
    3fc6:	ef 93       	push	r30
    3fc8:	ff 93       	push	r31
    //    debugMsgStr("txend");
    //    debugMsgHex(hal_subregister_read(SR_TRX_STATUS));

    /// @todo fix this - this interrupt should never occur!!
    if (hal_subregister_read(SR_TRX_STATUS) != 0x16)
    3fca:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7e0141>
    3fce:	8f 71       	andi	r24, 0x1F	; 31
    3fd0:	86 31       	cpi	r24, 0x16	; 22
    3fd2:	11 f0       	breq	.+4      	; 0x3fd8 <__vector_63+0x34>
        radioTrxEndEvent();
    3fd4:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <radioTrxEndEvent>
}
    3fd8:	ff 91       	pop	r31
    3fda:	ef 91       	pop	r30
    3fdc:	bf 91       	pop	r27
    3fde:	af 91       	pop	r26
    3fe0:	9f 91       	pop	r25
    3fe2:	8f 91       	pop	r24
    3fe4:	7f 91       	pop	r23
    3fe6:	6f 91       	pop	r22
    3fe8:	5f 91       	pop	r21
    3fea:	4f 91       	pop	r20
    3fec:	3f 91       	pop	r19
    3fee:	2f 91       	pop	r18
    3ff0:	0f 90       	pop	r0
    3ff2:	0b be       	out	0x3b, r0	; 59
    3ff4:	0f 90       	pop	r0
    3ff6:	0f be       	out	0x3f, r0	; 63
    3ff8:	0f 90       	pop	r0
    3ffa:	1f 90       	pop	r1
    3ffc:	18 95       	reti

00003ffe <__vector_61>:
	#ifndef TRX24_CCA_ED_READY_vect
	  #define TRX24_CCA_ED_READY_vect TRX24_CCA_ED_DONE_vect
	#endif

	ISR(TRX24_CCA_ED_READY_vect)
	{
    3ffe:	1f 92       	push	r1
    4000:	0f 92       	push	r0
    4002:	0f b6       	in	r0, 0x3f	; 63
    4004:	0f 92       	push	r0
    4006:	11 24       	eor	r1, r1
    4008:	0b b6       	in	r0, 0x3b	; 59
    400a:	0f 92       	push	r0
    400c:	2f 93       	push	r18
    400e:	3f 93       	push	r19
    4010:	4f 93       	push	r20
    4012:	5f 93       	push	r21
    4014:	6f 93       	push	r22
    4016:	7f 93       	push	r23
    4018:	8f 93       	push	r24
    401a:	9f 93       	push	r25
    401c:	af 93       	push	r26
    401e:	bf 93       	push	r27
    4020:	ef 93       	push	r30
    4022:	ff 93       	push	r31
	    //    debugMsgStr("ccaend");

	    macEdCallback();
    4024:	0e 94 53 27 	call	0x4ea6	; 0x4ea6 <macEdCallback>
	}
    4028:	ff 91       	pop	r31
    402a:	ef 91       	pop	r30
    402c:	bf 91       	pop	r27
    402e:	af 91       	pop	r26
    4030:	9f 91       	pop	r25
    4032:	8f 91       	pop	r24
    4034:	7f 91       	pop	r23
    4036:	6f 91       	pop	r22
    4038:	5f 91       	pop	r21
    403a:	4f 91       	pop	r20
    403c:	3f 91       	pop	r19
    403e:	2f 91       	pop	r18
    4040:	0f 90       	pop	r0
    4042:	0b be       	out	0x3b, r0	; 59
    4044:	0f 90       	pop	r0
    4046:	0f be       	out	0x3f, r0	; 63
    4048:	0f 90       	pop	r0
    404a:	1f 90       	pop	r1
    404c:	18 95       	reti

0000404e <calibrate_rc_osc>:
    and monitor the CPU clock on an I/O pin.

    @return TRUE if calibrate passed; FALSE if calibrate failed.
*/
bool calibrate_rc_osc(void)
{
    404e:	df 92       	push	r13
    4050:	ef 92       	push	r14
    4052:	ff 92       	push	r15
    4054:	0f 93       	push	r16
    4056:	1f 93       	push	r17
    4058:	cf 93       	push	r28
    405a:	df 93       	push	r29
    405c:	00 d0       	rcall	.+0      	; 0x405e <calibrate_rc_osc+0x10>
    405e:	cd b7       	in	r28, 0x3d	; 61
    4060:	de b7       	in	r29, 0x3e	; 62
    if (SERIAL && F_CPU >= 2000000UL) // only need for making serial port work
    {
        bool success = false;
        static bool once=0;

        if (once)
    4062:	d0 90 35 05 	lds	r13, 0x0535	; 0x800535 <once.3484>
    4066:	dd 20       	and	r13, r13
    4068:	59 f0       	breq	.+22     	; 0x4080 <calibrate_rc_osc+0x32>

        return success;
    }
    else
        return 0;
}
    406a:	8d 2d       	mov	r24, r13
    406c:	0f 90       	pop	r0
    406e:	0f 90       	pop	r0
    4070:	df 91       	pop	r29
    4072:	cf 91       	pop	r28
    4074:	1f 91       	pop	r17
    4076:	0f 91       	pop	r16
    4078:	ff 90       	pop	r15
    407a:	ef 90       	pop	r14
    407c:	df 90       	pop	r13
    407e:	08 95       	ret

        if (once)
            // Only calibrate once
            return true;

        once = true;
    4080:	81 e0       	ldi	r24, 0x01	; 1
    4082:	80 93 35 05 	sts	0x0535, r24	; 0x800535 <once.3484>
        //   timer2 to overflow
        // Timer 2 (8-bit) is run from the main CPU clock divided by
        //   32.  This means the clock is 31250Hz at 1MHz, or 250KHz at 8MHz.
        //   Target time is 1024uS (8MHz) or 8192uS (1MHz).

        osccal_saved = OSCCAL;
    4086:	e0 90 66 00 	lds	r14, 0x0066	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>
        cli();
    408a:	f8 94       	cli

        radioSetClockSpeed(true, CLKM_1MHz);
    408c:	61 e0       	ldi	r22, 0x01	; 1
    408e:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <radioSetClockSpeed>

        // Save current values of timer status.
        tccr2b = TCCR2B;
    4092:	f0 90 b1 00 	lds	r15, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
        tccr1b = TCCR1B;
    4096:	00 91 81 00 	lds	r16, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        tccr1a = TCCR1A;
    409a:	10 91 80 00 	lds	r17, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>

        // Stop timers 1 and 2.
        // Set timer 1 to normal mode (no CTC, no PWM, just count).
        TCCR2B = 0;
    409e:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
        TCCR1B = 0;
    40a2:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        TCCR1A = 0;
    40a6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    40aa:	28 ee       	ldi	r18, 0xE8	; 232
    40ac:	33 e0       	ldi	r19, 0x03	; 3

        for (counter = 0; counter < 1000;  counter++)
        {
            // Timer 2 driven from clock divided by 32
            TCCR2B = (1 << CS21) | (1 << CS20);
    40ae:	73 e0       	ldi	r23, 0x03	; 3
            // Timer 1 driven with external clock
            TCCR1B = (1 << CS12) | (1 << CS11);
    40b0:	66 e0       	ldi	r22, 0x06	; 6

            // Clear pending timer 1 and 2 interrupts, and clear the
            // counters.
            TCNT2 = 0;
            TCNT1 = 0;
            TIFR1 = 0xFF;
    40b2:	9f ef       	ldi	r25, 0xFF	; 255
        TCCR1A = 0;

        for (counter = 0; counter < 1000;  counter++)
        {
            // Timer 2 driven from clock divided by 32
            TCCR2B = (1 << CS21) | (1 << CS20);
    40b4:	70 93 b1 00 	sts	0x00B1, r23	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
            // Timer 1 driven with external clock
            TCCR1B = (1 << CS12) | (1 << CS11);
    40b8:	60 93 81 00 	sts	0x0081, r22	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

            // Clear pending timer 1 and 2 interrupts, and clear the
            // counters.
            TCNT2 = 0;
    40bc:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
            TCNT1 = 0;
    40c0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    40c4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
            TIFR1 = 0xFF;
    40c8:	96 bb       	out	0x16, r25	; 22
            TIFR2 = 0xFF;
    40ca:	97 bb       	out	0x17, r25	; 23

            // Wait for timer 2 to overflow.
            while (!(TIFR2 & (1 << TOV2)))
    40cc:	b8 9b       	sbis	0x17, 0	; 23
    40ce:	fe cf       	rjmp	.-4      	; 0x40cc <calibrate_rc_osc+0x7e>
                ;

            temp = TCNT1;
    40d0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    40d4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    40d8:	5a 83       	std	Y+2, r21	; 0x02
    40da:	49 83       	std	Y+1, r20	; 0x01


            // Stop timer 1.  Now, TCNT1 contains the number of 1MHz RF2xx cycles
            // counted while timer 2 was counting CPU cycles
            TCCR1B = 0;
    40dc:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
            TCCR2B = 0;
    40e0:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>

            if (temp < (u16)(0.995 * TARGETVAL))
    40e4:	49 81       	ldd	r20, Y+1	; 0x01
    40e6:	5a 81       	ldd	r21, Y+2	; 0x02
    40e8:	4d 3f       	cpi	r20, 0xFD	; 253
    40ea:	51 40       	sbci	r21, 0x01	; 1
    40ec:	a8 f4       	brcc	.+42     	; 0x4118 <calibrate_rc_osc+0xca>
            {
                // Too fast, slow down
                OSCCAL--;
    40ee:	40 91 66 00 	lds	r20, 0x0066	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>
    40f2:	41 50       	subi	r20, 0x01	; 1
    40f4:	40 93 66 00 	sts	0x0066, r20	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>
    40f8:	21 50       	subi	r18, 0x01	; 1
    40fa:	31 09       	sbc	r19, r1
        // Set timer 1 to normal mode (no CTC, no PWM, just count).
        TCCR2B = 0;
        TCCR1B = 0;
        TCCR1A = 0;

        for (counter = 0; counter < 1000;  counter++)
    40fc:	d9 f6       	brne	.-74     	; 0x40b4 <calibrate_rc_osc+0x66>
                success = true;
                break;
            }
        }

        radioSetClockSpeed(true, CLKM_DISABLED);
    40fe:	60 e0       	ldi	r22, 0x00	; 0
    4100:	81 e0       	ldi	r24, 0x01	; 1
    4102:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <radioSetClockSpeed>

        // restore timer status regs
        TCCR2B = tccr2b;
    4106:	f0 92 b1 00 	sts	0x00B1, r15	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
        TCCR1B = tccr1b;
    410a:	00 93 81 00 	sts	0x0081, r16	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        TCCR1A = tccr1a;
    410e:	10 93 80 00 	sts	0x0080, r17	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
        if (!success)
        {
            // We failed, therefore restore previous OSCCAL value.
            OSCCAL = osccal_saved;
    4112:	e0 92 66 00 	sts	0x0066, r14	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>
    4116:	a9 cf       	rjmp	.-174    	; 0x406a <calibrate_rc_osc+0x1c>
            if (temp < (u16)(0.995 * TARGETVAL))
            {
                // Too fast, slow down
                OSCCAL--;
            }
            else if (temp > (u16)(1.005 * TARGETVAL))
    4118:	49 81       	ldd	r20, Y+1	; 0x01
    411a:	5a 81       	ldd	r21, Y+2	; 0x02
    411c:	43 30       	cpi	r20, 0x03	; 3
    411e:	52 40       	sbci	r21, 0x02	; 2
    4120:	30 f0       	brcs	.+12     	; 0x412e <calibrate_rc_osc+0xe0>
            {
                // Too slow, speed up
                OSCCAL++;
    4122:	40 91 66 00 	lds	r20, 0x0066	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>
    4126:	4f 5f       	subi	r20, 0xFF	; 255
    4128:	40 93 66 00 	sts	0x0066, r20	; 0x800066 <__TEXT_REGION_LENGTH__+0x7e0066>
    412c:	e5 cf       	rjmp	.-54     	; 0x40f8 <calibrate_rc_osc+0xaa>
                success = true;
                break;
            }
        }

        radioSetClockSpeed(true, CLKM_DISABLED);
    412e:	60 e0       	ldi	r22, 0x00	; 0
    4130:	81 e0       	ldi	r24, 0x01	; 1
    4132:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <radioSetClockSpeed>

        // restore timer status regs
        TCCR2B = tccr2b;
    4136:	f0 92 b1 00 	sts	0x00B1, r15	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
        TCCR1B = tccr1b;
    413a:	00 93 81 00 	sts	0x0081, r16	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        TCCR1A = tccr1a;
    413e:	10 93 80 00 	sts	0x0080, r17	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    4142:	dd 24       	eor	r13, r13
    4144:	d3 94       	inc	r13
    4146:	91 cf       	rjmp	.-222    	; 0x406a <calibrate_rc_osc+0x1c>

00004148 <halGetEeprom>:
   @param offset The offset in EEPROM of the start of the data block
   @param length The length in bytes of the data block
   @param dest  Pointer to the area in memory to place the data block
*/
void halGetEeprom(void *addr, u8 length, u8 *dest)
{
    4148:	cf 93       	push	r28
    414a:	df 93       	push	r29
    414c:	1f 92       	push	r1
    414e:	cd b7       	in	r28, 0x3d	; 61
    4150:	de b7       	in	r29, 0x3e	; 62
    4152:	fc 01       	movw	r30, r24
    4154:	ca 01       	movw	r24, r20
    AVR_ENTER_CRITICAL_REGION();
    4156:	3f b7       	in	r19, 0x3f	; 63
    4158:	39 83       	std	Y+1, r19	; 0x01
    415a:	f8 94       	cli
    eeprom_read_block (dest, addr, length);
    415c:	46 2f       	mov	r20, r22
    415e:	50 e0       	ldi	r21, 0x00	; 0
    4160:	bf 01       	movw	r22, r30
    4162:	0e 94 b3 37 	call	0x6f66	; 0x6f66 <eeprom_read_block>
    AVR_LEAVE_CRITICAL_REGION();
    4166:	89 81       	ldd	r24, Y+1	; 0x01
    4168:	8f bf       	out	0x3f, r24	; 63
}
    416a:	0f 90       	pop	r0
    416c:	df 91       	pop	r29
    416e:	cf 91       	pop	r28
    4170:	08 95       	ret

00004172 <halPutEeprom>:
   @param offset The offset in EEPROM of the start of the data block
   @param length The length in bytes of the data block
   @param src  Pointer to the area in memory which contains the data block
*/
void halPutEeprom(void *addr, u8 length, u8 *src)
{
    4172:	cf 93       	push	r28
    4174:	df 93       	push	r29
    4176:	1f 92       	push	r1
    4178:	cd b7       	in	r28, 0x3d	; 61
    417a:	de b7       	in	r29, 0x3e	; 62
    417c:	fc 01       	movw	r30, r24
    417e:	ca 01       	movw	r24, r20
    AVR_ENTER_CRITICAL_REGION();
    4180:	3f b7       	in	r19, 0x3f	; 63
    4182:	39 83       	std	Y+1, r19	; 0x01
    4184:	f8 94       	cli
    eeprom_write_block (src, addr, length);
    4186:	46 2f       	mov	r20, r22
    4188:	50 e0       	ldi	r21, 0x00	; 0
    418a:	bf 01       	movw	r22, r30
    418c:	0e 94 d5 37 	call	0x6faa	; 0x6faa <eeprom_write_block>
    AVR_LEAVE_CRITICAL_REGION();
    4190:	89 81       	ldd	r24, Y+1	; 0x01
    4192:	8f bf       	out	0x3f, r24	; 63
}
    4194:	0f 90       	pop	r0
    4196:	df 91       	pop	r29
    4198:	cf 91       	pop	r28
    419a:	08 95       	ret

0000419c <macInit>:

   @param Channel Sets the channel to use for the MAC.  Use 0xff for
   non-coordinator nodes.
*/
void macInit(u8 Channel)
{
    419c:	1f 93       	push	r17
    419e:	cf 93       	push	r28
    41a0:	df 93       	push	r29
    41a2:	cd b7       	in	r28, 0x3d	; 61
    41a4:	de b7       	in	r29, 0x3e	; 62
    41a6:	28 97       	sbiw	r28, 0x08	; 8
    41a8:	0f b6       	in	r0, 0x3f	; 63
    41aa:	f8 94       	cli
    41ac:	de bf       	out	0x3e, r29	; 62
    41ae:	0f be       	out	0x3f, r0	; 63
    41b0:	cd bf       	out	0x3d, r28	; 61
    41b2:	18 2f       	mov	r17, r24
    // ETG DEBUG
    // Base address of the GPIO modules.
  //  volatile avr32_gpio_t * myGpio = &AVR32_GPIO;
#endif

    macConfig.panId = BROADCASTPANID;
    41b4:	2f ef       	ldi	r18, 0xFF	; 255
    41b6:	3f ef       	ldi	r19, 0xFF	; 255
    41b8:	30 93 48 0c 	sts	0x0C48, r19	; 0x800c48 <macConfig+0xc>
    41bc:	20 93 47 0c 	sts	0x0C47, r18	; 0x800c47 <macConfig+0xb>
    macConfig.shortAddress = BROADCASTADDR;
    41c0:	30 93 4a 0c 	sts	0x0C4A, r19	; 0x800c4a <macConfig+0xe>
    41c4:	20 93 49 0c 	sts	0x0C49, r18	; 0x800c49 <macConfig+0xd>
    macConfig.associated = false;
    41c8:	10 92 44 0c 	sts	0x0C44, r1	; 0x800c44 <macConfig+0x8>

    macConfig.parentShortAddress = BROADCASTADDR;
    41cc:	30 93 4c 0c 	sts	0x0C4C, r19	; 0x800c4c <macConfig+0x10>
    41d0:	20 93 4b 0c 	sts	0x0C4B, r18	; 0x800c4b <macConfig+0xf>
    macConfig.lastRoute = BROADCASTADDR;
    41d4:	30 93 4e 0c 	sts	0x0C4E, r19	; 0x800c4e <macConfig+0x12>
    41d8:	20 93 4d 0c 	sts	0x0C4D, r18	; 0x800c4d <macConfig+0x11>
    macConfig.hopsToCoord = 0;
    41dc:	10 92 4f 0c 	sts	0x0C4F, r1	; 0x800c4f <macConfig+0x13>
    macConfig.busy = 0;
    41e0:	10 92 53 0c 	sts	0x0C53, r1	; 0x800c53 <macConfig+0x17>
    macConfig.sleeping = 1; // Assume sleeping state initially
    41e4:	81 e0       	ldi	r24, 0x01	; 1
    41e6:	80 93 54 0c 	sts	0x0C54, r24	; 0x800c54 <macConfig+0x18>

    // Init radio
    radioInit(SERIAL ? true : false);
    41ea:	0e 94 b6 1c 	call	0x396c	; 0x396c <radioInit>

    // Set the channel
    macConfig.currentChannel = Channel;
    41ee:	10 93 50 0c 	sts	0x0C50, r17	; 0x800c50 <macConfig+0x14>
    if (Channel != 0xff)
    41f2:	1f 3f       	cpi	r17, 0xFF	; 255
    41f4:	19 f0       	breq	.+6      	; 0x41fc <macInit+0x60>
        radioSetOperatingChannel(Channel);
    41f6:	81 2f       	mov	r24, r17
    41f8:	0e 94 fe 1c 	call	0x39fc	; 0x39fc <radioSetOperatingChannel>

    radioUseAutoTxCrc(true);
    41fc:	81 e0       	ldi	r24, 0x01	; 1
    41fe:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <radioUseAutoTxCrc>
    radioSetTrxState(TRX_OFF);
    4202:	88 e0       	ldi	r24, 0x08	; 8
    4204:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <radioSetTrxState>

    // Set RF212 to 250KB mode.
    radioSetup900();
    4208:	0e 94 81 1f 	call	0x3f02	; 0x3f02 <radioSetup900>

    // Set ack times shorter
   /// hal_subregister_write(SR_AACK_ACK_TIME, 1); //longer ack response time seems to work better, pb

    radioSetTrxState(RX_AACK_ON);
    420c:	86 e1       	ldi	r24, 0x16	; 22
    420e:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <radioSetTrxState>
    // DEBUG
//    myGpio->port[0].ovr &= ~(1<<0);
#endif

    // Setup the address of this device by reading a stored address from eeprom.
    halGetMacAddr((u8*)&(macConfig.longAddr));
    4212:	4c e3       	ldi	r20, 0x3C	; 60
    4214:	5c e0       	ldi	r21, 0x0C	; 12
    4216:	68 e0       	ldi	r22, 0x08	; 8
    4218:	80 e0       	ldi	r24, 0x00	; 0
    421a:	90 e0       	ldi	r25, 0x00	; 0
    421c:	0e 94 a4 20 	call	0x4148	; 0x4148 <halGetEeprom>

    // Set up radio's coordinator flag
    radioSetDeviceRole(NODETYPE == COORD);
    4220:	80 e0       	ldi	r24, 0x00	; 0
    4222:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <radioSetDeviceRole>

    // Setup radio's short addess
    radioSetShortAddress(BROADCASTADDR);
    4226:	8f ef       	ldi	r24, 0xFF	; 255
    4228:	9f ef       	ldi	r25, 0xFF	; 255
    422a:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <radioSetShortAddress>

    // Setup radio's PANID
    radioSetPanId(BROADCASTPANID);
    422e:	8f ef       	ldi	r24, 0xFF	; 255
    4230:	9f ef       	ldi	r25, 0xFF	; 255
    4232:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <radioSetPanId>

    // Set up the radio for auto mode operation.
    hal_subregister_write( SR_MAX_FRAME_RETRIES, 2 );
    4236:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <__TEXT_REGION_LENGTH__+0x7e016c>
    423a:	8f 70       	andi	r24, 0x0F	; 15
    423c:	80 62       	ori	r24, 0x20	; 32
    423e:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <__TEXT_REGION_LENGTH__+0x7e016c>

    // Load the long address into the radio. Needed for auto modes.
// ETG
    u64 longAddr = htons_64(macConfig.longAddr);
    4242:	80 91 3c 0c 	lds	r24, 0x0C3C	; 0x800c3c <macConfig>
    4246:	89 83       	std	Y+1, r24	; 0x01
    4248:	80 91 3d 0c 	lds	r24, 0x0C3D	; 0x800c3d <macConfig+0x1>
    424c:	8a 83       	std	Y+2, r24	; 0x02
    424e:	80 91 3e 0c 	lds	r24, 0x0C3E	; 0x800c3e <macConfig+0x2>
    4252:	8b 83       	std	Y+3, r24	; 0x03
    4254:	80 91 3f 0c 	lds	r24, 0x0C3F	; 0x800c3f <macConfig+0x3>
    4258:	8c 83       	std	Y+4, r24	; 0x04
    425a:	80 91 40 0c 	lds	r24, 0x0C40	; 0x800c40 <macConfig+0x4>
    425e:	8d 83       	std	Y+5, r24	; 0x05
    4260:	80 91 41 0c 	lds	r24, 0x0C41	; 0x800c41 <macConfig+0x5>
    4264:	8e 83       	std	Y+6, r24	; 0x06
    4266:	80 91 42 0c 	lds	r24, 0x0C42	; 0x800c42 <macConfig+0x6>
    426a:	8f 83       	std	Y+7, r24	; 0x07
    426c:	80 91 43 0c 	lds	r24, 0x0C43	; 0x800c43 <macConfig+0x7>
    4270:	88 87       	std	Y+8, r24	; 0x08
// ETG    radioSetExtendedAddress((uint8_t *)&macConfig.longAddr);
    radioSetExtendedAddress((uint8_t *)&longAddr);
    4272:	ce 01       	movw	r24, r28
    4274:	01 96       	adiw	r24, 0x01	; 1
    4276:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <radioSetExtendedAddress>

    // Initialize the array of nodes (coordinator only)
    macInitNodes();
    427a:	0e 94 1b 22 	call	0x4436	; 0x4436 <macInitNodes>
}
    427e:	28 96       	adiw	r28, 0x08	; 8
    4280:	0f b6       	in	r0, 0x3f	; 63
    4282:	f8 94       	cli
    4284:	de bf       	out	0x3e, r29	; 62
    4286:	0f be       	out	0x3f, r0	; 63
    4288:	cd bf       	out	0x3d, r28	; 61
    428a:	df 91       	pop	r29
    428c:	cf 91       	pop	r28
    428e:	1f 91       	pop	r17
    4290:	08 95       	ret

00004292 <macSetOperatingChannel>:
   @param channel The channel number to use for radio communication.
*/
void macSetOperatingChannel(u8 channel)
{
    // Set the channel
    macConfig.currentChannel = channel;
    4292:	80 93 50 0c 	sts	0x0C50, r24	; 0x800c50 <macConfig+0x14>
    radioSetOperatingChannel(channel);
    4296:	0c 94 fe 1c 	jmp	0x39fc	; 0x39fc <radioSetOperatingChannel>

0000429a <macAssociationConfirm>:
   parent.

   @param addr The short address of the child node that has woken up.
*/
void macClearChildWakeFlag(u16 addr)
{
    429a:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <associationTimer>
    429e:	0e 94 43 28 	call	0x5086	; 0x5086 <macTimerEnd>
    42a2:	90 91 44 0c 	lds	r25, 0x0C44	; 0x800c44 <macConfig+0x8>
    42a6:	81 e0       	ldi	r24, 0x01	; 1
    42a8:	89 27       	eor	r24, r25
    42aa:	0c 94 64 02 	jmp	0x4c8	; 0x4c8 <appAssociateConfirm>

000042ae <macAssociate>:
    42ae:	cf 93       	push	r28
    42b0:	df 93       	push	r29
    42b2:	ec 01       	movw	r28, r24
    42b4:	86 2f       	mov	r24, r22
    42b6:	0e 94 49 21 	call	0x4292	; 0x4292 <macSetOperatingChannel>
    42ba:	ea eb       	ldi	r30, 0xBA	; 186
    42bc:	fb e0       	ldi	r31, 0x0B	; 11
    42be:	83 e6       	ldi	r24, 0x63	; 99
    42c0:	98 ec       	ldi	r25, 0xC8	; 200
    42c2:	92 83       	std	Z+2, r25	; 0x02
    42c4:	81 83       	std	Z+1, r24	; 0x01
    42c6:	ac e3       	ldi	r26, 0x3C	; 60
    42c8:	bc e0       	ldi	r27, 0x0C	; 12
    42ca:	1a 96       	adiw	r26, 0x0a	; 10
    42cc:	8c 91       	ld	r24, X
    42ce:	1a 97       	sbiw	r26, 0x0a	; 10
    42d0:	91 e0       	ldi	r25, 0x01	; 1
    42d2:	98 0f       	add	r25, r24
    42d4:	1a 96       	adiw	r26, 0x0a	; 10
    42d6:	9c 93       	st	X, r25
    42d8:	1a 97       	sbiw	r26, 0x0a	; 10
    42da:	83 83       	std	Z+3, r24	; 0x03
    42dc:	1b 96       	adiw	r26, 0x0b	; 11
    42de:	8d 91       	ld	r24, X+
    42e0:	9c 91       	ld	r25, X
    42e2:	1c 97       	sbiw	r26, 0x0c	; 12
    42e4:	95 83       	std	Z+5, r25	; 0x05
    42e6:	84 83       	std	Z+4, r24	; 0x04
    42e8:	d7 83       	std	Z+7, r29	; 0x07
    42ea:	c6 83       	std	Z+6, r28	; 0x06
    42ec:	8c 91       	ld	r24, X
    42ee:	80 87       	std	Z+8, r24	; 0x08
    42f0:	11 96       	adiw	r26, 0x01	; 1
    42f2:	8c 91       	ld	r24, X
    42f4:	11 97       	sbiw	r26, 0x01	; 1
    42f6:	81 87       	std	Z+9, r24	; 0x09
    42f8:	12 96       	adiw	r26, 0x02	; 2
    42fa:	8c 91       	ld	r24, X
    42fc:	12 97       	sbiw	r26, 0x02	; 2
    42fe:	82 87       	std	Z+10, r24	; 0x0a
    4300:	13 96       	adiw	r26, 0x03	; 3
    4302:	8c 91       	ld	r24, X
    4304:	13 97       	sbiw	r26, 0x03	; 3
    4306:	83 87       	std	Z+11, r24	; 0x0b
    4308:	14 96       	adiw	r26, 0x04	; 4
    430a:	8c 91       	ld	r24, X
    430c:	14 97       	sbiw	r26, 0x04	; 4
    430e:	84 87       	std	Z+12, r24	; 0x0c
    4310:	15 96       	adiw	r26, 0x05	; 5
    4312:	8c 91       	ld	r24, X
    4314:	15 97       	sbiw	r26, 0x05	; 5
    4316:	85 87       	std	Z+13, r24	; 0x0d
    4318:	16 96       	adiw	r26, 0x06	; 6
    431a:	8c 91       	ld	r24, X
    431c:	16 97       	sbiw	r26, 0x06	; 6
    431e:	86 87       	std	Z+14, r24	; 0x0e
    4320:	17 96       	adiw	r26, 0x07	; 7
    4322:	8c 91       	ld	r24, X
    4324:	87 87       	std	Z+15, r24	; 0x0f
    4326:	81 e0       	ldi	r24, 0x01	; 1
    4328:	80 8b       	std	Z+16, r24	; 0x10
    432a:	d2 8b       	std	Z+18, r29	; 0x12
    432c:	c1 8b       	std	Z+17, r28	; 0x11
    432e:	82 e0       	ldi	r24, 0x02	; 2
    4330:	83 8b       	std	Z+19, r24	; 0x13
    4332:	6b eb       	ldi	r22, 0xBB	; 187
    4334:	7b e0       	ldi	r23, 0x0B	; 11
    4336:	83 e1       	ldi	r24, 0x13	; 19
    4338:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <radioSendData>
    433c:	6d e4       	ldi	r22, 0x4D	; 77
    433e:	71 e2       	ldi	r23, 0x21	; 33
    4340:	84 e6       	ldi	r24, 0x64	; 100
    4342:	90 e0       	ldi	r25, 0x00	; 0
    4344:	0e 94 81 27 	call	0x4f02	; 0x4f02 <macSetAlarm>
    4348:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <associationTimer>
    434c:	df 91       	pop	r29
    434e:	cf 91       	pop	r28
    4350:	08 95       	ret

00004352 <macIsChild>:
    4352:	00 97       	sbiw	r24, 0x00	; 0
    4354:	79 f0       	breq	.+30     	; 0x4374 <macIsChild+0x22>
    4356:	e6 e3       	ldi	r30, 0x36	; 54
    4358:	f5 e0       	ldi	r31, 0x05	; 5
    435a:	05 c0       	rjmp	.+10     	; 0x4366 <macIsChild+0x14>
    435c:	33 96       	adiw	r30, 0x03	; 3
    435e:	26 e0       	ldi	r18, 0x06	; 6
    4360:	e2 36       	cpi	r30, 0x62	; 98
    4362:	f2 07       	cpc	r31, r18
    4364:	39 f0       	breq	.+14     	; 0x4374 <macIsChild+0x22>
    4366:	20 81       	ld	r18, Z
    4368:	31 81       	ldd	r19, Z+1	; 0x01
    436a:	28 17       	cp	r18, r24
    436c:	39 07       	cpc	r19, r25
    436e:	b1 f7       	brne	.-20     	; 0x435c <macIsChild+0xa>
    4370:	81 e0       	ldi	r24, 0x01	; 1
    4372:	08 95       	ret
    4374:	80 e0       	ldi	r24, 0x00	; 0
    4376:	08 95       	ret

00004378 <macAddChild>:
    4378:	a6 e3       	ldi	r26, 0x36	; 54
    437a:	b5 e0       	ldi	r27, 0x05	; 5
    437c:	fd 01       	movw	r30, r26
    437e:	20 e0       	ldi	r18, 0x00	; 0
    4380:	30 e0       	ldi	r19, 0x00	; 0
    4382:	06 c0       	rjmp	.+12     	; 0x4390 <macAddChild+0x18>
    4384:	2f 5f       	subi	r18, 0xFF	; 255
    4386:	3f 4f       	sbci	r19, 0xFF	; 255
    4388:	33 96       	adiw	r30, 0x03	; 3
    438a:	24 36       	cpi	r18, 0x64	; 100
    438c:	31 05       	cpc	r19, r1
    438e:	91 f0       	breq	.+36     	; 0x43b4 <macAddChild+0x3c>
    4390:	40 81       	ld	r20, Z
    4392:	51 81       	ldd	r21, Z+1	; 0x01
    4394:	48 17       	cp	r20, r24
    4396:	59 07       	cpc	r21, r25
    4398:	a9 f7       	brne	.-22     	; 0x4384 <macAddChild+0xc>
    439a:	f9 01       	movw	r30, r18
    439c:	ee 0f       	add	r30, r30
    439e:	ff 1f       	adc	r31, r31
    43a0:	2e 0f       	add	r18, r30
    43a2:	3f 1f       	adc	r19, r31
    43a4:	f9 01       	movw	r30, r18
    43a6:	e8 5c       	subi	r30, 0xC8	; 200
    43a8:	fa 4f       	sbci	r31, 0xFA	; 250
    43aa:	80 81       	ld	r24, Z
    43ac:	8e 7f       	andi	r24, 0xFE	; 254
    43ae:	8d 7f       	andi	r24, 0xFD	; 253
    43b0:	80 83       	st	Z, r24
    43b2:	08 95       	ret
    43b4:	20 e0       	ldi	r18, 0x00	; 0
    43b6:	30 e0       	ldi	r19, 0x00	; 0
    43b8:	06 c0       	rjmp	.+12     	; 0x43c6 <macAddChild+0x4e>
    43ba:	2f 5f       	subi	r18, 0xFF	; 255
    43bc:	3f 4f       	sbci	r19, 0xFF	; 255
    43be:	13 96       	adiw	r26, 0x03	; 3
    43c0:	24 36       	cpi	r18, 0x64	; 100
    43c2:	31 05       	cpc	r19, r1
    43c4:	d9 f0       	breq	.+54     	; 0x43fc <macAddChild+0x84>
    43c6:	62 2f       	mov	r22, r18
    43c8:	4d 91       	ld	r20, X+
    43ca:	5c 91       	ld	r21, X
    43cc:	11 97       	sbiw	r26, 0x01	; 1
    43ce:	45 2b       	or	r20, r21
    43d0:	a1 f7       	brne	.-24     	; 0x43ba <macAddChild+0x42>
    43d2:	f9 01       	movw	r30, r18
    43d4:	ee 0f       	add	r30, r30
    43d6:	ff 1f       	adc	r31, r31
    43d8:	2e 0f       	add	r18, r30
    43da:	3f 1f       	adc	r19, r31
    43dc:	f9 01       	movw	r30, r18
    43de:	ea 5c       	subi	r30, 0xCA	; 202
    43e0:	fa 4f       	sbci	r31, 0xFA	; 250
    43e2:	91 83       	std	Z+1, r25	; 0x01
    43e4:	80 83       	st	Z, r24
    43e6:	f9 01       	movw	r30, r18
    43e8:	e8 5c       	subi	r30, 0xC8	; 200
    43ea:	fa 4f       	sbci	r31, 0xFA	; 250
    43ec:	80 81       	ld	r24, Z
    43ee:	8e 7f       	andi	r24, 0xFE	; 254
    43f0:	8d 7f       	andi	r24, 0xFD	; 253
    43f2:	80 83       	st	Z, r24
    43f4:	86 2f       	mov	r24, r22
    43f6:	90 e0       	ldi	r25, 0x00	; 0
    43f8:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <appChildAssociated>
    43fc:	08 95       	ret

000043fe <macRemoveChild>:
    43fe:	e6 e3       	ldi	r30, 0x36	; 54
    4400:	f5 e0       	ldi	r31, 0x05	; 5
    4402:	20 e0       	ldi	r18, 0x00	; 0
    4404:	30 e0       	ldi	r19, 0x00	; 0
    4406:	06 c0       	rjmp	.+12     	; 0x4414 <macRemoveChild+0x16>
    4408:	2f 5f       	subi	r18, 0xFF	; 255
    440a:	3f 4f       	sbci	r19, 0xFF	; 255
    440c:	33 96       	adiw	r30, 0x03	; 3
    440e:	24 36       	cpi	r18, 0x64	; 100
    4410:	31 05       	cpc	r19, r1
    4412:	81 f0       	breq	.+32     	; 0x4434 <macRemoveChild+0x36>
    4414:	40 81       	ld	r20, Z
    4416:	51 81       	ldd	r21, Z+1	; 0x01
    4418:	48 17       	cp	r20, r24
    441a:	59 07       	cpc	r21, r25
    441c:	a9 f7       	brne	.-22     	; 0x4408 <macRemoveChild+0xa>
    441e:	f9 01       	movw	r30, r18
    4420:	ee 0f       	add	r30, r30
    4422:	ff 1f       	adc	r31, r31
    4424:	2e 0f       	add	r18, r30
    4426:	3f 1f       	adc	r19, r31
    4428:	f9 01       	movw	r30, r18
    442a:	ea 5c       	subi	r30, 0xCA	; 202
    442c:	fa 4f       	sbci	r31, 0xFA	; 250
    442e:	11 82       	std	Z+1, r1	; 0x01
    4430:	10 82       	st	Z, r1
    4432:	08 95       	ret
    4434:	08 95       	ret

00004436 <macInitNodes>:
    4436:	08 95       	ret

00004438 <macWakeChildNode>:
    4438:	08 95       	ret

0000443a <macChildIsAwake>:
   This function is called on the receipt of every packet.

   @param frame Pointer to ftData struct, the received packet.
*/
void macChildIsAwake(ftData *frame)
{
    443a:	fc 01       	movw	r30, r24
            if (RUMSLEEP)
                macSendStoredFrame(addr);
        }
    }
    // Reset the sleeping bit in the frame.
    frame->type &= ~0x80;
    443c:	95 85       	ldd	r25, Z+13	; 0x0d
    443e:	9f 77       	andi	r25, 0x7F	; 127
    4440:	95 87       	std	Z+13, r25	; 0x0d
    4442:	08 95       	ret

00004444 <sendBeaconFrame>:
{
    if (NODETYPE != ENDDEVICE)
    {
        ftBeacon* data_frame = (ftBeacon*)(mac_buffer_tx+1);

        data_frame->fcf   = htons_16(FCF_BEACON);
    4444:	ea eb       	ldi	r30, 0xBA	; 186
    4446:	fb e0       	ldi	r31, 0x0B	; 11
    4448:	80 e0       	ldi	r24, 0x00	; 0
    444a:	90 e8       	ldi	r25, 0x80	; 128
    444c:	92 83       	std	Z+2, r25	; 0x02
    444e:	81 83       	std	Z+1, r24	; 0x01
        data_frame->seq   = macConfig.bsn++;
    4450:	ac e3       	ldi	r26, 0x3C	; 60
    4452:	bc e0       	ldi	r27, 0x0C	; 12
    4454:	19 96       	adiw	r26, 0x09	; 9
    4456:	8c 91       	ld	r24, X
    4458:	19 97       	sbiw	r26, 0x09	; 9
    445a:	91 e0       	ldi	r25, 0x01	; 1
    445c:	98 0f       	add	r25, r24
    445e:	19 96       	adiw	r26, 0x09	; 9
    4460:	9c 93       	st	X, r25
    4462:	19 97       	sbiw	r26, 0x09	; 9
    4464:	83 83       	std	Z+3, r24	; 0x03
        data_frame->panid = htons_16(macConfig.panId);
    4466:	1b 96       	adiw	r26, 0x0b	; 11
    4468:	8d 91       	ld	r24, X+
    446a:	9c 91       	ld	r25, X
    446c:	1c 97       	sbiw	r26, 0x0c	; 12
    446e:	95 83       	std	Z+5, r25	; 0x05
    4470:	84 83       	std	Z+4, r24	; 0x04
        data_frame->addr  = htons_16(macConfig.shortAddress);
    4472:	1d 96       	adiw	r26, 0x0d	; 13
    4474:	8d 91       	ld	r24, X+
    4476:	9c 91       	ld	r25, X
    4478:	1e 97       	sbiw	r26, 0x0e	; 14
    447a:	97 83       	std	Z+7, r25	; 0x07
    447c:	86 83       	std	Z+6, r24	; 0x06

        if (NODETYPE == ROUTER)
            data_frame->superFrame = htons_16(ROUTER_SUPERFRAME);
    447e:	8f ef       	ldi	r24, 0xFF	; 255
    4480:	90 e0       	ldi	r25, 0x00	; 0
    4482:	91 87       	std	Z+9, r25	; 0x09
    4484:	80 87       	std	Z+8, r24	; 0x08
        else
            data_frame->superFrame = htons_16(COORD_SUPERFRAME);

        data_frame->netID = 0x06;
    4486:	86 e0       	ldi	r24, 0x06	; 6
    4488:	82 87       	std	Z+10, r24	; 0x0a
        data_frame->hops = macConfig.hopsToCoord;
    448a:	53 96       	adiw	r26, 0x13	; 19
    448c:	8c 91       	ld	r24, X
    448e:	83 87       	std	Z+11, r24	; 0x0b

        // send data to radio.
        radioSendData(sizeof(ftBeacon), (u8 *)data_frame);
    4490:	6b eb       	ldi	r22, 0xBB	; 187
    4492:	7b e0       	ldi	r23, 0x0B	; 11
    4494:	8b e0       	ldi	r24, 0x0B	; 11
    4496:	0c 94 e7 1e 	jmp	0x3dce	; 0x3dce <radioSendData>

0000449a <mdr_timer>:
    @param data Pointer to the data to be sent.

    @ingroup avr6lowpan
*/
void macsixlowpanDataRequest(u16 addr, u8 len, u8 * data)
{
    449a:	6b eb       	ldi	r22, 0xBB	; 187
    449c:	7b e0       	ldi	r23, 0x0B	; 11
    449e:	80 91 ba 0b 	lds	r24, 0x0BBA	; 0x800bba <mac_buffer_tx>
    44a2:	0c 94 e7 1e 	jmp	0x3dce	; 0x3dce <radioSendData>

000044a6 <macDataRequestInt>:
    44a6:	ef 92       	push	r14
    44a8:	ff 92       	push	r15
    44aa:	0f 93       	push	r16
    44ac:	1f 93       	push	r17
    44ae:	cf 93       	push	r28
    44b0:	df 93       	push	r29
    44b2:	e0 91 49 0c 	lds	r30, 0x0C49	; 0x800c49 <macConfig+0xd>
    44b6:	f0 91 4a 0c 	lds	r31, 0x0C4A	; 0x800c4a <macConfig+0xe>
    44ba:	e8 17       	cp	r30, r24
    44bc:	f9 07       	cpc	r31, r25
    44be:	41 f0       	breq	.+16     	; 0x44d0 <macDataRequestInt+0x2a>
    44c0:	8f 3f       	cpi	r24, 0xFF	; 255
    44c2:	3f ef       	ldi	r19, 0xFF	; 255
    44c4:	93 07       	cpc	r25, r19
    44c6:	21 f0       	breq	.+8      	; 0x44d0 <macDataRequestInt+0x2a>
    44c8:	30 91 44 0c 	lds	r19, 0x0C44	; 0x800c44 <macConfig+0x8>
    44cc:	31 11       	cpse	r19, r1
    44ce:	07 c0       	rjmp	.+14     	; 0x44de <macDataRequestInt+0x38>
    44d0:	df 91       	pop	r29
    44d2:	cf 91       	pop	r28
    44d4:	1f 91       	pop	r17
    44d6:	0f 91       	pop	r16
    44d8:	ff 90       	pop	r15
    44da:	ef 90       	pop	r14
    44dc:	08 95       	ret
    44de:	12 2f       	mov	r17, r18
    44e0:	e5 2e       	mov	r14, r21
    44e2:	f4 2e       	mov	r15, r20
    44e4:	06 2f       	mov	r16, r22
    44e6:	ec 01       	movw	r28, r24
    44e8:	81 e6       	ldi	r24, 0x61	; 97
    44ea:	98 e8       	ldi	r25, 0x88	; 136
    44ec:	90 93 bc 0b 	sts	0x0BBC, r25	; 0x800bbc <mac_buffer_tx+0x2>
    44f0:	80 93 bb 0b 	sts	0x0BBB, r24	; 0x800bbb <mac_buffer_tx+0x1>
    44f4:	80 91 46 0c 	lds	r24, 0x0C46	; 0x800c46 <macConfig+0xa>
    44f8:	91 e0       	ldi	r25, 0x01	; 1
    44fa:	98 0f       	add	r25, r24
    44fc:	90 93 46 0c 	sts	0x0C46, r25	; 0x800c46 <macConfig+0xa>
    4500:	80 93 bd 0b 	sts	0x0BBD, r24	; 0x800bbd <mac_buffer_tx+0x3>
    4504:	80 91 47 0c 	lds	r24, 0x0C47	; 0x800c47 <macConfig+0xb>
    4508:	90 91 48 0c 	lds	r25, 0x0C48	; 0x800c48 <macConfig+0xc>
    450c:	90 93 bf 0b 	sts	0x0BBF, r25	; 0x800bbf <mac_buffer_tx+0x5>
    4510:	80 93 be 0b 	sts	0x0BBE, r24	; 0x800bbe <mac_buffer_tx+0x4>
    4514:	f0 93 c3 0b 	sts	0x0BC3, r31	; 0x800bc3 <mac_buffer_tx+0x9>
    4518:	e0 93 c2 0b 	sts	0x0BC2, r30	; 0x800bc2 <mac_buffer_tx+0x8>
    451c:	d0 93 c5 0b 	sts	0x0BC5, r29	; 0x800bc5 <mac_buffer_tx+0xb>
    4520:	c0 93 c4 0b 	sts	0x0BC4, r28	; 0x800bc4 <mac_buffer_tx+0xa>
    4524:	f0 93 c7 0b 	sts	0x0BC7, r31	; 0x800bc7 <mac_buffer_tx+0xd>
    4528:	e0 93 c6 0b 	sts	0x0BC6, r30	; 0x800bc6 <mac_buffer_tx+0xc>
    452c:	ce 01       	movw	r24, r28
    452e:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <macSendRoutingPacket>
    4532:	16 30       	cpi	r17, 0x06	; 6
    4534:	21 f0       	breq	.+8      	; 0x453e <macDataRequestInt+0x98>
    4536:	c0 91 4b 0c 	lds	r28, 0x0C4B	; 0x800c4b <macConfig+0xf>
    453a:	d0 91 4c 0c 	lds	r29, 0x0C4C	; 0x800c4c <macConfig+0x10>
    453e:	d0 93 c1 0b 	sts	0x0BC1, r29	; 0x800bc1 <mac_buffer_tx+0x7>
    4542:	c0 93 c0 0b 	sts	0x0BC0, r28	; 0x800bc0 <mac_buffer_tx+0x6>
    4546:	10 93 c8 0b 	sts	0x0BC8, r17	; 0x800bc8 <mac_buffer_tx+0xe>
    454a:	00 23       	and	r16, r16
    454c:	71 f0       	breq	.+28     	; 0x456a <macDataRequestInt+0xc4>
    454e:	af 2d       	mov	r26, r15
    4550:	be 2d       	mov	r27, r14
    4552:	e9 ec       	ldi	r30, 0xC9	; 201
    4554:	fb e0       	ldi	r31, 0x0B	; 11
    4556:	4f ef       	ldi	r20, 0xFF	; 255
    4558:	40 0f       	add	r20, r16
    455a:	50 e0       	ldi	r21, 0x00	; 0
    455c:	46 53       	subi	r20, 0x36	; 54
    455e:	54 4f       	sbci	r21, 0xF4	; 244
    4560:	8d 91       	ld	r24, X+
    4562:	81 93       	st	Z+, r24
    4564:	e4 17       	cp	r30, r20
    4566:	f5 07       	cpc	r31, r21
    4568:	d9 f7       	brne	.-10     	; 0x4560 <macDataRequestInt+0xba>
    456a:	80 91 49 0c 	lds	r24, 0x0C49	; 0x800c49 <macConfig+0xd>
    456e:	90 91 4a 0c 	lds	r25, 0x0C4A	; 0x800c4a <macConfig+0xe>
    4572:	c8 17       	cp	r28, r24
    4574:	d9 07       	cpc	r29, r25
    4576:	09 f4       	brne	.+2      	; 0x457a <macDataRequestInt+0xd4>
    4578:	ab cf       	rjmp	.-170    	; 0x44d0 <macDataRequestInt+0x2a>
    457a:	21 96       	adiw	r28, 0x01	; 1
    457c:	09 f4       	brne	.+2      	; 0x4580 <macDataRequestInt+0xda>
    457e:	a8 cf       	rjmp	.-176    	; 0x44d0 <macDataRequestInt+0x2a>
    4580:	6e e0       	ldi	r22, 0x0E	; 14
    4582:	60 0f       	add	r22, r16
    4584:	60 93 ba 0b 	sts	0x0BBA, r22	; 0x800bba <mac_buffer_tx>
    4588:	16 50       	subi	r17, 0x06	; 6
    458a:	12 30       	cpi	r17, 0x02	; 2
    458c:	80 f0       	brcs	.+32     	; 0x45ae <macDataRequestInt+0x108>
    458e:	87 e0       	ldi	r24, 0x07	; 7
    4590:	90 e0       	ldi	r25, 0x00	; 0
    4592:	6d e4       	ldi	r22, 0x4D	; 77
    4594:	72 e2       	ldi	r23, 0x22	; 34
    4596:	0e 94 81 27 	call	0x4f02	; 0x4f02 <macSetAlarm>
    459a:	81 e0       	ldi	r24, 0x01	; 1
    459c:	80 93 53 0c 	sts	0x0C53, r24	; 0x800c53 <macConfig+0x17>
    45a0:	df 91       	pop	r29
    45a2:	cf 91       	pop	r28
    45a4:	1f 91       	pop	r17
    45a6:	0f 91       	pop	r16
    45a8:	ff 90       	pop	r15
    45aa:	ef 90       	pop	r14
    45ac:	08 95       	ret
    45ae:	80 e0       	ldi	r24, 0x00	; 0
    45b0:	90 e0       	ldi	r25, 0x00	; 0
    45b2:	ef cf       	rjmp	.-34     	; 0x4592 <macDataRequestInt+0xec>

000045b4 <macDataRequest>:
    45b4:	21 e0       	ldi	r18, 0x01	; 1
    45b6:	0c 94 53 22 	jmp	0x44a6	; 0x44a6 <macDataRequestInt>

000045ba <macDataIndication>:
                fnDebugMsg("\r\nData indication buffer problem");
        }
    }
#endif

    switch (frame->type & 0x7f)  // Mask high bit just in case it was somehow missed
    45ba:	80 91 46 0b 	lds	r24, 0x0B46	; 0x800b46 <mac_buffer_rx+0xe>
    45be:	8f 77       	andi	r24, 0x7F	; 127
    45c0:	83 30       	cpi	r24, 0x03	; 3
    45c2:	49 f1       	breq	.+82     	; 0x4616 <macDataIndication+0x5c>
    45c4:	50 f4       	brcc	.+20     	; 0x45da <macDataIndication+0x20>
    45c6:	81 30       	cpi	r24, 0x01	; 1
    45c8:	21 f1       	breq	.+72     	; 0x4612 <macDataIndication+0x58>
    45ca:	82 30       	cpi	r24, 0x02	; 2
    45cc:	d9 f4       	brne	.+54     	; 0x4604 <macDataIndication+0x4a>
            debugMsgStrConst("\r\nAwake");
        }
        break;
    case PING_REQ_FRAME:
        // We got a ping request, let the app handle that
        appPingReq(frame->originAddr);
    45ce:	80 91 44 0b 	lds	r24, 0x0B44	; 0x800b44 <mac_buffer_rx+0xc>
    45d2:	90 91 45 0b 	lds	r25, 0x0B45	; 0x800b45 <mac_buffer_rx+0xd>
    45d6:	0c 94 cf 01 	jmp	0x39e	; 0x39e <appPingReq>
                fnDebugMsg("\r\nData indication buffer problem");
        }
    }
#endif

    switch (frame->type & 0x7f)  // Mask high bit just in case it was somehow missed
    45da:	84 30       	cpi	r24, 0x04	; 4
    45dc:	a1 f0       	breq	.+40     	; 0x4606 <macDataIndication+0x4c>
    45de:	86 30       	cpi	r24, 0x06	; 6
    45e0:	81 f4       	brne	.+32     	; 0x4602 <macDataIndication+0x48>
        break;
    case WAKE_NODE:
        // Wake up the end node.
        if (NODETYPE == ROUTER)
        {
            u8 addr = ((ftWake*)frame)->addr;
    45e2:	80 91 47 0b 	lds	r24, 0x0B47	; 0x800b47 <mac_buffer_rx+0xf>
    45e6:	90 91 48 0b 	lds	r25, 0x0B48	; 0x800b48 <mac_buffer_rx+0x10>
            // See if this is from parent or child
            if ((((ftWake*)frame)->srcAddr) == macConfig.parentShortAddress)
    45ea:	40 91 40 0b 	lds	r20, 0x0B40	; 0x800b40 <mac_buffer_rx+0x8>
    45ee:	50 91 41 0b 	lds	r21, 0x0B41	; 0x800b41 <mac_buffer_rx+0x9>
    45f2:	20 91 4b 0c 	lds	r18, 0x0C4B	; 0x800c4b <macConfig+0xf>
    45f6:	30 91 4c 0c 	lds	r19, 0x0C4C	; 0x800c4c <macConfig+0x10>
    45fa:	42 17       	cp	r20, r18
    45fc:	53 07       	cpc	r21, r19
    45fe:	89 f0       	breq	.+34     	; 0x4622 <macDataIndication+0x68>
    4600:	08 95       	ret
    4602:	08 95       	ret
    4604:	08 95       	ret
        appPingRsp(frame->originAddr);
        break;
    case DROP_CHILD_FRAME:
        // Coordinator is telling us to drop a child
        if (NODETYPE == ROUTER)
            macRemoveChild(*(u16*)(&frame->payload));
    4606:	80 91 47 0b 	lds	r24, 0x0B47	; 0x800b47 <mac_buffer_rx+0xf>
    460a:	90 91 48 0b 	lds	r25, 0x0B48	; 0x800b48 <mac_buffer_rx+0x10>
    460e:	0c 94 ff 21 	jmp	0x43fe	; 0x43fe <macRemoveChild>

    switch (frame->type & 0x7f)  // Mask high bit just in case it was somehow missed
    {
    case DATA_FRAME:
        // Plain old data, send it up the chain
        appDataIndication();
    4612:	0c 94 2e 02 	jmp	0x45c	; 0x45c <appDataIndication>
        // We got a ping request, let the app handle that
        appPingReq(frame->originAddr);
        break;
    case PING_RSP_FRAME:
        // We got a ping response, app will handle it
        appPingRsp(frame->originAddr);
    4616:	80 91 44 0b 	lds	r24, 0x0B44	; 0x800b44 <mac_buffer_rx+0xc>
    461a:	90 91 45 0b 	lds	r25, 0x0B45	; 0x800b45 <mac_buffer_rx+0xd>
    461e:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <appPingRsp>
        {
            u8 addr = ((ftWake*)frame)->addr;
            // See if this is from parent or child
            if ((((ftWake*)frame)->srcAddr) == macConfig.parentShortAddress)
                // Set the flag to wake up the end node when it sends a packet
                macWakeChildNode(addr);
    4622:	99 27       	eor	r25, r25
    4624:	0c 94 1c 22 	jmp	0x4438	; 0x4438 <macWakeChildNode>

00004628 <mp>:
    }
}

// Target function to timer, sends ping packet after a delay
void mp(void)
{
    4628:	0f 93       	push	r16
    462a:	1f 93       	push	r17
    462c:	cf 93       	push	r28
    462e:	df 93       	push	r29
    4630:	cd b7       	in	r28, 0x3d	; 61
    4632:	de b7       	in	r29, 0x3e	; 62
    4634:	60 97       	sbiw	r28, 0x10	; 16
    4636:	0f b6       	in	r0, 0x3f	; 63
    4638:	f8 94       	cli
    463a:	de bf       	out	0x3e, r29	; 62
    463c:	0f be       	out	0x3f, r0	; 63
    463e:	cd bf       	out	0x3d, r28	; 61
    ftPing frame;

    frame.fcf = htons_16(FCF_DATA);
    4640:	81 e6       	ldi	r24, 0x61	; 97
    4642:	98 e8       	ldi	r25, 0x88	; 136
    4644:	9a 83       	std	Y+2, r25	; 0x02
    4646:	89 83       	std	Y+1, r24	; 0x01
    frame.seq = macConfig.dsn++;
    4648:	0c e3       	ldi	r16, 0x3C	; 60
    464a:	1c e0       	ldi	r17, 0x0C	; 12
    464c:	f8 01       	movw	r30, r16
    464e:	82 85       	ldd	r24, Z+10	; 0x0a
    4650:	91 e0       	ldi	r25, 0x01	; 1
    4652:	98 0f       	add	r25, r24
    4654:	92 87       	std	Z+10, r25	; 0x0a
    4656:	8b 83       	std	Y+3, r24	; 0x03
    frame.panid = htons_16(macConfig.panId);
    4658:	83 85       	ldd	r24, Z+11	; 0x0b
    465a:	94 85       	ldd	r25, Z+12	; 0x0c
    465c:	9d 83       	std	Y+5, r25	; 0x05
    465e:	8c 83       	std	Y+4, r24	; 0x04
    frame.srcAddr = htons_16(macConfig.shortAddress);
    4660:	85 85       	ldd	r24, Z+13	; 0x0d
    4662:	96 85       	ldd	r25, Z+14	; 0x0e
    4664:	99 87       	std	Y+9, r25	; 0x09
    4666:	88 87       	std	Y+8, r24	; 0x08
    frame.originAddr = htons_16(macConfig.shortAddress);
    4668:	9d 87       	std	Y+13, r25	; 0x0d
    466a:	8c 87       	std	Y+12, r24	; 0x0c
    frame.finalDestAddr = htons_16(pingAddr);
    466c:	80 91 65 06 	lds	r24, 0x0665	; 0x800665 <pingAddr>
    4670:	90 91 66 06 	lds	r25, 0x0666	; 0x800666 <pingAddr+0x1>
    4674:	9b 87       	std	Y+11, r25	; 0x0b
    4676:	8a 87       	std	Y+10, r24	; 0x0a
    frame.type = pingType;
    4678:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <pingType>
    467c:	8e 87       	std	Y+14, r24	; 0x0e
    frame.rssi = radioGetSavedRssiValue();
    467e:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <radioGetSavedRssiValue>
    4682:	8f 87       	std	Y+15, r24	; 0x0f
    frame.lqi = radioGetSavedLqiValue();
    4684:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <radioGetSavedLqiValue>
    4688:	88 8b       	std	Y+16, r24	; 0x10
            return;
        }
    }
    else
        // End/router nodes
        frame.destAddr = htons_16(macConfig.parentShortAddress);
    468a:	f8 01       	movw	r30, r16
    468c:	87 85       	ldd	r24, Z+15	; 0x0f
    468e:	90 89       	ldd	r25, Z+16	; 0x10
    4690:	9f 83       	std	Y+7, r25	; 0x07
    4692:	8e 83       	std	Y+6, r24	; 0x06


    radioSendData(sizeof(ftPing), (u8*)&frame);
    4694:	be 01       	movw	r22, r28
    4696:	6f 5f       	subi	r22, 0xFF	; 255
    4698:	7f 4f       	sbci	r23, 0xFF	; 255
    469a:	80 e1       	ldi	r24, 0x10	; 16
    469c:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <radioSendData>
}
    46a0:	60 96       	adiw	r28, 0x10	; 16
    46a2:	0f b6       	in	r0, 0x3f	; 63
    46a4:	f8 94       	cli
    46a6:	de bf       	out	0x3e, r29	; 62
    46a8:	0f be       	out	0x3f, r0	; 63
    46aa:	cd bf       	out	0x3d, r28	; 61
    46ac:	df 91       	pop	r29
    46ae:	cf 91       	pop	r28
    46b0:	1f 91       	pop	r17
    46b2:	0f 91       	pop	r16
    46b4:	08 95       	ret

000046b6 <macPing>:

   @param addr Short address of node to send ping
*/
void macPing(u8 pingTypeArg, u16 addr)
{
    if (addr == macConfig.shortAddress)
    46b6:	20 91 49 0c 	lds	r18, 0x0C49	; 0x800c49 <macConfig+0xd>
    46ba:	30 91 4a 0c 	lds	r19, 0x0C4A	; 0x800c4a <macConfig+0xe>
    46be:	26 17       	cp	r18, r22
    46c0:	37 07       	cpc	r19, r23
    46c2:	21 f0       	breq	.+8      	; 0x46cc <macPing+0x16>
        // Don't send to self
        return;

    if (!macConfig.associated)
    46c4:	90 91 44 0c 	lds	r25, 0x0C44	; 0x800c44 <macConfig+0x8>
    46c8:	91 11       	cpse	r25, r1
    46ca:	01 c0       	rjmp	.+2      	; 0x46ce <macPing+0x18>
    46cc:	08 95       	ret
        // Broadcast addr
        return;

    pingAddr = addr;
    46ce:	70 93 66 06 	sts	0x0666, r23	; 0x800666 <pingAddr+0x1>
    46d2:	60 93 65 06 	sts	0x0665, r22	; 0x800665 <pingAddr>
    pingType = pingTypeArg;
    46d6:	90 e0       	ldi	r25, 0x00	; 0
    46d8:	90 93 64 06 	sts	0x0664, r25	; 0x800664 <pingType+0x1>
    46dc:	80 93 63 06 	sts	0x0663, r24	; 0x800663 <pingType>
        macConfig.busy = true;
    }
    else
    {
        // End/router nodes
        mp();
    46e0:	0e 94 14 23 	call	0x4628	; 0x4628 <mp>
        macConfig.busy = true;
    46e4:	81 e0       	ldi	r24, 0x01	; 1
    46e6:	80 93 53 0c 	sts	0x0C53, r24	; 0x800c53 <macConfig+0x17>
    46ea:	08 95       	ret

000046ec <mac_event_pending>:
	newtail = 0;

	event_queue.tail = newtail;

	return(object);
}
    46ec:	90 91 55 0c 	lds	r25, 0x0C55	; 0x800c55 <event_queue>
    46f0:	20 91 56 0c 	lds	r18, 0x0C56	; 0x800c56 <event_queue+0x1>
    46f4:	81 e0       	ldi	r24, 0x01	; 1
    46f6:	29 13       	cpse	r18, r25
    46f8:	08 95       	ret
    46fa:	80 e0       	ldi	r24, 0x00	; 0
    46fc:	08 95       	ret

000046fe <mac_put_event>:
    46fe:	cf 93       	push	r28
    4700:	df 93       	push	r29
    4702:	ec 01       	movw	r28, r24
    4704:	40 91 55 0c 	lds	r20, 0x0C55	; 0x800c55 <event_queue>
    4708:	24 2f       	mov	r18, r20
    470a:	30 e0       	ldi	r19, 0x00	; 0
    470c:	e0 91 56 0c 	lds	r30, 0x0C56	; 0x800c56 <event_queue+0x1>
    4710:	c9 01       	movw	r24, r18
    4712:	01 96       	adiw	r24, 0x01	; 1
    4714:	6e e1       	ldi	r22, 0x1E	; 30
    4716:	70 e0       	ldi	r23, 0x00	; 0
    4718:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <__divmodhi4>
    471c:	6e 2f       	mov	r22, r30
    471e:	70 e0       	ldi	r23, 0x00	; 0
    4720:	86 17       	cp	r24, r22
    4722:	97 07       	cpc	r25, r23
    4724:	99 f0       	breq	.+38     	; 0x474c <mac_put_event+0x4e>
    4726:	f9 01       	movw	r30, r18
    4728:	ee 0f       	add	r30, r30
    472a:	ff 1f       	adc	r31, r31
    472c:	2e 0f       	add	r18, r30
    472e:	3f 1f       	adc	r19, r31
    4730:	f9 01       	movw	r30, r18
    4732:	eb 5a       	subi	r30, 0xAB	; 171
    4734:	f3 4f       	sbci	r31, 0xF3	; 243
    4736:	88 81       	ld	r24, Y
    4738:	99 81       	ldd	r25, Y+1	; 0x01
    473a:	aa 81       	ldd	r26, Y+2	; 0x02
    473c:	82 83       	std	Z+2, r24	; 0x02
    473e:	93 83       	std	Z+3, r25	; 0x03
    4740:	a4 83       	std	Z+4, r26	; 0x04
    4742:	4f 5f       	subi	r20, 0xFF	; 255
    4744:	4e 31       	cpi	r20, 0x1E	; 30
    4746:	28 f4       	brcc	.+10     	; 0x4752 <mac_put_event+0x54>
    4748:	40 93 55 0c 	sts	0x0C55, r20	; 0x800c55 <event_queue>
    474c:	df 91       	pop	r29
    474e:	cf 91       	pop	r28
    4750:	08 95       	ret
    4752:	40 e0       	ldi	r20, 0x00	; 0
    4754:	f9 cf       	rjmp	.-14     	; 0x4748 <mac_put_event+0x4a>

00004756 <macTask>:
"forever" loop or by an OS task or thread.  This function processes
interrupt events that are stored in the event queue by the radio or
timer.
*/
void macTask(void)
{
    4756:	1f 93       	push	r17
    4758:	cf 93       	push	r28
    475a:	df 93       	push	r29
    475c:	1f 92       	push	r1
    475e:	cd b7       	in	r28, 0x3d	; 61
    4760:	de b7       	in	r29, 0x3e	; 62
				//   if (*((u16*)(mac_buffer_rx+1)) == FCF_ASSOC_RESP_DIRECT) // Direct to MAC Addr?
				if ((mac_buffer_rx[2] == (htons_16(FCF_ASSOC_RESP_DIRECT) >> 8)) &&
				(mac_buffer_rx[1] == (htons_16(FCF_ASSOC_RESP_DIRECT) & 0xff)))
				{
					// this is a new node, do the association thing
					macConfig.associated = true;
    4762:	11 e0       	ldi	r17, 0x01	; 1

@return True if there is a pending event, else false.
*/
u8 mac_event_pending(void)
{
	u8 head = event_queue.head;
    4764:	90 91 55 0c 	lds	r25, 0x0C55	; 0x800c55 <event_queue>
	return (head != event_queue.tail);
    4768:	80 91 56 0c 	lds	r24, 0x0C56	; 0x800c56 <event_queue+0x1>
void macTask(void)
{
	event_object_t *event;

	event = 0;
	while(mac_event_pending())
    476c:	98 17       	cp	r25, r24
    476e:	99 f1       	breq	.+102    	; 0x47d6 <macTask+0x80>
event_object_t * mac_get_event(void)
{
	event_object_t *object = NULL;
	volatile u8 newtail;

	newtail = event_queue.tail;
    4770:	80 91 56 0c 	lds	r24, 0x0C56	; 0x800c56 <event_queue+0x1>
    4774:	89 83       	std	Y+1, r24	; 0x01

	object = &(event_queue.event_object[newtail]);
    4776:	29 81       	ldd	r18, Y+1	; 0x01
    4778:	30 e0       	ldi	r19, 0x00	; 0

	// calculate new tail
	newtail++;
    477a:	89 81       	ldd	r24, Y+1	; 0x01
    477c:	8f 5f       	subi	r24, 0xFF	; 255
    477e:	89 83       	std	Y+1, r24	; 0x01
	if (newtail >= MAX_EVENTS)
    4780:	89 81       	ldd	r24, Y+1	; 0x01
    4782:	8e 31       	cpi	r24, 0x1E	; 30
    4784:	08 f0       	brcs	.+2      	; 0x4788 <macTask+0x32>
	newtail = 0;
    4786:	19 82       	std	Y+1, r1	; 0x01

	event_queue.tail = newtail;
    4788:	89 81       	ldd	r24, Y+1	; 0x01
    478a:	80 93 56 0c 	sts	0x0C56, r24	; 0x800c56 <event_queue+0x1>

	event = 0;
	while(mac_event_pending())
	{
		event = mac_get_event();
		switch (event->event)
    478e:	f9 01       	movw	r30, r18
    4790:	ee 0f       	add	r30, r30
    4792:	ff 1f       	adc	r31, r31
    4794:	e2 0f       	add	r30, r18
    4796:	f3 1f       	adc	r31, r19
    4798:	eb 5a       	subi	r30, 0xAB	; 171
    479a:	f3 4f       	sbci	r31, 0xF3	; 243
    479c:	e2 81       	ldd	r30, Z+2	; 0x02
    479e:	8e 2f       	mov	r24, r30
    47a0:	90 e0       	ldi	r25, 0x00	; 0
    47a2:	fc 01       	movw	r30, r24
    47a4:	70 97       	sbiw	r30, 0x10	; 16
    47a6:	ea 30       	cpi	r30, 0x0A	; 10
    47a8:	f1 05       	cpc	r31, r1
    47aa:	e0 f6       	brcc	.-72     	; 0x4764 <macTask+0xe>
    47ac:	e4 52       	subi	r30, 0x24	; 36
    47ae:	ff 4f       	sbci	r31, 0xFF	; 255
    47b0:	0c 94 17 30 	jmp	0x602e	; 0x602e <__tablejump2__>
			case MAC_EVENT_ASSOCIATION_RESPONSE:
			// End device has received this response.
			if (NODETYPE != COORD)
			{
				//   if (*((u16*)(mac_buffer_rx+1)) == FCF_ASSOC_RESP_DIRECT) // Direct to MAC Addr?
				if ((mac_buffer_rx[2] == (htons_16(FCF_ASSOC_RESP_DIRECT) >> 8)) &&
    47b4:	80 91 3a 0b 	lds	r24, 0x0B3A	; 0x800b3a <mac_buffer_rx+0x2>
    47b8:	8c 38       	cpi	r24, 0x8C	; 140
    47ba:	09 f4       	brne	.+2      	; 0x47be <macTask+0x68>
    47bc:	63 c0       	rjmp	.+198    	; 0x4884 <macTask+0x12e>
					macAssociationConfirm();
				}
				else
				{
					// we are indirect, so just send this packet along.
					if (NODETYPE == ROUTER && macConfig.associated)
    47be:	80 91 44 0c 	lds	r24, 0x0C44	; 0x800c44 <macConfig+0x8>
    47c2:	88 23       	and	r24, r24
    47c4:	79 f2       	breq	.-98     	; 0x4764 <macTask+0xe>
						frame->srcAddr = ntohs_16(frame->srcAddr);
						frame->parentAddr = ntohs_16(frame->parentAddr);
						frame->shortAddr = ntohs_16(frame->shortAddr);
						frame->macAddr = ntohs_64(frame->macAddr);
						// Route the packet
						macRouteAssociateResponse();
    47c6:	0e 94 ad 24 	call	0x495a	; 0x495a <macRouteAssociateResponse>

@return True if there is a pending event, else false.
*/
u8 mac_event_pending(void)
{
	u8 head = event_queue.head;
    47ca:	90 91 55 0c 	lds	r25, 0x0C55	; 0x800c55 <event_queue>
	return (head != event_queue.tail);
    47ce:	80 91 56 0c 	lds	r24, 0x0C56	; 0x800c56 <event_queue+0x1>
void macTask(void)
{
	event_object_t *event;

	event = 0;
	while(mac_event_pending())
    47d2:	98 13       	cpse	r25, r24
    47d4:	cd cf       	rjmp	.-102    	; 0x4770 <macTask+0x1a>
			break;
			default:
			break;
		}
	}
}
    47d6:	0f 90       	pop	r0
    47d8:	df 91       	pop	r29
    47da:	cf 91       	pop	r28
    47dc:	1f 91       	pop	r17
    47de:	08 95       	ret
				break;
			}
			if (NODETYPE == COORD)
			// Pan Coord has received this request.
			macAssociationResponse();
			if (NODETYPE == ROUTER && macConfig.associated)
    47e0:	80 91 44 0c 	lds	r24, 0x0C44	; 0x800c44 <macConfig+0x8>
    47e4:	88 23       	and	r24, r24
    47e6:	09 f4       	brne	.+2      	; 0x47ea <macTask+0x94>
    47e8:	bd cf       	rjmp	.-134    	; 0x4764 <macTask+0xe>
			{
				// Send this packet along to parent
				macRouteAssociateRequest();
    47ea:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <macRouteAssociateRequest>
    47ee:	ba cf       	rjmp	.-140    	; 0x4764 <macTask+0xe>
			break;
			// ETG #if __AVR__ || __AVR32__
			#if __AVR__ || __AVR32__
			case MAC_EVENT_TIMER:
			// Timer has expired, just callback the stored function pointer
			((void (*)(void))event->data)();  // cast data to function pointer
    47f0:	2f 5f       	subi	r18, 0xFF	; 255
    47f2:	3f 4f       	sbci	r19, 0xFF	; 255
    47f4:	f9 01       	movw	r30, r18
    47f6:	ee 0f       	add	r30, r30
    47f8:	ff 1f       	adc	r31, r31
    47fa:	2e 0f       	add	r18, r30
    47fc:	3f 1f       	adc	r19, r31
    47fe:	f9 01       	movw	r30, r18
    4800:	eb 5a       	subi	r30, 0xAB	; 171
    4802:	f3 4f       	sbci	r31, 0xF3	; 243
    4804:	01 90       	ld	r0, Z+
    4806:	f0 81       	ld	r31, Z
    4808:	e0 2d       	mov	r30, r0
    480a:	09 95       	icall
			break;
    480c:	ab cf       	rjmp	.-170    	; 0x4764 <macTask+0xe>
			{
				ftBeaconReq *frame = (ftBeaconReq*)(mac_buffer_rx+1);
				frame->panid = ntohs_16(frame->panid);
				
				// Generate and send the beacon.
				if (NODETYPE == ROUTER && macConfig.associated)
    480e:	80 91 44 0c 	lds	r24, 0x0C44	; 0x800c44 <macConfig+0x8>
    4812:	88 23       	and	r24, r24
    4814:	09 f4       	brne	.+2      	; 0x4818 <macTask+0xc2>
    4816:	a6 cf       	rjmp	.-180    	; 0x4764 <macTask+0xe>
				macSetAlarm(1, sendBeaconFrame);
    4818:	62 e2       	ldi	r22, 0x22	; 34
    481a:	72 e2       	ldi	r23, 0x22	; 34
    481c:	81 e0       	ldi	r24, 0x01	; 1
    481e:	90 e0       	ldi	r25, 0x00	; 0
    4820:	0e 94 81 27 	call	0x4f02	; 0x4f02 <macSetAlarm>
    4824:	9f cf       	rjmp	.-194    	; 0x4764 <macTask+0xe>
		{
			case MAC_EVENT_SCAN:
			// A beacon has been received as a result of an active scan.
			// Record the pan descriptor and store it until the scan has
			// completed.
			if (!macConfig.associated)
    4826:	80 91 44 0c 	lds	r24, 0x0C44	; 0x800c44 <macConfig+0x8>
    482a:	81 11       	cpse	r24, r1
    482c:	9b cf       	rjmp	.-202    	; 0x4764 <macTask+0xe>
			mac_logPanDescriptors();
    482e:	0e 94 93 26 	call	0x4d26	; 0x4d26 <mac_logPanDescriptors>
    4832:	98 cf       	rjmp	.-208    	; 0x4764 <macTask+0xe>
			if (NODETYPE == ROUTER && macConfig.associated)
			macForwardRoutingPacket();
			break;
			case MAC_EVENT_ACCESS:
			// Channel access failure
			appPacketSendAccessFail();
    4834:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <appPacketSendAccessFail>
			break;
    4838:	95 cf       	rjmp	.-214    	; 0x4764 <macTask+0xe>
			case MAC_EVENT_NACK:
			// Packet failed to be sent, alert application
			appPacketSendFailed();
    483a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <appPacketSendFailed>
			break;
    483e:	92 cf       	rjmp	.-220    	; 0x4764 <macTask+0xe>
			case MAC_EVENT_ACK:
			// Packet got through, alert application
			appPacketSendSucceed();
    4840:	0e 94 db 01 	call	0x3b6	; 0x3b6 <appPacketSendSucceed>
			break;
    4844:	8f cf       	rjmp	.-226    	; 0x4764 <macTask+0xe>
			// Timer has expired, just callback the stored function pointer
			((void (*)(void))event->data)();  // cast data to function pointer
			break;
			#endif
			case MAC_EVENT_RX:
			if (macConfig.associated)
    4846:	80 91 44 0c 	lds	r24, 0x0C44	; 0x800c44 <macConfig+0x8>
    484a:	88 23       	and	r24, r24
    484c:	09 f4       	brne	.+2      	; 0x4850 <macTask+0xfa>
    484e:	8a cf       	rjmp	.-236    	; 0x4764 <macTask+0xe>
				frame->finalDestAddr = ntohs_16(frame->finalDestAddr);
				frame->originAddr = ntohs_16(frame->originAddr);

				// Wake up
				if (NODETYPE != ENDDEVICE)
				macChildIsAwake((ftData*)(mac_buffer_rx+1));
    4850:	89 e3       	ldi	r24, 0x39	; 57
    4852:	9b e0       	ldi	r25, 0x0B	; 11
    4854:	0e 94 1d 22 	call	0x443a	; 0x443a <macChildIsAwake>
				// Received a data frame, process it or route it
				if (((ftData*)(mac_buffer_rx+1))->finalDestAddr == macConfig.shortAddress)
    4858:	20 91 42 0b 	lds	r18, 0x0B42	; 0x800b42 <mac_buffer_rx+0xa>
    485c:	30 91 43 0b 	lds	r19, 0x0B43	; 0x800b43 <mac_buffer_rx+0xb>
    4860:	80 91 49 0c 	lds	r24, 0x0C49	; 0x800c49 <macConfig+0xd>
    4864:	90 91 4a 0c 	lds	r25, 0x0C4A	; 0x800c4a <macConfig+0xe>
    4868:	28 17       	cp	r18, r24
    486a:	39 07       	cpc	r19, r25
    486c:	39 f1       	breq	.+78     	; 0x48bc <macTask+0x166>
				// This data frame is for this node
				macDataIndication();
				else
				// Route the packet up/down stream
				if (NODETYPE != ENDDEVICE)
				macRouteData();
    486e:	0e 94 f4 25 	call	0x4be8	; 0x4be8 <macRouteData>
    4872:	78 cf       	rjmp	.-272    	; 0x4764 <macTask+0xe>
				}
			}
			break;
			case MAC_EVENT_ROUTE:
			// Routing packet received, forward it
			if (NODETYPE == ROUTER && macConfig.associated)
    4874:	80 91 44 0c 	lds	r24, 0x0C44	; 0x800c44 <macConfig+0x8>
    4878:	88 23       	and	r24, r24
    487a:	09 f4       	brne	.+2      	; 0x487e <macTask+0x128>
    487c:	73 cf       	rjmp	.-282    	; 0x4764 <macTask+0xe>
			macForwardRoutingPacket();
    487e:	0e 94 61 24 	call	0x48c2	; 0x48c2 <macForwardRoutingPacket>
    4882:	70 cf       	rjmp	.-288    	; 0x4764 <macTask+0xe>
			case MAC_EVENT_ASSOCIATION_RESPONSE:
			// End device has received this response.
			if (NODETYPE != COORD)
			{
				//   if (*((u16*)(mac_buffer_rx+1)) == FCF_ASSOC_RESP_DIRECT) // Direct to MAC Addr?
				if ((mac_buffer_rx[2] == (htons_16(FCF_ASSOC_RESP_DIRECT) >> 8)) &&
    4884:	80 91 39 0b 	lds	r24, 0x0B39	; 0x800b39 <mac_buffer_rx+0x1>
    4888:	83 36       	cpi	r24, 0x63	; 99
    488a:	09 f0       	breq	.+2      	; 0x488e <macTask+0x138>
    488c:	98 cf       	rjmp	.-208    	; 0x47be <macTask+0x68>
				(mac_buffer_rx[1] == (htons_16(FCF_ASSOC_RESP_DIRECT) & 0xff)))
				{
					// this is a new node, do the association thing
					macConfig.associated = true;
    488e:	10 93 44 0c 	sts	0x0C44, r17	; 0x800c44 <macConfig+0x8>
					macConfig.parentShortAddress = ntohs_16(((ftAssocRespDirect*)(mac_buffer_rx+1))->srcAddr);
    4892:	80 91 46 0b 	lds	r24, 0x0B46	; 0x800b46 <mac_buffer_rx+0xe>
    4896:	90 91 47 0b 	lds	r25, 0x0B47	; 0x800b47 <mac_buffer_rx+0xf>
    489a:	90 93 4c 0c 	sts	0x0C4C, r25	; 0x800c4c <macConfig+0x10>
    489e:	80 93 4b 0c 	sts	0x0C4B, r24	; 0x800c4b <macConfig+0xf>
					macConfig.shortAddress = ntohs_16(((ftAssocRespDirect*)(mac_buffer_rx+1))->shortAddr);
    48a2:	80 91 49 0b 	lds	r24, 0x0B49	; 0x800b49 <mac_buffer_rx+0x11>
    48a6:	90 91 4a 0b 	lds	r25, 0x0B4A	; 0x800b4a <mac_buffer_rx+0x12>
    48aa:	90 93 4a 0c 	sts	0x0C4A, r25	; 0x800c4a <macConfig+0xe>
    48ae:	80 93 49 0c 	sts	0x0C49, r24	; 0x800c49 <macConfig+0xd>

					radioSetShortAddress(macConfig.shortAddress);
    48b2:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <radioSetShortAddress>
					macAssociationConfirm();
    48b6:	0e 94 4d 21 	call	0x429a	; 0x429a <macAssociationConfirm>
    48ba:	54 cf       	rjmp	.-344    	; 0x4764 <macTask+0xe>
				if (NODETYPE != ENDDEVICE)
				macChildIsAwake((ftData*)(mac_buffer_rx+1));
				// Received a data frame, process it or route it
				if (((ftData*)(mac_buffer_rx+1))->finalDestAddr == macConfig.shortAddress)
				// This data frame is for this node
				macDataIndication();
    48bc:	0e 94 dd 22 	call	0x45ba	; 0x45ba <macDataIndication>
    48c0:	51 cf       	rjmp	.-350    	; 0x4764 <macTask+0xe>

000048c2 <macForwardRoutingPacket>:
        }
    }
}

void mrd(void)
{
    48c2:	80 91 38 0b 	lds	r24, 0x0B38	; 0x800b38 <mac_buffer_rx>
    48c6:	92 e8       	ldi	r25, 0x82	; 130
    48c8:	e8 e3       	ldi	r30, 0x38	; 56
    48ca:	fb e0       	ldi	r31, 0x0B	; 11
    48cc:	aa eb       	ldi	r26, 0xBA	; 186
    48ce:	bb e0       	ldi	r27, 0x0B	; 11
    48d0:	01 90       	ld	r0, Z+
    48d2:	0d 92       	st	X+, r0
    48d4:	9a 95       	dec	r25
    48d6:	e1 f7       	brne	.-8      	; 0x48d0 <macForwardRoutingPacket+0xe>
    48d8:	90 91 44 0c 	lds	r25, 0x0C44	; 0x800c44 <macConfig+0x8>
    48dc:	99 23       	and	r25, r25
    48de:	e1 f1       	breq	.+120    	; 0x4958 <macForwardRoutingPacket+0x96>
    48e0:	8c 50       	subi	r24, 0x0C	; 12
    48e2:	86 95       	lsr	r24
    48e4:	e8 2f       	mov	r30, r24
    48e6:	f0 e0       	ldi	r31, 0x00	; 0
    48e8:	ee 0f       	add	r30, r30
    48ea:	ff 1f       	adc	r31, r31
    48ec:	ed 53       	subi	r30, 0x3D	; 61
    48ee:	f4 4f       	sbci	r31, 0xF4	; 244
    48f0:	20 81       	ld	r18, Z
    48f2:	31 81       	ldd	r19, Z+1	; 0x01
    48f4:	30 93 4e 0c 	sts	0x0C4E, r19	; 0x800c4e <macConfig+0x12>
    48f8:	20 93 4d 0c 	sts	0x0C4D, r18	; 0x800c4d <macConfig+0x11>
    48fc:	82 30       	cpi	r24, 0x02	; 2
    48fe:	60 f1       	brcs	.+88     	; 0x4958 <macForwardRoutingPacket+0x96>
    4900:	81 50       	subi	r24, 0x01	; 1
    4902:	23 e6       	ldi	r18, 0x63	; 99
    4904:	38 e8       	ldi	r19, 0x88	; 136
    4906:	30 93 bc 0b 	sts	0x0BBC, r19	; 0x800bbc <mac_buffer_tx+0x2>
    490a:	20 93 bb 0b 	sts	0x0BBB, r18	; 0x800bbb <mac_buffer_tx+0x1>
    490e:	90 91 46 0c 	lds	r25, 0x0C46	; 0x800c46 <macConfig+0xa>
    4912:	21 e0       	ldi	r18, 0x01	; 1
    4914:	29 0f       	add	r18, r25
    4916:	20 93 46 0c 	sts	0x0C46, r18	; 0x800c46 <macConfig+0xa>
    491a:	90 93 bd 0b 	sts	0x0BBD, r25	; 0x800bbd <mac_buffer_tx+0x3>
    491e:	90 e0       	ldi	r25, 0x00	; 0
    4920:	fc 01       	movw	r30, r24
    4922:	ee 0f       	add	r30, r30
    4924:	ff 1f       	adc	r31, r31
    4926:	eb 53       	subi	r30, 0x3B	; 59
    4928:	f4 4f       	sbci	r31, 0xF4	; 244
    492a:	20 81       	ld	r18, Z
    492c:	31 81       	ldd	r19, Z+1	; 0x01
    492e:	30 93 c1 0b 	sts	0x0BC1, r19	; 0x800bc1 <mac_buffer_tx+0x7>
    4932:	20 93 c0 0b 	sts	0x0BC0, r18	; 0x800bc0 <mac_buffer_tx+0x6>
    4936:	20 91 49 0c 	lds	r18, 0x0C49	; 0x800c49 <macConfig+0xd>
    493a:	30 91 4a 0c 	lds	r19, 0x0C4A	; 0x800c4a <macConfig+0xe>
    493e:	30 93 c3 0b 	sts	0x0BC3, r19	; 0x800bc3 <mac_buffer_tx+0x9>
    4942:	20 93 c2 0b 	sts	0x0BC2, r18	; 0x800bc2 <mac_buffer_tx+0x8>
    4946:	9b eb       	ldi	r25, 0xBB	; 187
    4948:	90 93 c4 0b 	sts	0x0BC4, r25	; 0x800bc4 <mac_buffer_tx+0xa>
    494c:	8b 5f       	subi	r24, 0xFB	; 251
    494e:	6b eb       	ldi	r22, 0xBB	; 187
    4950:	7b e0       	ldi	r23, 0x0B	; 11
    4952:	88 0f       	add	r24, r24
    4954:	0c 94 e7 1e 	jmp	0x3dce	; 0x3dce <radioSendData>
    4958:	08 95       	ret

0000495a <macRouteAssociateResponse>:
    495a:	80 91 44 0c 	lds	r24, 0x0C44	; 0x800c44 <macConfig+0x8>
    495e:	88 23       	and	r24, r24
    4960:	e9 f1       	breq	.+122    	; 0x49dc <macRouteAssociateResponse+0x82>
    4962:	20 91 43 0b 	lds	r18, 0x0B43	; 0x800b43 <mac_buffer_rx+0xb>
    4966:	30 91 44 0b 	lds	r19, 0x0B44	; 0x800b44 <mac_buffer_rx+0xc>
    496a:	80 91 49 0c 	lds	r24, 0x0C49	; 0x800c49 <macConfig+0xd>
    496e:	90 91 4a 0c 	lds	r25, 0x0C4A	; 0x800c4a <macConfig+0xe>
    4972:	28 17       	cp	r18, r24
    4974:	39 07       	cpc	r19, r25
    4976:	99 f1       	breq	.+102    	; 0x49de <macRouteAssociateResponse+0x84>
    4978:	22 e8       	ldi	r18, 0x82	; 130
    497a:	e8 e3       	ldi	r30, 0x38	; 56
    497c:	fb e0       	ldi	r31, 0x0B	; 11
    497e:	aa eb       	ldi	r26, 0xBA	; 186
    4980:	bb e0       	ldi	r27, 0x0B	; 11
    4982:	01 90       	ld	r0, Z+
    4984:	0d 92       	st	X+, r0
    4986:	2a 95       	dec	r18
    4988:	e1 f7       	brne	.-8      	; 0x4982 <macRouteAssociateResponse+0x28>
    498a:	20 91 46 0c 	lds	r18, 0x0C46	; 0x800c46 <macConfig+0xa>
    498e:	31 e0       	ldi	r19, 0x01	; 1
    4990:	32 0f       	add	r19, r18
    4992:	30 93 46 0c 	sts	0x0C46, r19	; 0x800c46 <macConfig+0xa>
    4996:	20 93 bd 0b 	sts	0x0BBD, r18	; 0x800bbd <mac_buffer_tx+0x3>
    499a:	20 91 4d 0c 	lds	r18, 0x0C4D	; 0x800c4d <macConfig+0x11>
    499e:	30 91 4e 0c 	lds	r19, 0x0C4E	; 0x800c4e <macConfig+0x12>
    49a2:	30 93 c1 0b 	sts	0x0BC1, r19	; 0x800bc1 <mac_buffer_tx+0x7>
    49a6:	20 93 c0 0b 	sts	0x0BC0, r18	; 0x800bc0 <mac_buffer_tx+0x6>
    49aa:	90 93 c3 0b 	sts	0x0BC3, r25	; 0x800bc3 <mac_buffer_tx+0x9>
    49ae:	80 93 c2 0b 	sts	0x0BC2, r24	; 0x800bc2 <mac_buffer_tx+0x8>
    49b2:	80 91 c5 0b 	lds	r24, 0x0BC5	; 0x800bc5 <mac_buffer_tx+0xb>
    49b6:	90 91 c6 0b 	lds	r25, 0x0BC6	; 0x800bc6 <mac_buffer_tx+0xc>
    49ba:	0e 94 a9 21 	call	0x4352	; 0x4352 <macIsChild>
    49be:	88 23       	and	r24, r24
    49c0:	41 f0       	breq	.+16     	; 0x49d2 <macRouteAssociateResponse+0x78>
    49c2:	80 91 c5 0b 	lds	r24, 0x0BC5	; 0x800bc5 <mac_buffer_tx+0xb>
    49c6:	90 91 c6 0b 	lds	r25, 0x0BC6	; 0x800bc6 <mac_buffer_tx+0xc>
    49ca:	90 93 c1 0b 	sts	0x0BC1, r25	; 0x800bc1 <mac_buffer_tx+0x7>
    49ce:	80 93 c0 0b 	sts	0x0BC0, r24	; 0x800bc0 <mac_buffer_tx+0x6>
    49d2:	6b eb       	ldi	r22, 0xBB	; 187
    49d4:	7b e0       	ldi	r23, 0x0B	; 11
    49d6:	86 e1       	ldi	r24, 0x16	; 22
    49d8:	0c 94 e7 1e 	jmp	0x3dce	; 0x3dce <radioSendData>
    49dc:	08 95       	ret
    49de:	83 e6       	ldi	r24, 0x63	; 99
    49e0:	9c e8       	ldi	r25, 0x8C	; 140
    49e2:	90 93 bb 0b 	sts	0x0BBB, r25	; 0x800bbb <mac_buffer_tx+0x1>
    49e6:	80 93 ba 0b 	sts	0x0BBA, r24	; 0x800bba <mac_buffer_tx>
    49ea:	80 91 46 0c 	lds	r24, 0x0C46	; 0x800c46 <macConfig+0xa>
    49ee:	91 e0       	ldi	r25, 0x01	; 1
    49f0:	98 0f       	add	r25, r24
    49f2:	90 93 46 0c 	sts	0x0C46, r25	; 0x800c46 <macConfig+0xa>
    49f6:	80 93 bc 0b 	sts	0x0BBC, r24	; 0x800bbc <mac_buffer_tx+0x2>
    49fa:	80 91 47 0c 	lds	r24, 0x0C47	; 0x800c47 <macConfig+0xb>
    49fe:	90 91 48 0c 	lds	r25, 0x0C48	; 0x800c48 <macConfig+0xc>
    4a02:	90 93 be 0b 	sts	0x0BBE, r25	; 0x800bbe <mac_buffer_tx+0x4>
    4a06:	80 93 bd 0b 	sts	0x0BBD, r24	; 0x800bbd <mac_buffer_tx+0x3>
    4a0a:	80 91 45 0b 	lds	r24, 0x0B45	; 0x800b45 <mac_buffer_rx+0xd>
    4a0e:	80 93 bf 0b 	sts	0x0BBF, r24	; 0x800bbf <mac_buffer_tx+0x5>
    4a12:	80 91 46 0b 	lds	r24, 0x0B46	; 0x800b46 <mac_buffer_rx+0xe>
    4a16:	80 93 c0 0b 	sts	0x0BC0, r24	; 0x800bc0 <mac_buffer_tx+0x6>
    4a1a:	80 91 47 0b 	lds	r24, 0x0B47	; 0x800b47 <mac_buffer_rx+0xf>
    4a1e:	80 93 c1 0b 	sts	0x0BC1, r24	; 0x800bc1 <mac_buffer_tx+0x7>
    4a22:	80 91 48 0b 	lds	r24, 0x0B48	; 0x800b48 <mac_buffer_rx+0x10>
    4a26:	80 93 c2 0b 	sts	0x0BC2, r24	; 0x800bc2 <mac_buffer_tx+0x8>
    4a2a:	80 91 49 0b 	lds	r24, 0x0B49	; 0x800b49 <mac_buffer_rx+0x11>
    4a2e:	80 93 c3 0b 	sts	0x0BC3, r24	; 0x800bc3 <mac_buffer_tx+0x9>
    4a32:	80 91 4a 0b 	lds	r24, 0x0B4A	; 0x800b4a <mac_buffer_rx+0x12>
    4a36:	80 93 c4 0b 	sts	0x0BC4, r24	; 0x800bc4 <mac_buffer_tx+0xa>
    4a3a:	80 91 4b 0b 	lds	r24, 0x0B4B	; 0x800b4b <mac_buffer_rx+0x13>
    4a3e:	80 93 c5 0b 	sts	0x0BC5, r24	; 0x800bc5 <mac_buffer_tx+0xb>
    4a42:	80 91 4c 0b 	lds	r24, 0x0B4C	; 0x800b4c <mac_buffer_rx+0x14>
    4a46:	80 93 c6 0b 	sts	0x0BC6, r24	; 0x800bc6 <mac_buffer_tx+0xc>
    4a4a:	30 93 c8 0b 	sts	0x0BC8, r19	; 0x800bc8 <mac_buffer_tx+0xe>
    4a4e:	20 93 c7 0b 	sts	0x0BC7, r18	; 0x800bc7 <mac_buffer_tx+0xd>
    4a52:	82 e0       	ldi	r24, 0x02	; 2
    4a54:	80 93 c9 0b 	sts	0x0BC9, r24	; 0x800bc9 <mac_buffer_tx+0xf>
    4a58:	80 91 4d 0b 	lds	r24, 0x0B4D	; 0x800b4d <mac_buffer_rx+0x15>
    4a5c:	90 91 4e 0b 	lds	r25, 0x0B4E	; 0x800b4e <mac_buffer_rx+0x16>
    4a60:	90 93 cb 0b 	sts	0x0BCB, r25	; 0x800bcb <mac_buffer_tx+0x11>
    4a64:	80 93 ca 0b 	sts	0x0BCA, r24	; 0x800bca <mac_buffer_tx+0x10>
    4a68:	0e 94 bc 21 	call	0x4378	; 0x4378 <macAddChild>
    4a6c:	6a eb       	ldi	r22, 0xBA	; 186
    4a6e:	7b e0       	ldi	r23, 0x0B	; 11
    4a70:	82 e1       	ldi	r24, 0x12	; 18
    4a72:	0c 94 e7 1e 	jmp	0x3dce	; 0x3dce <radioSendData>

00004a76 <macRouteAssociateRequest>:
    4a76:	cf 93       	push	r28
    4a78:	df 93       	push	r29
    4a7a:	cd b7       	in	r28, 0x3d	; 61
    4a7c:	de b7       	in	r29, 0x3e	; 62
    4a7e:	65 97       	sbiw	r28, 0x15	; 21
    4a80:	0f b6       	in	r0, 0x3f	; 63
    4a82:	f8 94       	cli
    4a84:	de bf       	out	0x3e, r29	; 62
    4a86:	0f be       	out	0x3f, r0	; 63
    4a88:	cd bf       	out	0x3d, r28	; 61
    4a8a:	80 91 3a 0b 	lds	r24, 0x0B3A	; 0x800b3a <mac_buffer_rx+0x2>
    4a8e:	88 3c       	cpi	r24, 0xC8	; 200
    4a90:	09 f4       	brne	.+2      	; 0x4a94 <macRouteAssociateRequest+0x1e>
    4a92:	63 c0       	rjmp	.+198    	; 0x4b5a <macRouteAssociateRequest+0xe4>
    4a94:	83 e6       	ldi	r24, 0x63	; 99
    4a96:	98 e8       	ldi	r25, 0x88	; 136
    4a98:	90 93 bb 0b 	sts	0x0BBB, r25	; 0x800bbb <mac_buffer_tx+0x1>
    4a9c:	80 93 ba 0b 	sts	0x0BBA, r24	; 0x800bba <mac_buffer_tx>
    4aa0:	80 91 46 0c 	lds	r24, 0x0C46	; 0x800c46 <macConfig+0xa>
    4aa4:	91 e0       	ldi	r25, 0x01	; 1
    4aa6:	98 0f       	add	r25, r24
    4aa8:	90 93 46 0c 	sts	0x0C46, r25	; 0x800c46 <macConfig+0xa>
    4aac:	80 93 bc 0b 	sts	0x0BBC, r24	; 0x800bbc <mac_buffer_tx+0x2>
    4ab0:	80 91 47 0c 	lds	r24, 0x0C47	; 0x800c47 <macConfig+0xb>
    4ab4:	90 91 48 0c 	lds	r25, 0x0C48	; 0x800c48 <macConfig+0xc>
    4ab8:	90 93 be 0b 	sts	0x0BBE, r25	; 0x800bbe <mac_buffer_tx+0x4>
    4abc:	80 93 bd 0b 	sts	0x0BBD, r24	; 0x800bbd <mac_buffer_tx+0x3>
    4ac0:	80 91 4b 0c 	lds	r24, 0x0C4B	; 0x800c4b <macConfig+0xf>
    4ac4:	90 91 4c 0c 	lds	r25, 0x0C4C	; 0x800c4c <macConfig+0x10>
    4ac8:	90 93 c0 0b 	sts	0x0BC0, r25	; 0x800bc0 <mac_buffer_tx+0x6>
    4acc:	80 93 bf 0b 	sts	0x0BBF, r24	; 0x800bbf <mac_buffer_tx+0x5>
    4ad0:	80 91 49 0c 	lds	r24, 0x0C49	; 0x800c49 <macConfig+0xd>
    4ad4:	90 91 4a 0c 	lds	r25, 0x0C4A	; 0x800c4a <macConfig+0xe>
    4ad8:	90 93 c2 0b 	sts	0x0BC2, r25	; 0x800bc2 <mac_buffer_tx+0x8>
    4adc:	80 93 c1 0b 	sts	0x0BC1, r24	; 0x800bc1 <mac_buffer_tx+0x7>
    4ae0:	81 e0       	ldi	r24, 0x01	; 1
    4ae2:	80 93 c3 0b 	sts	0x0BC3, r24	; 0x800bc3 <mac_buffer_tx+0x9>
    4ae6:	80 91 43 0b 	lds	r24, 0x0B43	; 0x800b43 <mac_buffer_rx+0xb>
    4aea:	90 91 44 0b 	lds	r25, 0x0B44	; 0x800b44 <mac_buffer_rx+0xc>
    4aee:	90 93 c5 0b 	sts	0x0BC5, r25	; 0x800bc5 <mac_buffer_tx+0xb>
    4af2:	80 93 c4 0b 	sts	0x0BC4, r24	; 0x800bc4 <mac_buffer_tx+0xa>
    4af6:	80 91 45 0b 	lds	r24, 0x0B45	; 0x800b45 <mac_buffer_rx+0xd>
    4afa:	80 93 c6 0b 	sts	0x0BC6, r24	; 0x800bc6 <mac_buffer_tx+0xc>
    4afe:	80 91 46 0b 	lds	r24, 0x0B46	; 0x800b46 <mac_buffer_rx+0xe>
    4b02:	80 93 c7 0b 	sts	0x0BC7, r24	; 0x800bc7 <mac_buffer_tx+0xd>
    4b06:	80 91 47 0b 	lds	r24, 0x0B47	; 0x800b47 <mac_buffer_rx+0xf>
    4b0a:	80 93 c8 0b 	sts	0x0BC8, r24	; 0x800bc8 <mac_buffer_tx+0xe>
    4b0e:	80 91 48 0b 	lds	r24, 0x0B48	; 0x800b48 <mac_buffer_rx+0x10>
    4b12:	80 93 c9 0b 	sts	0x0BC9, r24	; 0x800bc9 <mac_buffer_tx+0xf>
    4b16:	80 91 49 0b 	lds	r24, 0x0B49	; 0x800b49 <mac_buffer_rx+0x11>
    4b1a:	80 93 ca 0b 	sts	0x0BCA, r24	; 0x800bca <mac_buffer_tx+0x10>
    4b1e:	80 91 4a 0b 	lds	r24, 0x0B4A	; 0x800b4a <mac_buffer_rx+0x12>
    4b22:	80 93 cb 0b 	sts	0x0BCB, r24	; 0x800bcb <mac_buffer_tx+0x11>
    4b26:	80 91 4b 0b 	lds	r24, 0x0B4B	; 0x800b4b <mac_buffer_rx+0x13>
    4b2a:	80 93 cc 0b 	sts	0x0BCC, r24	; 0x800bcc <mac_buffer_tx+0x12>
    4b2e:	80 91 4c 0b 	lds	r24, 0x0B4C	; 0x800b4c <mac_buffer_rx+0x14>
    4b32:	80 93 cd 0b 	sts	0x0BCD, r24	; 0x800bcd <mac_buffer_tx+0x13>
    4b36:	80 91 4d 0b 	lds	r24, 0x0B4D	; 0x800b4d <mac_buffer_rx+0x15>
    4b3a:	80 93 ce 0b 	sts	0x0BCE, r24	; 0x800bce <mac_buffer_tx+0x14>
    4b3e:	6a eb       	ldi	r22, 0xBA	; 186
    4b40:	7b e0       	ldi	r23, 0x0B	; 11
    4b42:	85 e1       	ldi	r24, 0x15	; 21
    4b44:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <radioSendData>
    4b48:	65 96       	adiw	r28, 0x15	; 21
    4b4a:	0f b6       	in	r0, 0x3f	; 63
    4b4c:	f8 94       	cli
    4b4e:	de bf       	out	0x3e, r29	; 62
    4b50:	0f be       	out	0x3f, r0	; 63
    4b52:	cd bf       	out	0x3d, r28	; 61
    4b54:	df 91       	pop	r29
    4b56:	cf 91       	pop	r28
    4b58:	08 95       	ret
    4b5a:	83 e6       	ldi	r24, 0x63	; 99
    4b5c:	98 e8       	ldi	r25, 0x88	; 136
    4b5e:	9a 83       	std	Y+2, r25	; 0x02
    4b60:	89 83       	std	Y+1, r24	; 0x01
    4b62:	80 91 46 0c 	lds	r24, 0x0C46	; 0x800c46 <macConfig+0xa>
    4b66:	91 e0       	ldi	r25, 0x01	; 1
    4b68:	98 0f       	add	r25, r24
    4b6a:	90 93 46 0c 	sts	0x0C46, r25	; 0x800c46 <macConfig+0xa>
    4b6e:	8b 83       	std	Y+3, r24	; 0x03
    4b70:	80 91 47 0c 	lds	r24, 0x0C47	; 0x800c47 <macConfig+0xb>
    4b74:	90 91 48 0c 	lds	r25, 0x0C48	; 0x800c48 <macConfig+0xc>
    4b78:	9d 83       	std	Y+5, r25	; 0x05
    4b7a:	8c 83       	std	Y+4, r24	; 0x04
    4b7c:	80 91 4b 0c 	lds	r24, 0x0C4B	; 0x800c4b <macConfig+0xf>
    4b80:	90 91 4c 0c 	lds	r25, 0x0C4C	; 0x800c4c <macConfig+0x10>
    4b84:	9f 83       	std	Y+7, r25	; 0x07
    4b86:	8e 83       	std	Y+6, r24	; 0x06
    4b88:	80 91 49 0c 	lds	r24, 0x0C49	; 0x800c49 <macConfig+0xd>
    4b8c:	90 91 4a 0c 	lds	r25, 0x0C4A	; 0x800c4a <macConfig+0xe>
    4b90:	99 87       	std	Y+9, r25	; 0x09
    4b92:	88 87       	std	Y+8, r24	; 0x08
    4b94:	81 e0       	ldi	r24, 0x01	; 1
    4b96:	8a 87       	std	Y+10, r24	; 0x0a
    4b98:	80 91 49 0b 	lds	r24, 0x0B49	; 0x800b49 <mac_buffer_rx+0x11>
    4b9c:	90 91 4a 0b 	lds	r25, 0x0B4A	; 0x800b4a <mac_buffer_rx+0x12>
    4ba0:	9c 87       	std	Y+12, r25	; 0x0c
    4ba2:	8b 87       	std	Y+11, r24	; 0x0b
    4ba4:	80 91 40 0b 	lds	r24, 0x0B40	; 0x800b40 <mac_buffer_rx+0x8>
    4ba8:	8d 87       	std	Y+13, r24	; 0x0d
    4baa:	80 91 41 0b 	lds	r24, 0x0B41	; 0x800b41 <mac_buffer_rx+0x9>
    4bae:	8e 87       	std	Y+14, r24	; 0x0e
    4bb0:	80 91 42 0b 	lds	r24, 0x0B42	; 0x800b42 <mac_buffer_rx+0xa>
    4bb4:	8f 87       	std	Y+15, r24	; 0x0f
    4bb6:	80 91 43 0b 	lds	r24, 0x0B43	; 0x800b43 <mac_buffer_rx+0xb>
    4bba:	88 8b       	std	Y+16, r24	; 0x10
    4bbc:	80 91 44 0b 	lds	r24, 0x0B44	; 0x800b44 <mac_buffer_rx+0xc>
    4bc0:	89 8b       	std	Y+17, r24	; 0x11
    4bc2:	80 91 45 0b 	lds	r24, 0x0B45	; 0x800b45 <mac_buffer_rx+0xd>
    4bc6:	8a 8b       	std	Y+18, r24	; 0x12
    4bc8:	80 91 46 0b 	lds	r24, 0x0B46	; 0x800b46 <mac_buffer_rx+0xe>
    4bcc:	8b 8b       	std	Y+19, r24	; 0x13
    4bce:	80 91 47 0b 	lds	r24, 0x0B47	; 0x800b47 <mac_buffer_rx+0xf>
    4bd2:	8c 8b       	std	Y+20, r24	; 0x14
    4bd4:	80 91 4b 0b 	lds	r24, 0x0B4B	; 0x800b4b <mac_buffer_rx+0x13>
    4bd8:	8d 8b       	std	Y+21, r24	; 0x15
    4bda:	be 01       	movw	r22, r28
    4bdc:	6f 5f       	subi	r22, 0xFF	; 255
    4bde:	7f 4f       	sbci	r23, 0xFF	; 255
    4be0:	85 e1       	ldi	r24, 0x15	; 21
    4be2:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <radioSendData>
    4be6:	b0 cf       	rjmp	.-160    	; 0x4b48 <macRouteAssociateRequest+0xd2>

00004be8 <macRouteData>:
    {
        ftData *frame = (ftData *)(mac_buffer_tx+1);
        u8 holdFlag=0;

        // Copy RX to TX buffer
        macCopyRxToTx();
    4be8:	82 e8       	ldi	r24, 0x82	; 130
    4bea:	e8 e3       	ldi	r30, 0x38	; 56
    4bec:	fb e0       	ldi	r31, 0x0B	; 11
    4bee:	aa eb       	ldi	r26, 0xBA	; 186
    4bf0:	bb e0       	ldi	r27, 0x0B	; 11
    4bf2:	01 90       	ld	r0, Z+
    4bf4:	0d 92       	st	X+, r0
    4bf6:	8a 95       	dec	r24
    4bf8:	e1 f7       	brne	.-8      	; 0x4bf2 <macRouteData+0xa>

        Led1_on();
    4bfa:	a0 9a       	sbi	0x14, 0	; 20
        macSetAlarm(LED_DELAY,ledoff1);
    4bfc:	66 ea       	ldi	r22, 0xA6	; 166
    4bfe:	71 e0       	ldi	r23, 0x01	; 1
    4c00:	8a e0       	ldi	r24, 0x0A	; 10
    4c02:	90 e0       	ldi	r25, 0x00	; 0
    4c04:	0e 94 81 27 	call	0x4f02	; 0x4f02 <macSetAlarm>

        // See if this frame is in the child table
        if (macIsChild(frame->finalDestAddr))
    4c08:	80 91 c4 0b 	lds	r24, 0x0BC4	; 0x800bc4 <mac_buffer_tx+0xa>
    4c0c:	90 91 c5 0b 	lds	r25, 0x0BC5	; 0x800bc5 <mac_buffer_tx+0xb>
    4c10:	0e 94 a9 21 	call	0x4352	; 0x4352 <macIsChild>
    4c14:	88 23       	and	r24, r24
    4c16:	09 f1       	breq	.+66     	; 0x4c5a <macRouteData+0x72>
        {
            // send frame to child
            frame->seq = macConfig.dsn++;
    4c18:	80 91 46 0c 	lds	r24, 0x0C46	; 0x800c46 <macConfig+0xa>
    4c1c:	91 e0       	ldi	r25, 0x01	; 1
    4c1e:	98 0f       	add	r25, r24
    4c20:	90 93 46 0c 	sts	0x0C46, r25	; 0x800c46 <macConfig+0xa>
    4c24:	80 93 bd 0b 	sts	0x0BBD, r24	; 0x800bbd <mac_buffer_tx+0x3>
            frame->destAddr = frame->finalDestAddr;
    4c28:	80 91 c4 0b 	lds	r24, 0x0BC4	; 0x800bc4 <mac_buffer_tx+0xa>
    4c2c:	90 91 c5 0b 	lds	r25, 0x0BC5	; 0x800bc5 <mac_buffer_tx+0xb>
    4c30:	90 93 c1 0b 	sts	0x0BC1, r25	; 0x800bc1 <mac_buffer_tx+0x7>
    4c34:	80 93 c0 0b 	sts	0x0BC0, r24	; 0x800bc0 <mac_buffer_tx+0x6>
            frame->srcAddr = macConfig.shortAddress;
    4c38:	20 91 49 0c 	lds	r18, 0x0C49	; 0x800c49 <macConfig+0xd>
    4c3c:	30 91 4a 0c 	lds	r19, 0x0C4A	; 0x800c4a <macConfig+0xe>
    4c40:	30 93 c3 0b 	sts	0x0BC3, r19	; 0x800bc3 <mac_buffer_tx+0x9>
    4c44:	20 93 c2 0b 	sts	0x0BC2, r18	; 0x800bc2 <mac_buffer_tx+0x8>
        if (holdFlag)
                macHoldFrame(frame->finalDestAddr, (u8*)frame, (u8)*mac_buffer_tx - 2);
        else
        {
            // Make sure we're not broadcasting frames
            if (frame->destAddr != BROADCASTADDR)
    4c48:	01 96       	adiw	r24, 0x01	; 1
    4c4a:	41 f1       	breq	.+80     	; 0x4c9c <macRouteData+0xb4>
                // Send the frame along (subtract 2 bytes from length for checksum length)
                radioSendData(*mac_buffer_tx - 2, (u8*)frame);
    4c4c:	80 91 ba 0b 	lds	r24, 0x0BBA	; 0x800bba <mac_buffer_tx>
    4c50:	6b eb       	ldi	r22, 0xBB	; 187
    4c52:	7b e0       	ldi	r23, 0x0B	; 11
    4c54:	82 50       	subi	r24, 0x02	; 2
    4c56:	0c 94 e7 1e 	jmp	0x3dce	; 0x3dce <radioSendData>
                }
            }
            else if (NODETYPE == ROUTER)
            {
                // See if we should route up or down
                if (frame->srcAddr == macConfig.parentShortAddress)
    4c5a:	80 91 4b 0c 	lds	r24, 0x0C4B	; 0x800c4b <macConfig+0xf>
    4c5e:	90 91 4c 0c 	lds	r25, 0x0C4C	; 0x800c4c <macConfig+0x10>
    4c62:	20 91 c2 0b 	lds	r18, 0x0BC2	; 0x800bc2 <mac_buffer_tx+0x8>
    4c66:	30 91 c3 0b 	lds	r19, 0x0BC3	; 0x800bc3 <mac_buffer_tx+0x9>
    4c6a:	28 17       	cp	r18, r24
    4c6c:	39 07       	cpc	r19, r25
    4c6e:	b9 f0       	breq	.+46     	; 0x4c9e <macRouteData+0xb6>
                    debugMsgHex(macConfig.lastRoute);
                }
                else
                {
                    // this frame is from child, send up the chain
                    frame->seq = macConfig.dsn++;
    4c70:	20 91 46 0c 	lds	r18, 0x0C46	; 0x800c46 <macConfig+0xa>
    4c74:	31 e0       	ldi	r19, 0x01	; 1
    4c76:	32 0f       	add	r19, r18
    4c78:	30 93 46 0c 	sts	0x0C46, r19	; 0x800c46 <macConfig+0xa>
    4c7c:	20 93 bd 0b 	sts	0x0BBD, r18	; 0x800bbd <mac_buffer_tx+0x3>
                    frame->destAddr = macConfig.parentShortAddress;
    4c80:	90 93 c1 0b 	sts	0x0BC1, r25	; 0x800bc1 <mac_buffer_tx+0x7>
    4c84:	80 93 c0 0b 	sts	0x0BC0, r24	; 0x800bc0 <mac_buffer_tx+0x6>
                    frame->srcAddr = macConfig.shortAddress;
    4c88:	20 91 49 0c 	lds	r18, 0x0C49	; 0x800c49 <macConfig+0xd>
    4c8c:	30 91 4a 0c 	lds	r19, 0x0C4A	; 0x800c4a <macConfig+0xe>
    4c90:	30 93 c3 0b 	sts	0x0BC3, r19	; 0x800bc3 <mac_buffer_tx+0x9>
    4c94:	20 93 c2 0b 	sts	0x0BC2, r18	; 0x800bc2 <mac_buffer_tx+0x8>
        if (holdFlag)
                macHoldFrame(frame->finalDestAddr, (u8*)frame, (u8)*mac_buffer_tx - 2);
        else
        {
            // Make sure we're not broadcasting frames
            if (frame->destAddr != BROADCASTADDR)
    4c98:	01 96       	adiw	r24, 0x01	; 1
    4c9a:	c1 f6       	brne	.-80     	; 0x4c4c <macRouteData+0x64>
    4c9c:	08 95       	ret
            {
                // See if we should route up or down
                if (frame->srcAddr == macConfig.parentShortAddress)
                {
                    // this frame is from parent, send it down default route
                    frame->seq = macConfig.dsn++;
    4c9e:	80 91 46 0c 	lds	r24, 0x0C46	; 0x800c46 <macConfig+0xa>
    4ca2:	91 e0       	ldi	r25, 0x01	; 1
    4ca4:	98 0f       	add	r25, r24
    4ca6:	90 93 46 0c 	sts	0x0C46, r25	; 0x800c46 <macConfig+0xa>
    4caa:	80 93 bd 0b 	sts	0x0BBD, r24	; 0x800bbd <mac_buffer_tx+0x3>
                    frame->destAddr = macConfig.lastRoute;
    4cae:	80 91 4d 0c 	lds	r24, 0x0C4D	; 0x800c4d <macConfig+0x11>
    4cb2:	90 91 4e 0c 	lds	r25, 0x0C4E	; 0x800c4e <macConfig+0x12>
    4cb6:	90 93 c1 0b 	sts	0x0BC1, r25	; 0x800bc1 <mac_buffer_tx+0x7>
    4cba:	80 93 c0 0b 	sts	0x0BC0, r24	; 0x800bc0 <mac_buffer_tx+0x6>
                    frame->srcAddr = macConfig.shortAddress;
    4cbe:	20 91 49 0c 	lds	r18, 0x0C49	; 0x800c49 <macConfig+0xd>
    4cc2:	30 91 4a 0c 	lds	r19, 0x0C4A	; 0x800c4a <macConfig+0xe>
    4cc6:	30 93 c3 0b 	sts	0x0BC3, r19	; 0x800bc3 <mac_buffer_tx+0x9>
    4cca:	20 93 c2 0b 	sts	0x0BC2, r18	; 0x800bc2 <mac_buffer_tx+0x8>
    4cce:	bc cf       	rjmp	.-136    	; 0x4c48 <macRouteData+0x60>

00004cd0 <macSendRoutingPacket>:

        // Set the flag to say we sent a routing packet.
        return 1;
    }
    return 0;
}
    4cd0:	80 e0       	ldi	r24, 0x00	; 0
    4cd2:	08 95       	ret

00004cd4 <store_pandescriptors>:
   @return The channel set by @ref macSetScanChannel().
*/
u8 macGetScanChannel(void)
{
    return scanChannel;
}
    4cd4:	cf 93       	push	r28
    4cd6:	df 93       	push	r29
    4cd8:	e8 e3       	ldi	r30, 0x38	; 56
    4cda:	fb e0       	ldi	r31, 0x0B	; 11
    4cdc:	20 91 b8 0b 	lds	r18, 0x0BB8	; 0x800bb8 <mac_buffer_rx+0x80>
    4ce0:	c1 eb       	ldi	r28, 0xB1	; 177
    4ce2:	dc e0       	ldi	r29, 0x0C	; 12
    4ce4:	81 81       	ldd	r24, Z+1	; 0x01
    4ce6:	92 81       	ldd	r25, Z+2	; 0x02
    4ce8:	84 e0       	ldi	r24, 0x04	; 4
    4cea:	98 9f       	mul	r25, r24
    4cec:	81 2d       	mov	r24, r1
    4cee:	99 27       	eor	r25, r25
    4cf0:	11 24       	eor	r1, r1
    4cf2:	88 83       	st	Y, r24
    4cf4:	84 81       	ldd	r24, Z+4	; 0x04
    4cf6:	95 81       	ldd	r25, Z+5	; 0x05
    4cf8:	9a 83       	std	Y+2, r25	; 0x02
    4cfa:	89 83       	std	Y+1, r24	; 0x01
    4cfc:	86 81       	ldd	r24, Z+6	; 0x06
    4cfe:	97 81       	ldd	r25, Z+7	; 0x07
    4d00:	9c 83       	std	Y+4, r25	; 0x04
    4d02:	8b 83       	std	Y+3, r24	; 0x03
    4d04:	83 85       	ldd	r24, Z+11	; 0x0b
    4d06:	89 87       	std	Y+9, r24	; 0x09
    4d08:	80 91 50 0c 	lds	r24, 0x0C50	; 0x800c50 <macConfig+0x14>
    4d0c:	81 50       	subi	r24, 0x01	; 1
    4d0e:	8d 83       	std	Y+5, r24	; 0x05
    4d10:	1e 82       	std	Y+6, r1	; 0x06
    4d12:	2a 87       	std	Y+10, r18	; 0x0a
    4d14:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <radioGetSavedRssiValue>
    4d18:	8b 87       	std	Y+11, r24	; 0x0b
    4d1a:	df 91       	pop	r29
    4d1c:	cf 91       	pop	r28
    4d1e:	08 95       	ret

00004d20 <macIsScanning>:
    4d20:	80 91 67 06 	lds	r24, 0x0667	; 0x800667 <scanInProcess>
    4d24:	08 95       	ret

00004d26 <mac_logPanDescriptors>:
    In @ref DEMO mode, the only criteria used is to pick the parent
    with the lowest RSSI reading.  This is done to encourage the
    formation of a multi-hop network for test and demo purposes.
*/
void mac_logPanDescriptors(void)
{
    4d26:	cf 93       	push	r28
    ftBeacon *frame = (ftBeacon *)(mac_buffer_rx+1);
    u8 lqi = ((rx_frame_t *)mac_buffer_rx)->lqi;
    4d28:	90 91 b8 0b 	lds	r25, 0x0BB8	; 0x800bb8 <mac_buffer_rx+0x80>

    // Swap frame
    frame->panid = ntohs_16(frame->panid);
    frame->addr = ntohs_16(frame->addr);
    frame->superFrame = ntohs_16(frame->superFrame);
    4d2c:	20 91 40 0b 	lds	r18, 0x0B40	; 0x800b40 <mac_buffer_rx+0x8>
    4d30:	30 91 41 0b 	lds	r19, 0x0B41	; 0x800b41 <mac_buffer_rx+0x9>


    if (!scanInProcess)
    4d34:	80 91 67 06 	lds	r24, 0x0667	; 0x800667 <scanInProcess>
    4d38:	88 23       	and	r24, r24
    4d3a:	21 f0       	breq	.+8      	; 0x4d44 <mac_logPanDescriptors+0x1e>
        return;
    if (frame->netID != 6)
    4d3c:	80 91 42 0b 	lds	r24, 0x0B42	; 0x800b42 <mac_buffer_rx+0xa>
    4d40:	86 30       	cpi	r24, 0x06	; 6
    4d42:	11 f0       	breq	.+4      	; 0x4d48 <mac_logPanDescriptors+0x22>
            {
                store_pandescriptors();
            }
        }
    }
}
    4d44:	cf 91       	pop	r28
    4d46:	08 95       	ret
        energy.energy[energy.currentChannel] += 500;
    }
    else  // Router and end nodes
    {
        // Check the Beacon frame Superframe spec value.
        u16 previous_superframe = panDescriptor.superFrameSpec.superframe_data;
    4d48:	40 91 b8 0c 	lds	r20, 0x0CB8	; 0x800cb8 <panDescriptor+0x7>
    4d4c:	50 91 b9 0c 	lds	r21, 0x0CB9	; 0x800cb9 <panDescriptor+0x8>
        panDescriptor.superFrameSpec.superframe_data = htons_16(frame->superFrame);
    4d50:	30 93 b9 0c 	sts	0x0CB9, r19	; 0x800cb9 <panDescriptor+0x8>
    4d54:	20 93 b8 0c 	sts	0x0CB8, r18	; 0x800cb8 <panDescriptor+0x7>

        // Determine if association permit is true. We're looking for false.
        if(panDescriptor.superFrameSpec.superframe_struct.association_permit)
    4d58:	80 91 b9 0c 	lds	r24, 0x0CB9	; 0x800cb9 <panDescriptor+0x8>
    4d5c:	87 fd       	sbrc	r24, 7
    4d5e:	17 c0       	rjmp	.+46     	; 0x4d8e <mac_logPanDescriptors+0x68>
            }
        }
        else
        {
            // Determine if the Beacon LQI value is stronger than the previous scan.
            if(panDescriptor.lqi < lqi)
    4d60:	80 91 bb 0c 	lds	r24, 0x0CBB	; 0x800cbb <panDescriptor+0xa>
    4d64:	89 17       	cp	r24, r25
    4d66:	80 f0       	brcs	.+32     	; 0x4d88 <mac_logPanDescriptors+0x62>
            {
                store_pandescriptors();
            }
            // If LQI is equal to previous stored, check for the least amount of hops to the coord.
            else if((panDescriptor.lqi == lqi)
    4d68:	98 13       	cpse	r25, r24
    4d6a:	ec cf       	rjmp	.-40     	; 0x4d44 <mac_logPanDescriptors+0x1e>
                    && (panDescriptor.hopsToCoord > frame->hops))
    4d6c:	90 91 ba 0c 	lds	r25, 0x0CBA	; 0x800cba <panDescriptor+0x9>
    4d70:	80 91 43 0b 	lds	r24, 0x0B43	; 0x800b43 <mac_buffer_rx+0xb>
    4d74:	89 17       	cp	r24, r25
    4d76:	40 f0       	brcs	.+16     	; 0x4d88 <mac_logPanDescriptors+0x62>
            {
                store_pandescriptors();
            }
            // If LQI and hops are equal to the previous stored, check for the best RSSI value.
            else if((panDescriptor.lqi == lqi)
                    && (panDescriptor.hopsToCoord == frame->hops)
    4d78:	98 13       	cpse	r25, r24
    4d7a:	e4 cf       	rjmp	.-56     	; 0x4d44 <mac_logPanDescriptors+0x1e>
                    && (panDescriptor.rssi < radioGetSavedRssiValue()))
    4d7c:	c0 91 bc 0c 	lds	r28, 0x0CBC	; 0x800cbc <panDescriptor+0xb>
    4d80:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <radioGetSavedRssiValue>
    4d84:	c8 17       	cp	r28, r24
    4d86:	f0 f6       	brcc	.-68     	; 0x4d44 <mac_logPanDescriptors+0x1e>
            {
                store_pandescriptors();
            }
        }
    }
}
    4d88:	cf 91       	pop	r28
        else
        {
            // Determine if the Beacon LQI value is stronger than the previous scan.
            if(panDescriptor.lqi < lqi)
            {
                store_pandescriptors();
    4d8a:	0c 94 6a 26 	jmp	0x4cd4	; 0x4cd4 <store_pandescriptors>
        panDescriptor.superFrameSpec.superframe_data = htons_16(frame->superFrame);

        // Determine if association permit is true. We're looking for false.
        if(panDescriptor.superFrameSpec.superframe_struct.association_permit)
        {
            panDescriptor.superFrameSpec.superframe_data = previous_superframe;
    4d8e:	50 93 b9 0c 	sts	0x0CB9, r21	; 0x800cb9 <panDescriptor+0x8>
    4d92:	40 93 b8 0c 	sts	0x0CB8, r20	; 0x800cb8 <panDescriptor+0x7>
            return;
    4d96:	d6 cf       	rjmp	.-84     	; 0x4d44 <mac_logPanDescriptors+0x1e>

00004d98 <mac_scanConfirm>:
    @brief Trigger a call to @ref appScanConfirm(), since the scanning
    process is done.  If at least one valid beacon was received, then signal that
    success to the application.
*/
void mac_scanConfirm(void)
{
    4d98:	cf 93       	push	r28
    // logicalChannel is used as flag to show that we received a valid beacon
    u8 gotbeacon = (panDescriptor.logicalChannel != 0xff);
    4d9a:	c1 e0       	ldi	r28, 0x01	; 1
    4d9c:	80 91 b6 0c 	lds	r24, 0x0CB6	; 0x800cb6 <panDescriptor+0x5>
    4da0:	8f 3f       	cpi	r24, 0xFF	; 255
    4da2:	f9 f0       	breq	.+62     	; 0x4de2 <mac_scanConfirm+0x4a>

    if (gotbeacon)
    {
        // Save the panDescriptor data to the PIB's.
        macConfig.panId = panDescriptor.coorPANId;
    4da4:	80 91 b2 0c 	lds	r24, 0x0CB2	; 0x800cb2 <panDescriptor+0x1>
    4da8:	90 91 b3 0c 	lds	r25, 0x0CB3	; 0x800cb3 <panDescriptor+0x2>
    4dac:	90 93 48 0c 	sts	0x0C48, r25	; 0x800c48 <macConfig+0xc>
    4db0:	80 93 47 0c 	sts	0x0C47, r24	; 0x800c47 <macConfig+0xb>
        macConfig.parentShortAddress = panDescriptor.coordAddr;
    4db4:	20 91 b4 0c 	lds	r18, 0x0CB4	; 0x800cb4 <panDescriptor+0x3>
    4db8:	30 91 b5 0c 	lds	r19, 0x0CB5	; 0x800cb5 <panDescriptor+0x4>
    4dbc:	30 93 4c 0c 	sts	0x0C4C, r19	; 0x800c4c <macConfig+0x10>
    4dc0:	20 93 4b 0c 	sts	0x0C4B, r18	; 0x800c4b <macConfig+0xf>

        // Need to reset the PAN ID in the radio.
        radioSetPanId(macConfig.panId);
    4dc4:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <radioSetPanId>

        macSetOperatingChannel(panDescriptor.logicalChannel);
    4dc8:	80 91 b6 0c 	lds	r24, 0x0CB6	; 0x800cb6 <panDescriptor+0x5>
    4dcc:	0e 94 49 21 	call	0x4292	; 0x4292 <macSetOperatingChannel>

        // We are one hop more than our (prospective) parent
        macConfig.hopsToCoord = panDescriptor.hopsToCoord + 1;
    4dd0:	80 91 ba 0c 	lds	r24, 0x0CBA	; 0x800cba <panDescriptor+0x9>
    4dd4:	8f 5f       	subi	r24, 0xFF	; 255
    4dd6:	80 93 4f 0c 	sts	0x0C4F, r24	; 0x800c4f <macConfig+0x13>
    }
    // Confirm the scan, only if we have a valid coordinator
    appScanConfirm(gotbeacon);
    4dda:	8c 2f       	mov	r24, r28
}
    4ddc:	cf 91       	pop	r28

        // We are one hop more than our (prospective) parent
        macConfig.hopsToCoord = panDescriptor.hopsToCoord + 1;
    }
    // Confirm the scan, only if we have a valid coordinator
    appScanConfirm(gotbeacon);
    4dde:	0c 94 6d 02 	jmp	0x4da	; 0x4da <appScanConfirm>
    success to the application.
*/
void mac_scanConfirm(void)
{
    // logicalChannel is used as flag to show that we received a valid beacon
    u8 gotbeacon = (panDescriptor.logicalChannel != 0xff);
    4de2:	c0 e0       	ldi	r28, 0x00	; 0

        // We are one hop more than our (prospective) parent
        macConfig.hopsToCoord = panDescriptor.hopsToCoord + 1;
    }
    // Confirm the scan, only if we have a valid coordinator
    appScanConfirm(gotbeacon);
    4de4:	8c 2f       	mov	r24, r28
}
    4de6:	cf 91       	pop	r28

        // We are one hop more than our (prospective) parent
        macConfig.hopsToCoord = panDescriptor.hopsToCoord + 1;
    }
    // Confirm the scan, only if we have a valid coordinator
    appScanConfirm(gotbeacon);
    4de8:	0c 94 6d 02 	jmp	0x4da	; 0x4da <appScanConfirm>

00004dec <macScan>:
    // Check for fixed channel
    if (PAN_CHANNEL != CHANNEL255)
        macSetScanChannel(PAN_CHANNEL);

    // Set up some varibles on the initial call to macScan()
    if (0xFF == macConfig.currentChannel)
    4dec:	80 91 50 0c 	lds	r24, 0x0C50	; 0x800c50 <macConfig+0x14>
    4df0:	8f 3f       	cpi	r24, 0xFF	; 255
    4df2:	09 f4       	brne	.+2      	; 0x4df6 <macScan+0xa>
    4df4:	40 c0       	rjmp	.+128    	; 0x4e76 <macScan+0x8a>
        // Not first time through, must sleep very low power nodes.
        #if (VLP && (NODETYPE == ENDDEVICE))
            nodeSleep(SCAN_SLEEP_TIME);
		#endif
    // See if we're done scanning
    if(macConfig.currentChannel > (CHINA_MODE ? 4 : MAX_CHANNEL) ||
    4df6:	8b 31       	cpi	r24, 0x1B	; 27
    4df8:	b8 f5       	brcc	.+110    	; 0x4e68 <macScan+0x7c>
       macConfig.currentChannel == scanChannel + 1)
    4dfa:	48 2f       	mov	r20, r24
    4dfc:	50 e0       	ldi	r21, 0x00	; 0
    4dfe:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <scanChannel>
    4e02:	30 e0       	ldi	r19, 0x00	; 0
    4e04:	2f 5f       	subi	r18, 0xFF	; 255
    4e06:	3f 4f       	sbci	r19, 0xFF	; 255
        // Not first time through, must sleep very low power nodes.
        #if (VLP && (NODETYPE == ENDDEVICE))
            nodeSleep(SCAN_SLEEP_TIME);
		#endif
    // See if we're done scanning
    if(macConfig.currentChannel > (CHINA_MODE ? 4 : MAX_CHANNEL) ||
    4e08:	42 17       	cp	r20, r18
    4e0a:	53 07       	cpc	r21, r19
    4e0c:	69 f1       	breq	.+90     	; 0x4e68 <macScan+0x7c>
            mac_scanConfirm();
            return;
        }

    // Set the channel.
    macSetOperatingChannel(macConfig.currentChannel);
    4e0e:	0e 94 49 21 	call	0x4292	; 0x4292 <macSetOperatingChannel>
{
    // Create a struct pointer to the global variable...
    volatile ftBeaconReq* brFrame = (ftBeaconReq*)(mac_buffer_tx+1);

    // Fill in beacon request frame
    brFrame->fcf = htons_16(FCF_BEACONREQ);
    4e12:	83 e0       	ldi	r24, 0x03	; 3
    4e14:	98 e0       	ldi	r25, 0x08	; 8
    4e16:	90 93 bc 0b 	sts	0x0BBC, r25	; 0x800bbc <mac_buffer_tx+0x2>
    4e1a:	80 93 bb 0b 	sts	0x0BBB, r24	; 0x800bbb <mac_buffer_tx+0x1>
    brFrame->seq = macConfig.bsn++;
    4e1e:	80 91 45 0c 	lds	r24, 0x0C45	; 0x800c45 <macConfig+0x9>
    4e22:	91 e0       	ldi	r25, 0x01	; 1
    4e24:	98 0f       	add	r25, r24
    4e26:	90 93 45 0c 	sts	0x0C45, r25	; 0x800c45 <macConfig+0x9>
    4e2a:	80 93 bd 0b 	sts	0x0BBD, r24	; 0x800bbd <mac_buffer_tx+0x3>
    brFrame->panid = htons_16(PAN_ID);
    4e2e:	8f ef       	ldi	r24, 0xFF	; 255
    4e30:	9f ef       	ldi	r25, 0xFF	; 255
    4e32:	90 93 bf 0b 	sts	0x0BBF, r25	; 0x800bbf <mac_buffer_tx+0x5>
    4e36:	80 93 be 0b 	sts	0x0BBE, r24	; 0x800bbe <mac_buffer_tx+0x4>
    brFrame->broadcastAddr = BROADCASTADDR;
    4e3a:	90 93 c1 0b 	sts	0x0BC1, r25	; 0x800bc1 <mac_buffer_tx+0x7>
    4e3e:	80 93 c0 0b 	sts	0x0BC0, r24	; 0x800bc0 <mac_buffer_tx+0x6>
    brFrame->cmd = BEACON_REQUEST;
    4e42:	87 e0       	ldi	r24, 0x07	; 7
    4e44:	80 93 c2 0b 	sts	0x0BC2, r24	; 0x800bc2 <mac_buffer_tx+0x8>

    // Send the frame via radio
    radioSendData(sizeof(ftBeaconReq), (u8*)brFrame);
    4e48:	6b eb       	ldi	r22, 0xBB	; 187
    4e4a:	7b e0       	ldi	r23, 0x0B	; 11
    4e4c:	88 e0       	ldi	r24, 0x08	; 8
    4e4e:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <radioSendData>

    // Send the beacon request
    sendBeaconRequest();

    // Beacon was send, increment channel to prepare for the next one.
    macConfig.currentChannel++;
    4e52:	80 91 50 0c 	lds	r24, 0x0C50	; 0x800c50 <macConfig+0x14>
    4e56:	8f 5f       	subi	r24, 0xFF	; 255
    4e58:	80 93 50 0c 	sts	0x0C50, r24	; 0x800c50 <macConfig+0x14>

    // Set the scan duration timer.
    macSetAlarm(SCANDURATION, macScan);
    4e5c:	66 ef       	ldi	r22, 0xF6	; 246
    4e5e:	76 e2       	ldi	r23, 0x26	; 38
    4e60:	84 e1       	ldi	r24, 0x14	; 20
    4e62:	90 e0       	ldi	r25, 0x00	; 0
    4e64:	0c 94 81 27 	jmp	0x4f02	; 0x4f02 <macSetAlarm>
    // See if we're done scanning
    if(macConfig.currentChannel > (CHINA_MODE ? 4 : MAX_CHANNEL) ||
       macConfig.currentChannel == scanChannel + 1)
        {
            // done scanning
            scanInProcess = false;
    4e68:	10 92 67 06 	sts	0x0667, r1	; 0x800667 <scanInProcess>
            macConfig.currentChannel = 0xFF;
    4e6c:	8f ef       	ldi	r24, 0xFF	; 255
    4e6e:	80 93 50 0c 	sts	0x0C50, r24	; 0x800c50 <macConfig+0x14>

            mac_scanConfirm();
    4e72:	0c 94 cc 26 	jmp	0x4d98	; 0x4d98 <mac_scanConfirm>
        macSetScanChannel(PAN_CHANNEL);

    // Set up some varibles on the initial call to macScan()
    if (0xFF == macConfig.currentChannel)
    {
        scanInProcess = true;
    4e76:	91 e0       	ldi	r25, 0x01	; 1
    4e78:	90 93 67 06 	sts	0x0667, r25	; 0x800667 <scanInProcess>

        // Reset the variables.
        memset(&panDescriptor, 0, sizeof(panDescriptor_t));
    4e7c:	96 e1       	ldi	r25, 0x16	; 22
    4e7e:	e1 eb       	ldi	r30, 0xB1	; 177
    4e80:	fc e0       	ldi	r31, 0x0C	; 12
    4e82:	df 01       	movw	r26, r30
    4e84:	1d 92       	st	X+, r1
    4e86:	9a 95       	dec	r25
    4e88:	e9 f7       	brne	.-6      	; 0x4e84 <macScan+0x98>

        // logicalChannel is used as flag to show that we received a valid beacon
        panDescriptor.logicalChannel = 0xff;
    4e8a:	80 93 b6 0c 	sts	0x0CB6, r24	; 0x800cb6 <panDescriptor+0x5>

        macConfig.currentChannel = MIN_CHANNEL; // First possible channel for RF23x
    4e8e:	8b e0       	ldi	r24, 0x0B	; 11
    4e90:	80 93 50 0c 	sts	0x0C50, r24	; 0x800c50 <macConfig+0x14>

        // Check for a single pre-defined channel to scan.
        if (scanChannel != ALL_CHANNELS)
    4e94:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <scanChannel>
    4e98:	80 38       	cpi	r24, 0x80	; 128
    4e9a:	19 f0       	breq	.+6      	; 0x4ea2 <macScan+0xb6>
            macConfig.currentChannel = scanChannel;
    4e9c:	80 93 50 0c 	sts	0x0C50, r24	; 0x800c50 <macConfig+0x14>
    4ea0:	b6 cf       	rjmp	.-148    	; 0x4e0e <macScan+0x22>
    4ea2:	8b e0       	ldi	r24, 0x0B	; 11
    4ea4:	b4 cf       	rjmp	.-152    	; 0x4e0e <macScan+0x22>

00004ea6 <macEdCallback>:
   @brief Callback function, called by the radio ISR function when the
   radio issues an energy measurement interrupt.  This function stores
   the energy measurement for later use.
 */
void macEdCallback(void)
{
    4ea6:	08 95       	ret

00004ea8 <getUniqueID>:
    localtime = tickTimer;
    AVR_LEAVE_CRITICAL_REGION();

    return localtime;

}
    4ea8:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <currentTimerID.3607>
    4eac:	8f 5f       	subi	r24, 0xFF	; 255
    4eae:	09 f4       	brne	.+2      	; 0x4eb2 <getUniqueID+0xa>
    4eb0:	81 e0       	ldi	r24, 0x01	; 1
    4eb2:	e2 ed       	ldi	r30, 0xD2	; 210
    4eb4:	f6 e0       	ldi	r31, 0x06	; 6
    4eb6:	21 e0       	ldi	r18, 0x01	; 1
    4eb8:	05 c0       	rjmp	.+10     	; 0x4ec4 <getUniqueID+0x1c>
    4eba:	35 96       	adiw	r30, 0x05	; 5
    4ebc:	97 e0       	ldi	r25, 0x07	; 7
    4ebe:	e6 33       	cpi	r30, 0x36	; 54
    4ec0:	f9 07       	cpc	r31, r25
    4ec2:	49 f0       	breq	.+18     	; 0x4ed6 <getUniqueID+0x2e>
    4ec4:	90 81       	ld	r25, Z
    4ec6:	89 13       	cpse	r24, r25
    4ec8:	f8 cf       	rjmp	.-16     	; 0x4eba <getUniqueID+0x12>
    4eca:	20 e0       	ldi	r18, 0x00	; 0
    4ecc:	35 96       	adiw	r30, 0x05	; 5
    4ece:	97 e0       	ldi	r25, 0x07	; 7
    4ed0:	e6 33       	cpi	r30, 0x36	; 54
    4ed2:	f9 07       	cpc	r31, r25
    4ed4:	b9 f7       	brne	.-18     	; 0x4ec4 <getUniqueID+0x1c>
    4ed6:	ee e6       	ldi	r30, 0x6E	; 110
    4ed8:	f6 e0       	ldi	r31, 0x06	; 6
    4eda:	05 c0       	rjmp	.+10     	; 0x4ee6 <getUniqueID+0x3e>
    4edc:	35 96       	adiw	r30, 0x05	; 5
    4ede:	96 e0       	ldi	r25, 0x06	; 6
    4ee0:	e2 3d       	cpi	r30, 0xD2	; 210
    4ee2:	f9 07       	cpc	r31, r25
    4ee4:	49 f0       	breq	.+18     	; 0x4ef8 <getUniqueID+0x50>
    4ee6:	90 81       	ld	r25, Z
    4ee8:	89 13       	cpse	r24, r25
    4eea:	f8 cf       	rjmp	.-16     	; 0x4edc <getUniqueID+0x34>
    4eec:	20 e0       	ldi	r18, 0x00	; 0
    4eee:	35 96       	adiw	r30, 0x05	; 5
    4ef0:	96 e0       	ldi	r25, 0x06	; 6
    4ef2:	e2 3d       	cpi	r30, 0xD2	; 210
    4ef4:	f9 07       	cpc	r31, r25
    4ef6:	b9 f7       	brne	.-18     	; 0x4ee6 <getUniqueID+0x3e>
    4ef8:	22 23       	and	r18, r18
    4efa:	c1 f2       	breq	.-80     	; 0x4eac <getUniqueID+0x4>
    4efc:	80 93 68 06 	sts	0x0668, r24	; 0x800668 <currentTimerID.3607>
    4f00:	08 95       	ret

00004f02 <macSetAlarm>:
   return nothing.

   @return Handle to timer.  Can be used to call macTimerEnd().
*/
u8 macSetAlarm(u16 time, void(*callback)(void))
{
    4f02:	cf 92       	push	r12
    4f04:	df 92       	push	r13
    4f06:	ef 92       	push	r14
    4f08:	ff 92       	push	r15
    4f0a:	0f 93       	push	r16
    4f0c:	1f 93       	push	r17
    4f0e:	cf 93       	push	r28
    4f10:	df 93       	push	r29
    4f12:	1f 92       	push	r1
    4f14:	cd b7       	in	r28, 0x3d	; 61
    4f16:	de b7       	in	r29, 0x3e	; 62
    u8 i;
    u16 ticks;

    if (!time)
    4f18:	00 97       	sbiw	r24, 0x00	; 0
    4f1a:	09 f4       	brne	.+2      	; 0x4f1e <macSetAlarm+0x1c>
    4f1c:	46 c0       	rjmp	.+140    	; 0x4faa <macSetAlarm+0xa8>

    // Store the timer details in the array
    ticks = max(time, 1);  // At least one tick

    // Protect this section from an ISR that will add an alarm
    AVR_ENTER_CRITICAL_REGION();
    4f1e:	2f b7       	in	r18, 0x3f	; 63
    4f20:	29 83       	std	Y+1, r18	; 0x01
    4f22:	f8 94       	cli
    4f24:	a0 ed       	ldi	r26, 0xD0	; 208
    4f26:	b6 e0       	ldi	r27, 0x06	; 6
    4f28:	00 e0       	ldi	r16, 0x00	; 0
    4f2a:	10 e0       	ldi	r17, 0x00	; 0
    // search for free event structure
    for (i=0;i<TIMER_EVENTS_MAX;i++)
        if (!timerEvents[i].time)
    4f2c:	2d 91       	ld	r18, X+
    4f2e:	3c 91       	ld	r19, X
    4f30:	11 97       	sbiw	r26, 0x01	; 1
    4f32:	23 2b       	or	r18, r19
    4f34:	89 f0       	breq	.+34     	; 0x4f58 <macSetAlarm+0x56>
    4f36:	0f 5f       	subi	r16, 0xFF	; 255
    4f38:	1f 4f       	sbci	r17, 0xFF	; 255
    4f3a:	15 96       	adiw	r26, 0x05	; 5
    ticks = max(time, 1);  // At least one tick

    // Protect this section from an ISR that will add an alarm
    AVR_ENTER_CRITICAL_REGION();
    // search for free event structure
    for (i=0;i<TIMER_EVENTS_MAX;i++)
    4f3c:	04 31       	cpi	r16, 0x14	; 20
    4f3e:	11 05       	cpc	r17, r1
    4f40:	a9 f7       	brne	.-22     	; 0x4f2c <macSetAlarm+0x2a>
            // free, use this one
            break;

    if (i >= TIMER_EVENTS_MAX)
        // Out of timers to use, just quit
        return 0;
    4f42:	80 e0       	ldi	r24, 0x00	; 0
    // start timer running, since we have at least one timer running
    timerStart();
    AVR_LEAVE_CRITICAL_REGION();

    return timerEvents[i].timerID;
}
    4f44:	0f 90       	pop	r0
    4f46:	df 91       	pop	r29
    4f48:	cf 91       	pop	r28
    4f4a:	1f 91       	pop	r17
    4f4c:	0f 91       	pop	r16
    4f4e:	ff 90       	pop	r15
    4f50:	ef 90       	pop	r14
    4f52:	df 90       	pop	r13
    4f54:	cf 90       	pop	r12
    4f56:	08 95       	ret

    if (i >= TIMER_EVENTS_MAX)
        // Out of timers to use, just quit
        return 0;

    timerEvents[i].time = ticks;
    4f58:	78 01       	movw	r14, r16
    4f5a:	ee 0c       	add	r14, r14
    4f5c:	ff 1c       	adc	r15, r15
    4f5e:	ee 0c       	add	r14, r14
    4f60:	ff 1c       	adc	r15, r15
    4f62:	f7 01       	movw	r30, r14
    4f64:	e0 0f       	add	r30, r16
    4f66:	f1 1f       	adc	r31, r17
    4f68:	e0 53       	subi	r30, 0x30	; 48
    4f6a:	f9 4f       	sbci	r31, 0xF9	; 249
        callback();
        return 0;
    }

    // Store the timer details in the array
    ticks = max(time, 1);  // At least one tick
    4f6c:	00 97       	sbiw	r24, 0x00	; 0
    4f6e:	09 f1       	breq	.+66     	; 0x4fb2 <macSetAlarm+0xb0>

    if (i >= TIMER_EVENTS_MAX)
        // Out of timers to use, just quit
        return 0;

    timerEvents[i].time = ticks;
    4f70:	91 83       	std	Z+1, r25	; 0x01
    4f72:	80 83       	st	Z, r24
    timerEvents[i].callback = callback;
    4f74:	c7 01       	movw	r24, r14
    4f76:	80 0f       	add	r24, r16
    4f78:	91 1f       	adc	r25, r17
    4f7a:	9c 01       	movw	r18, r24
    4f7c:	20 53       	subi	r18, 0x30	; 48
    4f7e:	39 4f       	sbci	r19, 0xF9	; 249
    4f80:	69 01       	movw	r12, r18
    4f82:	f9 01       	movw	r30, r18
    4f84:	74 83       	std	Z+4, r23	; 0x04
    4f86:	63 83       	std	Z+3, r22	; 0x03
    // don't return zero as a timer ID
    timerEvents[i].timerID = getUniqueID();
    4f88:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <getUniqueID>
    4f8c:	f6 01       	movw	r30, r12
    4f8e:	82 83       	std	Z+2, r24	; 0x02
/**
    @brief Start the hardware timer running.
*/
static void timerStart(void)
{
    if (!timerRunning)
    4f90:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <timerRunning>
    4f94:	88 23       	and	r24, r24
    4f96:	81 f0       	breq	.+32     	; 0x4fb8 <macSetAlarm+0xb6>
    // don't return zero as a timer ID
    timerEvents[i].timerID = getUniqueID();

    // start timer running, since we have at least one timer running
    timerStart();
    AVR_LEAVE_CRITICAL_REGION();
    4f98:	89 81       	ldd	r24, Y+1	; 0x01
    4f9a:	8f bf       	out	0x3f, r24	; 63

    return timerEvents[i].timerID;
    4f9c:	0e 0d       	add	r16, r14
    4f9e:	1f 1d       	adc	r17, r15
    4fa0:	f8 01       	movw	r30, r16
    4fa2:	e0 53       	subi	r30, 0x30	; 48
    4fa4:	f9 4f       	sbci	r31, 0xF9	; 249
    4fa6:	82 81       	ldd	r24, Z+2	; 0x02
    4fa8:	cd cf       	rjmp	.-102    	; 0x4f44 <macSetAlarm+0x42>
    u16 ticks;

    if (!time)
    {
        // Don't delay, just call it
        callback();
    4faa:	fb 01       	movw	r30, r22
    4fac:	09 95       	icall
        return 0;
    4fae:	80 e0       	ldi	r24, 0x00	; 0
    4fb0:	c9 cf       	rjmp	.-110    	; 0x4f44 <macSetAlarm+0x42>
    }

    // Store the timer details in the array
    ticks = max(time, 1);  // At least one tick
    4fb2:	81 e0       	ldi	r24, 0x01	; 1
    4fb4:	90 e0       	ldi	r25, 0x00	; 0
    4fb6:	dc cf       	rjmp	.-72     	; 0x4f70 <macSetAlarm+0x6e>
static void timerStart(void)
{
    if (!timerRunning)
    {
        // Clear timer counter value.
        TIMER_CLEAR();
    4fb8:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    4fbc:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>

        // Enable TIMER3 output compare interrupt.
        TIMER_ENABLE();
    4fc0:	82 e0       	ldi	r24, 0x02	; 2
    4fc2:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
        timerRunning = 1;
    4fc6:	81 e0       	ldi	r24, 0x01	; 1
    4fc8:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <timerRunning>
    4fcc:	e5 cf       	rjmp	.-54     	; 0x4f98 <macSetAlarm+0x96>

00004fce <macSetLongAlarm>:
   hours.

   @return Handle to timer.  Can be used to call macTimerEnd().
*/
u8 macSetLongAlarm(u16 seconds, void(*callback)(void))
{
    4fce:	cf 92       	push	r12
    4fd0:	df 92       	push	r13
    4fd2:	ef 92       	push	r14
    4fd4:	ff 92       	push	r15
    4fd6:	0f 93       	push	r16
    4fd8:	1f 93       	push	r17
    4fda:	cf 93       	push	r28
    4fdc:	df 93       	push	r29
    4fde:	1f 92       	push	r1
    4fe0:	cd b7       	in	r28, 0x3d	; 61
    4fe2:	de b7       	in	r29, 0x3e	; 62
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        // Find a free timer
        u8 i;
        
        if (!seconds)
    4fe4:	00 97       	sbiw	r24, 0x00	; 0
    4fe6:	09 f4       	brne	.+2      	; 0x4fea <macSetLongAlarm+0x1c>
    4fe8:	3f c0       	rjmp	.+126    	; 0x5068 <macSetLongAlarm+0x9a>
    4fea:	ac e6       	ldi	r26, 0x6C	; 108
    4fec:	b6 e0       	ldi	r27, 0x06	; 6
    4fee:	00 e0       	ldi	r16, 0x00	; 0
    4ff0:	10 e0       	ldi	r17, 0x00	; 0
            callback();
            return 0;
        }
        
        for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
            if (!longTimerEvents[i].time)
    4ff2:	2d 91       	ld	r18, X+
    4ff4:	3c 91       	ld	r19, X
    4ff6:	11 97       	sbiw	r26, 0x01	; 1
    4ff8:	23 2b       	or	r18, r19
    4ffa:	89 f0       	breq	.+34     	; 0x501e <macSetLongAlarm+0x50>
    4ffc:	0f 5f       	subi	r16, 0xFF	; 255
    4ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    5000:	15 96       	adiw	r26, 0x05	; 5
            // Just go right now
            callback();
            return 0;
        }
        
        for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
    5002:	04 31       	cpi	r16, 0x14	; 20
    5004:	11 05       	cpc	r17, r1
    5006:	a9 f7       	brne	.-22     	; 0x4ff2 <macSetLongAlarm+0x24>
                // free, use this one
                break;

        if (i >= LONG_TIMER_EVENTS_MAX)
            // No more timers, just quit
            return 0;
    5008:	80 e0       	ldi	r24, 0x00	; 0
        AVR_LEAVE_CRITICAL_REGION();
        
        return longTimerEvents[i].timerID;
    }
    return 0;
}
    500a:	0f 90       	pop	r0
    500c:	df 91       	pop	r29
    500e:	cf 91       	pop	r28
    5010:	1f 91       	pop	r17
    5012:	0f 91       	pop	r16
    5014:	ff 90       	pop	r15
    5016:	ef 90       	pop	r14
    5018:	df 90       	pop	r13
    501a:	cf 90       	pop	r12
    501c:	08 95       	ret
        if (i >= LONG_TIMER_EVENTS_MAX)
            // No more timers, just quit
            return 0;
        
        // Store the time and callback into free timer
        longTimerEvents[i].time = seconds;
    501e:	78 01       	movw	r14, r16
    5020:	ee 0c       	add	r14, r14
    5022:	ff 1c       	adc	r15, r15
    5024:	ee 0c       	add	r14, r14
    5026:	ff 1c       	adc	r15, r15
    5028:	97 01       	movw	r18, r14
    502a:	20 0f       	add	r18, r16
    502c:	31 1f       	adc	r19, r17
    502e:	a9 01       	movw	r20, r18
    5030:	44 59       	subi	r20, 0x94	; 148
    5032:	59 4f       	sbci	r21, 0xF9	; 249
    5034:	6a 01       	movw	r12, r20
    5036:	fa 01       	movw	r30, r20
    5038:	91 83       	std	Z+1, r25	; 0x01
    503a:	80 83       	st	Z, r24
        longTimerEvents[i].callback = callback;
    503c:	74 83       	std	Z+4, r23	; 0x04
    503e:	63 83       	std	Z+3, r22	; 0x03
        longTimerEvents[i].timerID = getUniqueID();
    5040:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <getUniqueID>
    5044:	f6 01       	movw	r30, r12
    5046:	82 83       	std	Z+2, r24	; 0x02
        
        // start timer running, since we have at least one timer running
        AVR_ENTER_CRITICAL_REGION();
    5048:	8f b7       	in	r24, 0x3f	; 63
    504a:	89 83       	std	Y+1, r24	; 0x01
    504c:	f8 94       	cli
/**
    @brief Start the hardware timer running.
*/
static void timerStart(void)
{
    if (!timerRunning)
    504e:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <timerRunning>
    5052:	88 23       	and	r24, r24
    5054:	69 f0       	breq	.+26     	; 0x5070 <macSetLongAlarm+0xa2>
        longTimerEvents[i].timerID = getUniqueID();
        
        // start timer running, since we have at least one timer running
        AVR_ENTER_CRITICAL_REGION();
        timerStart();
        AVR_LEAVE_CRITICAL_REGION();
    5056:	89 81       	ldd	r24, Y+1	; 0x01
    5058:	8f bf       	out	0x3f, r24	; 63
        
        return longTimerEvents[i].timerID;
    505a:	0e 0d       	add	r16, r14
    505c:	1f 1d       	adc	r17, r15
    505e:	f8 01       	movw	r30, r16
    5060:	e4 59       	subi	r30, 0x94	; 148
    5062:	f9 4f       	sbci	r31, 0xF9	; 249
    5064:	82 81       	ldd	r24, Z+2	; 0x02
    5066:	d1 cf       	rjmp	.-94     	; 0x500a <macSetLongAlarm+0x3c>
        u8 i;
        
        if (!seconds)
        {
            // Just go right now
            callback();
    5068:	fb 01       	movw	r30, r22
    506a:	09 95       	icall
            return 0;
    506c:	80 e0       	ldi	r24, 0x00	; 0
    506e:	cd cf       	rjmp	.-102    	; 0x500a <macSetLongAlarm+0x3c>
static void timerStart(void)
{
    if (!timerRunning)
    {
        // Clear timer counter value.
        TIMER_CLEAR();
    5070:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    5074:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>

        // Enable TIMER3 output compare interrupt.
        TIMER_ENABLE();
    5078:	82 e0       	ldi	r24, 0x02	; 2
    507a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
        timerRunning = 1;
    507e:	81 e0       	ldi	r24, 0x01	; 1
    5080:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <timerRunning>
    5084:	e8 cf       	rjmp	.-48     	; 0x5056 <macSetLongAlarm+0x88>

00005086 <macTimerEnd>:

   @param timerID The value returned from macSetAlarm when the alarm
   was set.
*/
void macTimerEnd(u8 timerID)
{
    5086:	e2 ed       	ldi	r30, 0xD2	; 210
    5088:	f6 e0       	ldi	r31, 0x06	; 6
    508a:	20 e0       	ldi	r18, 0x00	; 0
    508c:	30 e0       	ldi	r19, 0x00	; 0
    u8 i;

    // search for timer with timerID
    for (i=0;i<TIMER_EVENTS_MAX;i++)
        if (timerEvents[i].timerID == timerID)
    508e:	90 81       	ld	r25, Z
    5090:	98 17       	cp	r25, r24
    5092:	a1 f0       	breq	.+40     	; 0x50bc <macTimerEnd+0x36>
    5094:	2f 5f       	subi	r18, 0xFF	; 255
    5096:	3f 4f       	sbci	r19, 0xFF	; 255
    5098:	35 96       	adiw	r30, 0x05	; 5
void macTimerEnd(u8 timerID)
{
    u8 i;

    // search for timer with timerID
    for (i=0;i<TIMER_EVENTS_MAX;i++)
    509a:	24 31       	cpi	r18, 0x14	; 20
    509c:	31 05       	cpc	r19, r1
    509e:	b9 f7       	brne	.-18     	; 0x508e <macTimerEnd+0x8>
    50a0:	ee e6       	ldi	r30, 0x6E	; 110
    50a2:	f6 e0       	ldi	r31, 0x06	; 6
    50a4:	20 e0       	ldi	r18, 0x00	; 0
    50a6:	30 e0       	ldi	r19, 0x00	; 0

    // search for long timer with timerID
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
            if (longTimerEvents[i].timerID == timerID)
    50a8:	90 81       	ld	r25, Z
    50aa:	98 17       	cp	r25, r24
    50ac:	a9 f0       	breq	.+42     	; 0x50d8 <macTimerEnd+0x52>
    50ae:	2f 5f       	subi	r18, 0xFF	; 255
    50b0:	3f 4f       	sbci	r19, 0xFF	; 255
    50b2:	35 96       	adiw	r30, 0x05	; 5
        }

    // search for long timer with timerID
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
    50b4:	24 31       	cpi	r18, 0x14	; 20
    50b6:	31 05       	cpc	r19, r1
    50b8:	b9 f7       	brne	.-18     	; 0x50a8 <macTimerEnd+0x22>
    50ba:	08 95       	ret
    // search for timer with timerID
    for (i=0;i<TIMER_EVENTS_MAX;i++)
        if (timerEvents[i].timerID == timerID)
        {
            // kill this timer
            timerEvents[i].time = 0;
    50bc:	f9 01       	movw	r30, r18
    50be:	ee 0f       	add	r30, r30
    50c0:	ff 1f       	adc	r31, r31
    50c2:	ee 0f       	add	r30, r30
    50c4:	ff 1f       	adc	r31, r31
    50c6:	2e 0f       	add	r18, r30
    50c8:	3f 1f       	adc	r19, r31
    50ca:	f9 01       	movw	r30, r18
    50cc:	e0 53       	subi	r30, 0x30	; 48
    50ce:	f9 4f       	sbci	r31, 0xF9	; 249
    50d0:	11 82       	std	Z+1, r1	; 0x01
    50d2:	10 82       	st	Z, r1
            timerEvents[i].timerID = 0;
    50d4:	12 82       	std	Z+2, r1	; 0x02
            return;
    50d6:	08 95       	ret
    {
        for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
            if (longTimerEvents[i].timerID == timerID)
            {
                // kill this timer
                longTimerEvents[i].time = 0;
    50d8:	f9 01       	movw	r30, r18
    50da:	ee 0f       	add	r30, r30
    50dc:	ff 1f       	adc	r31, r31
    50de:	ee 0f       	add	r30, r30
    50e0:	ff 1f       	adc	r31, r31
    50e2:	2e 0f       	add	r18, r30
    50e4:	3f 1f       	adc	r19, r31
    50e6:	f9 01       	movw	r30, r18
    50e8:	e4 59       	subi	r30, 0x94	; 148
    50ea:	f9 4f       	sbci	r31, 0xF9	; 249
    50ec:	11 82       	std	Z+1, r1	; 0x01
    50ee:	10 82       	st	Z, r1
                longTimerEvents[i].timerID = 0;
    50f0:	12 82       	std	Z+2, r1	; 0x02
                return;
    50f2:	08 95       	ret

000050f4 <timerInit>:
   want to clear all timers.  Sets the timeout for each tick of the
   system clock.
 */
void timerInit(void)
{
    TIMER_INIT();
    50f4:	e1 e9       	ldi	r30, 0x91	; 145
    50f6:	f0 e0       	ldi	r31, 0x00	; 0
    50f8:	80 81       	ld	r24, Z
    50fa:	8a 60       	ori	r24, 0x0A	; 10
    50fc:	80 83       	st	Z, r24
    50fe:	80 ed       	ldi	r24, 0xD0	; 208
    5100:	97 e0       	ldi	r25, 0x07	; 7
    5102:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    5106:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>

#if __AVR__
    // Init the PRNG
    if (NODETYPE != ENDDEVICE)
        srand(TCNT(TICKTIMER));
    510a:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
    510e:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    5112:	0c 94 dd 31 	jmp	0x63ba	; 0x63ba <srand>

00005116 <__vector_32>:
#if __AVR__
/**
   @brief Timer interrupt service routine.
*/
ISR(TICKVECT)
{
    5116:	1f 92       	push	r1
    5118:	0f 92       	push	r0
    511a:	0f b6       	in	r0, 0x3f	; 63
    511c:	0f 92       	push	r0
    511e:	11 24       	eor	r1, r1
    5120:	0b b6       	in	r0, 0x3b	; 59
    5122:	0f 92       	push	r0
    5124:	ff 92       	push	r15
    5126:	0f 93       	push	r16
    5128:	1f 93       	push	r17
    512a:	2f 93       	push	r18
    512c:	3f 93       	push	r19
    512e:	4f 93       	push	r20
    5130:	5f 93       	push	r21
    5132:	6f 93       	push	r22
    5134:	7f 93       	push	r23
    5136:	8f 93       	push	r24
    5138:	9f 93       	push	r25
    513a:	af 93       	push	r26
    513c:	bf 93       	push	r27
    513e:	ef 93       	push	r30
    5140:	ff 93       	push	r31
    5142:	cf 93       	push	r28
    5144:	df 93       	push	r29
    5146:	00 d0       	rcall	.+0      	; 0x5148 <__vector_32+0x32>
    5148:	1f 92       	push	r1
    514a:	cd b7       	in	r28, 0x3d	; 61
    514c:	de b7       	in	r29, 0x3e	; 62
    u8 i;
    event_object_t event;

    tickTimer++;
    514e:	80 91 69 06 	lds	r24, 0x0669	; 0x800669 <tickTimer>
    5152:	90 91 6a 06 	lds	r25, 0x066A	; 0x80066a <tickTimer+0x1>
    5156:	01 96       	adiw	r24, 0x01	; 1
    5158:	90 93 6a 06 	sts	0x066A, r25	; 0x80066a <tickTimer+0x1>
    515c:	80 93 69 06 	sts	0x0669, r24	; 0x800669 <tickTimer>
#endif
    
    // Decrement second timer
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        if (!--secondTimer)
    5160:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <secondTimer>
    5164:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <secondTimer+0x1>
    5168:	01 97       	sbiw	r24, 0x01	; 1
    516a:	09 f4       	brne	.+2      	; 0x516e <__vector_32+0x58>
    516c:	43 c0       	rjmp	.+134    	; 0x51f4 <__vector_32+0xde>
    516e:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <secondTimer+0x1>
    5172:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <secondTimer>
    5176:	00 ed       	ldi	r16, 0xD0	; 208
    5178:	16 e0       	ldi	r17, 0x06	; 6
        {
            // this timer event is live, check for expiration
            if (!--timerEvents[i].time)
            {
                // Timer expired, queue the associated callback
                event.event = MAC_EVENT_TIMER;  // Event type, see event_t for details.
    517a:	96 e1       	ldi	r25, 0x16	; 22
    517c:	f9 2e       	mov	r15, r25
    517e:	06 c0       	rjmp	.+12     	; 0x518c <__vector_32+0x76>
    5180:	0b 5f       	subi	r16, 0xFB	; 251
    5182:	1f 4f       	sbci	r17, 0xFF	; 255
            }
        }
    }

    // check for pending events
    for (i=0;i<TIMER_EVENTS_MAX;i++)
    5184:	f7 e0       	ldi	r31, 0x07	; 7
    5186:	04 33       	cpi	r16, 0x34	; 52
    5188:	1f 07       	cpc	r17, r31
    518a:	c9 f0       	breq	.+50     	; 0x51be <__vector_32+0xa8>
    {
        if (timerEvents[i].time)
    518c:	f8 01       	movw	r30, r16
    518e:	80 81       	ld	r24, Z
    5190:	91 81       	ldd	r25, Z+1	; 0x01
    5192:	00 97       	sbiw	r24, 0x00	; 0
    5194:	a9 f3       	breq	.-22     	; 0x5180 <__vector_32+0x6a>
        {
            // this timer event is live, check for expiration
            if (!--timerEvents[i].time)
    5196:	01 97       	sbiw	r24, 0x01	; 1
    5198:	91 83       	std	Z+1, r25	; 0x01
    519a:	80 83       	st	Z, r24
    519c:	89 2b       	or	r24, r25
    519e:	81 f7       	brne	.-32     	; 0x5180 <__vector_32+0x6a>
            {
                // Timer expired, queue the associated callback
                event.event = MAC_EVENT_TIMER;  // Event type, see event_t for details.
    51a0:	f9 82       	std	Y+1, r15	; 0x01
                event.data = (void (*)(void))(timerEvents[i].callback);
    51a2:	83 81       	ldd	r24, Z+3	; 0x03
    51a4:	94 81       	ldd	r25, Z+4	; 0x04
    51a6:	9b 83       	std	Y+3, r25	; 0x03
    51a8:	8a 83       	std	Y+2, r24	; 0x02
                mac_put_event(&event);
    51aa:	ce 01       	movw	r24, r28
    51ac:	01 96       	adiw	r24, 0x01	; 1
    51ae:	0e 94 7f 23 	call	0x46fe	; 0x46fe <mac_put_event>
    51b2:	0b 5f       	subi	r16, 0xFB	; 251
    51b4:	1f 4f       	sbci	r17, 0xFF	; 255
            }
        }
    }

    // check for pending events
    for (i=0;i<TIMER_EVENTS_MAX;i++)
    51b6:	f7 e0       	ldi	r31, 0x07	; 7
    51b8:	04 33       	cpi	r16, 0x34	; 52
    51ba:	1f 07       	cpc	r17, r31
    51bc:	39 f7       	brne	.-50     	; 0x518c <__vector_32+0x76>
                event.data = (void (*)(void))(timerEvents[i].callback);
                mac_put_event(&event);
            }
        }
    }
}
    51be:	0f 90       	pop	r0
    51c0:	0f 90       	pop	r0
    51c2:	0f 90       	pop	r0
    51c4:	df 91       	pop	r29
    51c6:	cf 91       	pop	r28
    51c8:	ff 91       	pop	r31
    51ca:	ef 91       	pop	r30
    51cc:	bf 91       	pop	r27
    51ce:	af 91       	pop	r26
    51d0:	9f 91       	pop	r25
    51d2:	8f 91       	pop	r24
    51d4:	7f 91       	pop	r23
    51d6:	6f 91       	pop	r22
    51d8:	5f 91       	pop	r21
    51da:	4f 91       	pop	r20
    51dc:	3f 91       	pop	r19
    51de:	2f 91       	pop	r18
    51e0:	1f 91       	pop	r17
    51e2:	0f 91       	pop	r16
    51e4:	ff 90       	pop	r15
    51e6:	0f 90       	pop	r0
    51e8:	0b be       	out	0x3b, r0	; 59
    51ea:	0f 90       	pop	r0
    51ec:	0f be       	out	0x3f, r0	; 63
    51ee:	0f 90       	pop	r0
    51f0:	1f 90       	pop	r1
    51f2:	18 95       	reti
    if (APP || IPV6LOWPAN || MACHINE_CONNECTED)
    {
        if (!--secondTimer)
        {
            // Reset one second timer
            secondTimer = 1000/MS_PER_TICK;
    51f4:	84 ef       	ldi	r24, 0xF4	; 244
    51f6:	91 e0       	ldi	r25, 0x01	; 1
    51f8:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <secondTimer+0x1>
    51fc:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <secondTimer>
    5200:	0c e6       	ldi	r16, 0x6C	; 108
    5202:	16 e0       	ldi	r17, 0x06	; 6
                {
                    // This timer is active, check for expiration
                    if (!--longTimerEvents[i].time)
                    {
                        // Timer expired, queue the associated callback
                        event.event = MAC_EVENT_TIMER;  // Event type, see event_t for details.
    5204:	86 e1       	ldi	r24, 0x16	; 22
    5206:	f8 2e       	mov	r15, r24
    5208:	07 c0       	rjmp	.+14     	; 0x5218 <__vector_32+0x102>
    520a:	0b 5f       	subi	r16, 0xFB	; 251
    520c:	1f 4f       	sbci	r17, 0xFF	; 255
        if (!--secondTimer)
        {
            // Reset one second timer
            secondTimer = 1000/MS_PER_TICK;
            // Handle the one-second timers
            for (i=0;i<LONG_TIMER_EVENTS_MAX;i++)
    520e:	f6 e0       	ldi	r31, 0x06	; 6
    5210:	00 3d       	cpi	r16, 0xD0	; 208
    5212:	1f 07       	cpc	r17, r31
    5214:	09 f4       	brne	.+2      	; 0x5218 <__vector_32+0x102>
    5216:	af cf       	rjmp	.-162    	; 0x5176 <__vector_32+0x60>
            {
                if (longTimerEvents[i].time)
    5218:	f8 01       	movw	r30, r16
    521a:	80 81       	ld	r24, Z
    521c:	91 81       	ldd	r25, Z+1	; 0x01
    521e:	00 97       	sbiw	r24, 0x00	; 0
    5220:	a1 f3       	breq	.-24     	; 0x520a <__vector_32+0xf4>
                {
                    // This timer is active, check for expiration
                    if (!--longTimerEvents[i].time)
    5222:	01 97       	sbiw	r24, 0x01	; 1
    5224:	91 83       	std	Z+1, r25	; 0x01
    5226:	80 83       	st	Z, r24
    5228:	89 2b       	or	r24, r25
    522a:	79 f7       	brne	.-34     	; 0x520a <__vector_32+0xf4>
                    {
                        // Timer expired, queue the associated callback
                        event.event = MAC_EVENT_TIMER;  // Event type, see event_t for details.
    522c:	f9 82       	std	Y+1, r15	; 0x01
                        event.data = (void(*)(void))longTimerEvents[i].callback;
    522e:	83 81       	ldd	r24, Z+3	; 0x03
    5230:	94 81       	ldd	r25, Z+4	; 0x04
    5232:	9b 83       	std	Y+3, r25	; 0x03
    5234:	8a 83       	std	Y+2, r24	; 0x02
                        mac_put_event(&event);
    5236:	ce 01       	movw	r24, r28
    5238:	01 96       	adiw	r24, 0x01	; 1
    523a:	0e 94 7f 23 	call	0x46fe	; 0x46fe <mac_put_event>
    523e:	e5 cf       	rjmp	.-54     	; 0x520a <__vector_32+0xf4>

00005240 <__vector_35>:

    for(i = 0; i < uiDelay; i++)
    {
        Timer_delay_us ( 1000 );
    }
}
    5240:	1f 92       	push	r1
    5242:	0f 92       	push	r0
    5244:	0f b6       	in	r0, 0x3f	; 63
    5246:	0f 92       	push	r0
    5248:	11 24       	eor	r1, r1
    524a:	8f 93       	push	r24
    524c:	82 e0       	ldi	r24, 0x02	; 2
    524e:	80 93 35 07 	sts	0x0735, r24	; 0x800735 <GenericTimerFlag>
    5252:	8f 91       	pop	r24
    5254:	0f 90       	pop	r0
    5256:	0f be       	out	0x3f, r0	; 63
    5258:	0f 90       	pop	r0
    525a:	1f 90       	pop	r1
    525c:	18 95       	reti

0000525e <__vector_12>:

/** \brief Watchdog Timer Interrupt Service Routine.
 */
ISR ( WDT_vect )
{    
    525e:	1f 92       	push	r1
    5260:	0f 92       	push	r0
    5262:	0f b6       	in	r0, 0x3f	; 63
    5264:	0f 92       	push	r0
    5266:	11 24       	eor	r1, r1
    5268:	8f 93       	push	r24
    WDTFlag = 1;
    526a:	81 e0       	ldi	r24, 0x01	; 1
    526c:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <WDTFlag>
}
    5270:	8f 91       	pop	r24
    5272:	0f 90       	pop	r0
    5274:	0f be       	out	0x3f, r0	; 63
    5276:	0f 90       	pop	r0
    5278:	1f 90       	pop	r1
    527a:	18 95       	reti

0000527c <init_rx_buf>:
	ucTemp = ucData >> 4;
	ucTemp = Nible_to_ascii ( ucTemp );
	serial_putchar ( ucTemp );

	ucTemp = Nible_to_ascii ( ucData );
	serial_putchar ( ucTemp );
    527c:	ea e3       	ldi	r30, 0x3A	; 58
    527e:	f7 e0       	ldi	r31, 0x07	; 7
    5280:	11 82       	std	Z+1, r1	; 0x01
    5282:	10 82       	st	Z, r1
    5284:	08 95       	ret

00005286 <serial_init>:
    5286:	ea e3       	ldi	r30, 0x3A	; 58
    5288:	f7 e0       	ldi	r31, 0x07	; 7
    528a:	11 82       	std	Z+1, r1	; 0x01
    528c:	10 82       	st	Z, r1
    528e:	ec eb       	ldi	r30, 0xBC	; 188
    5290:	f7 e0       	ldi	r31, 0x07	; 7
    5292:	11 82       	std	Z+1, r1	; 0x01
    5294:	10 82       	st	Z, r1
    5296:	28 e9       	ldi	r18, 0x98	; 152
    5298:	20 93 c9 00 	sts	0x00C9, r18	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    529c:	26 e0       	ldi	r18, 0x06	; 6
    529e:	20 93 ca 00 	sts	0x00CA, r18	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
    52a2:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    52a6:	27 e6       	ldi	r18, 0x67	; 103
    52a8:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    52ac:	90 93 39 07 	sts	0x0739, r25	; 0x800739 <rx_handler+0x1>
    52b0:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <rx_handler>
    52b4:	08 95       	ret

000052b6 <serial_putchar>:
    52b6:	90 91 36 07 	lds	r25, 0x0736	; 0x800736 <pause>
    52ba:	91 11       	cpse	r25, r1
    52bc:	37 c0       	rjmp	.+110    	; 0x532c <serial_putchar+0x76>
    52be:	78 94       	sei
    52c0:	20 91 bc 07 	lds	r18, 0x07BC	; 0x8007bc <txbuf>
    52c4:	2f 5f       	subi	r18, 0xFF	; 255
    52c6:	27 fd       	sbrc	r18, 7
    52c8:	32 c0       	rjmp	.+100    	; 0x532e <serial_putchar+0x78>
    52ca:	30 91 37 07 	lds	r19, 0x0737	; 0x800737 <rx>
    52ce:	02 c0       	rjmp	.+4      	; 0x52d4 <serial_putchar+0x1e>
    52d0:	31 11       	cpse	r19, r1
    52d2:	0c c0       	rjmp	.+24     	; 0x52ec <serial_putchar+0x36>
    52d4:	90 91 bd 07 	lds	r25, 0x07BD	; 0x8007bd <txbuf+0x1>
    52d8:	92 17       	cp	r25, r18
    52da:	d1 f3       	breq	.-12     	; 0x52d0 <serial_putchar+0x1a>
    52dc:	e0 91 bc 07 	lds	r30, 0x07BC	; 0x8007bc <txbuf>
    52e0:	f0 e0       	ldi	r31, 0x00	; 0
    52e2:	e4 54       	subi	r30, 0x44	; 68
    52e4:	f8 4f       	sbci	r31, 0xF8	; 248
    52e6:	82 83       	std	Z+2, r24	; 0x02
    52e8:	20 93 bc 07 	sts	0x07BC, r18	; 0x8007bc <txbuf>
    52ec:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    52f0:	85 fd       	sbrc	r24, 5
    52f2:	1c c0       	rjmp	.+56     	; 0x532c <serial_putchar+0x76>
    52f4:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    52f8:	85 ff       	sbrs	r24, 5
    52fa:	fc cf       	rjmp	.-8      	; 0x52f4 <serial_putchar+0x3e>
    52fc:	80 91 bd 07 	lds	r24, 0x07BD	; 0x8007bd <txbuf+0x1>
    5300:	e8 2f       	mov	r30, r24
    5302:	f0 e0       	ldi	r31, 0x00	; 0
    5304:	e4 54       	subi	r30, 0x44	; 68
    5306:	f8 4f       	sbci	r31, 0xF8	; 248
    5308:	92 81       	ldd	r25, Z+2	; 0x02
    530a:	20 91 bc 07 	lds	r18, 0x07BC	; 0x8007bc <txbuf>
    530e:	82 17       	cp	r24, r18
    5310:	91 f0       	breq	.+36     	; 0x5336 <serial_putchar+0x80>
    5312:	8f 5f       	subi	r24, 0xFF	; 255
    5314:	87 fd       	sbrc	r24, 7
    5316:	0d c0       	rjmp	.+26     	; 0x5332 <serial_putchar+0x7c>
    5318:	80 93 bd 07 	sts	0x07BD, r24	; 0x8007bd <txbuf+0x1>
    531c:	89 2f       	mov	r24, r25
    531e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    5322:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    5326:	80 62       	ori	r24, 0x20	; 32
    5328:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    532c:	08 95       	ret
    532e:	20 e0       	ldi	r18, 0x00	; 0
    5330:	cc cf       	rjmp	.-104    	; 0x52ca <serial_putchar+0x14>
    5332:	80 e0       	ldi	r24, 0x00	; 0
    5334:	f1 cf       	rjmp	.-30     	; 0x5318 <serial_putchar+0x62>
    5336:	8f ef       	ldi	r24, 0xFF	; 255
    5338:	f2 cf       	rjmp	.-28     	; 0x531e <serial_putchar+0x68>

0000533a <rx_buf_count>:
    533a:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <rxbuf>
    533e:	90 e0       	ldi	r25, 0x00	; 0
    5340:	20 91 3b 07 	lds	r18, 0x073B	; 0x80073b <rxbuf+0x1>
    5344:	82 1b       	sub	r24, r18
    5346:	91 09       	sbc	r25, r1
    5348:	97 ff       	sbrs	r25, 7
    534a:	08 95       	ret
    534c:	80 58       	subi	r24, 0x80	; 128
    534e:	9f 4f       	sbci	r25, 0xFF	; 255
    5350:	08 95       	ret

00005352 <serial_getchar>:
    5352:	80 91 3a 07 	lds	r24, 0x073A	; 0x80073a <rxbuf>
    5356:	90 e0       	ldi	r25, 0x00	; 0
    5358:	20 91 3b 07 	lds	r18, 0x073B	; 0x80073b <rxbuf+0x1>
    535c:	82 1b       	sub	r24, r18
    535e:	91 09       	sbc	r25, r1
    5360:	97 fd       	sbrc	r25, 7
    5362:	13 c0       	rjmp	.+38     	; 0x538a <serial_getchar+0x38>
    5364:	88 23       	and	r24, r24
    5366:	a9 f3       	breq	.-22     	; 0x5352 <serial_getchar>
    5368:	90 91 3b 07 	lds	r25, 0x073B	; 0x80073b <rxbuf+0x1>
    536c:	e9 2f       	mov	r30, r25
    536e:	f0 e0       	ldi	r31, 0x00	; 0
    5370:	e6 5c       	subi	r30, 0xC6	; 198
    5372:	f8 4f       	sbci	r31, 0xF8	; 248
    5374:	82 81       	ldd	r24, Z+2	; 0x02
    5376:	20 91 3a 07 	lds	r18, 0x073A	; 0x80073a <rxbuf>
    537a:	92 17       	cp	r25, r18
    537c:	59 f0       	breq	.+22     	; 0x5394 <serial_getchar+0x42>
    537e:	9f 5f       	subi	r25, 0xFF	; 255
    5380:	97 fd       	sbrc	r25, 7
    5382:	06 c0       	rjmp	.+12     	; 0x5390 <serial_getchar+0x3e>
    5384:	90 93 3b 07 	sts	0x073B, r25	; 0x80073b <rxbuf+0x1>
    5388:	08 95       	ret
    538a:	80 58       	subi	r24, 0x80	; 128
    538c:	9f 4f       	sbci	r25, 0xFF	; 255
    538e:	ea cf       	rjmp	.-44     	; 0x5364 <serial_getchar+0x12>
    5390:	90 e0       	ldi	r25, 0x00	; 0
    5392:	f8 cf       	rjmp	.-16     	; 0x5384 <serial_getchar+0x32>
    5394:	8f ef       	ldi	r24, 0xFF	; 255
    5396:	08 95       	ret

00005398 <__vector_36>:
    5398:	1f 92       	push	r1
    539a:	0f 92       	push	r0
    539c:	0f b6       	in	r0, 0x3f	; 63
    539e:	0f 92       	push	r0
    53a0:	11 24       	eor	r1, r1
    53a2:	0b b6       	in	r0, 0x3b	; 59
    53a4:	0f 92       	push	r0
    53a6:	2f 93       	push	r18
    53a8:	3f 93       	push	r19
    53aa:	4f 93       	push	r20
    53ac:	5f 93       	push	r21
    53ae:	6f 93       	push	r22
    53b0:	7f 93       	push	r23
    53b2:	8f 93       	push	r24
    53b4:	9f 93       	push	r25
    53b6:	af 93       	push	r26
    53b8:	bf 93       	push	r27
    53ba:	ef 93       	push	r30
    53bc:	ff 93       	push	r31
    53be:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    53c2:	91 e0       	ldi	r25, 0x01	; 1
    53c4:	90 93 37 07 	sts	0x0737, r25	; 0x800737 <rx>
    53c8:	90 91 3a 07 	lds	r25, 0x073A	; 0x80073a <rxbuf>
    53cc:	9f 5f       	subi	r25, 0xFF	; 255
    53ce:	97 fd       	sbrc	r25, 7
    53d0:	28 c0       	rjmp	.+80     	; 0x5422 <__vector_36+0x8a>
    53d2:	20 91 3b 07 	lds	r18, 0x073B	; 0x80073b <rxbuf+0x1>
    53d6:	29 17       	cp	r18, r25
    53d8:	41 f0       	breq	.+16     	; 0x53ea <__vector_36+0x52>
    53da:	e0 91 3a 07 	lds	r30, 0x073A	; 0x80073a <rxbuf>
    53de:	f0 e0       	ldi	r31, 0x00	; 0
    53e0:	e6 5c       	subi	r30, 0xC6	; 198
    53e2:	f8 4f       	sbci	r31, 0xF8	; 248
    53e4:	82 83       	std	Z+2, r24	; 0x02
    53e6:	90 93 3a 07 	sts	0x073A, r25	; 0x80073a <rxbuf>
    53ea:	10 92 37 07 	sts	0x0737, r1	; 0x800737 <rx>
    53ee:	e0 91 38 07 	lds	r30, 0x0738	; 0x800738 <rx_handler>
    53f2:	f0 91 39 07 	lds	r31, 0x0739	; 0x800739 <rx_handler+0x1>
    53f6:	30 97       	sbiw	r30, 0x00	; 0
    53f8:	09 f0       	breq	.+2      	; 0x53fc <__vector_36+0x64>
    53fa:	09 95       	icall
    53fc:	ff 91       	pop	r31
    53fe:	ef 91       	pop	r30
    5400:	bf 91       	pop	r27
    5402:	af 91       	pop	r26
    5404:	9f 91       	pop	r25
    5406:	8f 91       	pop	r24
    5408:	7f 91       	pop	r23
    540a:	6f 91       	pop	r22
    540c:	5f 91       	pop	r21
    540e:	4f 91       	pop	r20
    5410:	3f 91       	pop	r19
    5412:	2f 91       	pop	r18
    5414:	0f 90       	pop	r0
    5416:	0b be       	out	0x3b, r0	; 59
    5418:	0f 90       	pop	r0
    541a:	0f be       	out	0x3f, r0	; 63
    541c:	0f 90       	pop	r0
    541e:	1f 90       	pop	r1
    5420:	18 95       	reti
    5422:	90 e0       	ldi	r25, 0x00	; 0
    5424:	d6 cf       	rjmp	.-84     	; 0x53d2 <__vector_36+0x3a>

00005426 <__vector_37>:
    5426:	1f 92       	push	r1
    5428:	0f 92       	push	r0
    542a:	0f b6       	in	r0, 0x3f	; 63
    542c:	0f 92       	push	r0
    542e:	11 24       	eor	r1, r1
    5430:	0b b6       	in	r0, 0x3b	; 59
    5432:	0f 92       	push	r0
    5434:	2f 93       	push	r18
    5436:	8f 93       	push	r24
    5438:	9f 93       	push	r25
    543a:	ef 93       	push	r30
    543c:	ff 93       	push	r31
    543e:	90 91 bc 07 	lds	r25, 0x07BC	; 0x8007bc <txbuf>
    5442:	80 91 bd 07 	lds	r24, 0x07BD	; 0x8007bd <txbuf+0x1>
    5446:	98 17       	cp	r25, r24
    5448:	f9 f0       	breq	.+62     	; 0x5488 <__vector_37+0x62>
    544a:	80 91 bd 07 	lds	r24, 0x07BD	; 0x8007bd <txbuf+0x1>
    544e:	e8 2f       	mov	r30, r24
    5450:	f0 e0       	ldi	r31, 0x00	; 0
    5452:	e4 54       	subi	r30, 0x44	; 68
    5454:	f8 4f       	sbci	r31, 0xF8	; 248
    5456:	92 81       	ldd	r25, Z+2	; 0x02
    5458:	20 91 bc 07 	lds	r18, 0x07BC	; 0x8007bc <txbuf>
    545c:	82 17       	cp	r24, r18
    545e:	e1 f0       	breq	.+56     	; 0x5498 <__vector_37+0x72>
    5460:	8f 5f       	subi	r24, 0xFF	; 255
    5462:	87 fd       	sbrc	r24, 7
    5464:	17 c0       	rjmp	.+46     	; 0x5494 <__vector_37+0x6e>
    5466:	80 93 bd 07 	sts	0x07BD, r24	; 0x8007bd <txbuf+0x1>
    546a:	89 2f       	mov	r24, r25
    546c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    5470:	ff 91       	pop	r31
    5472:	ef 91       	pop	r30
    5474:	9f 91       	pop	r25
    5476:	8f 91       	pop	r24
    5478:	2f 91       	pop	r18
    547a:	0f 90       	pop	r0
    547c:	0b be       	out	0x3b, r0	; 59
    547e:	0f 90       	pop	r0
    5480:	0f be       	out	0x3f, r0	; 63
    5482:	0f 90       	pop	r0
    5484:	1f 90       	pop	r1
    5486:	18 95       	reti
    5488:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    548c:	8f 7d       	andi	r24, 0xDF	; 223
    548e:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    5492:	ee cf       	rjmp	.-36     	; 0x5470 <__vector_37+0x4a>
    5494:	80 e0       	ldi	r24, 0x00	; 0
    5496:	e7 cf       	rjmp	.-50     	; 0x5466 <__vector_37+0x40>
    5498:	8f ef       	ldi	r24, 0xFF	; 255
    549a:	e8 cf       	rjmp	.-48     	; 0x546c <__vector_37+0x46>

0000549c <Ascii_to_nible>:
    549c:	98 2f       	mov	r25, r24
    549e:	80 ed       	ldi	r24, 0xD0	; 208
    54a0:	89 0f       	add	r24, r25
    54a2:	8a 30       	cpi	r24, 0x0A	; 10
    54a4:	60 f0       	brcs	.+24     	; 0x54be <Ascii_to_nible+0x22>
    54a6:	8f eb       	ldi	r24, 0xBF	; 191
    54a8:	89 0f       	add	r24, r25
    54aa:	86 30       	cpi	r24, 0x06	; 6
    54ac:	48 f0       	brcs	.+18     	; 0x54c0 <Ascii_to_nible+0x24>
    54ae:	8f e9       	ldi	r24, 0x9F	; 159
    54b0:	89 0f       	add	r24, r25
    54b2:	86 30       	cpi	r24, 0x06	; 6
    54b4:	18 f4       	brcc	.+6      	; 0x54bc <Ascii_to_nible+0x20>
    54b6:	89 ea       	ldi	r24, 0xA9	; 169
    54b8:	89 0f       	add	r24, r25
    54ba:	08 95       	ret
    54bc:	80 e0       	ldi	r24, 0x00	; 0
    54be:	08 95       	ret
    54c0:	89 ec       	ldi	r24, 0xC9	; 201
    54c2:	89 0f       	add	r24, r25
    54c4:	08 95       	ret

000054c6 <asciiStringToNibble>:
param inStr is the ASCII value to be converted.

return outStr is the nibble value with number of characters received.
*/
u8 asciiStringToNibble( char *inStr, char *outStr)
{
    54c6:	9f 92       	push	r9
    54c8:	af 92       	push	r10
    54ca:	bf 92       	push	r11
    54cc:	cf 92       	push	r12
    54ce:	df 92       	push	r13
    54d0:	ef 92       	push	r14
    54d2:	ff 92       	push	r15
    54d4:	0f 93       	push	r16
    54d6:	1f 93       	push	r17
    54d8:	cf 93       	push	r28
    54da:	df 93       	push	r29
    54dc:	6c 01       	movw	r12, r24
    54de:	7b 01       	movw	r14, r22
	u8 n, k;
	
	n = strlen(inStr);
    54e0:	fc 01       	movw	r30, r24
    54e2:	01 90       	ld	r0, Z+
    54e4:	00 20       	and	r0, r0
    54e6:	e9 f7       	brne	.-6      	; 0x54e2 <asciiStringToNibble+0x1c>
    54e8:	31 97       	sbiw	r30, 0x01	; 1
    54ea:	5f 01       	movw	r10, r30
    54ec:	a8 1a       	sub	r10, r24
    54ee:	b9 0a       	sbc	r11, r25
    54f0:	9a 2c       	mov	r9, r10
	k = 0;


	while (k < n)
    54f2:	aa 20       	and	r10, r10
    54f4:	b9 f0       	breq	.+46     	; 0x5524 <asciiStringToNibble+0x5e>
    54f6:	c0 e0       	ldi	r28, 0x00	; 0
	{
		*outStr = (Ascii_to_nible ( *(inStr+k) ) * 16)
    54f8:	86 01       	movw	r16, r12
    54fa:	0c 0f       	add	r16, r28
    54fc:	11 1d       	adc	r17, r1
    54fe:	f8 01       	movw	r30, r16
    5500:	80 81       	ld	r24, Z
    5502:	0e 94 4e 2a 	call	0x549c	; 0x549c <Ascii_to_nible>
    5506:	d8 2f       	mov	r29, r24
		+  Ascii_to_nible ( *(inStr+k+1));
    5508:	f8 01       	movw	r30, r16
    550a:	81 81       	ldd	r24, Z+1	; 0x01
    550c:	0e 94 4e 2a 	call	0x549c	; 0x549c <Ascii_to_nible>
	k = 0;


	while (k < n)
	{
		*outStr = (Ascii_to_nible ( *(inStr+k) ) * 16)
    5510:	f0 e1       	ldi	r31, 0x10	; 16
    5512:	df 9f       	mul	r29, r31
    5514:	80 0d       	add	r24, r0
    5516:	11 24       	eor	r1, r1
    5518:	f7 01       	movw	r30, r14
    551a:	81 93       	st	Z+, r24
    551c:	7f 01       	movw	r14, r30
		+  Ascii_to_nible ( *(inStr+k+1));
		k += 2;
    551e:	ce 5f       	subi	r28, 0xFE	; 254
	
	n = strlen(inStr);
	k = 0;


	while (k < n)
    5520:	c9 15       	cp	r28, r9
    5522:	50 f3       	brcs	.-44     	; 0x54f8 <asciiStringToNibble+0x32>
		+  Ascii_to_nible ( *(inStr+k+1));
		k += 2;
		
		outStr++;
	}
	return n/2;
    5524:	8a 2d       	mov	r24, r10
    5526:	86 95       	lsr	r24
}
    5528:	df 91       	pop	r29
    552a:	cf 91       	pop	r28
    552c:	1f 91       	pop	r17
    552e:	0f 91       	pop	r16
    5530:	ff 90       	pop	r15
    5532:	ef 90       	pop	r14
    5534:	df 90       	pop	r13
    5536:	cf 90       	pop	r12
    5538:	bf 90       	pop	r11
    553a:	af 90       	pop	r10
    553c:	9f 90       	pop	r9
    553e:	08 95       	ret

00005540 <vfprintf>:
    5540:	2f 92       	push	r2
    5542:	3f 92       	push	r3
    5544:	4f 92       	push	r4
    5546:	5f 92       	push	r5
    5548:	6f 92       	push	r6
    554a:	7f 92       	push	r7
    554c:	8f 92       	push	r8
    554e:	9f 92       	push	r9
    5550:	af 92       	push	r10
    5552:	bf 92       	push	r11
    5554:	cf 92       	push	r12
    5556:	df 92       	push	r13
    5558:	ef 92       	push	r14
    555a:	ff 92       	push	r15
    555c:	0f 93       	push	r16
    555e:	1f 93       	push	r17
    5560:	cf 93       	push	r28
    5562:	df 93       	push	r29
    5564:	cd b7       	in	r28, 0x3d	; 61
    5566:	de b7       	in	r29, 0x3e	; 62
    5568:	63 97       	sbiw	r28, 0x13	; 19
    556a:	0f b6       	in	r0, 0x3f	; 63
    556c:	f8 94       	cli
    556e:	de bf       	out	0x3e, r29	; 62
    5570:	0f be       	out	0x3f, r0	; 63
    5572:	cd bf       	out	0x3d, r28	; 61
    5574:	6c 01       	movw	r12, r24
    5576:	4b 01       	movw	r8, r22
    5578:	2a 01       	movw	r4, r20
    557a:	fc 01       	movw	r30, r24
    557c:	17 82       	std	Z+7, r1	; 0x07
    557e:	16 82       	std	Z+6, r1	; 0x06
    5580:	83 81       	ldd	r24, Z+3	; 0x03
    5582:	81 ff       	sbrs	r24, 1
    5584:	43 c3       	rjmp	.+1670   	; 0x5c0c <vfprintf+0x6cc>
    5586:	ae 01       	movw	r20, r28
    5588:	4f 5f       	subi	r20, 0xFF	; 255
    558a:	5f 4f       	sbci	r21, 0xFF	; 255
    558c:	3a 01       	movw	r6, r20
    558e:	f6 01       	movw	r30, r12
    5590:	93 81       	ldd	r25, Z+3	; 0x03
    5592:	f4 01       	movw	r30, r8
    5594:	93 fd       	sbrc	r25, 3
    5596:	85 91       	lpm	r24, Z+
    5598:	93 ff       	sbrs	r25, 3
    559a:	81 91       	ld	r24, Z+
    559c:	4f 01       	movw	r8, r30
    559e:	88 23       	and	r24, r24
    55a0:	09 f4       	brne	.+2      	; 0x55a4 <vfprintf+0x64>
    55a2:	30 c3       	rjmp	.+1632   	; 0x5c04 <vfprintf+0x6c4>
    55a4:	85 32       	cpi	r24, 0x25	; 37
    55a6:	39 f4       	brne	.+14     	; 0x55b6 <vfprintf+0x76>
    55a8:	93 fd       	sbrc	r25, 3
    55aa:	85 91       	lpm	r24, Z+
    55ac:	93 ff       	sbrs	r25, 3
    55ae:	81 91       	ld	r24, Z+
    55b0:	4f 01       	movw	r8, r30
    55b2:	85 32       	cpi	r24, 0x25	; 37
    55b4:	39 f4       	brne	.+14     	; 0x55c4 <vfprintf+0x84>
    55b6:	b6 01       	movw	r22, r12
    55b8:	90 e0       	ldi	r25, 0x00	; 0
    55ba:	0e 94 bd 34 	call	0x697a	; 0x697a <fputc>
    55be:	52 01       	movw	r10, r4
    55c0:	25 01       	movw	r4, r10
    55c2:	e5 cf       	rjmp	.-54     	; 0x558e <vfprintf+0x4e>
    55c4:	10 e0       	ldi	r17, 0x00	; 0
    55c6:	f1 2c       	mov	r15, r1
    55c8:	20 e0       	ldi	r18, 0x00	; 0
    55ca:	20 32       	cpi	r18, 0x20	; 32
    55cc:	a0 f4       	brcc	.+40     	; 0x55f6 <vfprintf+0xb6>
    55ce:	8b 32       	cpi	r24, 0x2B	; 43
    55d0:	69 f0       	breq	.+26     	; 0x55ec <vfprintf+0xac>
    55d2:	30 f4       	brcc	.+12     	; 0x55e0 <vfprintf+0xa0>
    55d4:	80 32       	cpi	r24, 0x20	; 32
    55d6:	59 f0       	breq	.+22     	; 0x55ee <vfprintf+0xae>
    55d8:	83 32       	cpi	r24, 0x23	; 35
    55da:	69 f4       	brne	.+26     	; 0x55f6 <vfprintf+0xb6>
    55dc:	20 61       	ori	r18, 0x10	; 16
    55de:	2c c0       	rjmp	.+88     	; 0x5638 <vfprintf+0xf8>
    55e0:	8d 32       	cpi	r24, 0x2D	; 45
    55e2:	39 f0       	breq	.+14     	; 0x55f2 <vfprintf+0xb2>
    55e4:	80 33       	cpi	r24, 0x30	; 48
    55e6:	39 f4       	brne	.+14     	; 0x55f6 <vfprintf+0xb6>
    55e8:	21 60       	ori	r18, 0x01	; 1
    55ea:	26 c0       	rjmp	.+76     	; 0x5638 <vfprintf+0xf8>
    55ec:	22 60       	ori	r18, 0x02	; 2
    55ee:	24 60       	ori	r18, 0x04	; 4
    55f0:	23 c0       	rjmp	.+70     	; 0x5638 <vfprintf+0xf8>
    55f2:	28 60       	ori	r18, 0x08	; 8
    55f4:	21 c0       	rjmp	.+66     	; 0x5638 <vfprintf+0xf8>
    55f6:	27 fd       	sbrc	r18, 7
    55f8:	27 c0       	rjmp	.+78     	; 0x5648 <vfprintf+0x108>
    55fa:	30 ed       	ldi	r19, 0xD0	; 208
    55fc:	38 0f       	add	r19, r24
    55fe:	3a 30       	cpi	r19, 0x0A	; 10
    5600:	78 f4       	brcc	.+30     	; 0x5620 <vfprintf+0xe0>
    5602:	26 ff       	sbrs	r18, 6
    5604:	06 c0       	rjmp	.+12     	; 0x5612 <vfprintf+0xd2>
    5606:	fa e0       	ldi	r31, 0x0A	; 10
    5608:	1f 9f       	mul	r17, r31
    560a:	30 0d       	add	r19, r0
    560c:	11 24       	eor	r1, r1
    560e:	13 2f       	mov	r17, r19
    5610:	13 c0       	rjmp	.+38     	; 0x5638 <vfprintf+0xf8>
    5612:	4a e0       	ldi	r20, 0x0A	; 10
    5614:	f4 9e       	mul	r15, r20
    5616:	30 0d       	add	r19, r0
    5618:	11 24       	eor	r1, r1
    561a:	f3 2e       	mov	r15, r19
    561c:	20 62       	ori	r18, 0x20	; 32
    561e:	0c c0       	rjmp	.+24     	; 0x5638 <vfprintf+0xf8>
    5620:	8e 32       	cpi	r24, 0x2E	; 46
    5622:	21 f4       	brne	.+8      	; 0x562c <vfprintf+0xec>
    5624:	26 fd       	sbrc	r18, 6
    5626:	ee c2       	rjmp	.+1500   	; 0x5c04 <vfprintf+0x6c4>
    5628:	20 64       	ori	r18, 0x40	; 64
    562a:	06 c0       	rjmp	.+12     	; 0x5638 <vfprintf+0xf8>
    562c:	8c 36       	cpi	r24, 0x6C	; 108
    562e:	11 f4       	brne	.+4      	; 0x5634 <vfprintf+0xf4>
    5630:	20 68       	ori	r18, 0x80	; 128
    5632:	02 c0       	rjmp	.+4      	; 0x5638 <vfprintf+0xf8>
    5634:	88 36       	cpi	r24, 0x68	; 104
    5636:	41 f4       	brne	.+16     	; 0x5648 <vfprintf+0x108>
    5638:	f4 01       	movw	r30, r8
    563a:	93 fd       	sbrc	r25, 3
    563c:	85 91       	lpm	r24, Z+
    563e:	93 ff       	sbrs	r25, 3
    5640:	81 91       	ld	r24, Z+
    5642:	4f 01       	movw	r8, r30
    5644:	81 11       	cpse	r24, r1
    5646:	c1 cf       	rjmp	.-126    	; 0x55ca <vfprintf+0x8a>
    5648:	9b eb       	ldi	r25, 0xBB	; 187
    564a:	98 0f       	add	r25, r24
    564c:	93 30       	cpi	r25, 0x03	; 3
    564e:	18 f4       	brcc	.+6      	; 0x5656 <vfprintf+0x116>
    5650:	20 61       	ori	r18, 0x10	; 16
    5652:	80 5e       	subi	r24, 0xE0	; 224
    5654:	06 c0       	rjmp	.+12     	; 0x5662 <vfprintf+0x122>
    5656:	9b e9       	ldi	r25, 0x9B	; 155
    5658:	98 0f       	add	r25, r24
    565a:	93 30       	cpi	r25, 0x03	; 3
    565c:	08 f0       	brcs	.+2      	; 0x5660 <vfprintf+0x120>
    565e:	71 c1       	rjmp	.+738    	; 0x5942 <vfprintf+0x402>
    5660:	2f 7e       	andi	r18, 0xEF	; 239
    5662:	26 ff       	sbrs	r18, 6
    5664:	16 e0       	ldi	r17, 0x06	; 6
    5666:	2f 73       	andi	r18, 0x3F	; 63
    5668:	32 2e       	mov	r3, r18
    566a:	85 36       	cpi	r24, 0x65	; 101
    566c:	19 f4       	brne	.+6      	; 0x5674 <vfprintf+0x134>
    566e:	20 64       	ori	r18, 0x40	; 64
    5670:	32 2e       	mov	r3, r18
    5672:	08 c0       	rjmp	.+16     	; 0x5684 <vfprintf+0x144>
    5674:	86 36       	cpi	r24, 0x66	; 102
    5676:	21 f4       	brne	.+8      	; 0x5680 <vfprintf+0x140>
    5678:	f2 2f       	mov	r31, r18
    567a:	f0 68       	ori	r31, 0x80	; 128
    567c:	3f 2e       	mov	r3, r31
    567e:	02 c0       	rjmp	.+4      	; 0x5684 <vfprintf+0x144>
    5680:	11 11       	cpse	r17, r1
    5682:	11 50       	subi	r17, 0x01	; 1
    5684:	37 fe       	sbrs	r3, 7
    5686:	07 c0       	rjmp	.+14     	; 0x5696 <vfprintf+0x156>
    5688:	1c 33       	cpi	r17, 0x3C	; 60
    568a:	50 f4       	brcc	.+20     	; 0x56a0 <vfprintf+0x160>
    568c:	ee 24       	eor	r14, r14
    568e:	e3 94       	inc	r14
    5690:	e1 0e       	add	r14, r17
    5692:	27 e0       	ldi	r18, 0x07	; 7
    5694:	0b c0       	rjmp	.+22     	; 0x56ac <vfprintf+0x16c>
    5696:	18 30       	cpi	r17, 0x08	; 8
    5698:	38 f0       	brcs	.+14     	; 0x56a8 <vfprintf+0x168>
    569a:	27 e0       	ldi	r18, 0x07	; 7
    569c:	17 e0       	ldi	r17, 0x07	; 7
    569e:	05 c0       	rjmp	.+10     	; 0x56aa <vfprintf+0x16a>
    56a0:	27 e0       	ldi	r18, 0x07	; 7
    56a2:	4c e3       	ldi	r20, 0x3C	; 60
    56a4:	e4 2e       	mov	r14, r20
    56a6:	02 c0       	rjmp	.+4      	; 0x56ac <vfprintf+0x16c>
    56a8:	21 2f       	mov	r18, r17
    56aa:	e1 2c       	mov	r14, r1
    56ac:	52 01       	movw	r10, r4
    56ae:	44 e0       	ldi	r20, 0x04	; 4
    56b0:	a4 0e       	add	r10, r20
    56b2:	b1 1c       	adc	r11, r1
    56b4:	f2 01       	movw	r30, r4
    56b6:	60 81       	ld	r22, Z
    56b8:	71 81       	ldd	r23, Z+1	; 0x01
    56ba:	82 81       	ldd	r24, Z+2	; 0x02
    56bc:	93 81       	ldd	r25, Z+3	; 0x03
    56be:	0e 2d       	mov	r16, r14
    56c0:	a3 01       	movw	r20, r6
    56c2:	0e 94 42 33 	call	0x6684	; 0x6684 <__ftoa_engine>
    56c6:	2c 01       	movw	r4, r24
    56c8:	09 81       	ldd	r16, Y+1	; 0x01
    56ca:	00 ff       	sbrs	r16, 0
    56cc:	02 c0       	rjmp	.+4      	; 0x56d2 <vfprintf+0x192>
    56ce:	03 ff       	sbrs	r16, 3
    56d0:	07 c0       	rjmp	.+14     	; 0x56e0 <vfprintf+0x1a0>
    56d2:	31 fc       	sbrc	r3, 1
    56d4:	08 c0       	rjmp	.+16     	; 0x56e6 <vfprintf+0x1a6>
    56d6:	32 fe       	sbrs	r3, 2
    56d8:	09 c0       	rjmp	.+18     	; 0x56ec <vfprintf+0x1ac>
    56da:	30 e2       	ldi	r19, 0x20	; 32
    56dc:	23 2e       	mov	r2, r19
    56de:	07 c0       	rjmp	.+14     	; 0x56ee <vfprintf+0x1ae>
    56e0:	2d e2       	ldi	r18, 0x2D	; 45
    56e2:	22 2e       	mov	r2, r18
    56e4:	04 c0       	rjmp	.+8      	; 0x56ee <vfprintf+0x1ae>
    56e6:	9b e2       	ldi	r25, 0x2B	; 43
    56e8:	29 2e       	mov	r2, r25
    56ea:	01 c0       	rjmp	.+2      	; 0x56ee <vfprintf+0x1ae>
    56ec:	21 2c       	mov	r2, r1
    56ee:	80 2f       	mov	r24, r16
    56f0:	8c 70       	andi	r24, 0x0C	; 12
    56f2:	19 f0       	breq	.+6      	; 0x56fa <vfprintf+0x1ba>
    56f4:	21 10       	cpse	r2, r1
    56f6:	68 c2       	rjmp	.+1232   	; 0x5bc8 <vfprintf+0x688>
    56f8:	a8 c2       	rjmp	.+1360   	; 0x5c4a <vfprintf+0x70a>
    56fa:	37 fe       	sbrs	r3, 7
    56fc:	0f c0       	rjmp	.+30     	; 0x571c <vfprintf+0x1dc>
    56fe:	e4 0c       	add	r14, r4
    5700:	04 ff       	sbrs	r16, 4
    5702:	04 c0       	rjmp	.+8      	; 0x570c <vfprintf+0x1cc>
    5704:	8a 81       	ldd	r24, Y+2	; 0x02
    5706:	81 33       	cpi	r24, 0x31	; 49
    5708:	09 f4       	brne	.+2      	; 0x570c <vfprintf+0x1cc>
    570a:	ea 94       	dec	r14
    570c:	1e 14       	cp	r1, r14
    570e:	74 f5       	brge	.+92     	; 0x576c <vfprintf+0x22c>
    5710:	f8 e0       	ldi	r31, 0x08	; 8
    5712:	fe 15       	cp	r31, r14
    5714:	78 f5       	brcc	.+94     	; 0x5774 <vfprintf+0x234>
    5716:	88 e0       	ldi	r24, 0x08	; 8
    5718:	e8 2e       	mov	r14, r24
    571a:	2c c0       	rjmp	.+88     	; 0x5774 <vfprintf+0x234>
    571c:	36 fc       	sbrc	r3, 6
    571e:	2a c0       	rjmp	.+84     	; 0x5774 <vfprintf+0x234>
    5720:	81 2f       	mov	r24, r17
    5722:	90 e0       	ldi	r25, 0x00	; 0
    5724:	84 15       	cp	r24, r4
    5726:	95 05       	cpc	r25, r5
    5728:	9c f0       	brlt	.+38     	; 0x5750 <vfprintf+0x210>
    572a:	2c ef       	ldi	r18, 0xFC	; 252
    572c:	42 16       	cp	r4, r18
    572e:	2f ef       	ldi	r18, 0xFF	; 255
    5730:	52 06       	cpc	r5, r18
    5732:	74 f0       	brlt	.+28     	; 0x5750 <vfprintf+0x210>
    5734:	43 2d       	mov	r20, r3
    5736:	40 68       	ori	r20, 0x80	; 128
    5738:	34 2e       	mov	r3, r20
    573a:	0a c0       	rjmp	.+20     	; 0x5750 <vfprintf+0x210>
    573c:	e2 e0       	ldi	r30, 0x02	; 2
    573e:	f0 e0       	ldi	r31, 0x00	; 0
    5740:	ec 0f       	add	r30, r28
    5742:	fd 1f       	adc	r31, r29
    5744:	e1 0f       	add	r30, r17
    5746:	f1 1d       	adc	r31, r1
    5748:	80 81       	ld	r24, Z
    574a:	80 33       	cpi	r24, 0x30	; 48
    574c:	19 f4       	brne	.+6      	; 0x5754 <vfprintf+0x214>
    574e:	11 50       	subi	r17, 0x01	; 1
    5750:	11 11       	cpse	r17, r1
    5752:	f4 cf       	rjmp	.-24     	; 0x573c <vfprintf+0x1fc>
    5754:	37 fe       	sbrs	r3, 7
    5756:	0e c0       	rjmp	.+28     	; 0x5774 <vfprintf+0x234>
    5758:	ee 24       	eor	r14, r14
    575a:	e3 94       	inc	r14
    575c:	e1 0e       	add	r14, r17
    575e:	81 2f       	mov	r24, r17
    5760:	90 e0       	ldi	r25, 0x00	; 0
    5762:	48 16       	cp	r4, r24
    5764:	59 06       	cpc	r5, r25
    5766:	2c f4       	brge	.+10     	; 0x5772 <vfprintf+0x232>
    5768:	14 19       	sub	r17, r4
    576a:	04 c0       	rjmp	.+8      	; 0x5774 <vfprintf+0x234>
    576c:	ee 24       	eor	r14, r14
    576e:	e3 94       	inc	r14
    5770:	01 c0       	rjmp	.+2      	; 0x5774 <vfprintf+0x234>
    5772:	10 e0       	ldi	r17, 0x00	; 0
    5774:	37 fe       	sbrs	r3, 7
    5776:	06 c0       	rjmp	.+12     	; 0x5784 <vfprintf+0x244>
    5778:	14 14       	cp	r1, r4
    577a:	15 04       	cpc	r1, r5
    577c:	34 f4       	brge	.+12     	; 0x578a <vfprintf+0x24a>
    577e:	c2 01       	movw	r24, r4
    5780:	01 96       	adiw	r24, 0x01	; 1
    5782:	05 c0       	rjmp	.+10     	; 0x578e <vfprintf+0x24e>
    5784:	85 e0       	ldi	r24, 0x05	; 5
    5786:	90 e0       	ldi	r25, 0x00	; 0
    5788:	02 c0       	rjmp	.+4      	; 0x578e <vfprintf+0x24e>
    578a:	81 e0       	ldi	r24, 0x01	; 1
    578c:	90 e0       	ldi	r25, 0x00	; 0
    578e:	21 10       	cpse	r2, r1
    5790:	01 96       	adiw	r24, 0x01	; 1
    5792:	11 23       	and	r17, r17
    5794:	31 f0       	breq	.+12     	; 0x57a2 <vfprintf+0x262>
    5796:	21 2f       	mov	r18, r17
    5798:	30 e0       	ldi	r19, 0x00	; 0
    579a:	2f 5f       	subi	r18, 0xFF	; 255
    579c:	3f 4f       	sbci	r19, 0xFF	; 255
    579e:	82 0f       	add	r24, r18
    57a0:	93 1f       	adc	r25, r19
    57a2:	2f 2d       	mov	r18, r15
    57a4:	30 e0       	ldi	r19, 0x00	; 0
    57a6:	82 17       	cp	r24, r18
    57a8:	93 07       	cpc	r25, r19
    57aa:	14 f4       	brge	.+4      	; 0x57b0 <vfprintf+0x270>
    57ac:	f8 1a       	sub	r15, r24
    57ae:	01 c0       	rjmp	.+2      	; 0x57b2 <vfprintf+0x272>
    57b0:	f1 2c       	mov	r15, r1
    57b2:	83 2d       	mov	r24, r3
    57b4:	89 70       	andi	r24, 0x09	; 9
    57b6:	49 f4       	brne	.+18     	; 0x57ca <vfprintf+0x28a>
    57b8:	ff 20       	and	r15, r15
    57ba:	39 f0       	breq	.+14     	; 0x57ca <vfprintf+0x28a>
    57bc:	b6 01       	movw	r22, r12
    57be:	80 e2       	ldi	r24, 0x20	; 32
    57c0:	90 e0       	ldi	r25, 0x00	; 0
    57c2:	0e 94 bd 34 	call	0x697a	; 0x697a <fputc>
    57c6:	fa 94       	dec	r15
    57c8:	f7 cf       	rjmp	.-18     	; 0x57b8 <vfprintf+0x278>
    57ca:	22 20       	and	r2, r2
    57cc:	29 f0       	breq	.+10     	; 0x57d8 <vfprintf+0x298>
    57ce:	b6 01       	movw	r22, r12
    57d0:	82 2d       	mov	r24, r2
    57d2:	90 e0       	ldi	r25, 0x00	; 0
    57d4:	0e 94 bd 34 	call	0x697a	; 0x697a <fputc>
    57d8:	33 fc       	sbrc	r3, 3
    57da:	09 c0       	rjmp	.+18     	; 0x57ee <vfprintf+0x2ae>
    57dc:	ff 20       	and	r15, r15
    57de:	39 f0       	breq	.+14     	; 0x57ee <vfprintf+0x2ae>
    57e0:	b6 01       	movw	r22, r12
    57e2:	80 e3       	ldi	r24, 0x30	; 48
    57e4:	90 e0       	ldi	r25, 0x00	; 0
    57e6:	0e 94 bd 34 	call	0x697a	; 0x697a <fputc>
    57ea:	fa 94       	dec	r15
    57ec:	f7 cf       	rjmp	.-18     	; 0x57dc <vfprintf+0x29c>
    57ee:	37 fe       	sbrs	r3, 7
    57f0:	5a c0       	rjmp	.+180    	; 0x58a6 <vfprintf+0x366>
    57f2:	94 2d       	mov	r25, r4
    57f4:	85 2d       	mov	r24, r5
    57f6:	57 fe       	sbrs	r5, 7
    57f8:	02 c0       	rjmp	.+4      	; 0x57fe <vfprintf+0x2be>
    57fa:	90 e0       	ldi	r25, 0x00	; 0
    57fc:	80 e0       	ldi	r24, 0x00	; 0
    57fe:	29 2e       	mov	r2, r25
    5800:	38 2e       	mov	r3, r24
    5802:	20 e0       	ldi	r18, 0x00	; 0
    5804:	30 e0       	ldi	r19, 0x00	; 0
    5806:	a2 01       	movw	r20, r4
    5808:	4e 19       	sub	r20, r14
    580a:	51 09       	sbc	r21, r1
    580c:	5d 87       	std	Y+13, r21	; 0x0d
    580e:	4c 87       	std	Y+12, r20	; 0x0c
    5810:	a2 01       	movw	r20, r4
    5812:	42 19       	sub	r20, r2
    5814:	53 09       	sbc	r21, r3
    5816:	5f 87       	std	Y+15, r21	; 0x0f
    5818:	4e 87       	std	Y+14, r20	; 0x0e
    581a:	61 2f       	mov	r22, r17
    581c:	70 e0       	ldi	r23, 0x00	; 0
    581e:	44 27       	eor	r20, r20
    5820:	55 27       	eor	r21, r21
    5822:	46 1b       	sub	r20, r22
    5824:	57 0b       	sbc	r21, r23
    5826:	59 8b       	std	Y+17, r21	; 0x11
    5828:	48 8b       	std	Y+16, r20	; 0x10
    582a:	5f ef       	ldi	r21, 0xFF	; 255
    582c:	25 16       	cp	r2, r21
    582e:	35 06       	cpc	r3, r21
    5830:	49 f4       	brne	.+18     	; 0x5844 <vfprintf+0x304>
    5832:	b6 01       	movw	r22, r12
    5834:	8e e2       	ldi	r24, 0x2E	; 46
    5836:	90 e0       	ldi	r25, 0x00	; 0
    5838:	2a 8b       	std	Y+18, r18	; 0x12
    583a:	3b 8b       	std	Y+19, r19	; 0x13
    583c:	0e 94 bd 34 	call	0x697a	; 0x697a <fputc>
    5840:	3b 89       	ldd	r19, Y+19	; 0x13
    5842:	2a 89       	ldd	r18, Y+18	; 0x12
    5844:	42 14       	cp	r4, r2
    5846:	53 04       	cpc	r5, r3
    5848:	6c f0       	brlt	.+26     	; 0x5864 <vfprintf+0x324>
    584a:	4c 85       	ldd	r20, Y+12	; 0x0c
    584c:	5d 85       	ldd	r21, Y+13	; 0x0d
    584e:	42 15       	cp	r20, r2
    5850:	53 05       	cpc	r21, r3
    5852:	44 f4       	brge	.+16     	; 0x5864 <vfprintf+0x324>
    5854:	ee 85       	ldd	r30, Y+14	; 0x0e
    5856:	ff 85       	ldd	r31, Y+15	; 0x0f
    5858:	e2 0f       	add	r30, r18
    585a:	f3 1f       	adc	r31, r19
    585c:	e6 0d       	add	r30, r6
    585e:	f7 1d       	adc	r31, r7
    5860:	81 81       	ldd	r24, Z+1	; 0x01
    5862:	01 c0       	rjmp	.+2      	; 0x5866 <vfprintf+0x326>
    5864:	80 e3       	ldi	r24, 0x30	; 48
    5866:	51 e0       	ldi	r21, 0x01	; 1
    5868:	25 1a       	sub	r2, r21
    586a:	31 08       	sbc	r3, r1
    586c:	2f 5f       	subi	r18, 0xFF	; 255
    586e:	3f 4f       	sbci	r19, 0xFF	; 255
    5870:	48 89       	ldd	r20, Y+16	; 0x10
    5872:	59 89       	ldd	r21, Y+17	; 0x11
    5874:	24 16       	cp	r2, r20
    5876:	35 06       	cpc	r3, r21
    5878:	4c f0       	brlt	.+18     	; 0x588c <vfprintf+0x34c>
    587a:	b6 01       	movw	r22, r12
    587c:	90 e0       	ldi	r25, 0x00	; 0
    587e:	2a 8b       	std	Y+18, r18	; 0x12
    5880:	3b 8b       	std	Y+19, r19	; 0x13
    5882:	0e 94 bd 34 	call	0x697a	; 0x697a <fputc>
    5886:	2a 89       	ldd	r18, Y+18	; 0x12
    5888:	3b 89       	ldd	r19, Y+19	; 0x13
    588a:	cf cf       	rjmp	.-98     	; 0x582a <vfprintf+0x2ea>
    588c:	24 14       	cp	r2, r4
    588e:	35 04       	cpc	r3, r5
    5890:	39 f4       	brne	.+14     	; 0x58a0 <vfprintf+0x360>
    5892:	9a 81       	ldd	r25, Y+2	; 0x02
    5894:	96 33       	cpi	r25, 0x36	; 54
    5896:	18 f4       	brcc	.+6      	; 0x589e <vfprintf+0x35e>
    5898:	95 33       	cpi	r25, 0x35	; 53
    589a:	11 f4       	brne	.+4      	; 0x58a0 <vfprintf+0x360>
    589c:	04 ff       	sbrs	r16, 4
    589e:	81 e3       	ldi	r24, 0x31	; 49
    58a0:	b6 01       	movw	r22, r12
    58a2:	90 e0       	ldi	r25, 0x00	; 0
    58a4:	4b c0       	rjmp	.+150    	; 0x593c <vfprintf+0x3fc>
    58a6:	8a 81       	ldd	r24, Y+2	; 0x02
    58a8:	81 33       	cpi	r24, 0x31	; 49
    58aa:	09 f0       	breq	.+2      	; 0x58ae <vfprintf+0x36e>
    58ac:	0f 7e       	andi	r16, 0xEF	; 239
    58ae:	b6 01       	movw	r22, r12
    58b0:	90 e0       	ldi	r25, 0x00	; 0
    58b2:	0e 94 bd 34 	call	0x697a	; 0x697a <fputc>
    58b6:	11 11       	cpse	r17, r1
    58b8:	05 c0       	rjmp	.+10     	; 0x58c4 <vfprintf+0x384>
    58ba:	34 fc       	sbrc	r3, 4
    58bc:	18 c0       	rjmp	.+48     	; 0x58ee <vfprintf+0x3ae>
    58be:	85 e6       	ldi	r24, 0x65	; 101
    58c0:	90 e0       	ldi	r25, 0x00	; 0
    58c2:	17 c0       	rjmp	.+46     	; 0x58f2 <vfprintf+0x3b2>
    58c4:	b6 01       	movw	r22, r12
    58c6:	8e e2       	ldi	r24, 0x2E	; 46
    58c8:	90 e0       	ldi	r25, 0x00	; 0
    58ca:	0e 94 bd 34 	call	0x697a	; 0x697a <fputc>
    58ce:	82 e0       	ldi	r24, 0x02	; 2
    58d0:	ee 24       	eor	r14, r14
    58d2:	e3 94       	inc	r14
    58d4:	e8 0e       	add	r14, r24
    58d6:	f3 01       	movw	r30, r6
    58d8:	e8 0f       	add	r30, r24
    58da:	f1 1d       	adc	r31, r1
    58dc:	80 81       	ld	r24, Z
    58de:	b6 01       	movw	r22, r12
    58e0:	90 e0       	ldi	r25, 0x00	; 0
    58e2:	0e 94 bd 34 	call	0x697a	; 0x697a <fputc>
    58e6:	11 50       	subi	r17, 0x01	; 1
    58e8:	8e 2d       	mov	r24, r14
    58ea:	91 f7       	brne	.-28     	; 0x58d0 <vfprintf+0x390>
    58ec:	e6 cf       	rjmp	.-52     	; 0x58ba <vfprintf+0x37a>
    58ee:	85 e4       	ldi	r24, 0x45	; 69
    58f0:	90 e0       	ldi	r25, 0x00	; 0
    58f2:	b6 01       	movw	r22, r12
    58f4:	0e 94 bd 34 	call	0x697a	; 0x697a <fputc>
    58f8:	57 fc       	sbrc	r5, 7
    58fa:	05 c0       	rjmp	.+10     	; 0x5906 <vfprintf+0x3c6>
    58fc:	41 14       	cp	r4, r1
    58fe:	51 04       	cpc	r5, r1
    5900:	39 f4       	brne	.+14     	; 0x5910 <vfprintf+0x3d0>
    5902:	04 ff       	sbrs	r16, 4
    5904:	05 c0       	rjmp	.+10     	; 0x5910 <vfprintf+0x3d0>
    5906:	51 94       	neg	r5
    5908:	41 94       	neg	r4
    590a:	51 08       	sbc	r5, r1
    590c:	8d e2       	ldi	r24, 0x2D	; 45
    590e:	01 c0       	rjmp	.+2      	; 0x5912 <vfprintf+0x3d2>
    5910:	8b e2       	ldi	r24, 0x2B	; 43
    5912:	b6 01       	movw	r22, r12
    5914:	90 e0       	ldi	r25, 0x00	; 0
    5916:	0e 94 bd 34 	call	0x697a	; 0x697a <fputc>
    591a:	80 e3       	ldi	r24, 0x30	; 48
    591c:	9a e0       	ldi	r25, 0x0A	; 10
    591e:	49 16       	cp	r4, r25
    5920:	51 04       	cpc	r5, r1
    5922:	2c f0       	brlt	.+10     	; 0x592e <vfprintf+0x3ee>
    5924:	8f 5f       	subi	r24, 0xFF	; 255
    5926:	5a e0       	ldi	r21, 0x0A	; 10
    5928:	45 1a       	sub	r4, r21
    592a:	51 08       	sbc	r5, r1
    592c:	f7 cf       	rjmp	.-18     	; 0x591c <vfprintf+0x3dc>
    592e:	b6 01       	movw	r22, r12
    5930:	90 e0       	ldi	r25, 0x00	; 0
    5932:	0e 94 bd 34 	call	0x697a	; 0x697a <fputc>
    5936:	b6 01       	movw	r22, r12
    5938:	c2 01       	movw	r24, r4
    593a:	c0 96       	adiw	r24, 0x30	; 48
    593c:	0e 94 bd 34 	call	0x697a	; 0x697a <fputc>
    5940:	57 c1       	rjmp	.+686    	; 0x5bf0 <vfprintf+0x6b0>
    5942:	83 36       	cpi	r24, 0x63	; 99
    5944:	31 f0       	breq	.+12     	; 0x5952 <vfprintf+0x412>
    5946:	83 37       	cpi	r24, 0x73	; 115
    5948:	79 f0       	breq	.+30     	; 0x5968 <vfprintf+0x428>
    594a:	83 35       	cpi	r24, 0x53	; 83
    594c:	09 f0       	breq	.+2      	; 0x5950 <vfprintf+0x410>
    594e:	58 c0       	rjmp	.+176    	; 0x5a00 <vfprintf+0x4c0>
    5950:	21 c0       	rjmp	.+66     	; 0x5994 <vfprintf+0x454>
    5952:	52 01       	movw	r10, r4
    5954:	e2 e0       	ldi	r30, 0x02	; 2
    5956:	ae 0e       	add	r10, r30
    5958:	b1 1c       	adc	r11, r1
    595a:	f2 01       	movw	r30, r4
    595c:	80 81       	ld	r24, Z
    595e:	89 83       	std	Y+1, r24	; 0x01
    5960:	01 e0       	ldi	r16, 0x01	; 1
    5962:	10 e0       	ldi	r17, 0x00	; 0
    5964:	23 01       	movw	r4, r6
    5966:	14 c0       	rjmp	.+40     	; 0x5990 <vfprintf+0x450>
    5968:	52 01       	movw	r10, r4
    596a:	f2 e0       	ldi	r31, 0x02	; 2
    596c:	af 0e       	add	r10, r31
    596e:	b1 1c       	adc	r11, r1
    5970:	f2 01       	movw	r30, r4
    5972:	40 80       	ld	r4, Z
    5974:	51 80       	ldd	r5, Z+1	; 0x01
    5976:	26 ff       	sbrs	r18, 6
    5978:	03 c0       	rjmp	.+6      	; 0x5980 <vfprintf+0x440>
    597a:	61 2f       	mov	r22, r17
    597c:	70 e0       	ldi	r23, 0x00	; 0
    597e:	02 c0       	rjmp	.+4      	; 0x5984 <vfprintf+0x444>
    5980:	6f ef       	ldi	r22, 0xFF	; 255
    5982:	7f ef       	ldi	r23, 0xFF	; 255
    5984:	c2 01       	movw	r24, r4
    5986:	2a 8b       	std	Y+18, r18	; 0x12
    5988:	0e 94 6e 34 	call	0x68dc	; 0x68dc <strnlen>
    598c:	8c 01       	movw	r16, r24
    598e:	2a 89       	ldd	r18, Y+18	; 0x12
    5990:	2f 77       	andi	r18, 0x7F	; 127
    5992:	15 c0       	rjmp	.+42     	; 0x59be <vfprintf+0x47e>
    5994:	52 01       	movw	r10, r4
    5996:	f2 e0       	ldi	r31, 0x02	; 2
    5998:	af 0e       	add	r10, r31
    599a:	b1 1c       	adc	r11, r1
    599c:	f2 01       	movw	r30, r4
    599e:	40 80       	ld	r4, Z
    59a0:	51 80       	ldd	r5, Z+1	; 0x01
    59a2:	26 ff       	sbrs	r18, 6
    59a4:	03 c0       	rjmp	.+6      	; 0x59ac <vfprintf+0x46c>
    59a6:	61 2f       	mov	r22, r17
    59a8:	70 e0       	ldi	r23, 0x00	; 0
    59aa:	02 c0       	rjmp	.+4      	; 0x59b0 <vfprintf+0x470>
    59ac:	6f ef       	ldi	r22, 0xFF	; 255
    59ae:	7f ef       	ldi	r23, 0xFF	; 255
    59b0:	c2 01       	movw	r24, r4
    59b2:	2a 8b       	std	Y+18, r18	; 0x12
    59b4:	0e 94 23 34 	call	0x6846	; 0x6846 <strnlen_P>
    59b8:	8c 01       	movw	r16, r24
    59ba:	2a 89       	ldd	r18, Y+18	; 0x12
    59bc:	20 68       	ori	r18, 0x80	; 128
    59be:	32 2e       	mov	r3, r18
    59c0:	23 fd       	sbrc	r18, 3
    59c2:	1a c0       	rjmp	.+52     	; 0x59f8 <vfprintf+0x4b8>
    59c4:	8f 2d       	mov	r24, r15
    59c6:	90 e0       	ldi	r25, 0x00	; 0
    59c8:	08 17       	cp	r16, r24
    59ca:	19 07       	cpc	r17, r25
    59cc:	a8 f4       	brcc	.+42     	; 0x59f8 <vfprintf+0x4b8>
    59ce:	b6 01       	movw	r22, r12
    59d0:	80 e2       	ldi	r24, 0x20	; 32
    59d2:	90 e0       	ldi	r25, 0x00	; 0
    59d4:	0e 94 bd 34 	call	0x697a	; 0x697a <fputc>
    59d8:	fa 94       	dec	r15
    59da:	f4 cf       	rjmp	.-24     	; 0x59c4 <vfprintf+0x484>
    59dc:	f2 01       	movw	r30, r4
    59de:	37 fc       	sbrc	r3, 7
    59e0:	85 91       	lpm	r24, Z+
    59e2:	37 fe       	sbrs	r3, 7
    59e4:	81 91       	ld	r24, Z+
    59e6:	2f 01       	movw	r4, r30
    59e8:	b6 01       	movw	r22, r12
    59ea:	90 e0       	ldi	r25, 0x00	; 0
    59ec:	0e 94 bd 34 	call	0x697a	; 0x697a <fputc>
    59f0:	f1 10       	cpse	r15, r1
    59f2:	fa 94       	dec	r15
    59f4:	01 50       	subi	r16, 0x01	; 1
    59f6:	11 09       	sbc	r17, r1
    59f8:	01 15       	cp	r16, r1
    59fa:	11 05       	cpc	r17, r1
    59fc:	79 f7       	brne	.-34     	; 0x59dc <vfprintf+0x49c>
    59fe:	f8 c0       	rjmp	.+496    	; 0x5bf0 <vfprintf+0x6b0>
    5a00:	84 36       	cpi	r24, 0x64	; 100
    5a02:	11 f0       	breq	.+4      	; 0x5a08 <vfprintf+0x4c8>
    5a04:	89 36       	cpi	r24, 0x69	; 105
    5a06:	59 f5       	brne	.+86     	; 0x5a5e <vfprintf+0x51e>
    5a08:	52 01       	movw	r10, r4
    5a0a:	27 ff       	sbrs	r18, 7
    5a0c:	09 c0       	rjmp	.+18     	; 0x5a20 <vfprintf+0x4e0>
    5a0e:	f4 e0       	ldi	r31, 0x04	; 4
    5a10:	af 0e       	add	r10, r31
    5a12:	b1 1c       	adc	r11, r1
    5a14:	f2 01       	movw	r30, r4
    5a16:	60 81       	ld	r22, Z
    5a18:	71 81       	ldd	r23, Z+1	; 0x01
    5a1a:	82 81       	ldd	r24, Z+2	; 0x02
    5a1c:	93 81       	ldd	r25, Z+3	; 0x03
    5a1e:	0a c0       	rjmp	.+20     	; 0x5a34 <vfprintf+0x4f4>
    5a20:	f2 e0       	ldi	r31, 0x02	; 2
    5a22:	af 0e       	add	r10, r31
    5a24:	b1 1c       	adc	r11, r1
    5a26:	f2 01       	movw	r30, r4
    5a28:	60 81       	ld	r22, Z
    5a2a:	71 81       	ldd	r23, Z+1	; 0x01
    5a2c:	07 2e       	mov	r0, r23
    5a2e:	00 0c       	add	r0, r0
    5a30:	88 0b       	sbc	r24, r24
    5a32:	99 0b       	sbc	r25, r25
    5a34:	2f 76       	andi	r18, 0x6F	; 111
    5a36:	32 2e       	mov	r3, r18
    5a38:	97 ff       	sbrs	r25, 7
    5a3a:	09 c0       	rjmp	.+18     	; 0x5a4e <vfprintf+0x50e>
    5a3c:	90 95       	com	r25
    5a3e:	80 95       	com	r24
    5a40:	70 95       	com	r23
    5a42:	61 95       	neg	r22
    5a44:	7f 4f       	sbci	r23, 0xFF	; 255
    5a46:	8f 4f       	sbci	r24, 0xFF	; 255
    5a48:	9f 4f       	sbci	r25, 0xFF	; 255
    5a4a:	20 68       	ori	r18, 0x80	; 128
    5a4c:	32 2e       	mov	r3, r18
    5a4e:	2a e0       	ldi	r18, 0x0A	; 10
    5a50:	30 e0       	ldi	r19, 0x00	; 0
    5a52:	a3 01       	movw	r20, r6
    5a54:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <__ultoa_invert>
    5a58:	e8 2e       	mov	r14, r24
    5a5a:	e6 18       	sub	r14, r6
    5a5c:	3f c0       	rjmp	.+126    	; 0x5adc <vfprintf+0x59c>
    5a5e:	02 2f       	mov	r16, r18
    5a60:	85 37       	cpi	r24, 0x75	; 117
    5a62:	21 f4       	brne	.+8      	; 0x5a6c <vfprintf+0x52c>
    5a64:	0f 7e       	andi	r16, 0xEF	; 239
    5a66:	2a e0       	ldi	r18, 0x0A	; 10
    5a68:	30 e0       	ldi	r19, 0x00	; 0
    5a6a:	1d c0       	rjmp	.+58     	; 0x5aa6 <vfprintf+0x566>
    5a6c:	09 7f       	andi	r16, 0xF9	; 249
    5a6e:	8f 36       	cpi	r24, 0x6F	; 111
    5a70:	91 f0       	breq	.+36     	; 0x5a96 <vfprintf+0x556>
    5a72:	18 f4       	brcc	.+6      	; 0x5a7a <vfprintf+0x53a>
    5a74:	88 35       	cpi	r24, 0x58	; 88
    5a76:	59 f0       	breq	.+22     	; 0x5a8e <vfprintf+0x54e>
    5a78:	c5 c0       	rjmp	.+394    	; 0x5c04 <vfprintf+0x6c4>
    5a7a:	80 37       	cpi	r24, 0x70	; 112
    5a7c:	19 f0       	breq	.+6      	; 0x5a84 <vfprintf+0x544>
    5a7e:	88 37       	cpi	r24, 0x78	; 120
    5a80:	11 f0       	breq	.+4      	; 0x5a86 <vfprintf+0x546>
    5a82:	c0 c0       	rjmp	.+384    	; 0x5c04 <vfprintf+0x6c4>
    5a84:	00 61       	ori	r16, 0x10	; 16
    5a86:	04 ff       	sbrs	r16, 4
    5a88:	09 c0       	rjmp	.+18     	; 0x5a9c <vfprintf+0x55c>
    5a8a:	04 60       	ori	r16, 0x04	; 4
    5a8c:	07 c0       	rjmp	.+14     	; 0x5a9c <vfprintf+0x55c>
    5a8e:	24 ff       	sbrs	r18, 4
    5a90:	08 c0       	rjmp	.+16     	; 0x5aa2 <vfprintf+0x562>
    5a92:	06 60       	ori	r16, 0x06	; 6
    5a94:	06 c0       	rjmp	.+12     	; 0x5aa2 <vfprintf+0x562>
    5a96:	28 e0       	ldi	r18, 0x08	; 8
    5a98:	30 e0       	ldi	r19, 0x00	; 0
    5a9a:	05 c0       	rjmp	.+10     	; 0x5aa6 <vfprintf+0x566>
    5a9c:	20 e1       	ldi	r18, 0x10	; 16
    5a9e:	30 e0       	ldi	r19, 0x00	; 0
    5aa0:	02 c0       	rjmp	.+4      	; 0x5aa6 <vfprintf+0x566>
    5aa2:	20 e1       	ldi	r18, 0x10	; 16
    5aa4:	32 e0       	ldi	r19, 0x02	; 2
    5aa6:	52 01       	movw	r10, r4
    5aa8:	07 ff       	sbrs	r16, 7
    5aaa:	09 c0       	rjmp	.+18     	; 0x5abe <vfprintf+0x57e>
    5aac:	f4 e0       	ldi	r31, 0x04	; 4
    5aae:	af 0e       	add	r10, r31
    5ab0:	b1 1c       	adc	r11, r1
    5ab2:	f2 01       	movw	r30, r4
    5ab4:	60 81       	ld	r22, Z
    5ab6:	71 81       	ldd	r23, Z+1	; 0x01
    5ab8:	82 81       	ldd	r24, Z+2	; 0x02
    5aba:	93 81       	ldd	r25, Z+3	; 0x03
    5abc:	08 c0       	rjmp	.+16     	; 0x5ace <vfprintf+0x58e>
    5abe:	f2 e0       	ldi	r31, 0x02	; 2
    5ac0:	af 0e       	add	r10, r31
    5ac2:	b1 1c       	adc	r11, r1
    5ac4:	f2 01       	movw	r30, r4
    5ac6:	60 81       	ld	r22, Z
    5ac8:	71 81       	ldd	r23, Z+1	; 0x01
    5aca:	80 e0       	ldi	r24, 0x00	; 0
    5acc:	90 e0       	ldi	r25, 0x00	; 0
    5ace:	a3 01       	movw	r20, r6
    5ad0:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <__ultoa_invert>
    5ad4:	e8 2e       	mov	r14, r24
    5ad6:	e6 18       	sub	r14, r6
    5ad8:	0f 77       	andi	r16, 0x7F	; 127
    5ada:	30 2e       	mov	r3, r16
    5adc:	36 fe       	sbrs	r3, 6
    5ade:	0b c0       	rjmp	.+22     	; 0x5af6 <vfprintf+0x5b6>
    5ae0:	33 2d       	mov	r19, r3
    5ae2:	3e 7f       	andi	r19, 0xFE	; 254
    5ae4:	e1 16       	cp	r14, r17
    5ae6:	50 f4       	brcc	.+20     	; 0x5afc <vfprintf+0x5bc>
    5ae8:	34 fe       	sbrs	r3, 4
    5aea:	0a c0       	rjmp	.+20     	; 0x5b00 <vfprintf+0x5c0>
    5aec:	32 fc       	sbrc	r3, 2
    5aee:	08 c0       	rjmp	.+16     	; 0x5b00 <vfprintf+0x5c0>
    5af0:	33 2d       	mov	r19, r3
    5af2:	3e 7e       	andi	r19, 0xEE	; 238
    5af4:	05 c0       	rjmp	.+10     	; 0x5b00 <vfprintf+0x5c0>
    5af6:	0e 2d       	mov	r16, r14
    5af8:	33 2d       	mov	r19, r3
    5afa:	03 c0       	rjmp	.+6      	; 0x5b02 <vfprintf+0x5c2>
    5afc:	0e 2d       	mov	r16, r14
    5afe:	01 c0       	rjmp	.+2      	; 0x5b02 <vfprintf+0x5c2>
    5b00:	01 2f       	mov	r16, r17
    5b02:	34 ff       	sbrs	r19, 4
    5b04:	0c c0       	rjmp	.+24     	; 0x5b1e <vfprintf+0x5de>
    5b06:	fe 01       	movw	r30, r28
    5b08:	ee 0d       	add	r30, r14
    5b0a:	f1 1d       	adc	r31, r1
    5b0c:	80 81       	ld	r24, Z
    5b0e:	80 33       	cpi	r24, 0x30	; 48
    5b10:	11 f4       	brne	.+4      	; 0x5b16 <vfprintf+0x5d6>
    5b12:	39 7e       	andi	r19, 0xE9	; 233
    5b14:	08 c0       	rjmp	.+16     	; 0x5b26 <vfprintf+0x5e6>
    5b16:	32 ff       	sbrs	r19, 2
    5b18:	05 c0       	rjmp	.+10     	; 0x5b24 <vfprintf+0x5e4>
    5b1a:	0e 5f       	subi	r16, 0xFE	; 254
    5b1c:	04 c0       	rjmp	.+8      	; 0x5b26 <vfprintf+0x5e6>
    5b1e:	83 2f       	mov	r24, r19
    5b20:	86 78       	andi	r24, 0x86	; 134
    5b22:	09 f0       	breq	.+2      	; 0x5b26 <vfprintf+0x5e6>
    5b24:	0f 5f       	subi	r16, 0xFF	; 255
    5b26:	33 fd       	sbrc	r19, 3
    5b28:	13 c0       	rjmp	.+38     	; 0x5b50 <vfprintf+0x610>
    5b2a:	30 ff       	sbrs	r19, 0
    5b2c:	06 c0       	rjmp	.+12     	; 0x5b3a <vfprintf+0x5fa>
    5b2e:	1e 2d       	mov	r17, r14
    5b30:	0f 15       	cp	r16, r15
    5b32:	18 f4       	brcc	.+6      	; 0x5b3a <vfprintf+0x5fa>
    5b34:	1f 0d       	add	r17, r15
    5b36:	10 1b       	sub	r17, r16
    5b38:	0f 2d       	mov	r16, r15
    5b3a:	0f 15       	cp	r16, r15
    5b3c:	68 f4       	brcc	.+26     	; 0x5b58 <vfprintf+0x618>
    5b3e:	b6 01       	movw	r22, r12
    5b40:	80 e2       	ldi	r24, 0x20	; 32
    5b42:	90 e0       	ldi	r25, 0x00	; 0
    5b44:	3b 8b       	std	Y+19, r19	; 0x13
    5b46:	0e 94 bd 34 	call	0x697a	; 0x697a <fputc>
    5b4a:	0f 5f       	subi	r16, 0xFF	; 255
    5b4c:	3b 89       	ldd	r19, Y+19	; 0x13
    5b4e:	f5 cf       	rjmp	.-22     	; 0x5b3a <vfprintf+0x5fa>
    5b50:	0f 15       	cp	r16, r15
    5b52:	10 f4       	brcc	.+4      	; 0x5b58 <vfprintf+0x618>
    5b54:	f0 1a       	sub	r15, r16
    5b56:	01 c0       	rjmp	.+2      	; 0x5b5a <vfprintf+0x61a>
    5b58:	f1 2c       	mov	r15, r1
    5b5a:	34 ff       	sbrs	r19, 4
    5b5c:	12 c0       	rjmp	.+36     	; 0x5b82 <vfprintf+0x642>
    5b5e:	b6 01       	movw	r22, r12
    5b60:	80 e3       	ldi	r24, 0x30	; 48
    5b62:	90 e0       	ldi	r25, 0x00	; 0
    5b64:	3b 8b       	std	Y+19, r19	; 0x13
    5b66:	0e 94 bd 34 	call	0x697a	; 0x697a <fputc>
    5b6a:	3b 89       	ldd	r19, Y+19	; 0x13
    5b6c:	32 ff       	sbrs	r19, 2
    5b6e:	17 c0       	rjmp	.+46     	; 0x5b9e <vfprintf+0x65e>
    5b70:	31 fd       	sbrc	r19, 1
    5b72:	03 c0       	rjmp	.+6      	; 0x5b7a <vfprintf+0x63a>
    5b74:	88 e7       	ldi	r24, 0x78	; 120
    5b76:	90 e0       	ldi	r25, 0x00	; 0
    5b78:	02 c0       	rjmp	.+4      	; 0x5b7e <vfprintf+0x63e>
    5b7a:	88 e5       	ldi	r24, 0x58	; 88
    5b7c:	90 e0       	ldi	r25, 0x00	; 0
    5b7e:	b6 01       	movw	r22, r12
    5b80:	0c c0       	rjmp	.+24     	; 0x5b9a <vfprintf+0x65a>
    5b82:	83 2f       	mov	r24, r19
    5b84:	86 78       	andi	r24, 0x86	; 134
    5b86:	59 f0       	breq	.+22     	; 0x5b9e <vfprintf+0x65e>
    5b88:	31 ff       	sbrs	r19, 1
    5b8a:	02 c0       	rjmp	.+4      	; 0x5b90 <vfprintf+0x650>
    5b8c:	8b e2       	ldi	r24, 0x2B	; 43
    5b8e:	01 c0       	rjmp	.+2      	; 0x5b92 <vfprintf+0x652>
    5b90:	80 e2       	ldi	r24, 0x20	; 32
    5b92:	37 fd       	sbrc	r19, 7
    5b94:	8d e2       	ldi	r24, 0x2D	; 45
    5b96:	b6 01       	movw	r22, r12
    5b98:	90 e0       	ldi	r25, 0x00	; 0
    5b9a:	0e 94 bd 34 	call	0x697a	; 0x697a <fputc>
    5b9e:	e1 16       	cp	r14, r17
    5ba0:	38 f4       	brcc	.+14     	; 0x5bb0 <vfprintf+0x670>
    5ba2:	b6 01       	movw	r22, r12
    5ba4:	80 e3       	ldi	r24, 0x30	; 48
    5ba6:	90 e0       	ldi	r25, 0x00	; 0
    5ba8:	0e 94 bd 34 	call	0x697a	; 0x697a <fputc>
    5bac:	11 50       	subi	r17, 0x01	; 1
    5bae:	f7 cf       	rjmp	.-18     	; 0x5b9e <vfprintf+0x65e>
    5bb0:	ea 94       	dec	r14
    5bb2:	f3 01       	movw	r30, r6
    5bb4:	ee 0d       	add	r30, r14
    5bb6:	f1 1d       	adc	r31, r1
    5bb8:	80 81       	ld	r24, Z
    5bba:	b6 01       	movw	r22, r12
    5bbc:	90 e0       	ldi	r25, 0x00	; 0
    5bbe:	0e 94 bd 34 	call	0x697a	; 0x697a <fputc>
    5bc2:	e1 10       	cpse	r14, r1
    5bc4:	f5 cf       	rjmp	.-22     	; 0x5bb0 <vfprintf+0x670>
    5bc6:	14 c0       	rjmp	.+40     	; 0x5bf0 <vfprintf+0x6b0>
    5bc8:	f4 e0       	ldi	r31, 0x04	; 4
    5bca:	ff 15       	cp	r31, r15
    5bcc:	58 f5       	brcc	.+86     	; 0x5c24 <vfprintf+0x6e4>
    5bce:	84 e0       	ldi	r24, 0x04	; 4
    5bd0:	f8 1a       	sub	r15, r24
    5bd2:	33 fe       	sbrs	r3, 3
    5bd4:	1e c0       	rjmp	.+60     	; 0x5c12 <vfprintf+0x6d2>
    5bd6:	21 10       	cpse	r2, r1
    5bd8:	26 c0       	rjmp	.+76     	; 0x5c26 <vfprintf+0x6e6>
    5bda:	03 ff       	sbrs	r16, 3
    5bdc:	2a c0       	rjmp	.+84     	; 0x5c32 <vfprintf+0x6f2>
    5bde:	0c ec       	ldi	r16, 0xCC	; 204
    5be0:	11 e0       	ldi	r17, 0x01	; 1
    5be2:	f3 2d       	mov	r31, r3
    5be4:	f0 71       	andi	r31, 0x10	; 16
    5be6:	3f 2e       	mov	r3, r31
    5be8:	f8 01       	movw	r30, r16
    5bea:	84 91       	lpm	r24, Z
    5bec:	81 11       	cpse	r24, r1
    5bee:	24 c0       	rjmp	.+72     	; 0x5c38 <vfprintf+0x6f8>
    5bf0:	ff 20       	and	r15, r15
    5bf2:	09 f4       	brne	.+2      	; 0x5bf6 <vfprintf+0x6b6>
    5bf4:	e5 cc       	rjmp	.-1590   	; 0x55c0 <vfprintf+0x80>
    5bf6:	b6 01       	movw	r22, r12
    5bf8:	80 e2       	ldi	r24, 0x20	; 32
    5bfa:	90 e0       	ldi	r25, 0x00	; 0
    5bfc:	0e 94 bd 34 	call	0x697a	; 0x697a <fputc>
    5c00:	fa 94       	dec	r15
    5c02:	f6 cf       	rjmp	.-20     	; 0x5bf0 <vfprintf+0x6b0>
    5c04:	f6 01       	movw	r30, r12
    5c06:	86 81       	ldd	r24, Z+6	; 0x06
    5c08:	97 81       	ldd	r25, Z+7	; 0x07
    5c0a:	26 c0       	rjmp	.+76     	; 0x5c58 <vfprintf+0x718>
    5c0c:	8f ef       	ldi	r24, 0xFF	; 255
    5c0e:	9f ef       	ldi	r25, 0xFF	; 255
    5c10:	23 c0       	rjmp	.+70     	; 0x5c58 <vfprintf+0x718>
    5c12:	b6 01       	movw	r22, r12
    5c14:	80 e2       	ldi	r24, 0x20	; 32
    5c16:	90 e0       	ldi	r25, 0x00	; 0
    5c18:	0e 94 bd 34 	call	0x697a	; 0x697a <fputc>
    5c1c:	fa 94       	dec	r15
    5c1e:	f1 10       	cpse	r15, r1
    5c20:	f8 cf       	rjmp	.-16     	; 0x5c12 <vfprintf+0x6d2>
    5c22:	d9 cf       	rjmp	.-78     	; 0x5bd6 <vfprintf+0x696>
    5c24:	f1 2c       	mov	r15, r1
    5c26:	b6 01       	movw	r22, r12
    5c28:	82 2d       	mov	r24, r2
    5c2a:	90 e0       	ldi	r25, 0x00	; 0
    5c2c:	0e 94 bd 34 	call	0x697a	; 0x697a <fputc>
    5c30:	d4 cf       	rjmp	.-88     	; 0x5bda <vfprintf+0x69a>
    5c32:	00 ed       	ldi	r16, 0xD0	; 208
    5c34:	11 e0       	ldi	r17, 0x01	; 1
    5c36:	d5 cf       	rjmp	.-86     	; 0x5be2 <vfprintf+0x6a2>
    5c38:	31 10       	cpse	r3, r1
    5c3a:	80 52       	subi	r24, 0x20	; 32
    5c3c:	b6 01       	movw	r22, r12
    5c3e:	90 e0       	ldi	r25, 0x00	; 0
    5c40:	0e 94 bd 34 	call	0x697a	; 0x697a <fputc>
    5c44:	0f 5f       	subi	r16, 0xFF	; 255
    5c46:	1f 4f       	sbci	r17, 0xFF	; 255
    5c48:	cf cf       	rjmp	.-98     	; 0x5be8 <vfprintf+0x6a8>
    5c4a:	23 e0       	ldi	r18, 0x03	; 3
    5c4c:	2f 15       	cp	r18, r15
    5c4e:	10 f4       	brcc	.+4      	; 0x5c54 <vfprintf+0x714>
    5c50:	83 e0       	ldi	r24, 0x03	; 3
    5c52:	be cf       	rjmp	.-132    	; 0x5bd0 <vfprintf+0x690>
    5c54:	f1 2c       	mov	r15, r1
    5c56:	c1 cf       	rjmp	.-126    	; 0x5bda <vfprintf+0x69a>
    5c58:	63 96       	adiw	r28, 0x13	; 19
    5c5a:	0f b6       	in	r0, 0x3f	; 63
    5c5c:	f8 94       	cli
    5c5e:	de bf       	out	0x3e, r29	; 62
    5c60:	0f be       	out	0x3f, r0	; 63
    5c62:	cd bf       	out	0x3d, r28	; 61
    5c64:	df 91       	pop	r29
    5c66:	cf 91       	pop	r28
    5c68:	1f 91       	pop	r17
    5c6a:	0f 91       	pop	r16
    5c6c:	ff 90       	pop	r15
    5c6e:	ef 90       	pop	r14
    5c70:	df 90       	pop	r13
    5c72:	cf 90       	pop	r12
    5c74:	bf 90       	pop	r11
    5c76:	af 90       	pop	r10
    5c78:	9f 90       	pop	r9
    5c7a:	8f 90       	pop	r8
    5c7c:	7f 90       	pop	r7
    5c7e:	6f 90       	pop	r6
    5c80:	5f 90       	pop	r5
    5c82:	4f 90       	pop	r4
    5c84:	3f 90       	pop	r3
    5c86:	2f 90       	pop	r2
    5c88:	08 95       	ret

00005c8a <__subsf3>:
    5c8a:	50 58       	subi	r21, 0x80	; 128

00005c8c <__addsf3>:
    5c8c:	bb 27       	eor	r27, r27
    5c8e:	aa 27       	eor	r26, r26
    5c90:	0e 94 5d 2e 	call	0x5cba	; 0x5cba <__addsf3x>
    5c94:	0c 94 a7 2f 	jmp	0x5f4e	; 0x5f4e <__fp_round>
    5c98:	0e 94 99 2f 	call	0x5f32	; 0x5f32 <__fp_pscA>
    5c9c:	38 f0       	brcs	.+14     	; 0x5cac <__addsf3+0x20>
    5c9e:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <__fp_pscB>
    5ca2:	20 f0       	brcs	.+8      	; 0x5cac <__addsf3+0x20>
    5ca4:	39 f4       	brne	.+14     	; 0x5cb4 <__addsf3+0x28>
    5ca6:	9f 3f       	cpi	r25, 0xFF	; 255
    5ca8:	19 f4       	brne	.+6      	; 0x5cb0 <__addsf3+0x24>
    5caa:	26 f4       	brtc	.+8      	; 0x5cb4 <__addsf3+0x28>
    5cac:	0c 94 96 2f 	jmp	0x5f2c	; 0x5f2c <__fp_nan>
    5cb0:	0e f4       	brtc	.+2      	; 0x5cb4 <__addsf3+0x28>
    5cb2:	e0 95       	com	r30
    5cb4:	e7 fb       	bst	r30, 7
    5cb6:	0c 94 90 2f 	jmp	0x5f20	; 0x5f20 <__fp_inf>

00005cba <__addsf3x>:
    5cba:	e9 2f       	mov	r30, r25
    5cbc:	0e 94 b8 2f 	call	0x5f70	; 0x5f70 <__fp_split3>
    5cc0:	58 f3       	brcs	.-42     	; 0x5c98 <__addsf3+0xc>
    5cc2:	ba 17       	cp	r27, r26
    5cc4:	62 07       	cpc	r22, r18
    5cc6:	73 07       	cpc	r23, r19
    5cc8:	84 07       	cpc	r24, r20
    5cca:	95 07       	cpc	r25, r21
    5ccc:	20 f0       	brcs	.+8      	; 0x5cd6 <__addsf3x+0x1c>
    5cce:	79 f4       	brne	.+30     	; 0x5cee <__addsf3x+0x34>
    5cd0:	a6 f5       	brtc	.+104    	; 0x5d3a <__addsf3x+0x80>
    5cd2:	0c 94 da 2f 	jmp	0x5fb4	; 0x5fb4 <__fp_zero>
    5cd6:	0e f4       	brtc	.+2      	; 0x5cda <__addsf3x+0x20>
    5cd8:	e0 95       	com	r30
    5cda:	0b 2e       	mov	r0, r27
    5cdc:	ba 2f       	mov	r27, r26
    5cde:	a0 2d       	mov	r26, r0
    5ce0:	0b 01       	movw	r0, r22
    5ce2:	b9 01       	movw	r22, r18
    5ce4:	90 01       	movw	r18, r0
    5ce6:	0c 01       	movw	r0, r24
    5ce8:	ca 01       	movw	r24, r20
    5cea:	a0 01       	movw	r20, r0
    5cec:	11 24       	eor	r1, r1
    5cee:	ff 27       	eor	r31, r31
    5cf0:	59 1b       	sub	r21, r25
    5cf2:	99 f0       	breq	.+38     	; 0x5d1a <__addsf3x+0x60>
    5cf4:	59 3f       	cpi	r21, 0xF9	; 249
    5cf6:	50 f4       	brcc	.+20     	; 0x5d0c <__addsf3x+0x52>
    5cf8:	50 3e       	cpi	r21, 0xE0	; 224
    5cfa:	68 f1       	brcs	.+90     	; 0x5d56 <__addsf3x+0x9c>
    5cfc:	1a 16       	cp	r1, r26
    5cfe:	f0 40       	sbci	r31, 0x00	; 0
    5d00:	a2 2f       	mov	r26, r18
    5d02:	23 2f       	mov	r18, r19
    5d04:	34 2f       	mov	r19, r20
    5d06:	44 27       	eor	r20, r20
    5d08:	58 5f       	subi	r21, 0xF8	; 248
    5d0a:	f3 cf       	rjmp	.-26     	; 0x5cf2 <__addsf3x+0x38>
    5d0c:	46 95       	lsr	r20
    5d0e:	37 95       	ror	r19
    5d10:	27 95       	ror	r18
    5d12:	a7 95       	ror	r26
    5d14:	f0 40       	sbci	r31, 0x00	; 0
    5d16:	53 95       	inc	r21
    5d18:	c9 f7       	brne	.-14     	; 0x5d0c <__addsf3x+0x52>
    5d1a:	7e f4       	brtc	.+30     	; 0x5d3a <__addsf3x+0x80>
    5d1c:	1f 16       	cp	r1, r31
    5d1e:	ba 0b       	sbc	r27, r26
    5d20:	62 0b       	sbc	r22, r18
    5d22:	73 0b       	sbc	r23, r19
    5d24:	84 0b       	sbc	r24, r20
    5d26:	ba f0       	brmi	.+46     	; 0x5d56 <__addsf3x+0x9c>
    5d28:	91 50       	subi	r25, 0x01	; 1
    5d2a:	a1 f0       	breq	.+40     	; 0x5d54 <__addsf3x+0x9a>
    5d2c:	ff 0f       	add	r31, r31
    5d2e:	bb 1f       	adc	r27, r27
    5d30:	66 1f       	adc	r22, r22
    5d32:	77 1f       	adc	r23, r23
    5d34:	88 1f       	adc	r24, r24
    5d36:	c2 f7       	brpl	.-16     	; 0x5d28 <__addsf3x+0x6e>
    5d38:	0e c0       	rjmp	.+28     	; 0x5d56 <__addsf3x+0x9c>
    5d3a:	ba 0f       	add	r27, r26
    5d3c:	62 1f       	adc	r22, r18
    5d3e:	73 1f       	adc	r23, r19
    5d40:	84 1f       	adc	r24, r20
    5d42:	48 f4       	brcc	.+18     	; 0x5d56 <__addsf3x+0x9c>
    5d44:	87 95       	ror	r24
    5d46:	77 95       	ror	r23
    5d48:	67 95       	ror	r22
    5d4a:	b7 95       	ror	r27
    5d4c:	f7 95       	ror	r31
    5d4e:	9e 3f       	cpi	r25, 0xFE	; 254
    5d50:	08 f0       	brcs	.+2      	; 0x5d54 <__addsf3x+0x9a>
    5d52:	b0 cf       	rjmp	.-160    	; 0x5cb4 <__addsf3+0x28>
    5d54:	93 95       	inc	r25
    5d56:	88 0f       	add	r24, r24
    5d58:	08 f0       	brcs	.+2      	; 0x5d5c <__addsf3x+0xa2>
    5d5a:	99 27       	eor	r25, r25
    5d5c:	ee 0f       	add	r30, r30
    5d5e:	97 95       	ror	r25
    5d60:	87 95       	ror	r24
    5d62:	08 95       	ret

00005d64 <__divsf3>:
    5d64:	0e 94 c6 2e 	call	0x5d8c	; 0x5d8c <__divsf3x>
    5d68:	0c 94 a7 2f 	jmp	0x5f4e	; 0x5f4e <__fp_round>
    5d6c:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <__fp_pscB>
    5d70:	58 f0       	brcs	.+22     	; 0x5d88 <__divsf3+0x24>
    5d72:	0e 94 99 2f 	call	0x5f32	; 0x5f32 <__fp_pscA>
    5d76:	40 f0       	brcs	.+16     	; 0x5d88 <__divsf3+0x24>
    5d78:	29 f4       	brne	.+10     	; 0x5d84 <__divsf3+0x20>
    5d7a:	5f 3f       	cpi	r21, 0xFF	; 255
    5d7c:	29 f0       	breq	.+10     	; 0x5d88 <__divsf3+0x24>
    5d7e:	0c 94 90 2f 	jmp	0x5f20	; 0x5f20 <__fp_inf>
    5d82:	51 11       	cpse	r21, r1
    5d84:	0c 94 db 2f 	jmp	0x5fb6	; 0x5fb6 <__fp_szero>
    5d88:	0c 94 96 2f 	jmp	0x5f2c	; 0x5f2c <__fp_nan>

00005d8c <__divsf3x>:
    5d8c:	0e 94 b8 2f 	call	0x5f70	; 0x5f70 <__fp_split3>
    5d90:	68 f3       	brcs	.-38     	; 0x5d6c <__divsf3+0x8>

00005d92 <__divsf3_pse>:
    5d92:	99 23       	and	r25, r25
    5d94:	b1 f3       	breq	.-20     	; 0x5d82 <__divsf3+0x1e>
    5d96:	55 23       	and	r21, r21
    5d98:	91 f3       	breq	.-28     	; 0x5d7e <__divsf3+0x1a>
    5d9a:	95 1b       	sub	r25, r21
    5d9c:	55 0b       	sbc	r21, r21
    5d9e:	bb 27       	eor	r27, r27
    5da0:	aa 27       	eor	r26, r26
    5da2:	62 17       	cp	r22, r18
    5da4:	73 07       	cpc	r23, r19
    5da6:	84 07       	cpc	r24, r20
    5da8:	38 f0       	brcs	.+14     	; 0x5db8 <__divsf3_pse+0x26>
    5daa:	9f 5f       	subi	r25, 0xFF	; 255
    5dac:	5f 4f       	sbci	r21, 0xFF	; 255
    5dae:	22 0f       	add	r18, r18
    5db0:	33 1f       	adc	r19, r19
    5db2:	44 1f       	adc	r20, r20
    5db4:	aa 1f       	adc	r26, r26
    5db6:	a9 f3       	breq	.-22     	; 0x5da2 <__divsf3_pse+0x10>
    5db8:	35 d0       	rcall	.+106    	; 0x5e24 <__divsf3_pse+0x92>
    5dba:	0e 2e       	mov	r0, r30
    5dbc:	3a f0       	brmi	.+14     	; 0x5dcc <__divsf3_pse+0x3a>
    5dbe:	e0 e8       	ldi	r30, 0x80	; 128
    5dc0:	32 d0       	rcall	.+100    	; 0x5e26 <__divsf3_pse+0x94>
    5dc2:	91 50       	subi	r25, 0x01	; 1
    5dc4:	50 40       	sbci	r21, 0x00	; 0
    5dc6:	e6 95       	lsr	r30
    5dc8:	00 1c       	adc	r0, r0
    5dca:	ca f7       	brpl	.-14     	; 0x5dbe <__divsf3_pse+0x2c>
    5dcc:	2b d0       	rcall	.+86     	; 0x5e24 <__divsf3_pse+0x92>
    5dce:	fe 2f       	mov	r31, r30
    5dd0:	29 d0       	rcall	.+82     	; 0x5e24 <__divsf3_pse+0x92>
    5dd2:	66 0f       	add	r22, r22
    5dd4:	77 1f       	adc	r23, r23
    5dd6:	88 1f       	adc	r24, r24
    5dd8:	bb 1f       	adc	r27, r27
    5dda:	26 17       	cp	r18, r22
    5ddc:	37 07       	cpc	r19, r23
    5dde:	48 07       	cpc	r20, r24
    5de0:	ab 07       	cpc	r26, r27
    5de2:	b0 e8       	ldi	r27, 0x80	; 128
    5de4:	09 f0       	breq	.+2      	; 0x5de8 <__divsf3_pse+0x56>
    5de6:	bb 0b       	sbc	r27, r27
    5de8:	80 2d       	mov	r24, r0
    5dea:	bf 01       	movw	r22, r30
    5dec:	ff 27       	eor	r31, r31
    5dee:	93 58       	subi	r25, 0x83	; 131
    5df0:	5f 4f       	sbci	r21, 0xFF	; 255
    5df2:	3a f0       	brmi	.+14     	; 0x5e02 <__divsf3_pse+0x70>
    5df4:	9e 3f       	cpi	r25, 0xFE	; 254
    5df6:	51 05       	cpc	r21, r1
    5df8:	78 f0       	brcs	.+30     	; 0x5e18 <__divsf3_pse+0x86>
    5dfa:	0c 94 90 2f 	jmp	0x5f20	; 0x5f20 <__fp_inf>
    5dfe:	0c 94 db 2f 	jmp	0x5fb6	; 0x5fb6 <__fp_szero>
    5e02:	5f 3f       	cpi	r21, 0xFF	; 255
    5e04:	e4 f3       	brlt	.-8      	; 0x5dfe <__divsf3_pse+0x6c>
    5e06:	98 3e       	cpi	r25, 0xE8	; 232
    5e08:	d4 f3       	brlt	.-12     	; 0x5dfe <__divsf3_pse+0x6c>
    5e0a:	86 95       	lsr	r24
    5e0c:	77 95       	ror	r23
    5e0e:	67 95       	ror	r22
    5e10:	b7 95       	ror	r27
    5e12:	f7 95       	ror	r31
    5e14:	9f 5f       	subi	r25, 0xFF	; 255
    5e16:	c9 f7       	brne	.-14     	; 0x5e0a <__divsf3_pse+0x78>
    5e18:	88 0f       	add	r24, r24
    5e1a:	91 1d       	adc	r25, r1
    5e1c:	96 95       	lsr	r25
    5e1e:	87 95       	ror	r24
    5e20:	97 f9       	bld	r25, 7
    5e22:	08 95       	ret
    5e24:	e1 e0       	ldi	r30, 0x01	; 1
    5e26:	66 0f       	add	r22, r22
    5e28:	77 1f       	adc	r23, r23
    5e2a:	88 1f       	adc	r24, r24
    5e2c:	bb 1f       	adc	r27, r27
    5e2e:	62 17       	cp	r22, r18
    5e30:	73 07       	cpc	r23, r19
    5e32:	84 07       	cpc	r24, r20
    5e34:	ba 07       	cpc	r27, r26
    5e36:	20 f0       	brcs	.+8      	; 0x5e40 <__divsf3_pse+0xae>
    5e38:	62 1b       	sub	r22, r18
    5e3a:	73 0b       	sbc	r23, r19
    5e3c:	84 0b       	sbc	r24, r20
    5e3e:	ba 0b       	sbc	r27, r26
    5e40:	ee 1f       	adc	r30, r30
    5e42:	88 f7       	brcc	.-30     	; 0x5e26 <__divsf3_pse+0x94>
    5e44:	e0 95       	com	r30
    5e46:	08 95       	ret

00005e48 <__fixunssfsi>:
    5e48:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <__fp_splitA>
    5e4c:	88 f0       	brcs	.+34     	; 0x5e70 <__fixunssfsi+0x28>
    5e4e:	9f 57       	subi	r25, 0x7F	; 127
    5e50:	98 f0       	brcs	.+38     	; 0x5e78 <__fixunssfsi+0x30>
    5e52:	b9 2f       	mov	r27, r25
    5e54:	99 27       	eor	r25, r25
    5e56:	b7 51       	subi	r27, 0x17	; 23
    5e58:	b0 f0       	brcs	.+44     	; 0x5e86 <__fixunssfsi+0x3e>
    5e5a:	e1 f0       	breq	.+56     	; 0x5e94 <__fixunssfsi+0x4c>
    5e5c:	66 0f       	add	r22, r22
    5e5e:	77 1f       	adc	r23, r23
    5e60:	88 1f       	adc	r24, r24
    5e62:	99 1f       	adc	r25, r25
    5e64:	1a f0       	brmi	.+6      	; 0x5e6c <__fixunssfsi+0x24>
    5e66:	ba 95       	dec	r27
    5e68:	c9 f7       	brne	.-14     	; 0x5e5c <__fixunssfsi+0x14>
    5e6a:	14 c0       	rjmp	.+40     	; 0x5e94 <__fixunssfsi+0x4c>
    5e6c:	b1 30       	cpi	r27, 0x01	; 1
    5e6e:	91 f0       	breq	.+36     	; 0x5e94 <__fixunssfsi+0x4c>
    5e70:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <__fp_zero>
    5e74:	b1 e0       	ldi	r27, 0x01	; 1
    5e76:	08 95       	ret
    5e78:	0c 94 da 2f 	jmp	0x5fb4	; 0x5fb4 <__fp_zero>
    5e7c:	67 2f       	mov	r22, r23
    5e7e:	78 2f       	mov	r23, r24
    5e80:	88 27       	eor	r24, r24
    5e82:	b8 5f       	subi	r27, 0xF8	; 248
    5e84:	39 f0       	breq	.+14     	; 0x5e94 <__fixunssfsi+0x4c>
    5e86:	b9 3f       	cpi	r27, 0xF9	; 249
    5e88:	cc f3       	brlt	.-14     	; 0x5e7c <__fixunssfsi+0x34>
    5e8a:	86 95       	lsr	r24
    5e8c:	77 95       	ror	r23
    5e8e:	67 95       	ror	r22
    5e90:	b3 95       	inc	r27
    5e92:	d9 f7       	brne	.-10     	; 0x5e8a <__fixunssfsi+0x42>
    5e94:	3e f4       	brtc	.+14     	; 0x5ea4 <__fixunssfsi+0x5c>
    5e96:	90 95       	com	r25
    5e98:	80 95       	com	r24
    5e9a:	70 95       	com	r23
    5e9c:	61 95       	neg	r22
    5e9e:	7f 4f       	sbci	r23, 0xFF	; 255
    5ea0:	8f 4f       	sbci	r24, 0xFF	; 255
    5ea2:	9f 4f       	sbci	r25, 0xFF	; 255
    5ea4:	08 95       	ret

00005ea6 <__floatunsisf>:
    5ea6:	e8 94       	clt
    5ea8:	09 c0       	rjmp	.+18     	; 0x5ebc <__floatsisf+0x12>

00005eaa <__floatsisf>:
    5eaa:	97 fb       	bst	r25, 7
    5eac:	3e f4       	brtc	.+14     	; 0x5ebc <__floatsisf+0x12>
    5eae:	90 95       	com	r25
    5eb0:	80 95       	com	r24
    5eb2:	70 95       	com	r23
    5eb4:	61 95       	neg	r22
    5eb6:	7f 4f       	sbci	r23, 0xFF	; 255
    5eb8:	8f 4f       	sbci	r24, 0xFF	; 255
    5eba:	9f 4f       	sbci	r25, 0xFF	; 255
    5ebc:	99 23       	and	r25, r25
    5ebe:	a9 f0       	breq	.+42     	; 0x5eea <__floatsisf+0x40>
    5ec0:	f9 2f       	mov	r31, r25
    5ec2:	96 e9       	ldi	r25, 0x96	; 150
    5ec4:	bb 27       	eor	r27, r27
    5ec6:	93 95       	inc	r25
    5ec8:	f6 95       	lsr	r31
    5eca:	87 95       	ror	r24
    5ecc:	77 95       	ror	r23
    5ece:	67 95       	ror	r22
    5ed0:	b7 95       	ror	r27
    5ed2:	f1 11       	cpse	r31, r1
    5ed4:	f8 cf       	rjmp	.-16     	; 0x5ec6 <__floatsisf+0x1c>
    5ed6:	fa f4       	brpl	.+62     	; 0x5f16 <__floatsisf+0x6c>
    5ed8:	bb 0f       	add	r27, r27
    5eda:	11 f4       	brne	.+4      	; 0x5ee0 <__floatsisf+0x36>
    5edc:	60 ff       	sbrs	r22, 0
    5ede:	1b c0       	rjmp	.+54     	; 0x5f16 <__floatsisf+0x6c>
    5ee0:	6f 5f       	subi	r22, 0xFF	; 255
    5ee2:	7f 4f       	sbci	r23, 0xFF	; 255
    5ee4:	8f 4f       	sbci	r24, 0xFF	; 255
    5ee6:	9f 4f       	sbci	r25, 0xFF	; 255
    5ee8:	16 c0       	rjmp	.+44     	; 0x5f16 <__floatsisf+0x6c>
    5eea:	88 23       	and	r24, r24
    5eec:	11 f0       	breq	.+4      	; 0x5ef2 <__floatsisf+0x48>
    5eee:	96 e9       	ldi	r25, 0x96	; 150
    5ef0:	11 c0       	rjmp	.+34     	; 0x5f14 <__floatsisf+0x6a>
    5ef2:	77 23       	and	r23, r23
    5ef4:	21 f0       	breq	.+8      	; 0x5efe <__floatsisf+0x54>
    5ef6:	9e e8       	ldi	r25, 0x8E	; 142
    5ef8:	87 2f       	mov	r24, r23
    5efa:	76 2f       	mov	r23, r22
    5efc:	05 c0       	rjmp	.+10     	; 0x5f08 <__floatsisf+0x5e>
    5efe:	66 23       	and	r22, r22
    5f00:	71 f0       	breq	.+28     	; 0x5f1e <__floatsisf+0x74>
    5f02:	96 e8       	ldi	r25, 0x86	; 134
    5f04:	86 2f       	mov	r24, r22
    5f06:	70 e0       	ldi	r23, 0x00	; 0
    5f08:	60 e0       	ldi	r22, 0x00	; 0
    5f0a:	2a f0       	brmi	.+10     	; 0x5f16 <__floatsisf+0x6c>
    5f0c:	9a 95       	dec	r25
    5f0e:	66 0f       	add	r22, r22
    5f10:	77 1f       	adc	r23, r23
    5f12:	88 1f       	adc	r24, r24
    5f14:	da f7       	brpl	.-10     	; 0x5f0c <__floatsisf+0x62>
    5f16:	88 0f       	add	r24, r24
    5f18:	96 95       	lsr	r25
    5f1a:	87 95       	ror	r24
    5f1c:	97 f9       	bld	r25, 7
    5f1e:	08 95       	ret

00005f20 <__fp_inf>:
    5f20:	97 f9       	bld	r25, 7
    5f22:	9f 67       	ori	r25, 0x7F	; 127
    5f24:	80 e8       	ldi	r24, 0x80	; 128
    5f26:	70 e0       	ldi	r23, 0x00	; 0
    5f28:	60 e0       	ldi	r22, 0x00	; 0
    5f2a:	08 95       	ret

00005f2c <__fp_nan>:
    5f2c:	9f ef       	ldi	r25, 0xFF	; 255
    5f2e:	80 ec       	ldi	r24, 0xC0	; 192
    5f30:	08 95       	ret

00005f32 <__fp_pscA>:
    5f32:	00 24       	eor	r0, r0
    5f34:	0a 94       	dec	r0
    5f36:	16 16       	cp	r1, r22
    5f38:	17 06       	cpc	r1, r23
    5f3a:	18 06       	cpc	r1, r24
    5f3c:	09 06       	cpc	r0, r25
    5f3e:	08 95       	ret

00005f40 <__fp_pscB>:
    5f40:	00 24       	eor	r0, r0
    5f42:	0a 94       	dec	r0
    5f44:	12 16       	cp	r1, r18
    5f46:	13 06       	cpc	r1, r19
    5f48:	14 06       	cpc	r1, r20
    5f4a:	05 06       	cpc	r0, r21
    5f4c:	08 95       	ret

00005f4e <__fp_round>:
    5f4e:	09 2e       	mov	r0, r25
    5f50:	03 94       	inc	r0
    5f52:	00 0c       	add	r0, r0
    5f54:	11 f4       	brne	.+4      	; 0x5f5a <__fp_round+0xc>
    5f56:	88 23       	and	r24, r24
    5f58:	52 f0       	brmi	.+20     	; 0x5f6e <__fp_round+0x20>
    5f5a:	bb 0f       	add	r27, r27
    5f5c:	40 f4       	brcc	.+16     	; 0x5f6e <__fp_round+0x20>
    5f5e:	bf 2b       	or	r27, r31
    5f60:	11 f4       	brne	.+4      	; 0x5f66 <__fp_round+0x18>
    5f62:	60 ff       	sbrs	r22, 0
    5f64:	04 c0       	rjmp	.+8      	; 0x5f6e <__fp_round+0x20>
    5f66:	6f 5f       	subi	r22, 0xFF	; 255
    5f68:	7f 4f       	sbci	r23, 0xFF	; 255
    5f6a:	8f 4f       	sbci	r24, 0xFF	; 255
    5f6c:	9f 4f       	sbci	r25, 0xFF	; 255
    5f6e:	08 95       	ret

00005f70 <__fp_split3>:
    5f70:	57 fd       	sbrc	r21, 7
    5f72:	90 58       	subi	r25, 0x80	; 128
    5f74:	44 0f       	add	r20, r20
    5f76:	55 1f       	adc	r21, r21
    5f78:	59 f0       	breq	.+22     	; 0x5f90 <__fp_splitA+0x10>
    5f7a:	5f 3f       	cpi	r21, 0xFF	; 255
    5f7c:	71 f0       	breq	.+28     	; 0x5f9a <__fp_splitA+0x1a>
    5f7e:	47 95       	ror	r20

00005f80 <__fp_splitA>:
    5f80:	88 0f       	add	r24, r24
    5f82:	97 fb       	bst	r25, 7
    5f84:	99 1f       	adc	r25, r25
    5f86:	61 f0       	breq	.+24     	; 0x5fa0 <__fp_splitA+0x20>
    5f88:	9f 3f       	cpi	r25, 0xFF	; 255
    5f8a:	79 f0       	breq	.+30     	; 0x5faa <__fp_splitA+0x2a>
    5f8c:	87 95       	ror	r24
    5f8e:	08 95       	ret
    5f90:	12 16       	cp	r1, r18
    5f92:	13 06       	cpc	r1, r19
    5f94:	14 06       	cpc	r1, r20
    5f96:	55 1f       	adc	r21, r21
    5f98:	f2 cf       	rjmp	.-28     	; 0x5f7e <__fp_split3+0xe>
    5f9a:	46 95       	lsr	r20
    5f9c:	f1 df       	rcall	.-30     	; 0x5f80 <__fp_splitA>
    5f9e:	08 c0       	rjmp	.+16     	; 0x5fb0 <__fp_splitA+0x30>
    5fa0:	16 16       	cp	r1, r22
    5fa2:	17 06       	cpc	r1, r23
    5fa4:	18 06       	cpc	r1, r24
    5fa6:	99 1f       	adc	r25, r25
    5fa8:	f1 cf       	rjmp	.-30     	; 0x5f8c <__fp_splitA+0xc>
    5faa:	86 95       	lsr	r24
    5fac:	71 05       	cpc	r23, r1
    5fae:	61 05       	cpc	r22, r1
    5fb0:	08 94       	sec
    5fb2:	08 95       	ret

00005fb4 <__fp_zero>:
    5fb4:	e8 94       	clt

00005fb6 <__fp_szero>:
    5fb6:	bb 27       	eor	r27, r27
    5fb8:	66 27       	eor	r22, r22
    5fba:	77 27       	eor	r23, r23
    5fbc:	cb 01       	movw	r24, r22
    5fbe:	97 f9       	bld	r25, 7
    5fc0:	08 95       	ret

00005fc2 <__divmodhi4>:
    5fc2:	97 fb       	bst	r25, 7
    5fc4:	07 2e       	mov	r0, r23
    5fc6:	16 f4       	brtc	.+4      	; 0x5fcc <__divmodhi4+0xa>
    5fc8:	00 94       	com	r0
    5fca:	07 d0       	rcall	.+14     	; 0x5fda <__divmodhi4_neg1>
    5fcc:	77 fd       	sbrc	r23, 7
    5fce:	09 d0       	rcall	.+18     	; 0x5fe2 <__divmodhi4_neg2>
    5fd0:	0e 94 4d 30 	call	0x609a	; 0x609a <__udivmodhi4>
    5fd4:	07 fc       	sbrc	r0, 7
    5fd6:	05 d0       	rcall	.+10     	; 0x5fe2 <__divmodhi4_neg2>
    5fd8:	3e f4       	brtc	.+14     	; 0x5fe8 <__divmodhi4_exit>

00005fda <__divmodhi4_neg1>:
    5fda:	90 95       	com	r25
    5fdc:	81 95       	neg	r24
    5fde:	9f 4f       	sbci	r25, 0xFF	; 255
    5fe0:	08 95       	ret

00005fe2 <__divmodhi4_neg2>:
    5fe2:	70 95       	com	r23
    5fe4:	61 95       	neg	r22
    5fe6:	7f 4f       	sbci	r23, 0xFF	; 255

00005fe8 <__divmodhi4_exit>:
    5fe8:	08 95       	ret

00005fea <__udivmodsi4>:
    5fea:	a1 e2       	ldi	r26, 0x21	; 33
    5fec:	1a 2e       	mov	r1, r26
    5fee:	aa 1b       	sub	r26, r26
    5ff0:	bb 1b       	sub	r27, r27
    5ff2:	fd 01       	movw	r30, r26
    5ff4:	0d c0       	rjmp	.+26     	; 0x6010 <__udivmodsi4_ep>

00005ff6 <__udivmodsi4_loop>:
    5ff6:	aa 1f       	adc	r26, r26
    5ff8:	bb 1f       	adc	r27, r27
    5ffa:	ee 1f       	adc	r30, r30
    5ffc:	ff 1f       	adc	r31, r31
    5ffe:	a2 17       	cp	r26, r18
    6000:	b3 07       	cpc	r27, r19
    6002:	e4 07       	cpc	r30, r20
    6004:	f5 07       	cpc	r31, r21
    6006:	20 f0       	brcs	.+8      	; 0x6010 <__udivmodsi4_ep>
    6008:	a2 1b       	sub	r26, r18
    600a:	b3 0b       	sbc	r27, r19
    600c:	e4 0b       	sbc	r30, r20
    600e:	f5 0b       	sbc	r31, r21

00006010 <__udivmodsi4_ep>:
    6010:	66 1f       	adc	r22, r22
    6012:	77 1f       	adc	r23, r23
    6014:	88 1f       	adc	r24, r24
    6016:	99 1f       	adc	r25, r25
    6018:	1a 94       	dec	r1
    601a:	69 f7       	brne	.-38     	; 0x5ff6 <__udivmodsi4_loop>
    601c:	60 95       	com	r22
    601e:	70 95       	com	r23
    6020:	80 95       	com	r24
    6022:	90 95       	com	r25
    6024:	9b 01       	movw	r18, r22
    6026:	ac 01       	movw	r20, r24
    6028:	bd 01       	movw	r22, r26
    602a:	cf 01       	movw	r24, r30
    602c:	08 95       	ret

0000602e <__tablejump2__>:
    602e:	ee 0f       	add	r30, r30
    6030:	ff 1f       	adc	r31, r31
    6032:	00 24       	eor	r0, r0
    6034:	00 1c       	adc	r0, r0
    6036:	0b be       	out	0x3b, r0	; 59
    6038:	07 90       	elpm	r0, Z+
    603a:	f6 91       	elpm	r31, Z
    603c:	e0 2d       	mov	r30, r0
    603e:	09 94       	ijmp

00006040 <__umulhisi3>:
    6040:	a2 9f       	mul	r26, r18
    6042:	b0 01       	movw	r22, r0
    6044:	b3 9f       	mul	r27, r19
    6046:	c0 01       	movw	r24, r0
    6048:	a3 9f       	mul	r26, r19
    604a:	70 0d       	add	r23, r0
    604c:	81 1d       	adc	r24, r1
    604e:	11 24       	eor	r1, r1
    6050:	91 1d       	adc	r25, r1
    6052:	b2 9f       	mul	r27, r18
    6054:	70 0d       	add	r23, r0
    6056:	81 1d       	adc	r24, r1
    6058:	11 24       	eor	r1, r1
    605a:	91 1d       	adc	r25, r1
    605c:	08 95       	ret

0000605e <__ashrdi3>:
    605e:	97 fb       	bst	r25, 7
    6060:	10 f8       	bld	r1, 0

00006062 <__lshrdi3>:
    6062:	16 94       	lsr	r1
    6064:	00 08       	sbc	r0, r0
    6066:	0f 93       	push	r16
    6068:	08 30       	cpi	r16, 0x08	; 8
    606a:	98 f0       	brcs	.+38     	; 0x6092 <__lshrdi3+0x30>
    606c:	08 50       	subi	r16, 0x08	; 8
    606e:	23 2f       	mov	r18, r19
    6070:	34 2f       	mov	r19, r20
    6072:	45 2f       	mov	r20, r21
    6074:	56 2f       	mov	r21, r22
    6076:	67 2f       	mov	r22, r23
    6078:	78 2f       	mov	r23, r24
    607a:	89 2f       	mov	r24, r25
    607c:	90 2d       	mov	r25, r0
    607e:	f4 cf       	rjmp	.-24     	; 0x6068 <__lshrdi3+0x6>
    6080:	05 94       	asr	r0
    6082:	97 95       	ror	r25
    6084:	87 95       	ror	r24
    6086:	77 95       	ror	r23
    6088:	67 95       	ror	r22
    608a:	57 95       	ror	r21
    608c:	47 95       	ror	r20
    608e:	37 95       	ror	r19
    6090:	27 95       	ror	r18
    6092:	0a 95       	dec	r16
    6094:	aa f7       	brpl	.-22     	; 0x6080 <__lshrdi3+0x1e>
    6096:	0f 91       	pop	r16
    6098:	08 95       	ret

0000609a <__udivmodhi4>:
    609a:	aa 1b       	sub	r26, r26
    609c:	bb 1b       	sub	r27, r27
    609e:	51 e1       	ldi	r21, 0x11	; 17
    60a0:	07 c0       	rjmp	.+14     	; 0x60b0 <__udivmodhi4_ep>

000060a2 <__udivmodhi4_loop>:
    60a2:	aa 1f       	adc	r26, r26
    60a4:	bb 1f       	adc	r27, r27
    60a6:	a6 17       	cp	r26, r22
    60a8:	b7 07       	cpc	r27, r23
    60aa:	10 f0       	brcs	.+4      	; 0x60b0 <__udivmodhi4_ep>
    60ac:	a6 1b       	sub	r26, r22
    60ae:	b7 0b       	sbc	r27, r23

000060b0 <__udivmodhi4_ep>:
    60b0:	88 1f       	adc	r24, r24
    60b2:	99 1f       	adc	r25, r25
    60b4:	5a 95       	dec	r21
    60b6:	a9 f7       	brne	.-22     	; 0x60a2 <__udivmodhi4_loop>
    60b8:	80 95       	com	r24
    60ba:	90 95       	com	r25
    60bc:	bc 01       	movw	r22, r24
    60be:	cd 01       	movw	r24, r26
    60c0:	08 95       	ret

000060c2 <malloc>:
    60c2:	cf 93       	push	r28
    60c4:	df 93       	push	r29
    60c6:	82 30       	cpi	r24, 0x02	; 2
    60c8:	91 05       	cpc	r25, r1
    60ca:	10 f4       	brcc	.+4      	; 0x60d0 <malloc+0xe>
    60cc:	82 e0       	ldi	r24, 0x02	; 2
    60ce:	90 e0       	ldi	r25, 0x00	; 0
    60d0:	e0 91 c9 0c 	lds	r30, 0x0CC9	; 0x800cc9 <__flp>
    60d4:	f0 91 ca 0c 	lds	r31, 0x0CCA	; 0x800cca <__flp+0x1>
    60d8:	20 e0       	ldi	r18, 0x00	; 0
    60da:	30 e0       	ldi	r19, 0x00	; 0
    60dc:	c0 e0       	ldi	r28, 0x00	; 0
    60de:	d0 e0       	ldi	r29, 0x00	; 0
    60e0:	30 97       	sbiw	r30, 0x00	; 0
    60e2:	11 f1       	breq	.+68     	; 0x6128 <malloc+0x66>
    60e4:	40 81       	ld	r20, Z
    60e6:	51 81       	ldd	r21, Z+1	; 0x01
    60e8:	48 17       	cp	r20, r24
    60ea:	59 07       	cpc	r21, r25
    60ec:	c0 f0       	brcs	.+48     	; 0x611e <malloc+0x5c>
    60ee:	48 17       	cp	r20, r24
    60f0:	59 07       	cpc	r21, r25
    60f2:	61 f4       	brne	.+24     	; 0x610c <malloc+0x4a>
    60f4:	82 81       	ldd	r24, Z+2	; 0x02
    60f6:	93 81       	ldd	r25, Z+3	; 0x03
    60f8:	20 97       	sbiw	r28, 0x00	; 0
    60fa:	19 f0       	breq	.+6      	; 0x6102 <malloc+0x40>
    60fc:	9b 83       	std	Y+3, r25	; 0x03
    60fe:	8a 83       	std	Y+2, r24	; 0x02
    6100:	2b c0       	rjmp	.+86     	; 0x6158 <malloc+0x96>
    6102:	90 93 ca 0c 	sts	0x0CCA, r25	; 0x800cca <__flp+0x1>
    6106:	80 93 c9 0c 	sts	0x0CC9, r24	; 0x800cc9 <__flp>
    610a:	26 c0       	rjmp	.+76     	; 0x6158 <malloc+0x96>
    610c:	21 15       	cp	r18, r1
    610e:	31 05       	cpc	r19, r1
    6110:	19 f0       	breq	.+6      	; 0x6118 <malloc+0x56>
    6112:	42 17       	cp	r20, r18
    6114:	53 07       	cpc	r21, r19
    6116:	18 f4       	brcc	.+6      	; 0x611e <malloc+0x5c>
    6118:	9a 01       	movw	r18, r20
    611a:	be 01       	movw	r22, r28
    611c:	df 01       	movw	r26, r30
    611e:	ef 01       	movw	r28, r30
    6120:	02 80       	ldd	r0, Z+2	; 0x02
    6122:	f3 81       	ldd	r31, Z+3	; 0x03
    6124:	e0 2d       	mov	r30, r0
    6126:	dc cf       	rjmp	.-72     	; 0x60e0 <malloc+0x1e>
    6128:	21 15       	cp	r18, r1
    612a:	31 05       	cpc	r19, r1
    612c:	09 f1       	breq	.+66     	; 0x6170 <malloc+0xae>
    612e:	28 1b       	sub	r18, r24
    6130:	39 0b       	sbc	r19, r25
    6132:	24 30       	cpi	r18, 0x04	; 4
    6134:	31 05       	cpc	r19, r1
    6136:	90 f4       	brcc	.+36     	; 0x615c <malloc+0x9a>
    6138:	12 96       	adiw	r26, 0x02	; 2
    613a:	8d 91       	ld	r24, X+
    613c:	9c 91       	ld	r25, X
    613e:	13 97       	sbiw	r26, 0x03	; 3
    6140:	61 15       	cp	r22, r1
    6142:	71 05       	cpc	r23, r1
    6144:	21 f0       	breq	.+8      	; 0x614e <malloc+0x8c>
    6146:	fb 01       	movw	r30, r22
    6148:	93 83       	std	Z+3, r25	; 0x03
    614a:	82 83       	std	Z+2, r24	; 0x02
    614c:	04 c0       	rjmp	.+8      	; 0x6156 <malloc+0x94>
    614e:	90 93 ca 0c 	sts	0x0CCA, r25	; 0x800cca <__flp+0x1>
    6152:	80 93 c9 0c 	sts	0x0CC9, r24	; 0x800cc9 <__flp>
    6156:	fd 01       	movw	r30, r26
    6158:	32 96       	adiw	r30, 0x02	; 2
    615a:	44 c0       	rjmp	.+136    	; 0x61e4 <malloc+0x122>
    615c:	fd 01       	movw	r30, r26
    615e:	e2 0f       	add	r30, r18
    6160:	f3 1f       	adc	r31, r19
    6162:	81 93       	st	Z+, r24
    6164:	91 93       	st	Z+, r25
    6166:	22 50       	subi	r18, 0x02	; 2
    6168:	31 09       	sbc	r19, r1
    616a:	2d 93       	st	X+, r18
    616c:	3c 93       	st	X, r19
    616e:	3a c0       	rjmp	.+116    	; 0x61e4 <malloc+0x122>
    6170:	20 91 c7 0c 	lds	r18, 0x0CC7	; 0x800cc7 <__brkval>
    6174:	30 91 c8 0c 	lds	r19, 0x0CC8	; 0x800cc8 <__brkval+0x1>
    6178:	23 2b       	or	r18, r19
    617a:	41 f4       	brne	.+16     	; 0x618c <malloc+0xca>
    617c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    6180:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    6184:	30 93 c8 0c 	sts	0x0CC8, r19	; 0x800cc8 <__brkval+0x1>
    6188:	20 93 c7 0c 	sts	0x0CC7, r18	; 0x800cc7 <__brkval>
    618c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    6190:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    6194:	21 15       	cp	r18, r1
    6196:	31 05       	cpc	r19, r1
    6198:	41 f4       	brne	.+16     	; 0x61aa <malloc+0xe8>
    619a:	2d b7       	in	r18, 0x3d	; 61
    619c:	3e b7       	in	r19, 0x3e	; 62
    619e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    61a2:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    61a6:	24 1b       	sub	r18, r20
    61a8:	35 0b       	sbc	r19, r21
    61aa:	e0 91 c7 0c 	lds	r30, 0x0CC7	; 0x800cc7 <__brkval>
    61ae:	f0 91 c8 0c 	lds	r31, 0x0CC8	; 0x800cc8 <__brkval+0x1>
    61b2:	e2 17       	cp	r30, r18
    61b4:	f3 07       	cpc	r31, r19
    61b6:	a0 f4       	brcc	.+40     	; 0x61e0 <malloc+0x11e>
    61b8:	2e 1b       	sub	r18, r30
    61ba:	3f 0b       	sbc	r19, r31
    61bc:	28 17       	cp	r18, r24
    61be:	39 07       	cpc	r19, r25
    61c0:	78 f0       	brcs	.+30     	; 0x61e0 <malloc+0x11e>
    61c2:	ac 01       	movw	r20, r24
    61c4:	4e 5f       	subi	r20, 0xFE	; 254
    61c6:	5f 4f       	sbci	r21, 0xFF	; 255
    61c8:	24 17       	cp	r18, r20
    61ca:	35 07       	cpc	r19, r21
    61cc:	48 f0       	brcs	.+18     	; 0x61e0 <malloc+0x11e>
    61ce:	4e 0f       	add	r20, r30
    61d0:	5f 1f       	adc	r21, r31
    61d2:	50 93 c8 0c 	sts	0x0CC8, r21	; 0x800cc8 <__brkval+0x1>
    61d6:	40 93 c7 0c 	sts	0x0CC7, r20	; 0x800cc7 <__brkval>
    61da:	81 93       	st	Z+, r24
    61dc:	91 93       	st	Z+, r25
    61de:	02 c0       	rjmp	.+4      	; 0x61e4 <malloc+0x122>
    61e0:	e0 e0       	ldi	r30, 0x00	; 0
    61e2:	f0 e0       	ldi	r31, 0x00	; 0
    61e4:	cf 01       	movw	r24, r30
    61e6:	df 91       	pop	r29
    61e8:	cf 91       	pop	r28
    61ea:	08 95       	ret

000061ec <free>:
    61ec:	0f 93       	push	r16
    61ee:	1f 93       	push	r17
    61f0:	cf 93       	push	r28
    61f2:	df 93       	push	r29
    61f4:	00 97       	sbiw	r24, 0x00	; 0
    61f6:	09 f4       	brne	.+2      	; 0x61fa <free+0xe>
    61f8:	8c c0       	rjmp	.+280    	; 0x6312 <free+0x126>
    61fa:	fc 01       	movw	r30, r24
    61fc:	32 97       	sbiw	r30, 0x02	; 2
    61fe:	13 82       	std	Z+3, r1	; 0x03
    6200:	12 82       	std	Z+2, r1	; 0x02
    6202:	00 91 c9 0c 	lds	r16, 0x0CC9	; 0x800cc9 <__flp>
    6206:	10 91 ca 0c 	lds	r17, 0x0CCA	; 0x800cca <__flp+0x1>
    620a:	01 15       	cp	r16, r1
    620c:	11 05       	cpc	r17, r1
    620e:	81 f4       	brne	.+32     	; 0x6230 <free+0x44>
    6210:	20 81       	ld	r18, Z
    6212:	31 81       	ldd	r19, Z+1	; 0x01
    6214:	82 0f       	add	r24, r18
    6216:	93 1f       	adc	r25, r19
    6218:	20 91 c7 0c 	lds	r18, 0x0CC7	; 0x800cc7 <__brkval>
    621c:	30 91 c8 0c 	lds	r19, 0x0CC8	; 0x800cc8 <__brkval+0x1>
    6220:	28 17       	cp	r18, r24
    6222:	39 07       	cpc	r19, r25
    6224:	79 f5       	brne	.+94     	; 0x6284 <free+0x98>
    6226:	f0 93 c8 0c 	sts	0x0CC8, r31	; 0x800cc8 <__brkval+0x1>
    622a:	e0 93 c7 0c 	sts	0x0CC7, r30	; 0x800cc7 <__brkval>
    622e:	71 c0       	rjmp	.+226    	; 0x6312 <free+0x126>
    6230:	d8 01       	movw	r26, r16
    6232:	40 e0       	ldi	r20, 0x00	; 0
    6234:	50 e0       	ldi	r21, 0x00	; 0
    6236:	ae 17       	cp	r26, r30
    6238:	bf 07       	cpc	r27, r31
    623a:	50 f4       	brcc	.+20     	; 0x6250 <free+0x64>
    623c:	12 96       	adiw	r26, 0x02	; 2
    623e:	2d 91       	ld	r18, X+
    6240:	3c 91       	ld	r19, X
    6242:	13 97       	sbiw	r26, 0x03	; 3
    6244:	ad 01       	movw	r20, r26
    6246:	21 15       	cp	r18, r1
    6248:	31 05       	cpc	r19, r1
    624a:	09 f1       	breq	.+66     	; 0x628e <free+0xa2>
    624c:	d9 01       	movw	r26, r18
    624e:	f3 cf       	rjmp	.-26     	; 0x6236 <free+0x4a>
    6250:	9d 01       	movw	r18, r26
    6252:	da 01       	movw	r26, r20
    6254:	33 83       	std	Z+3, r19	; 0x03
    6256:	22 83       	std	Z+2, r18	; 0x02
    6258:	60 81       	ld	r22, Z
    625a:	71 81       	ldd	r23, Z+1	; 0x01
    625c:	86 0f       	add	r24, r22
    625e:	97 1f       	adc	r25, r23
    6260:	82 17       	cp	r24, r18
    6262:	93 07       	cpc	r25, r19
    6264:	69 f4       	brne	.+26     	; 0x6280 <free+0x94>
    6266:	ec 01       	movw	r28, r24
    6268:	28 81       	ld	r18, Y
    626a:	39 81       	ldd	r19, Y+1	; 0x01
    626c:	26 0f       	add	r18, r22
    626e:	37 1f       	adc	r19, r23
    6270:	2e 5f       	subi	r18, 0xFE	; 254
    6272:	3f 4f       	sbci	r19, 0xFF	; 255
    6274:	31 83       	std	Z+1, r19	; 0x01
    6276:	20 83       	st	Z, r18
    6278:	8a 81       	ldd	r24, Y+2	; 0x02
    627a:	9b 81       	ldd	r25, Y+3	; 0x03
    627c:	93 83       	std	Z+3, r25	; 0x03
    627e:	82 83       	std	Z+2, r24	; 0x02
    6280:	45 2b       	or	r20, r21
    6282:	29 f4       	brne	.+10     	; 0x628e <free+0xa2>
    6284:	f0 93 ca 0c 	sts	0x0CCA, r31	; 0x800cca <__flp+0x1>
    6288:	e0 93 c9 0c 	sts	0x0CC9, r30	; 0x800cc9 <__flp>
    628c:	42 c0       	rjmp	.+132    	; 0x6312 <free+0x126>
    628e:	13 96       	adiw	r26, 0x03	; 3
    6290:	fc 93       	st	X, r31
    6292:	ee 93       	st	-X, r30
    6294:	12 97       	sbiw	r26, 0x02	; 2
    6296:	ed 01       	movw	r28, r26
    6298:	49 91       	ld	r20, Y+
    629a:	59 91       	ld	r21, Y+
    629c:	9e 01       	movw	r18, r28
    629e:	24 0f       	add	r18, r20
    62a0:	35 1f       	adc	r19, r21
    62a2:	e2 17       	cp	r30, r18
    62a4:	f3 07       	cpc	r31, r19
    62a6:	71 f4       	brne	.+28     	; 0x62c4 <free+0xd8>
    62a8:	80 81       	ld	r24, Z
    62aa:	91 81       	ldd	r25, Z+1	; 0x01
    62ac:	84 0f       	add	r24, r20
    62ae:	95 1f       	adc	r25, r21
    62b0:	02 96       	adiw	r24, 0x02	; 2
    62b2:	11 96       	adiw	r26, 0x01	; 1
    62b4:	9c 93       	st	X, r25
    62b6:	8e 93       	st	-X, r24
    62b8:	82 81       	ldd	r24, Z+2	; 0x02
    62ba:	93 81       	ldd	r25, Z+3	; 0x03
    62bc:	13 96       	adiw	r26, 0x03	; 3
    62be:	9c 93       	st	X, r25
    62c0:	8e 93       	st	-X, r24
    62c2:	12 97       	sbiw	r26, 0x02	; 2
    62c4:	e0 e0       	ldi	r30, 0x00	; 0
    62c6:	f0 e0       	ldi	r31, 0x00	; 0
    62c8:	d8 01       	movw	r26, r16
    62ca:	12 96       	adiw	r26, 0x02	; 2
    62cc:	8d 91       	ld	r24, X+
    62ce:	9c 91       	ld	r25, X
    62d0:	13 97       	sbiw	r26, 0x03	; 3
    62d2:	00 97       	sbiw	r24, 0x00	; 0
    62d4:	19 f0       	breq	.+6      	; 0x62dc <free+0xf0>
    62d6:	f8 01       	movw	r30, r16
    62d8:	8c 01       	movw	r16, r24
    62da:	f6 cf       	rjmp	.-20     	; 0x62c8 <free+0xdc>
    62dc:	8d 91       	ld	r24, X+
    62de:	9c 91       	ld	r25, X
    62e0:	98 01       	movw	r18, r16
    62e2:	2e 5f       	subi	r18, 0xFE	; 254
    62e4:	3f 4f       	sbci	r19, 0xFF	; 255
    62e6:	82 0f       	add	r24, r18
    62e8:	93 1f       	adc	r25, r19
    62ea:	20 91 c7 0c 	lds	r18, 0x0CC7	; 0x800cc7 <__brkval>
    62ee:	30 91 c8 0c 	lds	r19, 0x0CC8	; 0x800cc8 <__brkval+0x1>
    62f2:	28 17       	cp	r18, r24
    62f4:	39 07       	cpc	r19, r25
    62f6:	69 f4       	brne	.+26     	; 0x6312 <free+0x126>
    62f8:	30 97       	sbiw	r30, 0x00	; 0
    62fa:	29 f4       	brne	.+10     	; 0x6306 <free+0x11a>
    62fc:	10 92 ca 0c 	sts	0x0CCA, r1	; 0x800cca <__flp+0x1>
    6300:	10 92 c9 0c 	sts	0x0CC9, r1	; 0x800cc9 <__flp>
    6304:	02 c0       	rjmp	.+4      	; 0x630a <free+0x11e>
    6306:	13 82       	std	Z+3, r1	; 0x03
    6308:	12 82       	std	Z+2, r1	; 0x02
    630a:	10 93 c8 0c 	sts	0x0CC8, r17	; 0x800cc8 <__brkval+0x1>
    630e:	00 93 c7 0c 	sts	0x0CC7, r16	; 0x800cc7 <__brkval>
    6312:	df 91       	pop	r29
    6314:	cf 91       	pop	r28
    6316:	1f 91       	pop	r17
    6318:	0f 91       	pop	r16
    631a:	08 95       	ret

0000631c <do_rand>:
    631c:	8f 92       	push	r8
    631e:	9f 92       	push	r9
    6320:	af 92       	push	r10
    6322:	bf 92       	push	r11
    6324:	cf 92       	push	r12
    6326:	df 92       	push	r13
    6328:	ef 92       	push	r14
    632a:	ff 92       	push	r15
    632c:	cf 93       	push	r28
    632e:	df 93       	push	r29
    6330:	ec 01       	movw	r28, r24
    6332:	68 81       	ld	r22, Y
    6334:	79 81       	ldd	r23, Y+1	; 0x01
    6336:	8a 81       	ldd	r24, Y+2	; 0x02
    6338:	9b 81       	ldd	r25, Y+3	; 0x03
    633a:	61 15       	cp	r22, r1
    633c:	71 05       	cpc	r23, r1
    633e:	81 05       	cpc	r24, r1
    6340:	91 05       	cpc	r25, r1
    6342:	21 f4       	brne	.+8      	; 0x634c <do_rand+0x30>
    6344:	64 e2       	ldi	r22, 0x24	; 36
    6346:	79 ed       	ldi	r23, 0xD9	; 217
    6348:	8b e5       	ldi	r24, 0x5B	; 91
    634a:	97 e0       	ldi	r25, 0x07	; 7
    634c:	2d e1       	ldi	r18, 0x1D	; 29
    634e:	33 ef       	ldi	r19, 0xF3	; 243
    6350:	41 e0       	ldi	r20, 0x01	; 1
    6352:	50 e0       	ldi	r21, 0x00	; 0
    6354:	0e 94 fd 37 	call	0x6ffa	; 0x6ffa <__divmodsi4>
    6358:	49 01       	movw	r8, r18
    635a:	5a 01       	movw	r10, r20
    635c:	9b 01       	movw	r18, r22
    635e:	ac 01       	movw	r20, r24
    6360:	a7 ea       	ldi	r26, 0xA7	; 167
    6362:	b1 e4       	ldi	r27, 0x41	; 65
    6364:	0e 94 1c 38 	call	0x7038	; 0x7038 <__muluhisi3>
    6368:	6b 01       	movw	r12, r22
    636a:	7c 01       	movw	r14, r24
    636c:	ac ee       	ldi	r26, 0xEC	; 236
    636e:	b4 ef       	ldi	r27, 0xF4	; 244
    6370:	a5 01       	movw	r20, r10
    6372:	94 01       	movw	r18, r8
    6374:	0e 94 2a 38 	call	0x7054	; 0x7054 <__mulohisi3>
    6378:	dc 01       	movw	r26, r24
    637a:	cb 01       	movw	r24, r22
    637c:	8c 0d       	add	r24, r12
    637e:	9d 1d       	adc	r25, r13
    6380:	ae 1d       	adc	r26, r14
    6382:	bf 1d       	adc	r27, r15
    6384:	b7 ff       	sbrs	r27, 7
    6386:	03 c0       	rjmp	.+6      	; 0x638e <do_rand+0x72>
    6388:	01 97       	sbiw	r24, 0x01	; 1
    638a:	a1 09       	sbc	r26, r1
    638c:	b0 48       	sbci	r27, 0x80	; 128
    638e:	88 83       	st	Y, r24
    6390:	99 83       	std	Y+1, r25	; 0x01
    6392:	aa 83       	std	Y+2, r26	; 0x02
    6394:	bb 83       	std	Y+3, r27	; 0x03
    6396:	9f 77       	andi	r25, 0x7F	; 127
    6398:	df 91       	pop	r29
    639a:	cf 91       	pop	r28
    639c:	ff 90       	pop	r15
    639e:	ef 90       	pop	r14
    63a0:	df 90       	pop	r13
    63a2:	cf 90       	pop	r12
    63a4:	bf 90       	pop	r11
    63a6:	af 90       	pop	r10
    63a8:	9f 90       	pop	r9
    63aa:	8f 90       	pop	r8
    63ac:	08 95       	ret

000063ae <rand_r>:
    63ae:	0c 94 8e 31 	jmp	0x631c	; 0x631c <do_rand>

000063b2 <rand>:
    63b2:	86 e0       	ldi	r24, 0x06	; 6
    63b4:	92 e0       	ldi	r25, 0x02	; 2
    63b6:	0c 94 8e 31 	jmp	0x631c	; 0x631c <do_rand>

000063ba <srand>:
    63ba:	a0 e0       	ldi	r26, 0x00	; 0
    63bc:	b0 e0       	ldi	r27, 0x00	; 0
    63be:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <next>
    63c2:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <next+0x1>
    63c6:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <next+0x2>
    63ca:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <next+0x3>
    63ce:	08 95       	ret

000063d0 <strtoul>:
    63d0:	2f 92       	push	r2
    63d2:	3f 92       	push	r3
    63d4:	4f 92       	push	r4
    63d6:	5f 92       	push	r5
    63d8:	6f 92       	push	r6
    63da:	7f 92       	push	r7
    63dc:	8f 92       	push	r8
    63de:	9f 92       	push	r9
    63e0:	af 92       	push	r10
    63e2:	bf 92       	push	r11
    63e4:	cf 92       	push	r12
    63e6:	df 92       	push	r13
    63e8:	ef 92       	push	r14
    63ea:	ff 92       	push	r15
    63ec:	0f 93       	push	r16
    63ee:	1f 93       	push	r17
    63f0:	cf 93       	push	r28
    63f2:	df 93       	push	r29
    63f4:	00 d0       	rcall	.+0      	; 0x63f6 <strtoul+0x26>
    63f6:	00 d0       	rcall	.+0      	; 0x63f8 <strtoul+0x28>
    63f8:	00 d0       	rcall	.+0      	; 0x63fa <strtoul+0x2a>
    63fa:	cd b7       	in	r28, 0x3d	; 61
    63fc:	de b7       	in	r29, 0x3e	; 62
    63fe:	5c 01       	movw	r10, r24
    6400:	6b 01       	movw	r12, r22
    6402:	7a 01       	movw	r14, r20
    6404:	61 15       	cp	r22, r1
    6406:	71 05       	cpc	r23, r1
    6408:	19 f0       	breq	.+6      	; 0x6410 <strtoul+0x40>
    640a:	db 01       	movw	r26, r22
    640c:	8d 93       	st	X+, r24
    640e:	9c 93       	st	X, r25
    6410:	e1 14       	cp	r14, r1
    6412:	f1 04       	cpc	r15, r1
    6414:	29 f0       	breq	.+10     	; 0x6420 <strtoul+0x50>
    6416:	c7 01       	movw	r24, r14
    6418:	02 97       	sbiw	r24, 0x02	; 2
    641a:	83 97       	sbiw	r24, 0x23	; 35
    641c:	08 f0       	brcs	.+2      	; 0x6420 <strtoul+0x50>
    641e:	dc c0       	rjmp	.+440    	; 0x65d8 <strtoul+0x208>
    6420:	35 01       	movw	r6, r10
    6422:	bf ef       	ldi	r27, 0xFF	; 255
    6424:	6b 1a       	sub	r6, r27
    6426:	7b 0a       	sbc	r7, r27
    6428:	f5 01       	movw	r30, r10
    642a:	10 81       	ld	r17, Z
    642c:	81 2f       	mov	r24, r17
    642e:	90 e0       	ldi	r25, 0x00	; 0
    6430:	0e 94 1a 34 	call	0x6834	; 0x6834 <isspace>
    6434:	89 2b       	or	r24, r25
    6436:	11 f0       	breq	.+4      	; 0x643c <strtoul+0x6c>
    6438:	53 01       	movw	r10, r6
    643a:	f2 cf       	rjmp	.-28     	; 0x6420 <strtoul+0x50>
    643c:	1d 32       	cpi	r17, 0x2D	; 45
    643e:	49 f4       	brne	.+18     	; 0x6452 <strtoul+0x82>
    6440:	35 01       	movw	r6, r10
    6442:	f2 e0       	ldi	r31, 0x02	; 2
    6444:	6f 0e       	add	r6, r31
    6446:	71 1c       	adc	r7, r1
    6448:	d5 01       	movw	r26, r10
    644a:	11 96       	adiw	r26, 0x01	; 1
    644c:	1c 91       	ld	r17, X
    644e:	01 e0       	ldi	r16, 0x01	; 1
    6450:	09 c0       	rjmp	.+18     	; 0x6464 <strtoul+0x94>
    6452:	1b 32       	cpi	r17, 0x2B	; 43
    6454:	31 f4       	brne	.+12     	; 0x6462 <strtoul+0x92>
    6456:	35 01       	movw	r6, r10
    6458:	b2 e0       	ldi	r27, 0x02	; 2
    645a:	6b 0e       	add	r6, r27
    645c:	71 1c       	adc	r7, r1
    645e:	f5 01       	movw	r30, r10
    6460:	11 81       	ldd	r17, Z+1	; 0x01
    6462:	00 e0       	ldi	r16, 0x00	; 0
    6464:	e1 14       	cp	r14, r1
    6466:	f1 04       	cpc	r15, r1
    6468:	09 f4       	brne	.+2      	; 0x646c <strtoul+0x9c>
    646a:	c4 c0       	rjmp	.+392    	; 0x65f4 <strtoul+0x224>
    646c:	f0 e1       	ldi	r31, 0x10	; 16
    646e:	ef 16       	cp	r14, r31
    6470:	f1 04       	cpc	r15, r1
    6472:	89 f4       	brne	.+34     	; 0x6496 <strtoul+0xc6>
    6474:	10 33       	cpi	r17, 0x30	; 48
    6476:	99 f5       	brne	.+102    	; 0x64de <strtoul+0x10e>
    6478:	d3 01       	movw	r26, r6
    647a:	8c 91       	ld	r24, X
    647c:	8f 7d       	andi	r24, 0xDF	; 223
    647e:	88 35       	cpi	r24, 0x58	; 88
    6480:	09 f0       	breq	.+2      	; 0x6484 <strtoul+0xb4>
    6482:	b2 c0       	rjmp	.+356    	; 0x65e8 <strtoul+0x218>
    6484:	11 96       	adiw	r26, 0x01	; 1
    6486:	1c 91       	ld	r17, X
    6488:	b2 e0       	ldi	r27, 0x02	; 2
    648a:	6b 0e       	add	r6, r27
    648c:	71 1c       	adc	r7, r1
    648e:	02 60       	ori	r16, 0x02	; 2
    6490:	50 e1       	ldi	r21, 0x10	; 16
    6492:	e5 2e       	mov	r14, r21
    6494:	f1 2c       	mov	r15, r1
    6496:	ea e0       	ldi	r30, 0x0A	; 10
    6498:	ee 16       	cp	r14, r30
    649a:	f1 04       	cpc	r15, r1
    649c:	09 f4       	brne	.+2      	; 0x64a0 <strtoul+0xd0>
    649e:	b0 c0       	rjmp	.+352    	; 0x6600 <strtoul+0x230>
    64a0:	f0 e1       	ldi	r31, 0x10	; 16
    64a2:	ef 16       	cp	r14, r31
    64a4:	f1 04       	cpc	r15, r1
    64a6:	d9 f0       	breq	.+54     	; 0x64de <strtoul+0x10e>
    64a8:	28 e0       	ldi	r18, 0x08	; 8
    64aa:	e2 16       	cp	r14, r18
    64ac:	f1 04       	cpc	r15, r1
    64ae:	51 f4       	brne	.+20     	; 0x64c4 <strtoul+0xf4>
    64b0:	38 e0       	ldi	r19, 0x08	; 8
    64b2:	e3 2e       	mov	r14, r19
    64b4:	f1 2c       	mov	r15, r1
    64b6:	88 24       	eor	r8, r8
    64b8:	8a 94       	dec	r8
    64ba:	98 2c       	mov	r9, r8
    64bc:	a8 2c       	mov	r10, r8
    64be:	4f e1       	ldi	r20, 0x1F	; 31
    64c0:	b4 2e       	mov	r11, r20
    64c2:	13 c0       	rjmp	.+38     	; 0x64ea <strtoul+0x11a>
    64c4:	6f ef       	ldi	r22, 0xFF	; 255
    64c6:	7f ef       	ldi	r23, 0xFF	; 255
    64c8:	cb 01       	movw	r24, r22
    64ca:	97 01       	movw	r18, r14
    64cc:	0f 2c       	mov	r0, r15
    64ce:	00 0c       	add	r0, r0
    64d0:	44 0b       	sbc	r20, r20
    64d2:	55 0b       	sbc	r21, r21
    64d4:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <__udivmodsi4>
    64d8:	49 01       	movw	r8, r18
    64da:	5a 01       	movw	r10, r20
    64dc:	06 c0       	rjmp	.+12     	; 0x64ea <strtoul+0x11a>
    64de:	88 24       	eor	r8, r8
    64e0:	8a 94       	dec	r8
    64e2:	98 2c       	mov	r9, r8
    64e4:	a8 2c       	mov	r10, r8
    64e6:	2f e0       	ldi	r18, 0x0F	; 15
    64e8:	b2 2e       	mov	r11, r18
    64ea:	7e 82       	std	Y+6, r7	; 0x06
    64ec:	6d 82       	std	Y+5, r6	; 0x05
    64ee:	60 e0       	ldi	r22, 0x00	; 0
    64f0:	20 e0       	ldi	r18, 0x00	; 0
    64f2:	30 e0       	ldi	r19, 0x00	; 0
    64f4:	a9 01       	movw	r20, r18
    64f6:	27 01       	movw	r4, r14
    64f8:	0f 2c       	mov	r0, r15
    64fa:	00 0c       	add	r0, r0
    64fc:	66 08       	sbc	r6, r6
    64fe:	77 08       	sbc	r7, r7
    6500:	2d 80       	ldd	r2, Y+5	; 0x05
    6502:	3e 80       	ldd	r3, Y+6	; 0x06
    6504:	e0 ed       	ldi	r30, 0xD0	; 208
    6506:	e1 0f       	add	r30, r17
    6508:	ea 30       	cpi	r30, 0x0A	; 10
    650a:	60 f0       	brcs	.+24     	; 0x6524 <strtoul+0x154>
    650c:	8f eb       	ldi	r24, 0xBF	; 191
    650e:	81 0f       	add	r24, r17
    6510:	8a 31       	cpi	r24, 0x1A	; 26
    6512:	10 f4       	brcc	.+4      	; 0x6518 <strtoul+0x148>
    6514:	e9 ec       	ldi	r30, 0xC9	; 201
    6516:	05 c0       	rjmp	.+10     	; 0x6522 <strtoul+0x152>
    6518:	8f e9       	ldi	r24, 0x9F	; 159
    651a:	81 0f       	add	r24, r17
    651c:	8a 31       	cpi	r24, 0x1A	; 26
    651e:	90 f5       	brcc	.+100    	; 0x6584 <strtoul+0x1b4>
    6520:	e9 ea       	ldi	r30, 0xA9	; 169
    6522:	e1 0f       	add	r30, r17
    6524:	8e 2f       	mov	r24, r30
    6526:	90 e0       	ldi	r25, 0x00	; 0
    6528:	8e 15       	cp	r24, r14
    652a:	9f 05       	cpc	r25, r15
    652c:	5c f5       	brge	.+86     	; 0x6584 <strtoul+0x1b4>
    652e:	6f 3f       	cpi	r22, 0xFF	; 255
    6530:	09 f1       	breq	.+66     	; 0x6574 <strtoul+0x1a4>
    6532:	82 16       	cp	r8, r18
    6534:	93 06       	cpc	r9, r19
    6536:	a4 06       	cpc	r10, r20
    6538:	b5 06       	cpc	r11, r21
    653a:	d8 f0       	brcs	.+54     	; 0x6572 <strtoul+0x1a2>
    653c:	c3 01       	movw	r24, r6
    653e:	b2 01       	movw	r22, r4
    6540:	0e 94 ed 37 	call	0x6fda	; 0x6fda <__mulsi3>
    6544:	2e 2f       	mov	r18, r30
    6546:	30 e0       	ldi	r19, 0x00	; 0
    6548:	40 e0       	ldi	r20, 0x00	; 0
    654a:	50 e0       	ldi	r21, 0x00	; 0
    654c:	29 83       	std	Y+1, r18	; 0x01
    654e:	3a 83       	std	Y+2, r19	; 0x02
    6550:	4b 83       	std	Y+3, r20	; 0x03
    6552:	5c 83       	std	Y+4, r21	; 0x04
    6554:	26 0f       	add	r18, r22
    6556:	37 1f       	adc	r19, r23
    6558:	48 1f       	adc	r20, r24
    655a:	59 1f       	adc	r21, r25
    655c:	89 81       	ldd	r24, Y+1	; 0x01
    655e:	9a 81       	ldd	r25, Y+2	; 0x02
    6560:	ab 81       	ldd	r26, Y+3	; 0x03
    6562:	bc 81       	ldd	r27, Y+4	; 0x04
    6564:	28 17       	cp	r18, r24
    6566:	39 07       	cpc	r19, r25
    6568:	4a 07       	cpc	r20, r26
    656a:	5b 07       	cpc	r21, r27
    656c:	10 f0       	brcs	.+4      	; 0x6572 <strtoul+0x1a2>
    656e:	61 e0       	ldi	r22, 0x01	; 1
    6570:	01 c0       	rjmp	.+2      	; 0x6574 <strtoul+0x1a4>
    6572:	6f ef       	ldi	r22, 0xFF	; 255
    6574:	ed 81       	ldd	r30, Y+5	; 0x05
    6576:	fe 81       	ldd	r31, Y+6	; 0x06
    6578:	31 96       	adiw	r30, 0x01	; 1
    657a:	fe 83       	std	Y+6, r31	; 0x06
    657c:	ed 83       	std	Y+5, r30	; 0x05
    657e:	d1 01       	movw	r26, r2
    6580:	1c 91       	ld	r17, X
    6582:	be cf       	rjmp	.-132    	; 0x6500 <strtoul+0x130>
    6584:	c1 14       	cp	r12, r1
    6586:	d1 04       	cpc	r13, r1
    6588:	89 f0       	breq	.+34     	; 0x65ac <strtoul+0x1dc>
    658a:	66 23       	and	r22, r22
    658c:	39 f0       	breq	.+14     	; 0x659c <strtoul+0x1cc>
    658e:	8d 81       	ldd	r24, Y+5	; 0x05
    6590:	9e 81       	ldd	r25, Y+6	; 0x06
    6592:	01 97       	sbiw	r24, 0x01	; 1
    6594:	f6 01       	movw	r30, r12
    6596:	91 83       	std	Z+1, r25	; 0x01
    6598:	80 83       	st	Z, r24
    659a:	08 c0       	rjmp	.+16     	; 0x65ac <strtoul+0x1dc>
    659c:	01 ff       	sbrs	r16, 1
    659e:	06 c0       	rjmp	.+12     	; 0x65ac <strtoul+0x1dc>
    65a0:	8d 81       	ldd	r24, Y+5	; 0x05
    65a2:	9e 81       	ldd	r25, Y+6	; 0x06
    65a4:	02 97       	sbiw	r24, 0x02	; 2
    65a6:	d6 01       	movw	r26, r12
    65a8:	8d 93       	st	X+, r24
    65aa:	9c 93       	st	X, r25
    65ac:	00 ff       	sbrs	r16, 0
    65ae:	07 c0       	rjmp	.+14     	; 0x65be <strtoul+0x1ee>
    65b0:	50 95       	com	r21
    65b2:	40 95       	com	r20
    65b4:	30 95       	com	r19
    65b6:	21 95       	neg	r18
    65b8:	3f 4f       	sbci	r19, 0xFF	; 255
    65ba:	4f 4f       	sbci	r20, 0xFF	; 255
    65bc:	5f 4f       	sbci	r21, 0xFF	; 255
    65be:	67 ff       	sbrs	r22, 7
    65c0:	10 c0       	rjmp	.+32     	; 0x65e2 <strtoul+0x212>
    65c2:	82 e2       	ldi	r24, 0x22	; 34
    65c4:	90 e0       	ldi	r25, 0x00	; 0
    65c6:	90 93 cc 0c 	sts	0x0CCC, r25	; 0x800ccc <errno+0x1>
    65ca:	80 93 cb 0c 	sts	0x0CCB, r24	; 0x800ccb <errno>
    65ce:	6f ef       	ldi	r22, 0xFF	; 255
    65d0:	7f ef       	ldi	r23, 0xFF	; 255
    65d2:	8f ef       	ldi	r24, 0xFF	; 255
    65d4:	9f ef       	ldi	r25, 0xFF	; 255
    65d6:	1b c0       	rjmp	.+54     	; 0x660e <strtoul+0x23e>
    65d8:	60 e0       	ldi	r22, 0x00	; 0
    65da:	70 e0       	ldi	r23, 0x00	; 0
    65dc:	80 e0       	ldi	r24, 0x00	; 0
    65de:	90 e0       	ldi	r25, 0x00	; 0
    65e0:	16 c0       	rjmp	.+44     	; 0x660e <strtoul+0x23e>
    65e2:	b9 01       	movw	r22, r18
    65e4:	ca 01       	movw	r24, r20
    65e6:	13 c0       	rjmp	.+38     	; 0x660e <strtoul+0x23e>
    65e8:	10 e3       	ldi	r17, 0x30	; 48
    65ea:	e1 14       	cp	r14, r1
    65ec:	f1 04       	cpc	r15, r1
    65ee:	09 f4       	brne	.+2      	; 0x65f2 <strtoul+0x222>
    65f0:	5f cf       	rjmp	.-322    	; 0x64b0 <strtoul+0xe0>
    65f2:	51 cf       	rjmp	.-350    	; 0x6496 <strtoul+0xc6>
    65f4:	10 33       	cpi	r17, 0x30	; 48
    65f6:	09 f4       	brne	.+2      	; 0x65fa <strtoul+0x22a>
    65f8:	3f cf       	rjmp	.-386    	; 0x6478 <strtoul+0xa8>
    65fa:	9a e0       	ldi	r25, 0x0A	; 10
    65fc:	e9 2e       	mov	r14, r25
    65fe:	f1 2c       	mov	r15, r1
    6600:	89 e9       	ldi	r24, 0x99	; 153
    6602:	88 2e       	mov	r8, r24
    6604:	98 2c       	mov	r9, r8
    6606:	a8 2c       	mov	r10, r8
    6608:	89 e1       	ldi	r24, 0x19	; 25
    660a:	b8 2e       	mov	r11, r24
    660c:	6e cf       	rjmp	.-292    	; 0x64ea <strtoul+0x11a>
    660e:	26 96       	adiw	r28, 0x06	; 6
    6610:	0f b6       	in	r0, 0x3f	; 63
    6612:	f8 94       	cli
    6614:	de bf       	out	0x3e, r29	; 62
    6616:	0f be       	out	0x3f, r0	; 63
    6618:	cd bf       	out	0x3d, r28	; 61
    661a:	df 91       	pop	r29
    661c:	cf 91       	pop	r28
    661e:	1f 91       	pop	r17
    6620:	0f 91       	pop	r16
    6622:	ff 90       	pop	r15
    6624:	ef 90       	pop	r14
    6626:	df 90       	pop	r13
    6628:	cf 90       	pop	r12
    662a:	bf 90       	pop	r11
    662c:	af 90       	pop	r10
    662e:	9f 90       	pop	r9
    6630:	8f 90       	pop	r8
    6632:	7f 90       	pop	r7
    6634:	6f 90       	pop	r6
    6636:	5f 90       	pop	r5
    6638:	4f 90       	pop	r4
    663a:	3f 90       	pop	r3
    663c:	2f 90       	pop	r2
    663e:	08 95       	ret

00006640 <atof>:
    6640:	66 27       	eor	r22, r22
    6642:	77 27       	eor	r23, r23
    6644:	0c 94 83 35 	jmp	0x6b06	; 0x6b06 <strtod>

00006648 <atoi>:
    6648:	fc 01       	movw	r30, r24
    664a:	88 27       	eor	r24, r24
    664c:	99 27       	eor	r25, r25
    664e:	e8 94       	clt
    6650:	21 91       	ld	r18, Z+
    6652:	20 32       	cpi	r18, 0x20	; 32
    6654:	e9 f3       	breq	.-6      	; 0x6650 <atoi+0x8>
    6656:	29 30       	cpi	r18, 0x09	; 9
    6658:	10 f0       	brcs	.+4      	; 0x665e <atoi+0x16>
    665a:	2e 30       	cpi	r18, 0x0E	; 14
    665c:	c8 f3       	brcs	.-14     	; 0x6650 <atoi+0x8>
    665e:	2b 32       	cpi	r18, 0x2B	; 43
    6660:	41 f0       	breq	.+16     	; 0x6672 <atoi+0x2a>
    6662:	2d 32       	cpi	r18, 0x2D	; 45
    6664:	39 f4       	brne	.+14     	; 0x6674 <atoi+0x2c>
    6666:	68 94       	set
    6668:	04 c0       	rjmp	.+8      	; 0x6672 <atoi+0x2a>
    666a:	0e 94 93 34 	call	0x6926	; 0x6926 <__mulhi_const_10>
    666e:	82 0f       	add	r24, r18
    6670:	91 1d       	adc	r25, r1
    6672:	21 91       	ld	r18, Z+
    6674:	20 53       	subi	r18, 0x30	; 48
    6676:	2a 30       	cpi	r18, 0x0A	; 10
    6678:	c0 f3       	brcs	.-16     	; 0x666a <atoi+0x22>
    667a:	1e f4       	brtc	.+6      	; 0x6682 <atoi+0x3a>
    667c:	90 95       	com	r25
    667e:	81 95       	neg	r24
    6680:	9f 4f       	sbci	r25, 0xFF	; 255
    6682:	08 95       	ret

00006684 <__ftoa_engine>:
    6684:	28 30       	cpi	r18, 0x08	; 8
    6686:	08 f0       	brcs	.+2      	; 0x668a <__ftoa_engine+0x6>
    6688:	27 e0       	ldi	r18, 0x07	; 7
    668a:	33 27       	eor	r19, r19
    668c:	da 01       	movw	r26, r20
    668e:	99 0f       	add	r25, r25
    6690:	31 1d       	adc	r19, r1
    6692:	87 fd       	sbrc	r24, 7
    6694:	91 60       	ori	r25, 0x01	; 1
    6696:	00 96       	adiw	r24, 0x00	; 0
    6698:	61 05       	cpc	r22, r1
    669a:	71 05       	cpc	r23, r1
    669c:	39 f4       	brne	.+14     	; 0x66ac <__ftoa_engine+0x28>
    669e:	32 60       	ori	r19, 0x02	; 2
    66a0:	2e 5f       	subi	r18, 0xFE	; 254
    66a2:	3d 93       	st	X+, r19
    66a4:	30 e3       	ldi	r19, 0x30	; 48
    66a6:	2a 95       	dec	r18
    66a8:	e1 f7       	brne	.-8      	; 0x66a2 <__ftoa_engine+0x1e>
    66aa:	08 95       	ret
    66ac:	9f 3f       	cpi	r25, 0xFF	; 255
    66ae:	30 f0       	brcs	.+12     	; 0x66bc <__ftoa_engine+0x38>
    66b0:	80 38       	cpi	r24, 0x80	; 128
    66b2:	71 05       	cpc	r23, r1
    66b4:	61 05       	cpc	r22, r1
    66b6:	09 f0       	breq	.+2      	; 0x66ba <__ftoa_engine+0x36>
    66b8:	3c 5f       	subi	r19, 0xFC	; 252
    66ba:	3c 5f       	subi	r19, 0xFC	; 252
    66bc:	3d 93       	st	X+, r19
    66be:	91 30       	cpi	r25, 0x01	; 1
    66c0:	08 f0       	brcs	.+2      	; 0x66c4 <__ftoa_engine+0x40>
    66c2:	80 68       	ori	r24, 0x80	; 128
    66c4:	91 1d       	adc	r25, r1
    66c6:	df 93       	push	r29
    66c8:	cf 93       	push	r28
    66ca:	1f 93       	push	r17
    66cc:	0f 93       	push	r16
    66ce:	ff 92       	push	r15
    66d0:	ef 92       	push	r14
    66d2:	19 2f       	mov	r17, r25
    66d4:	98 7f       	andi	r25, 0xF8	; 248
    66d6:	96 95       	lsr	r25
    66d8:	e9 2f       	mov	r30, r25
    66da:	96 95       	lsr	r25
    66dc:	96 95       	lsr	r25
    66de:	e9 0f       	add	r30, r25
    66e0:	ff 27       	eor	r31, r31
    66e2:	e2 5d       	subi	r30, 0xD2	; 210
    66e4:	fd 4f       	sbci	r31, 0xFD	; 253
    66e6:	99 27       	eor	r25, r25
    66e8:	33 27       	eor	r19, r19
    66ea:	ee 24       	eor	r14, r14
    66ec:	ff 24       	eor	r15, r15
    66ee:	a7 01       	movw	r20, r14
    66f0:	e7 01       	movw	r28, r14
    66f2:	05 90       	lpm	r0, Z+
    66f4:	08 94       	sec
    66f6:	07 94       	ror	r0
    66f8:	28 f4       	brcc	.+10     	; 0x6704 <__ftoa_engine+0x80>
    66fa:	36 0f       	add	r19, r22
    66fc:	e7 1e       	adc	r14, r23
    66fe:	f8 1e       	adc	r15, r24
    6700:	49 1f       	adc	r20, r25
    6702:	51 1d       	adc	r21, r1
    6704:	66 0f       	add	r22, r22
    6706:	77 1f       	adc	r23, r23
    6708:	88 1f       	adc	r24, r24
    670a:	99 1f       	adc	r25, r25
    670c:	06 94       	lsr	r0
    670e:	a1 f7       	brne	.-24     	; 0x66f8 <__ftoa_engine+0x74>
    6710:	05 90       	lpm	r0, Z+
    6712:	07 94       	ror	r0
    6714:	28 f4       	brcc	.+10     	; 0x6720 <__ftoa_engine+0x9c>
    6716:	e7 0e       	add	r14, r23
    6718:	f8 1e       	adc	r15, r24
    671a:	49 1f       	adc	r20, r25
    671c:	56 1f       	adc	r21, r22
    671e:	c1 1d       	adc	r28, r1
    6720:	77 0f       	add	r23, r23
    6722:	88 1f       	adc	r24, r24
    6724:	99 1f       	adc	r25, r25
    6726:	66 1f       	adc	r22, r22
    6728:	06 94       	lsr	r0
    672a:	a1 f7       	brne	.-24     	; 0x6714 <__ftoa_engine+0x90>
    672c:	05 90       	lpm	r0, Z+
    672e:	07 94       	ror	r0
    6730:	28 f4       	brcc	.+10     	; 0x673c <__ftoa_engine+0xb8>
    6732:	f8 0e       	add	r15, r24
    6734:	49 1f       	adc	r20, r25
    6736:	56 1f       	adc	r21, r22
    6738:	c7 1f       	adc	r28, r23
    673a:	d1 1d       	adc	r29, r1
    673c:	88 0f       	add	r24, r24
    673e:	99 1f       	adc	r25, r25
    6740:	66 1f       	adc	r22, r22
    6742:	77 1f       	adc	r23, r23
    6744:	06 94       	lsr	r0
    6746:	a1 f7       	brne	.-24     	; 0x6730 <__ftoa_engine+0xac>
    6748:	05 90       	lpm	r0, Z+
    674a:	07 94       	ror	r0
    674c:	20 f4       	brcc	.+8      	; 0x6756 <__ftoa_engine+0xd2>
    674e:	49 0f       	add	r20, r25
    6750:	56 1f       	adc	r21, r22
    6752:	c7 1f       	adc	r28, r23
    6754:	d8 1f       	adc	r29, r24
    6756:	99 0f       	add	r25, r25
    6758:	66 1f       	adc	r22, r22
    675a:	77 1f       	adc	r23, r23
    675c:	88 1f       	adc	r24, r24
    675e:	06 94       	lsr	r0
    6760:	a9 f7       	brne	.-22     	; 0x674c <__ftoa_engine+0xc8>
    6762:	84 91       	lpm	r24, Z
    6764:	10 95       	com	r17
    6766:	17 70       	andi	r17, 0x07	; 7
    6768:	41 f0       	breq	.+16     	; 0x677a <__ftoa_engine+0xf6>
    676a:	d6 95       	lsr	r29
    676c:	c7 95       	ror	r28
    676e:	57 95       	ror	r21
    6770:	47 95       	ror	r20
    6772:	f7 94       	ror	r15
    6774:	e7 94       	ror	r14
    6776:	1a 95       	dec	r17
    6778:	c1 f7       	brne	.-16     	; 0x676a <__ftoa_engine+0xe6>
    677a:	e4 ed       	ldi	r30, 0xD4	; 212
    677c:	f1 e0       	ldi	r31, 0x01	; 1
    677e:	68 94       	set
    6780:	15 90       	lpm	r1, Z+
    6782:	15 91       	lpm	r17, Z+
    6784:	35 91       	lpm	r19, Z+
    6786:	65 91       	lpm	r22, Z+
    6788:	95 91       	lpm	r25, Z+
    678a:	05 90       	lpm	r0, Z+
    678c:	7f e2       	ldi	r23, 0x2F	; 47
    678e:	73 95       	inc	r23
    6790:	e1 18       	sub	r14, r1
    6792:	f1 0a       	sbc	r15, r17
    6794:	43 0b       	sbc	r20, r19
    6796:	56 0b       	sbc	r21, r22
    6798:	c9 0b       	sbc	r28, r25
    679a:	d0 09       	sbc	r29, r0
    679c:	c0 f7       	brcc	.-16     	; 0x678e <__ftoa_engine+0x10a>
    679e:	e1 0c       	add	r14, r1
    67a0:	f1 1e       	adc	r15, r17
    67a2:	43 1f       	adc	r20, r19
    67a4:	56 1f       	adc	r21, r22
    67a6:	c9 1f       	adc	r28, r25
    67a8:	d0 1d       	adc	r29, r0
    67aa:	7e f4       	brtc	.+30     	; 0x67ca <__ftoa_engine+0x146>
    67ac:	70 33       	cpi	r23, 0x30	; 48
    67ae:	11 f4       	brne	.+4      	; 0x67b4 <__ftoa_engine+0x130>
    67b0:	8a 95       	dec	r24
    67b2:	e6 cf       	rjmp	.-52     	; 0x6780 <__ftoa_engine+0xfc>
    67b4:	e8 94       	clt
    67b6:	01 50       	subi	r16, 0x01	; 1
    67b8:	30 f0       	brcs	.+12     	; 0x67c6 <__ftoa_engine+0x142>
    67ba:	08 0f       	add	r16, r24
    67bc:	0a f4       	brpl	.+2      	; 0x67c0 <__ftoa_engine+0x13c>
    67be:	00 27       	eor	r16, r16
    67c0:	02 17       	cp	r16, r18
    67c2:	08 f4       	brcc	.+2      	; 0x67c6 <__ftoa_engine+0x142>
    67c4:	20 2f       	mov	r18, r16
    67c6:	23 95       	inc	r18
    67c8:	02 2f       	mov	r16, r18
    67ca:	7a 33       	cpi	r23, 0x3A	; 58
    67cc:	28 f0       	brcs	.+10     	; 0x67d8 <__ftoa_engine+0x154>
    67ce:	79 e3       	ldi	r23, 0x39	; 57
    67d0:	7d 93       	st	X+, r23
    67d2:	2a 95       	dec	r18
    67d4:	e9 f7       	brne	.-6      	; 0x67d0 <__ftoa_engine+0x14c>
    67d6:	10 c0       	rjmp	.+32     	; 0x67f8 <__ftoa_engine+0x174>
    67d8:	7d 93       	st	X+, r23
    67da:	2a 95       	dec	r18
    67dc:	89 f6       	brne	.-94     	; 0x6780 <__ftoa_engine+0xfc>
    67de:	06 94       	lsr	r0
    67e0:	97 95       	ror	r25
    67e2:	67 95       	ror	r22
    67e4:	37 95       	ror	r19
    67e6:	17 95       	ror	r17
    67e8:	17 94       	ror	r1
    67ea:	e1 18       	sub	r14, r1
    67ec:	f1 0a       	sbc	r15, r17
    67ee:	43 0b       	sbc	r20, r19
    67f0:	56 0b       	sbc	r21, r22
    67f2:	c9 0b       	sbc	r28, r25
    67f4:	d0 09       	sbc	r29, r0
    67f6:	98 f0       	brcs	.+38     	; 0x681e <__ftoa_engine+0x19a>
    67f8:	23 95       	inc	r18
    67fa:	7e 91       	ld	r23, -X
    67fc:	73 95       	inc	r23
    67fe:	7a 33       	cpi	r23, 0x3A	; 58
    6800:	08 f0       	brcs	.+2      	; 0x6804 <__ftoa_engine+0x180>
    6802:	70 e3       	ldi	r23, 0x30	; 48
    6804:	7c 93       	st	X, r23
    6806:	20 13       	cpse	r18, r16
    6808:	b8 f7       	brcc	.-18     	; 0x67f8 <__ftoa_engine+0x174>
    680a:	7e 91       	ld	r23, -X
    680c:	70 61       	ori	r23, 0x10	; 16
    680e:	7d 93       	st	X+, r23
    6810:	30 f0       	brcs	.+12     	; 0x681e <__ftoa_engine+0x19a>
    6812:	83 95       	inc	r24
    6814:	71 e3       	ldi	r23, 0x31	; 49
    6816:	7d 93       	st	X+, r23
    6818:	70 e3       	ldi	r23, 0x30	; 48
    681a:	2a 95       	dec	r18
    681c:	e1 f7       	brne	.-8      	; 0x6816 <__ftoa_engine+0x192>
    681e:	11 24       	eor	r1, r1
    6820:	ef 90       	pop	r14
    6822:	ff 90       	pop	r15
    6824:	0f 91       	pop	r16
    6826:	1f 91       	pop	r17
    6828:	cf 91       	pop	r28
    682a:	df 91       	pop	r29
    682c:	99 27       	eor	r25, r25
    682e:	87 fd       	sbrc	r24, 7
    6830:	90 95       	com	r25
    6832:	08 95       	ret

00006834 <isspace>:
    6834:	91 11       	cpse	r25, r1
    6836:	0c 94 f2 36 	jmp	0x6de4	; 0x6de4 <__ctype_isfalse>
    683a:	80 32       	cpi	r24, 0x20	; 32
    683c:	19 f0       	breq	.+6      	; 0x6844 <isspace+0x10>
    683e:	89 50       	subi	r24, 0x09	; 9
    6840:	85 50       	subi	r24, 0x05	; 5
    6842:	c8 f7       	brcc	.-14     	; 0x6836 <isspace+0x2>
    6844:	08 95       	ret

00006846 <strnlen_P>:
    6846:	fc 01       	movw	r30, r24
    6848:	05 90       	lpm	r0, Z+
    684a:	61 50       	subi	r22, 0x01	; 1
    684c:	70 40       	sbci	r23, 0x00	; 0
    684e:	01 10       	cpse	r0, r1
    6850:	d8 f7       	brcc	.-10     	; 0x6848 <strnlen_P+0x2>
    6852:	80 95       	com	r24
    6854:	90 95       	com	r25
    6856:	8e 0f       	add	r24, r30
    6858:	9f 1f       	adc	r25, r31
    685a:	08 95       	ret

0000685c <memcmp>:
    685c:	fb 01       	movw	r30, r22
    685e:	dc 01       	movw	r26, r24
    6860:	04 c0       	rjmp	.+8      	; 0x686a <memcmp+0xe>
    6862:	8d 91       	ld	r24, X+
    6864:	01 90       	ld	r0, Z+
    6866:	80 19       	sub	r24, r0
    6868:	21 f4       	brne	.+8      	; 0x6872 <memcmp+0x16>
    686a:	41 50       	subi	r20, 0x01	; 1
    686c:	50 40       	sbci	r21, 0x00	; 0
    686e:	c8 f7       	brcc	.-14     	; 0x6862 <memcmp+0x6>
    6870:	88 1b       	sub	r24, r24
    6872:	99 0b       	sbc	r25, r25
    6874:	08 95       	ret

00006876 <memcpy>:
    6876:	fb 01       	movw	r30, r22
    6878:	dc 01       	movw	r26, r24
    687a:	02 c0       	rjmp	.+4      	; 0x6880 <memcpy+0xa>
    687c:	01 90       	ld	r0, Z+
    687e:	0d 92       	st	X+, r0
    6880:	41 50       	subi	r20, 0x01	; 1
    6882:	50 40       	sbci	r21, 0x00	; 0
    6884:	d8 f7       	brcc	.-10     	; 0x687c <memcpy+0x6>
    6886:	08 95       	ret

00006888 <strchr>:
    6888:	fc 01       	movw	r30, r24
    688a:	81 91       	ld	r24, Z+
    688c:	86 17       	cp	r24, r22
    688e:	21 f0       	breq	.+8      	; 0x6898 <strchr+0x10>
    6890:	88 23       	and	r24, r24
    6892:	d9 f7       	brne	.-10     	; 0x688a <strchr+0x2>
    6894:	99 27       	eor	r25, r25
    6896:	08 95       	ret
    6898:	31 97       	sbiw	r30, 0x01	; 1
    689a:	cf 01       	movw	r24, r30
    689c:	08 95       	ret

0000689e <strcmp>:
    689e:	fb 01       	movw	r30, r22
    68a0:	dc 01       	movw	r26, r24
    68a2:	8d 91       	ld	r24, X+
    68a4:	01 90       	ld	r0, Z+
    68a6:	80 19       	sub	r24, r0
    68a8:	01 10       	cpse	r0, r1
    68aa:	d9 f3       	breq	.-10     	; 0x68a2 <strcmp+0x4>
    68ac:	99 0b       	sbc	r25, r25
    68ae:	08 95       	ret

000068b0 <strcpy>:
    68b0:	fb 01       	movw	r30, r22
    68b2:	dc 01       	movw	r26, r24
    68b4:	01 90       	ld	r0, Z+
    68b6:	0d 92       	st	X+, r0
    68b8:	00 20       	and	r0, r0
    68ba:	e1 f7       	brne	.-8      	; 0x68b4 <strcpy+0x4>
    68bc:	08 95       	ret

000068be <strncpy>:
    68be:	fb 01       	movw	r30, r22
    68c0:	dc 01       	movw	r26, r24
    68c2:	41 50       	subi	r20, 0x01	; 1
    68c4:	50 40       	sbci	r21, 0x00	; 0
    68c6:	48 f0       	brcs	.+18     	; 0x68da <strncpy+0x1c>
    68c8:	01 90       	ld	r0, Z+
    68ca:	0d 92       	st	X+, r0
    68cc:	00 20       	and	r0, r0
    68ce:	c9 f7       	brne	.-14     	; 0x68c2 <strncpy+0x4>
    68d0:	01 c0       	rjmp	.+2      	; 0x68d4 <strncpy+0x16>
    68d2:	1d 92       	st	X+, r1
    68d4:	41 50       	subi	r20, 0x01	; 1
    68d6:	50 40       	sbci	r21, 0x00	; 0
    68d8:	e0 f7       	brcc	.-8      	; 0x68d2 <strncpy+0x14>
    68da:	08 95       	ret

000068dc <strnlen>:
    68dc:	fc 01       	movw	r30, r24
    68de:	61 50       	subi	r22, 0x01	; 1
    68e0:	70 40       	sbci	r23, 0x00	; 0
    68e2:	01 90       	ld	r0, Z+
    68e4:	01 10       	cpse	r0, r1
    68e6:	d8 f7       	brcc	.-10     	; 0x68de <strnlen+0x2>
    68e8:	80 95       	com	r24
    68ea:	90 95       	com	r25
    68ec:	8e 0f       	add	r24, r30
    68ee:	9f 1f       	adc	r25, r31
    68f0:	08 95       	ret

000068f2 <strstr>:
    68f2:	fb 01       	movw	r30, r22
    68f4:	51 91       	ld	r21, Z+
    68f6:	55 23       	and	r21, r21
    68f8:	a9 f0       	breq	.+42     	; 0x6924 <strstr+0x32>
    68fa:	bf 01       	movw	r22, r30
    68fc:	dc 01       	movw	r26, r24
    68fe:	4d 91       	ld	r20, X+
    6900:	45 17       	cp	r20, r21
    6902:	41 11       	cpse	r20, r1
    6904:	e1 f7       	brne	.-8      	; 0x68fe <strstr+0xc>
    6906:	59 f4       	brne	.+22     	; 0x691e <strstr+0x2c>
    6908:	cd 01       	movw	r24, r26
    690a:	01 90       	ld	r0, Z+
    690c:	00 20       	and	r0, r0
    690e:	49 f0       	breq	.+18     	; 0x6922 <strstr+0x30>
    6910:	4d 91       	ld	r20, X+
    6912:	40 15       	cp	r20, r0
    6914:	41 11       	cpse	r20, r1
    6916:	c9 f3       	breq	.-14     	; 0x690a <strstr+0x18>
    6918:	fb 01       	movw	r30, r22
    691a:	41 11       	cpse	r20, r1
    691c:	ef cf       	rjmp	.-34     	; 0x68fc <strstr+0xa>
    691e:	81 e0       	ldi	r24, 0x01	; 1
    6920:	90 e0       	ldi	r25, 0x00	; 0
    6922:	01 97       	sbiw	r24, 0x01	; 1
    6924:	08 95       	ret

00006926 <__mulhi_const_10>:
    6926:	7a e0       	ldi	r23, 0x0A	; 10
    6928:	97 9f       	mul	r25, r23
    692a:	90 2d       	mov	r25, r0
    692c:	87 9f       	mul	r24, r23
    692e:	80 2d       	mov	r24, r0
    6930:	91 0d       	add	r25, r1
    6932:	11 24       	eor	r1, r1
    6934:	08 95       	ret

00006936 <__ultoa_ncheck>:
    6936:	bb 27       	eor	r27, r27

00006938 <__ultoa_common>:
    6938:	fa 01       	movw	r30, r20
    693a:	a6 2f       	mov	r26, r22
    693c:	62 17       	cp	r22, r18
    693e:	71 05       	cpc	r23, r1
    6940:	81 05       	cpc	r24, r1
    6942:	91 05       	cpc	r25, r1
    6944:	33 0b       	sbc	r19, r19
    6946:	30 fb       	bst	r19, 0
    6948:	66 f0       	brts	.+24     	; 0x6962 <__ultoa_common+0x2a>
    694a:	aa 27       	eor	r26, r26
    694c:	66 0f       	add	r22, r22
    694e:	77 1f       	adc	r23, r23
    6950:	88 1f       	adc	r24, r24
    6952:	99 1f       	adc	r25, r25
    6954:	aa 1f       	adc	r26, r26
    6956:	a2 17       	cp	r26, r18
    6958:	10 f0       	brcs	.+4      	; 0x695e <__ultoa_common+0x26>
    695a:	a2 1b       	sub	r26, r18
    695c:	63 95       	inc	r22
    695e:	38 50       	subi	r19, 0x08	; 8
    6960:	a9 f7       	brne	.-22     	; 0x694c <__ultoa_common+0x14>
    6962:	a0 5d       	subi	r26, 0xD0	; 208
    6964:	aa 33       	cpi	r26, 0x3A	; 58
    6966:	08 f0       	brcs	.+2      	; 0x696a <__ultoa_common+0x32>
    6968:	a9 5d       	subi	r26, 0xD9	; 217
    696a:	a1 93       	st	Z+, r26
    696c:	36 f7       	brtc	.-52     	; 0x693a <__ultoa_common+0x2>
    696e:	b1 11       	cpse	r27, r1
    6970:	b1 93       	st	Z+, r27
    6972:	10 82       	st	Z, r1
    6974:	ca 01       	movw	r24, r20
    6976:	0c 94 0d 37 	jmp	0x6e1a	; 0x6e1a <strrev>

0000697a <fputc>:
    697a:	0f 93       	push	r16
    697c:	1f 93       	push	r17
    697e:	cf 93       	push	r28
    6980:	df 93       	push	r29
    6982:	fb 01       	movw	r30, r22
    6984:	23 81       	ldd	r18, Z+3	; 0x03
    6986:	21 fd       	sbrc	r18, 1
    6988:	03 c0       	rjmp	.+6      	; 0x6990 <fputc+0x16>
    698a:	8f ef       	ldi	r24, 0xFF	; 255
    698c:	9f ef       	ldi	r25, 0xFF	; 255
    698e:	28 c0       	rjmp	.+80     	; 0x69e0 <fputc+0x66>
    6990:	22 ff       	sbrs	r18, 2
    6992:	16 c0       	rjmp	.+44     	; 0x69c0 <fputc+0x46>
    6994:	46 81       	ldd	r20, Z+6	; 0x06
    6996:	57 81       	ldd	r21, Z+7	; 0x07
    6998:	24 81       	ldd	r18, Z+4	; 0x04
    699a:	35 81       	ldd	r19, Z+5	; 0x05
    699c:	42 17       	cp	r20, r18
    699e:	53 07       	cpc	r21, r19
    69a0:	44 f4       	brge	.+16     	; 0x69b2 <fputc+0x38>
    69a2:	a0 81       	ld	r26, Z
    69a4:	b1 81       	ldd	r27, Z+1	; 0x01
    69a6:	9d 01       	movw	r18, r26
    69a8:	2f 5f       	subi	r18, 0xFF	; 255
    69aa:	3f 4f       	sbci	r19, 0xFF	; 255
    69ac:	31 83       	std	Z+1, r19	; 0x01
    69ae:	20 83       	st	Z, r18
    69b0:	8c 93       	st	X, r24
    69b2:	26 81       	ldd	r18, Z+6	; 0x06
    69b4:	37 81       	ldd	r19, Z+7	; 0x07
    69b6:	2f 5f       	subi	r18, 0xFF	; 255
    69b8:	3f 4f       	sbci	r19, 0xFF	; 255
    69ba:	37 83       	std	Z+7, r19	; 0x07
    69bc:	26 83       	std	Z+6, r18	; 0x06
    69be:	10 c0       	rjmp	.+32     	; 0x69e0 <fputc+0x66>
    69c0:	eb 01       	movw	r28, r22
    69c2:	09 2f       	mov	r16, r25
    69c4:	18 2f       	mov	r17, r24
    69c6:	00 84       	ldd	r0, Z+8	; 0x08
    69c8:	f1 85       	ldd	r31, Z+9	; 0x09
    69ca:	e0 2d       	mov	r30, r0
    69cc:	09 95       	icall
    69ce:	89 2b       	or	r24, r25
    69d0:	e1 f6       	brne	.-72     	; 0x698a <fputc+0x10>
    69d2:	8e 81       	ldd	r24, Y+6	; 0x06
    69d4:	9f 81       	ldd	r25, Y+7	; 0x07
    69d6:	01 96       	adiw	r24, 0x01	; 1
    69d8:	9f 83       	std	Y+7, r25	; 0x07
    69da:	8e 83       	std	Y+6, r24	; 0x06
    69dc:	81 2f       	mov	r24, r17
    69de:	90 2f       	mov	r25, r16
    69e0:	df 91       	pop	r29
    69e2:	cf 91       	pop	r28
    69e4:	1f 91       	pop	r17
    69e6:	0f 91       	pop	r16
    69e8:	08 95       	ret

000069ea <sprintf>:
    69ea:	0f 93       	push	r16
    69ec:	1f 93       	push	r17
    69ee:	cf 93       	push	r28
    69f0:	df 93       	push	r29
    69f2:	cd b7       	in	r28, 0x3d	; 61
    69f4:	de b7       	in	r29, 0x3e	; 62
    69f6:	2e 97       	sbiw	r28, 0x0e	; 14
    69f8:	0f b6       	in	r0, 0x3f	; 63
    69fa:	f8 94       	cli
    69fc:	de bf       	out	0x3e, r29	; 62
    69fe:	0f be       	out	0x3f, r0	; 63
    6a00:	cd bf       	out	0x3d, r28	; 61
    6a02:	0d 89       	ldd	r16, Y+21	; 0x15
    6a04:	1e 89       	ldd	r17, Y+22	; 0x16
    6a06:	86 e0       	ldi	r24, 0x06	; 6
    6a08:	8c 83       	std	Y+4, r24	; 0x04
    6a0a:	1a 83       	std	Y+2, r17	; 0x02
    6a0c:	09 83       	std	Y+1, r16	; 0x01
    6a0e:	8f ef       	ldi	r24, 0xFF	; 255
    6a10:	9f e7       	ldi	r25, 0x7F	; 127
    6a12:	9e 83       	std	Y+6, r25	; 0x06
    6a14:	8d 83       	std	Y+5, r24	; 0x05
    6a16:	ae 01       	movw	r20, r28
    6a18:	47 5e       	subi	r20, 0xE7	; 231
    6a1a:	5f 4f       	sbci	r21, 0xFF	; 255
    6a1c:	6f 89       	ldd	r22, Y+23	; 0x17
    6a1e:	78 8d       	ldd	r23, Y+24	; 0x18
    6a20:	ce 01       	movw	r24, r28
    6a22:	01 96       	adiw	r24, 0x01	; 1
    6a24:	0e 94 a0 2a 	call	0x5540	; 0x5540 <vfprintf>
    6a28:	2f 81       	ldd	r18, Y+7	; 0x07
    6a2a:	38 85       	ldd	r19, Y+8	; 0x08
    6a2c:	f8 01       	movw	r30, r16
    6a2e:	e2 0f       	add	r30, r18
    6a30:	f3 1f       	adc	r31, r19
    6a32:	10 82       	st	Z, r1
    6a34:	2e 96       	adiw	r28, 0x0e	; 14
    6a36:	0f b6       	in	r0, 0x3f	; 63
    6a38:	f8 94       	cli
    6a3a:	de bf       	out	0x3e, r29	; 62
    6a3c:	0f be       	out	0x3f, r0	; 63
    6a3e:	cd bf       	out	0x3d, r28	; 61
    6a40:	df 91       	pop	r29
    6a42:	cf 91       	pop	r28
    6a44:	1f 91       	pop	r17
    6a46:	0f 91       	pop	r16
    6a48:	08 95       	ret

00006a4a <__ultoa_invert>:
    6a4a:	fa 01       	movw	r30, r20
    6a4c:	aa 27       	eor	r26, r26
    6a4e:	28 30       	cpi	r18, 0x08	; 8
    6a50:	51 f1       	breq	.+84     	; 0x6aa6 <__ultoa_invert+0x5c>
    6a52:	20 31       	cpi	r18, 0x10	; 16
    6a54:	81 f1       	breq	.+96     	; 0x6ab6 <__ultoa_invert+0x6c>
    6a56:	e8 94       	clt
    6a58:	6f 93       	push	r22
    6a5a:	6e 7f       	andi	r22, 0xFE	; 254
    6a5c:	6e 5f       	subi	r22, 0xFE	; 254
    6a5e:	7f 4f       	sbci	r23, 0xFF	; 255
    6a60:	8f 4f       	sbci	r24, 0xFF	; 255
    6a62:	9f 4f       	sbci	r25, 0xFF	; 255
    6a64:	af 4f       	sbci	r26, 0xFF	; 255
    6a66:	b1 e0       	ldi	r27, 0x01	; 1
    6a68:	3e d0       	rcall	.+124    	; 0x6ae6 <__ultoa_invert+0x9c>
    6a6a:	b4 e0       	ldi	r27, 0x04	; 4
    6a6c:	3c d0       	rcall	.+120    	; 0x6ae6 <__ultoa_invert+0x9c>
    6a6e:	67 0f       	add	r22, r23
    6a70:	78 1f       	adc	r23, r24
    6a72:	89 1f       	adc	r24, r25
    6a74:	9a 1f       	adc	r25, r26
    6a76:	a1 1d       	adc	r26, r1
    6a78:	68 0f       	add	r22, r24
    6a7a:	79 1f       	adc	r23, r25
    6a7c:	8a 1f       	adc	r24, r26
    6a7e:	91 1d       	adc	r25, r1
    6a80:	a1 1d       	adc	r26, r1
    6a82:	6a 0f       	add	r22, r26
    6a84:	71 1d       	adc	r23, r1
    6a86:	81 1d       	adc	r24, r1
    6a88:	91 1d       	adc	r25, r1
    6a8a:	a1 1d       	adc	r26, r1
    6a8c:	20 d0       	rcall	.+64     	; 0x6ace <__ultoa_invert+0x84>
    6a8e:	09 f4       	brne	.+2      	; 0x6a92 <__ultoa_invert+0x48>
    6a90:	68 94       	set
    6a92:	3f 91       	pop	r19
    6a94:	2a e0       	ldi	r18, 0x0A	; 10
    6a96:	26 9f       	mul	r18, r22
    6a98:	11 24       	eor	r1, r1
    6a9a:	30 19       	sub	r19, r0
    6a9c:	30 5d       	subi	r19, 0xD0	; 208
    6a9e:	31 93       	st	Z+, r19
    6aa0:	de f6       	brtc	.-74     	; 0x6a58 <__ultoa_invert+0xe>
    6aa2:	cf 01       	movw	r24, r30
    6aa4:	08 95       	ret
    6aa6:	46 2f       	mov	r20, r22
    6aa8:	47 70       	andi	r20, 0x07	; 7
    6aaa:	40 5d       	subi	r20, 0xD0	; 208
    6aac:	41 93       	st	Z+, r20
    6aae:	b3 e0       	ldi	r27, 0x03	; 3
    6ab0:	0f d0       	rcall	.+30     	; 0x6ad0 <__ultoa_invert+0x86>
    6ab2:	c9 f7       	brne	.-14     	; 0x6aa6 <__ultoa_invert+0x5c>
    6ab4:	f6 cf       	rjmp	.-20     	; 0x6aa2 <__ultoa_invert+0x58>
    6ab6:	46 2f       	mov	r20, r22
    6ab8:	4f 70       	andi	r20, 0x0F	; 15
    6aba:	40 5d       	subi	r20, 0xD0	; 208
    6abc:	4a 33       	cpi	r20, 0x3A	; 58
    6abe:	18 f0       	brcs	.+6      	; 0x6ac6 <__ultoa_invert+0x7c>
    6ac0:	49 5d       	subi	r20, 0xD9	; 217
    6ac2:	31 fd       	sbrc	r19, 1
    6ac4:	40 52       	subi	r20, 0x20	; 32
    6ac6:	41 93       	st	Z+, r20
    6ac8:	02 d0       	rcall	.+4      	; 0x6ace <__ultoa_invert+0x84>
    6aca:	a9 f7       	brne	.-22     	; 0x6ab6 <__ultoa_invert+0x6c>
    6acc:	ea cf       	rjmp	.-44     	; 0x6aa2 <__ultoa_invert+0x58>
    6ace:	b4 e0       	ldi	r27, 0x04	; 4
    6ad0:	a6 95       	lsr	r26
    6ad2:	97 95       	ror	r25
    6ad4:	87 95       	ror	r24
    6ad6:	77 95       	ror	r23
    6ad8:	67 95       	ror	r22
    6ada:	ba 95       	dec	r27
    6adc:	c9 f7       	brne	.-14     	; 0x6ad0 <__ultoa_invert+0x86>
    6ade:	00 97       	sbiw	r24, 0x00	; 0
    6ae0:	61 05       	cpc	r22, r1
    6ae2:	71 05       	cpc	r23, r1
    6ae4:	08 95       	ret
    6ae6:	9b 01       	movw	r18, r22
    6ae8:	ac 01       	movw	r20, r24
    6aea:	0a 2e       	mov	r0, r26
    6aec:	06 94       	lsr	r0
    6aee:	57 95       	ror	r21
    6af0:	47 95       	ror	r20
    6af2:	37 95       	ror	r19
    6af4:	27 95       	ror	r18
    6af6:	ba 95       	dec	r27
    6af8:	c9 f7       	brne	.-14     	; 0x6aec <__ultoa_invert+0xa2>
    6afa:	62 0f       	add	r22, r18
    6afc:	73 1f       	adc	r23, r19
    6afe:	84 1f       	adc	r24, r20
    6b00:	95 1f       	adc	r25, r21
    6b02:	a0 1d       	adc	r26, r0
    6b04:	08 95       	ret

00006b06 <strtod>:
    6b06:	6f 92       	push	r6
    6b08:	7f 92       	push	r7
    6b0a:	8f 92       	push	r8
    6b0c:	9f 92       	push	r9
    6b0e:	af 92       	push	r10
    6b10:	bf 92       	push	r11
    6b12:	cf 92       	push	r12
    6b14:	df 92       	push	r13
    6b16:	ef 92       	push	r14
    6b18:	ff 92       	push	r15
    6b1a:	0f 93       	push	r16
    6b1c:	1f 93       	push	r17
    6b1e:	cf 93       	push	r28
    6b20:	df 93       	push	r29
    6b22:	ec 01       	movw	r28, r24
    6b24:	7b 01       	movw	r14, r22
    6b26:	61 15       	cp	r22, r1
    6b28:	71 05       	cpc	r23, r1
    6b2a:	19 f0       	breq	.+6      	; 0x6b32 <strtod+0x2c>
    6b2c:	db 01       	movw	r26, r22
    6b2e:	8d 93       	st	X+, r24
    6b30:	9c 93       	st	X, r25
    6b32:	8e 01       	movw	r16, r28
    6b34:	0f 5f       	subi	r16, 0xFF	; 255
    6b36:	1f 4f       	sbci	r17, 0xFF	; 255
    6b38:	78 80       	ld	r7, Y
    6b3a:	87 2d       	mov	r24, r7
    6b3c:	90 e0       	ldi	r25, 0x00	; 0
    6b3e:	0e 94 1a 34 	call	0x6834	; 0x6834 <isspace>
    6b42:	89 2b       	or	r24, r25
    6b44:	11 f0       	breq	.+4      	; 0x6b4a <strtod+0x44>
    6b46:	e8 01       	movw	r28, r16
    6b48:	f4 cf       	rjmp	.-24     	; 0x6b32 <strtod+0x2c>
    6b4a:	bd e2       	ldi	r27, 0x2D	; 45
    6b4c:	7b 12       	cpse	r7, r27
    6b4e:	05 c0       	rjmp	.+10     	; 0x6b5a <strtod+0x54>
    6b50:	0f 5f       	subi	r16, 0xFF	; 255
    6b52:	1f 4f       	sbci	r17, 0xFF	; 255
    6b54:	79 80       	ldd	r7, Y+1	; 0x01
    6b56:	c1 e0       	ldi	r28, 0x01	; 1
    6b58:	08 c0       	rjmp	.+16     	; 0x6b6a <strtod+0x64>
    6b5a:	eb e2       	ldi	r30, 0x2B	; 43
    6b5c:	7e 12       	cpse	r7, r30
    6b5e:	04 c0       	rjmp	.+8      	; 0x6b68 <strtod+0x62>
    6b60:	8e 01       	movw	r16, r28
    6b62:	0e 5f       	subi	r16, 0xFE	; 254
    6b64:	1f 4f       	sbci	r17, 0xFF	; 255
    6b66:	79 80       	ldd	r7, Y+1	; 0x01
    6b68:	c0 e0       	ldi	r28, 0x00	; 0
    6b6a:	68 01       	movw	r12, r16
    6b6c:	f1 e0       	ldi	r31, 0x01	; 1
    6b6e:	cf 1a       	sub	r12, r31
    6b70:	d1 08       	sbc	r13, r1
    6b72:	43 e0       	ldi	r20, 0x03	; 3
    6b74:	50 e0       	ldi	r21, 0x00	; 0
    6b76:	66 ed       	ldi	r22, 0xD6	; 214
    6b78:	72 e0       	ldi	r23, 0x02	; 2
    6b7a:	c6 01       	movw	r24, r12
    6b7c:	0e 94 f5 36 	call	0x6dea	; 0x6dea <strncasecmp_P>
    6b80:	89 2b       	or	r24, r25
    6b82:	f1 f4       	brne	.+60     	; 0x6bc0 <strtod+0xba>
    6b84:	68 01       	movw	r12, r16
    6b86:	22 e0       	ldi	r18, 0x02	; 2
    6b88:	c2 0e       	add	r12, r18
    6b8a:	d1 1c       	adc	r13, r1
    6b8c:	45 e0       	ldi	r20, 0x05	; 5
    6b8e:	50 e0       	ldi	r21, 0x00	; 0
    6b90:	61 ed       	ldi	r22, 0xD1	; 209
    6b92:	72 e0       	ldi	r23, 0x02	; 2
    6b94:	c6 01       	movw	r24, r12
    6b96:	0e 94 f5 36 	call	0x6dea	; 0x6dea <strncasecmp_P>
    6b9a:	89 2b       	or	r24, r25
    6b9c:	21 f4       	brne	.+8      	; 0x6ba6 <strtod+0xa0>
    6b9e:	68 01       	movw	r12, r16
    6ba0:	87 e0       	ldi	r24, 0x07	; 7
    6ba2:	c8 0e       	add	r12, r24
    6ba4:	d1 1c       	adc	r13, r1
    6ba6:	e1 14       	cp	r14, r1
    6ba8:	f1 04       	cpc	r15, r1
    6baa:	19 f0       	breq	.+6      	; 0x6bb2 <strtod+0xac>
    6bac:	d7 01       	movw	r26, r14
    6bae:	cd 92       	st	X+, r12
    6bb0:	dc 92       	st	X, r13
    6bb2:	c1 11       	cpse	r28, r1
    6bb4:	ff c0       	rjmp	.+510    	; 0x6db4 <strtod+0x2ae>
    6bb6:	60 e0       	ldi	r22, 0x00	; 0
    6bb8:	70 e0       	ldi	r23, 0x00	; 0
    6bba:	80 e8       	ldi	r24, 0x80	; 128
    6bbc:	9f e7       	ldi	r25, 0x7F	; 127
    6bbe:	03 c1       	rjmp	.+518    	; 0x6dc6 <strtod+0x2c0>
    6bc0:	43 e0       	ldi	r20, 0x03	; 3
    6bc2:	50 e0       	ldi	r21, 0x00	; 0
    6bc4:	6e ec       	ldi	r22, 0xCE	; 206
    6bc6:	72 e0       	ldi	r23, 0x02	; 2
    6bc8:	c6 01       	movw	r24, r12
    6bca:	0e 94 f5 36 	call	0x6dea	; 0x6dea <strncasecmp_P>
    6bce:	89 2b       	or	r24, r25
    6bd0:	51 f4       	brne	.+20     	; 0x6be6 <strtod+0xe0>
    6bd2:	e1 14       	cp	r14, r1
    6bd4:	f1 04       	cpc	r15, r1
    6bd6:	09 f4       	brne	.+2      	; 0x6bda <strtod+0xd4>
    6bd8:	f2 c0       	rjmp	.+484    	; 0x6dbe <strtod+0x2b8>
    6bda:	0e 5f       	subi	r16, 0xFE	; 254
    6bdc:	1f 4f       	sbci	r17, 0xFF	; 255
    6bde:	f7 01       	movw	r30, r14
    6be0:	11 83       	std	Z+1, r17	; 0x01
    6be2:	00 83       	st	Z, r16
    6be4:	ec c0       	rjmp	.+472    	; 0x6dbe <strtod+0x2b8>
    6be6:	68 01       	movw	r12, r16
    6be8:	60 e0       	ldi	r22, 0x00	; 0
    6bea:	70 e0       	ldi	r23, 0x00	; 0
    6bec:	cb 01       	movw	r24, r22
    6bee:	00 e0       	ldi	r16, 0x00	; 0
    6bf0:	10 e0       	ldi	r17, 0x00	; 0
    6bf2:	f6 01       	movw	r30, r12
    6bf4:	d0 ed       	ldi	r29, 0xD0	; 208
    6bf6:	d7 0d       	add	r29, r7
    6bf8:	da 30       	cpi	r29, 0x0A	; 10
    6bfa:	58 f5       	brcc	.+86     	; 0x6c52 <strtod+0x14c>
    6bfc:	2c 2f       	mov	r18, r28
    6bfe:	22 60       	ori	r18, 0x02	; 2
    6c00:	62 2e       	mov	r6, r18
    6c02:	2c 2f       	mov	r18, r28
    6c04:	28 70       	andi	r18, 0x08	; 8
    6c06:	c2 ff       	sbrs	r28, 2
    6c08:	05 c0       	rjmp	.+10     	; 0x6c14 <strtod+0x10e>
    6c0a:	21 11       	cpse	r18, r1
    6c0c:	28 c0       	rjmp	.+80     	; 0x6c5e <strtod+0x158>
    6c0e:	0f 5f       	subi	r16, 0xFF	; 255
    6c10:	1f 4f       	sbci	r17, 0xFF	; 255
    6c12:	25 c0       	rjmp	.+74     	; 0x6c5e <strtod+0x158>
    6c14:	22 23       	and	r18, r18
    6c16:	11 f0       	breq	.+4      	; 0x6c1c <strtod+0x116>
    6c18:	01 50       	subi	r16, 0x01	; 1
    6c1a:	11 09       	sbc	r17, r1
    6c1c:	a5 e0       	ldi	r26, 0x05	; 5
    6c1e:	b0 e0       	ldi	r27, 0x00	; 0
    6c20:	9b 01       	movw	r18, r22
    6c22:	ac 01       	movw	r20, r24
    6c24:	0e 94 1c 38 	call	0x7038	; 0x7038 <__muluhisi3>
    6c28:	4b 01       	movw	r8, r22
    6c2a:	5c 01       	movw	r10, r24
    6c2c:	88 0c       	add	r8, r8
    6c2e:	99 1c       	adc	r9, r9
    6c30:	aa 1c       	adc	r10, r10
    6c32:	bb 1c       	adc	r11, r11
    6c34:	c5 01       	movw	r24, r10
    6c36:	b4 01       	movw	r22, r8
    6c38:	6d 0f       	add	r22, r29
    6c3a:	71 1d       	adc	r23, r1
    6c3c:	81 1d       	adc	r24, r1
    6c3e:	91 1d       	adc	r25, r1
    6c40:	68 39       	cpi	r22, 0x98	; 152
    6c42:	a9 e9       	ldi	r26, 0x99	; 153
    6c44:	7a 07       	cpc	r23, r26
    6c46:	8a 07       	cpc	r24, r26
    6c48:	a9 e1       	ldi	r26, 0x19	; 25
    6c4a:	9a 07       	cpc	r25, r26
    6c4c:	40 f0       	brcs	.+16     	; 0x6c5e <strtod+0x158>
    6c4e:	c6 60       	ori	r28, 0x06	; 6
    6c50:	05 c0       	rjmp	.+10     	; 0x6c5c <strtod+0x156>
    6c52:	de 3f       	cpi	r29, 0xFE	; 254
    6c54:	51 f4       	brne	.+20     	; 0x6c6a <strtod+0x164>
    6c56:	c3 fd       	sbrc	r28, 3
    6c58:	44 c0       	rjmp	.+136    	; 0x6ce2 <strtod+0x1dc>
    6c5a:	c8 60       	ori	r28, 0x08	; 8
    6c5c:	6c 2e       	mov	r6, r28
    6c5e:	bf ef       	ldi	r27, 0xFF	; 255
    6c60:	cb 1a       	sub	r12, r27
    6c62:	db 0a       	sbc	r13, r27
    6c64:	70 80       	ld	r7, Z
    6c66:	c6 2d       	mov	r28, r6
    6c68:	c4 cf       	rjmp	.-120    	; 0x6bf2 <strtod+0xec>
    6c6a:	2d 2f       	mov	r18, r29
    6c6c:	2f 7d       	andi	r18, 0xDF	; 223
    6c6e:	25 31       	cpi	r18, 0x15	; 21
    6c70:	c1 f5       	brne	.+112    	; 0x6ce2 <strtod+0x1dc>
    6c72:	40 81       	ld	r20, Z
    6c74:	4d 32       	cpi	r20, 0x2D	; 45
    6c76:	11 f4       	brne	.+4      	; 0x6c7c <strtod+0x176>
    6c78:	c0 61       	ori	r28, 0x10	; 16
    6c7a:	06 c0       	rjmp	.+12     	; 0x6c88 <strtod+0x182>
    6c7c:	4b 32       	cpi	r20, 0x2B	; 43
    6c7e:	21 f0       	breq	.+8      	; 0x6c88 <strtod+0x182>
    6c80:	31 96       	adiw	r30, 0x01	; 1
    6c82:	21 e0       	ldi	r18, 0x01	; 1
    6c84:	30 e0       	ldi	r19, 0x00	; 0
    6c86:	06 c0       	rjmp	.+12     	; 0x6c94 <strtod+0x18e>
    6c88:	32 96       	adiw	r30, 0x02	; 2
    6c8a:	d6 01       	movw	r26, r12
    6c8c:	11 96       	adiw	r26, 0x01	; 1
    6c8e:	4c 91       	ld	r20, X
    6c90:	22 e0       	ldi	r18, 0x02	; 2
    6c92:	30 e0       	ldi	r19, 0x00	; 0
    6c94:	a0 ed       	ldi	r26, 0xD0	; 208
    6c96:	a4 0f       	add	r26, r20
    6c98:	aa 30       	cpi	r26, 0x0A	; 10
    6c9a:	18 f0       	brcs	.+6      	; 0x6ca2 <strtod+0x19c>
    6c9c:	e2 1b       	sub	r30, r18
    6c9e:	f3 0b       	sbc	r31, r19
    6ca0:	20 c0       	rjmp	.+64     	; 0x6ce2 <strtod+0x1dc>
    6ca2:	40 e0       	ldi	r20, 0x00	; 0
    6ca4:	50 e0       	ldi	r21, 0x00	; 0
    6ca6:	40 38       	cpi	r20, 0x80	; 128
    6ca8:	bc e0       	ldi	r27, 0x0C	; 12
    6caa:	5b 07       	cpc	r21, r27
    6cac:	5c f4       	brge	.+22     	; 0x6cc4 <strtod+0x1be>
    6cae:	9a 01       	movw	r18, r20
    6cb0:	22 0f       	add	r18, r18
    6cb2:	33 1f       	adc	r19, r19
    6cb4:	22 0f       	add	r18, r18
    6cb6:	33 1f       	adc	r19, r19
    6cb8:	42 0f       	add	r20, r18
    6cba:	53 1f       	adc	r21, r19
    6cbc:	44 0f       	add	r20, r20
    6cbe:	55 1f       	adc	r21, r21
    6cc0:	4a 0f       	add	r20, r26
    6cc2:	51 1d       	adc	r21, r1
    6cc4:	31 96       	adiw	r30, 0x01	; 1
    6cc6:	df 01       	movw	r26, r30
    6cc8:	11 97       	sbiw	r26, 0x01	; 1
    6cca:	2c 91       	ld	r18, X
    6ccc:	a0 ed       	ldi	r26, 0xD0	; 208
    6cce:	a2 0f       	add	r26, r18
    6cd0:	aa 30       	cpi	r26, 0x0A	; 10
    6cd2:	48 f3       	brcs	.-46     	; 0x6ca6 <strtod+0x1a0>
    6cd4:	c4 ff       	sbrs	r28, 4
    6cd6:	03 c0       	rjmp	.+6      	; 0x6cde <strtod+0x1d8>
    6cd8:	51 95       	neg	r21
    6cda:	41 95       	neg	r20
    6cdc:	51 09       	sbc	r21, r1
    6cde:	04 0f       	add	r16, r20
    6ce0:	15 1f       	adc	r17, r21
    6ce2:	c1 ff       	sbrs	r28, 1
    6ce4:	07 c0       	rjmp	.+14     	; 0x6cf4 <strtod+0x1ee>
    6ce6:	e1 14       	cp	r14, r1
    6ce8:	f1 04       	cpc	r15, r1
    6cea:	21 f0       	breq	.+8      	; 0x6cf4 <strtod+0x1ee>
    6cec:	31 97       	sbiw	r30, 0x01	; 1
    6cee:	d7 01       	movw	r26, r14
    6cf0:	ed 93       	st	X+, r30
    6cf2:	fc 93       	st	X, r31
    6cf4:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <__floatunsisf>
    6cf8:	c3 70       	andi	r28, 0x03	; 3
    6cfa:	c3 30       	cpi	r28, 0x03	; 3
    6cfc:	19 f0       	breq	.+6      	; 0x6d04 <strtod+0x1fe>
    6cfe:	6b 01       	movw	r12, r22
    6d00:	7c 01       	movw	r14, r24
    6d02:	06 c0       	rjmp	.+12     	; 0x6d10 <strtod+0x20a>
    6d04:	6b 01       	movw	r12, r22
    6d06:	7c 01       	movw	r14, r24
    6d08:	f7 fa       	bst	r15, 7
    6d0a:	f0 94       	com	r15
    6d0c:	f7 f8       	bld	r15, 7
    6d0e:	f0 94       	com	r15
    6d10:	20 e0       	ldi	r18, 0x00	; 0
    6d12:	30 e0       	ldi	r19, 0x00	; 0
    6d14:	a9 01       	movw	r20, r18
    6d16:	c7 01       	movw	r24, r14
    6d18:	b6 01       	movw	r22, r12
    6d1a:	0e 94 1d 37 	call	0x6e3a	; 0x6e3a <__cmpsf2>
    6d1e:	88 23       	and	r24, r24
    6d20:	09 f4       	brne	.+2      	; 0x6d24 <strtod+0x21e>
    6d22:	45 c0       	rjmp	.+138    	; 0x6dae <strtod+0x2a8>
    6d24:	17 ff       	sbrs	r17, 7
    6d26:	06 c0       	rjmp	.+12     	; 0x6d34 <strtod+0x22e>
    6d28:	11 95       	neg	r17
    6d2a:	01 95       	neg	r16
    6d2c:	11 09       	sbc	r17, r1
    6d2e:	cd ee       	ldi	r28, 0xED	; 237
    6d30:	d2 e0       	ldi	r29, 0x02	; 2
    6d32:	02 c0       	rjmp	.+4      	; 0x6d38 <strtod+0x232>
    6d34:	c5 e0       	ldi	r28, 0x05	; 5
    6d36:	d3 e0       	ldi	r29, 0x03	; 3
    6d38:	5e 01       	movw	r10, r28
    6d3a:	b8 e1       	ldi	r27, 0x18	; 24
    6d3c:	ab 1a       	sub	r10, r27
    6d3e:	b1 08       	sbc	r11, r1
    6d40:	46 01       	movw	r8, r12
    6d42:	be 2d       	mov	r27, r14
    6d44:	af 2d       	mov	r26, r15
    6d46:	90 e2       	ldi	r25, 0x20	; 32
    6d48:	e9 2e       	mov	r14, r25
    6d4a:	f1 2c       	mov	r15, r1
    6d4c:	0e 15       	cp	r16, r14
    6d4e:	1f 05       	cpc	r17, r15
    6d50:	84 f0       	brlt	.+32     	; 0x6d72 <strtod+0x26c>
    6d52:	fe 01       	movw	r30, r28
    6d54:	25 91       	lpm	r18, Z+
    6d56:	35 91       	lpm	r19, Z+
    6d58:	45 91       	lpm	r20, Z+
    6d5a:	54 91       	lpm	r21, Z
    6d5c:	b4 01       	movw	r22, r8
    6d5e:	8b 2f       	mov	r24, r27
    6d60:	9a 2f       	mov	r25, r26
    6d62:	0e 94 46 37 	call	0x6e8c	; 0x6e8c <__mulsf3>
    6d66:	4b 01       	movw	r8, r22
    6d68:	b8 2f       	mov	r27, r24
    6d6a:	a9 2f       	mov	r26, r25
    6d6c:	0e 19       	sub	r16, r14
    6d6e:	1f 09       	sbc	r17, r15
    6d70:	ed cf       	rjmp	.-38     	; 0x6d4c <strtod+0x246>
    6d72:	24 97       	sbiw	r28, 0x04	; 4
    6d74:	f5 94       	asr	r15
    6d76:	e7 94       	ror	r14
    6d78:	ca 15       	cp	r28, r10
    6d7a:	db 05       	cpc	r29, r11
    6d7c:	39 f7       	brne	.-50     	; 0x6d4c <strtod+0x246>
    6d7e:	64 01       	movw	r12, r8
    6d80:	eb 2e       	mov	r14, r27
    6d82:	fa 2e       	mov	r15, r26
    6d84:	8e 2d       	mov	r24, r14
    6d86:	88 0f       	add	r24, r24
    6d88:	8f 2d       	mov	r24, r15
    6d8a:	88 1f       	adc	r24, r24
    6d8c:	8f 3f       	cpi	r24, 0xFF	; 255
    6d8e:	49 f0       	breq	.+18     	; 0x6da2 <strtod+0x29c>
    6d90:	20 e0       	ldi	r18, 0x00	; 0
    6d92:	30 e0       	ldi	r19, 0x00	; 0
    6d94:	a9 01       	movw	r20, r18
    6d96:	c7 01       	movw	r24, r14
    6d98:	b6 01       	movw	r22, r12
    6d9a:	0e 94 1d 37 	call	0x6e3a	; 0x6e3a <__cmpsf2>
    6d9e:	81 11       	cpse	r24, r1
    6da0:	06 c0       	rjmp	.+12     	; 0x6dae <strtod+0x2a8>
    6da2:	82 e2       	ldi	r24, 0x22	; 34
    6da4:	90 e0       	ldi	r25, 0x00	; 0
    6da6:	90 93 cc 0c 	sts	0x0CCC, r25	; 0x800ccc <errno+0x1>
    6daa:	80 93 cb 0c 	sts	0x0CCB, r24	; 0x800ccb <errno>
    6dae:	c7 01       	movw	r24, r14
    6db0:	b6 01       	movw	r22, r12
    6db2:	09 c0       	rjmp	.+18     	; 0x6dc6 <strtod+0x2c0>
    6db4:	60 e0       	ldi	r22, 0x00	; 0
    6db6:	70 e0       	ldi	r23, 0x00	; 0
    6db8:	80 e8       	ldi	r24, 0x80	; 128
    6dba:	9f ef       	ldi	r25, 0xFF	; 255
    6dbc:	04 c0       	rjmp	.+8      	; 0x6dc6 <strtod+0x2c0>
    6dbe:	60 e0       	ldi	r22, 0x00	; 0
    6dc0:	70 e0       	ldi	r23, 0x00	; 0
    6dc2:	80 ec       	ldi	r24, 0xC0	; 192
    6dc4:	9f e7       	ldi	r25, 0x7F	; 127
    6dc6:	df 91       	pop	r29
    6dc8:	cf 91       	pop	r28
    6dca:	1f 91       	pop	r17
    6dcc:	0f 91       	pop	r16
    6dce:	ff 90       	pop	r15
    6dd0:	ef 90       	pop	r14
    6dd2:	df 90       	pop	r13
    6dd4:	cf 90       	pop	r12
    6dd6:	bf 90       	pop	r11
    6dd8:	af 90       	pop	r10
    6dda:	9f 90       	pop	r9
    6ddc:	8f 90       	pop	r8
    6dde:	7f 90       	pop	r7
    6de0:	6f 90       	pop	r6
    6de2:	08 95       	ret

00006de4 <__ctype_isfalse>:
    6de4:	99 27       	eor	r25, r25
    6de6:	88 27       	eor	r24, r24

00006de8 <__ctype_istrue>:
    6de8:	08 95       	ret

00006dea <strncasecmp_P>:
    6dea:	fb 01       	movw	r30, r22
    6dec:	dc 01       	movw	r26, r24
    6dee:	41 50       	subi	r20, 0x01	; 1
    6df0:	50 40       	sbci	r21, 0x00	; 0
    6df2:	88 f0       	brcs	.+34     	; 0x6e16 <strncasecmp_P+0x2c>
    6df4:	8d 91       	ld	r24, X+
    6df6:	81 34       	cpi	r24, 0x41	; 65
    6df8:	1c f0       	brlt	.+6      	; 0x6e00 <strncasecmp_P+0x16>
    6dfa:	8b 35       	cpi	r24, 0x5B	; 91
    6dfc:	0c f4       	brge	.+2      	; 0x6e00 <strncasecmp_P+0x16>
    6dfe:	80 5e       	subi	r24, 0xE0	; 224
    6e00:	65 91       	lpm	r22, Z+
    6e02:	61 34       	cpi	r22, 0x41	; 65
    6e04:	1c f0       	brlt	.+6      	; 0x6e0c <strncasecmp_P+0x22>
    6e06:	6b 35       	cpi	r22, 0x5B	; 91
    6e08:	0c f4       	brge	.+2      	; 0x6e0c <strncasecmp_P+0x22>
    6e0a:	60 5e       	subi	r22, 0xE0	; 224
    6e0c:	86 1b       	sub	r24, r22
    6e0e:	61 11       	cpse	r22, r1
    6e10:	71 f3       	breq	.-36     	; 0x6dee <strncasecmp_P+0x4>
    6e12:	99 0b       	sbc	r25, r25
    6e14:	08 95       	ret
    6e16:	88 1b       	sub	r24, r24
    6e18:	fc cf       	rjmp	.-8      	; 0x6e12 <strncasecmp_P+0x28>

00006e1a <strrev>:
    6e1a:	dc 01       	movw	r26, r24
    6e1c:	fc 01       	movw	r30, r24
    6e1e:	67 2f       	mov	r22, r23
    6e20:	71 91       	ld	r23, Z+
    6e22:	77 23       	and	r23, r23
    6e24:	e1 f7       	brne	.-8      	; 0x6e1e <strrev+0x4>
    6e26:	32 97       	sbiw	r30, 0x02	; 2
    6e28:	04 c0       	rjmp	.+8      	; 0x6e32 <strrev+0x18>
    6e2a:	7c 91       	ld	r23, X
    6e2c:	6d 93       	st	X+, r22
    6e2e:	70 83       	st	Z, r23
    6e30:	62 91       	ld	r22, -Z
    6e32:	ae 17       	cp	r26, r30
    6e34:	bf 07       	cpc	r27, r31
    6e36:	c8 f3       	brcs	.-14     	; 0x6e2a <strrev+0x10>
    6e38:	08 95       	ret

00006e3a <__cmpsf2>:
    6e3a:	0e 94 22 37 	call	0x6e44	; 0x6e44 <__fp_cmp>
    6e3e:	08 f4       	brcc	.+2      	; 0x6e42 <__cmpsf2+0x8>
    6e40:	81 e0       	ldi	r24, 0x01	; 1
    6e42:	08 95       	ret

00006e44 <__fp_cmp>:
    6e44:	99 0f       	add	r25, r25
    6e46:	00 08       	sbc	r0, r0
    6e48:	55 0f       	add	r21, r21
    6e4a:	aa 0b       	sbc	r26, r26
    6e4c:	e0 e8       	ldi	r30, 0x80	; 128
    6e4e:	fe ef       	ldi	r31, 0xFE	; 254
    6e50:	16 16       	cp	r1, r22
    6e52:	17 06       	cpc	r1, r23
    6e54:	e8 07       	cpc	r30, r24
    6e56:	f9 07       	cpc	r31, r25
    6e58:	c0 f0       	brcs	.+48     	; 0x6e8a <__fp_cmp+0x46>
    6e5a:	12 16       	cp	r1, r18
    6e5c:	13 06       	cpc	r1, r19
    6e5e:	e4 07       	cpc	r30, r20
    6e60:	f5 07       	cpc	r31, r21
    6e62:	98 f0       	brcs	.+38     	; 0x6e8a <__fp_cmp+0x46>
    6e64:	62 1b       	sub	r22, r18
    6e66:	73 0b       	sbc	r23, r19
    6e68:	84 0b       	sbc	r24, r20
    6e6a:	95 0b       	sbc	r25, r21
    6e6c:	39 f4       	brne	.+14     	; 0x6e7c <__fp_cmp+0x38>
    6e6e:	0a 26       	eor	r0, r26
    6e70:	61 f0       	breq	.+24     	; 0x6e8a <__fp_cmp+0x46>
    6e72:	23 2b       	or	r18, r19
    6e74:	24 2b       	or	r18, r20
    6e76:	25 2b       	or	r18, r21
    6e78:	21 f4       	brne	.+8      	; 0x6e82 <__fp_cmp+0x3e>
    6e7a:	08 95       	ret
    6e7c:	0a 26       	eor	r0, r26
    6e7e:	09 f4       	brne	.+2      	; 0x6e82 <__fp_cmp+0x3e>
    6e80:	a1 40       	sbci	r26, 0x01	; 1
    6e82:	a6 95       	lsr	r26
    6e84:	8f ef       	ldi	r24, 0xFF	; 255
    6e86:	81 1d       	adc	r24, r1
    6e88:	81 1d       	adc	r24, r1
    6e8a:	08 95       	ret

00006e8c <__mulsf3>:
    6e8c:	0e 94 59 37 	call	0x6eb2	; 0x6eb2 <__mulsf3x>
    6e90:	0c 94 a7 2f 	jmp	0x5f4e	; 0x5f4e <__fp_round>
    6e94:	0e 94 99 2f 	call	0x5f32	; 0x5f32 <__fp_pscA>
    6e98:	38 f0       	brcs	.+14     	; 0x6ea8 <__mulsf3+0x1c>
    6e9a:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <__fp_pscB>
    6e9e:	20 f0       	brcs	.+8      	; 0x6ea8 <__mulsf3+0x1c>
    6ea0:	95 23       	and	r25, r21
    6ea2:	11 f0       	breq	.+4      	; 0x6ea8 <__mulsf3+0x1c>
    6ea4:	0c 94 90 2f 	jmp	0x5f20	; 0x5f20 <__fp_inf>
    6ea8:	0c 94 96 2f 	jmp	0x5f2c	; 0x5f2c <__fp_nan>
    6eac:	11 24       	eor	r1, r1
    6eae:	0c 94 db 2f 	jmp	0x5fb6	; 0x5fb6 <__fp_szero>

00006eb2 <__mulsf3x>:
    6eb2:	0e 94 b8 2f 	call	0x5f70	; 0x5f70 <__fp_split3>
    6eb6:	70 f3       	brcs	.-36     	; 0x6e94 <__mulsf3+0x8>

00006eb8 <__mulsf3_pse>:
    6eb8:	95 9f       	mul	r25, r21
    6eba:	c1 f3       	breq	.-16     	; 0x6eac <__mulsf3+0x20>
    6ebc:	95 0f       	add	r25, r21
    6ebe:	50 e0       	ldi	r21, 0x00	; 0
    6ec0:	55 1f       	adc	r21, r21
    6ec2:	62 9f       	mul	r22, r18
    6ec4:	f0 01       	movw	r30, r0
    6ec6:	72 9f       	mul	r23, r18
    6ec8:	bb 27       	eor	r27, r27
    6eca:	f0 0d       	add	r31, r0
    6ecc:	b1 1d       	adc	r27, r1
    6ece:	63 9f       	mul	r22, r19
    6ed0:	aa 27       	eor	r26, r26
    6ed2:	f0 0d       	add	r31, r0
    6ed4:	b1 1d       	adc	r27, r1
    6ed6:	aa 1f       	adc	r26, r26
    6ed8:	64 9f       	mul	r22, r20
    6eda:	66 27       	eor	r22, r22
    6edc:	b0 0d       	add	r27, r0
    6ede:	a1 1d       	adc	r26, r1
    6ee0:	66 1f       	adc	r22, r22
    6ee2:	82 9f       	mul	r24, r18
    6ee4:	22 27       	eor	r18, r18
    6ee6:	b0 0d       	add	r27, r0
    6ee8:	a1 1d       	adc	r26, r1
    6eea:	62 1f       	adc	r22, r18
    6eec:	73 9f       	mul	r23, r19
    6eee:	b0 0d       	add	r27, r0
    6ef0:	a1 1d       	adc	r26, r1
    6ef2:	62 1f       	adc	r22, r18
    6ef4:	83 9f       	mul	r24, r19
    6ef6:	a0 0d       	add	r26, r0
    6ef8:	61 1d       	adc	r22, r1
    6efa:	22 1f       	adc	r18, r18
    6efc:	74 9f       	mul	r23, r20
    6efe:	33 27       	eor	r19, r19
    6f00:	a0 0d       	add	r26, r0
    6f02:	61 1d       	adc	r22, r1
    6f04:	23 1f       	adc	r18, r19
    6f06:	84 9f       	mul	r24, r20
    6f08:	60 0d       	add	r22, r0
    6f0a:	21 1d       	adc	r18, r1
    6f0c:	82 2f       	mov	r24, r18
    6f0e:	76 2f       	mov	r23, r22
    6f10:	6a 2f       	mov	r22, r26
    6f12:	11 24       	eor	r1, r1
    6f14:	9f 57       	subi	r25, 0x7F	; 127
    6f16:	50 40       	sbci	r21, 0x00	; 0
    6f18:	9a f0       	brmi	.+38     	; 0x6f40 <__mulsf3_pse+0x88>
    6f1a:	f1 f0       	breq	.+60     	; 0x6f58 <__mulsf3_pse+0xa0>
    6f1c:	88 23       	and	r24, r24
    6f1e:	4a f0       	brmi	.+18     	; 0x6f32 <__mulsf3_pse+0x7a>
    6f20:	ee 0f       	add	r30, r30
    6f22:	ff 1f       	adc	r31, r31
    6f24:	bb 1f       	adc	r27, r27
    6f26:	66 1f       	adc	r22, r22
    6f28:	77 1f       	adc	r23, r23
    6f2a:	88 1f       	adc	r24, r24
    6f2c:	91 50       	subi	r25, 0x01	; 1
    6f2e:	50 40       	sbci	r21, 0x00	; 0
    6f30:	a9 f7       	brne	.-22     	; 0x6f1c <__mulsf3_pse+0x64>
    6f32:	9e 3f       	cpi	r25, 0xFE	; 254
    6f34:	51 05       	cpc	r21, r1
    6f36:	80 f0       	brcs	.+32     	; 0x6f58 <__mulsf3_pse+0xa0>
    6f38:	0c 94 90 2f 	jmp	0x5f20	; 0x5f20 <__fp_inf>
    6f3c:	0c 94 db 2f 	jmp	0x5fb6	; 0x5fb6 <__fp_szero>
    6f40:	5f 3f       	cpi	r21, 0xFF	; 255
    6f42:	e4 f3       	brlt	.-8      	; 0x6f3c <__mulsf3_pse+0x84>
    6f44:	98 3e       	cpi	r25, 0xE8	; 232
    6f46:	d4 f3       	brlt	.-12     	; 0x6f3c <__mulsf3_pse+0x84>
    6f48:	86 95       	lsr	r24
    6f4a:	77 95       	ror	r23
    6f4c:	67 95       	ror	r22
    6f4e:	b7 95       	ror	r27
    6f50:	f7 95       	ror	r31
    6f52:	e7 95       	ror	r30
    6f54:	9f 5f       	subi	r25, 0xFF	; 255
    6f56:	c1 f7       	brne	.-16     	; 0x6f48 <__mulsf3_pse+0x90>
    6f58:	fe 2b       	or	r31, r30
    6f5a:	88 0f       	add	r24, r24
    6f5c:	91 1d       	adc	r25, r1
    6f5e:	96 95       	lsr	r25
    6f60:	87 95       	ror	r24
    6f62:	97 f9       	bld	r25, 7
    6f64:	08 95       	ret

00006f66 <eeprom_read_block>:
    6f66:	dc 01       	movw	r26, r24
    6f68:	cb 01       	movw	r24, r22

00006f6a <eeprom_read_blraw>:
    6f6a:	fc 01       	movw	r30, r24
    6f6c:	f9 99       	sbic	0x1f, 1	; 31
    6f6e:	fe cf       	rjmp	.-4      	; 0x6f6c <eeprom_read_blraw+0x2>
    6f70:	06 c0       	rjmp	.+12     	; 0x6f7e <eeprom_read_blraw+0x14>
    6f72:	f2 bd       	out	0x22, r31	; 34
    6f74:	e1 bd       	out	0x21, r30	; 33
    6f76:	f8 9a       	sbi	0x1f, 0	; 31
    6f78:	31 96       	adiw	r30, 0x01	; 1
    6f7a:	00 b4       	in	r0, 0x20	; 32
    6f7c:	0d 92       	st	X+, r0
    6f7e:	41 50       	subi	r20, 0x01	; 1
    6f80:	50 40       	sbci	r21, 0x00	; 0
    6f82:	b8 f7       	brcc	.-18     	; 0x6f72 <eeprom_read_blraw+0x8>
    6f84:	08 95       	ret

00006f86 <eeprom_update_byte>:
    6f86:	26 2f       	mov	r18, r22

00006f88 <eeprom_update_r18>:
    6f88:	f9 99       	sbic	0x1f, 1	; 31
    6f8a:	fe cf       	rjmp	.-4      	; 0x6f88 <eeprom_update_r18>
    6f8c:	92 bd       	out	0x22, r25	; 34
    6f8e:	81 bd       	out	0x21, r24	; 33
    6f90:	f8 9a       	sbi	0x1f, 0	; 31
    6f92:	01 97       	sbiw	r24, 0x01	; 1
    6f94:	00 b4       	in	r0, 0x20	; 32
    6f96:	02 16       	cp	r0, r18
    6f98:	39 f0       	breq	.+14     	; 0x6fa8 <eeprom_update_r18+0x20>
    6f9a:	1f ba       	out	0x1f, r1	; 31
    6f9c:	20 bd       	out	0x20, r18	; 32
    6f9e:	0f b6       	in	r0, 0x3f	; 63
    6fa0:	f8 94       	cli
    6fa2:	fa 9a       	sbi	0x1f, 2	; 31
    6fa4:	f9 9a       	sbi	0x1f, 1	; 31
    6fa6:	0f be       	out	0x3f, r0	; 63
    6fa8:	08 95       	ret

00006faa <eeprom_write_block>:
    6faa:	dc 01       	movw	r26, r24
    6fac:	cb 01       	movw	r24, r22
    6fae:	03 c0       	rjmp	.+6      	; 0x6fb6 <eeprom_write_block+0xc>
    6fb0:	2d 91       	ld	r18, X+
    6fb2:	0e 94 e0 37 	call	0x6fc0	; 0x6fc0 <eeprom_write_r18>
    6fb6:	41 50       	subi	r20, 0x01	; 1
    6fb8:	50 40       	sbci	r21, 0x00	; 0
    6fba:	d0 f7       	brcc	.-12     	; 0x6fb0 <eeprom_write_block+0x6>
    6fbc:	08 95       	ret

00006fbe <eeprom_write_byte>:
    6fbe:	26 2f       	mov	r18, r22

00006fc0 <eeprom_write_r18>:
    6fc0:	f9 99       	sbic	0x1f, 1	; 31
    6fc2:	fe cf       	rjmp	.-4      	; 0x6fc0 <eeprom_write_r18>
    6fc4:	1f ba       	out	0x1f, r1	; 31
    6fc6:	92 bd       	out	0x22, r25	; 34
    6fc8:	81 bd       	out	0x21, r24	; 33
    6fca:	20 bd       	out	0x20, r18	; 32
    6fcc:	0f b6       	in	r0, 0x3f	; 63
    6fce:	f8 94       	cli
    6fd0:	fa 9a       	sbi	0x1f, 2	; 31
    6fd2:	f9 9a       	sbi	0x1f, 1	; 31
    6fd4:	0f be       	out	0x3f, r0	; 63
    6fd6:	01 96       	adiw	r24, 0x01	; 1
    6fd8:	08 95       	ret

00006fda <__mulsi3>:
    6fda:	db 01       	movw	r26, r22
    6fdc:	8f 93       	push	r24
    6fde:	9f 93       	push	r25
    6fe0:	0e 94 1c 38 	call	0x7038	; 0x7038 <__muluhisi3>
    6fe4:	bf 91       	pop	r27
    6fe6:	af 91       	pop	r26
    6fe8:	a2 9f       	mul	r26, r18
    6fea:	80 0d       	add	r24, r0
    6fec:	91 1d       	adc	r25, r1
    6fee:	a3 9f       	mul	r26, r19
    6ff0:	90 0d       	add	r25, r0
    6ff2:	b2 9f       	mul	r27, r18
    6ff4:	90 0d       	add	r25, r0
    6ff6:	11 24       	eor	r1, r1
    6ff8:	08 95       	ret

00006ffa <__divmodsi4>:
    6ffa:	05 2e       	mov	r0, r21
    6ffc:	97 fb       	bst	r25, 7
    6ffe:	1e f4       	brtc	.+6      	; 0x7006 <__divmodsi4+0xc>
    7000:	00 94       	com	r0
    7002:	0e 94 14 38 	call	0x7028	; 0x7028 <__negsi2>
    7006:	57 fd       	sbrc	r21, 7
    7008:	07 d0       	rcall	.+14     	; 0x7018 <__divmodsi4_neg2>
    700a:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <__udivmodsi4>
    700e:	07 fc       	sbrc	r0, 7
    7010:	03 d0       	rcall	.+6      	; 0x7018 <__divmodsi4_neg2>
    7012:	4e f4       	brtc	.+18     	; 0x7026 <__divmodsi4_exit>
    7014:	0c 94 14 38 	jmp	0x7028	; 0x7028 <__negsi2>

00007018 <__divmodsi4_neg2>:
    7018:	50 95       	com	r21
    701a:	40 95       	com	r20
    701c:	30 95       	com	r19
    701e:	21 95       	neg	r18
    7020:	3f 4f       	sbci	r19, 0xFF	; 255
    7022:	4f 4f       	sbci	r20, 0xFF	; 255
    7024:	5f 4f       	sbci	r21, 0xFF	; 255

00007026 <__divmodsi4_exit>:
    7026:	08 95       	ret

00007028 <__negsi2>:
    7028:	90 95       	com	r25
    702a:	80 95       	com	r24
    702c:	70 95       	com	r23
    702e:	61 95       	neg	r22
    7030:	7f 4f       	sbci	r23, 0xFF	; 255
    7032:	8f 4f       	sbci	r24, 0xFF	; 255
    7034:	9f 4f       	sbci	r25, 0xFF	; 255
    7036:	08 95       	ret

00007038 <__muluhisi3>:
    7038:	0e 94 20 30 	call	0x6040	; 0x6040 <__umulhisi3>
    703c:	a5 9f       	mul	r26, r21
    703e:	90 0d       	add	r25, r0
    7040:	b4 9f       	mul	r27, r20
    7042:	90 0d       	add	r25, r0
    7044:	a4 9f       	mul	r26, r20
    7046:	80 0d       	add	r24, r0
    7048:	91 1d       	adc	r25, r1
    704a:	11 24       	eor	r1, r1
    704c:	08 95       	ret

0000704e <__mulshisi3>:
    704e:	b7 ff       	sbrs	r27, 7
    7050:	0c 94 1c 38 	jmp	0x7038	; 0x7038 <__muluhisi3>

00007054 <__mulohisi3>:
    7054:	0e 94 1c 38 	call	0x7038	; 0x7038 <__muluhisi3>
    7058:	82 1b       	sub	r24, r18
    705a:	93 0b       	sbc	r25, r19
    705c:	08 95       	ret

0000705e <_exit>:
    705e:	f8 94       	cli

00007060 <__stop_program>:
    7060:	ff cf       	rjmp	.-2      	; 0x7060 <__stop_program>
